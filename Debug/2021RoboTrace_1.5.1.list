
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018dd8  08018dd8  00028dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801960c  0801960c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801960c  0801960c  0002960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019614  08019614  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019614  08019614  00029614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801961c  0801961c  0002961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019620  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00049ac8  200001e0  080197fc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20049ca8  080197fc  00039ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bb46  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c40  00000000  00000000  0006bd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b0  00000000  00000000  00073998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020e0  00000000  00000000  00075d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026809  00000000  00000000  000ad2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111491  00000000  00000000  000d3ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e4f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a758  00000000  00000000  001e4ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018dbc 	.word	0x08018dbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018dbc 	.word	0x08018dbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fbea 	bl	800b7b0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200477a0 	.word	0x200477a0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fbd2 	bl	800b7b0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200477a0 	.word	0x200477a0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a fa5b 	bl	800b4dc <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ffc2 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ffbc 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ffb6 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ffb0 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ffaa 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ffa4 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff9e 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff98 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff92 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff8c 	bl	8009fb0 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff80 	bl	8009fb0 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff7a 	bl	8009fb0 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fa11 	bl	8016550 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f8a2 	bl	800f340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f89e 	bl	800f340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f89a 	bl	800f340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f896 	bl	800f340 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004788c 	.word	0x2004788c
 8001248:	200477f4 	.word	0x200477f4
 800124c:	20047914 	.word	0x20047914

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004788c 	.word	0x2004788c
 800137c:	20047914 	.word	0x20047914
 8001380:	200477f4 	.word	0x200477f4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004788c 	.word	0x2004788c
 80013c4:	200477f4 	.word	0x200477f4
 80013c8:	20047914 	.word	0x20047914

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00e f84e 	bl	800f4e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00e f84a 	bl	800f4e0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200479f4 	.word	0x200479f4
 8001468:	200476d8 	.word	0x200476d8
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f978 	bl	8001a78 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001788:	f000 f98c 	bl	8001aa4 <fopen_folder_and_file>

	return ret;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f012 fbf6 	bl	8013f94 <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200465e4 	.word	0x200465e4

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f013 ff5f 	bl	80156b4 <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f012 fc3a 	bl	801407c <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f012 fc35 	bl	801407c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f012 f9a3 	bl	8013b6a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f958 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	08018dd8 	.word	0x08018dd8
 8001850:	20046554 	.word	0x20046554
 8001854:	200465e4 	.word	0x200465e4
 8001858:	200465d4 	.word	0x200465d4

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f900 	bl	8001a78 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f012 fbb1 	bl	8013fe8 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f012 fe1c 	bl	80144c4 <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f012 fbab 	bl	8013fe8 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f907 	bl	8001aa4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f013 fefa 	bl	80156b4 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f012 fbd8 	bl	801407c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f012 f946 	bl	8013b6a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f8fb 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f012 fb4a 	bl	8013f94 <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	20046454 	.word	0x20046454
 8001910:	20045314 	.word	0x20045314
 8001914:	08018df4 	.word	0x08018df4
 8001918:	08018dd8 	.word	0x08018dd8
 800191c:	20046554 	.word	0x20046554
 8001920:	200465e4 	.word	0x200465e4
 8001924:	200465d4 	.word	0x200465d4

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f898 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f8ac 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f013 fefd 	bl	801575c <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f012 ff7a 	bl	8014880 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f8a1 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f012 fafc 	bl	8013f94 <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08018de4 	.word	0x08018de4
 80019ac:	20046554 	.word	0x20046554
 80019b0:	200465e4 	.word	0x200465e4

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f852 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f866 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f013 feb7 	bl	801575c <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f012 ff34 	bl	8014880 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f85b 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f012 fab6 	bl	8013f94 <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08018df0 	.word	0x08018df0
 8001a38:	20046554 	.word	0x20046554
 8001a3c:	200465e4 	.word	0x200465e4

08001a40 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4908      	ldr	r1, [pc, #32]	; (8001a70 <sd_mount+0x30>)
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <sd_mount+0x34>)
 8001a50:	f011 fd18 	bl	8013484 <f_mount>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <sd_mount+0x20>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	e001      	b.n	8001a64 <sd_mount+0x24>
	else ret = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08018e00 	.word	0x08018e00
 8001a74:	20045414 	.word	0x20045414

08001a78 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <create_path+0x24>)
 8001a86:	f013 fe95 	bl	80157b4 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <create_path+0x28>)
 8001a8e:	f013 fe91 	bl	80157b4 <strcpy>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20046454 	.word	0x20046454
 8001aa0:	20045314 	.word	0x20045314

08001aa4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001aaa:	f012 fdcd 	bl	8014648 <f_mkdir>

	f_chdir(dirpath);
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001ab0:	f012 fa9a 	bl	8013fe8 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ab4:	2213      	movs	r2, #19
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <fopen_folder_and_file+0x28>)
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <fopen_folder_and_file+0x2c>)
 8001aba:	f011 fd29 	bl	8013510 <f_open>

	f_chdir("..");
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <fopen_folder_and_file+0x30>)
 8001ac0:	f012 fa92 	bl	8013fe8 <f_chdir>


}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20046454 	.word	0x20046454
 8001acc:	20045314 	.word	0x20045314
 8001ad0:	200465e4 	.word	0x200465e4
 8001ad4:	08018df4 	.word	0x08018df4

08001ad8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	e007      	b.n	8001af4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <bufclear+0x30>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
 8001af8:	ddf4      	ble.n	8001ae4 <bufclear+0xc>
	}
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20046554 	.word	0x20046554

08001b0c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <read_byte+0x54>)
 8001b28:	f009 fcd8 	bl	800b4dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b2c:	f107 010f 	add.w	r1, r7, #15
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2201      	movs	r2, #1
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <read_byte+0x58>)
 8001b36:	f00c fe99 	bl	800e86c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b3a:	f107 010e 	add.w	r1, r7, #14
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2201      	movs	r2, #1
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <read_byte+0x58>)
 8001b44:	f00c ffc6 	bl	800ead4 <HAL_SPI_Receive>
	CS_SET;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <read_byte+0x54>)
 8001b50:	f009 fcc4 	bl	800b4dc <HAL_GPIO_WritePin>

	return val;
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400
 8001b64:	20047680 	.word	0x20047680

08001b68 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <write_byte+0x54>)
 8001b8a:	f009 fca7 	bl	800b4dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b8e:	f107 010f 	add.w	r1, r7, #15
 8001b92:	2364      	movs	r3, #100	; 0x64
 8001b94:	2201      	movs	r2, #1
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <write_byte+0x58>)
 8001b98:	f00c fe68 	bl	800e86c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b9c:	1db9      	adds	r1, r7, #6
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <write_byte+0x58>)
 8001ba4:	f00c fe62 	bl	800e86c <HAL_SPI_Transmit>
	CS_SET;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <write_byte+0x54>)
 8001bb0:	f009 fc94 	bl	800b4dc <HAL_GPIO_WritePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	20047680 	.word	0x20047680

08001bc4 <IMU_init>:

uint16_t IMU_init() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ff9c 	bl	8001b0c <read_byte>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2be0      	cmp	r3, #224	; 0xe0
 8001bdc:	d119      	bne.n	8001c12 <IMU_init+0x4e>
		ret = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001be2:	2101      	movs	r1, #1
 8001be4:	2006      	movs	r0, #6
 8001be6:	f7ff ffbf 	bl	8001b68 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001bea:	2110      	movs	r1, #16
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff ffbb 	bl	8001b68 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	207f      	movs	r0, #127	; 0x7f
 8001bf6:	f7ff ffb7 	bl	8001b68 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001bfa:	2106      	movs	r1, #6
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ffb3 	bl	8001b68 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c02:	2106      	movs	r1, #6
 8001c04:	2014      	movs	r0, #20
 8001c06:	f7ff ffaf 	bl	8001b68 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	207f      	movs	r0, #127	; 0x7f
 8001c0e:	f7ff ffab 	bl	8001b68 <write_byte>
	}
	return ret;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <read_gyro_data>:

void read_gyro_data() {
 8001c1c:	b598      	push	{r3, r4, r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7ff ff73 	bl	8001b0c <read_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	2034      	movs	r0, #52	; 0x34
 8001c2e:	f7ff ff6d 	bl	8001b0c <read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4323      	orrs	r3, r4
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <read_gyro_data+0x64>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c3e:	2035      	movs	r0, #53	; 0x35
 8001c40:	f7ff ff64 	bl	8001b0c <read_byte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21c      	sxth	r4, r3
 8001c4a:	2036      	movs	r0, #54	; 0x36
 8001c4c:	f7ff ff5e 	bl	8001b0c <read_byte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4323      	orrs	r3, r4
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <read_gyro_data+0x68>)
 8001c5a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c5c:	2037      	movs	r0, #55	; 0x37
 8001c5e:	f7ff ff55 	bl	8001b0c <read_byte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21c      	sxth	r4, r3
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f7ff ff4f 	bl	8001b0c <read_byte>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4323      	orrs	r3, r4
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <read_gyro_data+0x6c>)
 8001c78:	801a      	strh	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	bd98      	pop	{r3, r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2004761c 	.word	0x2004761c
 8001c84:	2004761a 	.word	0x2004761a
 8001c88:	20047614 	.word	0x20047614

08001c8c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	805a      	strh	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	809a      	strh	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	80da      	strh	r2, [r3, #6]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	811a      	strh	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	815a      	strh	r2, [r3, #10]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
{

}
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cd8:	f7ff ff74 	bl	8001bc4 <IMU_init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ce0:	f7ff f9de 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f9ea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <_ZN3IMU4initEv+0x44>)
 8001cee:	f7ff fa11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f9e3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <_ZN3IMU4initEv+0x48>)
 8001d00:	f7ff fa08 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f008 f952 	bl	8009fb0 <HAL_Delay>

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	08018e04 	.word	0x08018e04
 8001d18:	08018e10 	.word	0x08018e10
 8001d1c:	00000000 	.word	0x00000000

08001d20 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d28:	f7ff ff78 	bl	8001c1c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbff 	bl	8000554 <__aeabi_i2d>
 8001d56:	a316      	add	r3, pc, #88	; (adr r3, 8001db0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc64 	bl	8000628 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4625      	mov	r5, r4
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf0 	bl	8000554 <__aeabi_i2d>
 8001d74:	a310      	add	r3, pc, #64	; (adr r3, 8001db8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4621      	mov	r1, r4
 8001d92:	f7fe fef9 	bl	8000b88 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001da6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	47ae147b 	.word	0x47ae147b
 8001db4:	3f847ae1 	.word	0x3f847ae1
 8001db8:	7ae147ae 	.word	0x7ae147ae
 8001dbc:	3fefae14 	.word	0x3fefae14
 8001dc0:	2004761c 	.word	0x2004761c
 8001dc4:	2004761a 	.word	0x2004761a
 8001dc8:	20047614 	.word	0x20047614
 8001dcc:	200001fc 	.word	0x200001fc

08001dd0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fbbf 	bl	8000578 <__aeabi_f2d>
 8001dfa:	a316      	add	r3, pc, #88	; (adr r3, 8001e54 <_ZN3IMU8getOmegaEv+0x84>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fd3c 	bl	800087c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e0e:	a313      	add	r3, pc, #76	; (adr r3, 8001e5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fc06 	bl	8000628 <__aeabi_dmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <_ZN3IMU8getOmegaEv+0x80>)
 8001e2a:	f7fe fd27 	bl	800087c <__aeabi_ddiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe feef 	bl	8000c18 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
}
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40668000 	.word	0x40668000
 8001e54:	66666666 	.word	0x66666666
 8001e58:	40306666 	.word	0x40306666
 8001e5c:	54411744 	.word	0x54411744
 8001e60:	400921fb 	.word	0x400921fb

08001e64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e6c:	466b      	mov	r3, sp
 8001e6e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e70:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e74:	f008 f89c 	bl	8009fb0 <HAL_Delay>
	lcd_clear();
 8001e78:	f7ff f912 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f91e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e84:	4840      	ldr	r0, [pc, #256]	; (8001f88 <_ZN3IMU11calibrationEv+0x124>)
 8001e86:	f7ff f945 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f917 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e92:	483e      	ldr	r0, [pc, #248]	; (8001f8c <_ZN3IMU11calibrationEv+0x128>)
 8001e94:	f7ff f93e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea2:	1e5d      	subs	r5, r3, #1
 8001ea4:	61bd      	str	r5, [r7, #24]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	0154      	lsls	r4, r2, #5
 8001eba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ebe:	014b      	lsls	r3, r1, #5
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0154      	lsls	r4, r2, #5
 8001ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed8:	014b      	lsls	r3, r1, #5
 8001eda:	462b      	mov	r3, r5
 8001edc:	3301      	adds	r3, #1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8001eec:	466b      	mov	r3, sp
 8001eee:	3303      	adds	r3, #3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	83fb      	strh	r3, [r7, #30]
 8001efa:	8bfa      	ldrh	r2, [r7, #30]
 8001efc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da13      	bge.n	8001f2c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f0a:	8bfb      	ldrh	r3, [r7, #30]
 8001f0c:	ee07 2a90 	vmov	s15, r2
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f008 f846 	bl	8009fb0 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	3301      	adds	r3, #1
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	e7e6      	b.n	8001efa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	462b      	mov	r3, r5
 8001f34:	3301      	adds	r3, #1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d00e      	beq.n	8001f62 <_ZN3IMU11calibrationEv+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e7ec      	b.n	8001f3c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f7c:	46b5      	mov	sp, r6
}
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08018e14 	.word	0x08018e14
 8001f8c:	08018e20 	.word	0x08018e20

08001f90 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <INA260_read+0x50>)
 8001fae:	f009 fbff 	bl	800b7b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <INA260_read+0x50>)
 8001fc2:	f009 fcf3 	bl	800b9ac <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20047834 	.word	0x20047834

08001fe4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	717b      	strb	r3, [r7, #5]
 8001ffe:	4613      	mov	r3, r2
 8002000:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	737b      	strb	r3, [r7, #13]
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	b299      	uxth	r1, r3
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2303      	movs	r3, #3
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <INA260_write+0x48>)
 800201e:	f009 fbc7 	bl	800b7b0 <HAL_I2C_Master_Transmit>
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	20047834 	.word	0x20047834

08002030 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002042:	797b      	ldrb	r3, [r7, #5]
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	79f9      	ldrb	r1, [r7, #7]
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff ffcb 	bl	8001fe4 <INA260_write>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	461a      	mov	r2, r3
 8002064:	21df      	movs	r1, #223	; 0xdf
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffe2 	bl	8002030 <setConfig>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
{

}
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 800209e:	f009 fa05 	bl	800b4ac <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <_ZN8JoyStick8getValueEv+0x2e>
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020ba:	2101      	movs	r1, #1
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <_ZN8JoyStick8getValueEv+0xc0>)
 80020be:	f009 f9f5 	bl	800b4ac <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x4e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 80020e0:	f009 f9e4 	bl	800b4ac <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <_ZN8JoyStick8getValueEv+0x70>
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80020fc:	2104      	movs	r1, #4
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <_ZN8JoyStick8getValueEv+0xc4>)
 8002100:	f009 f9d4 	bl	800b4ac <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x90>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f009 f9c4 	bl	800b4ac <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0xb0>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800213c:	89fb      	ldrh	r3, [r7, #14]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400

08002154 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b52      	cmp	r3, #82	; 0x52
 8002164:	d112      	bne.n	800218c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4856      	ldr	r0, [pc, #344]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f009 f9b5 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800217a:	f009 f9af 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002184:	4850      	ldr	r0, [pc, #320]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002186:	f009 f9a9 	bl	800b4dc <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800218a:	e098      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b47      	cmp	r3, #71	; 0x47
 8002190:	d112      	bne.n	80021b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	484b      	ldr	r0, [pc, #300]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f009 f99f 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a4:	4848      	ldr	r0, [pc, #288]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f009 f999 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021b2:	f009 f993 	bl	800b4dc <HAL_GPIO_WritePin>
}
 80021b6:	e082      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b42      	cmp	r3, #66	; 0x42
 80021bc:	d112      	bne.n	80021e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f009 f989 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f009 f983 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	483a      	ldr	r0, [pc, #232]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021de:	f009 f97d 	bl	800b4dc <HAL_GPIO_WritePin>
}
 80021e2:	e06c      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b43      	cmp	r3, #67	; 0x43
 80021e8:	d112      	bne.n	8002210 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4835      	ldr	r0, [pc, #212]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f009 f973 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f009 f96d 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	482f      	ldr	r0, [pc, #188]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800220a:	f009 f967 	bl	800b4dc <HAL_GPIO_WritePin>
}
 800220e:	e056      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b4d      	cmp	r3, #77	; 0x4d
 8002214:	d112      	bne.n	800223c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	482a      	ldr	r0, [pc, #168]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f009 f95d 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f009 f957 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	4824      	ldr	r0, [pc, #144]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002236:	f009 f951 	bl	800b4dc <HAL_GPIO_WritePin>
}
 800223a:	e040      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b59      	cmp	r3, #89	; 0x59
 8002240:	d112      	bne.n	8002268 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002248:	481f      	ldr	r0, [pc, #124]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f009 f947 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f009 f941 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002262:	f009 f93b 	bl	800b4dc <HAL_GPIO_WritePin>
}
 8002266:	e02a      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b57      	cmp	r3, #87	; 0x57
 800226c:	d112      	bne.n	8002294 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f009 f931 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f009 f92b 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800228e:	f009 f925 	bl	800b4dc <HAL_GPIO_WritePin>
}
 8002292:	e014      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b7e      	cmp	r3, #126	; 0x7e
 8002298:	d111      	bne.n	80022be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f009 f91b 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ac:	4806      	ldr	r0, [pc, #24]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f009 f915 	bl	800b4dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ba:	f009 f90f 	bl	800b4dc <HAL_GPIO_WritePin>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020000 	.word	0x40020000

080022cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	4613      	mov	r3, r2
 80022da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 80022ec:	f009 f8f6 	bl	800b4dc <HAL_GPIO_WritePin>
 80022f0:	e009      	b.n	8002306 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002302:	f009 f8eb 	bl	800b4dc <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002306:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002316:	f009 f8e1 	bl	800b4dc <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800231a:	e009      	b.n	8002330 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800231c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 800232c:	f009 f8d6 	bl	800b4dc <HAL_GPIO_WritePin>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40020000 	.word	0x40020000

0800233c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800233c:	b580      	push	{r7, lr}
 800233e:	b092      	sub	sp, #72	; 0x48
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe92 	bl	8002074 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	331c      	adds	r3, #28
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	429a      	cmp	r2, r3
 8002364:	d008      	beq.n	8002378 <_ZN10LineSensorC1Ev+0x3c>
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	3302      	adds	r3, #2
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
 8002376:	e7f2      	b.n	800235e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	429a      	cmp	r2, r3
 8002390:	d009      	beq.n	80023a6 <_ZN10LineSensorC1Ev+0x6a>
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	623b      	str	r3, [r7, #32]
		s = 0;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	3304      	adds	r3, #4
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	e7f1      	b.n	800238a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3338      	adds	r3, #56	; 0x38
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d009      	beq.n	80023d4 <_ZN10LineSensorC1Ev+0x98>
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	3304      	adds	r3, #4
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	e7f1      	b.n	80023b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3338      	adds	r3, #56	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d009      	beq.n	8002402 <_ZN10LineSensorC1Ev+0xc6>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	3304      	adds	r3, #4
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	e7f1      	b.n	80023e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3748      	adds	r7, #72	; 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	220e      	movs	r2, #14
 8002418:	4619      	mov	r1, r3
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800241c:	f007 fe2e 	bl	800a07c <HAL_ADC_Start_DMA>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20047758 	.word	0x20047758

0800242c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b0d      	cmp	r3, #13
 800243c:	dc2f      	bgt.n	800249e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3392      	adds	r3, #146	; 0x92
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	33a0      	adds	r3, #160	; 0xa0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a5b      	subs	r3, r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	440b      	add	r3, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e7cc      	b.n	8002438 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d902      	bls.n	80024b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]


}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	200001fe 	.word	0x200001fe

080024c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024da:	2b0d      	cmp	r3, #13
 80024dc:	f200 8087 	bhi.w	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d81c      	bhi.n	8002528 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80024ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80024f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80024f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4423      	add	r3, r4
 8002506:	3306      	adds	r3, #6
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3304      	adds	r3, #4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	008b      	lsls	r3, r1, #2
 8002512:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002516:	440b      	add	r3, r1
 8002518:	3b30      	subs	r3, #48	; 0x30
 800251a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800251c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002520:	3301      	adds	r3, #1
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	e7de      	b.n	80024e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800252e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002532:	2b09      	cmp	r3, #9
 8002534:	d84d      	bhi.n	80025d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800253a:	3301      	adds	r3, #1
 800253c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002544:	2b09      	cmp	r3, #9
 8002546:	d83e      	bhi.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002564:	4413      	add	r3, r2
 8002566:	3b30      	subs	r3, #48	; 0x30
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d521      	bpl.n	80025ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002580:	4413      	add	r3, r2
 8002582:	3b30      	subs	r3, #48	; 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002588:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800258c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002596:	440a      	add	r2, r1
 8002598:	3a30      	subs	r2, #48	; 0x30
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025a2:	440b      	add	r3, r1
 80025a4:	3b30      	subs	r3, #48	; 0x30
 80025a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b2:	4413      	add	r3, r2
 80025b4:	3b30      	subs	r3, #48	; 0x30
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c4:	e7bc      	b.n	8002540 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025d0:	e7ad      	b.n	800252e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80025d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	33b0      	adds	r3, #176	; 0xb0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025e6:	3301      	adds	r3, #1
 80025e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025ec:	e773      	b.n	80024d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	; 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc90      	pop	{r4, r7}
 80025f6:	4770      	bx	lr

080025f8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a0      	sub	sp, #128	; 0x80
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	f007 fcd5 	bl	8009fb0 <HAL_Delay>

	lcd_clear();
 8002606:	f7fe fd4b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fd57 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <_ZN10LineSensor11calibrationEv+0x234>)
 8002614:	f7fe fd7e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002618:	2101      	movs	r1, #1
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fd50 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002620:	4883      	ldr	r0, [pc, #524]	; (8002830 <_ZN10LineSensor11calibrationEv+0x238>)
 8002622:	f7fe fd77 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800262c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002630:	2b0d      	cmp	r3, #13
 8002632:	d823      	bhi.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002634:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002638:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	32b0      	adds	r2, #176	; 0xb0
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	440a      	add	r2, r1
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800264c:	440b      	add	r3, r1
 800264e:	3b40      	subs	r3, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002652:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002656:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	32b0      	adds	r2, #176	; 0xb0
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	440a      	add	r2, r1
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800266a:	440b      	add	r3, r1
 800266c:	3b78      	subs	r3, #120	; 0x78
 800266e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002670:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002674:	3301      	adds	r3, #1
 8002676:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800267a:	e7d7      	b.n	800262c <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd02 	bl	800208c <_ZN8JoyStick8getValueEv>
 8002688:	4603      	mov	r3, r0
 800268a:	2b02      	cmp	r3, #2
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800269e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d850      	bhi.n	8002748 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80026a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026b0:	4413      	add	r3, r2
 80026b2:	3b40      	subs	r3, #64	; 0x40
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	33b0      	adds	r3, #176	; 0xb0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d50f      	bpl.n	80026f2 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80026d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	32b0      	adds	r2, #176	; 0xb0
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	440a      	add	r2, r1
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026ea:	440b      	add	r3, r1
 80026ec:	3b40      	subs	r3, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e024      	b.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80026f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026fc:	4413      	add	r3, r2
 80026fe:	3b78      	subs	r3, #120	; 0x78
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	33b0      	adds	r3, #176	; 0xb0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd0e      	ble.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800271e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002722:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	32b0      	adds	r2, #176	; 0xb0
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	440a      	add	r2, r1
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002736:	440b      	add	r3, r1
 8002738:	3b78      	subs	r3, #120	; 0x78
 800273a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002740:	3301      	adds	r3, #1
 8002742:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002746:	e7aa      	b.n	800269e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fec4 	bl	80054dc <_ZN12RotarySwitch8getValueEv>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800276a:	2201      	movs	r2, #1
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fdab 	bl	80022cc <_ZN3LED2LREaa>
 8002776:	e781      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800277e:	2200      	movs	r2, #0
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fda1 	bl	80022cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800278a:	e777      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002792:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002796:	2b0d      	cmp	r3, #13
 8002798:	d826      	bhi.n	80027e8 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800279a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027a4:	4413      	add	r3, r2
 80027a6:	3b40      	subs	r3, #64	; 0x40
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b6:	4413      	add	r3, r2
 80027b8:	3b78      	subs	r3, #120	; 0x78
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027c6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002834 <_ZN10LineSensor11calibrationEv+0x23c>
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	3392      	adds	r3, #146	; 0x92
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80027e6:	e7d4      	b.n	8002792 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027f2:	2b0d      	cmp	r3, #13
 80027f4:	d815      	bhi.n	8002822 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80027f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80027fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002804:	440a      	add	r2, r1
 8002806:	3a78      	subs	r2, #120	; 0x78
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	33a0      	adds	r3, #160	; 0xa0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3304      	adds	r3, #4
 8002814:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002816:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800281a:	3301      	adds	r3, #1
 800281c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002820:	e7e5      	b.n	80027ee <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002822:	bf00      	nop
 8002824:	3780      	adds	r7, #128	; 0x80
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	08018e2c 	.word	0x08018e2c
 8002830:	08018e38 	.word	0x08018e38
 8002834:	447a0000 	.word	0x447a0000

08002838 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002844:	2303      	movs	r3, #3
 8002846:	81bb      	strh	r3, [r7, #12]
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d814      	bhi.n	8002878 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028cc <_ZN10LineSensor13emergencyStopEv+0x94>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	db02      	blt.n	8002870 <_ZN10LineSensor13emergencyStopEv+0x38>
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	81bb      	strh	r3, [r7, #12]
 8002876:	e7e7      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	2b07      	cmp	r3, #7
 800287c:	d906      	bls.n	800288c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e002      	b.n	8002892 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b63      	cmp	r3, #99	; 0x63
 8002898:	d903      	bls.n	80028a2 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d903      	bls.n	80028bc <_ZN10LineSensor13emergencyStopEv+0x84>
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80028ba:	801a      	strh	r2, [r3, #0]

	return flag;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028be:	781b      	ldrb	r3, [r3, #0]

}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	44098000 	.word	0x44098000
 80028d0:	20000200 	.word	0x20000200
 80028d4:	20000202 	.word	0x20000202

080028d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	ed87 0a01 	vstr	s0, [r7, #4]
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	eef0 7ae7 	vabs.f32	s15, s15
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_flag_force_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002976:	330c      	adds	r3, #12
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002984:	3350      	adds	r3, #80	; 0x50
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002990:	3352      	adds	r3, #82	; 0x52
 8002992:	2200      	movs	r2, #0
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800299c:	3354      	adds	r3, #84	; 0x54
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029a8:	3318      	adds	r3, #24
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029b4:	331c      	adds	r3, #28
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029c0:	331e      	adds	r3, #30
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029cc:	3320      	adds	r3, #32
 80029ce:	2200      	movs	r2, #0
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d8:	3322      	adds	r3, #34	; 0x22
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e4:	3323      	adds	r3, #35	; 0x23
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029fc:	3325      	adds	r3, #37	; 0x25
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a08:	3328      	adds	r3, #40	; 0x28
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a16:	332c      	adds	r3, #44	; 0x2c
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a24:	3330      	adds	r3, #48	; 0x30
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a32:	3334      	adds	r3, #52	; 0x34
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a40:	3338      	adds	r3, #56	; 0x38
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a4c:	333a      	adds	r3, #58	; 0x3a
 8002a4e:	2200      	movs	r2, #0
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a58:	333c      	adds	r3, #60	; 0x3c
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a64:	333e      	adds	r3, #62	; 0x3e
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a80:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a86:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8c:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a92:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a98:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	83fb      	strh	r3, [r7, #30]
 8002aa4:	8bfb      	ldrh	r3, [r7, #30]
 8002aa6:	f241 726f 	movw	r2, #5999	; 0x176f
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d80d      	bhi.n	8002aca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1d2>
		velocity_table_[i] = 0;
 8002aae:	8bfb      	ldrh	r3, [r7, #30]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ac2:	8bfb      	ldrh	r3, [r7, #30]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	83fb      	strh	r3, [r7, #30]
 8002ac8:	e7ec      	b.n	8002aa4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ac>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002aca:	2300      	movs	r3, #0
 8002acc:	83bb      	strh	r3, [r7, #28]
 8002ace:	8bbb      	ldrh	r3, [r7, #28]
 8002ad0:	2b63      	cmp	r3, #99	; 0x63
 8002ad2:	d80d      	bhi.n	8002af0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f8>
		crossline_distance_[i] = 0;
 8002ad4:	8bbb      	ldrh	r3, [r7, #28]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002adc:	3316      	adds	r3, #22
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ae8:	8bbb      	ldrh	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	83bb      	strh	r3, [r7, #28]
 8002aee:	e7ee      	b.n	8002ace <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1d6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002af0:	2300      	movs	r3, #0
 8002af2:	837b      	strh	r3, [r7, #26]
 8002af4:	8b7b      	ldrh	r3, [r7, #26]
 8002af6:	2b63      	cmp	r3, #99	; 0x63
 8002af8:	d80d      	bhi.n	8002b16 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21e>
		crossline_distance2_[i] = 0;
 8002afa:	8b7b      	ldrh	r3, [r7, #26]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b02:	333a      	adds	r3, #58	; 0x3a
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b0e:	8b7b      	ldrh	r3, [r7, #26]
 8002b10:	3301      	adds	r3, #1
 8002b12:	837b      	strh	r3, [r7, #26]
 8002b14:	e7ee      	b.n	8002af4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1fc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b16:	2300      	movs	r3, #0
 8002b18:	833b      	strh	r3, [r7, #24]
 8002b1a:	8b3b      	ldrh	r3, [r7, #24]
 8002b1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b20:	d20d      	bcs.n	8002b3e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x246>
		sideline_distance_[i] = 0;
 8002b22:	8b3b      	ldrh	r3, [r7, #24]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002b2a:	331e      	adds	r3, #30
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b36:	8b3b      	ldrh	r3, [r7, #24]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	833b      	strh	r3, [r7, #24]
 8002b3c:	e7ed      	b.n	8002b1a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x222>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	82fb      	strh	r3, [r7, #22]
 8002b42:	8afb      	ldrh	r3, [r7, #22]
 8002b44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b48:	d20d      	bcs.n	8002b66 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x26e>
		sideline_distance2_[i] = 0;
 8002b4a:	8afb      	ldrh	r3, [r7, #22]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002b52:	3312      	adds	r3, #18
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b5e:	8afb      	ldrh	r3, [r7, #22]
 8002b60:	3301      	adds	r3, #1
 8002b62:	82fb      	strh	r3, [r7, #22]
 8002b64:	e7ed      	b.n	8002b42 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x24a>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3724      	adds	r7, #36	; 0x24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002bac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc0:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	ee07 3a90 	vmov	s15, r3

}
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002bd8:	b5b0      	push	{r4, r5, r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ffc7 	bl	8002b74 <_ZN9LineTrace9calcErrorEv>
 8002be6:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002bf4:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c0a:	3354      	adds	r3, #84	; 0x54
 8002c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d14c      	bne.n	8002cae <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	ee17 0a90 	vmov	r0, s15
 8002c42:	f7fd fc99 	bl	8000578 <__aeabi_f2d>
 8002c46:	a350      	add	r3, pc, #320	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fe16 	bl	800087c <__aeabi_ddiv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	4618      	mov	r0, r3
 8002c56:	4621      	mov	r1, r4
 8002c58:	f7fd ffde 	bl	8000c18 <__aeabi_d2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc87 	bl	8000578 <__aeabi_f2d>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	ee17 0a90 	vmov	r0, s15
 8002c80:	f7fd fc7a 	bl	8000578 <__aeabi_f2d>
 8002c84:	a340      	add	r3, pc, #256	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fccd 	bl	8000628 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fd fb11 	bl	80002bc <__adddf3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f7fd ffb9 	bl	8000c18 <__aeabi_d2f>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e04b      	b.n	8002d46 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd8:	ee17 0a90 	vmov	r0, s15
 8002cdc:	f7fd fc4c 	bl	8000578 <__aeabi_f2d>
 8002ce0:	a329      	add	r3, pc, #164	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fdc9 	bl	800087c <__aeabi_ddiv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	460c      	mov	r4, r1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	f7fd ff91 	bl	8000c18 <__aeabi_d2f>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fc3a 	bl	8000578 <__aeabi_f2d>
 8002d04:	4604      	mov	r4, r0
 8002d06:	460d      	mov	r5, r1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	ee17 0a90 	vmov	r0, s15
 8002d1a:	f7fd fc2d 	bl	8000578 <__aeabi_f2d>
 8002d1e:	a31a      	add	r3, pc, #104	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fc80 	bl	8000628 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f7fd fac4 	bl	80002bc <__adddf3>
 8002d34:	4603      	mov	r3, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	f7fd ff6c 	bl	8000c18 <__aeabi_d2f>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d44:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002d46:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5c:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002d6a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d72:	4610      	mov	r0, r2
 8002d74:	f003 f844 	bl	8005e00 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6013      	str	r3, [r2, #0]

}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d8c:	3f50624d 	.word	0x3f50624d
 8002d90:	20000214 	.word	0x20000214
 8002d94:	20000210 	.word	0x20000210

08002d98 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fc71 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fa53 	bl	800525a <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 ffe0 	bl	8004d7e <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 f8a6 	bl	8004f2c <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e02:	3318      	adds	r3, #24
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	461c      	mov	r4, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fe fc21 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e0e:	eef0 7a40 	vmov.f32	s15, s0
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002e18:	3316      	adds	r3, #22
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e28:	3318      	adds	r3, #24
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e36:	3318      	adds	r3, #24
 8002e38:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e40:	3318      	adds	r3, #24
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b63      	cmp	r3, #99	; 0x63
 8002e46:	d905      	bls.n	8002e54 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e4e:	3318      	adds	r3, #24
 8002e50:	2263      	movs	r2, #99	; 0x63
 8002e52:	801a      	strh	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e6e:	331a      	adds	r3, #26
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	461c      	mov	r4, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7fe fbeb 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e7a:	eef0 7a40 	vmov.f32	s15, s0
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002e84:	333a      	adds	r3, #58	; 0x3a
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e94:	331a      	adds	r3, #26
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea2:	331a      	adds	r3, #26
 8002ea4:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eac:	331a      	adds	r3, #26
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	2b63      	cmp	r3, #99	; 0x63
 8002eb2:	d905      	bls.n	8002ec0 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eba:	331a      	adds	r3, #26
 8002ebc:	2263      	movs	r2, #99	; 0x63
 8002ebe:	801a      	strh	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}

08002ec8 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eda:	331c      	adds	r3, #28
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461c      	mov	r4, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f7fe fbb5 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002ee6:	eef0 7a40 	vmov.f32	s15, s0
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002ef0:	331e      	adds	r3, #30
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f00:	331c      	adds	r3, #28
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f0e:	331c      	adds	r3, #28
 8002f10:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f18:	331c      	adds	r3, #28
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f20:	d306      	bcc.n	8002f30 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f28:	331c      	adds	r3, #28
 8002f2a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f2e:	801a      	strh	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f4a:	331e      	adds	r3, #30
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fe fb7d 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002f60:	3312      	adds	r3, #18
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f70:	331e      	adds	r3, #30
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f7e:	331e      	adds	r3, #30
 8002f80:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f88:	331e      	adds	r3, #30
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f90:	d306      	bcc.n	8002fa0 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f98:	331e      	adds	r3, #30
 8002f9a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f9e:	801a      	strh	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd90      	pop	{r4, r7, pc}

08002fa8 <_ZN9LineTrace23clearCrossLineDistance2Ev>:
		c = 0;
	}
}

void LineTrace::clearCrossLineDistance2()
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	for(auto &c : crossline_distance2_){
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002fb6:	33e8      	adds	r3, #232	; 0xe8
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d009      	beq.n	8002fe2 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x3a>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	60bb      	str	r3, [r7, #8]
		c = 0;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
	for(auto &c : crossline_distance2_){
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e7f1      	b.n	8002fc6 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x1e>
	}

}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_ZN9LineTrace22clearSideLineDistance2Ev>:
	}

}

void LineTrace::clearSideLineDistance2()
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
	for(auto &s : sideline_distance2_){
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8002ffc:	3348      	adds	r3, #72	; 0x48
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d009      	beq.n	8003028 <_ZN9LineTrace22clearSideLineDistance2Ev+0x3a>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	60bb      	str	r3, [r7, #8]
		s = 0;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
	for(auto &s : sideline_distance2_){
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3304      	adds	r3, #4
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e7f1      	b.n	800300c <_ZN9LineTrace22clearSideLineDistance2Ev+0x1e>
	}

}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	ed2d 8b02 	vpush	{d8}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d046      	beq.n	80030d8 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003050:	3354      	adds	r3, #84	; 0x54
 8003052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11c      	bne.n	8003094 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69dc      	ldr	r4, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fae5 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003068:	eeb0 8a40 	vmov.f32	s16, s0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 f8e1 	bl	8005238 <_ZN8Odometry13getDeltaThetaEv>
 8003076:	ec53 2b10 	vmov	r2, r3, d0
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fdcb 	bl	8000c18 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	ee00 3a90 	vmov	s1, r3
 8003088:	eeb0 0a48 	vmov.f32	s0, s16
 800308c:	4620      	mov	r0, r4
 800308e:	f001 fd81 	bl	8004b94 <_ZN6Logger21storeDistanceAndThetaEff>
 8003092:	e01b      	b.n	80030cc <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69dc      	ldr	r4, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fac8 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 80030a2:	eeb0 8a40 	vmov.f32	s16, s0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 f8c4 	bl	8005238 <_ZN8Odometry13getDeltaThetaEv>
 80030b0:	ec53 2b10 	vmov	r2, r3, d0
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fdae 	bl	8000c18 <__aeabi_d2f>
 80030bc:	4603      	mov	r3, r0
 80030be:	ee00 3a90 	vmov	s1, r3
 80030c2:	eeb0 0a48 	vmov.f32	s0, s16
 80030c6:	4620      	mov	r0, r4
 80030c8:	f001 fd64 	bl	8004b94 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030d6:	801a      	strh	r2, [r3, #0]
	}
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	ecbd 8b02 	vpop	{d8}
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	20000204 	.word	0x20000204

080030e8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f6:	3318      	adds	r3, #24
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d85a      	bhi.n	80031b4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003104:	3318      	adds	r3, #24
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800310e:	3316      	adds	r3, #22
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fa97 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003122:	eeb0 7a40 	vmov.f32	s14, s0
 8003126:	edd7 7a03 	vldr	s15, [r7, #12]
 800312a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800312e:	eeb0 0a67 	vmov.f32	s0, s15
 8003132:	f7ff fbd1 	bl	80028d8 <_ZSt3absf>
 8003136:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 800313a:	edd7 7a02 	vldr	s15, [r7, #8]
 800313e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80031d8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 8003142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	d826      	bhi.n	800319a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003152:	3338      	adds	r3, #56	; 0x38
 8003154:	2200      	movs	r2, #0
 8003156:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6959      	ldr	r1, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003162:	3318      	adds	r3, #24
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800316c:	3316      	adds	r3, #22
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eeb0 0a67 	vmov.f32	s0, s15
 800317a:	4608      	mov	r0, r1
 800317c:	f7fe fa77 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003186:	3318      	adds	r3, #24
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003194:	3318      	adds	r3, #24
 8003196:	801a      	strh	r2, [r3, #0]
			break;
 8003198:	e00c      	b.n	80031b4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031a0:	3318      	adds	r3, #24
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031ae:	3318      	adds	r3, #24
 80031b0:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 80031b2:	e79d      	b.n	80030f0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031ba:	3318      	adds	r3, #24
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	2b63      	cmp	r3, #99	; 0x63
 80031c0:	d905      	bls.n	80031ce <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031c8:	3318      	adds	r3, #24
 80031ca:	2263      	movs	r2, #99	; 0x63
 80031cc:	801a      	strh	r2, [r3, #0]

}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	437a0000 	.word	0x437a0000

080031dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80031e4:	2300      	movs	r3, #0
 80031e6:	82fb      	strh	r3, [r7, #22]
 80031e8:	8afb      	ldrh	r3, [r7, #22]
 80031ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031ee:	d23d      	bcs.n	800326c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 80031f0:	8afb      	ldrh	r3, [r7, #22]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80031f8:	331e      	adds	r3, #30
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fa22 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 800320c:	eeb0 7a40 	vmov.f32	s14, s0
 8003210:	edd7 7a04 	vldr	s15, [r7, #16]
 8003214:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003218:	eeb0 0a67 	vmov.f32	s0, s15
 800321c:	f7ff fb5c 	bl	80028d8 <_ZSt3absf>
 8003220:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003224:	edd7 7a03 	vldr	s15, [r7, #12]
 8003228:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003294 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 800322c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d816      	bhi.n	8003264 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800323c:	3338      	adds	r3, #56	; 0x38
 800323e:	2200      	movs	r2, #0
 8003240:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6959      	ldr	r1, [r3, #20]
 8003246:	8afb      	ldrh	r3, [r7, #22]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800324e:	331e      	adds	r3, #30
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	4608      	mov	r0, r1
 800325e:	f7fe fa06 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003262:	e003      	b.n	800326c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	3301      	adds	r3, #1
 8003268:	82fb      	strh	r3, [r7, #22]
 800326a:	e7bd      	b.n	80031e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003272:	331c      	adds	r3, #28
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800327a:	d306      	bcc.n	800328a <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003282:	331c      	adds	r3, #28
 8003284:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003288:	801a      	strh	r2, [r3, #0]

}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	43660000 	.word	0x43660000

08003298 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032aa:	3354      	adds	r3, #84	; 0x54
 80032ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d144      	bne.n	800333e <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 80032b4:	edd7 7a00 	vldr	s15, [r7]
 80032b8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80033f0 <_ZN9LineTrace15radius2VelocityEf+0x158>
 80032bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d504      	bpl.n	80032d0 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e084      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 80032d0:	edd7 7a00 	vldr	s15, [r7]
 80032d4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80033f4 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80032d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	d503      	bpl.n	80032ea <_ZN9LineTrace15radius2VelocityEf+0x52>
 80032e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e077      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80032ea:	edd7 7a00 	vldr	s15, [r7]
 80032ee:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80033f8 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d503      	bpl.n	8003304 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 80032fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e06a      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003304:	edd7 7a00 	vldr	s15, [r7]
 8003308:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80033fc <_ZN9LineTrace15radius2VelocityEf+0x164>
 800330c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d502      	bpl.n	800331c <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e05e      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 800331c:	edd7 7a00 	vldr	s15, [r7]
 8003320:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003404 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	d502      	bpl.n	8003334 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e052      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e04d      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003344:	3354      	adds	r3, #84	; 0x54
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d143      	bne.n	80033d6 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 800334e:	edd7 7a00 	vldr	s15, [r7]
 8003352:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80033f0 <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d504      	bpl.n	800336a <_ZN9LineTrace15radius2VelocityEf+0xd2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e037      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 800336a:	edd7 7a00 	vldr	s15, [r7]
 800336e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80033f4 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 8003372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	d502      	bpl.n	8003382 <_ZN9LineTrace15radius2VelocityEf+0xea>
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <_ZN9LineTrace15radius2VelocityEf+0x174>)
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e02b      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 8003382:	edd7 7a00 	vldr	s15, [r7]
 8003386:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80033f8 <_ZN9LineTrace15radius2VelocityEf+0x160>
 800338a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	d503      	bpl.n	800339c <_ZN9LineTrace15radius2VelocityEf+0x104>
 8003394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e01e      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 800339c:	edd7 7a00 	vldr	s15, [r7]
 80033a0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80033fc <_ZN9LineTrace15radius2VelocityEf+0x164>
 80033a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	d502      	bpl.n	80033b4 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e012      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 80033b4:	edd7 7a00 	vldr	s15, [r7]
 80033b8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003404 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 80033bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d502      	bpl.n	80033cc <_ZN9LineTrace15radius2VelocityEf+0x134>
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e006      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e001      	b.n	80033da <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <_ZN9LineTrace15radius2VelocityEf+0x178>)
 80033d8:	60fb      	str	r3, [r7, #12]

	return velocity;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	ee07 3a90 	vmov	s15, r3
}
 80033e0:	eeb0 0a67 	vmov.f32	s0, s15
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	43c80000 	.word	0x43c80000
 80033f4:	43fa0000 	.word	0x43fa0000
 80033f8:	44228000 	.word	0x44228000
 80033fc:	44bb8000 	.word	0x44bb8000
 8003400:	40200000 	.word	0x40200000
 8003404:	44fa0000 	.word	0x44fa0000
 8003408:	40400000 	.word	0x40400000
 800340c:	3fd9999a 	.word	0x3fd9999a
 8003410:	3fa66666 	.word	0x3fa66666
 8003414:	00000000 	.word	0x00000000

08003418 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	ed87 0a02 	vstr	s0, [r7, #8]
 8003424:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003426:	f241 736f 	movw	r3, #5999	; 0x176f
 800342a:	83fb      	strh	r3, [r7, #30]
 800342c:	8bfb      	ldrh	r3, [r7, #30]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 808d 	beq.w	800354e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	3b01      	subs	r3, #1
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800343e:	3304      	adds	r3, #4
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	8bfb      	ldrh	r3, [r7, #30]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003450:	3304      	adds	r3, #4
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003462:	edd7 7a06 	vldr	s15, [r7, #24]
 8003466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	dd6a      	ble.n	8003546 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f87c 	bl	8000578 <__aeabi_f2d>
 8003480:	a335      	add	r3, pc, #212	; (adr r3, 8003558 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd f8cf 	bl	8000628 <__aeabi_dmul>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	4625      	mov	r5, r4
 8003490:	461c      	mov	r4, r3
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f7fd f870 	bl	8000578 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4620      	mov	r0, r4
 800349e:	4629      	mov	r1, r5
 80034a0:	f7fd f9ec 	bl	800087c <__aeabi_ddiv>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	4618      	mov	r0, r3
 80034aa:	4621      	mov	r1, r4
 80034ac:	f7fd fbb4 	bl	8000c18 <__aeabi_d2f>
 80034b0:	4603      	mov	r3, r0
 80034b2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80034b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80034bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80034c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	dd37      	ble.n	8003546 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034d6:	8bfb      	ldrh	r3, [r7, #30]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034de:	3304      	adds	r3, #4
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd f846 	bl	8000578 <__aeabi_f2d>
 80034ec:	4604      	mov	r4, r0
 80034ee:	460d      	mov	r5, r1
 80034f0:	8bfb      	ldrh	r3, [r7, #30]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003504:	ee17 0a90 	vmov	r0, s15
 8003508:	f7fd f836 	bl	8000578 <__aeabi_f2d>
 800350c:	a312      	add	r3, pc, #72	; (adr r3, 8003558 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f7fd f889 	bl	8000628 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fc fecd 	bl	80002bc <__adddf3>
 8003522:	4603      	mov	r3, r0
 8003524:	460c      	mov	r4, r1
 8003526:	4619      	mov	r1, r3
 8003528:	4622      	mov	r2, r4
 800352a:	8bfb      	ldrh	r3, [r7, #30]
 800352c:	1e5c      	subs	r4, r3, #1
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	f7fd fb71 	bl	8000c18 <__aeabi_d2f>
 8003536:	4601      	mov	r1, r0
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800353e:	3304      	adds	r3, #4
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003546:	8bfb      	ldrh	r3, [r7, #30]
 8003548:	3b01      	subs	r3, #1
 800354a:	83fb      	strh	r3, [r7, #30]
 800354c:	e76e      	b.n	800342c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800354e:	bf00      	nop
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bdb0      	pop	{r4, r5, r7, pc}
 8003556:	bf00      	nop
 8003558:	d2f1a9fc 	.word	0xd2f1a9fc
 800355c:	3f50624d 	.word	0x3f50624d

08003560 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	ed87 0a02 	vstr	s0, [r7, #8]
 800356c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800356e:	2300      	movs	r3, #0
 8003570:	83fb      	strh	r3, [r7, #30]
 8003572:	8bfb      	ldrh	r3, [r7, #30]
 8003574:	f241 726f 	movw	r2, #5999	; 0x176f
 8003578:	4293      	cmp	r3, r2
 800357a:	f200 808d 	bhi.w	8003698 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800357e:	8bfb      	ldrh	r3, [r7, #30]
 8003580:	3301      	adds	r3, #1
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003588:	3304      	adds	r3, #4
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	ed93 7a00 	vldr	s14, [r3]
 8003592:	8bfb      	ldrh	r3, [r7, #30]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800359a:	3304      	adds	r3, #4
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80035b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b8:	dd6a      	ble.n	8003690 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035ba:	8bfb      	ldrh	r3, [r7, #30]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffd7 	bl	8000578 <__aeabi_f2d>
 80035ca:	a335      	add	r3, pc, #212	; (adr r3, 80036a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd f82a 	bl	8000628 <__aeabi_dmul>
 80035d4:	4603      	mov	r3, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	4625      	mov	r5, r4
 80035da:	461c      	mov	r4, r3
 80035dc:	69b8      	ldr	r0, [r7, #24]
 80035de:	f7fc ffcb 	bl	8000578 <__aeabi_f2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fd f947 	bl	800087c <__aeabi_ddiv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	4618      	mov	r0, r3
 80035f4:	4621      	mov	r1, r4
 80035f6:	f7fd fb0f 	bl	8000c18 <__aeabi_d2f>
 80035fa:	4603      	mov	r3, r0
 80035fc:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80035fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8003602:	ed97 7a05 	vldr	s14, [r7, #20]
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800360e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003612:	edd7 7a02 	vldr	s15, [r7, #8]
 8003616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	dd37      	ble.n	8003690 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003620:	8bfb      	ldrh	r3, [r7, #30]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003628:	3304      	adds	r3, #4
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ffa1 	bl	8000578 <__aeabi_f2d>
 8003636:	4604      	mov	r4, r0
 8003638:	460d      	mov	r5, r1
 800363a:	8bfb      	ldrh	r3, [r7, #30]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	ed93 7a00 	vldr	s14, [r3]
 8003646:	edd7 7a02 	vldr	s15, [r7, #8]
 800364a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364e:	ee17 0a90 	vmov	r0, s15
 8003652:	f7fc ff91 	bl	8000578 <__aeabi_f2d>
 8003656:	a312      	add	r3, pc, #72	; (adr r3, 80036a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fc ffe4 	bl	8000628 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4620      	mov	r0, r4
 8003666:	4629      	mov	r1, r5
 8003668:	f7fc fe28 	bl	80002bc <__adddf3>
 800366c:	4603      	mov	r3, r0
 800366e:	460c      	mov	r4, r1
 8003670:	4619      	mov	r1, r3
 8003672:	4622      	mov	r2, r4
 8003674:	8bfb      	ldrh	r3, [r7, #30]
 8003676:	1c5c      	adds	r4, r3, #1
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	f7fd facc 	bl	8000c18 <__aeabi_d2f>
 8003680:	4601      	mov	r1, r0
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003688:	3304      	adds	r3, #4
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003690:	8bfb      	ldrh	r3, [r7, #30]
 8003692:	3301      	adds	r3, #1
 8003694:	83fb      	strh	r3, [r7, #30]
 8003696:	e76c      	b.n	8003572 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003698:	bf00      	nop
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bdb0      	pop	{r4, r5, r7, pc}
 80036a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036a4:	3f50624d 	.word	0x3f50624d

080036a8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fff7 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c0:	3350      	adds	r3, #80	; 0x50
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036cc:	3352      	adds	r3, #82	; 0x52
 80036ce:	2200      	movs	r2, #0
 80036d0:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036d8:	330c      	adds	r3, #12
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036f6:	3350      	adds	r3, #80	; 0x50
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003702:	3352      	adds	r3, #82	; 0x52
 8003704:	2200      	movs	r2, #0
 8003706:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800370e:	330c      	adds	r3, #12
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003730:	3350      	adds	r3, #80	; 0x50
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05e      	beq.n	80037f6 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd ff87 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003742:	eeb0 7a40 	vmov.f32	s14, s0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800374c:	330c      	adds	r3, #12
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	bfac      	ite	ge
 800375c:	2301      	movge	r3, #1
 800375e:	2300      	movlt	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d025      	beq.n	80037b2 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800376c:	330c      	adds	r3, #12
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003778:	3352      	adds	r3, #82	; 0x52
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	3332      	adds	r3, #50	; 0x32
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003794:	330c      	adds	r3, #12
 8003796:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a0:	3352      	adds	r3, #82	; 0x52
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ae:	3352      	adds	r3, #82	; 0x52
 80037b0:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037b8:	3352      	adds	r3, #82	; 0x52
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	f241 726f 	movw	r2, #5999	; 0x176f
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d906      	bls.n	80037d2 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ca:	3352      	adds	r3, #82	; 0x52
 80037cc:	f241 726f 	movw	r2, #5999	; 0x176f
 80037d0:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037d8:	3352      	adds	r3, #82	; 0x52
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037e2:	3304      	adds	r3, #4
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	eeb0 0a67 	vmov.f32	s0, s15
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 faca 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd ff0d 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003818:	eeb0 7a40 	vmov.f32	s14, s0
 800381c:	edd7 7a00 	vldr	s15, [r7]
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	bf94      	ite	ls
 800382a:	2301      	movls	r3, #1
 800382c:	2300      	movhi	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	//float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
	//float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800385c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003860:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003868:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800387c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003888:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	//static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 800388c:	4a3b      	ldr	r2, [pc, #236]	; (800397c <_ZN9LineTrace11isCrossLineEv+0x138>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <_ZN9LineTrace11isCrossLineEv+0x13c>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 650 && sensor_edge_val_r < 650 && encoder_->getCrossLineIgnoreDistance() >= 60){
 8003898:	edd7 7a03 	vldr	s15, [r7, #12]
 800389c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003984 <_ZN9LineTrace11isCrossLineEv+0x140>
 80038a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a8:	d518      	bpl.n	80038dc <_ZN9LineTrace11isCrossLineEv+0x98>
 80038aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ae:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003984 <_ZN9LineTrace11isCrossLineEv+0x140>
 80038b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ba:	d50f      	bpl.n	80038dc <_ZN9LineTrace11isCrossLineEv+0x98>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd ff1c 	bl	80016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80038c6:	eeb0 7a40 	vmov.f32	s14, s0
 80038ca:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003988 <_ZN9LineTrace11isCrossLineEv+0x144>
 80038ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	db01      	blt.n	80038dc <_ZN9LineTrace11isCrossLineEv+0x98>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <_ZN9LineTrace11isCrossLineEv+0x9a>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x148>)
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x148>)
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	e002      	b.n	80038f6 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x148>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 80038f6:	4b25      	ldr	r3, [pc, #148]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x148>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d938      	bls.n	8003970 <_ZN9LineTrace11isCrossLineEv+0x12c>
			flag = true;
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
			//white_flag = true;
			cnt = 0;
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	4618      	mov	r0, r3
 8003910:	f001 ff3e 	bl	8005790 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fee2 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fefa 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800392e:	3325      	adds	r3, #37	; 0x25
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
			//stable_flag_force_ = true;
			if(mode_selector_ == FIRST_RUNNING){
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800393a:	3354      	adds	r3, #84	; 0x54
 800393c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <_ZN9LineTrace11isCrossLineEv+0x114>
				store_check_cnt_ = 0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800394a:	333a      	adds	r3, #58	; 0x3a
 800394c:	2200      	movs	r2, #0
 800394e:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fa4d 	bl	8002df0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003956:	e00b      	b.n	8003970 <_ZN9LineTrace11isCrossLineEv+0x12c>
			}
			else{
				store_check_cnt_ = 0;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800395e:	333a      	adds	r3, #58	; 0x3a
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fbbf 	bl	80030e8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fa76 	bl	8002e5c <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000208 	.word	0x20000208
 8003980:	2000020c 	.word	0x2000020c
 8003984:	44228000 	.word	0x44228000
 8003988:	42700000 	.word	0x42700000
 800398c:	20000218 	.word	0x20000218
 8003990:	2000021a 	.word	0x2000021a

08003994 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fe44 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 80039aa:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fc2f 	bl	8005216 <_ZN8Odometry8getThetaEv>
 80039b8:	ec54 3b10 	vmov	r3, r4, d0
 80039bc:	4618      	mov	r0, r3
 80039be:	4621      	mov	r1, r4
 80039c0:	f7fd f92a 	bl	8000c18 <__aeabi_d2f>
 80039c4:	4603      	mov	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80039c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80039cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	d101      	bne.n	80039da <_ZN9LineTrace8isStableEv+0x46>
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <_ZN9LineTrace8isStableEv+0xd0>)
 80039d8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80039da:	ed97 7a02 	vldr	s14, [r7, #8]
 80039de:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039e6:	eeb0 0a66 	vmov.f32	s0, s13
 80039ea:	f7fe ff75 	bl	80028d8 <_ZSt3absf>
 80039ee:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80039f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80039f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a68 <_ZN9LineTrace8isStableEv+0xd4>
 80039fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	db01      	blt.n	8003a08 <_ZN9LineTrace8isStableEv+0x74>
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <_ZN9LineTrace8isStableEv+0xd8>)
 8003a06:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a0e:	3325      	adds	r3, #37	; 0x25
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a22:	3325      	adds	r3, #37	; 0x25
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a2c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003a74 <_ZN9LineTrace8isStableEv+0xe0>
 8003a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	db06      	blt.n	8003a48 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e002      	b.n	8003a4e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b18      	cmp	r3, #24
 8003a54:	d901      	bls.n	8003a5a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd90      	pop	{r4, r7, pc}
 8003a64:	3727c5ac 	.word	0x3727c5ac
 8003a68:	459c4000 	.word	0x459c4000
 8003a6c:	459c4000 	.word	0x459c4000
 8003a70:	2000021c 	.word	0x2000021c
 8003a74:	44fa0000 	.word	0x44fa0000

08003a78 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b092      	sub	sp, #72	; 0x48
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a84:	2201      	movs	r2, #1
 8003a86:	4963      	ldr	r1, [pc, #396]	; (8003c14 <_ZN9LineTrace4initEv+0x19c>)
 8003a88:	4863      	ldr	r0, [pc, #396]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003a8a:	f7fd ff4d 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a92:	2201      	movs	r2, #1
 8003a94:	4961      	ldr	r1, [pc, #388]	; (8003c1c <_ZN9LineTrace4initEv+0x1a4>)
 8003a96:	4860      	ldr	r0, [pc, #384]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003a98:	f7fd ff46 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	495f      	ldr	r1, [pc, #380]	; (8003c20 <_ZN9LineTrace4initEv+0x1a8>)
 8003aa4:	485c      	ldr	r0, [pc, #368]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003aa6:	f7fd ff3f 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003aaa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003aae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003ab2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003ab6:	eeb0 1a66 	vmov.f32	s2, s13
 8003aba:	eef0 0a47 	vmov.f32	s1, s14
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8c6 	bl	8003c54 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003acc:	2201      	movs	r2, #1
 8003ace:	4955      	ldr	r1, [pc, #340]	; (8003c24 <_ZN9LineTrace4initEv+0x1ac>)
 8003ad0:	4851      	ldr	r0, [pc, #324]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003ad2:	f7fd ff29 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ada:	2201      	movs	r2, #1
 8003adc:	4952      	ldr	r1, [pc, #328]	; (8003c28 <_ZN9LineTrace4initEv+0x1b0>)
 8003ade:	484e      	ldr	r0, [pc, #312]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003ae0:	f7fd ff22 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4950      	ldr	r1, [pc, #320]	; (8003c2c <_ZN9LineTrace4initEv+0x1b4>)
 8003aec:	484a      	ldr	r0, [pc, #296]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003aee:	f7fd ff1b 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003af2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003af6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003afa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003afe:	eeb0 1a66 	vmov.f32	s2, s13
 8003b02:	eef0 0a47 	vmov.f32	s1, s14
 8003b06:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8e8 	bl	8003ce0 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b14:	2201      	movs	r2, #1
 8003b16:	4946      	ldr	r1, [pc, #280]	; (8003c30 <_ZN9LineTrace4initEv+0x1b8>)
 8003b18:	483f      	ldr	r0, [pc, #252]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b1a:	f7fd ff05 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b22:	2201      	movs	r2, #1
 8003b24:	4943      	ldr	r1, [pc, #268]	; (8003c34 <_ZN9LineTrace4initEv+0x1bc>)
 8003b26:	483c      	ldr	r0, [pc, #240]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b28:	f7fd fefe 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b30:	2201      	movs	r2, #1
 8003b32:	4941      	ldr	r1, [pc, #260]	; (8003c38 <_ZN9LineTrace4initEv+0x1c0>)
 8003b34:	4838      	ldr	r0, [pc, #224]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b36:	f7fd fef7 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003b3a:	f107 0320 	add.w	r3, r7, #32
 8003b3e:	2201      	movs	r2, #1
 8003b40:	493e      	ldr	r1, [pc, #248]	; (8003c3c <_ZN9LineTrace4initEv+0x1c4>)
 8003b42:	4835      	ldr	r0, [pc, #212]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b44:	f7fd fef0 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	493c      	ldr	r1, [pc, #240]	; (8003c40 <_ZN9LineTrace4initEv+0x1c8>)
 8003b50:	4831      	ldr	r0, [pc, #196]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b52:	f7fd fee9 	bl	8001928 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003b56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f913 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003b64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b68:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f91c 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003b72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b76:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f925 	bl	8003dca <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003b80:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b84:	eeb0 0a67 	vmov.f32	s0, s15
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f92e 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b92:	eeb0 0a67 	vmov.f32	s0, s15
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f937 	bl	8003e0a <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003b9c:	f107 0318 	add.w	r3, r7, #24
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4928      	ldr	r1, [pc, #160]	; (8003c44 <_ZN9LineTrace4initEv+0x1cc>)
 8003ba4:	481c      	ldr	r0, [pc, #112]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003ba6:	f7fd febf 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4925      	ldr	r1, [pc, #148]	; (8003c48 <_ZN9LineTrace4initEv+0x1d0>)
 8003bb2:	4819      	ldr	r0, [pc, #100]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003bb4:	f7fd feb8 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bc0:	eef0 0a47 	vmov.f32	s1, s14
 8003bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f97e 	bl	8003eca <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	2201      	movs	r2, #1
 8003be0:	491a      	ldr	r1, [pc, #104]	; (8003c4c <_ZN9LineTrace4initEv+0x1d4>)
 8003be2:	480d      	ldr	r0, [pc, #52]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003be4:	f7fd fea0 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	2201      	movs	r2, #1
 8003bee:	4918      	ldr	r1, [pc, #96]	; (8003c50 <_ZN9LineTrace4initEv+0x1d8>)
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003bf2:	f7fd fe99 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bfe:	eef0 0a47 	vmov.f32	s1, s14
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f979 	bl	8003efe <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c0c:	bf00      	nop
 8003c0e:	3748      	adds	r7, #72	; 0x48
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08018e78 	.word	0x08018e78
 8003c18:	08018e80 	.word	0x08018e80
 8003c1c:	08018e88 	.word	0x08018e88
 8003c20:	08018e90 	.word	0x08018e90
 8003c24:	08018e98 	.word	0x08018e98
 8003c28:	08018ea4 	.word	0x08018ea4
 8003c2c:	08018eb0 	.word	0x08018eb0
 8003c30:	08018ebc 	.word	0x08018ebc
 8003c34:	08018ec8 	.word	0x08018ec8
 8003c38:	08018ed4 	.word	0x08018ed4
 8003c3c:	08018ee0 	.word	0x08018ee0
 8003c40:	08018eec 	.word	0x08018eec
 8003c44:	08018ef8 	.word	0x08018ef8
 8003c48:	08018f00 	.word	0x08018f00
 8003c4c:	08018f08 	.word	0x08018f08
 8003c50:	08018f14 	.word	0x08018f14

08003c54 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c60:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c64:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	return kp_;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	ee07 3a90 	vmov	s15, r3
}
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	return ki_;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	ee07 3a90 	vmov	s15, r3
}
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	ee07 3a90 	vmov	s15, r3
}
 8003cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cec:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cf0:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1e:	ee07 3a90 	vmov	s15, r3
}
 8003d22:	eeb0 0a67 	vmov.f32	s0, s15
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	ee07 3a90 	vmov	s15, r3
}
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	ee07 3a90 	vmov	s15, r3
}
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e38:	ee07 3a90 	vmov	s15, r3
}
 8003e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e58:	ee07 3a90 	vmov	s15, r3
}
 8003e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e78:	ee07 3a90 	vmov	s15, r3
}
 8003e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e98:	ee07 3a90 	vmov	s15, r3
}
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ed6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ee0:	3328      	adds	r3, #40	; 0x28
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003eec:	332c      	adds	r3, #44	; 0x2c
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f0a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f14:	3330      	adds	r3, #48	; 0x30
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f20:	3334      	adds	r3, #52	; 0x34
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f40:	3328      	adds	r3, #40	; 0x28
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	ee07 3a90 	vmov	s15, r3
}
 8003f48:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f64:	3334      	adds	r3, #52	; 0x34
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	ee07 3a90 	vmov	s15, r3
}
 8003f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f88:	3330      	adds	r3, #48	; 0x30
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	ee07 3a90 	vmov	s15, r3
}
 8003f90:	eeb0 0a67 	vmov.f32	s0, s15
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fac:	332c      	adds	r3, #44	; 0x2c
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	ee07 3a90 	vmov	s15, r3
}
 8003fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80b4 	beq.w	8004140 <_ZN9LineTrace4flipEv+0x17c>
		// ---- line following processing -----//
		pidTrace();
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe fdfd 	bl	8002bd8 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fb9f 	bl	8003722 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003fe4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fc08 	bl	80037fe <_ZN9LineTrace16isTargetDistanceEf>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d028      	beq.n	8004046 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff f81d 	bl	8003034 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fcca 	bl	8003994 <_ZN9LineTrace8isStableEv>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <_ZN9LineTrace4flipEv+0x5c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fb98 	bl	8005740 <_ZN10SideSensor10getStatusLEv>
 8004010:	4603      	mov	r3, r0
 8004012:	f083 0301 	eor.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <_ZN9LineTrace4flipEv+0x5c>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <_ZN9LineTrace4flipEv+0x5e>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800402c:	3323      	adds	r3, #35	; 0x23
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fb28 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f90a 	bl	800525a <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fbfc 	bl	8003844 <_ZN9LineTrace11isCrossLineEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004052:	3323      	adds	r3, #35	; 0x23
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <_ZN9LineTrace4flipEv+0xaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fb6e 	bl	8005740 <_ZN10SideSensor10getStatusLEv>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <_ZN9LineTrace4flipEv+0xaa>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <_ZN9LineTrace4flipEv+0xac>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02f      	beq.n	80040d4 <_ZN9LineTrace4flipEv+0x110>
		//if((stable_flag_force_ == true || stable_flag_ == true) && side_sensor_->getStatusL() == true && encoder_->getSideLineIgnoreDistance() >= 120){ //Stabilizing and side sensor is white
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800407a:	3354      	adds	r3, #84	; 0x54
 800407c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <_ZN9LineTrace4flipEv+0xd4>
				store_check_cnt_ = 0;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800408a:	333a      	adds	r3, #58	; 0x3a
 800408c:	2200      	movs	r2, #0
 800408e:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fe ff19 	bl	8002ec8 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004096:	e00b      	b.n	80040b0 <_ZN9LineTrace4flipEv+0xec>
			}
			else{
				store_check_cnt_ = 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800409e:	333a      	adds	r3, #58	; 0x3a
 80040a0:	2200      	movs	r2, #0
 80040a2:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff f899 	bl	80031dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe ff44 	bl	8002f38 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040b6:	3323      	adds	r3, #35	; 0x23
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
			stable_flag_force_ = false;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040c2:	3324      	adds	r3, #36	; 0x24
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ce:	3325      	adds	r3, #37	; 0x25
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
		}



		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fb73 	bl	80057c4 <_ZN10SideSensor13getIgnoreFlagEv>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00f      	beq.n	8004104 <_ZN9LineTrace4flipEv+0x140>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd faeb 	bl	80016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 80040ee:	eeb0 7a40 	vmov.f32	s14, s0
 80040f2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004148 <_ZN9LineTrace4flipEv+0x184>
 80040f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	db01      	blt.n	8004104 <_ZN9LineTrace4flipEv+0x140>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <_ZN9LineTrace4flipEv+0x142>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <_ZN9LineTrace4flipEv+0x150>
			side_sensor_->disableIgnore();
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fb4b 	bl	80057aa <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fb8d 	bl	8002838 <_ZN10LineSensor13emergencyStopEv>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <_ZN9LineTrace4flipEv+0x17c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	eddf 0a08 	vldr	s1, [pc, #32]	; 800414c <_ZN9LineTrace4flipEv+0x188>
 800412c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800414c <_ZN9LineTrace4flipEv+0x188>
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fe65 	bl	8005e00 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd f922 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	42c80000 	.word	0x42c80000
 800414c:	00000000 	.word	0x00000000

08004150 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004162:	3354      	adds	r3, #84	; 0x54
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	801a      	strh	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fe8e 	bl	8005eb2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fae8 	bl	8005770 <_ZN10SideSensor17resetWhiteLineCntEv>
	//clearSideLineDistance();
	clearSideLineDistance2();
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fe ff24 	bl	8002fee <_ZN9LineTrace22clearSideLineDistance2Ev>
	//clearCrossLineDistance();
	clearCrossLineDistance2();
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe fefe 	bl	8002fa8 <_ZN9LineTrace23clearCrossLineDistance2Ev>
	crossline_idx_ = 0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041b2:	3318      	adds	r3, #24
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]
	crossline_idx2_ = 0;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041be:	331a      	adds	r3, #26
 80041c0:	2200      	movs	r2, #0
 80041c2:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ca:	331c      	adds	r3, #28
 80041cc:	2200      	movs	r2, #0
 80041ce:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041d6:	331e      	adds	r3, #30
 80041d8:	2200      	movs	r2, #0
 80041da:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e2:	3320      	adds	r3, #32
 80041e4:	2200      	movs	r2, #0
 80041e6:	801a      	strh	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80041fc:	2300      	movs	r3, #0
 80041fe:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 8004200:	2300      	movs	r3, #0
 8004202:	733b      	strb	r3, [r7, #12]
	start();
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffb5 	bl	8004174 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800420a:	7b7b      	ldrb	r3, [r7, #13]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 815f 	bne.w	80044d0 <_ZN9LineTrace7runningEv+0x2e0>
		switch(stage){
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d03a      	beq.n	800428e <_ZN9LineTrace7runningEv+0x9e>
 8004218:	2b0a      	cmp	r3, #10
 800421a:	d047      	beq.n	80042ac <_ZN9LineTrace7runningEv+0xbc>
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 80c7 	bne.w	80043b0 <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fa96 	bl	8005758 <_ZN10SideSensor10getStatusREv>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80b9 	beq.w	80043a6 <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fe fdaf 	bl	8002d98 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fe55 	bl	8004eee <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800424a:	3354      	adds	r3, #84	; 0x54
 800424c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fa27 	bl	80036a8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd fa3f 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fa57 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd fa18 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	330c      	adds	r3, #12
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe f822 	bl	80022cc <_ZN3LED2LREaa>
				stage = 5;
 8004288:	2305      	movs	r3, #5
 800428a:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800428c:	e08b      	b.n	80043a6 <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	4618      	mov	r0, r3
 8004294:	f001 fa60 	bl	8005758 <_ZN10SideSensor10getStatusREv>
 8004298:	4603      	mov	r3, r0
 800429a:	f083 0301 	eor.w	r3, r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8082 	beq.w	80043aa <_ZN9LineTrace7runningEv+0x1ba>
 80042a6:	230a      	movs	r3, #10
 80042a8:	81fb      	strh	r3, [r7, #14]

			break;
 80042aa:	e07e      	b.n	80043aa <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fa45 	bl	8005740 <_ZN10SideSensor10getStatusLEv>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 80042bc:	2300      	movs	r3, #0
 80042be:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd fa46 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	330c      	adds	r3, #12
 80042ce:	2142      	movs	r1, #66	; 0x42
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fd ff3f 	bl	8002154 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 80042d6:	7b3b      	ldrb	r3, [r7, #12]
 80042d8:	f083 0301 	eor.w	r3, r3, #1
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d017      	beq.n	8004312 <_ZN9LineTrace7runningEv+0x122>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 fa36 	bl	8005758 <_ZN10SideSensor10getStatusREv>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00f      	beq.n	8004312 <_ZN9LineTrace7runningEv+0x122>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fa1e 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 80042fc:	eeb0 7a40 	vmov.f32	s14, s0
 8004300:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	db01      	blt.n	8004312 <_ZN9LineTrace7runningEv+0x122>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <_ZN9LineTrace7runningEv+0x124>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 8004318:	2301      	movs	r3, #1
 800431a:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fd fa18 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800432c:	333c      	adds	r3, #60	; 0x3c
 800432e:	2200      	movs	r2, #0
 8004330:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	330c      	adds	r3, #12
 8004336:	2159      	movs	r1, #89	; 0x59
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd ff0b 	bl	8002154 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 800433e:	e036      	b.n	80043ae <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 8004340:	7b3b      	ldrb	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00f      	beq.n	8004366 <_ZN9LineTrace7runningEv+0x176>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd f9f4 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004350:	eeb0 7a40 	vmov.f32	s14, s0
 8004354:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	db01      	blt.n	8004366 <_ZN9LineTrace7runningEv+0x176>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <_ZN9LineTrace7runningEv+0x178>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	330c      	adds	r3, #12
 8004370:	214d      	movs	r1, #77	; 0x4d
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd feee 	bl	8002154 <_ZN3LED9fullColorEc>
				loggerStop();
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fe fd28 	bl	8002dce <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff f9b2 	bl	80036e8 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004384:	2064      	movs	r0, #100	; 0x64
 8004386:	f005 fe13 	bl	8009fb0 <HAL_Delay>
				setTargetVelocity(0);
 800438a:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80044e0 <_ZN9LineTrace7runningEv+0x2f0>
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fcfb 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004398:	f005 fe0a 	bl	8009fb0 <HAL_Delay>
				goal_flag = true;
 800439c:	2301      	movs	r3, #1
 800439e:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 80043a0:	2300      	movs	r3, #0
 80043a2:	733b      	strb	r3, [r7, #12]
			break;
 80043a4:	e003      	b.n	80043ae <_ZN9LineTrace7runningEv+0x1be>
			break;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 80043ae:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043b6:	3338      	adds	r3, #56	; 0x38
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043c4:	3338      	adds	r3, #56	; 0x38
 80043c6:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043ce:	3338      	adds	r3, #56	; 0x38
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d906      	bls.n	80043e8 <_ZN9LineTrace7runningEv+0x1f8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043e0:	3338      	adds	r3, #56	; 0x38
 80043e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80043e6:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043ee:	3338      	adds	r3, #56	; 0x38
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80043f6:	d805      	bhi.n	8004404 <_ZN9LineTrace7runningEv+0x214>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	330c      	adds	r3, #12
 80043fc:	2152      	movs	r1, #82	; 0x52
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd fea8 	bl	8002154 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800440a:	333a      	adds	r3, #58	; 0x3a
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	3301      	adds	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004418:	333a      	adds	r3, #58	; 0x3a
 800441a:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004422:	333a      	adds	r3, #58	; 0x3a
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	f242 720f 	movw	r2, #9999	; 0x270f
 800442a:	4293      	cmp	r3, r2
 800442c:	d906      	bls.n	800443c <_ZN9LineTrace7runningEv+0x24c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004434:	333a      	adds	r3, #58	; 0x3a
 8004436:	f242 7210 	movw	r2, #10000	; 0x2710
 800443a:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 500) led_.LR(1, -1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004442:	333a      	adds	r3, #58	; 0x3a
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800444a:	d808      	bhi.n	800445e <_ZN9LineTrace7runningEv+0x26e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	330c      	adds	r3, #12
 8004450:	f04f 32ff 	mov.w	r2, #4294967295
 8004454:	2101      	movs	r1, #1
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd ff38 	bl	80022cc <_ZN3LED2LREaa>
 800445c:	e007      	b.n	800446e <_ZN9LineTrace7runningEv+0x27e>
		else led_.LR(0, -1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	330c      	adds	r3, #12
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f7fd ff2f 	bl	80022cc <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004474:	333c      	adds	r3, #60	; 0x3c
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004482:	333c      	adds	r3, #60	; 0x3c
 8004484:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800448c:	333c      	adds	r3, #60	; 0x3c
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f242 720f 	movw	r2, #9999	; 0x270f
 8004494:	4293      	cmp	r3, r2
 8004496:	d906      	bls.n	80044a6 <_ZN9LineTrace7runningEv+0x2b6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800449e:	333c      	adds	r3, #60	; 0x3c
 80044a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80044a4:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044ac:	333c      	adds	r3, #60	; 0x3c
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	2bc8      	cmp	r3, #200	; 0xc8
 80044b2:	d806      	bhi.n	80044c2 <_ZN9LineTrace7runningEv+0x2d2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	330c      	adds	r3, #12
 80044b8:	2159      	movs	r1, #89	; 0x59
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd fe4a 	bl	8002154 <_ZN3LED9fullColorEc>
 80044c0:	e6a3      	b.n	800420a <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	330c      	adds	r3, #12
 80044c6:	2142      	movs	r1, #66	; 0x42
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd fe43 	bl	8002154 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 80044ce:	e69c      	b.n	800420a <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f807 	bl	80044e4 <_ZN9LineTrace4stopEv>
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00000000 	.word	0x00000000

080044e4 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 fced 	bl	8005ed8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	330c      	adds	r3, #12
 8004502:	2201      	movs	r2, #1
 8004504:	f04f 31ff 	mov.w	r1, #4294967295
 8004508:	4618      	mov	r0, r3
 800450a:	f7fd fedf 	bl	80022cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004514:	3354      	adds	r3, #84	; 0x54
 8004516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11e      	bne.n	800455c <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69d8      	ldr	r0, [r3, #28]
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <_ZN9LineTrace4stopEv+0xd8>)
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <_ZN9LineTrace4stopEv+0xdc>)
 8004526:	4927      	ldr	r1, [pc, #156]	; (80045c4 <_ZN9LineTrace4stopEv+0xe0>)
 8004528:	f000 fbc3 	bl	8004cb2 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004532:	3358      	adds	r3, #88	; 0x58
 8004534:	2200      	movs	r2, #0
 8004536:	9200      	str	r2, [sp, #0]
 8004538:	2264      	movs	r2, #100	; 0x64
 800453a:	4923      	ldr	r1, [pc, #140]	; (80045c8 <_ZN9LineTrace4stopEv+0xe4>)
 800453c:	4821      	ldr	r0, [pc, #132]	; (80045c4 <_ZN9LineTrace4stopEv+0xe0>)
 800453e:	f7fd f98d 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004548:	3378      	adds	r3, #120	; 0x78
 800454a:	2200      	movs	r2, #0
 800454c:	9200      	str	r2, [sp, #0]
 800454e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004552:	491e      	ldr	r1, [pc, #120]	; (80045cc <_ZN9LineTrace4stopEv+0xe8>)
 8004554:	481b      	ldr	r0, [pc, #108]	; (80045c4 <_ZN9LineTrace4stopEv+0xe0>)
 8004556:	f7fd f981 	bl	800185c <sd_write_array_float>
 800455a:	e01d      	b.n	8004598 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69d8      	ldr	r0, [r3, #28]
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <_ZN9LineTrace4stopEv+0xec>)
 8004562:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <_ZN9LineTrace4stopEv+0xf0>)
 8004564:	4917      	ldr	r1, [pc, #92]	; (80045c4 <_ZN9LineTrace4stopEv+0xe0>)
 8004566:	f000 fbc7 	bl	8004cf8 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004570:	33e8      	adds	r3, #232	; 0xe8
 8004572:	2200      	movs	r2, #0
 8004574:	9200      	str	r2, [sp, #0]
 8004576:	2264      	movs	r2, #100	; 0x64
 8004578:	4917      	ldr	r1, [pc, #92]	; (80045d8 <_ZN9LineTrace4stopEv+0xf4>)
 800457a:	4812      	ldr	r0, [pc, #72]	; (80045c4 <_ZN9LineTrace4stopEv+0xe0>)
 800457c:	f7fd f96e 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8004586:	3348      	adds	r3, #72	; 0x48
 8004588:	2200      	movs	r2, #0
 800458a:	9200      	str	r2, [sp, #0]
 800458c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004590:	4912      	ldr	r1, [pc, #72]	; (80045dc <_ZN9LineTrace4stopEv+0xf8>)
 8004592:	480c      	ldr	r0, [pc, #48]	; (80045c4 <_ZN9LineTrace4stopEv+0xe0>)
 8004594:	f7fd f962 	bl	800185c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	330c      	adds	r3, #12
 800459c:	2200      	movs	r2, #0
 800459e:	f04f 31ff 	mov.w	r1, #4294967295
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fe92 	bl	80022cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fc7f 	bl	8004eb0 <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	08018f20 	.word	0x08018f20
 80045c0:	08018f2c 	.word	0x08018f2c
 80045c4:	08018f3c 	.word	0x08018f3c
 80045c8:	08018f48 	.word	0x08018f48
 80045cc:	08018f58 	.word	0x08018f58
 80045d0:	08018f64 	.word	0x08018f64
 80045d4:	08018f70 	.word	0x08018f70
 80045d8:	08018f80 	.word	0x08018f80
 80045dc:	08018f90 	.word	0x08018f90

080045e0 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b08b      	sub	sp, #44	; 0x2c
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fb1a 	bl	8004c26 <_ZN6Logger23getDistanceArrayPointerEv>
 80045f2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fb22 	bl	8004c42 <_ZN6Logger20getThetaArrayPointerEv>
 80045fe:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004600:	2300      	movs	r3, #0
 8004602:	837b      	strh	r3, [r7, #26]
 8004604:	8b7b      	ldrh	r3, [r7, #26]
 8004606:	f241 726f 	movw	r2, #5999	; 0x176f
 800460a:	4293      	cmp	r3, r2
 800460c:	d84b      	bhi.n	80046a6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800460e:	8b7b      	ldrh	r3, [r7, #26]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800461a:	8b7b      	ldrh	r3, [r7, #26]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004626:	edd7 7a07 	vldr	s15, [r7, #28]
 800462a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	d101      	bne.n	8004638 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004634:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004636:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004638:	ed97 7a02 	vldr	s14, [r7, #8]
 800463c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004644:	eeb0 0a66 	vmov.f32	s0, s13
 8004648:	f7fe f946 	bl	80028d8 <_ZSt3absf>
 800464c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004650:	edd7 7a05 	vldr	s15, [r7, #20]
 8004654:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800476c <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	db01      	blt.n	8004666 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004662:	4b43      	ldr	r3, [pc, #268]	; (8004770 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004664:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004666:	8b7c      	ldrh	r4, [r7, #26]
 8004668:	ed97 0a05 	vldr	s0, [r7, #20]
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7fe fe13 	bl	8003298 <_ZN9LineTrace15radius2VelocityEf>
 8004672:	eef0 7a40 	vmov.f32	s15, s0
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800467c:	3304      	adds	r3, #4
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004686:	8b7b      	ldrh	r3, [r7, #26]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	441a      	add	r2, r3
 800468e:	8b7b      	ldrh	r3, [r7, #26]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	3304      	adds	r3, #4
 800469c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800469e:	8b7b      	ldrh	r3, [r7, #26]
 80046a0:	3301      	adds	r3, #1
 80046a2:	837b      	strh	r3, [r7, #26]
 80046a4:	e7ae      	b.n	8004604 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046ac:	3354      	adds	r3, #84	; 0x54
 80046ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d120      	bne.n	80046f8 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046c2:	3310      	adds	r3, #16
 80046c4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046cc:	332c      	adds	r3, #44	; 0x2c
 80046ce:	edd3 7a00 	vldr	s15, [r3]
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	eeb0 0a67 	vmov.f32	s0, s15
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fe fe9d 	bl	8003418 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046e4:	3328      	adds	r3, #40	; 0x28
 80046e6:	edd3 7a00 	vldr	s15, [r3]
 80046ea:	6939      	ldr	r1, [r7, #16]
 80046ec:	eeb0 0a67 	vmov.f32	s0, s15
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fe ff35 	bl	8003560 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80046f6:	e027      	b.n	8004748 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046fe:	3354      	adds	r3, #84	; 0x54
 8004700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d11f      	bne.n	8004748 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004714:	3310      	adds	r3, #16
 8004716:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800471e:	3334      	adds	r3, #52	; 0x34
 8004720:	edd3 7a00 	vldr	s15, [r3]
 8004724:	6939      	ldr	r1, [r7, #16]
 8004726:	eeb0 0a67 	vmov.f32	s0, s15
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fe fe74 	bl	8003418 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004736:	3330      	adds	r3, #48	; 0x30
 8004738:	edd3 7a00 	vldr	s15, [r3]
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	eeb0 0a67 	vmov.f32	s0, s15
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fe ff0c 	bl	8003560 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800474e:	3310      	adds	r3, #16
 8004750:	2200      	movs	r2, #0
 8004752:	9200      	str	r2, [sp, #0]
 8004754:	f241 7270 	movw	r2, #6000	; 0x1770
 8004758:	4906      	ldr	r1, [pc, #24]	; (8004774 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800475a:	4807      	ldr	r0, [pc, #28]	; (8004778 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 800475c:	f7fd f87e 	bl	800185c <sd_write_array_float>

}
 8004760:	bf00      	nop
 8004762:	3724      	adds	r7, #36	; 0x24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	3727c5ac 	.word	0x3727c5ac
 800476c:	459c4000 	.word	0x459c4000
 8004770:	459c4000 	.word	0x459c4000
 8004774:	08018fa0 	.word	0x08018fa0
 8004778:	08018f3c 	.word	0x08018f3c

0800477c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69d8      	ldr	r0, [r3, #28]
 8004788:	4b6b      	ldr	r3, [pc, #428]	; (8004938 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800478a:	4a6c      	ldr	r2, [pc, #432]	; (800493c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 800478c:	496c      	ldr	r1, [pc, #432]	; (8004940 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800478e:	f000 fad7 	bl	8004d40 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004798:	3358      	adds	r3, #88	; 0x58
 800479a:	2264      	movs	r2, #100	; 0x64
 800479c:	4969      	ldr	r1, [pc, #420]	; (8004944 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800479e:	4868      	ldr	r0, [pc, #416]	; (8004940 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80047a0:	f7fd f8c2 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80047aa:	3378      	adds	r3, #120	; 0x78
 80047ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047b0:	4965      	ldr	r1, [pc, #404]	; (8004948 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80047b2:	4863      	ldr	r0, [pc, #396]	; (8004940 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80047b4:	f7fd f8b8 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fa32 	bl	8004c26 <_ZN6Logger23getDistanceArrayPointerEv>
 80047c2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fa3a 	bl	8004c42 <_ZN6Logger20getThetaArrayPointerEv>
 80047ce:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047d0:	2300      	movs	r3, #0
 80047d2:	837b      	strh	r3, [r7, #26]
 80047d4:	8b7b      	ldrh	r3, [r7, #26]
 80047d6:	f241 726f 	movw	r2, #5999	; 0x176f
 80047da:	4293      	cmp	r3, r2
 80047dc:	d84b      	bhi.n	8004876 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80047de:	8b7b      	ldrh	r3, [r7, #26]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4413      	add	r3, r2
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80047ea:	8b7b      	ldrh	r3, [r7, #26]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80047f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80047fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004802:	d101      	bne.n	8004808 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004804:	4b51      	ldr	r3, [pc, #324]	; (800494c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004806:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004808:	ed97 7a02 	vldr	s14, [r7, #8]
 800480c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004810:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004814:	eeb0 0a66 	vmov.f32	s0, s13
 8004818:	f7fe f85e 	bl	80028d8 <_ZSt3absf>
 800481c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004820:	edd7 7a05 	vldr	s15, [r7, #20]
 8004824:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004950 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	db01      	blt.n	8004836 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004832:	4b48      	ldr	r3, [pc, #288]	; (8004954 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004834:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004836:	8b7c      	ldrh	r4, [r7, #26]
 8004838:	ed97 0a05 	vldr	s0, [r7, #20]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fe fd2b 	bl	8003298 <_ZN9LineTrace15radius2VelocityEf>
 8004842:	eef0 7a40 	vmov.f32	s15, s0
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800484c:	3304      	adds	r3, #4
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004856:	8b7b      	ldrh	r3, [r7, #26]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	441a      	add	r2, r3
 800485e:	8b7b      	ldrh	r3, [r7, #26]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	3332      	adds	r3, #50	; 0x32
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3304      	adds	r3, #4
 800486c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800486e:	8b7b      	ldrh	r3, [r7, #26]
 8004870:	3301      	adds	r3, #1
 8004872:	837b      	strh	r3, [r7, #26]
 8004874:	e7ae      	b.n	80047d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800487c:	3354      	adds	r3, #84	; 0x54
 800487e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d120      	bne.n	80048c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004892:	3310      	adds	r3, #16
 8004894:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800489c:	332c      	adds	r3, #44	; 0x2c
 800489e:	edd3 7a00 	vldr	s15, [r3]
 80048a2:	6939      	ldr	r1, [r7, #16]
 80048a4:	eeb0 0a67 	vmov.f32	s0, s15
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fe fdb5 	bl	8003418 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048b4:	3328      	adds	r3, #40	; 0x28
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	6939      	ldr	r1, [r7, #16]
 80048bc:	eeb0 0a67 	vmov.f32	s0, s15
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fe fe4d 	bl	8003560 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80048c6:	e027      	b.n	8004918 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80048ce:	3354      	adds	r3, #84	; 0x54
 80048d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d11f      	bne.n	8004918 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80048e4:	3310      	adds	r3, #16
 80048e6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048ee:	3334      	adds	r3, #52	; 0x34
 80048f0:	edd3 7a00 	vldr	s15, [r3]
 80048f4:	6939      	ldr	r1, [r7, #16]
 80048f6:	eeb0 0a67 	vmov.f32	s0, s15
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fe fd8c 	bl	8003418 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004906:	3330      	adds	r3, #48	; 0x30
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	6939      	ldr	r1, [r7, #16]
 800490e:	eeb0 0a67 	vmov.f32	s0, s15
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fe fe24 	bl	8003560 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800491e:	3310      	adds	r3, #16
 8004920:	2200      	movs	r2, #0
 8004922:	9200      	str	r2, [sp, #0]
 8004924:	f241 7270 	movw	r2, #6000	; 0x1770
 8004928:	490b      	ldr	r1, [pc, #44]	; (8004958 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800492a:	4805      	ldr	r0, [pc, #20]	; (8004940 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800492c:	f7fc ff96 	bl	800185c <sd_write_array_float>

}
 8004930:	bf00      	nop
 8004932:	3724      	adds	r7, #36	; 0x24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd90      	pop	{r4, r7, pc}
 8004938:	08018f20 	.word	0x08018f20
 800493c:	08018f2c 	.word	0x08018f2c
 8004940:	08018f3c 	.word	0x08018f3c
 8004944:	08018f48 	.word	0x08018f48
 8004948:	08018f58 	.word	0x08018f58
 800494c:	3727c5ac 	.word	0x3727c5ac
 8004950:	459c4000 	.word	0x459c4000
 8004954:	459c4000 	.word	0x459c4000
 8004958:	08018fa0 	.word	0x08018fa0

0800495c <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800496a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004978:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 800497c:	2200      	movs	r2, #0
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004986:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800498a:	2200      	movs	r2, #0
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004994:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 8004998:	2200      	movs	r2, #0
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049a2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80049a6:	2200      	movs	r2, #0
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049b0:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80049b4:	2200      	movs	r2, #0
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80049d4:	f7fd f834 	bl	8001a40 <sd_mount>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d016      	beq.n	8004a16 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80049e8:	f7fc fb5a 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80049ec:	2100      	movs	r1, #0
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fc fb66 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80049f4:	4815      	ldr	r0, [pc, #84]	; (8004a4c <_ZN6Logger10sdCardInitEv+0x84>)
 80049f6:	f7fc fb8d 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80049fa:	2101      	movs	r1, #1
 80049fc:	2000      	movs	r0, #0
 80049fe:	f7fc fb5f 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004a02:	4813      	ldr	r0, [pc, #76]	; (8004a50 <_ZN6Logger10sdCardInitEv+0x88>)
 8004a04:	f7fc fb86 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a0c:	f005 fad0 	bl	8009fb0 <HAL_Delay>

	  ret = true;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e015      	b.n	8004a42 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004a16:	f7fc fb43 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7fc fb4f 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004a22:	480a      	ldr	r0, [pc, #40]	; (8004a4c <_ZN6Logger10sdCardInitEv+0x84>)
 8004a24:	f7fc fb76 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004a28:	2101      	movs	r1, #1
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fc fb48 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004a30:	4808      	ldr	r0, [pc, #32]	; (8004a54 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004a32:	f7fc fb6f 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a3a:	f005 fab9 	bl	8009fb0 <HAL_Delay>

	  ret = false;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	08018fb0 	.word	0x08018fb0
 8004a50:	08018fbc 	.word	0x08018fbc
 8004a54:	08018fc4 	.word	0x08018fc4

08004a58 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a6a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d034      	beq.n	8004ade <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a7a:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a90:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004aa0:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004aa4:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004aac:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <_ZN6Logger8storeLogEf+0x94>)
 8004ab4:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <_ZN6Logger8storeLogEf+0x98>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ac2:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d906      	bls.n	8004ade <_ZN6Logger8storeLogEf+0x86>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ad6:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ada:	2200      	movs	r2, #0
 8004adc:	801a      	strh	r2, [r3, #0]
	}
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	2000021e 	.word	0x2000021e
 8004af0:	20000224 	.word	0x20000224

08004af4 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b06:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d036      	beq.n	8004b7e <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b16:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b30:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b40:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004b44:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b4c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <_ZN6Logger9storeLog2Ef+0x98>)
 8004b54:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8004b56:	4a0e      	ldr	r2, [pc, #56]	; (8004b90 <_ZN6Logger9storeLog2Ef+0x9c>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b62:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d906      	bls.n	8004b7e <_ZN6Logger9storeLog2Ef+0x8a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b76:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	801a      	strh	r2, [r3, #0]
	}
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000220 	.word	0x20000220
 8004b90:	20000228 	.word	0x20000228

08004b94 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ba0:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004baa:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8004bb6:	3328      	adds	r3, #40	; 0x28
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004bc6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8004bd2:	3318      	adds	r3, #24
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004be2:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004bf2:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004bf6:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004bfe:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	f241 726f 	movw	r2, #5999	; 0x176f
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d906      	bls.n	8004c1a <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c12:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004c16:	2200      	movs	r2, #0
 8004c18:	801a      	strh	r2, [r3, #0]
	//}
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004c34:	33a0      	adds	r3, #160	; 0xa0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004c50:	3360      	adds	r3, #96	; 0x60
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	68b8      	ldr	r0, [r7, #8]
 8004c7a:	f7fc fdef 	bl	800185c <sd_write_array_float>
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af02      	add	r7, sp, #8
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004c98:	3320      	adds	r3, #32
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	9200      	str	r2, [sp, #0]
 8004c9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68b8      	ldr	r0, [r7, #8]
 8004ca6:	f7fc fdd9 	bl	800185c <sd_write_array_float>
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af02      	add	r7, sp, #8
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004cc6:	33a0      	adds	r3, #160	; 0xa0
 8004cc8:	2200      	movs	r2, #0
 8004cca:	9200      	str	r2, [sp, #0]
 8004ccc:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	68b8      	ldr	r0, [r7, #8]
 8004cd4:	f7fc fdc2 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004cde:	3360      	adds	r3, #96	; 0x60
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	9200      	str	r2, [sp, #0]
 8004ce4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	68b8      	ldr	r0, [r7, #8]
 8004cec:	f7fc fdb6 	bl	800185c <sd_write_array_float>
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004d0c:	3320      	adds	r3, #32
 8004d0e:	2200      	movs	r2, #0
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f7fc fd9f 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004d24:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004d28:	2200      	movs	r2, #0
 8004d2a:	9200      	str	r2, [sp, #0]
 8004d2c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	68b8      	ldr	r0, [r7, #8]
 8004d34:	f7fc fd92 	bl	800185c <sd_write_array_float>
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004d54:	33a0      	adds	r3, #160	; 0xa0
 8004d56:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f7fc fde3 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004d68:	3360      	adds	r3, #96	; 0x60
 8004d6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	68b8      	ldr	r0, [r7, #8]
 8004d72:	f7fc fdd9 	bl	8001928 <sd_read_array_float>
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b08b      	sub	sp, #44	; 0x2c
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004d8c:	3320      	adds	r3, #32
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d9a:	3340      	adds	r3, #64	; 0x40
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d009      	beq.n	8004dba <_ZN6Logger13resetLogsDis2Ev+0x3c>
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	617b      	str	r3, [r7, #20]
		log = 0;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	3304      	adds	r3, #4
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
 8004db8:	e7f1      	b.n	8004d9e <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004dc0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004dd0:	3340      	adds	r3, #64	; 0x40
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d009      	beq.n	8004df0 <_ZN6Logger13resetLogsDis2Ev+0x72>
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	3304      	adds	r3, #4
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	e7f1      	b.n	8004dd4 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004df6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	372c      	adds	r7, #44	; 0x2c
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004e20:	3320      	adds	r3, #32
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d009      	beq.n	8004e40 <_ZN6Logger13resetLogsTim1Ev+0x36>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e7f1      	b.n	8004e24 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e46:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	801a      	strh	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004e68:	3320      	adds	r3, #32
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004e76:	3320      	adds	r3, #32
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d009      	beq.n	8004e96 <_ZN6Logger13resetLogsTim2Ev+0x3c>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3304      	adds	r3, #4
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e7f1      	b.n	8004e7a <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e9c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	801a      	strh	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ebe:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ecc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004eda:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004ede:	2200      	movs	r2, #0
 8004ee0:	801a      	strh	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <_ZN6Logger5startEv>:

void Logger::start()
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004efc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004f00:	2200      	movs	r2, #0
 8004f02:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f0a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f18:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f3a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	805a      	strh	r2, [r3, #2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004f78:	2108      	movs	r1, #8
 8004f7a:	4805      	ldr	r0, [pc, #20]	; (8004f90 <_ZN5Motor4initEv+0x20>)
 8004f7c:	f00a f9e0 	bl	800f340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004f80:	210c      	movs	r1, #12
 8004f82:	4803      	ldr	r0, [pc, #12]	; (8004f90 <_ZN5Motor4initEv+0x20>)
 8004f84:	f00a f9dc 	bl	800f340 <HAL_TIM_PWM_Start>

}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20047718 	.word	0x20047718

08004f94 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da0d      	bge.n	8004fc2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fac:	481f      	ldr	r0, [pc, #124]	; (800502c <_ZN5Motor9motorCtrlEv+0x98>)
 8004fae:	f006 fa95 	bl	800b4dc <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	425b      	negs	r3, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	81fb      	strh	r3, [r7, #14]
 8004fc0:	e00a      	b.n	8004fd8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fc8:	4818      	ldr	r0, [pc, #96]	; (800502c <_ZN5Motor9motorCtrlEv+0x98>)
 8004fca:	f006 fa87 	bl	800b4dc <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da0d      	bge.n	8004ffe <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fe8:	4810      	ldr	r0, [pc, #64]	; (800502c <_ZN5Motor9motorCtrlEv+0x98>)
 8004fea:	f006 fa77 	bl	800b4dc <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	425b      	negs	r3, r3
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	81bb      	strh	r3, [r7, #12]
 8004ffc:	e00a      	b.n	8005014 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005004:	4809      	ldr	r0, [pc, #36]	; (800502c <_ZN5Motor9motorCtrlEv+0x98>)
 8005006:	f006 fa69 	bl	800b4dc <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005010:	b29b      	uxth	r3, r3
 8005012:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8005014:	89fa      	ldrh	r2, [r7, #14]
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <_ZN5Motor9motorCtrlEv+0x9c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 800501c:	89ba      	ldrh	r2, [r7, #12]
 800501e:	4b04      	ldr	r3, [pc, #16]	; (8005030 <_ZN5Motor9motorCtrlEv+0x9c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40020c00 	.word	0x40020c00
 8005030:	20047718 	.word	0x20047718

08005034 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6178      	str	r0, [r7, #20]
 800503c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005040:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <_ZN5Motor8setRatioEdd+0xd8>)
 800504a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800504e:	f7fb fd7b 	bl	8000b48 <__aeabi_dcmpgt>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <_ZN5Motor8setRatioEdd+0x30>
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	4c2b      	ldr	r4, [pc, #172]	; (800510c <_ZN5Motor8setRatioEdd+0xd8>)
 800505e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8005062:	e00e      	b.n	8005082 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	4b29      	ldr	r3, [pc, #164]	; (8005110 <_ZN5Motor8setRatioEdd+0xdc>)
 800506a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800506e:	f7fb fd4d 	bl	8000b0c <__aeabi_dcmplt>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <_ZN5Motor8setRatioEdd+0x4e>
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	4c24      	ldr	r4, [pc, #144]	; (8005110 <_ZN5Motor8setRatioEdd+0xdc>)
 800507e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	4b21      	ldr	r3, [pc, #132]	; (800510c <_ZN5Motor8setRatioEdd+0xd8>)
 8005088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800508c:	f7fb fd5c 	bl	8000b48 <__aeabi_dcmpgt>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <_ZN5Motor8setRatioEdd+0x6e>
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	4c1c      	ldr	r4, [pc, #112]	; (800510c <_ZN5Motor8setRatioEdd+0xd8>)
 800509c:	e9c7 3400 	strd	r3, r4, [r7]
 80050a0:	e00e      	b.n	80050c0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <_ZN5Motor8setRatioEdd+0xdc>)
 80050a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ac:	f7fb fd2e 	bl	8000b0c <__aeabi_dcmplt>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <_ZN5Motor8setRatioEdd+0x8c>
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	4c15      	ldr	r4, [pc, #84]	; (8005110 <_ZN5Motor8setRatioEdd+0xdc>)
 80050bc:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <_ZN5Motor8setRatioEdd+0xe0>)
 80050c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ca:	f7fb faad 	bl	8000628 <__aeabi_dmul>
 80050ce:	4603      	mov	r3, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	4618      	mov	r0, r3
 80050d4:	4621      	mov	r1, r4
 80050d6:	f7fb fd57 	bl	8000b88 <__aeabi_d2iz>
 80050da:	4603      	mov	r3, r0
 80050dc:	b21a      	sxth	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <_ZN5Motor8setRatioEdd+0xe0>)
 80050e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ec:	f7fb fa9c 	bl	8000628 <__aeabi_dmul>
 80050f0:	4603      	mov	r3, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	4618      	mov	r0, r3
 80050f6:	4621      	mov	r1, r4
 80050f8:	f7fb fd46 	bl	8000b88 <__aeabi_d2iz>
 80050fc:	4603      	mov	r3, r0
 80050fe:	b21a      	sxth	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	805a      	strh	r2, [r3, #2]

}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd90      	pop	{r4, r7, pc}
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	bff00000 	.word	0xbff00000
 8005114:	409c2000 	.word	0x409c2000

08005118 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8005118:	b490      	push	{r4, r7}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	f04f 0400 	mov.w	r4, #0
 8005130:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	f04f 0400 	mov.w	r4, #0
 800513e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	f04f 0400 	mov.w	r4, #0
 800515a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bc90      	pop	{r4, r7}
 8005188:	4770      	bx	lr
 800518a:	0000      	movs	r0, r0
 800518c:	0000      	movs	r0, r0
	...

08005190 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc fe17 	bl	8001dd0 <_ZN3IMU8getOmegaEv>
 80051a2:	ee10 3a10 	vmov	r3, s0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb f9e6 	bl	8000578 <__aeabi_f2d>
 80051ac:	4603      	mov	r3, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 80051b4:	a310      	add	r3, pc, #64	; (adr r3, 80051f8 <_ZN8Odometry12calcPotitionEv+0x68>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051be:	f7fb fa33 	bl	8000628 <__aeabi_dmul>
 80051c2:	4603      	mov	r3, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80051d8:	461a      	mov	r2, r3
 80051da:	4623      	mov	r3, r4
 80051dc:	f7fb f86e 	bl	80002bc <__adddf3>
 80051e0:	4603      	mov	r3, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	bf00      	nop
 80051f4:	f3af 8000 	nop.w
 80051f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80051fc:	3f50624d 	.word	0x3f50624d

08005200 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ffc1 	bl	8005190 <_ZN8Odometry12calcPotitionEv>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005216:	b490      	push	{r4, r7}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
	return theta_;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005224:	ec44 3b17 	vmov	d7, r3, r4
}
 8005228:	eeb0 0a47 	vmov.f32	s0, s14
 800522c:	eef0 0a67 	vmov.f32	s1, s15
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bc90      	pop	{r4, r7}
 8005236:	4770      	bx	lr

08005238 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 8005238:	b490      	push	{r4, r7}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005246:	ec44 3b17 	vmov	d7, r3, r4
}
 800524a:	eeb0 0a47 	vmov.f32	s0, s14
 800524e:	eef0 0a67 	vmov.f32	s1, s15
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bc90      	pop	{r4, r7}
 8005258:	4770      	bx	lr

0800525a <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 800525a:	b490      	push	{r4, r7}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	f04f 0400 	mov.w	r4, #0
 800526c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f04f 0400 	mov.w	r4, #0
 800527a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bc90      	pop	{r4, r7}
 8005294:	4770      	bx	lr
	...

08005298 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005298:	b490      	push	{r4, r7}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	f04f 0400 	mov.w	r4, #0
 80052be:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80052d6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80052da:	2200      	movs	r2, #0
 80052dc:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80052de:	4a29      	ldr	r2, [pc, #164]	; (8005384 <_ZN13PathFollowingC1Ev+0xec>)
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80052ec:	4a25      	ldr	r2, [pc, #148]	; (8005384 <_ZN13PathFollowingC1Ev+0xec>)
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	f04f 0400 	mov.w	r4, #0
 80052f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80052fa:	4a22      	ldr	r2, [pc, #136]	; (8005384 <_ZN13PathFollowingC1Ev+0xec>)
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <_ZN13PathFollowingC1Ev+0xf0>)
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	f04f 0400 	mov.w	r4, #0
 8005312:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <_ZN13PathFollowingC1Ev+0xf0>)
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005324:	4a18      	ldr	r2, [pc, #96]	; (8005388 <_ZN13PathFollowingC1Ev+0xf0>)
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	f04f 0400 	mov.w	r4, #0
 800532e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <_ZN13PathFollowingC1Ev+0xf0>)
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005340:	4a11      	ldr	r2, [pc, #68]	; (8005388 <_ZN13PathFollowingC1Ev+0xf0>)
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <_ZN13PathFollowingC1Ev+0xf0>)
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 800535c:	4a0b      	ldr	r2, [pc, #44]	; (800538c <_ZN13PathFollowingC1Ev+0xf4>)
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	f04f 0400 	mov.w	r4, #0
 8005366:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800536a:	4a08      	ldr	r2, [pc, #32]	; (800538c <_ZN13PathFollowingC1Ev+0xf4>)
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	f04f 0400 	mov.w	r4, #0
 8005374:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bc90      	pop	{r4, r7}
 8005382:	4770      	bx	lr
 8005384:	20047c18 	.word	0x20047c18
 8005388:	20047ba8 	.word	0x20047ba8
 800538c:	20047c08 	.word	0x20047c08

08005390 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005398:	f001 fd62 	bl	8006e60 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 800539c:	f107 0318 	add.w	r3, r7, #24
 80053a0:	2201      	movs	r2, #1
 80053a2:	4915      	ldr	r1, [pc, #84]	; (80053f8 <_ZN13PathFollowing4initEv+0x68>)
 80053a4:	4815      	ldr	r0, [pc, #84]	; (80053fc <_ZN13PathFollowing4initEv+0x6c>)
 80053a6:	f7fc fb05 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80053aa:	f107 0310 	add.w	r3, r7, #16
 80053ae:	2201      	movs	r2, #1
 80053b0:	4913      	ldr	r1, [pc, #76]	; (8005400 <_ZN13PathFollowing4initEv+0x70>)
 80053b2:	4812      	ldr	r0, [pc, #72]	; (80053fc <_ZN13PathFollowing4initEv+0x6c>)
 80053b4:	f7fc fafe 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80053b8:	f107 0308 	add.w	r3, r7, #8
 80053bc:	2201      	movs	r2, #1
 80053be:	4911      	ldr	r1, [pc, #68]	; (8005404 <_ZN13PathFollowing4initEv+0x74>)
 80053c0:	480e      	ldr	r0, [pc, #56]	; (80053fc <_ZN13PathFollowing4initEv+0x6c>)
 80053c2:	f7fc faf7 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80053c6:	ed97 7b06 	vldr	d7, [r7, #24]
 80053ca:	ed97 6b04 	vldr	d6, [r7, #16]
 80053ce:	ed97 5b02 	vldr	d5, [r7, #8]
 80053d2:	eeb0 2a45 	vmov.f32	s4, s10
 80053d6:	eef0 2a65 	vmov.f32	s5, s11
 80053da:	eeb0 1a46 	vmov.f32	s2, s12
 80053de:	eef0 1a66 	vmov.f32	s3, s13
 80053e2:	eeb0 0a47 	vmov.f32	s0, s14
 80053e6:	eef0 0a67 	vmov.f32	s1, s15
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f80c 	bl	8005408 <_ZN13PathFollowing7setGainEddd>
}
 80053f0:	bf00      	nop
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	08018fcc 	.word	0x08018fcc
 80053fc:	08018fd4 	.word	0x08018fd4
 8005400:	08018fdc 	.word	0x08018fdc
 8005404:	08018fe4 	.word	0x08018fe4

08005408 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005408:	b490      	push	{r4, r7}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	61f8      	str	r0, [r7, #28]
 8005410:	ed87 0b04 	vstr	d0, [r7, #16]
 8005414:	ed87 1b02 	vstr	d1, [r7, #8]
 8005418:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 800541c:	4a09      	ldr	r2, [pc, #36]	; (8005444 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800541e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005422:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005426:	4a07      	ldr	r2, [pc, #28]	; (8005444 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005428:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800542c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005430:	4a04      	ldr	r2, [pc, #16]	; (8005444 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005432:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005436:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800543a:	bf00      	nop
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bc90      	pop	{r4, r7}
 8005442:	4770      	bx	lr
 8005444:	20047c18 	.word	0x20047c18

08005448 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005450:	2088      	movs	r0, #136	; 0x88
 8005452:	f7fc fe00 	bl	8002056 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005456:	2080      	movs	r0, #128	; 0x80
 8005458:	f7fc fdfd 	bl	8002056 <INA260_init>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	0000      	movs	r0, r0
	...

08005468 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005470:	2188      	movs	r1, #136	; 0x88
 8005472:	2002      	movs	r0, #2
 8005474:	f7fc fd8c 	bl	8001f90 <INA260_read>
 8005478:	4603      	mov	r3, r0
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb f86a 	bl	8000554 <__aeabi_i2d>
 8005480:	a30c      	add	r3, pc, #48	; (adr r3, 80054b4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fb f8cf 	bl	8000628 <__aeabi_dmul>
 800548a:	4603      	mov	r3, r0
 800548c:	460c      	mov	r4, r1
 800548e:	4618      	mov	r0, r3
 8005490:	4621      	mov	r1, r4
 8005492:	f7fb fbc1 	bl	8000c18 <__aeabi_d2f>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a03      	ldr	r2, [pc, #12]	; (80054b0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80054a2:	6013      	str	r3, [r2, #0]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	f3af 8000 	nop.w
 80054b0:	2000022c 	.word	0x2000022c
 80054b4:	47ae147b 	.word	0x47ae147b
 80054b8:	3f547ae1 	.word	0x3f547ae1

080054bc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	ee07 3a90 	vmov	s15, r3

}
 80054cc:	eeb0 0a67 	vmov.f32	s0, s15
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80054e8:	2102      	movs	r1, #2
 80054ea:	4822      	ldr	r0, [pc, #136]	; (8005574 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054ec:	f005 ffde 	bl	800b4ac <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005508:	2108      	movs	r1, #8
 800550a:	481a      	ldr	r0, [pc, #104]	; (8005574 <_ZN12RotarySwitch8getValueEv+0x98>)
 800550c:	f005 ffce 	bl	800b4ac <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005520:	89fb      	ldrh	r3, [r7, #14]
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005528:	2110      	movs	r1, #16
 800552a:	4812      	ldr	r0, [pc, #72]	; (8005574 <_ZN12RotarySwitch8getValueEv+0x98>)
 800552c:	f005 ffbe 	bl	800b4ac <HAL_GPIO_ReadPin>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	f043 0304 	orr.w	r3, r3, #4
 8005546:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	480a      	ldr	r0, [pc, #40]	; (8005574 <_ZN12RotarySwitch8getValueEv+0x98>)
 800554c:	f005 ffae 	bl	800b4ac <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	f043 0308 	orr.w	r3, r3, #8
 8005566:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005568:	89fb      	ldrh	r3, [r7, #14]

}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40020c00 	.word	0x40020c00

08005578 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	709a      	strb	r2, [r3, #2]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	70da      	strb	r2, [r3, #3]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	809a      	strh	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	80da      	strh	r2, [r3, #6]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	721a      	strb	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	815a      	strh	r2, [r3, #10]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	819a      	strh	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	739a      	strb	r2, [r3, #14]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	73da      	strb	r2, [r3, #15]
{

}
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 80055d4:	2104      	movs	r1, #4
 80055d6:	480e      	ldr	r0, [pc, #56]	; (8005610 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 80055d8:	f005 ff68 	bl	800b4ac <HAL_GPIO_ReadPin>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	bf0c      	ite	eq
 80055e2:	2301      	moveq	r3, #1
 80055e4:	2300      	movne	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 80055f8:	e005      	b.n	8005606 <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	739a      	strb	r2, [r3, #14]
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40021000 	.word	0x40021000

08005614 <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 800561c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005620:	480d      	ldr	r0, [pc, #52]	; (8005658 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 8005622:	f005 ff43 	bl	800b4ac <HAL_GPIO_ReadPin>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 8005642:	e005      	b.n	8005650 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	73da      	strb	r2, [r3, #15]
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40020c00 	.word	0x40020c00

0800565c <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	timer_R_++;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	895b      	ldrh	r3, [r3, #10]
 8005668:	3301      	adds	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	899b      	ldrh	r3, [r3, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	895b      	ldrh	r3, [r3, #10]
 8005680:	f242 720f 	movw	r2, #9999	; 0x270f
 8005684:	4293      	cmp	r3, r2
 8005686:	d903      	bls.n	8005690 <_ZN10SideSensor12updateStatusEv+0x34>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f242 7210 	movw	r2, #10000	; 0x2710
 800568e:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	899b      	ldrh	r3, [r3, #12]
 8005694:	f242 720f 	movw	r2, #9999	; 0x270f
 8005698:	4293      	cmp	r3, r2
 800569a:	d903      	bls.n	80056a4 <_ZN10SideSensor12updateStatusEv+0x48>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f242 7210 	movw	r2, #10000	; 0x2710
 80056a2:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7a1b      	ldrb	r3, [r3, #8]
 80056a8:	f083 0301 	eor.w	r3, r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d019      	beq.n	80056e6 <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	7b9b      	ldrb	r3, [r3, #14]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <_ZN10SideSensor12updateStatusEv+0x6e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	895b      	ldrh	r3, [r3, #10]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d903      	bls.n	80056ca <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	70da      	strb	r2, [r3, #3]
 80056c8:	e00d      	b.n	80056e6 <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	7b9b      	ldrb	r3, [r3, #14]
 80056ce:	f083 0301 	eor.w	r3, r3, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <_ZN10SideSensor12updateStatusEv+0x8a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	895b      	ldrh	r3, [r3, #10]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d902      	bls.n	80056e6 <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	7bdb      	ldrb	r3, [r3, #15]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <_ZN10SideSensor12updateStatusEv+0xa2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	899b      	ldrh	r3, [r3, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d903      	bls.n	80056fe <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	709a      	strb	r2, [r3, #2]
 80056fc:	e00d      	b.n	800571a <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	7bdb      	ldrb	r3, [r3, #15]
 8005702:	f083 0301 	eor.w	r3, r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <_ZN10SideSensor12updateStatusEv+0xbe>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	899b      	ldrh	r3, [r3, #12]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d902      	bls.n	800571a <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	78da      	ldrb	r2, [r3, #3]
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005720:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	789a      	ldrb	r2, [r3, #2]
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005728:	701a      	strb	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000231 	.word	0x20000231
 800573c:	20000230 	.word	0x20000230

08005740 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	789b      	ldrb	r3, [r3, #2]
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	return status_R_;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	78db      	ldrb	r3, [r3, #3]
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	80da      	strh	r2, [r3, #6]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	721a      	strb	r2, [r3, #8]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	721a      	strb	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7a1b      	ldrb	r3, [r3, #8]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3308      	adds	r3, #8
 80057ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f00f f912 	bl	8014a1c <memset>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fe:	811a      	strh	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005806:	815a      	strh	r2, [r3, #10]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800580e:	819a      	strh	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005816:	81da      	strh	r2, [r3, #14]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581e:	821a      	strh	r2, [r3, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005826:	825a      	strh	r2, [r3, #18]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	829a      	strh	r2, [r3, #20]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	82da      	strh	r2, [r3, #22]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	831a      	strh	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	835a      	strh	r2, [r3, #26]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	839a      	strh	r2, [r3, #28]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	83da      	strh	r2, [r3, #30]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	841a      	strh	r2, [r3, #32]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005858:	845a      	strh	r2, [r3, #34]	; 0x22
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	849a      	strh	r2, [r3, #36]	; 0x24
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005866:	84da      	strh	r2, [r3, #38]	; 0x26
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	851a      	strh	r2, [r3, #40]	; 0x28
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005882:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588a:	861a      	strh	r2, [r3, #48]	; 0x30
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	865a      	strh	r2, [r3, #50]	; 0x32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	869a      	strh	r2, [r3, #52]	; 0x34
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589e:	86da      	strh	r2, [r3, #54]	; 0x36
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a6:	871a      	strh	r2, [r3, #56]	; 0x38
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	875a      	strh	r2, [r3, #58]	; 0x3a
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005934:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800593e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005958:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005982:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800599c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ae:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fe:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a08:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a24:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a50:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a5a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a64:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a80:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005abc:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b02:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b0c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b26:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b38:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	619a      	str	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	61da      	str	r2, [r3, #28]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	0000      	movs	r0, r0
 8005c04:	0000      	movs	r0, r0
	...

08005c08 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	f107 020c 	add.w	r2, r7, #12
 8005c18:	f107 0110 	add.w	r1, r7, #16
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fb fce5 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005c22:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c36:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7fa fc9c 	bl	8000578 <__aeabi_f2d>
 8005c40:	a30e      	add	r3, pc, #56	; (adr r3, 8005c7c <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f7fa fcef 	bl	8000628 <__aeabi_dmul>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	4618      	mov	r0, r3
 8005c50:	4621      	mov	r1, r4
 8005c52:	f7fa ffe1 	bl	8000c18 <__aeabi_d2f>
 8005c56:	4602      	mov	r2, r0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4a05      	ldr	r2, [pc, #20]	; (8005c78 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005c62:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	ee07 3a90 	vmov	s15, r3
}
 8005c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000234 	.word	0x20000234
 8005c7c:	1ab1d998 	.word	0x1ab1d998
 8005c80:	3f7830b5 	.word	0x3f7830b5
 8005c84:	00000000 	.word	0x00000000

08005c88 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	ed93 7a00 	vldr	s14, [r3]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005cae:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ccc:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005cd0:	4b3f      	ldr	r3, [pc, #252]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fa fc4f 	bl	8000578 <__aeabi_f2d>
 8005cda:	4604      	mov	r4, r0
 8005cdc:	460d      	mov	r5, r1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	ed93 7a06 	vldr	s14, [r3, #24]
 8005ce4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cec:	ee17 0a90 	vmov	r0, s15
 8005cf0:	f7fa fc42 	bl	8000578 <__aeabi_f2d>
 8005cf4:	a334      	add	r3, pc, #208	; (adr r3, 8005dc8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fc95 	bl	8000628 <__aeabi_dmul>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4620      	mov	r0, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7fa fad9 	bl	80002bc <__adddf3>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4621      	mov	r1, r4
 8005d12:	f7fa ff81 	bl	8000c18 <__aeabi_d2f>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d1a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005d22:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	edd7 6a05 	vldr	s13, [r7, #20]
 8005d2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	ee17 0a90 	vmov	r0, s15
 8005d38:	f7fa fc1e 	bl	8000578 <__aeabi_f2d>
 8005d3c:	a322      	add	r3, pc, #136	; (adr r3, 8005dc8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fd9b 	bl	800087c <__aeabi_ddiv>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f7fa ff63 	bl	8000c18 <__aeabi_d2f>
 8005d52:	4603      	mov	r3, r0
 8005d54:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d62:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d64:	edd3 7a00 	vldr	s15, [r3]
 8005d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d6c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005d7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d82:	ee17 0a90 	vmov	r0, s15
 8005d86:	f7fa fbf7 	bl	8000578 <__aeabi_f2d>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	460e      	mov	r6, r1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d94:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9c:	ee17 0a90 	vmov	r0, s15
 8005da0:	f7fa fbea 	bl	8000578 <__aeabi_f2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	ec43 2b11 	vmov	d1, r2, r3
 8005dac:	ec46 5b10 	vmov	d0, r5, r6
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff f93f 	bl	8005034 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6013      	str	r3, [r2, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dcc:	3f50624d 	.word	0x3f50624d
 8005dd0:	2000023c 	.word	0x2000023c
 8005dd4:	20000238 	.word	0x20000238

08005dd8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005de4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e0c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e34:	edc7 0a01 	vstr	s1, [r7, #4]
 8005e38:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	615a      	str	r2, [r3, #20]
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e66:	edc7 0a01 	vstr	s1, [r7, #4]
 8005e6a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	621a      	str	r2, [r3, #32]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff feb7 	bl	8005c08 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff feef 	bl	8005c88 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005f08 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ef0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005f08 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff f89d 	bl	8005034 <_ZN5Motor8setRatioEdd>

}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	f3af 8000 	nop.w
	...

08005f10 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	ee07 3a90 	vmov	s15, r3
}
 8005f20:	eeb0 0a67 	vmov.f32	s0, s15
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4603      	mov	r3, r0
 8005f36:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fe68 	bl	8007c10 <cppExit>
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10e      	bne.n	8005f78 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005f5a:	f001 fe31 	bl	8007bc0 <cppFlip100ns>

		tim7_timer++;
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f66:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005f68:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d902      	bls.n	8005f78 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005f72:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10e      	bne.n	8005fa0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005f82:	f001 fded 	bl	8007b60 <cppFlip1ms>

		tim6_timer++;
 8005f86:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f8e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a10      	ldr	r2, [pc, #64]	; (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d902      	bls.n	8005fa0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0f      	ldr	r2, [pc, #60]	; (8005fe4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005faa:	f001 fe13 	bl	8007bd4 <cppFlip10ms>

		tim13_timer++;
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005fb6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d902      	bls.n	8005fc8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
	}

}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40001400 	.word	0x40001400
 8005fd4:	200478cc 	.word	0x200478cc
 8005fd8:	0001869f 	.word	0x0001869f
 8005fdc:	40001000 	.word	0x40001000
 8005fe0:	20047888 	.word	0x20047888
 8005fe4:	40001c00 	.word	0x40001c00
 8005fe8:	200478d0 	.word	0x200478d0

08005fec <init>:

void init()
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ff6:	4808      	ldr	r0, [pc, #32]	; (8006018 <init+0x2c>)
 8005ff8:	f005 fa70 	bl	800b4dc <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005ffc:	4807      	ldr	r0, [pc, #28]	; (800601c <init+0x30>)
 8005ffe:	f009 f950 	bl	800f2a2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8006002:	4807      	ldr	r0, [pc, #28]	; (8006020 <init+0x34>)
 8006004:	f009 f94d 	bl	800f2a2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006008:	4806      	ldr	r0, [pc, #24]	; (8006024 <init+0x38>)
 800600a:	f009 f94a 	bl	800f2a2 <HAL_TIM_Base_Start_IT>

	cppInit();
 800600e:	f001 fd05 	bl	8007a1c <cppInit>

	//path_following_initialize();

}
 8006012:	bf00      	nop
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40021000 	.word	0x40021000
 800601c:	200479b4 	.word	0x200479b4
 8006020:	20047b58 	.word	0x20047b58
 8006024:	200478d4 	.word	0x200478d4

08006028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800602c:	f003 ff4e 	bl	8009ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006030:	f000 f82a 	bl	8006088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006034:	f000 fdbc 	bl	8006bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006038:	f000 fd8a 	bl	8006b50 <MX_DMA_Init>
  MX_I2C2_Init();
 800603c:	f000 f9e8 	bl	8006410 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006040:	f000 fa14 	bl	800646c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8006044:	f000 fa32 	bl	80064ac <MX_SPI2_Init>
  MX_TIM1_Init();
 8006048:	f000 fa66 	bl	8006518 <MX_TIM1_Init>
  MX_TIM4_Init();
 800604c:	f000 fb70 	bl	8006730 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006050:	f000 fc3c 	bl	80068cc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8006054:	f000 fd52 	bl	8006afc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006058:	f00b f8f6 	bl	8011248 <MX_FATFS_Init>
  MX_TIM6_Init();
 800605c:	f000 fbcc 	bl	80067f8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006060:	f000 f9a8 	bl	80063b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8006064:	f000 fb00 	bl	8006668 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006068:	f000 fc88 	bl	800697c <MX_TIM10_Init>
  MX_TIM11_Init();
 800606c:	f000 fcd4 	bl	8006a18 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006070:	f000 f898 	bl	80061a4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8006074:	f000 fbf6 	bl	8006864 <MX_TIM7_Init>
  MX_TIM13_Init();
 8006078:	f000 fd1c 	bl	8006ab4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800607c:	f7ff ffb6 	bl	8005fec <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006080:	f001 fde2 	bl	8007c48 <cppLoop>
 8006084:	e7fc      	b.n	8006080 <main+0x58>
	...

08006088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b0a4      	sub	sp, #144	; 0x90
 800608c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800608e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006092:	2234      	movs	r2, #52	; 0x34
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f00e fcc0 	bl	8014a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800609c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060ac:	f107 030c 	add.w	r3, r7, #12
 80060b0:	223c      	movs	r2, #60	; 0x3c
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f00e fcb1 	bl	8014a1c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <SystemClock_Config+0x114>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	4a36      	ldr	r2, [pc, #216]	; (800619c <SystemClock_Config+0x114>)
 80060c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ca:	4b34      	ldr	r3, [pc, #208]	; (800619c <SystemClock_Config+0x114>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80060d6:	2300      	movs	r3, #0
 80060d8:	607b      	str	r3, [r7, #4]
 80060da:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <SystemClock_Config+0x118>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a30      	ldr	r2, [pc, #192]	; (80061a0 <SystemClock_Config+0x118>)
 80060e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <SystemClock_Config+0x118>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060fc:	2302      	movs	r3, #2
 80060fe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006104:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006106:	2308      	movs	r3, #8
 8006108:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800610a:	23b4      	movs	r3, #180	; 0xb4
 800610c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006110:	2302      	movs	r3, #2
 8006112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006116:	2308      	movs	r3, #8
 8006118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800611c:	2302      	movs	r3, #2
 800611e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006122:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006126:	4618      	mov	r0, r3
 8006128:	f006 fe12 	bl	800cd50 <HAL_RCC_OscConfig>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006132:	f000 fe91 	bl	8006e58 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006136:	f006 f98d 	bl	800c454 <HAL_PWREx_EnableOverDrive>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006140:	f000 fe8a 	bl	8006e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006144:	230f      	movs	r3, #15
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006148:	2302      	movs	r3, #2
 800614a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800614c:	2300      	movs	r3, #0
 800614e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006150:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006154:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800615a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800615c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006160:	2105      	movs	r1, #5
 8006162:	4618      	mov	r0, r3
 8006164:	f006 f9c6 	bl	800c4f4 <HAL_RCC_ClockConfig>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800616e:	f000 fe73 	bl	8006e58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006172:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006176:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006178:	2300      	movs	r3, #0
 800617a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800617c:	2300      	movs	r3, #0
 800617e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006180:	f107 030c 	add.w	r3, r7, #12
 8006184:	4618      	mov	r0, r3
 8006186:	f006 fba5 	bl	800c8d4 <HAL_RCCEx_PeriphCLKConfig>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006190:	f000 fe62 	bl	8006e58 <Error_Handler>
  }
}
 8006194:	bf00      	nop
 8006196:	3790      	adds	r7, #144	; 0x90
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	40007000 	.word	0x40007000

080061a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80061aa:	463b      	mov	r3, r7
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80061b6:	4b7c      	ldr	r3, [pc, #496]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061b8:	4a7c      	ldr	r2, [pc, #496]	; (80063ac <MX_ADC2_Init+0x208>)
 80061ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80061bc:	4b7a      	ldr	r3, [pc, #488]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80061c4:	4b78      	ldr	r3, [pc, #480]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80061ca:	4b77      	ldr	r3, [pc, #476]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80061d0:	4b75      	ldr	r3, [pc, #468]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80061d6:	4b74      	ldr	r3, [pc, #464]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061de:	4b72      	ldr	r3, [pc, #456]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061e4:	4b70      	ldr	r3, [pc, #448]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061e6:	4a72      	ldr	r2, [pc, #456]	; (80063b0 <MX_ADC2_Init+0x20c>)
 80061e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061ea:	4b6f      	ldr	r3, [pc, #444]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80061f0:	4b6d      	ldr	r3, [pc, #436]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061f2:	220e      	movs	r2, #14
 80061f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80061f6:	4b6c      	ldr	r3, [pc, #432]	; (80063a8 <MX_ADC2_Init+0x204>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80061fe:	4b6a      	ldr	r3, [pc, #424]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006200:	2201      	movs	r2, #1
 8006202:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006204:	4868      	ldr	r0, [pc, #416]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006206:	f003 fef5 	bl	8009ff4 <HAL_ADC_Init>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006210:	f000 fe22 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006214:	230a      	movs	r3, #10
 8006216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006218:	2301      	movs	r3, #1
 800621a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800621c:	2306      	movs	r3, #6
 800621e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006220:	463b      	mov	r3, r7
 8006222:	4619      	mov	r1, r3
 8006224:	4860      	ldr	r0, [pc, #384]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006226:	f004 f839 	bl	800a29c <HAL_ADC_ConfigChannel>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006230:	f000 fe12 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006234:	230b      	movs	r3, #11
 8006236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006238:	2302      	movs	r3, #2
 800623a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800623c:	463b      	mov	r3, r7
 800623e:	4619      	mov	r1, r3
 8006240:	4859      	ldr	r0, [pc, #356]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006242:	f004 f82b 	bl	800a29c <HAL_ADC_ConfigChannel>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800624c:	f000 fe04 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006254:	2303      	movs	r3, #3
 8006256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006258:	463b      	mov	r3, r7
 800625a:	4619      	mov	r1, r3
 800625c:	4852      	ldr	r0, [pc, #328]	; (80063a8 <MX_ADC2_Init+0x204>)
 800625e:	f004 f81d 	bl	800a29c <HAL_ADC_ConfigChannel>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006268:	f000 fdf6 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800626c:	230d      	movs	r3, #13
 800626e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006270:	2304      	movs	r3, #4
 8006272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006274:	463b      	mov	r3, r7
 8006276:	4619      	mov	r1, r3
 8006278:	484b      	ldr	r0, [pc, #300]	; (80063a8 <MX_ADC2_Init+0x204>)
 800627a:	f004 f80f 	bl	800a29c <HAL_ADC_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006284:	f000 fde8 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006288:	2300      	movs	r3, #0
 800628a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800628c:	2305      	movs	r3, #5
 800628e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006290:	463b      	mov	r3, r7
 8006292:	4619      	mov	r1, r3
 8006294:	4844      	ldr	r0, [pc, #272]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006296:	f004 f801 	bl	800a29c <HAL_ADC_ConfigChannel>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80062a0:	f000 fdda 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80062a4:	2301      	movs	r3, #1
 80062a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80062a8:	2306      	movs	r3, #6
 80062aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062ac:	463b      	mov	r3, r7
 80062ae:	4619      	mov	r1, r3
 80062b0:	483d      	ldr	r0, [pc, #244]	; (80063a8 <MX_ADC2_Init+0x204>)
 80062b2:	f003 fff3 	bl	800a29c <HAL_ADC_ConfigChannel>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80062bc:	f000 fdcc 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80062c0:	2302      	movs	r3, #2
 80062c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80062c4:	2307      	movs	r3, #7
 80062c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062c8:	463b      	mov	r3, r7
 80062ca:	4619      	mov	r1, r3
 80062cc:	4836      	ldr	r0, [pc, #216]	; (80063a8 <MX_ADC2_Init+0x204>)
 80062ce:	f003 ffe5 	bl	800a29c <HAL_ADC_ConfigChannel>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80062d8:	f000 fdbe 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80062dc:	2303      	movs	r3, #3
 80062de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80062e0:	2308      	movs	r3, #8
 80062e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062e4:	463b      	mov	r3, r7
 80062e6:	4619      	mov	r1, r3
 80062e8:	482f      	ldr	r0, [pc, #188]	; (80063a8 <MX_ADC2_Init+0x204>)
 80062ea:	f003 ffd7 	bl	800a29c <HAL_ADC_ConfigChannel>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80062f4:	f000 fdb0 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80062f8:	2304      	movs	r3, #4
 80062fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80062fc:	2309      	movs	r3, #9
 80062fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006300:	463b      	mov	r3, r7
 8006302:	4619      	mov	r1, r3
 8006304:	4828      	ldr	r0, [pc, #160]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006306:	f003 ffc9 	bl	800a29c <HAL_ADC_ConfigChannel>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006310:	f000 fda2 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006314:	2305      	movs	r3, #5
 8006316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006318:	230a      	movs	r3, #10
 800631a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800631c:	463b      	mov	r3, r7
 800631e:	4619      	mov	r1, r3
 8006320:	4821      	ldr	r0, [pc, #132]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006322:	f003 ffbb 	bl	800a29c <HAL_ADC_ConfigChannel>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800632c:	f000 fd94 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006330:	2306      	movs	r3, #6
 8006332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006334:	230b      	movs	r3, #11
 8006336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006338:	463b      	mov	r3, r7
 800633a:	4619      	mov	r1, r3
 800633c:	481a      	ldr	r0, [pc, #104]	; (80063a8 <MX_ADC2_Init+0x204>)
 800633e:	f003 ffad 	bl	800a29c <HAL_ADC_ConfigChannel>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006348:	f000 fd86 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800634c:	2307      	movs	r3, #7
 800634e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006350:	230c      	movs	r3, #12
 8006352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006354:	463b      	mov	r3, r7
 8006356:	4619      	mov	r1, r3
 8006358:	4813      	ldr	r0, [pc, #76]	; (80063a8 <MX_ADC2_Init+0x204>)
 800635a:	f003 ff9f 	bl	800a29c <HAL_ADC_ConfigChannel>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8006364:	f000 fd78 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006368:	2308      	movs	r3, #8
 800636a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800636c:	230d      	movs	r3, #13
 800636e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006370:	463b      	mov	r3, r7
 8006372:	4619      	mov	r1, r3
 8006374:	480c      	ldr	r0, [pc, #48]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006376:	f003 ff91 	bl	800a29c <HAL_ADC_ConfigChannel>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006380:	f000 fd6a 	bl	8006e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006384:	2309      	movs	r3, #9
 8006386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006388:	230e      	movs	r3, #14
 800638a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800638c:	463b      	mov	r3, r7
 800638e:	4619      	mov	r1, r3
 8006390:	4805      	ldr	r0, [pc, #20]	; (80063a8 <MX_ADC2_Init+0x204>)
 8006392:	f003 ff83 	bl	800a29c <HAL_ADC_ConfigChannel>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800639c:	f000 fd5c 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20047758 	.word	0x20047758
 80063ac:	40012100 	.word	0x40012100
 80063b0:	0f000001 	.word	0x0f000001

080063b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <MX_I2C1_Init+0x50>)
 80063ba:	4a13      	ldr	r2, [pc, #76]	; (8006408 <MX_I2C1_Init+0x54>)
 80063bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80063be:	4b11      	ldr	r3, [pc, #68]	; (8006404 <MX_I2C1_Init+0x50>)
 80063c0:	4a12      	ldr	r2, [pc, #72]	; (800640c <MX_I2C1_Init+0x58>)
 80063c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <MX_I2C1_Init+0x50>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80063ca:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <MX_I2C1_Init+0x50>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <MX_I2C1_Init+0x50>)
 80063d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <MX_I2C1_Init+0x50>)
 80063da:	2200      	movs	r2, #0
 80063dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <MX_I2C1_Init+0x50>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <MX_I2C1_Init+0x50>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <MX_I2C1_Init+0x50>)
 80063ec:	2280      	movs	r2, #128	; 0x80
 80063ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063f0:	4804      	ldr	r0, [pc, #16]	; (8006404 <MX_I2C1_Init+0x50>)
 80063f2:	f005 f8a5 	bl	800b540 <HAL_I2C_Init>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80063fc:	f000 fd2c 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006400:	bf00      	nop
 8006402:	bd80      	pop	{r7, pc}
 8006404:	200477a0 	.word	0x200477a0
 8006408:	40005400 	.word	0x40005400
 800640c:	000186a0 	.word	0x000186a0

08006410 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <MX_I2C2_Init+0x50>)
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <MX_I2C2_Init+0x54>)
 8006418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <MX_I2C2_Init+0x50>)
 800641c:	4a12      	ldr	r2, [pc, #72]	; (8006468 <MX_I2C2_Init+0x58>)
 800641e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <MX_I2C2_Init+0x50>)
 8006422:	2200      	movs	r2, #0
 8006424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006426:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <MX_I2C2_Init+0x50>)
 8006428:	2200      	movs	r2, #0
 800642a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <MX_I2C2_Init+0x50>)
 800642e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006432:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <MX_I2C2_Init+0x50>)
 8006436:	2200      	movs	r2, #0
 8006438:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <MX_I2C2_Init+0x50>)
 800643c:	2200      	movs	r2, #0
 800643e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <MX_I2C2_Init+0x50>)
 8006442:	2200      	movs	r2, #0
 8006444:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <MX_I2C2_Init+0x50>)
 8006448:	2280      	movs	r2, #128	; 0x80
 800644a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800644c:	4804      	ldr	r0, [pc, #16]	; (8006460 <MX_I2C2_Init+0x50>)
 800644e:	f005 f877 	bl	800b540 <HAL_I2C_Init>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006458:	f000 fcfe 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800645c:	bf00      	nop
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20047834 	.word	0x20047834
 8006464:	40005800 	.word	0x40005800
 8006468:	000186a0 	.word	0x000186a0

0800646c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006470:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 8006472:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <MX_SDIO_SD_Init+0x3c>)
 8006474:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 800647e:	2200      	movs	r2, #0
 8006480:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 8006484:	2200      	movs	r2, #0
 8006486:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 800648a:	2200      	movs	r2, #0
 800648c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 8006490:	2200      	movs	r2, #0
 8006492:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <MX_SDIO_SD_Init+0x38>)
 8006496:	2204      	movs	r2, #4
 8006498:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800649a:	bf00      	nop
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20047a34 	.word	0x20047a34
 80064a8:	40012c00 	.word	0x40012c00

080064ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80064b0:	4b17      	ldr	r3, [pc, #92]	; (8006510 <MX_SPI2_Init+0x64>)
 80064b2:	4a18      	ldr	r2, [pc, #96]	; (8006514 <MX_SPI2_Init+0x68>)
 80064b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80064b6:	4b16      	ldr	r3, [pc, #88]	; (8006510 <MX_SPI2_Init+0x64>)
 80064b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80064bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80064be:	4b14      	ldr	r3, [pc, #80]	; (8006510 <MX_SPI2_Init+0x64>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <MX_SPI2_Init+0x64>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <MX_SPI2_Init+0x64>)
 80064cc:	2202      	movs	r2, #2
 80064ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <MX_SPI2_Init+0x64>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80064d6:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <MX_SPI2_Init+0x64>)
 80064d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <MX_SPI2_Init+0x64>)
 80064e0:	2220      	movs	r2, #32
 80064e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <MX_SPI2_Init+0x64>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <MX_SPI2_Init+0x64>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <MX_SPI2_Init+0x64>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <MX_SPI2_Init+0x64>)
 80064f8:	220a      	movs	r2, #10
 80064fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80064fc:	4804      	ldr	r0, [pc, #16]	; (8006510 <MX_SPI2_Init+0x64>)
 80064fe:	f008 f951 	bl	800e7a4 <HAL_SPI_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006508:	f000 fca6 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800650c:	bf00      	nop
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20047680 	.word	0x20047680
 8006514:	40003800 	.word	0x40003800

08006518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b09a      	sub	sp, #104	; 0x68
 800651c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800651e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006522:	2224      	movs	r2, #36	; 0x24
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f00e fa78 	bl	8014a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800652c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006536:	f107 0320 	add.w	r3, r7, #32
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	605a      	str	r2, [r3, #4]
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	611a      	str	r2, [r3, #16]
 8006546:	615a      	str	r2, [r3, #20]
 8006548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800654a:	463b      	mov	r3, r7
 800654c:	2220      	movs	r2, #32
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f00e fa63 	bl	8014a1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006556:	4b42      	ldr	r3, [pc, #264]	; (8006660 <MX_TIM1_Init+0x148>)
 8006558:	4a42      	ldr	r2, [pc, #264]	; (8006664 <MX_TIM1_Init+0x14c>)
 800655a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800655c:	4b40      	ldr	r3, [pc, #256]	; (8006660 <MX_TIM1_Init+0x148>)
 800655e:	2200      	movs	r2, #0
 8006560:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006562:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <MX_TIM1_Init+0x148>)
 8006564:	2200      	movs	r2, #0
 8006566:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006568:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <MX_TIM1_Init+0x148>)
 800656a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800656e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006570:	4b3b      	ldr	r3, [pc, #236]	; (8006660 <MX_TIM1_Init+0x148>)
 8006572:	2200      	movs	r2, #0
 8006574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006576:	4b3a      	ldr	r3, [pc, #232]	; (8006660 <MX_TIM1_Init+0x148>)
 8006578:	2200      	movs	r2, #0
 800657a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800657c:	4b38      	ldr	r3, [pc, #224]	; (8006660 <MX_TIM1_Init+0x148>)
 800657e:	2200      	movs	r2, #0
 8006580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006582:	4837      	ldr	r0, [pc, #220]	; (8006660 <MX_TIM1_Init+0x148>)
 8006584:	f008 feb1 	bl	800f2ea <HAL_TIM_PWM_Init>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800658e:	f000 fc63 	bl	8006e58 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006592:	2303      	movs	r3, #3
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006596:	2300      	movs	r3, #0
 8006598:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800659a:	2301      	movs	r3, #1
 800659c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800659e:	2300      	movs	r3, #0
 80065a0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80065a6:	2300      	movs	r3, #0
 80065a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80065aa:	2301      	movs	r3, #1
 80065ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80065ae:	2300      	movs	r3, #0
 80065b0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80065b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065ba:	4619      	mov	r1, r3
 80065bc:	4828      	ldr	r0, [pc, #160]	; (8006660 <MX_TIM1_Init+0x148>)
 80065be:	f008 fefd 	bl	800f3bc <HAL_TIM_Encoder_Init>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80065c8:	f000 fc46 	bl	8006e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065cc:	2300      	movs	r3, #0
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80065d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065d8:	4619      	mov	r1, r3
 80065da:	4821      	ldr	r0, [pc, #132]	; (8006660 <MX_TIM1_Init+0x148>)
 80065dc:	f009 fc24 	bl	800fe28 <HAL_TIMEx_MasterConfigSynchronization>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80065e6:	f000 fc37 	bl	8006e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065ea:	2360      	movs	r3, #96	; 0x60
 80065ec:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065f2:	2300      	movs	r3, #0
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80065fe:	2300      	movs	r3, #0
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006602:	2300      	movs	r3, #0
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006606:	f107 0320 	add.w	r3, r7, #32
 800660a:	2208      	movs	r2, #8
 800660c:	4619      	mov	r1, r3
 800660e:	4814      	ldr	r0, [pc, #80]	; (8006660 <MX_TIM1_Init+0x148>)
 8006610:	f009 f8a6 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800661a:	f000 fc1d 	bl	8006e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800661e:	2300      	movs	r3, #0
 8006620:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006626:	2300      	movs	r3, #0
 8006628:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800663c:	463b      	mov	r3, r7
 800663e:	4619      	mov	r1, r3
 8006640:	4807      	ldr	r0, [pc, #28]	; (8006660 <MX_TIM1_Init+0x148>)
 8006642:	f009 fc6d 	bl	800ff20 <HAL_TIMEx_ConfigBreakDeadTime>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800664c:	f000 fc04 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006650:	4803      	ldr	r0, [pc, #12]	; (8006660 <MX_TIM1_Init+0x148>)
 8006652:	f000 fff1 	bl	8007638 <HAL_TIM_MspPostInit>

}
 8006656:	bf00      	nop
 8006658:	3768      	adds	r7, #104	; 0x68
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200479f4 	.word	0x200479f4
 8006664:	40010000 	.word	0x40010000

08006668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800666e:	f107 0320 	add.w	r3, r7, #32
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006678:	1d3b      	adds	r3, r7, #4
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	609a      	str	r2, [r3, #8]
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	611a      	str	r2, [r3, #16]
 8006686:	615a      	str	r2, [r3, #20]
 8006688:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800668a:	4b27      	ldr	r3, [pc, #156]	; (8006728 <MX_TIM3_Init+0xc0>)
 800668c:	4a27      	ldr	r2, [pc, #156]	; (800672c <MX_TIM3_Init+0xc4>)
 800668e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006690:	4b25      	ldr	r3, [pc, #148]	; (8006728 <MX_TIM3_Init+0xc0>)
 8006692:	2201      	movs	r2, #1
 8006694:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <MX_TIM3_Init+0xc0>)
 8006698:	2200      	movs	r2, #0
 800669a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 800669c:	4b22      	ldr	r3, [pc, #136]	; (8006728 <MX_TIM3_Init+0xc0>)
 800669e:	f241 1293 	movw	r2, #4499	; 0x1193
 80066a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066a4:	4b20      	ldr	r3, [pc, #128]	; (8006728 <MX_TIM3_Init+0xc0>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066aa:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <MX_TIM3_Init+0xc0>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80066b0:	481d      	ldr	r0, [pc, #116]	; (8006728 <MX_TIM3_Init+0xc0>)
 80066b2:	f008 fe1a 	bl	800f2ea <HAL_TIM_PWM_Init>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80066bc:	f000 fbcc 	bl	8006e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066c0:	2300      	movs	r3, #0
 80066c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80066c8:	f107 0320 	add.w	r3, r7, #32
 80066cc:	4619      	mov	r1, r3
 80066ce:	4816      	ldr	r0, [pc, #88]	; (8006728 <MX_TIM3_Init+0xc0>)
 80066d0:	f009 fbaa 	bl	800fe28 <HAL_TIMEx_MasterConfigSynchronization>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80066da:	f000 fbbd 	bl	8006e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066de:	2360      	movs	r3, #96	; 0x60
 80066e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	2200      	movs	r2, #0
 80066f2:	4619      	mov	r1, r3
 80066f4:	480c      	ldr	r0, [pc, #48]	; (8006728 <MX_TIM3_Init+0xc0>)
 80066f6:	f009 f833 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006700:	f000 fbaa 	bl	8006e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006704:	1d3b      	adds	r3, r7, #4
 8006706:	2204      	movs	r2, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4807      	ldr	r0, [pc, #28]	; (8006728 <MX_TIM3_Init+0xc0>)
 800670c:	f009 f828 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006716:	f000 fb9f 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800671a:	4803      	ldr	r0, [pc, #12]	; (8006728 <MX_TIM3_Init+0xc0>)
 800671c:	f000 ff8c 	bl	8007638 <HAL_TIM_MspPostInit>

}
 8006720:	bf00      	nop
 8006722:	3728      	adds	r7, #40	; 0x28
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	2004788c 	.word	0x2004788c
 800672c:	40000400 	.word	0x40000400

08006730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006736:	f107 0320 	add.w	r3, r7, #32
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006740:	1d3b      	adds	r3, r7, #4
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	605a      	str	r2, [r3, #4]
 8006748:	609a      	str	r2, [r3, #8]
 800674a:	60da      	str	r2, [r3, #12]
 800674c:	611a      	str	r2, [r3, #16]
 800674e:	615a      	str	r2, [r3, #20]
 8006750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006752:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <MX_TIM4_Init+0xc0>)
 8006754:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <MX_TIM4_Init+0xc4>)
 8006756:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <MX_TIM4_Init+0xc0>)
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <MX_TIM4_Init+0xc0>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006764:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <MX_TIM4_Init+0xc0>)
 8006766:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800676a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800676c:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <MX_TIM4_Init+0xc0>)
 800676e:	2200      	movs	r2, #0
 8006770:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006772:	4b1f      	ldr	r3, [pc, #124]	; (80067f0 <MX_TIM4_Init+0xc0>)
 8006774:	2200      	movs	r2, #0
 8006776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006778:	481d      	ldr	r0, [pc, #116]	; (80067f0 <MX_TIM4_Init+0xc0>)
 800677a:	f008 fdb6 	bl	800f2ea <HAL_TIM_PWM_Init>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006784:	f000 fb68 	bl	8006e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006788:	2300      	movs	r3, #0
 800678a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006790:	f107 0320 	add.w	r3, r7, #32
 8006794:	4619      	mov	r1, r3
 8006796:	4816      	ldr	r0, [pc, #88]	; (80067f0 <MX_TIM4_Init+0xc0>)
 8006798:	f009 fb46 	bl	800fe28 <HAL_TIMEx_MasterConfigSynchronization>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80067a2:	f000 fb59 	bl	8006e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067a6:	2360      	movs	r3, #96	; 0x60
 80067a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	2208      	movs	r2, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	480c      	ldr	r0, [pc, #48]	; (80067f0 <MX_TIM4_Init+0xc0>)
 80067be:	f008 ffcf 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80067c8:	f000 fb46 	bl	8006e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	220c      	movs	r2, #12
 80067d0:	4619      	mov	r1, r3
 80067d2:	4807      	ldr	r0, [pc, #28]	; (80067f0 <MX_TIM4_Init+0xc0>)
 80067d4:	f008 ffc4 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80067de:	f000 fb3b 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80067e2:	4803      	ldr	r0, [pc, #12]	; (80067f0 <MX_TIM4_Init+0xc0>)
 80067e4:	f000 ff28 	bl	8007638 <HAL_TIM_MspPostInit>

}
 80067e8:	bf00      	nop
 80067ea:	3728      	adds	r7, #40	; 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20047718 	.word	0x20047718
 80067f4:	40000800 	.word	0x40000800

080067f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067fe:	463b      	mov	r3, r7
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <MX_TIM6_Init+0x64>)
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <MX_TIM6_Init+0x68>)
 800680a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800680c:	4b13      	ldr	r3, [pc, #76]	; (800685c <MX_TIM6_Init+0x64>)
 800680e:	2259      	movs	r2, #89	; 0x59
 8006810:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <MX_TIM6_Init+0x64>)
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <MX_TIM6_Init+0x64>)
 800681a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800681e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <MX_TIM6_Init+0x64>)
 8006822:	2280      	movs	r2, #128	; 0x80
 8006824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006826:	480d      	ldr	r0, [pc, #52]	; (800685c <MX_TIM6_Init+0x64>)
 8006828:	f008 fd10 	bl	800f24c <HAL_TIM_Base_Init>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006832:	f000 fb11 	bl	8006e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006836:	2300      	movs	r3, #0
 8006838:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800683e:	463b      	mov	r3, r7
 8006840:	4619      	mov	r1, r3
 8006842:	4806      	ldr	r0, [pc, #24]	; (800685c <MX_TIM6_Init+0x64>)
 8006844:	f009 faf0 	bl	800fe28 <HAL_TIMEx_MasterConfigSynchronization>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800684e:	f000 fb03 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200479b4 	.word	0x200479b4
 8006860:	40001000 	.word	0x40001000

08006864 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800686a:	463b      	mov	r3, r7
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <MX_TIM7_Init+0x60>)
 8006874:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <MX_TIM7_Init+0x64>)
 8006876:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006878:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <MX_TIM7_Init+0x60>)
 800687a:	22b3      	movs	r2, #179	; 0xb3
 800687c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <MX_TIM7_Init+0x60>)
 8006880:	2200      	movs	r2, #0
 8006882:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <MX_TIM7_Init+0x60>)
 8006886:	2231      	movs	r2, #49	; 0x31
 8006888:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800688a:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <MX_TIM7_Init+0x60>)
 800688c:	2280      	movs	r2, #128	; 0x80
 800688e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006890:	480c      	ldr	r0, [pc, #48]	; (80068c4 <MX_TIM7_Init+0x60>)
 8006892:	f008 fcdb 	bl	800f24c <HAL_TIM_Base_Init>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800689c:	f000 fadc 	bl	8006e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068a0:	2300      	movs	r3, #0
 80068a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80068a8:	463b      	mov	r3, r7
 80068aa:	4619      	mov	r1, r3
 80068ac:	4805      	ldr	r0, [pc, #20]	; (80068c4 <MX_TIM7_Init+0x60>)
 80068ae:	f009 fabb 	bl	800fe28 <HAL_TIMEx_MasterConfigSynchronization>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80068b8:	f000 face 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20047b58 	.word	0x20047b58
 80068c8:	40001400 	.word	0x40001400

080068cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08c      	sub	sp, #48	; 0x30
 80068d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	2224      	movs	r2, #36	; 0x24
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f00e f89e 	bl	8014a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80068e8:	4b22      	ldr	r3, [pc, #136]	; (8006974 <MX_TIM8_Init+0xa8>)
 80068ea:	4a23      	ldr	r2, [pc, #140]	; (8006978 <MX_TIM8_Init+0xac>)
 80068ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <MX_TIM8_Init+0xa8>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80068f4:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <MX_TIM8_Init+0xa8>)
 80068f6:	2210      	movs	r2, #16
 80068f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <MX_TIM8_Init+0xa8>)
 80068fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006900:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <MX_TIM8_Init+0xa8>)
 8006904:	2200      	movs	r2, #0
 8006906:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006908:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <MX_TIM8_Init+0xa8>)
 800690a:	2200      	movs	r2, #0
 800690c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <MX_TIM8_Init+0xa8>)
 8006910:	2200      	movs	r2, #0
 8006912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006914:	2303      	movs	r3, #3
 8006916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800691c:	2301      	movs	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006920:	2300      	movs	r3, #0
 8006922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006928:	2300      	movs	r3, #0
 800692a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800692c:	2301      	movs	r3, #1
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006930:	2300      	movs	r3, #0
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006938:	f107 030c 	add.w	r3, r7, #12
 800693c:	4619      	mov	r1, r3
 800693e:	480d      	ldr	r0, [pc, #52]	; (8006974 <MX_TIM8_Init+0xa8>)
 8006940:	f008 fd3c 	bl	800f3bc <HAL_TIM_Encoder_Init>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800694a:	f000 fa85 	bl	8006e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800694e:	2300      	movs	r3, #0
 8006950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006952:	2300      	movs	r3, #0
 8006954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4806      	ldr	r0, [pc, #24]	; (8006974 <MX_TIM8_Init+0xa8>)
 800695c:	f009 fa64 	bl	800fe28 <HAL_TIMEx_MasterConfigSynchronization>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006966:	f000 fa77 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800696a:	bf00      	nop
 800696c:	3730      	adds	r7, #48	; 0x30
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	200476d8 	.word	0x200476d8
 8006978:	40010400 	.word	0x40010400

0800697c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	609a      	str	r2, [r3, #8]
 800698c:	60da      	str	r2, [r3, #12]
 800698e:	611a      	str	r2, [r3, #16]
 8006990:	615a      	str	r2, [r3, #20]
 8006992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006994:	4b1e      	ldr	r3, [pc, #120]	; (8006a10 <MX_TIM10_Init+0x94>)
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <MX_TIM10_Init+0x98>)
 8006998:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <MX_TIM10_Init+0x94>)
 800699c:	2201      	movs	r2, #1
 800699e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80069a6:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069a8:	f242 3227 	movw	r2, #8999	; 0x2327
 80069ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069ae:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069b4:	4b16      	ldr	r3, [pc, #88]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80069ba:	4815      	ldr	r0, [pc, #84]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069bc:	f008 fc46 	bl	800f24c <HAL_TIM_Base_Init>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80069c6:	f000 fa47 	bl	8006e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80069ca:	4811      	ldr	r0, [pc, #68]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069cc:	f008 fc8d 	bl	800f2ea <HAL_TIM_PWM_Init>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80069d6:	f000 fa3f 	bl	8006e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069da:	2360      	movs	r3, #96	; 0x60
 80069dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	2200      	movs	r2, #0
 80069ee:	4619      	mov	r1, r3
 80069f0:	4807      	ldr	r0, [pc, #28]	; (8006a10 <MX_TIM10_Init+0x94>)
 80069f2:	f008 feb5 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80069fc:	f000 fa2c 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006a00:	4803      	ldr	r0, [pc, #12]	; (8006a10 <MX_TIM10_Init+0x94>)
 8006a02:	f000 fe19 	bl	8007638 <HAL_TIM_MspPostInit>

}
 8006a06:	bf00      	nop
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200477f4 	.word	0x200477f4
 8006a14:	40014400 	.word	0x40014400

08006a18 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a1e:	1d3b      	adds	r3, r7, #4
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	611a      	str	r2, [r3, #16]
 8006a2c:	615a      	str	r2, [r3, #20]
 8006a2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <MX_TIM11_Init+0x98>)
 8006a34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006a36:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a3c:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a44:	f242 3227 	movw	r2, #8999	; 0x2327
 8006a48:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a4a:	4b18      	ldr	r3, [pc, #96]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a50:	4b16      	ldr	r3, [pc, #88]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006a56:	4815      	ldr	r0, [pc, #84]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a58:	f008 fbf8 	bl	800f24c <HAL_TIM_Base_Init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006a62:	f000 f9f9 	bl	8006e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006a66:	4811      	ldr	r0, [pc, #68]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a68:	f008 fc3f 	bl	800f2ea <HAL_TIM_PWM_Init>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006a72:	f000 f9f1 	bl	8006e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a76:	2360      	movs	r3, #96	; 0x60
 8006a78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a86:	1d3b      	adds	r3, r7, #4
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4807      	ldr	r0, [pc, #28]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a8e:	f008 fe67 	bl	800f760 <HAL_TIM_PWM_ConfigChannel>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006a98:	f000 f9de 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006a9c:	4803      	ldr	r0, [pc, #12]	; (8006aac <MX_TIM11_Init+0x94>)
 8006a9e:	f000 fdcb 	bl	8007638 <HAL_TIM_MspPostInit>

}
 8006aa2:	bf00      	nop
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20047914 	.word	0x20047914
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006ab8:	4b0e      	ldr	r3, [pc, #56]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006aba:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <MX_TIM13_Init+0x44>)
 8006abc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006ac0:	2259      	movs	r2, #89	; 0x59
 8006ac2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006acc:	f242 720f 	movw	r2, #9999	; 0x270f
 8006ad0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006ada:	2280      	movs	r2, #128	; 0x80
 8006adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006ade:	4805      	ldr	r0, [pc, #20]	; (8006af4 <MX_TIM13_Init+0x40>)
 8006ae0:	f008 fbb4 	bl	800f24c <HAL_TIM_Base_Init>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006aea:	f000 f9b5 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200478d4 	.word	0x200478d4
 8006af8:	40001c00 	.word	0x40001c00

08006afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b02:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <MX_USART2_UART_Init+0x50>)
 8006b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b22:	220c      	movs	r2, #12
 8006b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b32:	4805      	ldr	r0, [pc, #20]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b34:	f009 fa5a 	bl	800ffec <HAL_UART_Init>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b3e:	f000 f98b 	bl	8006e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20047ab8 	.word	0x20047ab8
 8006b4c:	40004400 	.word	0x40004400

08006b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <MX_DMA_Init+0x5c>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	4a13      	ldr	r2, [pc, #76]	; (8006bac <MX_DMA_Init+0x5c>)
 8006b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b64:	6313      	str	r3, [r2, #48]	; 0x30
 8006b66:	4b11      	ldr	r3, [pc, #68]	; (8006bac <MX_DMA_Init+0x5c>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006b72:	2200      	movs	r2, #0
 8006b74:	2100      	movs	r1, #0
 8006b76:	203a      	movs	r0, #58	; 0x3a
 8006b78:	f003 ff1b 	bl	800a9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006b7c:	203a      	movs	r0, #58	; 0x3a
 8006b7e:	f003 ff34 	bl	800a9ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	203b      	movs	r0, #59	; 0x3b
 8006b88:	f003 ff13 	bl	800a9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006b8c:	203b      	movs	r0, #59	; 0x3b
 8006b8e:	f003 ff2c 	bl	800a9ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006b92:	2200      	movs	r2, #0
 8006b94:	2100      	movs	r1, #0
 8006b96:	2045      	movs	r0, #69	; 0x45
 8006b98:	f003 ff0b 	bl	800a9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006b9c:	2045      	movs	r0, #69	; 0x45
 8006b9e:	f003 ff24 	bl	800a9ea <HAL_NVIC_EnableIRQ>

}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800

08006bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	; 0x30
 8006bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb6:	f107 031c 	add.w	r3, r7, #28
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	605a      	str	r2, [r3, #4]
 8006bc0:	609a      	str	r2, [r3, #8]
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	4b9c      	ldr	r3, [pc, #624]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	4a9b      	ldr	r2, [pc, #620]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006bd0:	f043 0310 	orr.w	r3, r3, #16
 8006bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006bd6:	4b99      	ldr	r3, [pc, #612]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	4b95      	ldr	r3, [pc, #596]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	4a94      	ldr	r2, [pc, #592]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf2:	4b92      	ldr	r3, [pc, #584]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	4b8e      	ldr	r3, [pc, #568]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	4a8d      	ldr	r2, [pc, #564]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c08:	f043 0304 	orr.w	r3, r3, #4
 8006c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0e:	4b8b      	ldr	r3, [pc, #556]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	4b87      	ldr	r3, [pc, #540]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4a86      	ldr	r2, [pc, #536]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2a:	4b84      	ldr	r3, [pc, #528]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	4b80      	ldr	r3, [pc, #512]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	4a7f      	ldr	r2, [pc, #508]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b7d      	ldr	r3, [pc, #500]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	4b79      	ldr	r3, [pc, #484]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	4a78      	ldr	r2, [pc, #480]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c5c:	f043 0308 	orr.w	r3, r3, #8
 8006c60:	6313      	str	r3, [r2, #48]	; 0x30
 8006c62:	4b76      	ldr	r3, [pc, #472]	; (8006e3c <MX_GPIO_Init+0x28c>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c74:	4872      	ldr	r0, [pc, #456]	; (8006e40 <MX_GPIO_Init+0x290>)
 8006c76:	f004 fc31 	bl	800b4dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c80:	4870      	ldr	r0, [pc, #448]	; (8006e44 <MX_GPIO_Init+0x294>)
 8006c82:	f004 fc2b 	bl	800b4dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006c86:	2200      	movs	r2, #0
 8006c88:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c8c:	486e      	ldr	r0, [pc, #440]	; (8006e48 <MX_GPIO_Init+0x298>)
 8006c8e:	f004 fc25 	bl	800b4dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c92:	2200      	movs	r2, #0
 8006c94:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006c98:	486c      	ldr	r0, [pc, #432]	; (8006e4c <MX_GPIO_Init+0x29c>)
 8006c9a:	f004 fc1f 	bl	800b4dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ca2:	4b6b      	ldr	r3, [pc, #428]	; (8006e50 <MX_GPIO_Init+0x2a0>)
 8006ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006caa:	f107 031c 	add.w	r3, r7, #28
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4863      	ldr	r0, [pc, #396]	; (8006e40 <MX_GPIO_Init+0x290>)
 8006cb2:	f004 fa51 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006cb6:	230f      	movs	r3, #15
 8006cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cc2:	f107 031c 	add.w	r3, r7, #28
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4862      	ldr	r0, [pc, #392]	; (8006e54 <MX_GPIO_Init+0x2a4>)
 8006cca:	f004 fa45 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006cce:	23e1      	movs	r3, #225	; 0xe1
 8006cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	f107 031c 	add.w	r3, r7, #28
 8006cde:	4619      	mov	r1, r3
 8006ce0:	485a      	ldr	r0, [pc, #360]	; (8006e4c <MX_GPIO_Init+0x29c>)
 8006ce2:	f004 fa39 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cea:	2303      	movs	r3, #3
 8006cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf2:	f107 031c 	add.w	r3, r7, #28
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4852      	ldr	r0, [pc, #328]	; (8006e44 <MX_GPIO_Init+0x294>)
 8006cfa:	f004 fa2d 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006cfe:	2304      	movs	r3, #4
 8006d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d02:	2300      	movs	r3, #0
 8006d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d06:	2301      	movs	r3, #1
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d0a:	f107 031c 	add.w	r3, r7, #28
 8006d0e:	4619      	mov	r1, r3
 8006d10:	484c      	ldr	r0, [pc, #304]	; (8006e44 <MX_GPIO_Init+0x294>)
 8006d12:	f004 fa21 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006d16:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d20:	2301      	movs	r3, #1
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d24:	f107 031c 	add.w	r3, r7, #28
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4845      	ldr	r0, [pc, #276]	; (8006e40 <MX_GPIO_Init+0x290>)
 8006d2c:	f004 fa14 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006d30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d36:	2301      	movs	r3, #1
 8006d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d42:	f107 031c 	add.w	r3, r7, #28
 8006d46:	4619      	mov	r1, r3
 8006d48:	483d      	ldr	r0, [pc, #244]	; (8006e40 <MX_GPIO_Init+0x290>)
 8006d4a:	f004 fa05 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d54:	2301      	movs	r3, #1
 8006d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d60:	f107 031c 	add.w	r3, r7, #28
 8006d64:	4619      	mov	r1, r3
 8006d66:	4837      	ldr	r0, [pc, #220]	; (8006e44 <MX_GPIO_Init+0x294>)
 8006d68:	f004 f9f6 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006d72:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <MX_GPIO_Init+0x2a0>)
 8006d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d7a:	f107 031c 	add.w	r3, r7, #28
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4831      	ldr	r0, [pc, #196]	; (8006e48 <MX_GPIO_Init+0x298>)
 8006d82:	f004 f9e9 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d94:	2300      	movs	r3, #0
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d98:	f107 031c 	add.w	r3, r7, #28
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	482a      	ldr	r0, [pc, #168]	; (8006e48 <MX_GPIO_Init+0x298>)
 8006da0:	f004 f9da 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006daa:	2301      	movs	r3, #1
 8006dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dae:	2301      	movs	r3, #1
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006db2:	2300      	movs	r3, #0
 8006db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006db6:	f107 031c 	add.w	r3, r7, #28
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4822      	ldr	r0, [pc, #136]	; (8006e48 <MX_GPIO_Init+0x298>)
 8006dbe:	f004 f9cb 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006dc2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006dc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dd4:	f107 031c 	add.w	r3, r7, #28
 8006dd8:	4619      	mov	r1, r3
 8006dda:	481c      	ldr	r0, [pc, #112]	; (8006e4c <MX_GPIO_Init+0x29c>)
 8006ddc:	f004 f9bc 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006de6:	2300      	movs	r3, #0
 8006de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dee:	f107 031c 	add.w	r3, r7, #28
 8006df2:	4619      	mov	r1, r3
 8006df4:	4815      	ldr	r0, [pc, #84]	; (8006e4c <MX_GPIO_Init+0x29c>)
 8006df6:	f004 f9af 	bl	800b158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006dfa:	239b      	movs	r3, #155	; 0x9b
 8006dfc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e02:	2301      	movs	r3, #1
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e06:	f107 031c 	add.w	r3, r7, #28
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	480e      	ldr	r0, [pc, #56]	; (8006e48 <MX_GPIO_Init+0x298>)
 8006e0e:	f004 f9a3 	bl	800b158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	2008      	movs	r0, #8
 8006e18:	f003 fdcb 	bl	800a9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006e1c:	2008      	movs	r0, #8
 8006e1e:	f003 fde4 	bl	800a9ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	2017      	movs	r0, #23
 8006e28:	f003 fdc3 	bl	800a9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006e2c:	2017      	movs	r0, #23
 8006e2e:	f003 fddc 	bl	800a9ea <HAL_NVIC_EnableIRQ>

}
 8006e32:	bf00      	nop
 8006e34:	3730      	adds	r7, #48	; 0x30
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	40021000 	.word	0x40021000
 8006e44:	40020400 	.word	0x40020400
 8006e48:	40020c00 	.word	0x40020c00
 8006e4c:	40020000 	.word	0x40020000
 8006e50:	10310000 	.word	0x10310000
 8006e54:	40020800 	.word	0x40020800

08006e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e5c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e5e:	e7fe      	b.n	8006e5e <Error_Handler+0x6>

08006e60 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <HAL_MspInit+0x4c>)
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	4a0f      	ldr	r2, [pc, #60]	; (8006ebc <HAL_MspInit+0x4c>)
 8006e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e84:	6453      	str	r3, [r2, #68]	; 0x44
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <HAL_MspInit+0x4c>)
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e92:	2300      	movs	r3, #0
 8006e94:	603b      	str	r3, [r7, #0]
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <HAL_MspInit+0x4c>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <HAL_MspInit+0x4c>)
 8006e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea2:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <HAL_MspInit+0x4c>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40023800 	.word	0x40023800

08006ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08c      	sub	sp, #48	; 0x30
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec8:	f107 031c 	add.w	r3, r7, #28
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a4a      	ldr	r2, [pc, #296]	; (8007008 <HAL_ADC_MspInit+0x148>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f040 808e 	bne.w	8007000 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	4b48      	ldr	r3, [pc, #288]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	4a47      	ldr	r2, [pc, #284]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ef4:	4b45      	ldr	r3, [pc, #276]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	4b41      	ldr	r3, [pc, #260]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	4a40      	ldr	r2, [pc, #256]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f0a:	f043 0304 	orr.w	r3, r3, #4
 8006f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f10:	4b3e      	ldr	r3, [pc, #248]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	4b3a      	ldr	r3, [pc, #232]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	4a39      	ldr	r2, [pc, #228]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f2c:	4b37      	ldr	r3, [pc, #220]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	4b33      	ldr	r3, [pc, #204]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	4a32      	ldr	r2, [pc, #200]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f42:	f043 0302 	orr.w	r3, r3, #2
 8006f46:	6313      	str	r3, [r2, #48]	; 0x30
 8006f48:	4b30      	ldr	r3, [pc, #192]	; (800700c <HAL_ADC_MspInit+0x14c>)
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006f54:	230f      	movs	r3, #15
 8006f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f60:	f107 031c 	add.w	r3, r7, #28
 8006f64:	4619      	mov	r1, r3
 8006f66:	482a      	ldr	r0, [pc, #168]	; (8007010 <HAL_ADC_MspInit+0x150>)
 8006f68:	f004 f8f6 	bl	800b158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006f6c:	23ff      	movs	r3, #255	; 0xff
 8006f6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f70:	2303      	movs	r3, #3
 8006f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f78:	f107 031c 	add.w	r3, r7, #28
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4825      	ldr	r0, [pc, #148]	; (8007014 <HAL_ADC_MspInit+0x154>)
 8006f80:	f004 f8ea 	bl	800b158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006f84:	2303      	movs	r3, #3
 8006f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f90:	f107 031c 	add.w	r3, r7, #28
 8006f94:	4619      	mov	r1, r3
 8006f96:	4820      	ldr	r0, [pc, #128]	; (8007018 <HAL_ADC_MspInit+0x158>)
 8006f98:	f004 f8de 	bl	800b158 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006f9c:	4b1f      	ldr	r3, [pc, #124]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006f9e:	4a20      	ldr	r2, [pc, #128]	; (8007020 <HAL_ADC_MspInit+0x160>)
 8006fa0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006fa2:	4b1e      	ldr	r3, [pc, #120]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fa8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006faa:	4b1c      	ldr	r3, [pc, #112]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006fb6:	4b19      	ldr	r3, [pc, #100]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fbc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fc4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fcc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fd4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006fdc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006fe4:	480d      	ldr	r0, [pc, #52]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006fe6:	f003 fd1b 	bl	800aa20 <HAL_DMA_Init>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006ff0:	f7ff ff32 	bl	8006e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a09      	ldr	r2, [pc, #36]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <HAL_ADC_MspInit+0x15c>)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007000:	bf00      	nop
 8007002:	3730      	adds	r7, #48	; 0x30
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40012100 	.word	0x40012100
 800700c:	40023800 	.word	0x40023800
 8007010:	40020800 	.word	0x40020800
 8007014:	40020000 	.word	0x40020000
 8007018:	40020400 	.word	0x40020400
 800701c:	20047af8 	.word	0x20047af8
 8007020:	40026440 	.word	0x40026440

08007024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	; 0x30
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702c:	f107 031c 	add.w	r3, r7, #28
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	609a      	str	r2, [r3, #8]
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a32      	ldr	r2, [pc, #200]	; (800710c <HAL_I2C_MspInit+0xe8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d12c      	bne.n	80070a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <HAL_I2C_MspInit+0xec>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	4a30      	ldr	r2, [pc, #192]	; (8007110 <HAL_I2C_MspInit+0xec>)
 8007050:	f043 0302 	orr.w	r3, r3, #2
 8007054:	6313      	str	r3, [r2, #48]	; 0x30
 8007056:	4b2e      	ldr	r3, [pc, #184]	; (8007110 <HAL_I2C_MspInit+0xec>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007062:	23c0      	movs	r3, #192	; 0xc0
 8007064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007066:	2312      	movs	r3, #18
 8007068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800706a:	2301      	movs	r3, #1
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800706e:	2303      	movs	r3, #3
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007072:	2304      	movs	r3, #4
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007076:	f107 031c 	add.w	r3, r7, #28
 800707a:	4619      	mov	r1, r3
 800707c:	4825      	ldr	r0, [pc, #148]	; (8007114 <HAL_I2C_MspInit+0xf0>)
 800707e:	f004 f86b 	bl	800b158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	4b22      	ldr	r3, [pc, #136]	; (8007110 <HAL_I2C_MspInit+0xec>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4a21      	ldr	r2, [pc, #132]	; (8007110 <HAL_I2C_MspInit+0xec>)
 800708c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007090:	6413      	str	r3, [r2, #64]	; 0x40
 8007092:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <HAL_I2C_MspInit+0xec>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800709e:	e031      	b.n	8007104 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1c      	ldr	r2, [pc, #112]	; (8007118 <HAL_I2C_MspInit+0xf4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d12c      	bne.n	8007104 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	4b18      	ldr	r3, [pc, #96]	; (8007110 <HAL_I2C_MspInit+0xec>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	4a17      	ldr	r2, [pc, #92]	; (8007110 <HAL_I2C_MspInit+0xec>)
 80070b4:	f043 0302 	orr.w	r3, r3, #2
 80070b8:	6313      	str	r3, [r2, #48]	; 0x30
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <HAL_I2C_MspInit+0xec>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80070c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80070ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070cc:	2312      	movs	r3, #18
 80070ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070d0:	2301      	movs	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070d4:	2303      	movs	r3, #3
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80070d8:	2304      	movs	r3, #4
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070dc:	f107 031c 	add.w	r3, r7, #28
 80070e0:	4619      	mov	r1, r3
 80070e2:	480c      	ldr	r0, [pc, #48]	; (8007114 <HAL_I2C_MspInit+0xf0>)
 80070e4:	f004 f838 	bl	800b158 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	4b08      	ldr	r3, [pc, #32]	; (8007110 <HAL_I2C_MspInit+0xec>)
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	4a07      	ldr	r2, [pc, #28]	; (8007110 <HAL_I2C_MspInit+0xec>)
 80070f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070f6:	6413      	str	r3, [r2, #64]	; 0x40
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <HAL_I2C_MspInit+0xec>)
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	68fb      	ldr	r3, [r7, #12]
}
 8007104:	bf00      	nop
 8007106:	3730      	adds	r7, #48	; 0x30
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40005400 	.word	0x40005400
 8007110:	40023800 	.word	0x40023800
 8007114:	40020400 	.word	0x40020400
 8007118:	40005800 	.word	0x40005800

0800711c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007124:	f107 0314 	add.w	r3, r7, #20
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	605a      	str	r2, [r3, #4]
 800712e:	609a      	str	r2, [r3, #8]
 8007130:	60da      	str	r2, [r3, #12]
 8007132:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a69      	ldr	r2, [pc, #420]	; (80072e0 <HAL_SD_MspInit+0x1c4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	f040 80cb 	bne.w	80072d6 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	4b67      	ldr	r3, [pc, #412]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	4a66      	ldr	r2, [pc, #408]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 800714a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800714e:	6453      	str	r3, [r2, #68]	; 0x44
 8007150:	4b64      	ldr	r3, [pc, #400]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 8007152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	4b60      	ldr	r3, [pc, #384]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	4a5f      	ldr	r2, [pc, #380]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 8007166:	f043 0304 	orr.w	r3, r3, #4
 800716a:	6313      	str	r3, [r2, #48]	; 0x30
 800716c:	4b5d      	ldr	r3, [pc, #372]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
 800717c:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	4a58      	ldr	r2, [pc, #352]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 8007182:	f043 0308 	orr.w	r3, r3, #8
 8007186:	6313      	str	r3, [r2, #48]	; 0x30
 8007188:	4b56      	ldr	r3, [pc, #344]	; (80072e4 <HAL_SD_MspInit+0x1c8>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007194:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007198:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719a:	2302      	movs	r3, #2
 800719c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a2:	2303      	movs	r3, #3
 80071a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80071a6:	230c      	movs	r3, #12
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071aa:	f107 0314 	add.w	r3, r7, #20
 80071ae:	4619      	mov	r1, r3
 80071b0:	484d      	ldr	r0, [pc, #308]	; (80072e8 <HAL_SD_MspInit+0x1cc>)
 80071b2:	f003 ffd1 	bl	800b158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071b6:	2304      	movs	r3, #4
 80071b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ba:	2302      	movs	r3, #2
 80071bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c2:	2303      	movs	r3, #3
 80071c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80071c6:	230c      	movs	r3, #12
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071ca:	f107 0314 	add.w	r3, r7, #20
 80071ce:	4619      	mov	r1, r3
 80071d0:	4846      	ldr	r0, [pc, #280]	; (80072ec <HAL_SD_MspInit+0x1d0>)
 80071d2:	f003 ffc1 	bl	800b158 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80071d6:	4b46      	ldr	r3, [pc, #280]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 80071d8:	4a46      	ldr	r2, [pc, #280]	; (80072f4 <HAL_SD_MspInit+0x1d8>)
 80071da:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80071dc:	4b44      	ldr	r3, [pc, #272]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 80071de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071e4:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071ea:	4b41      	ldr	r3, [pc, #260]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071f0:	4b3f      	ldr	r3, [pc, #252]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 80071f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071f8:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 80071fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007200:	4b3b      	ldr	r3, [pc, #236]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 8007202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007206:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007208:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 800720a:	2220      	movs	r2, #32
 800720c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800720e:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 8007210:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007214:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 8007218:	2204      	movs	r2, #4
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800721c:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 800721e:	2203      	movs	r2, #3
 8007220:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007222:	4b33      	ldr	r3, [pc, #204]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 8007224:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007228:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800722a:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 800722c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007232:	482f      	ldr	r0, [pc, #188]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 8007234:	f003 fbf4 	bl	800aa20 <HAL_DMA_Init>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800723e:	f7ff fe0b 	bl	8006e58 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 8007246:	641a      	str	r2, [r3, #64]	; 0x40
 8007248:	4a29      	ldr	r2, [pc, #164]	; (80072f0 <HAL_SD_MspInit+0x1d4>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800724e:	4b2a      	ldr	r3, [pc, #168]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007250:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <HAL_SD_MspInit+0x1e0>)
 8007252:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007254:	4b28      	ldr	r3, [pc, #160]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800725a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800725c:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 800725e:	2240      	movs	r2, #64	; 0x40
 8007260:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007262:	4b25      	ldr	r3, [pc, #148]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007264:	2200      	movs	r2, #0
 8007266:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 800726a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800726e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007270:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007276:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007278:	4b1f      	ldr	r3, [pc, #124]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 800727a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800727e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007280:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007282:	2220      	movs	r2, #32
 8007284:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007286:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007288:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800728c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800728e:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007290:	2204      	movs	r2, #4
 8007292:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007294:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 8007296:	2203      	movs	r2, #3
 8007298:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800729a:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 800729c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80072a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 80072a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80072aa:	4813      	ldr	r0, [pc, #76]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 80072ac:	f003 fbb8 	bl	800aa20 <HAL_DMA_Init>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80072b6:	f7ff fdcf 	bl	8006e58 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a0e      	ldr	r2, [pc, #56]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 80072be:	63da      	str	r2, [r3, #60]	; 0x3c
 80072c0:	4a0d      	ldr	r2, [pc, #52]	; (80072f8 <HAL_SD_MspInit+0x1dc>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80072c6:	2200      	movs	r2, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	2031      	movs	r0, #49	; 0x31
 80072cc:	f003 fb71 	bl	800a9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80072d0:	2031      	movs	r0, #49	; 0x31
 80072d2:	f003 fb8a 	bl	800a9ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80072d6:	bf00      	nop
 80072d8:	3728      	adds	r7, #40	; 0x28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40020800 	.word	0x40020800
 80072ec:	40020c00 	.word	0x40020c00
 80072f0:	20047620 	.word	0x20047620
 80072f4:	40026458 	.word	0x40026458
 80072f8:	20047954 	.word	0x20047954
 80072fc:	400264a0 	.word	0x400264a0

08007300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	609a      	str	r2, [r3, #8]
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <HAL_SPI_MspInit+0x84>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d12c      	bne.n	800737c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <HAL_SPI_MspInit+0x88>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <HAL_SPI_MspInit+0x88>)
 800732c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007330:	6413      	str	r3, [r2, #64]	; 0x40
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <HAL_SPI_MspInit+0x88>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <HAL_SPI_MspInit+0x88>)
 8007344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007346:	4a10      	ldr	r2, [pc, #64]	; (8007388 <HAL_SPI_MspInit+0x88>)
 8007348:	f043 0302 	orr.w	r3, r3, #2
 800734c:	6313      	str	r3, [r2, #48]	; 0x30
 800734e:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <HAL_SPI_MspInit+0x88>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800735a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800735e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007360:	2302      	movs	r3, #2
 8007362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007368:	2303      	movs	r3, #3
 800736a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800736c:	2305      	movs	r3, #5
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007370:	f107 0314 	add.w	r3, r7, #20
 8007374:	4619      	mov	r1, r3
 8007376:	4805      	ldr	r0, [pc, #20]	; (800738c <HAL_SPI_MspInit+0x8c>)
 8007378:	f003 feee 	bl	800b158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800737c:	bf00      	nop
 800737e:	3728      	adds	r7, #40	; 0x28
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40003800 	.word	0x40003800
 8007388:	40023800 	.word	0x40023800
 800738c:	40020400 	.word	0x40020400

08007390 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08c      	sub	sp, #48	; 0x30
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007398:	f107 031c 	add.w	r3, r7, #28
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	60da      	str	r2, [r3, #12]
 80073a6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a2d      	ldr	r2, [pc, #180]	; (8007464 <HAL_TIM_PWM_MspInit+0xd4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d12d      	bne.n	800740e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80073b2:	2300      	movs	r3, #0
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	4b2c      	ldr	r3, [pc, #176]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	4a2b      	ldr	r2, [pc, #172]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	6453      	str	r3, [r2, #68]	; 0x44
 80073c2:	4b29      	ldr	r3, [pc, #164]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 80073c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	4b25      	ldr	r3, [pc, #148]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	4a24      	ldr	r2, [pc, #144]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 80073d8:	f043 0310 	orr.w	r3, r3, #16
 80073dc:	6313      	str	r3, [r2, #48]	; 0x30
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80073ea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80073ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f0:	2302      	movs	r3, #2
 80073f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f8:	2300      	movs	r3, #0
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80073fc:	2301      	movs	r3, #1
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007400:	f107 031c 	add.w	r3, r7, #28
 8007404:	4619      	mov	r1, r3
 8007406:	4819      	ldr	r0, [pc, #100]	; (800746c <HAL_TIM_PWM_MspInit+0xdc>)
 8007408:	f003 fea6 	bl	800b158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800740c:	e026      	b.n	800745c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a17      	ldr	r2, [pc, #92]	; (8007470 <HAL_TIM_PWM_MspInit+0xe0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d10e      	bne.n	8007436 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	4b12      	ldr	r3, [pc, #72]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	4a11      	ldr	r2, [pc, #68]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 8007422:	f043 0302 	orr.w	r3, r3, #2
 8007426:	6413      	str	r3, [r2, #64]	; 0x40
 8007428:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	693b      	ldr	r3, [r7, #16]
}
 8007434:	e012      	b.n	800745c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <HAL_TIM_PWM_MspInit+0xe4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d10d      	bne.n	800745c <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	4b08      	ldr	r3, [pc, #32]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	4a07      	ldr	r2, [pc, #28]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 800744a:	f043 0304 	orr.w	r3, r3, #4
 800744e:	6413      	str	r3, [r2, #64]	; 0x40
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_TIM_PWM_MspInit+0xd8>)
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	bf00      	nop
 800745e:	3730      	adds	r7, #48	; 0x30
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40010000 	.word	0x40010000
 8007468:	40023800 	.word	0x40023800
 800746c:	40021000 	.word	0x40021000
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800

08007478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a3e      	ldr	r2, [pc, #248]	; (8007580 <HAL_TIM_Base_MspInit+0x108>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d116      	bne.n	80074b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	4b3d      	ldr	r3, [pc, #244]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	4a3c      	ldr	r2, [pc, #240]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007494:	f043 0310 	orr.w	r3, r3, #16
 8007498:	6413      	str	r3, [r2, #64]	; 0x40
 800749a:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80074a6:	2200      	movs	r2, #0
 80074a8:	2101      	movs	r1, #1
 80074aa:	2036      	movs	r0, #54	; 0x36
 80074ac:	f003 fa81 	bl	800a9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80074b0:	2036      	movs	r0, #54	; 0x36
 80074b2:	f003 fa9a 	bl	800a9ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80074b6:	e05e      	b.n	8007576 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a32      	ldr	r2, [pc, #200]	; (8007588 <HAL_TIM_Base_MspInit+0x110>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d116      	bne.n	80074f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	4a2e      	ldr	r2, [pc, #184]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 80074cc:	f043 0320 	orr.w	r3, r3, #32
 80074d0:	6413      	str	r3, [r2, #64]	; 0x40
 80074d2:	4b2c      	ldr	r3, [pc, #176]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	2037      	movs	r0, #55	; 0x37
 80074e4:	f003 fa65 	bl	800a9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80074e8:	2037      	movs	r0, #55	; 0x37
 80074ea:	f003 fa7e 	bl	800a9ea <HAL_NVIC_EnableIRQ>
}
 80074ee:	e042      	b.n	8007576 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a25      	ldr	r2, [pc, #148]	; (800758c <HAL_TIM_Base_MspInit+0x114>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	4b21      	ldr	r3, [pc, #132]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007502:	4a20      	ldr	r2, [pc, #128]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007508:	6453      	str	r3, [r2, #68]	; 0x44
 800750a:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	697b      	ldr	r3, [r7, #20]
}
 8007516:	e02e      	b.n	8007576 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <HAL_TIM_Base_MspInit+0x118>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d10e      	bne.n	8007540 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	4b17      	ldr	r3, [pc, #92]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	4a16      	ldr	r2, [pc, #88]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 800752c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007530:	6453      	str	r3, [r2, #68]	; 0x44
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	693b      	ldr	r3, [r7, #16]
}
 800753e:	e01a      	b.n	8007576 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a13      	ldr	r2, [pc, #76]	; (8007594 <HAL_TIM_Base_MspInit+0x11c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d115      	bne.n	8007576 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 8007554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007558:	6413      	str	r3, [r2, #64]	; 0x40
 800755a:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <HAL_TIM_Base_MspInit+0x10c>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007566:	2200      	movs	r2, #0
 8007568:	2100      	movs	r1, #0
 800756a:	202c      	movs	r0, #44	; 0x2c
 800756c:	f003 fa21 	bl	800a9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007570:	202c      	movs	r0, #44	; 0x2c
 8007572:	f003 fa3a 	bl	800a9ea <HAL_NVIC_EnableIRQ>
}
 8007576:	bf00      	nop
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40001000 	.word	0x40001000
 8007584:	40023800 	.word	0x40023800
 8007588:	40001400 	.word	0x40001400
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800
 8007594:	40001c00 	.word	0x40001c00

08007598 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a0:	f107 0314 	add.w	r3, r7, #20
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	60da      	str	r2, [r3, #12]
 80075ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1d      	ldr	r2, [pc, #116]	; (800762c <HAL_TIM_Encoder_MspInit+0x94>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d133      	bne.n	8007622 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	4b1c      	ldr	r3, [pc, #112]	; (8007630 <HAL_TIM_Encoder_MspInit+0x98>)
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <HAL_TIM_Encoder_MspInit+0x98>)
 80075c4:	f043 0302 	orr.w	r3, r3, #2
 80075c8:	6453      	str	r3, [r2, #68]	; 0x44
 80075ca:	4b19      	ldr	r3, [pc, #100]	; (8007630 <HAL_TIM_Encoder_MspInit+0x98>)
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	4b15      	ldr	r3, [pc, #84]	; (8007630 <HAL_TIM_Encoder_MspInit+0x98>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	4a14      	ldr	r2, [pc, #80]	; (8007630 <HAL_TIM_Encoder_MspInit+0x98>)
 80075e0:	f043 0304 	orr.w	r3, r3, #4
 80075e4:	6313      	str	r3, [r2, #48]	; 0x30
 80075e6:	4b12      	ldr	r3, [pc, #72]	; (8007630 <HAL_TIM_Encoder_MspInit+0x98>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80075f2:	23c0      	movs	r3, #192	; 0xc0
 80075f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f6:	2302      	movs	r3, #2
 80075f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075fe:	2300      	movs	r3, #0
 8007600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007602:	2303      	movs	r3, #3
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007606:	f107 0314 	add.w	r3, r7, #20
 800760a:	4619      	mov	r1, r3
 800760c:	4809      	ldr	r0, [pc, #36]	; (8007634 <HAL_TIM_Encoder_MspInit+0x9c>)
 800760e:	f003 fda3 	bl	800b158 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	202c      	movs	r0, #44	; 0x2c
 8007618:	f003 f9cb 	bl	800a9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800761c:	202c      	movs	r0, #44	; 0x2c
 800761e:	f003 f9e4 	bl	800a9ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007622:	bf00      	nop
 8007624:	3728      	adds	r7, #40	; 0x28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40010400 	.word	0x40010400
 8007630:	40023800 	.word	0x40023800
 8007634:	40020800 	.word	0x40020800

08007638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08c      	sub	sp, #48	; 0x30
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007640:	f107 031c 	add.w	r3, r7, #28
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	609a      	str	r2, [r3, #8]
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a5c      	ldr	r2, [pc, #368]	; (80077c8 <HAL_TIM_MspPostInit+0x190>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d11f      	bne.n	800769a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800765a:	2300      	movs	r3, #0
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	4b5b      	ldr	r3, [pc, #364]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	4a5a      	ldr	r2, [pc, #360]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 8007664:	f043 0310 	orr.w	r3, r3, #16
 8007668:	6313      	str	r3, [r2, #48]	; 0x30
 800766a:	4b58      	ldr	r3, [pc, #352]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800767a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767c:	2302      	movs	r3, #2
 800767e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007680:	2300      	movs	r3, #0
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007684:	2300      	movs	r3, #0
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007688:	2301      	movs	r3, #1
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800768c:	f107 031c 	add.w	r3, r7, #28
 8007690:	4619      	mov	r1, r3
 8007692:	484f      	ldr	r0, [pc, #316]	; (80077d0 <HAL_TIM_MspPostInit+0x198>)
 8007694:	f003 fd60 	bl	800b158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007698:	e091      	b.n	80077be <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a4d      	ldr	r2, [pc, #308]	; (80077d4 <HAL_TIM_MspPostInit+0x19c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d11e      	bne.n	80076e2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	4b48      	ldr	r3, [pc, #288]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	4a47      	ldr	r2, [pc, #284]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 80076ae:	f043 0302 	orr.w	r3, r3, #2
 80076b2:	6313      	str	r3, [r2, #48]	; 0x30
 80076b4:	4b45      	ldr	r3, [pc, #276]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80076c0:	2330      	movs	r3, #48	; 0x30
 80076c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c4:	2302      	movs	r3, #2
 80076c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076cc:	2300      	movs	r3, #0
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80076d0:	2302      	movs	r3, #2
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076d4:	f107 031c 	add.w	r3, r7, #28
 80076d8:	4619      	mov	r1, r3
 80076da:	483f      	ldr	r0, [pc, #252]	; (80077d8 <HAL_TIM_MspPostInit+0x1a0>)
 80076dc:	f003 fd3c 	bl	800b158 <HAL_GPIO_Init>
}
 80076e0:	e06d      	b.n	80077be <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a3d      	ldr	r2, [pc, #244]	; (80077dc <HAL_TIM_MspPostInit+0x1a4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d11f      	bne.n	800772c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	4b36      	ldr	r3, [pc, #216]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	4a35      	ldr	r2, [pc, #212]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 80076f6:	f043 0308 	orr.w	r3, r3, #8
 80076fa:	6313      	str	r3, [r2, #48]	; 0x30
 80076fc:	4b33      	ldr	r3, [pc, #204]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007708:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800770c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800770e:	2302      	movs	r3, #2
 8007710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007716:	2300      	movs	r3, #0
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800771a:	2302      	movs	r3, #2
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800771e:	f107 031c 	add.w	r3, r7, #28
 8007722:	4619      	mov	r1, r3
 8007724:	482e      	ldr	r0, [pc, #184]	; (80077e0 <HAL_TIM_MspPostInit+0x1a8>)
 8007726:	f003 fd17 	bl	800b158 <HAL_GPIO_Init>
}
 800772a:	e048      	b.n	80077be <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <HAL_TIM_MspPostInit+0x1ac>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d11f      	bne.n	8007776 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	4b24      	ldr	r3, [pc, #144]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a23      	ldr	r2, [pc, #140]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 8007740:	f043 0302 	orr.w	r3, r3, #2
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b21      	ldr	r3, [pc, #132]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007758:	2302      	movs	r3, #2
 800775a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007760:	2300      	movs	r3, #0
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007764:	2303      	movs	r3, #3
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007768:	f107 031c 	add.w	r3, r7, #28
 800776c:	4619      	mov	r1, r3
 800776e:	481a      	ldr	r0, [pc, #104]	; (80077d8 <HAL_TIM_MspPostInit+0x1a0>)
 8007770:	f003 fcf2 	bl	800b158 <HAL_GPIO_Init>
}
 8007774:	e023      	b.n	80077be <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1b      	ldr	r2, [pc, #108]	; (80077e8 <HAL_TIM_MspPostInit+0x1b0>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d11e      	bne.n	80077be <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	4a10      	ldr	r2, [pc, #64]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 800778a:	f043 0302 	orr.w	r3, r3, #2
 800778e:	6313      	str	r3, [r2, #48]	; 0x30
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <HAL_TIM_MspPostInit+0x194>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800779c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a2:	2302      	movs	r3, #2
 80077a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077aa:	2300      	movs	r3, #0
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80077ae:	2303      	movs	r3, #3
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077b2:	f107 031c 	add.w	r3, r7, #28
 80077b6:	4619      	mov	r1, r3
 80077b8:	4807      	ldr	r0, [pc, #28]	; (80077d8 <HAL_TIM_MspPostInit+0x1a0>)
 80077ba:	f003 fccd 	bl	800b158 <HAL_GPIO_Init>
}
 80077be:	bf00      	nop
 80077c0:	3730      	adds	r7, #48	; 0x30
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40021000 	.word	0x40021000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40020400 	.word	0x40020400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40020c00 	.word	0x40020c00
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800

080077ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f4:	f107 0314 	add.w	r3, r7, #20
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a19      	ldr	r2, [pc, #100]	; (8007870 <HAL_UART_MspInit+0x84>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d12b      	bne.n	8007866 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <HAL_UART_MspInit+0x88>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	4a17      	ldr	r2, [pc, #92]	; (8007874 <HAL_UART_MspInit+0x88>)
 8007818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781c:	6413      	str	r3, [r2, #64]	; 0x40
 800781e:	4b15      	ldr	r3, [pc, #84]	; (8007874 <HAL_UART_MspInit+0x88>)
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <HAL_UART_MspInit+0x88>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	4a10      	ldr	r2, [pc, #64]	; (8007874 <HAL_UART_MspInit+0x88>)
 8007834:	f043 0308 	orr.w	r3, r3, #8
 8007838:	6313      	str	r3, [r2, #48]	; 0x30
 800783a:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <HAL_UART_MspInit+0x88>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007846:	2360      	movs	r3, #96	; 0x60
 8007848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800784a:	2302      	movs	r3, #2
 800784c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007852:	2303      	movs	r3, #3
 8007854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007856:	2307      	movs	r3, #7
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800785a:	f107 0314 	add.w	r3, r7, #20
 800785e:	4619      	mov	r1, r3
 8007860:	4805      	ldr	r0, [pc, #20]	; (8007878 <HAL_UART_MspInit+0x8c>)
 8007862:	f003 fc79 	bl	800b158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007866:	bf00      	nop
 8007868:	3728      	adds	r7, #40	; 0x28
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40004400 	.word	0x40004400
 8007874:	40023800 	.word	0x40023800
 8007878:	40020c00 	.word	0x40020c00

0800787c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007880:	e7fe      	b.n	8007880 <NMI_Handler+0x4>

08007882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007882:	b480      	push	{r7}
 8007884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007886:	e7fe      	b.n	8007886 <HardFault_Handler+0x4>

08007888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800788c:	e7fe      	b.n	800788c <MemManage_Handler+0x4>

0800788e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800788e:	b480      	push	{r7}
 8007890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007892:	e7fe      	b.n	8007892 <BusFault_Handler+0x4>

08007894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007898:	e7fe      	b.n	8007898 <UsageFault_Handler+0x4>

0800789a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078b6:	b480      	push	{r7}
 80078b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078ba:	bf00      	nop
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078c8:	f002 fb52 	bl	8009f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078cc:	bf00      	nop
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80078d4:	2004      	movs	r0, #4
 80078d6:	f003 fe1b 	bl	800b510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	bd80      	pop	{r7, pc}

080078de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80078e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078e6:	f003 fe13 	bl	800b510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80078ea:	bf00      	nop
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80078f4:	4803      	ldr	r0, [pc, #12]	; (8007904 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80078f6:	f007 fe2a 	bl	800f54e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80078fa:	4803      	ldr	r0, [pc, #12]	; (8007908 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80078fc:	f007 fe27 	bl	800f54e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007900:	bf00      	nop
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200476d8 	.word	0x200476d8
 8007908:	200478d4 	.word	0x200478d4

0800790c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007910:	4802      	ldr	r0, [pc, #8]	; (800791c <SDIO_IRQHandler+0x10>)
 8007912:	f005 fec3 	bl	800d69c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007916:	bf00      	nop
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20047a34 	.word	0x20047a34

08007920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007924:	4802      	ldr	r0, [pc, #8]	; (8007930 <TIM6_DAC_IRQHandler+0x10>)
 8007926:	f007 fe12 	bl	800f54e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800792a:	bf00      	nop
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	200479b4 	.word	0x200479b4

08007934 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007938:	4802      	ldr	r0, [pc, #8]	; (8007944 <TIM7_IRQHandler+0x10>)
 800793a:	f007 fe08 	bl	800f54e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800793e:	bf00      	nop
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20047b58 	.word	0x20047b58

08007948 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800794c:	4802      	ldr	r0, [pc, #8]	; (8007958 <DMA2_Stream2_IRQHandler+0x10>)
 800794e:	f003 f98f 	bl	800ac70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007952:	bf00      	nop
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20047af8 	.word	0x20047af8

0800795c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007960:	4802      	ldr	r0, [pc, #8]	; (800796c <DMA2_Stream3_IRQHandler+0x10>)
 8007962:	f003 f985 	bl	800ac70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007966:	bf00      	nop
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20047620 	.word	0x20047620

08007970 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <DMA2_Stream6_IRQHandler+0x10>)
 8007976:	f003 f97b 	bl	800ac70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20047954 	.word	0x20047954

08007984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800798c:	4a14      	ldr	r2, [pc, #80]	; (80079e0 <_sbrk+0x5c>)
 800798e:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <_sbrk+0x60>)
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007998:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <_sbrk+0x64>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079a0:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <_sbrk+0x64>)
 80079a2:	4a12      	ldr	r2, [pc, #72]	; (80079ec <_sbrk+0x68>)
 80079a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <_sbrk+0x64>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d207      	bcs.n	80079c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079b4:	f00d f808 	bl	80149c8 <__errno>
 80079b8:	4602      	mov	r2, r0
 80079ba:	230c      	movs	r3, #12
 80079bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295
 80079c2:	e009      	b.n	80079d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079c4:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <_sbrk+0x64>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <_sbrk+0x64>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	4a05      	ldr	r2, [pc, #20]	; (80079e8 <_sbrk+0x64>)
 80079d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80079d6:	68fb      	ldr	r3, [r7, #12]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20050000 	.word	0x20050000
 80079e4:	00000800 	.word	0x00000800
 80079e8:	20000240 	.word	0x20000240
 80079ec:	20049ca8 	.word	0x20049ca8

080079f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80079f4:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <SystemInit+0x28>)
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fa:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <SystemInit+0x28>)
 80079fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <SystemInit+0x28>)
 8007a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8007a0c:	bf00      	nop
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	e000ed00 	.word	0xe000ed00

08007a1c <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007a1c:	b598      	push	{r3, r4, r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
	lcd_init();
 8007a20:	f7f9 fafa 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007a24:	483b      	ldr	r0, [pc, #236]	; (8007b14 <cppInit+0xf8>)
 8007a26:	f7fd fd0f 	bl	8005448 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007a2a:	2064      	movs	r0, #100	; 0x64
 8007a2c:	f002 fac0 	bl	8009fb0 <HAL_Delay>
	power_sensor.updateValues();
 8007a30:	4838      	ldr	r0, [pc, #224]	; (8007b14 <cppInit+0xf8>)
 8007a32:	f7fd fd19 	bl	8005468 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007a36:	f7f9 fb33 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7f9 fb3f 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007a42:	4835      	ldr	r0, [pc, #212]	; (8007b18 <cppInit+0xfc>)
 8007a44:	f7f9 fb66 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007a48:	2101      	movs	r1, #1
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f7f9 fb38 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007a50:	4830      	ldr	r0, [pc, #192]	; (8007b14 <cppInit+0xf8>)
 8007a52:	f7fd fd33 	bl	80054bc <_ZN11PowerSensor17getButteryVoltageEv>
 8007a56:	ee10 3a10 	vmov	r3, s0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f8 fd8c 	bl	8000578 <__aeabi_f2d>
 8007a60:	4603      	mov	r3, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	461a      	mov	r2, r3
 8007a66:	4623      	mov	r3, r4
 8007a68:	482c      	ldr	r0, [pc, #176]	; (8007b1c <cppInit+0x100>)
 8007a6a:	f7f9 fb53 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 8007a6e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007a72:	f002 fa9d 	bl	8009fb0 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007a76:	482a      	ldr	r0, [pc, #168]	; (8007b20 <cppInit+0x104>)
 8007a78:	f7fc ffa6 	bl	80049c8 <_ZN6Logger10sdCardInitEv>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <cppInit+0x76>
		led.fullColor('G');
 8007a82:	2147      	movs	r1, #71	; 0x47
 8007a84:	4827      	ldr	r0, [pc, #156]	; (8007b24 <cppInit+0x108>)
 8007a86:	f7fa fb65 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007a8a:	2064      	movs	r0, #100	; 0x64
 8007a8c:	f002 fa90 	bl	8009fb0 <HAL_Delay>
 8007a90:	e006      	b.n	8007aa0 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007a92:	2152      	movs	r1, #82	; 0x52
 8007a94:	4823      	ldr	r0, [pc, #140]	; (8007b24 <cppInit+0x108>)
 8007a96:	f7fa fb5d 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007a9a:	2064      	movs	r0, #100	; 0x64
 8007a9c:	f002 fa88 	bl	8009fb0 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007aa0:	4821      	ldr	r0, [pc, #132]	; (8007b28 <cppInit+0x10c>)
 8007aa2:	f7fa fcb3 	bl	800240c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007aa6:	4821      	ldr	r0, [pc, #132]	; (8007b2c <cppInit+0x110>)
 8007aa8:	f7fd fa62 	bl	8004f70 <_ZN5Motor4initEv>
	encoder.init();
 8007aac:	4820      	ldr	r0, [pc, #128]	; (8007b30 <cppInit+0x114>)
 8007aae:	f7f9 fcc1 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 8007ab2:	4820      	ldr	r0, [pc, #128]	; (8007b34 <cppInit+0x118>)
 8007ab4:	f7fa f90c 	bl	8001cd0 <_ZN3IMU4initEv>
	line_trace.init();
 8007ab8:	481f      	ldr	r0, [pc, #124]	; (8007b38 <cppInit+0x11c>)
 8007aba:	f7fb ffdd 	bl	8003a78 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007abe:	481a      	ldr	r0, [pc, #104]	; (8007b28 <cppInit+0x10c>)
 8007ac0:	f7fa fd9a 	bl	80025f8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ac8:	f002 fa72 	bl	8009fb0 <HAL_Delay>

	led.fullColor('M');
 8007acc:	214d      	movs	r1, #77	; 0x4d
 8007ace:	4815      	ldr	r0, [pc, #84]	; (8007b24 <cppInit+0x108>)
 8007ad0:	f7fa fb40 	bl	8002154 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007ad4:	4817      	ldr	r0, [pc, #92]	; (8007b34 <cppInit+0x118>)
 8007ad6:	f7fa f9c5 	bl	8001e64 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007ada:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007b3c <cppInit+0x120>
 8007ade:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007b40 <cppInit+0x124>
 8007ae2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007b44 <cppInit+0x128>
 8007ae6:	4818      	ldr	r0, [pc, #96]	; (8007b48 <cppInit+0x12c>)
 8007ae8:	f7fe f99e 	bl	8005e28 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007aec:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007b3c <cppInit+0x120>
 8007af0:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007b4c <cppInit+0x130>
 8007af4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007b50 <cppInit+0x134>
 8007af8:	4813      	ldr	r0, [pc, #76]	; (8007b48 <cppInit+0x12c>)
 8007afa:	f7fe f9ae 	bl	8005e5a <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007afe:	4815      	ldr	r0, [pc, #84]	; (8007b54 <cppInit+0x138>)
 8007b00:	f7fd fbab 	bl	800525a <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007b04:	4814      	ldr	r0, [pc, #80]	; (8007b58 <cppInit+0x13c>)
 8007b06:	f7fd fc43 	bl	8005390 <_ZN13PathFollowing4initEv>

	esc.init();
 8007b0a:	4814      	ldr	r0, [pc, #80]	; (8007b5c <cppInit+0x140>)
 8007b0c:	f7f9 fb6e 	bl	80011ec <_ZN3ESC4initEv>

}
 8007b10:	bf00      	nop
 8007b12:	bd98      	pop	{r3, r4, r7, pc}
 8007b14:	2000055c 	.word	0x2000055c
 8007b18:	08019014 	.word	0x08019014
 8007b1c:	0801901c 	.word	0x0801901c
 8007b20:	2000057c 	.word	0x2000057c
 8007b24:	20000558 	.word	0x20000558
 8007b28:	20000244 	.word	0x20000244
 8007b2c:	20000554 	.word	0x20000554
 8007b30:	20020928 	.word	0x20020928
 8007b34:	20000568 	.word	0x20000568
 8007b38:	200209d4 	.word	0x200209d4
 8007b3c:	00000000 	.word	0x00000000
 8007b40:	4129999a 	.word	0x4129999a
 8007b44:	3f99999a 	.word	0x3f99999a
 8007b48:	20020950 	.word	0x20020950
 8007b4c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007b50:	3d75c28f 	.word	0x3d75c28f
 8007b54:	20020990 	.word	0x20020990
 8007b58:	2002db20 	.word	0x2002db20
 8007b5c:	200209d0 	.word	0x200209d0

08007b60 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007b64:	480e      	ldr	r0, [pc, #56]	; (8007ba0 <cppFlip1ms+0x40>)
 8007b66:	f7fa fcaf 	bl	80024c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007b6a:	480e      	ldr	r0, [pc, #56]	; (8007ba4 <cppFlip1ms+0x44>)
 8007b6c:	f7fa f8d8 	bl	8001d20 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007b70:	480d      	ldr	r0, [pc, #52]	; (8007ba8 <cppFlip1ms+0x48>)
 8007b72:	f7f9 fc81 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007b76:	480d      	ldr	r0, [pc, #52]	; (8007bac <cppFlip1ms+0x4c>)
 8007b78:	f7fc fa24 	bl	8003fc4 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007b7c:	480c      	ldr	r0, [pc, #48]	; (8007bb0 <cppFlip1ms+0x50>)
 8007b7e:	f7fe f985 	bl	8005e8c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007b82:	480c      	ldr	r0, [pc, #48]	; (8007bb4 <cppFlip1ms+0x54>)
 8007b84:	f7fd fb3c 	bl	8005200 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007b88:	480b      	ldr	r0, [pc, #44]	; (8007bb8 <cppFlip1ms+0x58>)
 8007b8a:	f7fd fd67 	bl	800565c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007b8e:	480b      	ldr	r0, [pc, #44]	; (8007bbc <cppFlip1ms+0x5c>)
 8007b90:	f7fd fa00 	bl	8004f94 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007b94:	4804      	ldr	r0, [pc, #16]	; (8007ba8 <cppFlip1ms+0x48>)
 8007b96:	f7f9 fd07 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000244 	.word	0x20000244
 8007ba4:	20000568 	.word	0x20000568
 8007ba8:	20020928 	.word	0x20020928
 8007bac:	200209d4 	.word	0x200209d4
 8007bb0:	20020950 	.word	0x20020950
 8007bb4:	20020990 	.word	0x20020990
 8007bb8:	2000053c 	.word	0x2000053c
 8007bbc:	20000554 	.word	0x20000554

08007bc0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007bc4:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <cppFlip100ns+0x10>)
 8007bc6:	f7fa fc31 	bl	800242c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007bca:	bf00      	nop
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000244 	.word	0x20000244

08007bd4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007bd8:	480a      	ldr	r0, [pc, #40]	; (8007c04 <cppFlip10ms+0x30>)
 8007bda:	f7fc f926 	bl	8003e2a <_ZN9LineTrace17getTargetVelocityEv>
 8007bde:	eef0 7a40 	vmov.f32	s15, s0
 8007be2:	eeb0 0a67 	vmov.f32	s0, s15
 8007be6:	4808      	ldr	r0, [pc, #32]	; (8007c08 <cppFlip10ms+0x34>)
 8007be8:	f7fc ff36 	bl	8004a58 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007bec:	4807      	ldr	r0, [pc, #28]	; (8007c0c <cppFlip10ms+0x38>)
 8007bee:	f7fe f98f 	bl	8005f10 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007bf2:	eef0 7a40 	vmov.f32	s15, s0
 8007bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8007bfa:	4803      	ldr	r0, [pc, #12]	; (8007c08 <cppFlip10ms+0x34>)
 8007bfc:	f7fc ff7a 	bl	8004af4 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007c00:	bf00      	nop
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	200209d4 	.word	0x200209d4
 8007c08:	2000057c 	.word	0x2000057c
 8007c0c:	20020950 	.word	0x20020950

08007c10 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d103      	bne.n	8007c28 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8007c20:	4807      	ldr	r0, [pc, #28]	; (8007c40 <cppExit+0x30>)
 8007c22:	f7fd fcd3 	bl	80055cc <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 8007c26:	e006      	b.n	8007c36 <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2e:	d102      	bne.n	8007c36 <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8007c30:	4803      	ldr	r0, [pc, #12]	; (8007c40 <cppExit+0x30>)
 8007c32:	f7fd fcef 	bl	8005614 <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000053c 	.word	0x2000053c
 8007c44:	00000000 	.word	0x00000000

08007c48 <cppLoop>:

void cppLoop(void)
{
 8007c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007c4e:	4baf      	ldr	r3, [pc, #700]	; (8007f0c <cppLoop+0x2c4>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f3bf 8f5b 	dmb	ish
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bf0c      	ite	eq
 8007c60:	2301      	moveq	r3, #1
 8007c62:	2300      	movne	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d015      	beq.n	8007c96 <cppLoop+0x4e>
 8007c6a:	48a8      	ldr	r0, [pc, #672]	; (8007f0c <cppLoop+0x2c4>)
 8007c6c:	f00c fe9d 	bl	80149aa <__cxa_guard_acquire>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bf14      	ite	ne
 8007c76:	2301      	movne	r3, #1
 8007c78:	2300      	moveq	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <cppLoop+0x4e>
 8007c80:	48a3      	ldr	r0, [pc, #652]	; (8007f10 <cppLoop+0x2c8>)
 8007c82:	f7fc f800 	bl	8003c86 <_ZN9LineTrace5getKpEv>
 8007c86:	eef0 7a40 	vmov.f32	s15, s0
 8007c8a:	4ba2      	ldr	r3, [pc, #648]	; (8007f14 <cppLoop+0x2cc>)
 8007c8c:	edc3 7a00 	vstr	s15, [r3]
 8007c90:	489e      	ldr	r0, [pc, #632]	; (8007f0c <cppLoop+0x2c4>)
 8007c92:	f00c fe96 	bl	80149c2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007c96:	4ba0      	ldr	r3, [pc, #640]	; (8007f18 <cppLoop+0x2d0>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f3bf 8f5b 	dmb	ish
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2301      	moveq	r3, #1
 8007caa:	2300      	movne	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d015      	beq.n	8007cde <cppLoop+0x96>
 8007cb2:	4899      	ldr	r0, [pc, #612]	; (8007f18 <cppLoop+0x2d0>)
 8007cb4:	f00c fe79 	bl	80149aa <__cxa_guard_acquire>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <cppLoop+0x96>
 8007cc8:	4891      	ldr	r0, [pc, #580]	; (8007f10 <cppLoop+0x2c8>)
 8007cca:	f7fb ffeb 	bl	8003ca4 <_ZN9LineTrace5getKiEv>
 8007cce:	eef0 7a40 	vmov.f32	s15, s0
 8007cd2:	4b92      	ldr	r3, [pc, #584]	; (8007f1c <cppLoop+0x2d4>)
 8007cd4:	edc3 7a00 	vstr	s15, [r3]
 8007cd8:	488f      	ldr	r0, [pc, #572]	; (8007f18 <cppLoop+0x2d0>)
 8007cda:	f00c fe72 	bl	80149c2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007cde:	4b90      	ldr	r3, [pc, #576]	; (8007f20 <cppLoop+0x2d8>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f3bf 8f5b 	dmb	ish
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d015      	beq.n	8007d26 <cppLoop+0xde>
 8007cfa:	4889      	ldr	r0, [pc, #548]	; (8007f20 <cppLoop+0x2d8>)
 8007cfc:	f00c fe55 	bl	80149aa <__cxa_guard_acquire>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf14      	ite	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	2300      	moveq	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <cppLoop+0xde>
 8007d10:	487f      	ldr	r0, [pc, #508]	; (8007f10 <cppLoop+0x2c8>)
 8007d12:	f7fb ffd6 	bl	8003cc2 <_ZN9LineTrace5getKdEv>
 8007d16:	eef0 7a40 	vmov.f32	s15, s0
 8007d1a:	4b82      	ldr	r3, [pc, #520]	; (8007f24 <cppLoop+0x2dc>)
 8007d1c:	edc3 7a00 	vstr	s15, [r3]
 8007d20:	487f      	ldr	r0, [pc, #508]	; (8007f20 <cppLoop+0x2d8>)
 8007d22:	f00c fe4e 	bl	80149c2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007d26:	4b80      	ldr	r3, [pc, #512]	; (8007f28 <cppLoop+0x2e0>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	f3bf 8f5b 	dmb	ish
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf0c      	ite	eq
 8007d38:	2301      	moveq	r3, #1
 8007d3a:	2300      	movne	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d015      	beq.n	8007d6e <cppLoop+0x126>
 8007d42:	4879      	ldr	r0, [pc, #484]	; (8007f28 <cppLoop+0x2e0>)
 8007d44:	f00c fe31 	bl	80149aa <__cxa_guard_acquire>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bf14      	ite	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	2300      	moveq	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <cppLoop+0x126>
 8007d58:	486d      	ldr	r0, [pc, #436]	; (8007f10 <cppLoop+0x2c8>)
 8007d5a:	f7fb ffda 	bl	8003d12 <_ZN9LineTrace9getKpSlowEv>
 8007d5e:	eef0 7a40 	vmov.f32	s15, s0
 8007d62:	4b72      	ldr	r3, [pc, #456]	; (8007f2c <cppLoop+0x2e4>)
 8007d64:	edc3 7a00 	vstr	s15, [r3]
 8007d68:	486f      	ldr	r0, [pc, #444]	; (8007f28 <cppLoop+0x2e0>)
 8007d6a:	f00c fe2a 	bl	80149c2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007d6e:	4b70      	ldr	r3, [pc, #448]	; (8007f30 <cppLoop+0x2e8>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	f3bf 8f5b 	dmb	ish
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d015      	beq.n	8007db6 <cppLoop+0x16e>
 8007d8a:	4869      	ldr	r0, [pc, #420]	; (8007f30 <cppLoop+0x2e8>)
 8007d8c:	f00c fe0d 	bl	80149aa <__cxa_guard_acquire>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	2300      	moveq	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <cppLoop+0x16e>
 8007da0:	485b      	ldr	r0, [pc, #364]	; (8007f10 <cppLoop+0x2c8>)
 8007da2:	f7fb ffc5 	bl	8003d30 <_ZN9LineTrace9getKiSlowEv>
 8007da6:	eef0 7a40 	vmov.f32	s15, s0
 8007daa:	4b62      	ldr	r3, [pc, #392]	; (8007f34 <cppLoop+0x2ec>)
 8007dac:	edc3 7a00 	vstr	s15, [r3]
 8007db0:	485f      	ldr	r0, [pc, #380]	; (8007f30 <cppLoop+0x2e8>)
 8007db2:	f00c fe06 	bl	80149c2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007db6:	4b60      	ldr	r3, [pc, #384]	; (8007f38 <cppLoop+0x2f0>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f3bf 8f5b 	dmb	ish
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d015      	beq.n	8007dfe <cppLoop+0x1b6>
 8007dd2:	4859      	ldr	r0, [pc, #356]	; (8007f38 <cppLoop+0x2f0>)
 8007dd4:	f00c fde9 	bl	80149aa <__cxa_guard_acquire>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <cppLoop+0x1b6>
 8007de8:	4849      	ldr	r0, [pc, #292]	; (8007f10 <cppLoop+0x2c8>)
 8007dea:	f7fb ffb0 	bl	8003d4e <_ZN9LineTrace9getKdSlowEv>
 8007dee:	eef0 7a40 	vmov.f32	s15, s0
 8007df2:	4b52      	ldr	r3, [pc, #328]	; (8007f3c <cppLoop+0x2f4>)
 8007df4:	edc3 7a00 	vstr	s15, [r3]
 8007df8:	484f      	ldr	r0, [pc, #316]	; (8007f38 <cppLoop+0x2f0>)
 8007dfa:	f00c fde2 	bl	80149c2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007dfe:	4b50      	ldr	r3, [pc, #320]	; (8007f40 <cppLoop+0x2f8>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f3bf 8f5b 	dmb	ish
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d015      	beq.n	8007e46 <cppLoop+0x1fe>
 8007e1a:	4849      	ldr	r0, [pc, #292]	; (8007f40 <cppLoop+0x2f8>)
 8007e1c:	f00c fdc5 	bl	80149aa <__cxa_guard_acquire>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bf14      	ite	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <cppLoop+0x1fe>
 8007e30:	4837      	ldr	r0, [pc, #220]	; (8007f10 <cppLoop+0x2c8>)
 8007e32:	f7fb fffa 	bl	8003e2a <_ZN9LineTrace17getTargetVelocityEv>
 8007e36:	eef0 7a40 	vmov.f32	s15, s0
 8007e3a:	4b42      	ldr	r3, [pc, #264]	; (8007f44 <cppLoop+0x2fc>)
 8007e3c:	edc3 7a00 	vstr	s15, [r3]
 8007e40:	483f      	ldr	r0, [pc, #252]	; (8007f40 <cppLoop+0x2f8>)
 8007e42:	f00c fdbe 	bl	80149c2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007e46:	4b40      	ldr	r3, [pc, #256]	; (8007f48 <cppLoop+0x300>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f3bf 8f5b 	dmb	ish
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d015      	beq.n	8007e8e <cppLoop+0x246>
 8007e62:	4839      	ldr	r0, [pc, #228]	; (8007f48 <cppLoop+0x300>)
 8007e64:	f00c fda1 	bl	80149aa <__cxa_guard_acquire>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bf14      	ite	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	2300      	moveq	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <cppLoop+0x246>
 8007e78:	4825      	ldr	r0, [pc, #148]	; (8007f10 <cppLoop+0x2c8>)
 8007e7a:	f7fb ffe6 	bl	8003e4a <_ZN9LineTrace14getMaxVelocityEv>
 8007e7e:	eef0 7a40 	vmov.f32	s15, s0
 8007e82:	4b32      	ldr	r3, [pc, #200]	; (8007f4c <cppLoop+0x304>)
 8007e84:	edc3 7a00 	vstr	s15, [r3]
 8007e88:	482f      	ldr	r0, [pc, #188]	; (8007f48 <cppLoop+0x300>)
 8007e8a:	f00c fd9a 	bl	80149c2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007e8e:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <cppLoop+0x308>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f3bf 8f5b 	dmb	ish
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d015      	beq.n	8007ed6 <cppLoop+0x28e>
 8007eaa:	4829      	ldr	r0, [pc, #164]	; (8007f50 <cppLoop+0x308>)
 8007eac:	f00c fd7d 	bl	80149aa <__cxa_guard_acquire>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bf14      	ite	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	2300      	moveq	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <cppLoop+0x28e>
 8007ec0:	4813      	ldr	r0, [pc, #76]	; (8007f10 <cppLoop+0x2c8>)
 8007ec2:	f7fb ffd2 	bl	8003e6a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007ec6:	eef0 7a40 	vmov.f32	s15, s0
 8007eca:	4b22      	ldr	r3, [pc, #136]	; (8007f54 <cppLoop+0x30c>)
 8007ecc:	edc3 7a00 	vstr	s15, [r3]
 8007ed0:	481f      	ldr	r0, [pc, #124]	; (8007f50 <cppLoop+0x308>)
 8007ed2:	f00c fd76 	bl	80149c2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007ed6:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <cppLoop+0x310>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f3bf 8f5b 	dmb	ish
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2301      	moveq	r3, #1
 8007eea:	2300      	movne	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d03f      	beq.n	8007f72 <cppLoop+0x32a>
 8007ef2:	4819      	ldr	r0, [pc, #100]	; (8007f58 <cppLoop+0x310>)
 8007ef4:	f00c fd59 	bl	80149aa <__cxa_guard_acquire>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	2300      	moveq	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d034      	beq.n	8007f72 <cppLoop+0x32a>
 8007f08:	e028      	b.n	8007f5c <cppLoop+0x314>
 8007f0a:	bf00      	nop
 8007f0c:	20045258 	.word	0x20045258
 8007f10:	200209d4 	.word	0x200209d4
 8007f14:	20045254 	.word	0x20045254
 8007f18:	20045260 	.word	0x20045260
 8007f1c:	2004525c 	.word	0x2004525c
 8007f20:	20045268 	.word	0x20045268
 8007f24:	20045264 	.word	0x20045264
 8007f28:	20045270 	.word	0x20045270
 8007f2c:	2004526c 	.word	0x2004526c
 8007f30:	20045278 	.word	0x20045278
 8007f34:	20045274 	.word	0x20045274
 8007f38:	20045280 	.word	0x20045280
 8007f3c:	2004527c 	.word	0x2004527c
 8007f40:	20045288 	.word	0x20045288
 8007f44:	20045284 	.word	0x20045284
 8007f48:	20045290 	.word	0x20045290
 8007f4c:	2004528c 	.word	0x2004528c
 8007f50:	20045298 	.word	0x20045298
 8007f54:	20045294 	.word	0x20045294
 8007f58:	200452a0 	.word	0x200452a0
 8007f5c:	48b6      	ldr	r0, [pc, #728]	; (8008238 <cppLoop+0x5f0>)
 8007f5e:	f7fb ff94 	bl	8003e8a <_ZN9LineTrace14getMinVelocityEv>
 8007f62:	eef0 7a40 	vmov.f32	s15, s0
 8007f66:	4bb5      	ldr	r3, [pc, #724]	; (800823c <cppLoop+0x5f4>)
 8007f68:	edc3 7a00 	vstr	s15, [r3]
 8007f6c:	48b4      	ldr	r0, [pc, #720]	; (8008240 <cppLoop+0x5f8>)
 8007f6e:	f00c fd28 	bl	80149c2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007f72:	4bb4      	ldr	r3, [pc, #720]	; (8008244 <cppLoop+0x5fc>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f3bf 8f5b 	dmb	ish
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d015      	beq.n	8007fba <cppLoop+0x372>
 8007f8e:	48ad      	ldr	r0, [pc, #692]	; (8008244 <cppLoop+0x5fc>)
 8007f90:	f00c fd0b 	bl	80149aa <__cxa_guard_acquire>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bf14      	ite	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	2300      	moveq	r3, #0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <cppLoop+0x372>
 8007fa4:	48a4      	ldr	r0, [pc, #656]	; (8008238 <cppLoop+0x5f0>)
 8007fa6:	f7fb ff80 	bl	8003eaa <_ZN9LineTrace15getMinVelocity2Ev>
 8007faa:	eef0 7a40 	vmov.f32	s15, s0
 8007fae:	4ba6      	ldr	r3, [pc, #664]	; (8008248 <cppLoop+0x600>)
 8007fb0:	edc3 7a00 	vstr	s15, [r3]
 8007fb4:	48a3      	ldr	r0, [pc, #652]	; (8008244 <cppLoop+0x5fc>)
 8007fb6:	f00c fd04 	bl	80149c2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007fba:	4ba4      	ldr	r3, [pc, #656]	; (800824c <cppLoop+0x604>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f3bf 8f5b 	dmb	ish
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d015      	beq.n	8008002 <cppLoop+0x3ba>
 8007fd6:	489d      	ldr	r0, [pc, #628]	; (800824c <cppLoop+0x604>)
 8007fd8:	f00c fce7 	bl	80149aa <__cxa_guard_acquire>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <cppLoop+0x3ba>
 8007fec:	4892      	ldr	r0, [pc, #584]	; (8008238 <cppLoop+0x5f0>)
 8007fee:	f7fb ffa0 	bl	8003f32 <_ZN9LineTrace9getMaxAccEv>
 8007ff2:	eef0 7a40 	vmov.f32	s15, s0
 8007ff6:	4b96      	ldr	r3, [pc, #600]	; (8008250 <cppLoop+0x608>)
 8007ff8:	edc3 7a00 	vstr	s15, [r3]
 8007ffc:	4893      	ldr	r0, [pc, #588]	; (800824c <cppLoop+0x604>)
 8007ffe:	f00c fce0 	bl	80149c2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8008002:	4b94      	ldr	r3, [pc, #592]	; (8008254 <cppLoop+0x60c>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f3bf 8f5b 	dmb	ish
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	bf0c      	ite	eq
 8008014:	2301      	moveq	r3, #1
 8008016:	2300      	movne	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d015      	beq.n	800804a <cppLoop+0x402>
 800801e:	488d      	ldr	r0, [pc, #564]	; (8008254 <cppLoop+0x60c>)
 8008020:	f00c fcc3 	bl	80149aa <__cxa_guard_acquire>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	bf14      	ite	ne
 800802a:	2301      	movne	r3, #1
 800802c:	2300      	moveq	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <cppLoop+0x402>
 8008034:	4880      	ldr	r0, [pc, #512]	; (8008238 <cppLoop+0x5f0>)
 8008036:	f7fb ffb2 	bl	8003f9e <_ZN9LineTrace9getMaxDecEv>
 800803a:	eef0 7a40 	vmov.f32	s15, s0
 800803e:	4b86      	ldr	r3, [pc, #536]	; (8008258 <cppLoop+0x610>)
 8008040:	edc3 7a00 	vstr	s15, [r3]
 8008044:	4883      	ldr	r0, [pc, #524]	; (8008254 <cppLoop+0x60c>)
 8008046:	f00c fcbc 	bl	80149c2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 800804a:	4b84      	ldr	r3, [pc, #528]	; (800825c <cppLoop+0x614>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	f3bf 8f5b 	dmb	ish
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d015      	beq.n	8008092 <cppLoop+0x44a>
 8008066:	487d      	ldr	r0, [pc, #500]	; (800825c <cppLoop+0x614>)
 8008068:	f00c fc9f 	bl	80149aa <__cxa_guard_acquire>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	bf14      	ite	ne
 8008072:	2301      	movne	r3, #1
 8008074:	2300      	moveq	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <cppLoop+0x44a>
 800807c:	486e      	ldr	r0, [pc, #440]	; (8008238 <cppLoop+0x5f0>)
 800807e:	f7fb ff7c 	bl	8003f7a <_ZN9LineTrace10getMaxAcc2Ev>
 8008082:	eef0 7a40 	vmov.f32	s15, s0
 8008086:	4b76      	ldr	r3, [pc, #472]	; (8008260 <cppLoop+0x618>)
 8008088:	edc3 7a00 	vstr	s15, [r3]
 800808c:	4873      	ldr	r0, [pc, #460]	; (800825c <cppLoop+0x614>)
 800808e:	f00c fc98 	bl	80149c2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008092:	4b74      	ldr	r3, [pc, #464]	; (8008264 <cppLoop+0x61c>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f3bf 8f5b 	dmb	ish
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bf0c      	ite	eq
 80080a4:	2301      	moveq	r3, #1
 80080a6:	2300      	movne	r3, #0
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d015      	beq.n	80080da <cppLoop+0x492>
 80080ae:	486d      	ldr	r0, [pc, #436]	; (8008264 <cppLoop+0x61c>)
 80080b0:	f00c fc7b 	bl	80149aa <__cxa_guard_acquire>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bf14      	ite	ne
 80080ba:	2301      	movne	r3, #1
 80080bc:	2300      	moveq	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <cppLoop+0x492>
 80080c4:	485c      	ldr	r0, [pc, #368]	; (8008238 <cppLoop+0x5f0>)
 80080c6:	f7fb ff46 	bl	8003f56 <_ZN9LineTrace10getMaxDec2Ev>
 80080ca:	eef0 7a40 	vmov.f32	s15, s0
 80080ce:	4b66      	ldr	r3, [pc, #408]	; (8008268 <cppLoop+0x620>)
 80080d0:	edc3 7a00 	vstr	s15, [r3]
 80080d4:	4863      	ldr	r0, [pc, #396]	; (8008264 <cppLoop+0x61c>)
 80080d6:	f00c fc74 	bl	80149c2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80080da:	4864      	ldr	r0, [pc, #400]	; (800826c <cppLoop+0x624>)
 80080dc:	f7fd f9fe 	bl	80054dc <_ZN12RotarySwitch8getValueEv>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b0f      	cmp	r3, #15
 80080e4:	f201 8617 	bhi.w	8009d16 <cppLoop+0x20ce>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <cppLoop+0x4a8>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008131 	.word	0x08008131
 80080f4:	080084fd 	.word	0x080084fd
 80080f8:	08008871 	.word	0x08008871
 80080fc:	08008b3d 	.word	0x08008b3d
 8008100:	08008f23 	.word	0x08008f23
 8008104:	0800933d 	.word	0x0800933d
 8008108:	080095c3 	.word	0x080095c3
 800810c:	08009d17 	.word	0x08009d17
 8008110:	08009d17 	.word	0x08009d17
 8008114:	08009d17 	.word	0x08009d17
 8008118:	08009845 	.word	0x08009845
 800811c:	08009901 	.word	0x08009901
 8008120:	080099a1 	.word	0x080099a1
 8008124:	08009a27 	.word	0x08009a27
 8008128:	08009b65 	.word	0x08009b65
 800812c:	08009c3f 	.word	0x08009c3f
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 8008130:	2157      	movs	r1, #87	; 0x57
 8008132:	484f      	ldr	r0, [pc, #316]	; (8008270 <cppLoop+0x628>)
 8008134:	f7fa f80e 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008138:	f7f8 ffb2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800813c:	2100      	movs	r1, #0
 800813e:	2000      	movs	r0, #0
 8008140:	f7f8 ffbe 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8008144:	483c      	ldr	r0, [pc, #240]	; (8008238 <cppLoop+0x5f0>)
 8008146:	f7fb fde4 	bl	8003d12 <_ZN9LineTrace9getKpSlowEv>
 800814a:	eeb0 7a40 	vmov.f32	s14, s0
 800814e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008274 <cppLoop+0x62c>
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	eeb0 0a67 	vmov.f32	s0, s15
 800815a:	f7fa fbbd 	bl	80028d8 <_ZSt3absf>
 800815e:	ee10 3a10 	vmov	r3, s0
 8008162:	4618      	mov	r0, r3
 8008164:	f7f8 fa08 	bl	8000578 <__aeabi_f2d>
 8008168:	4603      	mov	r3, r0
 800816a:	460c      	mov	r4, r1
 800816c:	461a      	mov	r2, r3
 800816e:	4623      	mov	r3, r4
 8008170:	4841      	ldr	r0, [pc, #260]	; (8008278 <cppLoop+0x630>)
 8008172:	f7f8 ffcf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008176:	2101      	movs	r1, #1
 8008178:	2000      	movs	r0, #0
 800817a:	f7f8 ffa1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 800817e:	482e      	ldr	r0, [pc, #184]	; (8008238 <cppLoop+0x5f0>)
 8008180:	f7fb fdd6 	bl	8003d30 <_ZN9LineTrace9getKiSlowEv>
 8008184:	eeb0 7a40 	vmov.f32	s14, s0
 8008188:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800827c <cppLoop+0x634>
 800818c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008190:	eeb0 0a67 	vmov.f32	s0, s15
 8008194:	f7fa fba0 	bl	80028d8 <_ZSt3absf>
 8008198:	ee10 3a10 	vmov	r3, s0
 800819c:	4618      	mov	r0, r3
 800819e:	f7f8 f9eb 	bl	8000578 <__aeabi_f2d>
 80081a2:	4605      	mov	r5, r0
 80081a4:	460e      	mov	r6, r1
 80081a6:	4824      	ldr	r0, [pc, #144]	; (8008238 <cppLoop+0x5f0>)
 80081a8:	f7fb fdd1 	bl	8003d4e <_ZN9LineTrace9getKdSlowEv>
 80081ac:	eeb0 7a40 	vmov.f32	s14, s0
 80081b0:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008280 <cppLoop+0x638>
 80081b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b8:	eeb0 0a67 	vmov.f32	s0, s15
 80081bc:	f7fa fb8c 	bl	80028d8 <_ZSt3absf>
 80081c0:	ee10 3a10 	vmov	r3, s0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 f9d7 	bl	8000578 <__aeabi_f2d>
 80081ca:	4603      	mov	r3, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	e9cd 3400 	strd	r3, r4, [sp]
 80081d2:	462a      	mov	r2, r5
 80081d4:	4633      	mov	r3, r6
 80081d6:	482b      	ldr	r0, [pc, #172]	; (8008284 <cppLoop+0x63c>)
 80081d8:	f7f8 ff9c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80081dc:	482a      	ldr	r0, [pc, #168]	; (8008288 <cppLoop+0x640>)
 80081de:	f7f9 ff55 	bl	800208c <_ZN8JoyStick8getValueEv>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d04e      	beq.n	8008290 <cppLoop+0x648>
			led.LR(-1, 1);
 80081f2:	2201      	movs	r2, #1
 80081f4:	f04f 31ff 	mov.w	r1, #4294967295
 80081f8:	481d      	ldr	r0, [pc, #116]	; (8008270 <cppLoop+0x628>)
 80081fa:	f7fa f867 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008202:	f001 fed5 	bl	8009fb0 <HAL_Delay>

			selector_gain++;
 8008206:	4b21      	ldr	r3, [pc, #132]	; (800828c <cppLoop+0x644>)
 8008208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800820c:	b29b      	uxth	r3, r3
 800820e:	3301      	adds	r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	b21a      	sxth	r2, r3
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <cppLoop+0x644>)
 8008216:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008218:	4b1c      	ldr	r3, [pc, #112]	; (800828c <cppLoop+0x644>)
 800821a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800821e:	2b02      	cmp	r3, #2
 8008220:	dd02      	ble.n	8008228 <cppLoop+0x5e0>
 8008222:	4b1a      	ldr	r3, [pc, #104]	; (800828c <cppLoop+0x644>)
 8008224:	2200      	movs	r2, #0
 8008226:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008228:	2200      	movs	r2, #0
 800822a:	f04f 31ff 	mov.w	r1, #4294967295
 800822e:	4810      	ldr	r0, [pc, #64]	; (8008270 <cppLoop+0x628>)
 8008230:	f7fa f84c 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008234:	f001 bd71 	b.w	8009d1a <cppLoop+0x20d2>
 8008238:	200209d4 	.word	0x200209d4
 800823c:	2004529c 	.word	0x2004529c
 8008240:	200452a0 	.word	0x200452a0
 8008244:	200452a8 	.word	0x200452a8
 8008248:	200452a4 	.word	0x200452a4
 800824c:	200452b0 	.word	0x200452b0
 8008250:	200452ac 	.word	0x200452ac
 8008254:	200452b8 	.word	0x200452b8
 8008258:	200452b4 	.word	0x200452b4
 800825c:	200452c0 	.word	0x200452c0
 8008260:	200452bc 	.word	0x200452bc
 8008264:	200452c8 	.word	0x200452c8
 8008268:	200452c4 	.word	0x200452c4
 800826c:	20000550 	.word	0x20000550
 8008270:	20000558 	.word	0x20000558
 8008274:	461c4000 	.word	0x461c4000
 8008278:	08019020 	.word	0x08019020
 800827c:	447a0000 	.word	0x447a0000
 8008280:	47c35000 	.word	0x47c35000
 8008284:	0801902c 	.word	0x0801902c
 8008288:	2000054c 	.word	0x2000054c
 800828c:	20045248 	.word	0x20045248
		else if(joy_stick.getValue() == JOY_R){
 8008290:	488f      	ldr	r0, [pc, #572]	; (80084d0 <cppLoop+0x888>)
 8008292:	f7f9 fefb 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008296:	4603      	mov	r3, r0
 8008298:	2b10      	cmp	r3, #16
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d059      	beq.n	800835a <cppLoop+0x712>
			led.LR(-1, 1);
 80082a6:	2201      	movs	r2, #1
 80082a8:	f04f 31ff 	mov.w	r1, #4294967295
 80082ac:	4889      	ldr	r0, [pc, #548]	; (80084d4 <cppLoop+0x88c>)
 80082ae:	f7fa f80d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082b2:	2064      	movs	r0, #100	; 0x64
 80082b4:	f001 fe7c 	bl	8009fb0 <HAL_Delay>
			if(selector_gain == 0){
 80082b8:	4b87      	ldr	r3, [pc, #540]	; (80084d8 <cppLoop+0x890>)
 80082ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d113      	bne.n	80082ea <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 80082c2:	4b86      	ldr	r3, [pc, #536]	; (80084dc <cppLoop+0x894>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7f8 f956 	bl	8000578 <__aeabi_f2d>
 80082cc:	a37a      	add	r3, pc, #488	; (adr r3, 80084b8 <cppLoop+0x870>)
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f7f7 fff3 	bl	80002bc <__adddf3>
 80082d6:	4603      	mov	r3, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	4618      	mov	r0, r3
 80082dc:	4621      	mov	r1, r4
 80082de:	f7f8 fc9b 	bl	8000c18 <__aeabi_d2f>
 80082e2:	4602      	mov	r2, r0
 80082e4:	4b7d      	ldr	r3, [pc, #500]	; (80084dc <cppLoop+0x894>)
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e02b      	b.n	8008342 <cppLoop+0x6fa>
			else if(selector_gain == 1){
 80082ea:	4b7b      	ldr	r3, [pc, #492]	; (80084d8 <cppLoop+0x890>)
 80082ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d113      	bne.n	800831c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 80082f4:	4b7a      	ldr	r3, [pc, #488]	; (80084e0 <cppLoop+0x898>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f8 f93d 	bl	8000578 <__aeabi_f2d>
 80082fe:	a370      	add	r3, pc, #448	; (adr r3, 80084c0 <cppLoop+0x878>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f7 ffda 	bl	80002bc <__adddf3>
 8008308:	4603      	mov	r3, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4618      	mov	r0, r3
 800830e:	4621      	mov	r1, r4
 8008310:	f7f8 fc82 	bl	8000c18 <__aeabi_d2f>
 8008314:	4602      	mov	r2, r0
 8008316:	4b72      	ldr	r3, [pc, #456]	; (80084e0 <cppLoop+0x898>)
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	e012      	b.n	8008342 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 800831c:	4b71      	ldr	r3, [pc, #452]	; (80084e4 <cppLoop+0x89c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f7f8 f929 	bl	8000578 <__aeabi_f2d>
 8008326:	a368      	add	r3, pc, #416	; (adr r3, 80084c8 <cppLoop+0x880>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f7 ffc6 	bl	80002bc <__adddf3>
 8008330:	4603      	mov	r3, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4618      	mov	r0, r3
 8008336:	4621      	mov	r1, r4
 8008338:	f7f8 fc6e 	bl	8000c18 <__aeabi_d2f>
 800833c:	4602      	mov	r2, r0
 800833e:	4b69      	ldr	r3, [pc, #420]	; (80084e4 <cppLoop+0x89c>)
 8008340:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008342:	2152      	movs	r1, #82	; 0x52
 8008344:	4863      	ldr	r0, [pc, #396]	; (80084d4 <cppLoop+0x88c>)
 8008346:	f7f9 ff05 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	f04f 31ff 	mov.w	r1, #4294967295
 8008350:	4860      	ldr	r0, [pc, #384]	; (80084d4 <cppLoop+0x88c>)
 8008352:	f7f9 ffbb 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008356:	f001 bce0 	b.w	8009d1a <cppLoop+0x20d2>
		else if(joy_stick.getValue() == JOY_L){
 800835a:	485d      	ldr	r0, [pc, #372]	; (80084d0 <cppLoop+0x888>)
 800835c:	f7f9 fe96 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d059      	beq.n	8008424 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008370:	2201      	movs	r2, #1
 8008372:	f04f 31ff 	mov.w	r1, #4294967295
 8008376:	4857      	ldr	r0, [pc, #348]	; (80084d4 <cppLoop+0x88c>)
 8008378:	f7f9 ffa8 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800837c:	2064      	movs	r0, #100	; 0x64
 800837e:	f001 fe17 	bl	8009fb0 <HAL_Delay>
			if(selector_gain == 0){
 8008382:	4b55      	ldr	r3, [pc, #340]	; (80084d8 <cppLoop+0x890>)
 8008384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d113      	bne.n	80083b4 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 800838c:	4b53      	ldr	r3, [pc, #332]	; (80084dc <cppLoop+0x894>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f7f8 f8f1 	bl	8000578 <__aeabi_f2d>
 8008396:	a348      	add	r3, pc, #288	; (adr r3, 80084b8 <cppLoop+0x870>)
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f7f7 ff8c 	bl	80002b8 <__aeabi_dsub>
 80083a0:	4603      	mov	r3, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	4618      	mov	r0, r3
 80083a6:	4621      	mov	r1, r4
 80083a8:	f7f8 fc36 	bl	8000c18 <__aeabi_d2f>
 80083ac:	4602      	mov	r2, r0
 80083ae:	4b4b      	ldr	r3, [pc, #300]	; (80084dc <cppLoop+0x894>)
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e02b      	b.n	800840c <cppLoop+0x7c4>
			else if(selector_gain == 1){
 80083b4:	4b48      	ldr	r3, [pc, #288]	; (80084d8 <cppLoop+0x890>)
 80083b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d113      	bne.n	80083e6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 80083be:	4b48      	ldr	r3, [pc, #288]	; (80084e0 <cppLoop+0x898>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f8 f8d8 	bl	8000578 <__aeabi_f2d>
 80083c8:	a33d      	add	r3, pc, #244	; (adr r3, 80084c0 <cppLoop+0x878>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff73 	bl	80002b8 <__aeabi_dsub>
 80083d2:	4603      	mov	r3, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	4618      	mov	r0, r3
 80083d8:	4621      	mov	r1, r4
 80083da:	f7f8 fc1d 	bl	8000c18 <__aeabi_d2f>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b3f      	ldr	r3, [pc, #252]	; (80084e0 <cppLoop+0x898>)
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	e012      	b.n	800840c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 80083e6:	4b3f      	ldr	r3, [pc, #252]	; (80084e4 <cppLoop+0x89c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f8 f8c4 	bl	8000578 <__aeabi_f2d>
 80083f0:	a335      	add	r3, pc, #212	; (adr r3, 80084c8 <cppLoop+0x880>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f7 ff5f 	bl	80002b8 <__aeabi_dsub>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	4618      	mov	r0, r3
 8008400:	4621      	mov	r1, r4
 8008402:	f7f8 fc09 	bl	8000c18 <__aeabi_d2f>
 8008406:	4602      	mov	r2, r0
 8008408:	4b36      	ldr	r3, [pc, #216]	; (80084e4 <cppLoop+0x89c>)
 800840a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800840c:	2152      	movs	r1, #82	; 0x52
 800840e:	4831      	ldr	r0, [pc, #196]	; (80084d4 <cppLoop+0x88c>)
 8008410:	f7f9 fea0 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008414:	2200      	movs	r2, #0
 8008416:	f04f 31ff 	mov.w	r1, #4294967295
 800841a:	482e      	ldr	r0, [pc, #184]	; (80084d4 <cppLoop+0x88c>)
 800841c:	f7f9 ff56 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008420:	f001 bc7b 	b.w	8009d1a <cppLoop+0x20d2>
		else if(joy_stick.getValue() == JOY_C){
 8008424:	482a      	ldr	r0, [pc, #168]	; (80084d0 <cppLoop+0x888>)
 8008426:	f7f9 fe31 	bl	800208c <_ZN8JoyStick8getValueEv>
 800842a:	4603      	mov	r3, r0
 800842c:	2b02      	cmp	r3, #2
 800842e:	bf0c      	ite	eq
 8008430:	2301      	moveq	r3, #1
 8008432:	2300      	movne	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	f001 846f 	beq.w	8009d1a <cppLoop+0x20d2>
			led.LR(-1, 1);
 800843c:	2201      	movs	r2, #1
 800843e:	f04f 31ff 	mov.w	r1, #4294967295
 8008442:	4824      	ldr	r0, [pc, #144]	; (80084d4 <cppLoop+0x88c>)
 8008444:	f7f9 ff42 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008448:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800844c:	f001 fdb0 	bl	8009fb0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4b21      	ldr	r3, [pc, #132]	; (80084dc <cppLoop+0x894>)
 8008456:	2201      	movs	r2, #1
 8008458:	4923      	ldr	r1, [pc, #140]	; (80084e8 <cppLoop+0x8a0>)
 800845a:	4824      	ldr	r0, [pc, #144]	; (80084ec <cppLoop+0x8a4>)
 800845c:	f7f9 f9fe 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4b1e      	ldr	r3, [pc, #120]	; (80084e0 <cppLoop+0x898>)
 8008466:	2201      	movs	r2, #1
 8008468:	4921      	ldr	r1, [pc, #132]	; (80084f0 <cppLoop+0x8a8>)
 800846a:	4820      	ldr	r0, [pc, #128]	; (80084ec <cppLoop+0x8a4>)
 800846c:	f7f9 f9f6 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008470:	2300      	movs	r3, #0
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <cppLoop+0x89c>)
 8008476:	2201      	movs	r2, #1
 8008478:	491e      	ldr	r1, [pc, #120]	; (80084f4 <cppLoop+0x8ac>)
 800847a:	481c      	ldr	r0, [pc, #112]	; (80084ec <cppLoop+0x8a4>)
 800847c:	f7f9 f9ee 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008480:	4b16      	ldr	r3, [pc, #88]	; (80084dc <cppLoop+0x894>)
 8008482:	edd3 7a00 	vldr	s15, [r3]
 8008486:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <cppLoop+0x898>)
 8008488:	ed93 7a00 	vldr	s14, [r3]
 800848c:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <cppLoop+0x89c>)
 800848e:	edd3 6a00 	vldr	s13, [r3]
 8008492:	eeb0 1a66 	vmov.f32	s2, s13
 8008496:	eef0 0a47 	vmov.f32	s1, s14
 800849a:	eeb0 0a67 	vmov.f32	s0, s15
 800849e:	4816      	ldr	r0, [pc, #88]	; (80084f8 <cppLoop+0x8b0>)
 80084a0:	f7fb fc1e 	bl	8003ce0 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 80084a4:	2200      	movs	r2, #0
 80084a6:	f04f 31ff 	mov.w	r1, #4294967295
 80084aa:	480a      	ldr	r0, [pc, #40]	; (80084d4 <cppLoop+0x88c>)
 80084ac:	f7f9 ff0e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80084b0:	f001 bc33 	b.w	8009d1a <cppLoop+0x20d2>
 80084b4:	f3af 8000 	nop.w
 80084b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80084bc:	3eb0c6f7 	.word	0x3eb0c6f7
 80084c0:	88e368f1 	.word	0x88e368f1
 80084c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80084c8:	9abcaf48 	.word	0x9abcaf48
 80084cc:	3e7ad7f2 	.word	0x3e7ad7f2
 80084d0:	2000054c 	.word	0x2000054c
 80084d4:	20000558 	.word	0x20000558
 80084d8:	20045248 	.word	0x20045248
 80084dc:	2004526c 	.word	0x2004526c
 80084e0:	20045274 	.word	0x20045274
 80084e4:	2004527c 	.word	0x2004527c
 80084e8:	0801903c 	.word	0x0801903c
 80084ec:	08019048 	.word	0x08019048
 80084f0:	08019050 	.word	0x08019050
 80084f4:	0801905c 	.word	0x0801905c
 80084f8:	200209d4 	.word	0x200209d4
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 80084fc:	2157      	movs	r1, #87	; 0x57
 80084fe:	48ac      	ldr	r0, [pc, #688]	; (80087b0 <cppLoop+0xb68>)
 8008500:	f7f9 fe28 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008504:	f7f8 fdcc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008508:	2100      	movs	r1, #0
 800850a:	2000      	movs	r0, #0
 800850c:	f7f8 fdd8 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast:%4.2lf", abs(line_trace.getKp()*10000));
 8008510:	48a8      	ldr	r0, [pc, #672]	; (80087b4 <cppLoop+0xb6c>)
 8008512:	f7fb fbb8 	bl	8003c86 <_ZN9LineTrace5getKpEv>
 8008516:	eeb0 7a40 	vmov.f32	s14, s0
 800851a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80087b8 <cppLoop+0xb70>
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	eeb0 0a67 	vmov.f32	s0, s15
 8008526:	f7fa f9d7 	bl	80028d8 <_ZSt3absf>
 800852a:	ee10 3a10 	vmov	r3, s0
 800852e:	4618      	mov	r0, r3
 8008530:	f7f8 f822 	bl	8000578 <__aeabi_f2d>
 8008534:	4603      	mov	r3, r0
 8008536:	460c      	mov	r4, r1
 8008538:	461a      	mov	r2, r3
 800853a:	4623      	mov	r3, r4
 800853c:	489f      	ldr	r0, [pc, #636]	; (80087bc <cppLoop+0xb74>)
 800853e:	f7f8 fde9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008542:	2101      	movs	r1, #1
 8008544:	2000      	movs	r0, #0
 8008546:	f7f8 fdbb 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 800854a:	489a      	ldr	r0, [pc, #616]	; (80087b4 <cppLoop+0xb6c>)
 800854c:	f7fb fbaa 	bl	8003ca4 <_ZN9LineTrace5getKiEv>
 8008550:	eeb0 7a40 	vmov.f32	s14, s0
 8008554:	eddf 7a9a 	vldr	s15, [pc, #616]	; 80087c0 <cppLoop+0xb78>
 8008558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855c:	eeb0 0a67 	vmov.f32	s0, s15
 8008560:	f7fa f9ba 	bl	80028d8 <_ZSt3absf>
 8008564:	ee10 3a10 	vmov	r3, s0
 8008568:	4618      	mov	r0, r3
 800856a:	f7f8 f805 	bl	8000578 <__aeabi_f2d>
 800856e:	4605      	mov	r5, r0
 8008570:	460e      	mov	r6, r1
 8008572:	4890      	ldr	r0, [pc, #576]	; (80087b4 <cppLoop+0xb6c>)
 8008574:	f7fb fba5 	bl	8003cc2 <_ZN9LineTrace5getKdEv>
 8008578:	eeb0 7a40 	vmov.f32	s14, s0
 800857c:	eddf 7a91 	vldr	s15, [pc, #580]	; 80087c4 <cppLoop+0xb7c>
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	eeb0 0a67 	vmov.f32	s0, s15
 8008588:	f7fa f9a6 	bl	80028d8 <_ZSt3absf>
 800858c:	ee10 3a10 	vmov	r3, s0
 8008590:	4618      	mov	r0, r3
 8008592:	f7f7 fff1 	bl	8000578 <__aeabi_f2d>
 8008596:	4603      	mov	r3, r0
 8008598:	460c      	mov	r4, r1
 800859a:	e9cd 3400 	strd	r3, r4, [sp]
 800859e:	462a      	mov	r2, r5
 80085a0:	4633      	mov	r3, r6
 80085a2:	4889      	ldr	r0, [pc, #548]	; (80087c8 <cppLoop+0xb80>)
 80085a4:	f7f8 fdb6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80085a8:	4888      	ldr	r0, [pc, #544]	; (80087cc <cppLoop+0xb84>)
 80085aa:	f7f9 fd6f 	bl	800208c <_ZN8JoyStick8getValueEv>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	bf0c      	ite	eq
 80085b4:	2301      	moveq	r3, #1
 80085b6:	2300      	movne	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d022      	beq.n	8008604 <cppLoop+0x9bc>
			led.LR(-1, 1);
 80085be:	2201      	movs	r2, #1
 80085c0:	f04f 31ff 	mov.w	r1, #4294967295
 80085c4:	487a      	ldr	r0, [pc, #488]	; (80087b0 <cppLoop+0xb68>)
 80085c6:	f7f9 fe81 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085ce:	f001 fcef 	bl	8009fb0 <HAL_Delay>

			selector_gain++;
 80085d2:	4b7f      	ldr	r3, [pc, #508]	; (80087d0 <cppLoop+0xb88>)
 80085d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3301      	adds	r3, #1
 80085dc:	b29b      	uxth	r3, r3
 80085de:	b21a      	sxth	r2, r3
 80085e0:	4b7b      	ldr	r3, [pc, #492]	; (80087d0 <cppLoop+0xb88>)
 80085e2:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 80085e4:	4b7a      	ldr	r3, [pc, #488]	; (80087d0 <cppLoop+0xb88>)
 80085e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	dd02      	ble.n	80085f4 <cppLoop+0x9ac>
 80085ee:	4b78      	ldr	r3, [pc, #480]	; (80087d0 <cppLoop+0xb88>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80085f4:	2200      	movs	r2, #0
 80085f6:	f04f 31ff 	mov.w	r1, #4294967295
 80085fa:	486d      	ldr	r0, [pc, #436]	; (80087b0 <cppLoop+0xb68>)
 80085fc:	f7f9 fe66 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8008600:	f001 bb8d 	b.w	8009d1e <cppLoop+0x20d6>
		else if(joy_stick.getValue() == JOY_R){
 8008604:	4871      	ldr	r0, [pc, #452]	; (80087cc <cppLoop+0xb84>)
 8008606:	f7f9 fd41 	bl	800208c <_ZN8JoyStick8getValueEv>
 800860a:	4603      	mov	r3, r0
 800860c:	2b10      	cmp	r3, #16
 800860e:	bf0c      	ite	eq
 8008610:	2301      	moveq	r3, #1
 8008612:	2300      	movne	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d059      	beq.n	80086ce <cppLoop+0xa86>
			led.LR(-1, 1);
 800861a:	2201      	movs	r2, #1
 800861c:	f04f 31ff 	mov.w	r1, #4294967295
 8008620:	4863      	ldr	r0, [pc, #396]	; (80087b0 <cppLoop+0xb68>)
 8008622:	f7f9 fe53 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008626:	2064      	movs	r0, #100	; 0x64
 8008628:	f001 fcc2 	bl	8009fb0 <HAL_Delay>
			if(selector_gain == 0){
 800862c:	4b68      	ldr	r3, [pc, #416]	; (80087d0 <cppLoop+0xb88>)
 800862e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d113      	bne.n	800865e <cppLoop+0xa16>
				adj_kp = adj_kp + 0.000001;
 8008636:	4b67      	ldr	r3, [pc, #412]	; (80087d4 <cppLoop+0xb8c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f7f7 ff9c 	bl	8000578 <__aeabi_f2d>
 8008640:	a355      	add	r3, pc, #340	; (adr r3, 8008798 <cppLoop+0xb50>)
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f7f7 fe39 	bl	80002bc <__adddf3>
 800864a:	4603      	mov	r3, r0
 800864c:	460c      	mov	r4, r1
 800864e:	4618      	mov	r0, r3
 8008650:	4621      	mov	r1, r4
 8008652:	f7f8 fae1 	bl	8000c18 <__aeabi_d2f>
 8008656:	4602      	mov	r2, r0
 8008658:	4b5e      	ldr	r3, [pc, #376]	; (80087d4 <cppLoop+0xb8c>)
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	e02b      	b.n	80086b6 <cppLoop+0xa6e>
			else if(selector_gain == 1){
 800865e:	4b5c      	ldr	r3, [pc, #368]	; (80087d0 <cppLoop+0xb88>)
 8008660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d113      	bne.n	8008690 <cppLoop+0xa48>
				adj_ki = adj_ki + 0.00001;
 8008668:	4b5b      	ldr	r3, [pc, #364]	; (80087d8 <cppLoop+0xb90>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f7f7 ff83 	bl	8000578 <__aeabi_f2d>
 8008672:	a34b      	add	r3, pc, #300	; (adr r3, 80087a0 <cppLoop+0xb58>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f7 fe20 	bl	80002bc <__adddf3>
 800867c:	4603      	mov	r3, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4618      	mov	r0, r3
 8008682:	4621      	mov	r1, r4
 8008684:	f7f8 fac8 	bl	8000c18 <__aeabi_d2f>
 8008688:	4602      	mov	r2, r0
 800868a:	4b53      	ldr	r3, [pc, #332]	; (80087d8 <cppLoop+0xb90>)
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e012      	b.n	80086b6 <cppLoop+0xa6e>
				adj_kd = adj_kd + 0.0000001;
 8008690:	4b52      	ldr	r3, [pc, #328]	; (80087dc <cppLoop+0xb94>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f7f7 ff6f 	bl	8000578 <__aeabi_f2d>
 800869a:	a343      	add	r3, pc, #268	; (adr r3, 80087a8 <cppLoop+0xb60>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 fe0c 	bl	80002bc <__adddf3>
 80086a4:	4603      	mov	r3, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	4618      	mov	r0, r3
 80086aa:	4621      	mov	r1, r4
 80086ac:	f7f8 fab4 	bl	8000c18 <__aeabi_d2f>
 80086b0:	4602      	mov	r2, r0
 80086b2:	4b4a      	ldr	r3, [pc, #296]	; (80087dc <cppLoop+0xb94>)
 80086b4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80086b6:	2152      	movs	r1, #82	; 0x52
 80086b8:	483d      	ldr	r0, [pc, #244]	; (80087b0 <cppLoop+0xb68>)
 80086ba:	f7f9 fd4b 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80086be:	2200      	movs	r2, #0
 80086c0:	f04f 31ff 	mov.w	r1, #4294967295
 80086c4:	483a      	ldr	r0, [pc, #232]	; (80087b0 <cppLoop+0xb68>)
 80086c6:	f7f9 fe01 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80086ca:	f001 bb28 	b.w	8009d1e <cppLoop+0x20d6>
		else if(joy_stick.getValue() == JOY_L){
 80086ce:	483f      	ldr	r0, [pc, #252]	; (80087cc <cppLoop+0xb84>)
 80086d0:	f7f9 fcdc 	bl	800208c <_ZN8JoyStick8getValueEv>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d07d      	beq.n	80087e0 <cppLoop+0xb98>
			led.LR(-1, 1);
 80086e4:	2201      	movs	r2, #1
 80086e6:	f04f 31ff 	mov.w	r1, #4294967295
 80086ea:	4831      	ldr	r0, [pc, #196]	; (80087b0 <cppLoop+0xb68>)
 80086ec:	f7f9 fdee 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086f0:	2064      	movs	r0, #100	; 0x64
 80086f2:	f001 fc5d 	bl	8009fb0 <HAL_Delay>
			if(selector_gain == 0){
 80086f6:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <cppLoop+0xb88>)
 80086f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d113      	bne.n	8008728 <cppLoop+0xae0>
				adj_kp = adj_kp - 0.000001;
 8008700:	4b34      	ldr	r3, [pc, #208]	; (80087d4 <cppLoop+0xb8c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f7f7 ff37 	bl	8000578 <__aeabi_f2d>
 800870a:	a323      	add	r3, pc, #140	; (adr r3, 8008798 <cppLoop+0xb50>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fdd2 	bl	80002b8 <__aeabi_dsub>
 8008714:	4603      	mov	r3, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4618      	mov	r0, r3
 800871a:	4621      	mov	r1, r4
 800871c:	f7f8 fa7c 	bl	8000c18 <__aeabi_d2f>
 8008720:	4602      	mov	r2, r0
 8008722:	4b2c      	ldr	r3, [pc, #176]	; (80087d4 <cppLoop+0xb8c>)
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e02b      	b.n	8008780 <cppLoop+0xb38>
			else if(selector_gain == 1){
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <cppLoop+0xb88>)
 800872a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d113      	bne.n	800875a <cppLoop+0xb12>
				adj_ki = adj_ki - 0.00001;
 8008732:	4b29      	ldr	r3, [pc, #164]	; (80087d8 <cppLoop+0xb90>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f7f7 ff1e 	bl	8000578 <__aeabi_f2d>
 800873c:	a318      	add	r3, pc, #96	; (adr r3, 80087a0 <cppLoop+0xb58>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f7 fdb9 	bl	80002b8 <__aeabi_dsub>
 8008746:	4603      	mov	r3, r0
 8008748:	460c      	mov	r4, r1
 800874a:	4618      	mov	r0, r3
 800874c:	4621      	mov	r1, r4
 800874e:	f7f8 fa63 	bl	8000c18 <__aeabi_d2f>
 8008752:	4602      	mov	r2, r0
 8008754:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <cppLoop+0xb90>)
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	e012      	b.n	8008780 <cppLoop+0xb38>
				adj_kd = adj_kd - 0.0000001;
 800875a:	4b20      	ldr	r3, [pc, #128]	; (80087dc <cppLoop+0xb94>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f7f7 ff0a 	bl	8000578 <__aeabi_f2d>
 8008764:	a310      	add	r3, pc, #64	; (adr r3, 80087a8 <cppLoop+0xb60>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	f7f7 fda5 	bl	80002b8 <__aeabi_dsub>
 800876e:	4603      	mov	r3, r0
 8008770:	460c      	mov	r4, r1
 8008772:	4618      	mov	r0, r3
 8008774:	4621      	mov	r1, r4
 8008776:	f7f8 fa4f 	bl	8000c18 <__aeabi_d2f>
 800877a:	4602      	mov	r2, r0
 800877c:	4b17      	ldr	r3, [pc, #92]	; (80087dc <cppLoop+0xb94>)
 800877e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008780:	2152      	movs	r1, #82	; 0x52
 8008782:	480b      	ldr	r0, [pc, #44]	; (80087b0 <cppLoop+0xb68>)
 8008784:	f7f9 fce6 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008788:	2200      	movs	r2, #0
 800878a:	f04f 31ff 	mov.w	r1, #4294967295
 800878e:	4808      	ldr	r0, [pc, #32]	; (80087b0 <cppLoop+0xb68>)
 8008790:	f7f9 fd9c 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008794:	f001 bac3 	b.w	8009d1e <cppLoop+0x20d6>
 8008798:	a0b5ed8d 	.word	0xa0b5ed8d
 800879c:	3eb0c6f7 	.word	0x3eb0c6f7
 80087a0:	88e368f1 	.word	0x88e368f1
 80087a4:	3ee4f8b5 	.word	0x3ee4f8b5
 80087a8:	9abcaf48 	.word	0x9abcaf48
 80087ac:	3e7ad7f2 	.word	0x3e7ad7f2
 80087b0:	20000558 	.word	0x20000558
 80087b4:	200209d4 	.word	0x200209d4
 80087b8:	461c4000 	.word	0x461c4000
 80087bc:	08019068 	.word	0x08019068
 80087c0:	447a0000 	.word	0x447a0000
 80087c4:	47c35000 	.word	0x47c35000
 80087c8:	0801902c 	.word	0x0801902c
 80087cc:	2000054c 	.word	0x2000054c
 80087d0:	20045248 	.word	0x20045248
 80087d4:	20045254 	.word	0x20045254
 80087d8:	2004525c 	.word	0x2004525c
 80087dc:	20045264 	.word	0x20045264
		else if(joy_stick.getValue() == JOY_C){
 80087e0:	48c1      	ldr	r0, [pc, #772]	; (8008ae8 <cppLoop+0xea0>)
 80087e2:	f7f9 fc53 	bl	800208c <_ZN8JoyStick8getValueEv>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	bf0c      	ite	eq
 80087ec:	2301      	moveq	r3, #1
 80087ee:	2300      	movne	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f001 8293 	beq.w	8009d1e <cppLoop+0x20d6>
			led.LR(-1, 1);
 80087f8:	2201      	movs	r2, #1
 80087fa:	f04f 31ff 	mov.w	r1, #4294967295
 80087fe:	48bb      	ldr	r0, [pc, #748]	; (8008aec <cppLoop+0xea4>)
 8008800:	f7f9 fd64 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008804:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008808:	f001 fbd2 	bl	8009fb0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800880c:	2300      	movs	r3, #0
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4bb7      	ldr	r3, [pc, #732]	; (8008af0 <cppLoop+0xea8>)
 8008812:	2201      	movs	r2, #1
 8008814:	49b7      	ldr	r1, [pc, #732]	; (8008af4 <cppLoop+0xeac>)
 8008816:	48b8      	ldr	r0, [pc, #736]	; (8008af8 <cppLoop+0xeb0>)
 8008818:	f7f9 f820 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800881c:	2300      	movs	r3, #0
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4bb6      	ldr	r3, [pc, #728]	; (8008afc <cppLoop+0xeb4>)
 8008822:	2201      	movs	r2, #1
 8008824:	49b6      	ldr	r1, [pc, #728]	; (8008b00 <cppLoop+0xeb8>)
 8008826:	48b4      	ldr	r0, [pc, #720]	; (8008af8 <cppLoop+0xeb0>)
 8008828:	f7f9 f818 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800882c:	2300      	movs	r3, #0
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4bb4      	ldr	r3, [pc, #720]	; (8008b04 <cppLoop+0xebc>)
 8008832:	2201      	movs	r2, #1
 8008834:	49b4      	ldr	r1, [pc, #720]	; (8008b08 <cppLoop+0xec0>)
 8008836:	48b0      	ldr	r0, [pc, #704]	; (8008af8 <cppLoop+0xeb0>)
 8008838:	f7f9 f810 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800883c:	4bac      	ldr	r3, [pc, #688]	; (8008af0 <cppLoop+0xea8>)
 800883e:	edd3 7a00 	vldr	s15, [r3]
 8008842:	4bae      	ldr	r3, [pc, #696]	; (8008afc <cppLoop+0xeb4>)
 8008844:	ed93 7a00 	vldr	s14, [r3]
 8008848:	4bae      	ldr	r3, [pc, #696]	; (8008b04 <cppLoop+0xebc>)
 800884a:	edd3 6a00 	vldr	s13, [r3]
 800884e:	eeb0 1a66 	vmov.f32	s2, s13
 8008852:	eef0 0a47 	vmov.f32	s1, s14
 8008856:	eeb0 0a67 	vmov.f32	s0, s15
 800885a:	48ac      	ldr	r0, [pc, #688]	; (8008b0c <cppLoop+0xec4>)
 800885c:	f7fb f9fa 	bl	8003c54 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8008860:	2200      	movs	r2, #0
 8008862:	f04f 31ff 	mov.w	r1, #4294967295
 8008866:	48a1      	ldr	r0, [pc, #644]	; (8008aec <cppLoop+0xea4>)
 8008868:	f7f9 fd30 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800886c:	f001 ba57 	b.w	8009d1e <cppLoop+0x20d6>

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 8008870:	2143      	movs	r1, #67	; 0x43
 8008872:	489e      	ldr	r0, [pc, #632]	; (8008aec <cppLoop+0xea4>)
 8008874:	f7f9 fc6e 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008878:	489b      	ldr	r0, [pc, #620]	; (8008ae8 <cppLoop+0xea0>)
 800887a:	f7f9 fc07 	bl	800208c <_ZN8JoyStick8getValueEv>
 800887e:	4603      	mov	r3, r0
 8008880:	2b04      	cmp	r3, #4
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d020      	beq.n	80088d0 <cppLoop+0xc88>
			led.LR(-1, 1);
 800888e:	2201      	movs	r2, #1
 8008890:	f04f 31ff 	mov.w	r1, #4294967295
 8008894:	4895      	ldr	r0, [pc, #596]	; (8008aec <cppLoop+0xea4>)
 8008896:	f7f9 fd19 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800889a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800889e:	f001 fb87 	bl	8009fb0 <HAL_Delay>

			selector_run++;
 80088a2:	4b9b      	ldr	r3, [pc, #620]	; (8008b10 <cppLoop+0xec8>)
 80088a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3301      	adds	r3, #1
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	b21a      	sxth	r2, r3
 80088b0:	4b97      	ldr	r3, [pc, #604]	; (8008b10 <cppLoop+0xec8>)
 80088b2:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 80088b4:	4b96      	ldr	r3, [pc, #600]	; (8008b10 <cppLoop+0xec8>)
 80088b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	dd02      	ble.n	80088c4 <cppLoop+0xc7c>
 80088be:	4b94      	ldr	r3, [pc, #592]	; (8008b10 <cppLoop+0xec8>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80088c4:	2200      	movs	r2, #0
 80088c6:	f04f 31ff 	mov.w	r1, #4294967295
 80088ca:	4888      	ldr	r0, [pc, #544]	; (8008aec <cppLoop+0xea4>)
 80088cc:	f7f9 fcfe 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 80088d0:	4b8f      	ldr	r3, [pc, #572]	; (8008b10 <cppLoop+0xec8>)
 80088d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d15c      	bne.n	8008994 <cppLoop+0xd4c>
			lcd_clear();
 80088da:	f7f8 fbe1 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 80088de:	2100      	movs	r1, #0
 80088e0:	2000      	movs	r0, #0
 80088e2:	f7f8 fbed 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 80088e6:	488b      	ldr	r0, [pc, #556]	; (8008b14 <cppLoop+0xecc>)
 80088e8:	f7f8 fc14 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80088ec:	2101      	movs	r1, #1
 80088ee:	2000      	movs	r0, #0
 80088f0:	f7f8 fbe6 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 80088f4:	4b88      	ldr	r3, [pc, #544]	; (8008b18 <cppLoop+0xed0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f7 fe3d 	bl	8000578 <__aeabi_f2d>
 80088fe:	4603      	mov	r3, r0
 8008900:	460c      	mov	r4, r1
 8008902:	461a      	mov	r2, r3
 8008904:	4623      	mov	r3, r4
 8008906:	4885      	ldr	r0, [pc, #532]	; (8008b1c <cppLoop+0xed4>)
 8008908:	f7f8 fc04 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800890c:	4876      	ldr	r0, [pc, #472]	; (8008ae8 <cppLoop+0xea0>)
 800890e:	f7f9 fbbd 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008912:	4603      	mov	r3, r0
 8008914:	2b02      	cmp	r3, #2
 8008916:	bf0c      	ite	eq
 8008918:	2301      	moveq	r3, #1
 800891a:	2300      	movne	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	f001 81ff 	beq.w	8009d22 <cppLoop+0x20da>
				HAL_Delay(500);
 8008924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008928:	f001 fb42 	bl	8009fb0 <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 800892c:	4b7a      	ldr	r3, [pc, #488]	; (8008b18 <cppLoop+0xed0>)
 800892e:	edd3 7a00 	vldr	s15, [r3]
 8008932:	eeb0 0a67 	vmov.f32	s0, s15
 8008936:	4875      	ldr	r0, [pc, #468]	; (8008b0c <cppLoop+0xec4>)
 8008938:	f7fb fa27 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 800893c:	f04f 32ff 	mov.w	r2, #4294967295
 8008940:	2101      	movs	r1, #1
 8008942:	486a      	ldr	r0, [pc, #424]	; (8008aec <cppLoop+0xea4>)
 8008944:	f7f9 fcc2 	bl	80022cc <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 8008948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800894c:	f001 fb30 	bl	8009fb0 <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 8008950:	2100      	movs	r1, #0
 8008952:	486e      	ldr	r0, [pc, #440]	; (8008b0c <cppLoop+0xec4>)
 8008954:	f7fb fbfc 	bl	8004150 <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 8008958:	4871      	ldr	r0, [pc, #452]	; (8008b20 <cppLoop+0xed8>)
 800895a:	f7fc fa56 	bl	8004e0a <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 800895e:	4870      	ldr	r0, [pc, #448]	; (8008b20 <cppLoop+0xed8>)
 8008960:	f7fc fa7b 	bl	8004e5a <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 8008964:	4869      	ldr	r0, [pc, #420]	; (8008b0c <cppLoop+0xec4>)
 8008966:	f7fb fc43 	bl	80041f0 <_ZN9LineTrace7runningEv>

				logger.stop();
 800896a:	486d      	ldr	r0, [pc, #436]	; (8008b20 <cppLoop+0xed8>)
 800896c:	f7fc fade 	bl	8004f2c <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8008970:	4a6c      	ldr	r2, [pc, #432]	; (8008b24 <cppLoop+0xedc>)
 8008972:	496d      	ldr	r1, [pc, #436]	; (8008b28 <cppLoop+0xee0>)
 8008974:	486a      	ldr	r0, [pc, #424]	; (8008b20 <cppLoop+0xed8>)
 8008976:	f7fc f972 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800897a:	4a6c      	ldr	r2, [pc, #432]	; (8008b2c <cppLoop+0xee4>)
 800897c:	496a      	ldr	r1, [pc, #424]	; (8008b28 <cppLoop+0xee0>)
 800897e:	4868      	ldr	r0, [pc, #416]	; (8008b20 <cppLoop+0xed8>)
 8008980:	f7fc f981 	bl	8004c86 <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 8008984:	f04f 32ff 	mov.w	r2, #4294967295
 8008988:	2100      	movs	r1, #0
 800898a:	4858      	ldr	r0, [pc, #352]	; (8008aec <cppLoop+0xea4>)
 800898c:	f7f9 fc9e 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 8008990:	f001 b9c7 	b.w	8009d22 <cppLoop+0x20da>
			lcd_clear();
 8008994:	f7f8 fb84 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008998:	2100      	movs	r1, #0
 800899a:	2000      	movs	r0, #0
 800899c:	f7f8 fb90 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 80089a0:	4863      	ldr	r0, [pc, #396]	; (8008b30 <cppLoop+0xee8>)
 80089a2:	f7f8 fbb7 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80089a6:	2101      	movs	r1, #1
 80089a8:	2000      	movs	r0, #0
 80089aa:	f7f8 fb89 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 80089ae:	4b5a      	ldr	r3, [pc, #360]	; (8008b18 <cppLoop+0xed0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f7 fde0 	bl	8000578 <__aeabi_f2d>
 80089b8:	4603      	mov	r3, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	461a      	mov	r2, r3
 80089be:	4623      	mov	r3, r4
 80089c0:	485c      	ldr	r0, [pc, #368]	; (8008b34 <cppLoop+0xeec>)
 80089c2:	f7f8 fba7 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 80089c6:	4848      	ldr	r0, [pc, #288]	; (8008ae8 <cppLoop+0xea0>)
 80089c8:	f7f9 fb60 	bl	800208c <_ZN8JoyStick8getValueEv>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b10      	cmp	r3, #16
 80089d0:	bf0c      	ite	eq
 80089d2:	2301      	moveq	r3, #1
 80089d4:	2300      	movne	r3, #0
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d023      	beq.n	8008a24 <cppLoop+0xddc>
				led.LR(-1, 1);
 80089dc:	2201      	movs	r2, #1
 80089de:	f04f 31ff 	mov.w	r1, #4294967295
 80089e2:	4842      	ldr	r0, [pc, #264]	; (8008aec <cppLoop+0xea4>)
 80089e4:	f7f9 fc72 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80089e8:	2064      	movs	r0, #100	; 0x64
 80089ea:	f001 fae1 	bl	8009fb0 <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 80089ee:	4b4a      	ldr	r3, [pc, #296]	; (8008b18 <cppLoop+0xed0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7f7 fdc0 	bl	8000578 <__aeabi_f2d>
 80089f8:	a339      	add	r3, pc, #228	; (adr r3, 8008ae0 <cppLoop+0xe98>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fc5d 	bl	80002bc <__adddf3>
 8008a02:	4603      	mov	r3, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	4618      	mov	r0, r3
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f7f8 f905 	bl	8000c18 <__aeabi_d2f>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	4b41      	ldr	r3, [pc, #260]	; (8008b18 <cppLoop+0xed0>)
 8008a12:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	f04f 31ff 	mov.w	r1, #4294967295
 8008a1a:	4834      	ldr	r0, [pc, #208]	; (8008aec <cppLoop+0xea4>)
 8008a1c:	f7f9 fc56 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008a20:	f001 b97f 	b.w	8009d22 <cppLoop+0x20da>
			else if(joy_stick.getValue() == JOY_L){
 8008a24:	4830      	ldr	r0, [pc, #192]	; (8008ae8 <cppLoop+0xea0>)
 8008a26:	f7f9 fb31 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d023      	beq.n	8008a82 <cppLoop+0xe3a>
				led.LR(-1, 1);
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a40:	482a      	ldr	r0, [pc, #168]	; (8008aec <cppLoop+0xea4>)
 8008a42:	f7f9 fc43 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008a46:	2064      	movs	r0, #100	; 0x64
 8008a48:	f001 fab2 	bl	8009fb0 <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 8008a4c:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <cppLoop+0xed0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f7 fd91 	bl	8000578 <__aeabi_f2d>
 8008a56:	a322      	add	r3, pc, #136	; (adr r3, 8008ae0 <cppLoop+0xe98>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fc2c 	bl	80002b8 <__aeabi_dsub>
 8008a60:	4603      	mov	r3, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	4618      	mov	r0, r3
 8008a66:	4621      	mov	r1, r4
 8008a68:	f7f8 f8d6 	bl	8000c18 <__aeabi_d2f>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4b2a      	ldr	r3, [pc, #168]	; (8008b18 <cppLoop+0xed0>)
 8008a70:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008a72:	2200      	movs	r2, #0
 8008a74:	f04f 31ff 	mov.w	r1, #4294967295
 8008a78:	481c      	ldr	r0, [pc, #112]	; (8008aec <cppLoop+0xea4>)
 8008a7a:	f7f9 fc27 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008a7e:	f001 b950 	b.w	8009d22 <cppLoop+0x20da>
			else if(joy_stick.getValue() == JOY_C){
 8008a82:	4819      	ldr	r0, [pc, #100]	; (8008ae8 <cppLoop+0xea0>)
 8008a84:	f7f9 fb02 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	bf0c      	ite	eq
 8008a8e:	2301      	moveq	r3, #1
 8008a90:	2300      	movne	r3, #0
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f001 8144 	beq.w	8009d22 <cppLoop+0x20da>
				led.LR(-1, 1);
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008aa0:	4812      	ldr	r0, [pc, #72]	; (8008aec <cppLoop+0xea4>)
 8008aa2:	f7f9 fc13 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008aa6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008aaa:	f001 fa81 	bl	8009fb0 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <cppLoop+0xed0>)
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	4920      	ldr	r1, [pc, #128]	; (8008b38 <cppLoop+0xef0>)
 8008ab8:	480f      	ldr	r0, [pc, #60]	; (8008af8 <cppLoop+0xeb0>)
 8008aba:	f7f8 fecf 	bl	800185c <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 8008abe:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <cppLoop+0xed0>)
 8008ac0:	edd3 7a00 	vldr	s15, [r3]
 8008ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac8:	4810      	ldr	r0, [pc, #64]	; (8008b0c <cppLoop+0xec4>)
 8008aca:	f7fb f95e 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ad4:	4805      	ldr	r0, [pc, #20]	; (8008aec <cppLoop+0xea4>)
 8008ad6:	f7f9 fbf9 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008ada:	f001 b922 	b.w	8009d22 <cppLoop+0x20da>
 8008ade:	bf00      	nop
 8008ae0:	9999999a 	.word	0x9999999a
 8008ae4:	3fb99999 	.word	0x3fb99999
 8008ae8:	2000054c 	.word	0x2000054c
 8008aec:	20000558 	.word	0x20000558
 8008af0:	20045254 	.word	0x20045254
 8008af4:	08019074 	.word	0x08019074
 8008af8:	08019048 	.word	0x08019048
 8008afc:	2004525c 	.word	0x2004525c
 8008b00:	0801907c 	.word	0x0801907c
 8008b04:	20045264 	.word	0x20045264
 8008b08:	08019084 	.word	0x08019084
 8008b0c:	200209d4 	.word	0x200209d4
 8008b10:	2004524a 	.word	0x2004524a
 8008b14:	0801908c 	.word	0x0801908c
 8008b18:	20045284 	.word	0x20045284
 8008b1c:	08019094 	.word	0x08019094
 8008b20:	2000057c 	.word	0x2000057c
 8008b24:	080190a0 	.word	0x080190a0
 8008b28:	080190ac 	.word	0x080190ac
 8008b2c:	080190b8 	.word	0x080190b8
 8008b30:	080190c4 	.word	0x080190c4
 8008b34:	080190c8 	.word	0x080190c8
 8008b38:	080190d4 	.word	0x080190d4

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 8008b3c:	2159      	movs	r1, #89	; 0x59
 8008b3e:	48be      	ldr	r0, [pc, #760]	; (8008e38 <cppLoop+0x11f0>)
 8008b40:	f7f9 fb08 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008b44:	48bd      	ldr	r0, [pc, #756]	; (8008e3c <cppLoop+0x11f4>)
 8008b46:	f7f9 faa1 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	bf0c      	ite	eq
 8008b50:	2301      	moveq	r3, #1
 8008b52:	2300      	movne	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d020      	beq.n	8008b9c <cppLoop+0xf54>
			led.LR(-1, 1);
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b60:	48b5      	ldr	r0, [pc, #724]	; (8008e38 <cppLoop+0x11f0>)
 8008b62:	f7f9 fbb3 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b6a:	f001 fa21 	bl	8009fb0 <HAL_Delay>

			selector_run++;
 8008b6e:	4bb4      	ldr	r3, [pc, #720]	; (8008e40 <cppLoop+0x11f8>)
 8008b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3301      	adds	r3, #1
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	b21a      	sxth	r2, r3
 8008b7c:	4bb0      	ldr	r3, [pc, #704]	; (8008e40 <cppLoop+0x11f8>)
 8008b7e:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008b80:	4baf      	ldr	r3, [pc, #700]	; (8008e40 <cppLoop+0x11f8>)
 8008b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	dd02      	ble.n	8008b90 <cppLoop+0xf48>
 8008b8a:	4bad      	ldr	r3, [pc, #692]	; (8008e40 <cppLoop+0x11f8>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b90:	2200      	movs	r2, #0
 8008b92:	f04f 31ff 	mov.w	r1, #4294967295
 8008b96:	48a8      	ldr	r0, [pc, #672]	; (8008e38 <cppLoop+0x11f0>)
 8008b98:	f7f9 fb98 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008b9c:	4ba8      	ldr	r3, [pc, #672]	; (8008e40 <cppLoop+0x11f8>)
 8008b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d178      	bne.n	8008c98 <cppLoop+0x1050>
			lcd_clear();
 8008ba6:	f7f8 fa7b 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008baa:	2100      	movs	r1, #0
 8008bac:	2000      	movs	r0, #0
 8008bae:	f7f8 fa87 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 8008bb2:	4ba4      	ldr	r3, [pc, #656]	; (8008e44 <cppLoop+0x11fc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f7 fcde 	bl	8000578 <__aeabi_f2d>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	48a0      	ldr	r0, [pc, #640]	; (8008e48 <cppLoop+0x1200>)
 8008bc6:	f7f8 faa5 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008bca:	2101      	movs	r1, #1
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f7f8 fa77 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 8008bd2:	4b9e      	ldr	r3, [pc, #632]	; (8008e4c <cppLoop+0x1204>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7f7 fcce 	bl	8000578 <__aeabi_f2d>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	461a      	mov	r2, r3
 8008be2:	4623      	mov	r3, r4
 8008be4:	489a      	ldr	r0, [pc, #616]	; (8008e50 <cppLoop+0x1208>)
 8008be6:	f7f8 fa95 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 8008bea:	4894      	ldr	r0, [pc, #592]	; (8008e3c <cppLoop+0x11f4>)
 8008bec:	f7f9 fa4e 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f001 8092 	beq.w	8009d26 <cppLoop+0x20de>
				HAL_Delay(500);
 8008c02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c06:	f001 f9d3 	bl	8009fb0 <HAL_Delay>

				led.LR(1, -1);
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4889      	ldr	r0, [pc, #548]	; (8008e38 <cppLoop+0x11f0>)
 8008c12:	f7f9 fb5b 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 8008c16:	2101      	movs	r1, #1
 8008c18:	488e      	ldr	r0, [pc, #568]	; (8008e54 <cppLoop+0x120c>)
 8008c1a:	f7fb fa99 	bl	8004150 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 8008c1e:	4b8b      	ldr	r3, [pc, #556]	; (8008e4c <cppLoop+0x1204>)
 8008c20:	edd3 7a00 	vldr	s15, [r3]
 8008c24:	eeb0 0a67 	vmov.f32	s0, s15
 8008c28:	488a      	ldr	r0, [pc, #552]	; (8008e54 <cppLoop+0x120c>)
 8008c2a:	f7fb f8ae 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 8008c2e:	4b85      	ldr	r3, [pc, #532]	; (8008e44 <cppLoop+0x11fc>)
 8008c30:	edd3 7a00 	vldr	s15, [r3]
 8008c34:	eeb0 0a67 	vmov.f32	s0, s15
 8008c38:	4886      	ldr	r0, [pc, #536]	; (8008e54 <cppLoop+0x120c>)
 8008c3a:	f7fb f8b6 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8008c3e:	4b83      	ldr	r3, [pc, #524]	; (8008e4c <cppLoop+0x1204>)
 8008c40:	edd3 7a00 	vldr	s15, [r3]
 8008c44:	eeb0 0a67 	vmov.f32	s0, s15
 8008c48:	4882      	ldr	r0, [pc, #520]	; (8008e54 <cppLoop+0x120c>)
 8008c4a:	f7fb f8ce 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 8008c4e:	4881      	ldr	r0, [pc, #516]	; (8008e54 <cppLoop+0x120c>)
 8008c50:	f7fb fcc6 	bl	80045e0 <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 8008c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c58:	f001 f9aa 	bl	8009fb0 <HAL_Delay>

				logger.resetLogsTim1();
 8008c5c:	487e      	ldr	r0, [pc, #504]	; (8008e58 <cppLoop+0x1210>)
 8008c5e:	f7fc f8d4 	bl	8004e0a <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 8008c62:	487d      	ldr	r0, [pc, #500]	; (8008e58 <cppLoop+0x1210>)
 8008c64:	f7fc f8f9 	bl	8004e5a <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 8008c68:	487a      	ldr	r0, [pc, #488]	; (8008e54 <cppLoop+0x120c>)
 8008c6a:	f7fb fac1 	bl	80041f0 <_ZN9LineTrace7runningEv>

				logger.stop();
 8008c6e:	487a      	ldr	r0, [pc, #488]	; (8008e58 <cppLoop+0x1210>)
 8008c70:	f7fc f95c 	bl	8004f2c <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8008c74:	4a79      	ldr	r2, [pc, #484]	; (8008e5c <cppLoop+0x1214>)
 8008c76:	497a      	ldr	r1, [pc, #488]	; (8008e60 <cppLoop+0x1218>)
 8008c78:	4877      	ldr	r0, [pc, #476]	; (8008e58 <cppLoop+0x1210>)
 8008c7a:	f7fb fff0 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008c7e:	4a79      	ldr	r2, [pc, #484]	; (8008e64 <cppLoop+0x121c>)
 8008c80:	4977      	ldr	r1, [pc, #476]	; (8008e60 <cppLoop+0x1218>)
 8008c82:	4875      	ldr	r0, [pc, #468]	; (8008e58 <cppLoop+0x1210>)
 8008c84:	f7fb ffff 	bl	8004c86 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	486a      	ldr	r0, [pc, #424]	; (8008e38 <cppLoop+0x11f0>)
 8008c90:	f7f9 fb1c 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 8008c94:	f001 b847 	b.w	8009d26 <cppLoop+0x20de>
			lcd_clear();
 8008c98:	f7f8 fa02 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	f7f8 fa0e 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008ca4:	486b      	ldr	r0, [pc, #428]	; (8008e54 <cppLoop+0x120c>)
 8008ca6:	f7fb f8d0 	bl	8003e4a <_ZN9LineTrace14getMaxVelocityEv>
 8008caa:	ee10 3a10 	vmov	r3, s0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f7 fc62 	bl	8000578 <__aeabi_f2d>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4623      	mov	r3, r4
 8008cbc:	4862      	ldr	r0, [pc, #392]	; (8008e48 <cppLoop+0x1200>)
 8008cbe:	f7f8 fa29 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f7f8 f9fb 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008cca:	4862      	ldr	r0, [pc, #392]	; (8008e54 <cppLoop+0x120c>)
 8008ccc:	f7fb f8dd 	bl	8003e8a <_ZN9LineTrace14getMinVelocityEv>
 8008cd0:	ee10 3a10 	vmov	r3, s0
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f7 fc4f 	bl	8000578 <__aeabi_f2d>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	461a      	mov	r2, r3
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	4861      	ldr	r0, [pc, #388]	; (8008e68 <cppLoop+0x1220>)
 8008ce4:	f7f8 fa16 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8008ce8:	4854      	ldr	r0, [pc, #336]	; (8008e3c <cppLoop+0x11f4>)
 8008cea:	f7f9 f9cf 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2301      	moveq	r3, #1
 8008cf6:	2300      	movne	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d022      	beq.n	8008d44 <cppLoop+0x10fc>
				led.LR(-1, 1);
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f04f 31ff 	mov.w	r1, #4294967295
 8008d04:	484c      	ldr	r0, [pc, #304]	; (8008e38 <cppLoop+0x11f0>)
 8008d06:	f7f9 fae1 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008d0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d0e:	f001 f94f 	bl	8009fb0 <HAL_Delay>
				selector_vel++;
 8008d12:	4b56      	ldr	r3, [pc, #344]	; (8008e6c <cppLoop+0x1224>)
 8008d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	b21a      	sxth	r2, r3
 8008d20:	4b52      	ldr	r3, [pc, #328]	; (8008e6c <cppLoop+0x1224>)
 8008d22:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8008d24:	4b51      	ldr	r3, [pc, #324]	; (8008e6c <cppLoop+0x1224>)
 8008d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	dd02      	ble.n	8008d34 <cppLoop+0x10ec>
 8008d2e:	4b4f      	ldr	r3, [pc, #316]	; (8008e6c <cppLoop+0x1224>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8008d34:	2200      	movs	r2, #0
 8008d36:	f04f 31ff 	mov.w	r1, #4294967295
 8008d3a:	483f      	ldr	r0, [pc, #252]	; (8008e38 <cppLoop+0x11f0>)
 8008d3c:	f7f9 fac6 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008d40:	f000 bff1 	b.w	8009d26 <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_R){
 8008d44:	483d      	ldr	r0, [pc, #244]	; (8008e3c <cppLoop+0x11f4>)
 8008d46:	f7f9 f9a1 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	bf0c      	ite	eq
 8008d50:	2301      	moveq	r3, #1
 8008d52:	2300      	movne	r3, #0
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d03c      	beq.n	8008dd4 <cppLoop+0x118c>
				led.LR(-1, 1);
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d60:	4835      	ldr	r0, [pc, #212]	; (8008e38 <cppLoop+0x11f0>)
 8008d62:	f7f9 fab3 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008d66:	2064      	movs	r0, #100	; 0x64
 8008d68:	f001 f922 	bl	8009fb0 <HAL_Delay>
				if(selector_vel == 0)
 8008d6c:	4b3f      	ldr	r3, [pc, #252]	; (8008e6c <cppLoop+0x1224>)
 8008d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d113      	bne.n	8008d9e <cppLoop+0x1156>
					adj_max_velocity = adj_max_velocity + 0.1;
 8008d76:	4b33      	ldr	r3, [pc, #204]	; (8008e44 <cppLoop+0x11fc>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7f7 fbfc 	bl	8000578 <__aeabi_f2d>
 8008d80:	a32b      	add	r3, pc, #172	; (adr r3, 8008e30 <cppLoop+0x11e8>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f7f7 fa99 	bl	80002bc <__adddf3>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	4621      	mov	r1, r4
 8008d92:	f7f7 ff41 	bl	8000c18 <__aeabi_d2f>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <cppLoop+0x11fc>)
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e012      	b.n	8008dc4 <cppLoop+0x117c>
					adj_min_velocity = adj_min_velocity + 0.1;
 8008d9e:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <cppLoop+0x1204>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f7 fbe8 	bl	8000578 <__aeabi_f2d>
 8008da8:	a321      	add	r3, pc, #132	; (adr r3, 8008e30 <cppLoop+0x11e8>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa85 	bl	80002bc <__adddf3>
 8008db2:	4603      	mov	r3, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	4618      	mov	r0, r3
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7f7 ff2d 	bl	8000c18 <__aeabi_d2f>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	4b22      	ldr	r3, [pc, #136]	; (8008e4c <cppLoop+0x1204>)
 8008dc2:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8008dca:	481b      	ldr	r0, [pc, #108]	; (8008e38 <cppLoop+0x11f0>)
 8008dcc:	f7f9 fa7e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008dd0:	f000 bfa9 	b.w	8009d26 <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_L){
 8008dd4:	4819      	ldr	r0, [pc, #100]	; (8008e3c <cppLoop+0x11f4>)
 8008dd6:	f7f9 f959 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf0c      	ite	eq
 8008de0:	2301      	moveq	r3, #1
 8008de2:	2300      	movne	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d05d      	beq.n	8008ea6 <cppLoop+0x125e>
				led.LR(-1, 1);
 8008dea:	2201      	movs	r2, #1
 8008dec:	f04f 31ff 	mov.w	r1, #4294967295
 8008df0:	4811      	ldr	r0, [pc, #68]	; (8008e38 <cppLoop+0x11f0>)
 8008df2:	f7f9 fa6b 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008df6:	2064      	movs	r0, #100	; 0x64
 8008df8:	f001 f8da 	bl	8009fb0 <HAL_Delay>
				if(selector_vel == 0)
 8008dfc:	4b1b      	ldr	r3, [pc, #108]	; (8008e6c <cppLoop+0x1224>)
 8008dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d134      	bne.n	8008e70 <cppLoop+0x1228>
					adj_max_velocity = adj_max_velocity - 0.1;
 8008e06:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <cppLoop+0x11fc>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7f7 fbb4 	bl	8000578 <__aeabi_f2d>
 8008e10:	a307      	add	r3, pc, #28	; (adr r3, 8008e30 <cppLoop+0x11e8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fa4f 	bl	80002b8 <__aeabi_dsub>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	4618      	mov	r0, r3
 8008e20:	4621      	mov	r1, r4
 8008e22:	f7f7 fef9 	bl	8000c18 <__aeabi_d2f>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <cppLoop+0x11fc>)
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e033      	b.n	8008e96 <cppLoop+0x124e>
 8008e2e:	bf00      	nop
 8008e30:	9999999a 	.word	0x9999999a
 8008e34:	3fb99999 	.word	0x3fb99999
 8008e38:	20000558 	.word	0x20000558
 8008e3c:	2000054c 	.word	0x2000054c
 8008e40:	2004524a 	.word	0x2004524a
 8008e44:	2004528c 	.word	0x2004528c
 8008e48:	080190e0 	.word	0x080190e0
 8008e4c:	2004529c 	.word	0x2004529c
 8008e50:	08019094 	.word	0x08019094
 8008e54:	200209d4 	.word	0x200209d4
 8008e58:	2000057c 	.word	0x2000057c
 8008e5c:	080190a0 	.word	0x080190a0
 8008e60:	080190ac 	.word	0x080190ac
 8008e64:	080190b8 	.word	0x080190b8
 8008e68:	080190c8 	.word	0x080190c8
 8008e6c:	20045250 	.word	0x20045250
					adj_min_velocity = adj_min_velocity - 0.1;
 8008e70:	4bb5      	ldr	r3, [pc, #724]	; (8009148 <cppLoop+0x1500>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f7 fb7f 	bl	8000578 <__aeabi_f2d>
 8008e7a:	a3b1      	add	r3, pc, #708	; (adr r3, 8009140 <cppLoop+0x14f8>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 fa1a 	bl	80002b8 <__aeabi_dsub>
 8008e84:	4603      	mov	r3, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	4618      	mov	r0, r3
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	f7f7 fec4 	bl	8000c18 <__aeabi_d2f>
 8008e90:	4602      	mov	r2, r0
 8008e92:	4bad      	ldr	r3, [pc, #692]	; (8009148 <cppLoop+0x1500>)
 8008e94:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008e96:	2200      	movs	r2, #0
 8008e98:	f04f 31ff 	mov.w	r1, #4294967295
 8008e9c:	48ab      	ldr	r0, [pc, #684]	; (800914c <cppLoop+0x1504>)
 8008e9e:	f7f9 fa15 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008ea2:	f000 bf40 	b.w	8009d26 <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_C){
 8008ea6:	48aa      	ldr	r0, [pc, #680]	; (8009150 <cppLoop+0x1508>)
 8008ea8:	f7f9 f8f0 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	bf0c      	ite	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	2300      	movne	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 8734 	beq.w	8009d26 <cppLoop+0x20de>
				led.LR(-1, 1);
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec4:	48a1      	ldr	r0, [pc, #644]	; (800914c <cppLoop+0x1504>)
 8008ec6:	f7f9 fa01 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008eca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ece:	f001 f86f 	bl	8009fb0 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	4b9f      	ldr	r3, [pc, #636]	; (8009154 <cppLoop+0x150c>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	499f      	ldr	r1, [pc, #636]	; (8009158 <cppLoop+0x1510>)
 8008edc:	489f      	ldr	r0, [pc, #636]	; (800915c <cppLoop+0x1514>)
 8008ede:	f7f8 fcbd 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	4b98      	ldr	r3, [pc, #608]	; (8009148 <cppLoop+0x1500>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	499d      	ldr	r1, [pc, #628]	; (8009160 <cppLoop+0x1518>)
 8008eec:	489b      	ldr	r0, [pc, #620]	; (800915c <cppLoop+0x1514>)
 8008eee:	f7f8 fcb5 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 8008ef2:	4b98      	ldr	r3, [pc, #608]	; (8009154 <cppLoop+0x150c>)
 8008ef4:	edd3 7a00 	vldr	s15, [r3]
 8008ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8008efc:	4899      	ldr	r0, [pc, #612]	; (8009164 <cppLoop+0x151c>)
 8008efe:	f7fa ff54 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8008f02:	4b91      	ldr	r3, [pc, #580]	; (8009148 <cppLoop+0x1500>)
 8008f04:	edd3 7a00 	vldr	s15, [r3]
 8008f08:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0c:	4895      	ldr	r0, [pc, #596]	; (8009164 <cppLoop+0x151c>)
 8008f0e:	f7fa ff6c 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 8008f12:	2200      	movs	r2, #0
 8008f14:	f04f 31ff 	mov.w	r1, #4294967295
 8008f18:	488c      	ldr	r0, [pc, #560]	; (800914c <cppLoop+0x1504>)
 8008f1a:	f7f9 f9d7 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008f1e:	f000 bf02 	b.w	8009d26 <cppLoop+0x20de>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 8008f22:	214d      	movs	r1, #77	; 0x4d
 8008f24:	4889      	ldr	r0, [pc, #548]	; (800914c <cppLoop+0x1504>)
 8008f26:	f7f9 f915 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008f2a:	4889      	ldr	r0, [pc, #548]	; (8009150 <cppLoop+0x1508>)
 8008f2c:	f7f9 f8ae 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	bf0c      	ite	eq
 8008f36:	2301      	moveq	r3, #1
 8008f38:	2300      	movne	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d020      	beq.n	8008f82 <cppLoop+0x133a>
			led.LR(-1, 1);
 8008f40:	2201      	movs	r2, #1
 8008f42:	f04f 31ff 	mov.w	r1, #4294967295
 8008f46:	4881      	ldr	r0, [pc, #516]	; (800914c <cppLoop+0x1504>)
 8008f48:	f7f9 f9c0 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f50:	f001 f82e 	bl	8009fb0 <HAL_Delay>

			selector_run++;
 8008f54:	4b84      	ldr	r3, [pc, #528]	; (8009168 <cppLoop+0x1520>)
 8008f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	b21a      	sxth	r2, r3
 8008f62:	4b81      	ldr	r3, [pc, #516]	; (8009168 <cppLoop+0x1520>)
 8008f64:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008f66:	4b80      	ldr	r3, [pc, #512]	; (8009168 <cppLoop+0x1520>)
 8008f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	dd02      	ble.n	8008f76 <cppLoop+0x132e>
 8008f70:	4b7d      	ldr	r3, [pc, #500]	; (8009168 <cppLoop+0x1520>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008f76:	2200      	movs	r2, #0
 8008f78:	f04f 31ff 	mov.w	r1, #4294967295
 8008f7c:	4873      	ldr	r0, [pc, #460]	; (800914c <cppLoop+0x1504>)
 8008f7e:	f7f9 f9a5 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008f82:	4b79      	ldr	r3, [pc, #484]	; (8009168 <cppLoop+0x1520>)
 8008f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 8081 	bne.w	8009090 <cppLoop+0x1448>
			lcd_clear();
 8008f8e:	f7f8 f887 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008f92:	2100      	movs	r1, #0
 8008f94:	2000      	movs	r0, #0
 8008f96:	f7f8 f893 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008f9a:	4b74      	ldr	r3, [pc, #464]	; (800916c <cppLoop+0x1524>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f7 faea 	bl	8000578 <__aeabi_f2d>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4623      	mov	r3, r4
 8008fac:	4870      	ldr	r0, [pc, #448]	; (8009170 <cppLoop+0x1528>)
 8008fae:	f7f8 f8b1 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f7f8 f883 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 8008fba:	4b6e      	ldr	r3, [pc, #440]	; (8009174 <cppLoop+0x152c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 fada 	bl	8000578 <__aeabi_f2d>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4623      	mov	r3, r4
 8008fcc:	486a      	ldr	r0, [pc, #424]	; (8009178 <cppLoop+0x1530>)
 8008fce:	f7f8 f8a1 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8008fd2:	485f      	ldr	r0, [pc, #380]	; (8009150 <cppLoop+0x1508>)
 8008fd4:	f7f9 f85a 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	bf0c      	ite	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	2300      	movne	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 86a0 	beq.w	8009d2a <cppLoop+0x20e2>
				HAL_Delay(500);
 8008fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fee:	f000 ffdf 	bl	8009fb0 <HAL_Delay>

				led.LR(1, -1);
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	4854      	ldr	r0, [pc, #336]	; (800914c <cppLoop+0x1504>)
 8008ffa:	f7f9 f967 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008ffe:	4b5f      	ldr	r3, [pc, #380]	; (800917c <cppLoop+0x1534>)
 8009000:	edd3 7a00 	vldr	s15, [r3]
 8009004:	4b5e      	ldr	r3, [pc, #376]	; (8009180 <cppLoop+0x1538>)
 8009006:	ed93 7a00 	vldr	s14, [r3]
 800900a:	4b5e      	ldr	r3, [pc, #376]	; (8009184 <cppLoop+0x153c>)
 800900c:	edd3 6a00 	vldr	s13, [r3]
 8009010:	eeb0 1a66 	vmov.f32	s2, s13
 8009014:	eef0 0a47 	vmov.f32	s1, s14
 8009018:	eeb0 0a67 	vmov.f32	s0, s15
 800901c:	4851      	ldr	r0, [pc, #324]	; (8009164 <cppLoop+0x151c>)
 800901e:	f7fa fe19 	bl	8003c54 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 8009022:	2102      	movs	r1, #2
 8009024:	484f      	ldr	r0, [pc, #316]	; (8009164 <cppLoop+0x151c>)
 8009026:	f7fb f893 	bl	8004150 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 800902a:	4b52      	ldr	r3, [pc, #328]	; (8009174 <cppLoop+0x152c>)
 800902c:	edd3 7a00 	vldr	s15, [r3]
 8009030:	eeb0 0a67 	vmov.f32	s0, s15
 8009034:	484b      	ldr	r0, [pc, #300]	; (8009164 <cppLoop+0x151c>)
 8009036:	f7fa fea8 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 800903a:	4b4c      	ldr	r3, [pc, #304]	; (800916c <cppLoop+0x1524>)
 800903c:	edd3 7a00 	vldr	s15, [r3]
 8009040:	eeb0 0a67 	vmov.f32	s0, s15
 8009044:	4847      	ldr	r0, [pc, #284]	; (8009164 <cppLoop+0x151c>)
 8009046:	f7fa fec0 	bl	8003dca <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 800904a:	4b4a      	ldr	r3, [pc, #296]	; (8009174 <cppLoop+0x152c>)
 800904c:	edd3 7a00 	vldr	s15, [r3]
 8009050:	eeb0 0a67 	vmov.f32	s0, s15
 8009054:	4843      	ldr	r0, [pc, #268]	; (8009164 <cppLoop+0x151c>)
 8009056:	f7fa fed8 	bl	8003e0a <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 800905a:	4842      	ldr	r0, [pc, #264]	; (8009164 <cppLoop+0x151c>)
 800905c:	f7fb fac0 	bl	80045e0 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009060:	4840      	ldr	r0, [pc, #256]	; (8009164 <cppLoop+0x151c>)
 8009062:	f7fb f8c5 	bl	80041f0 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009066:	4848      	ldr	r0, [pc, #288]	; (8009188 <cppLoop+0x1540>)
 8009068:	f7fb ff60 	bl	8004f2c <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800906c:	4a47      	ldr	r2, [pc, #284]	; (800918c <cppLoop+0x1544>)
 800906e:	4948      	ldr	r1, [pc, #288]	; (8009190 <cppLoop+0x1548>)
 8009070:	4845      	ldr	r0, [pc, #276]	; (8009188 <cppLoop+0x1540>)
 8009072:	f7fb fdf4 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009076:	4a47      	ldr	r2, [pc, #284]	; (8009194 <cppLoop+0x154c>)
 8009078:	4945      	ldr	r1, [pc, #276]	; (8009190 <cppLoop+0x1548>)
 800907a:	4843      	ldr	r0, [pc, #268]	; (8009188 <cppLoop+0x1540>)
 800907c:	f7fb fe03 	bl	8004c86 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009080:	f04f 32ff 	mov.w	r2, #4294967295
 8009084:	2100      	movs	r1, #0
 8009086:	4831      	ldr	r0, [pc, #196]	; (800914c <cppLoop+0x1504>)
 8009088:	f7f9 f920 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 800908c:	f000 be4d 	b.w	8009d2a <cppLoop+0x20e2>
			lcd_clear();
 8009090:	f7f8 f806 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009094:	2100      	movs	r1, #0
 8009096:	2000      	movs	r0, #0
 8009098:	f7f8 f812 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800909c:	4831      	ldr	r0, [pc, #196]	; (8009164 <cppLoop+0x151c>)
 800909e:	f7fa fee4 	bl	8003e6a <_ZN9LineTrace15getMaxVelocity2Ev>
 80090a2:	ee10 3a10 	vmov	r3, s0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f7 fa66 	bl	8000578 <__aeabi_f2d>
 80090ac:	4603      	mov	r3, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	461a      	mov	r2, r3
 80090b2:	4623      	mov	r3, r4
 80090b4:	482e      	ldr	r0, [pc, #184]	; (8009170 <cppLoop+0x1528>)
 80090b6:	f7f8 f82d 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80090ba:	2101      	movs	r1, #1
 80090bc:	2000      	movs	r0, #0
 80090be:	f7f7 ffff 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80090c2:	4828      	ldr	r0, [pc, #160]	; (8009164 <cppLoop+0x151c>)
 80090c4:	f7fa fef1 	bl	8003eaa <_ZN9LineTrace15getMinVelocity2Ev>
 80090c8:	ee10 3a10 	vmov	r3, s0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7f7 fa53 	bl	8000578 <__aeabi_f2d>
 80090d2:	4603      	mov	r3, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	461a      	mov	r2, r3
 80090d8:	4623      	mov	r3, r4
 80090da:	482f      	ldr	r0, [pc, #188]	; (8009198 <cppLoop+0x1550>)
 80090dc:	f7f8 f81a 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 80090e0:	481b      	ldr	r0, [pc, #108]	; (8009150 <cppLoop+0x1508>)
 80090e2:	f7f8 ffd3 	bl	800208c <_ZN8JoyStick8getValueEv>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	bf0c      	ite	eq
 80090ec:	2301      	moveq	r3, #1
 80090ee:	2300      	movne	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d054      	beq.n	80091a0 <cppLoop+0x1558>
				led.LR(-1, 1);
 80090f6:	2201      	movs	r2, #1
 80090f8:	f04f 31ff 	mov.w	r1, #4294967295
 80090fc:	4813      	ldr	r0, [pc, #76]	; (800914c <cppLoop+0x1504>)
 80090fe:	f7f9 f8e5 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009102:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009106:	f000 ff53 	bl	8009fb0 <HAL_Delay>
				selector_vel2++;
 800910a:	4b24      	ldr	r3, [pc, #144]	; (800919c <cppLoop+0x1554>)
 800910c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009110:	b29b      	uxth	r3, r3
 8009112:	3301      	adds	r3, #1
 8009114:	b29b      	uxth	r3, r3
 8009116:	b21a      	sxth	r2, r3
 8009118:	4b20      	ldr	r3, [pc, #128]	; (800919c <cppLoop+0x1554>)
 800911a:	801a      	strh	r2, [r3, #0]
				if(selector_vel2 >= 2) selector_vel2 = 0;
 800911c:	4b1f      	ldr	r3, [pc, #124]	; (800919c <cppLoop+0x1554>)
 800911e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009122:	2b01      	cmp	r3, #1
 8009124:	dd02      	ble.n	800912c <cppLoop+0x14e4>
 8009126:	4b1d      	ldr	r3, [pc, #116]	; (800919c <cppLoop+0x1554>)
 8009128:	2200      	movs	r2, #0
 800912a:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800912c:	2200      	movs	r2, #0
 800912e:	f04f 31ff 	mov.w	r1, #4294967295
 8009132:	4806      	ldr	r0, [pc, #24]	; (800914c <cppLoop+0x1504>)
 8009134:	f7f9 f8ca 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009138:	f000 bdf7 	b.w	8009d2a <cppLoop+0x20e2>
 800913c:	f3af 8000 	nop.w
 8009140:	9999999a 	.word	0x9999999a
 8009144:	3fb99999 	.word	0x3fb99999
 8009148:	2004529c 	.word	0x2004529c
 800914c:	20000558 	.word	0x20000558
 8009150:	2000054c 	.word	0x2000054c
 8009154:	2004528c 	.word	0x2004528c
 8009158:	080190ec 	.word	0x080190ec
 800915c:	08019048 	.word	0x08019048
 8009160:	080190f8 	.word	0x080190f8
 8009164:	200209d4 	.word	0x200209d4
 8009168:	2004524a 	.word	0x2004524a
 800916c:	20045294 	.word	0x20045294
 8009170:	08019104 	.word	0x08019104
 8009174:	200452a4 	.word	0x200452a4
 8009178:	08019094 	.word	0x08019094
 800917c:	20045254 	.word	0x20045254
 8009180:	2004525c 	.word	0x2004525c
 8009184:	20045264 	.word	0x20045264
 8009188:	2000057c 	.word	0x2000057c
 800918c:	080190a0 	.word	0x080190a0
 8009190:	080190ac 	.word	0x080190ac
 8009194:	080190b8 	.word	0x080190b8
 8009198:	080190c8 	.word	0x080190c8
 800919c:	20045252 	.word	0x20045252
			else if(joy_stick.getValue() == JOY_R){
 80091a0:	48b9      	ldr	r0, [pc, #740]	; (8009488 <cppLoop+0x1840>)
 80091a2:	f7f8 ff73 	bl	800208c <_ZN8JoyStick8getValueEv>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d03c      	beq.n	8009230 <cppLoop+0x15e8>
				led.LR(-1, 1);
 80091b6:	2201      	movs	r2, #1
 80091b8:	f04f 31ff 	mov.w	r1, #4294967295
 80091bc:	48b3      	ldr	r0, [pc, #716]	; (800948c <cppLoop+0x1844>)
 80091be:	f7f9 f885 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80091c2:	2064      	movs	r0, #100	; 0x64
 80091c4:	f000 fef4 	bl	8009fb0 <HAL_Delay>
				if(selector_vel2 == 0)
 80091c8:	4bb1      	ldr	r3, [pc, #708]	; (8009490 <cppLoop+0x1848>)
 80091ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d113      	bne.n	80091fa <cppLoop+0x15b2>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80091d2:	4bb0      	ldr	r3, [pc, #704]	; (8009494 <cppLoop+0x184c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f9ce 	bl	8000578 <__aeabi_f2d>
 80091dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8009480 <cppLoop+0x1838>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f86b 	bl	80002bc <__adddf3>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	4618      	mov	r0, r3
 80091ec:	4621      	mov	r1, r4
 80091ee:	f7f7 fd13 	bl	8000c18 <__aeabi_d2f>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4ba7      	ldr	r3, [pc, #668]	; (8009494 <cppLoop+0x184c>)
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	e012      	b.n	8009220 <cppLoop+0x15d8>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80091fa:	4ba7      	ldr	r3, [pc, #668]	; (8009498 <cppLoop+0x1850>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f7 f9ba 	bl	8000578 <__aeabi_f2d>
 8009204:	a39e      	add	r3, pc, #632	; (adr r3, 8009480 <cppLoop+0x1838>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f857 	bl	80002bc <__adddf3>
 800920e:	4603      	mov	r3, r0
 8009210:	460c      	mov	r4, r1
 8009212:	4618      	mov	r0, r3
 8009214:	4621      	mov	r1, r4
 8009216:	f7f7 fcff 	bl	8000c18 <__aeabi_d2f>
 800921a:	4602      	mov	r2, r0
 800921c:	4b9e      	ldr	r3, [pc, #632]	; (8009498 <cppLoop+0x1850>)
 800921e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009220:	2200      	movs	r2, #0
 8009222:	f04f 31ff 	mov.w	r1, #4294967295
 8009226:	4899      	ldr	r0, [pc, #612]	; (800948c <cppLoop+0x1844>)
 8009228:	f7f9 f850 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800922c:	f000 bd7d 	b.w	8009d2a <cppLoop+0x20e2>
			else if(joy_stick.getValue() == JOY_L){
 8009230:	4895      	ldr	r0, [pc, #596]	; (8009488 <cppLoop+0x1840>)
 8009232:	f7f8 ff2b 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009236:	4603      	mov	r3, r0
 8009238:	2b01      	cmp	r3, #1
 800923a:	bf0c      	ite	eq
 800923c:	2301      	moveq	r3, #1
 800923e:	2300      	movne	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d03c      	beq.n	80092c0 <cppLoop+0x1678>
				led.LR(-1, 1);
 8009246:	2201      	movs	r2, #1
 8009248:	f04f 31ff 	mov.w	r1, #4294967295
 800924c:	488f      	ldr	r0, [pc, #572]	; (800948c <cppLoop+0x1844>)
 800924e:	f7f9 f83d 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009252:	2064      	movs	r0, #100	; 0x64
 8009254:	f000 feac 	bl	8009fb0 <HAL_Delay>
				if(selector_vel2 == 0)
 8009258:	4b8d      	ldr	r3, [pc, #564]	; (8009490 <cppLoop+0x1848>)
 800925a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d113      	bne.n	800928a <cppLoop+0x1642>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8009262:	4b8c      	ldr	r3, [pc, #560]	; (8009494 <cppLoop+0x184c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4618      	mov	r0, r3
 8009268:	f7f7 f986 	bl	8000578 <__aeabi_f2d>
 800926c:	a384      	add	r3, pc, #528	; (adr r3, 8009480 <cppLoop+0x1838>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f821 	bl	80002b8 <__aeabi_dsub>
 8009276:	4603      	mov	r3, r0
 8009278:	460c      	mov	r4, r1
 800927a:	4618      	mov	r0, r3
 800927c:	4621      	mov	r1, r4
 800927e:	f7f7 fccb 	bl	8000c18 <__aeabi_d2f>
 8009282:	4602      	mov	r2, r0
 8009284:	4b83      	ldr	r3, [pc, #524]	; (8009494 <cppLoop+0x184c>)
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	e012      	b.n	80092b0 <cppLoop+0x1668>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 800928a:	4b83      	ldr	r3, [pc, #524]	; (8009498 <cppLoop+0x1850>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4618      	mov	r0, r3
 8009290:	f7f7 f972 	bl	8000578 <__aeabi_f2d>
 8009294:	a37a      	add	r3, pc, #488	; (adr r3, 8009480 <cppLoop+0x1838>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f7 f80d 	bl	80002b8 <__aeabi_dsub>
 800929e:	4603      	mov	r3, r0
 80092a0:	460c      	mov	r4, r1
 80092a2:	4618      	mov	r0, r3
 80092a4:	4621      	mov	r1, r4
 80092a6:	f7f7 fcb7 	bl	8000c18 <__aeabi_d2f>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b7a      	ldr	r3, [pc, #488]	; (8009498 <cppLoop+0x1850>)
 80092ae:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80092b0:	2200      	movs	r2, #0
 80092b2:	f04f 31ff 	mov.w	r1, #4294967295
 80092b6:	4875      	ldr	r0, [pc, #468]	; (800948c <cppLoop+0x1844>)
 80092b8:	f7f9 f808 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80092bc:	f000 bd35 	b.w	8009d2a <cppLoop+0x20e2>
			else if(joy_stick.getValue() == JOY_C){
 80092c0:	4871      	ldr	r0, [pc, #452]	; (8009488 <cppLoop+0x1840>)
 80092c2:	f7f8 fee3 	bl	800208c <_ZN8JoyStick8getValueEv>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	bf0c      	ite	eq
 80092cc:	2301      	moveq	r3, #1
 80092ce:	2300      	movne	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 8529 	beq.w	8009d2a <cppLoop+0x20e2>
				led.LR(-1, 1);
 80092d8:	2201      	movs	r2, #1
 80092da:	f04f 31ff 	mov.w	r1, #4294967295
 80092de:	486b      	ldr	r0, [pc, #428]	; (800948c <cppLoop+0x1844>)
 80092e0:	f7f8 fff4 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 80092e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092e8:	f000 fe62 	bl	8009fb0 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80092ec:	2300      	movs	r3, #0
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4b68      	ldr	r3, [pc, #416]	; (8009494 <cppLoop+0x184c>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	4969      	ldr	r1, [pc, #420]	; (800949c <cppLoop+0x1854>)
 80092f6:	486a      	ldr	r0, [pc, #424]	; (80094a0 <cppLoop+0x1858>)
 80092f8:	f7f8 fab0 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80092fc:	2300      	movs	r3, #0
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4b65      	ldr	r3, [pc, #404]	; (8009498 <cppLoop+0x1850>)
 8009302:	2201      	movs	r2, #1
 8009304:	4967      	ldr	r1, [pc, #412]	; (80094a4 <cppLoop+0x185c>)
 8009306:	4866      	ldr	r0, [pc, #408]	; (80094a0 <cppLoop+0x1858>)
 8009308:	f7f8 faa8 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 800930c:	4b61      	ldr	r3, [pc, #388]	; (8009494 <cppLoop+0x184c>)
 800930e:	edd3 7a00 	vldr	s15, [r3]
 8009312:	eeb0 0a67 	vmov.f32	s0, s15
 8009316:	4864      	ldr	r0, [pc, #400]	; (80094a8 <cppLoop+0x1860>)
 8009318:	f7fa fd57 	bl	8003dca <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 800931c:	4b5e      	ldr	r3, [pc, #376]	; (8009498 <cppLoop+0x1850>)
 800931e:	edd3 7a00 	vldr	s15, [r3]
 8009322:	eeb0 0a67 	vmov.f32	s0, s15
 8009326:	4860      	ldr	r0, [pc, #384]	; (80094a8 <cppLoop+0x1860>)
 8009328:	f7fa fd6f 	bl	8003e0a <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 800932c:	2200      	movs	r2, #0
 800932e:	f04f 31ff 	mov.w	r1, #4294967295
 8009332:	4856      	ldr	r0, [pc, #344]	; (800948c <cppLoop+0x1844>)
 8009334:	f7f8 ffca 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009338:	f000 bcf7 	b.w	8009d2a <cppLoop+0x20e2>

	case 5:
		led.fullColor('W');
 800933c:	2157      	movs	r1, #87	; 0x57
 800933e:	4853      	ldr	r0, [pc, #332]	; (800948c <cppLoop+0x1844>)
 8009340:	f7f8 ff08 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009344:	f7f7 feac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009348:	2100      	movs	r1, #0
 800934a:	2000      	movs	r0, #0
 800934c:	f7f7 feb8 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8009350:	4855      	ldr	r0, [pc, #340]	; (80094a8 <cppLoop+0x1860>)
 8009352:	f7fa fdee 	bl	8003f32 <_ZN9LineTrace9getMaxAccEv>
 8009356:	ee10 3a10 	vmov	r3, s0
 800935a:	4618      	mov	r0, r3
 800935c:	f7f7 f90c 	bl	8000578 <__aeabi_f2d>
 8009360:	4603      	mov	r3, r0
 8009362:	460c      	mov	r4, r1
 8009364:	461a      	mov	r2, r3
 8009366:	4623      	mov	r3, r4
 8009368:	4850      	ldr	r0, [pc, #320]	; (80094ac <cppLoop+0x1864>)
 800936a:	f7f7 fed3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800936e:	2101      	movs	r1, #1
 8009370:	2000      	movs	r0, #0
 8009372:	f7f7 fea5 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8009376:	484c      	ldr	r0, [pc, #304]	; (80094a8 <cppLoop+0x1860>)
 8009378:	f7fa fe11 	bl	8003f9e <_ZN9LineTrace9getMaxDecEv>
 800937c:	ee10 3a10 	vmov	r3, s0
 8009380:	4618      	mov	r0, r3
 8009382:	f7f7 f8f9 	bl	8000578 <__aeabi_f2d>
 8009386:	4603      	mov	r3, r0
 8009388:	460c      	mov	r4, r1
 800938a:	461a      	mov	r2, r3
 800938c:	4623      	mov	r3, r4
 800938e:	4848      	ldr	r0, [pc, #288]	; (80094b0 <cppLoop+0x1868>)
 8009390:	f7f7 fec0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8009394:	483c      	ldr	r0, [pc, #240]	; (8009488 <cppLoop+0x1840>)
 8009396:	f7f8 fe79 	bl	800208c <_ZN8JoyStick8getValueEv>
 800939a:	4603      	mov	r3, r0
 800939c:	2b04      	cmp	r3, #4
 800939e:	bf0c      	ite	eq
 80093a0:	2301      	moveq	r3, #1
 80093a2:	2300      	movne	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d022      	beq.n	80093f0 <cppLoop+0x17a8>
			led.LR(-1, 1);
 80093aa:	2201      	movs	r2, #1
 80093ac:	f04f 31ff 	mov.w	r1, #4294967295
 80093b0:	4836      	ldr	r0, [pc, #216]	; (800948c <cppLoop+0x1844>)
 80093b2:	f7f8 ff8b 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093ba:	f000 fdf9 	bl	8009fb0 <HAL_Delay>

			selector_acc++;
 80093be:	4b3d      	ldr	r3, [pc, #244]	; (80094b4 <cppLoop+0x186c>)
 80093c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3301      	adds	r3, #1
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	b21a      	sxth	r2, r3
 80093cc:	4b39      	ldr	r3, [pc, #228]	; (80094b4 <cppLoop+0x186c>)
 80093ce:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80093d0:	4b38      	ldr	r3, [pc, #224]	; (80094b4 <cppLoop+0x186c>)
 80093d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	dd02      	ble.n	80093e0 <cppLoop+0x1798>
 80093da:	4b36      	ldr	r3, [pc, #216]	; (80094b4 <cppLoop+0x186c>)
 80093dc:	2200      	movs	r2, #0
 80093de:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80093e0:	2200      	movs	r2, #0
 80093e2:	f04f 31ff 	mov.w	r1, #4294967295
 80093e6:	4829      	ldr	r0, [pc, #164]	; (800948c <cppLoop+0x1844>)
 80093e8:	f7f8 ff70 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80093ec:	f000 bc9f 	b.w	8009d2e <cppLoop+0x20e6>
		else if(joy_stick.getValue() == JOY_R){
 80093f0:	4825      	ldr	r0, [pc, #148]	; (8009488 <cppLoop+0x1840>)
 80093f2:	f7f8 fe4b 	bl	800208c <_ZN8JoyStick8getValueEv>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	bf0c      	ite	eq
 80093fc:	2301      	moveq	r3, #1
 80093fe:	2300      	movne	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d05c      	beq.n	80094c0 <cppLoop+0x1878>
			led.LR(-1, 1);
 8009406:	2201      	movs	r2, #1
 8009408:	f04f 31ff 	mov.w	r1, #4294967295
 800940c:	481f      	ldr	r0, [pc, #124]	; (800948c <cppLoop+0x1844>)
 800940e:	f7f8 ff5d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009412:	2064      	movs	r0, #100	; 0x64
 8009414:	f000 fdcc 	bl	8009fb0 <HAL_Delay>
			if(selector_acc == 0){
 8009418:	4b26      	ldr	r3, [pc, #152]	; (80094b4 <cppLoop+0x186c>)
 800941a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d113      	bne.n	800944a <cppLoop+0x1802>
				adj_acc = adj_acc + 0.1;
 8009422:	4b25      	ldr	r3, [pc, #148]	; (80094b8 <cppLoop+0x1870>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f7f7 f8a6 	bl	8000578 <__aeabi_f2d>
 800942c:	a314      	add	r3, pc, #80	; (adr r3, 8009480 <cppLoop+0x1838>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 ff43 	bl	80002bc <__adddf3>
 8009436:	4603      	mov	r3, r0
 8009438:	460c      	mov	r4, r1
 800943a:	4618      	mov	r0, r3
 800943c:	4621      	mov	r1, r4
 800943e:	f7f7 fbeb 	bl	8000c18 <__aeabi_d2f>
 8009442:	4602      	mov	r2, r0
 8009444:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <cppLoop+0x1870>)
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	e012      	b.n	8009470 <cppLoop+0x1828>
				adj_dec = adj_dec + 0.1;
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <cppLoop+0x1874>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f7f7 f892 	bl	8000578 <__aeabi_f2d>
 8009454:	a30a      	add	r3, pc, #40	; (adr r3, 8009480 <cppLoop+0x1838>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f7f6 ff2f 	bl	80002bc <__adddf3>
 800945e:	4603      	mov	r3, r0
 8009460:	460c      	mov	r4, r1
 8009462:	4618      	mov	r0, r3
 8009464:	4621      	mov	r1, r4
 8009466:	f7f7 fbd7 	bl	8000c18 <__aeabi_d2f>
 800946a:	4602      	mov	r2, r0
 800946c:	4b13      	ldr	r3, [pc, #76]	; (80094bc <cppLoop+0x1874>)
 800946e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009470:	2200      	movs	r2, #0
 8009472:	f04f 31ff 	mov.w	r1, #4294967295
 8009476:	4805      	ldr	r0, [pc, #20]	; (800948c <cppLoop+0x1844>)
 8009478:	f7f8 ff28 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800947c:	f000 bc57 	b.w	8009d2e <cppLoop+0x20e6>
 8009480:	9999999a 	.word	0x9999999a
 8009484:	3fb99999 	.word	0x3fb99999
 8009488:	2000054c 	.word	0x2000054c
 800948c:	20000558 	.word	0x20000558
 8009490:	20045252 	.word	0x20045252
 8009494:	20045294 	.word	0x20045294
 8009498:	200452a4 	.word	0x200452a4
 800949c:	08019110 	.word	0x08019110
 80094a0:	08019048 	.word	0x08019048
 80094a4:	0801911c 	.word	0x0801911c
 80094a8:	200209d4 	.word	0x200209d4
 80094ac:	08019128 	.word	0x08019128
 80094b0:	08019134 	.word	0x08019134
 80094b4:	2004524c 	.word	0x2004524c
 80094b8:	200452ac 	.word	0x200452ac
 80094bc:	200452b4 	.word	0x200452b4
		else if(joy_stick.getValue() == JOY_L){
 80094c0:	48b5      	ldr	r0, [pc, #724]	; (8009798 <cppLoop+0x1b50>)
 80094c2:	f7f8 fde3 	bl	800208c <_ZN8JoyStick8getValueEv>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	bf0c      	ite	eq
 80094cc:	2301      	moveq	r3, #1
 80094ce:	2300      	movne	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d03b      	beq.n	800954e <cppLoop+0x1906>
			led.LR(-1, 1);
 80094d6:	2201      	movs	r2, #1
 80094d8:	f04f 31ff 	mov.w	r1, #4294967295
 80094dc:	48af      	ldr	r0, [pc, #700]	; (800979c <cppLoop+0x1b54>)
 80094de:	f7f8 fef5 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80094e2:	2064      	movs	r0, #100	; 0x64
 80094e4:	f000 fd64 	bl	8009fb0 <HAL_Delay>
			if(selector_acc == 0){
 80094e8:	4bad      	ldr	r3, [pc, #692]	; (80097a0 <cppLoop+0x1b58>)
 80094ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d113      	bne.n	800951a <cppLoop+0x18d2>
				adj_acc = adj_acc - 0.1;
 80094f2:	4bac      	ldr	r3, [pc, #688]	; (80097a4 <cppLoop+0x1b5c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7f7 f83e 	bl	8000578 <__aeabi_f2d>
 80094fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8009790 <cppLoop+0x1b48>)
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	f7f6 fed9 	bl	80002b8 <__aeabi_dsub>
 8009506:	4603      	mov	r3, r0
 8009508:	460c      	mov	r4, r1
 800950a:	4618      	mov	r0, r3
 800950c:	4621      	mov	r1, r4
 800950e:	f7f7 fb83 	bl	8000c18 <__aeabi_d2f>
 8009512:	4602      	mov	r2, r0
 8009514:	4ba3      	ldr	r3, [pc, #652]	; (80097a4 <cppLoop+0x1b5c>)
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	e012      	b.n	8009540 <cppLoop+0x18f8>
				adj_dec = adj_dec - 0.1;
 800951a:	4ba3      	ldr	r3, [pc, #652]	; (80097a8 <cppLoop+0x1b60>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f7f7 f82a 	bl	8000578 <__aeabi_f2d>
 8009524:	a39a      	add	r3, pc, #616	; (adr r3, 8009790 <cppLoop+0x1b48>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 fec5 	bl	80002b8 <__aeabi_dsub>
 800952e:	4603      	mov	r3, r0
 8009530:	460c      	mov	r4, r1
 8009532:	4618      	mov	r0, r3
 8009534:	4621      	mov	r1, r4
 8009536:	f7f7 fb6f 	bl	8000c18 <__aeabi_d2f>
 800953a:	4602      	mov	r2, r0
 800953c:	4b9a      	ldr	r3, [pc, #616]	; (80097a8 <cppLoop+0x1b60>)
 800953e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009540:	2200      	movs	r2, #0
 8009542:	f04f 31ff 	mov.w	r1, #4294967295
 8009546:	4895      	ldr	r0, [pc, #596]	; (800979c <cppLoop+0x1b54>)
 8009548:	f7f8 fec0 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800954c:	e3ef      	b.n	8009d2e <cppLoop+0x20e6>
		else if(joy_stick.getValue() == JOY_C){
 800954e:	4892      	ldr	r0, [pc, #584]	; (8009798 <cppLoop+0x1b50>)
 8009550:	f7f8 fd9c 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009554:	4603      	mov	r3, r0
 8009556:	2b02      	cmp	r3, #2
 8009558:	bf0c      	ite	eq
 800955a:	2301      	moveq	r3, #1
 800955c:	2300      	movne	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 83e4 	beq.w	8009d2e <cppLoop+0x20e6>
			led.LR(-1, 1);
 8009566:	2201      	movs	r2, #1
 8009568:	f04f 31ff 	mov.w	r1, #4294967295
 800956c:	488b      	ldr	r0, [pc, #556]	; (800979c <cppLoop+0x1b54>)
 800956e:	f7f8 fead 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009572:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009576:	f000 fd1b 	bl	8009fb0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800957a:	2300      	movs	r3, #0
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	4b89      	ldr	r3, [pc, #548]	; (80097a4 <cppLoop+0x1b5c>)
 8009580:	2201      	movs	r2, #1
 8009582:	498a      	ldr	r1, [pc, #552]	; (80097ac <cppLoop+0x1b64>)
 8009584:	488a      	ldr	r0, [pc, #552]	; (80097b0 <cppLoop+0x1b68>)
 8009586:	f7f8 f969 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800958a:	2300      	movs	r3, #0
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4b86      	ldr	r3, [pc, #536]	; (80097a8 <cppLoop+0x1b60>)
 8009590:	2201      	movs	r2, #1
 8009592:	4988      	ldr	r1, [pc, #544]	; (80097b4 <cppLoop+0x1b6c>)
 8009594:	4886      	ldr	r0, [pc, #536]	; (80097b0 <cppLoop+0x1b68>)
 8009596:	f7f8 f961 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800959a:	4b82      	ldr	r3, [pc, #520]	; (80097a4 <cppLoop+0x1b5c>)
 800959c:	edd3 7a00 	vldr	s15, [r3]
 80095a0:	4b81      	ldr	r3, [pc, #516]	; (80097a8 <cppLoop+0x1b60>)
 80095a2:	ed93 7a00 	vldr	s14, [r3]
 80095a6:	eef0 0a47 	vmov.f32	s1, s14
 80095aa:	eeb0 0a67 	vmov.f32	s0, s15
 80095ae:	4882      	ldr	r0, [pc, #520]	; (80097b8 <cppLoop+0x1b70>)
 80095b0:	f7fa fc8b 	bl	8003eca <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 80095b4:	2200      	movs	r2, #0
 80095b6:	f04f 31ff 	mov.w	r1, #4294967295
 80095ba:	4878      	ldr	r0, [pc, #480]	; (800979c <cppLoop+0x1b54>)
 80095bc:	f7f8 fe86 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80095c0:	e3b5      	b.n	8009d2e <cppLoop+0x20e6>

	case 6:
		led.fullColor('W');
 80095c2:	2157      	movs	r1, #87	; 0x57
 80095c4:	4875      	ldr	r0, [pc, #468]	; (800979c <cppLoop+0x1b54>)
 80095c6:	f7f8 fdc5 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 80095ca:	f7f7 fd69 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095ce:	2100      	movs	r1, #0
 80095d0:	2000      	movs	r0, #0
 80095d2:	f7f7 fd75 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 80095d6:	4878      	ldr	r0, [pc, #480]	; (80097b8 <cppLoop+0x1b70>)
 80095d8:	f7fa fccf 	bl	8003f7a <_ZN9LineTrace10getMaxAcc2Ev>
 80095dc:	ee10 3a10 	vmov	r3, s0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7f6 ffc9 	bl	8000578 <__aeabi_f2d>
 80095e6:	4603      	mov	r3, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	461a      	mov	r2, r3
 80095ec:	4623      	mov	r3, r4
 80095ee:	4873      	ldr	r0, [pc, #460]	; (80097bc <cppLoop+0x1b74>)
 80095f0:	f7f7 fd90 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095f4:	2101      	movs	r1, #1
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7f7 fd62 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80095fc:	486e      	ldr	r0, [pc, #440]	; (80097b8 <cppLoop+0x1b70>)
 80095fe:	f7fa fcaa 	bl	8003f56 <_ZN9LineTrace10getMaxDec2Ev>
 8009602:	ee10 3a10 	vmov	r3, s0
 8009606:	4618      	mov	r0, r3
 8009608:	f7f6 ffb6 	bl	8000578 <__aeabi_f2d>
 800960c:	4603      	mov	r3, r0
 800960e:	460c      	mov	r4, r1
 8009610:	461a      	mov	r2, r3
 8009612:	4623      	mov	r3, r4
 8009614:	486a      	ldr	r0, [pc, #424]	; (80097c0 <cppLoop+0x1b78>)
 8009616:	f7f7 fd7d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800961a:	485f      	ldr	r0, [pc, #380]	; (8009798 <cppLoop+0x1b50>)
 800961c:	f7f8 fd36 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009620:	4603      	mov	r3, r0
 8009622:	2b04      	cmp	r3, #4
 8009624:	bf0c      	ite	eq
 8009626:	2301      	moveq	r3, #1
 8009628:	2300      	movne	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d021      	beq.n	8009674 <cppLoop+0x1a2c>
			led.LR(-1, 1);
 8009630:	2201      	movs	r2, #1
 8009632:	f04f 31ff 	mov.w	r1, #4294967295
 8009636:	4859      	ldr	r0, [pc, #356]	; (800979c <cppLoop+0x1b54>)
 8009638:	f7f8 fe48 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800963c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009640:	f000 fcb6 	bl	8009fb0 <HAL_Delay>

			selector_acc2++;
 8009644:	4b5f      	ldr	r3, [pc, #380]	; (80097c4 <cppLoop+0x1b7c>)
 8009646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800964a:	b29b      	uxth	r3, r3
 800964c:	3301      	adds	r3, #1
 800964e:	b29b      	uxth	r3, r3
 8009650:	b21a      	sxth	r2, r3
 8009652:	4b5c      	ldr	r3, [pc, #368]	; (80097c4 <cppLoop+0x1b7c>)
 8009654:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8009656:	4b5b      	ldr	r3, [pc, #364]	; (80097c4 <cppLoop+0x1b7c>)
 8009658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800965c:	2b01      	cmp	r3, #1
 800965e:	dd02      	ble.n	8009666 <cppLoop+0x1a1e>
 8009660:	4b58      	ldr	r3, [pc, #352]	; (80097c4 <cppLoop+0x1b7c>)
 8009662:	2200      	movs	r2, #0
 8009664:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009666:	2200      	movs	r2, #0
 8009668:	f04f 31ff 	mov.w	r1, #4294967295
 800966c:	484b      	ldr	r0, [pc, #300]	; (800979c <cppLoop+0x1b54>)
 800966e:	f7f8 fe2d 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009672:	e35e      	b.n	8009d32 <cppLoop+0x20ea>
		else if(joy_stick.getValue() == JOY_R){
 8009674:	4848      	ldr	r0, [pc, #288]	; (8009798 <cppLoop+0x1b50>)
 8009676:	f7f8 fd09 	bl	800208c <_ZN8JoyStick8getValueEv>
 800967a:	4603      	mov	r3, r0
 800967c:	2b10      	cmp	r3, #16
 800967e:	bf0c      	ite	eq
 8009680:	2301      	moveq	r3, #1
 8009682:	2300      	movne	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d03b      	beq.n	8009702 <cppLoop+0x1aba>
			led.LR(-1, 1);
 800968a:	2201      	movs	r2, #1
 800968c:	f04f 31ff 	mov.w	r1, #4294967295
 8009690:	4842      	ldr	r0, [pc, #264]	; (800979c <cppLoop+0x1b54>)
 8009692:	f7f8 fe1b 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009696:	2064      	movs	r0, #100	; 0x64
 8009698:	f000 fc8a 	bl	8009fb0 <HAL_Delay>
			if(selector_acc2 == 0){
 800969c:	4b49      	ldr	r3, [pc, #292]	; (80097c4 <cppLoop+0x1b7c>)
 800969e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d113      	bne.n	80096ce <cppLoop+0x1a86>
				adj_acc2 = adj_acc2 + 0.1;
 80096a6:	4b48      	ldr	r3, [pc, #288]	; (80097c8 <cppLoop+0x1b80>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7f6 ff64 	bl	8000578 <__aeabi_f2d>
 80096b0:	a337      	add	r3, pc, #220	; (adr r3, 8009790 <cppLoop+0x1b48>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 fe01 	bl	80002bc <__adddf3>
 80096ba:	4603      	mov	r3, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	4618      	mov	r0, r3
 80096c0:	4621      	mov	r1, r4
 80096c2:	f7f7 faa9 	bl	8000c18 <__aeabi_d2f>
 80096c6:	4602      	mov	r2, r0
 80096c8:	4b3f      	ldr	r3, [pc, #252]	; (80097c8 <cppLoop+0x1b80>)
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	e012      	b.n	80096f4 <cppLoop+0x1aac>
				adj_dec2 = adj_dec2 + 0.1;
 80096ce:	4b3f      	ldr	r3, [pc, #252]	; (80097cc <cppLoop+0x1b84>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f6 ff50 	bl	8000578 <__aeabi_f2d>
 80096d8:	a32d      	add	r3, pc, #180	; (adr r3, 8009790 <cppLoop+0x1b48>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f7f6 fded 	bl	80002bc <__adddf3>
 80096e2:	4603      	mov	r3, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	4618      	mov	r0, r3
 80096e8:	4621      	mov	r1, r4
 80096ea:	f7f7 fa95 	bl	8000c18 <__aeabi_d2f>
 80096ee:	4602      	mov	r2, r0
 80096f0:	4b36      	ldr	r3, [pc, #216]	; (80097cc <cppLoop+0x1b84>)
 80096f2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80096f4:	2200      	movs	r2, #0
 80096f6:	f04f 31ff 	mov.w	r1, #4294967295
 80096fa:	4828      	ldr	r0, [pc, #160]	; (800979c <cppLoop+0x1b54>)
 80096fc:	f7f8 fde6 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009700:	e317      	b.n	8009d32 <cppLoop+0x20ea>
		else if(joy_stick.getValue() == JOY_L){
 8009702:	4825      	ldr	r0, [pc, #148]	; (8009798 <cppLoop+0x1b50>)
 8009704:	f7f8 fcc2 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009708:	4603      	mov	r3, r0
 800970a:	2b01      	cmp	r3, #1
 800970c:	bf0c      	ite	eq
 800970e:	2301      	moveq	r3, #1
 8009710:	2300      	movne	r3, #0
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d05b      	beq.n	80097d0 <cppLoop+0x1b88>
			led.LR(-1, 1);
 8009718:	2201      	movs	r2, #1
 800971a:	f04f 31ff 	mov.w	r1, #4294967295
 800971e:	481f      	ldr	r0, [pc, #124]	; (800979c <cppLoop+0x1b54>)
 8009720:	f7f8 fdd4 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009724:	2064      	movs	r0, #100	; 0x64
 8009726:	f000 fc43 	bl	8009fb0 <HAL_Delay>
			if(selector_acc2 == 0){
 800972a:	4b26      	ldr	r3, [pc, #152]	; (80097c4 <cppLoop+0x1b7c>)
 800972c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d113      	bne.n	800975c <cppLoop+0x1b14>
				adj_acc2 = adj_acc2 - 0.1;
 8009734:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <cppLoop+0x1b80>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7f6 ff1d 	bl	8000578 <__aeabi_f2d>
 800973e:	a314      	add	r3, pc, #80	; (adr r3, 8009790 <cppLoop+0x1b48>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 fdb8 	bl	80002b8 <__aeabi_dsub>
 8009748:	4603      	mov	r3, r0
 800974a:	460c      	mov	r4, r1
 800974c:	4618      	mov	r0, r3
 800974e:	4621      	mov	r1, r4
 8009750:	f7f7 fa62 	bl	8000c18 <__aeabi_d2f>
 8009754:	4602      	mov	r2, r0
 8009756:	4b1c      	ldr	r3, [pc, #112]	; (80097c8 <cppLoop+0x1b80>)
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	e012      	b.n	8009782 <cppLoop+0x1b3a>
				adj_dec2 = adj_dec2 - 0.1;
 800975c:	4b1b      	ldr	r3, [pc, #108]	; (80097cc <cppLoop+0x1b84>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	f7f6 ff09 	bl	8000578 <__aeabi_f2d>
 8009766:	a30a      	add	r3, pc, #40	; (adr r3, 8009790 <cppLoop+0x1b48>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 fda4 	bl	80002b8 <__aeabi_dsub>
 8009770:	4603      	mov	r3, r0
 8009772:	460c      	mov	r4, r1
 8009774:	4618      	mov	r0, r3
 8009776:	4621      	mov	r1, r4
 8009778:	f7f7 fa4e 	bl	8000c18 <__aeabi_d2f>
 800977c:	4602      	mov	r2, r0
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <cppLoop+0x1b84>)
 8009780:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009782:	2200      	movs	r2, #0
 8009784:	f04f 31ff 	mov.w	r1, #4294967295
 8009788:	4804      	ldr	r0, [pc, #16]	; (800979c <cppLoop+0x1b54>)
 800978a:	f7f8 fd9f 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800978e:	e2d0      	b.n	8009d32 <cppLoop+0x20ea>
 8009790:	9999999a 	.word	0x9999999a
 8009794:	3fb99999 	.word	0x3fb99999
 8009798:	2000054c 	.word	0x2000054c
 800979c:	20000558 	.word	0x20000558
 80097a0:	2004524c 	.word	0x2004524c
 80097a4:	200452ac 	.word	0x200452ac
 80097a8:	200452b4 	.word	0x200452b4
 80097ac:	08019140 	.word	0x08019140
 80097b0:	08019048 	.word	0x08019048
 80097b4:	08019148 	.word	0x08019148
 80097b8:	200209d4 	.word	0x200209d4
 80097bc:	08019150 	.word	0x08019150
 80097c0:	0801915c 	.word	0x0801915c
 80097c4:	2004524e 	.word	0x2004524e
 80097c8:	200452bc 	.word	0x200452bc
 80097cc:	200452c4 	.word	0x200452c4
		else if(joy_stick.getValue() == JOY_C){
 80097d0:	48c6      	ldr	r0, [pc, #792]	; (8009aec <cppLoop+0x1ea4>)
 80097d2:	f7f8 fc5b 	bl	800208c <_ZN8JoyStick8getValueEv>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b02      	cmp	r3, #2
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 82a5 	beq.w	8009d32 <cppLoop+0x20ea>
			led.LR(-1, 1);
 80097e8:	2201      	movs	r2, #1
 80097ea:	f04f 31ff 	mov.w	r1, #4294967295
 80097ee:	48c0      	ldr	r0, [pc, #768]	; (8009af0 <cppLoop+0x1ea8>)
 80097f0:	f7f8 fd6c 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80097f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80097f8:	f000 fbda 	bl	8009fb0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80097fc:	2300      	movs	r3, #0
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	4bbc      	ldr	r3, [pc, #752]	; (8009af4 <cppLoop+0x1eac>)
 8009802:	2201      	movs	r2, #1
 8009804:	49bc      	ldr	r1, [pc, #752]	; (8009af8 <cppLoop+0x1eb0>)
 8009806:	48bd      	ldr	r0, [pc, #756]	; (8009afc <cppLoop+0x1eb4>)
 8009808:	f7f8 f828 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800980c:	2300      	movs	r3, #0
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	4bbb      	ldr	r3, [pc, #748]	; (8009b00 <cppLoop+0x1eb8>)
 8009812:	2201      	movs	r2, #1
 8009814:	49bb      	ldr	r1, [pc, #748]	; (8009b04 <cppLoop+0x1ebc>)
 8009816:	48b9      	ldr	r0, [pc, #740]	; (8009afc <cppLoop+0x1eb4>)
 8009818:	f7f8 f820 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800981c:	4bb5      	ldr	r3, [pc, #724]	; (8009af4 <cppLoop+0x1eac>)
 800981e:	edd3 7a00 	vldr	s15, [r3]
 8009822:	4bb7      	ldr	r3, [pc, #732]	; (8009b00 <cppLoop+0x1eb8>)
 8009824:	ed93 7a00 	vldr	s14, [r3]
 8009828:	eef0 0a47 	vmov.f32	s1, s14
 800982c:	eeb0 0a67 	vmov.f32	s0, s15
 8009830:	48b5      	ldr	r0, [pc, #724]	; (8009b08 <cppLoop+0x1ec0>)
 8009832:	f7fa fb64 	bl	8003efe <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009836:	2200      	movs	r2, #0
 8009838:	f04f 31ff 	mov.w	r1, #4294967295
 800983c:	48ac      	ldr	r0, [pc, #688]	; (8009af0 <cppLoop+0x1ea8>)
 800983e:	f7f8 fd45 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009842:	e276      	b.n	8009d32 <cppLoop+0x20ea>

	case 9:
		break;

	case 10:
		led.fullColor('~');
 8009844:	217e      	movs	r1, #126	; 0x7e
 8009846:	48aa      	ldr	r0, [pc, #680]	; (8009af0 <cppLoop+0x1ea8>)
 8009848:	f7f8 fc84 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800984c:	f7f7 fc28 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009850:	2100      	movs	r1, #0
 8009852:	2000      	movs	r0, #0
 8009854:	f7f7 fc34 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009858:	48ac      	ldr	r0, [pc, #688]	; (8009b0c <cppLoop+0x1ec4>)
 800985a:	f7f7 fc5b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800985e:	2101      	movs	r1, #1
 8009860:	2000      	movs	r0, #0
 8009862:	f7f7 fc2d 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009866:	48aa      	ldr	r0, [pc, #680]	; (8009b10 <cppLoop+0x1ec8>)
 8009868:	f7f7 fc54 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800986c:	489f      	ldr	r0, [pc, #636]	; (8009aec <cppLoop+0x1ea4>)
 800986e:	f7f8 fc0d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009872:	4603      	mov	r3, r0
 8009874:	2b02      	cmp	r3, #2
 8009876:	bf0c      	ite	eq
 8009878:	2301      	moveq	r3, #1
 800987a:	2300      	movne	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 8259 	beq.w	8009d36 <cppLoop+0x20ee>
			led.LR(-1, 1);
 8009884:	2201      	movs	r2, #1
 8009886:	f04f 31ff 	mov.w	r1, #4294967295
 800988a:	4899      	ldr	r0, [pc, #612]	; (8009af0 <cppLoop+0x1ea8>)
 800988c:	f7f8 fd1e 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009894:	f000 fb8c 	bl	8009fb0 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009898:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8009b14 <cppLoop+0x1ecc>
 800989c:	489a      	ldr	r0, [pc, #616]	; (8009b08 <cppLoop+0x1ec0>)
 800989e:	f7fa fa65 	bl	8003d6c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80098a2:	4899      	ldr	r0, [pc, #612]	; (8009b08 <cppLoop+0x1ec0>)
 80098a4:	f7fa fc66 	bl	8004174 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80098a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098ac:	f000 fb80 	bl	8009fb0 <HAL_Delay>

			led.fullColor('R');
 80098b0:	2152      	movs	r1, #82	; 0x52
 80098b2:	488f      	ldr	r0, [pc, #572]	; (8009af0 <cppLoop+0x1ea8>)
 80098b4:	f7f8 fc4e 	bl	8002154 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80098b8:	4897      	ldr	r0, [pc, #604]	; (8009b18 <cppLoop+0x1ed0>)
 80098ba:	f7f7 fee7 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80098be:	f242 7010 	movw	r0, #10000	; 0x2710
 80098c2:	f000 fb75 	bl	8009fb0 <HAL_Delay>

			line_trace.stop();
 80098c6:	4890      	ldr	r0, [pc, #576]	; (8009b08 <cppLoop+0x1ec0>)
 80098c8:	f7fa fe0c 	bl	80044e4 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80098cc:	4993      	ldr	r1, [pc, #588]	; (8009b1c <cppLoop+0x1ed4>)
 80098ce:	4894      	ldr	r0, [pc, #592]	; (8009b20 <cppLoop+0x1ed8>)
 80098d0:	f7f7 ff4f 	bl	8001772 <user_fopen>
			float d = encoder.getDistance();
 80098d4:	4890      	ldr	r0, [pc, #576]	; (8009b18 <cppLoop+0x1ed0>)
 80098d6:	f7f7 fe9d 	bl	8001614 <_ZN7Encoder11getDistanceEv>
 80098da:	eef0 7a40 	vmov.f32	s15, s0
 80098de:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	2201      	movs	r2, #1
 80098e6:	4619      	mov	r1, r3
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7f7 ff65 	bl	80017b8 <sd_write_float>
			user_fclose();
 80098ee:	f7f7 ff53 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 80098f2:	2200      	movs	r2, #0
 80098f4:	f04f 31ff 	mov.w	r1, #4294967295
 80098f8:	487d      	ldr	r0, [pc, #500]	; (8009af0 <cppLoop+0x1ea8>)
 80098fa:	f7f8 fce7 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 80098fe:	e21a      	b.n	8009d36 <cppLoop+0x20ee>

	case 11:
		led.fullColor('~');
 8009900:	217e      	movs	r1, #126	; 0x7e
 8009902:	487b      	ldr	r0, [pc, #492]	; (8009af0 <cppLoop+0x1ea8>)
 8009904:	f7f8 fc26 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009908:	f7f7 fbca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800990c:	2100      	movs	r1, #0
 800990e:	2000      	movs	r0, #0
 8009910:	f7f7 fbd6 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009914:	4883      	ldr	r0, [pc, #524]	; (8009b24 <cppLoop+0x1edc>)
 8009916:	f7f7 fbfd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800991a:	2101      	movs	r1, #1
 800991c:	2000      	movs	r0, #0
 800991e:	f7f7 fbcf 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009922:	4881      	ldr	r0, [pc, #516]	; (8009b28 <cppLoop+0x1ee0>)
 8009924:	f7f7 fbf6 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009928:	4870      	ldr	r0, [pc, #448]	; (8009aec <cppLoop+0x1ea4>)
 800992a:	f7f8 fbaf 	bl	800208c <_ZN8JoyStick8getValueEv>
 800992e:	4603      	mov	r3, r0
 8009930:	2b02      	cmp	r3, #2
 8009932:	bf0c      	ite	eq
 8009934:	2301      	moveq	r3, #1
 8009936:	2300      	movne	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 81fd 	beq.w	8009d3a <cppLoop+0x20f2>
			HAL_Delay(500);
 8009940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009944:	f000 fb34 	bl	8009fb0 <HAL_Delay>
			led.LR(-1, 1);
 8009948:	2201      	movs	r2, #1
 800994a:	f04f 31ff 	mov.w	r1, #4294967295
 800994e:	4868      	ldr	r0, [pc, #416]	; (8009af0 <cppLoop+0x1ea8>)
 8009950:	f7f8 fcbc 	bl	80022cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009954:	2102      	movs	r1, #2
 8009956:	486c      	ldr	r0, [pc, #432]	; (8009b08 <cppLoop+0x1ec0>)
 8009958:	f7fa fbfa 	bl	8004150 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800995c:	4b73      	ldr	r3, [pc, #460]	; (8009b2c <cppLoop+0x1ee4>)
 800995e:	edd3 7a00 	vldr	s15, [r3]
 8009962:	eeb0 0a67 	vmov.f32	s0, s15
 8009966:	4868      	ldr	r0, [pc, #416]	; (8009b08 <cppLoop+0x1ec0>)
 8009968:	f7fa fa0f 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800996c:	4b6f      	ldr	r3, [pc, #444]	; (8009b2c <cppLoop+0x1ee4>)
 800996e:	edd3 7a00 	vldr	s15, [r3]
 8009972:	eeb0 0a67 	vmov.f32	s0, s15
 8009976:	4864      	ldr	r0, [pc, #400]	; (8009b08 <cppLoop+0x1ec0>)
 8009978:	f7fa fa17 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800997c:	4b6b      	ldr	r3, [pc, #428]	; (8009b2c <cppLoop+0x1ee4>)
 800997e:	edd3 7a00 	vldr	s15, [r3]
 8009982:	eeb0 0a67 	vmov.f32	s0, s15
 8009986:	4860      	ldr	r0, [pc, #384]	; (8009b08 <cppLoop+0x1ec0>)
 8009988:	f7fa fa2f 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800998c:	485e      	ldr	r0, [pc, #376]	; (8009b08 <cppLoop+0x1ec0>)
 800998e:	f7fa fef5 	bl	800477c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009992:	2200      	movs	r2, #0
 8009994:	f04f 31ff 	mov.w	r1, #4294967295
 8009998:	4855      	ldr	r0, [pc, #340]	; (8009af0 <cppLoop+0x1ea8>)
 800999a:	f7f8 fc97 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 800999e:	e1cc      	b.n	8009d3a <cppLoop+0x20f2>

	case 12:
		led.fullColor('~');
 80099a0:	217e      	movs	r1, #126	; 0x7e
 80099a2:	4853      	ldr	r0, [pc, #332]	; (8009af0 <cppLoop+0x1ea8>)
 80099a4:	f7f8 fbd6 	bl	8002154 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		lcd_clear();
 80099a8:	f7f7 fb7a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80099ac:	2100      	movs	r1, #0
 80099ae:	2000      	movs	r0, #0
 80099b0:	f7f7 fb86 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 80099b4:	485e      	ldr	r0, [pc, #376]	; (8009b30 <cppLoop+0x1ee8>)
 80099b6:	f7f7 fbad 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80099ba:	2101      	movs	r1, #1
 80099bc:	2000      	movs	r0, #0
 80099be:	f7f7 fb7f 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80099c2:	485c      	ldr	r0, [pc, #368]	; (8009b34 <cppLoop+0x1eec>)
 80099c4:	f7f7 fba6 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80099c8:	4848      	ldr	r0, [pc, #288]	; (8009aec <cppLoop+0x1ea4>)
 80099ca:	f7f8 fb5f 	bl	800208c <_ZN8JoyStick8getValueEv>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 81af 	beq.w	8009d3e <cppLoop+0x20f6>
			led.fullColor('R');
 80099e0:	2152      	movs	r1, #82	; 0x52
 80099e2:	4843      	ldr	r0, [pc, #268]	; (8009af0 <cppLoop+0x1ea8>)
 80099e4:	f7f8 fbb6 	bl	8002154 <_ZN3LED9fullColorEc>
			logger.resetLogsTim1();
 80099e8:	4853      	ldr	r0, [pc, #332]	; (8009b38 <cppLoop+0x1ef0>)
 80099ea:	f7fb fa0e 	bl	8004e0a <_ZN6Logger13resetLogsTim1Ev>
			logger.resetLogsTim2();
 80099ee:	4852      	ldr	r0, [pc, #328]	; (8009b38 <cppLoop+0x1ef0>)
 80099f0:	f7fb fa33 	bl	8004e5a <_ZN6Logger13resetLogsTim2Ev>
			logger.start();
 80099f4:	4850      	ldr	r0, [pc, #320]	; (8009b38 <cppLoop+0x1ef0>)
 80099f6:	f7fb fa7a 	bl	8004eee <_ZN6Logger5startEv>

			HAL_Delay(1000);
 80099fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099fe:	f000 fad7 	bl	8009fb0 <HAL_Delay>

			logger.stop();
 8009a02:	484d      	ldr	r0, [pc, #308]	; (8009b38 <cppLoop+0x1ef0>)
 8009a04:	f7fb fa92 	bl	8004f2c <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009a08:	4a4c      	ldr	r2, [pc, #304]	; (8009b3c <cppLoop+0x1ef4>)
 8009a0a:	494d      	ldr	r1, [pc, #308]	; (8009b40 <cppLoop+0x1ef8>)
 8009a0c:	484a      	ldr	r0, [pc, #296]	; (8009b38 <cppLoop+0x1ef0>)
 8009a0e:	f7fb f926 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009a12:	4a4c      	ldr	r2, [pc, #304]	; (8009b44 <cppLoop+0x1efc>)
 8009a14:	494a      	ldr	r1, [pc, #296]	; (8009b40 <cppLoop+0x1ef8>)
 8009a16:	4848      	ldr	r0, [pc, #288]	; (8009b38 <cppLoop+0x1ef0>)
 8009a18:	f7fb f935 	bl	8004c86 <_ZN6Logger9saveLogs2EPKcS1_>
			led.fullColor('~');
 8009a1c:	217e      	movs	r1, #126	; 0x7e
 8009a1e:	4834      	ldr	r0, [pc, #208]	; (8009af0 <cppLoop+0x1ea8>)
 8009a20:	f7f8 fb98 	bl	8002154 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		break;
 8009a24:	e18b      	b.n	8009d3e <cppLoop+0x20f6>

	case 13:
		led.fullColor('~');
 8009a26:	217e      	movs	r1, #126	; 0x7e
 8009a28:	4831      	ldr	r0, [pc, #196]	; (8009af0 <cppLoop+0x1ea8>)
 8009a2a:	f7f8 fb93 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009a2e:	f7f7 fb37 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009a32:	2100      	movs	r1, #0
 8009a34:	2000      	movs	r0, #0
 8009a36:	f7f7 fb43 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009a3a:	4843      	ldr	r0, [pc, #268]	; (8009b48 <cppLoop+0x1f00>)
 8009a3c:	f7f7 fb6a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009a40:	2101      	movs	r1, #1
 8009a42:	2000      	movs	r0, #0
 8009a44:	f7f7 fb3c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009a48:	4840      	ldr	r0, [pc, #256]	; (8009b4c <cppLoop+0x1f04>)
 8009a4a:	f7f7 fb63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009a4e:	4827      	ldr	r0, [pc, #156]	; (8009aec <cppLoop+0x1ea4>)
 8009a50:	f7f8 fb1c 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	bf0c      	ite	eq
 8009a5a:	2301      	moveq	r3, #1
 8009a5c:	2300      	movne	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 816e 	beq.w	8009d42 <cppLoop+0x20fa>
			HAL_Delay(1500);
 8009a66:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009a6a:	f000 faa1 	bl	8009fb0 <HAL_Delay>
			led.LR(-1, 1);
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f04f 31ff 	mov.w	r1, #4294967295
 8009a74:	481e      	ldr	r0, [pc, #120]	; (8009af0 <cppLoop+0x1ea8>)
 8009a76:	f7f8 fc29 	bl	80022cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009a7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009a7e:	f000 fa97 	bl	8009fb0 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009a82:	eddf 1a33 	vldr	s3, [pc, #204]	; 8009b50 <cppLoop+0x1f08>
 8009a86:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8009b50 <cppLoop+0x1f08>
 8009a8a:	eddf 0a31 	vldr	s1, [pc, #196]	; 8009b50 <cppLoop+0x1f08>
 8009a8e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009b50 <cppLoop+0x1f08>
 8009a92:	4830      	ldr	r0, [pc, #192]	; (8009b54 <cppLoop+0x1f0c>)
 8009a94:	f7f7 fbdc 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a9c:	f000 fa88 	bl	8009fb0 <HAL_Delay>

			logger.start();
 8009aa0:	4825      	ldr	r0, [pc, #148]	; (8009b38 <cppLoop+0x1ef0>)
 8009aa2:	f7fb fa24 	bl	8004eee <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009aa6:	482c      	ldr	r0, [pc, #176]	; (8009b58 <cppLoop+0x1f10>)
 8009aa8:	f7fc fa03 	bl	8005eb2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8009aac:	eddf 0a19 	vldr	s1, [pc, #100]	; 8009b14 <cppLoop+0x1ecc>
 8009ab0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009ab4:	4828      	ldr	r0, [pc, #160]	; (8009b58 <cppLoop+0x1f10>)
 8009ab6:	f7fc f98f 	bl	8005dd8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009abe:	f000 fa77 	bl	8009fb0 <HAL_Delay>

			logger.stop();
 8009ac2:	481d      	ldr	r0, [pc, #116]	; (8009b38 <cppLoop+0x1ef0>)
 8009ac4:	f7fb fa32 	bl	8004f2c <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009ac8:	4823      	ldr	r0, [pc, #140]	; (8009b58 <cppLoop+0x1f10>)
 8009aca:	f7fc fa05 	bl	8005ed8 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009ace:	4821      	ldr	r0, [pc, #132]	; (8009b54 <cppLoop+0x1f0c>)
 8009ad0:	f7f7 fc58 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009ad4:	4a21      	ldr	r2, [pc, #132]	; (8009b5c <cppLoop+0x1f14>)
 8009ad6:	4922      	ldr	r1, [pc, #136]	; (8009b60 <cppLoop+0x1f18>)
 8009ad8:	4817      	ldr	r0, [pc, #92]	; (8009b38 <cppLoop+0x1ef0>)
 8009ada:	f7fb f8c0 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ae4:	4802      	ldr	r0, [pc, #8]	; (8009af0 <cppLoop+0x1ea8>)
 8009ae6:	f7f8 fbf1 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 8009aea:	e12a      	b.n	8009d42 <cppLoop+0x20fa>
 8009aec:	2000054c 	.word	0x2000054c
 8009af0:	20000558 	.word	0x20000558
 8009af4:	200452bc 	.word	0x200452bc
 8009af8:	08019168 	.word	0x08019168
 8009afc:	08019048 	.word	0x08019048
 8009b00:	200452c4 	.word	0x200452c4
 8009b04:	08019174 	.word	0x08019174
 8009b08:	200209d4 	.word	0x200209d4
 8009b0c:	08019180 	.word	0x08019180
 8009b10:	08019188 	.word	0x08019188
 8009b14:	00000000 	.word	0x00000000
 8009b18:	20020928 	.word	0x20020928
 8009b1c:	08019194 	.word	0x08019194
 8009b20:	0801919c 	.word	0x0801919c
 8009b24:	080191a8 	.word	0x080191a8
 8009b28:	080191b4 	.word	0x080191b4
 8009b2c:	20045294 	.word	0x20045294
 8009b30:	080191c0 	.word	0x080191c0
 8009b34:	080191c4 	.word	0x080191c4
 8009b38:	2000057c 	.word	0x2000057c
 8009b3c:	080190a0 	.word	0x080190a0
 8009b40:	080190ac 	.word	0x080190ac
 8009b44:	080190b8 	.word	0x080190b8
 8009b48:	080191cc 	.word	0x080191cc
 8009b4c:	080191d0 	.word	0x080191d0
 8009b50:	3ea3d70a 	.word	0x3ea3d70a
 8009b54:	200209d0 	.word	0x200209d0
 8009b58:	20020950 	.word	0x20020950
 8009b5c:	080191dc 	.word	0x080191dc
 8009b60:	080191e8 	.word	0x080191e8

	case 14:

		led.fullColor('W');
 8009b64:	2157      	movs	r1, #87	; 0x57
 8009b66:	487d      	ldr	r0, [pc, #500]	; (8009d5c <cppLoop+0x2114>)
 8009b68:	f7f8 faf4 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009b6c:	f7f7 fa98 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009b70:	2100      	movs	r1, #0
 8009b72:	2000      	movs	r0, #0
 8009b74:	f7f7 faa4 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009b78:	4879      	ldr	r0, [pc, #484]	; (8009d60 <cppLoop+0x2118>)
 8009b7a:	f7f7 facb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009b7e:	2101      	movs	r1, #1
 8009b80:	2000      	movs	r0, #0
 8009b82:	f7f7 fa9d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009b86:	4b77      	ldr	r3, [pc, #476]	; (8009d64 <cppLoop+0x211c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f6 fcf4 	bl	8000578 <__aeabi_f2d>
 8009b90:	4603      	mov	r3, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	461a      	mov	r2, r3
 8009b96:	4623      	mov	r3, r4
 8009b98:	4873      	ldr	r0, [pc, #460]	; (8009d68 <cppLoop+0x2120>)
 8009b9a:	f7f7 fabb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009b9e:	4873      	ldr	r0, [pc, #460]	; (8009d6c <cppLoop+0x2124>)
 8009ba0:	f7f8 fa74 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	bf0c      	ite	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	2300      	movne	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80c8 	beq.w	8009d46 <cppLoop+0x20fe>
			HAL_Delay(500);
 8009bb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bba:	f000 f9f9 	bl	8009fb0 <HAL_Delay>

			led.LR(1, -1);
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	4865      	ldr	r0, [pc, #404]	; (8009d5c <cppLoop+0x2114>)
 8009bc6:	f7f8 fb81 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009bca:	2102      	movs	r1, #2
 8009bcc:	4868      	ldr	r0, [pc, #416]	; (8009d70 <cppLoop+0x2128>)
 8009bce:	f7fa fabf 	bl	8004150 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009bd2:	4b68      	ldr	r3, [pc, #416]	; (8009d74 <cppLoop+0x212c>)
 8009bd4:	edd3 7a00 	vldr	s15, [r3]
 8009bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bdc:	4864      	ldr	r0, [pc, #400]	; (8009d70 <cppLoop+0x2128>)
 8009bde:	f7fa f8d4 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009be2:	4b60      	ldr	r3, [pc, #384]	; (8009d64 <cppLoop+0x211c>)
 8009be4:	edd3 7a00 	vldr	s15, [r3]
 8009be8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bec:	4860      	ldr	r0, [pc, #384]	; (8009d70 <cppLoop+0x2128>)
 8009bee:	f7fa f8dc 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009bf2:	4b5c      	ldr	r3, [pc, #368]	; (8009d64 <cppLoop+0x211c>)
 8009bf4:	edd3 7a00 	vldr	s15, [r3]
 8009bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfc:	485c      	ldr	r0, [pc, #368]	; (8009d70 <cppLoop+0x2128>)
 8009bfe:	f7fa f8f4 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009c02:	485b      	ldr	r0, [pc, #364]	; (8009d70 <cppLoop+0x2128>)
 8009c04:	f7fa fdba 	bl	800477c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c0c:	f000 f9d0 	bl	8009fb0 <HAL_Delay>

			line_trace.running();
 8009c10:	4857      	ldr	r0, [pc, #348]	; (8009d70 <cppLoop+0x2128>)
 8009c12:	f7fa faed 	bl	80041f0 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009c16:	4858      	ldr	r0, [pc, #352]	; (8009d78 <cppLoop+0x2130>)
 8009c18:	f7fb f988 	bl	8004f2c <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009c1c:	4a57      	ldr	r2, [pc, #348]	; (8009d7c <cppLoop+0x2134>)
 8009c1e:	4958      	ldr	r1, [pc, #352]	; (8009d80 <cppLoop+0x2138>)
 8009c20:	4855      	ldr	r0, [pc, #340]	; (8009d78 <cppLoop+0x2130>)
 8009c22:	f7fb f81c 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009c26:	4a57      	ldr	r2, [pc, #348]	; (8009d84 <cppLoop+0x213c>)
 8009c28:	4955      	ldr	r1, [pc, #340]	; (8009d80 <cppLoop+0x2138>)
 8009c2a:	4853      	ldr	r0, [pc, #332]	; (8009d78 <cppLoop+0x2130>)
 8009c2c:	f7fb f82b 	bl	8004c86 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8009c30:	f04f 32ff 	mov.w	r2, #4294967295
 8009c34:	2100      	movs	r1, #0
 8009c36:	4849      	ldr	r0, [pc, #292]	; (8009d5c <cppLoop+0x2114>)
 8009c38:	f7f8 fb48 	bl	80022cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009c3c:	e083      	b.n	8009d46 <cppLoop+0x20fe>

	case 15:
		led.fullColor('W');
 8009c3e:	2157      	movs	r1, #87	; 0x57
 8009c40:	4846      	ldr	r0, [pc, #280]	; (8009d5c <cppLoop+0x2114>)
 8009c42:	f7f8 fa87 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009c46:	f7f7 fa2b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f7f7 fa37 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009c52:	484d      	ldr	r0, [pc, #308]	; (8009d88 <cppLoop+0x2140>)
 8009c54:	f7f7 fa5e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009c58:	2101      	movs	r1, #1
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	f7f7 fa30 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009c60:	4b4a      	ldr	r3, [pc, #296]	; (8009d8c <cppLoop+0x2144>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7f6 fc87 	bl	8000578 <__aeabi_f2d>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4623      	mov	r3, r4
 8009c72:	483d      	ldr	r0, [pc, #244]	; (8009d68 <cppLoop+0x2120>)
 8009c74:	f7f7 fa4e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009c78:	483c      	ldr	r0, [pc, #240]	; (8009d6c <cppLoop+0x2124>)
 8009c7a:	f7f8 fa07 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	bf0c      	ite	eq
 8009c84:	2301      	moveq	r3, #1
 8009c86:	2300      	movne	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d05d      	beq.n	8009d4a <cppLoop+0x2102>
			HAL_Delay(500);
 8009c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c92:	f000 f98d 	bl	8009fb0 <HAL_Delay>

			led.LR(1, -1);
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	482f      	ldr	r0, [pc, #188]	; (8009d5c <cppLoop+0x2114>)
 8009c9e:	f7f8 fb15 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	4832      	ldr	r0, [pc, #200]	; (8009d70 <cppLoop+0x2128>)
 8009ca6:	f7fa fa53 	bl	8004150 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009caa:	4b39      	ldr	r3, [pc, #228]	; (8009d90 <cppLoop+0x2148>)
 8009cac:	edd3 7a00 	vldr	s15, [r3]
 8009cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb4:	482e      	ldr	r0, [pc, #184]	; (8009d70 <cppLoop+0x2128>)
 8009cb6:	f7fa f868 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009cba:	4b34      	ldr	r3, [pc, #208]	; (8009d8c <cppLoop+0x2144>)
 8009cbc:	edd3 7a00 	vldr	s15, [r3]
 8009cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8009cc4:	482a      	ldr	r0, [pc, #168]	; (8009d70 <cppLoop+0x2128>)
 8009cc6:	f7fa f870 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009cca:	4b31      	ldr	r3, [pc, #196]	; (8009d90 <cppLoop+0x2148>)
 8009ccc:	edd3 7a00 	vldr	s15, [r3]
 8009cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8009cd4:	4826      	ldr	r0, [pc, #152]	; (8009d70 <cppLoop+0x2128>)
 8009cd6:	f7fa f888 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009cda:	4825      	ldr	r0, [pc, #148]	; (8009d70 <cppLoop+0x2128>)
 8009cdc:	f7fa fd4e 	bl	800477c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ce4:	f000 f964 	bl	8009fb0 <HAL_Delay>

			line_trace.running();
 8009ce8:	4821      	ldr	r0, [pc, #132]	; (8009d70 <cppLoop+0x2128>)
 8009cea:	f7fa fa81 	bl	80041f0 <_ZN9LineTrace7runningEv>

			logger.stop();
 8009cee:	4822      	ldr	r0, [pc, #136]	; (8009d78 <cppLoop+0x2130>)
 8009cf0:	f7fb f91c 	bl	8004f2c <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009cf4:	4a21      	ldr	r2, [pc, #132]	; (8009d7c <cppLoop+0x2134>)
 8009cf6:	4922      	ldr	r1, [pc, #136]	; (8009d80 <cppLoop+0x2138>)
 8009cf8:	481f      	ldr	r0, [pc, #124]	; (8009d78 <cppLoop+0x2130>)
 8009cfa:	f7fa ffb0 	bl	8004c5e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009cfe:	4a21      	ldr	r2, [pc, #132]	; (8009d84 <cppLoop+0x213c>)
 8009d00:	491f      	ldr	r1, [pc, #124]	; (8009d80 <cppLoop+0x2138>)
 8009d02:	481d      	ldr	r0, [pc, #116]	; (8009d78 <cppLoop+0x2130>)
 8009d04:	f7fa ffbf 	bl	8004c86 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 8009d08:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4813      	ldr	r0, [pc, #76]	; (8009d5c <cppLoop+0x2114>)
 8009d10:	f7f8 fadc 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 8009d14:	e019      	b.n	8009d4a <cppLoop+0x2102>


	default:
		break;
 8009d16:	bf00      	nop
 8009d18:	e018      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d1a:	bf00      	nop
 8009d1c:	e016      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d1e:	bf00      	nop
 8009d20:	e014      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d22:	bf00      	nop
 8009d24:	e012      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d26:	bf00      	nop
 8009d28:	e010      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d2a:	bf00      	nop
 8009d2c:	e00e      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d2e:	bf00      	nop
 8009d30:	e00c      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d32:	bf00      	nop
 8009d34:	e00a      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d36:	bf00      	nop
 8009d38:	e008      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d3a:	bf00      	nop
 8009d3c:	e006      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d3e:	bf00      	nop
 8009d40:	e004      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d42:	bf00      	nop
 8009d44:	e002      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d46:	bf00      	nop
 8009d48:	e000      	b.n	8009d4c <cppLoop+0x2104>
		break;
 8009d4a:	bf00      	nop

	}

	HAL_Delay(30);
 8009d4c:	201e      	movs	r0, #30
 8009d4e:	f000 f92f 	bl	8009fb0 <HAL_Delay>

}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000558 	.word	0x20000558
 8009d60:	080191f4 	.word	0x080191f4
 8009d64:	20045294 	.word	0x20045294
 8009d68:	08019094 	.word	0x08019094
 8009d6c:	2000054c 	.word	0x2000054c
 8009d70:	200209d4 	.word	0x200209d4
 8009d74:	200452a4 	.word	0x200452a4
 8009d78:	2000057c 	.word	0x2000057c
 8009d7c:	080190a0 	.word	0x080190a0
 8009d80:	080190ac 	.word	0x080190ac
 8009d84:	080190b8 	.word	0x080190b8
 8009d88:	08019200 	.word	0x08019200
 8009d8c:	2004528c 	.word	0x2004528c
 8009d90:	2004529c 	.word	0x2004529c

08009d94 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b088      	sub	sp, #32
 8009d98:	af06      	add	r7, sp, #24
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d142      	bne.n	8009e2a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d13d      	bne.n	8009e2a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009dae:	4821      	ldr	r0, [pc, #132]	; (8009e34 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009db0:	f7f8 fac4 	bl	800233c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009db4:	4820      	ldr	r0, [pc, #128]	; (8009e38 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009db6:	f7fb fbdf 	bl	8005578 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009dba:	4820      	ldr	r0, [pc, #128]	; (8009e3c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009dbc:	f7f8 f95a 	bl	8002074 <_ZN8JoyStickC1Ev>
Motor motor;
 8009dc0:	481f      	ldr	r0, [pc, #124]	; (8009e40 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009dc2:	f7fb f8c4 	bl	8004f4e <_ZN5MotorC1Ev>
IMU imu;
 8009dc6:	481f      	ldr	r0, [pc, #124]	; (8009e44 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009dc8:	f7f7 ff60 	bl	8001c8c <_ZN3IMUC1Ev>
Logger logger;
 8009dcc:	481e      	ldr	r0, [pc, #120]	; (8009e48 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009dce:	f7fa fdc5 	bl	800495c <_ZN6LoggerC1Ev>
Encoder encoder;
 8009dd2:	481e      	ldr	r0, [pc, #120]	; (8009e4c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009dd4:	f7f7 fafa 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009dd8:	4b1a      	ldr	r3, [pc, #104]	; (8009e44 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009dda:	4a1c      	ldr	r2, [pc, #112]	; (8009e4c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009ddc:	4918      	ldr	r1, [pc, #96]	; (8009e40 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009dde:	481c      	ldr	r0, [pc, #112]	; (8009e50 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009de0:	f7fb fec4 	bl	8005b6c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009de4:	4b1a      	ldr	r3, [pc, #104]	; (8009e50 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009de6:	4a17      	ldr	r2, [pc, #92]	; (8009e44 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009de8:	4918      	ldr	r1, [pc, #96]	; (8009e4c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009dea:	481a      	ldr	r0, [pc, #104]	; (8009e54 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009dec:	f7fb f994 	bl	8005118 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009df0:	4819      	ldr	r0, [pc, #100]	; (8009e58 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009df2:	f7f7 f9ef 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009df6:	4b18      	ldr	r3, [pc, #96]	; (8009e58 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009df8:	9305      	str	r3, [sp, #20]
 8009dfa:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009e00:	9303      	str	r3, [sp, #12]
 8009e02:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009e04:	9302      	str	r3, [sp, #8]
 8009e06:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4b10      	ldr	r3, [pc, #64]	; (8009e50 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009e10:	4a08      	ldr	r2, [pc, #32]	; (8009e34 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009e12:	490b      	ldr	r1, [pc, #44]	; (8009e40 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009e14:	4811      	ldr	r0, [pc, #68]	; (8009e5c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009e16:	f7f8 fd6f 	bl	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009e1a:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009e1c:	490a      	ldr	r1, [pc, #40]	; (8009e48 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009e1e:	4810      	ldr	r0, [pc, #64]	; (8009e60 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009e20:	f7fb fcdc 	bl	80057dc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009e24:	480f      	ldr	r0, [pc, #60]	; (8009e64 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009e26:	f7fb fa37 	bl	8005298 <_ZN13PathFollowingC1Ev>
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000244 	.word	0x20000244
 8009e38:	2000053c 	.word	0x2000053c
 8009e3c:	2000054c 	.word	0x2000054c
 8009e40:	20000554 	.word	0x20000554
 8009e44:	20000568 	.word	0x20000568
 8009e48:	2000057c 	.word	0x2000057c
 8009e4c:	20020928 	.word	0x20020928
 8009e50:	20020950 	.word	0x20020950
 8009e54:	20020990 	.word	0x20020990
 8009e58:	200209d0 	.word	0x200209d0
 8009e5c:	200209d4 	.word	0x200209d4
 8009e60:	2002d914 	.word	0x2002d914
 8009e64:	2002db20 	.word	0x2002db20

08009e68 <_GLOBAL__sub_I_line_sensor>:
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e70:	2001      	movs	r0, #1
 8009e72:	f7ff ff8f 	bl	8009d94 <_Z41__static_initialization_and_destruction_0ii>
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009e7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009e7e:	e003      	b.n	8009e88 <LoopCopyDataInit>

08009e80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009e80:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009e82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009e84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009e86:	3104      	adds	r1, #4

08009e88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009e88:	480b      	ldr	r0, [pc, #44]	; (8009eb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009e8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009e8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009e90:	d3f6      	bcc.n	8009e80 <CopyDataInit>
  ldr  r2, =_sbss
 8009e92:	4a0b      	ldr	r2, [pc, #44]	; (8009ec0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009e94:	e002      	b.n	8009e9c <LoopFillZerobss>

08009e96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009e96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009e98:	f842 3b04 	str.w	r3, [r2], #4

08009e9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009e9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009ea0:	d3f9      	bcc.n	8009e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009ea2:	f7fd fda5 	bl	80079f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009ea6:	f00a fd95 	bl	80149d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009eaa:	f7fc f8bd 	bl	8006028 <main>
  bx  lr    
 8009eae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009eb0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009eb4:	08019620 	.word	0x08019620
  ldr  r0, =_sdata
 8009eb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ebc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009ec0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009ec4:	20049ca8 	.word	0x20049ca8

08009ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ec8:	e7fe      	b.n	8009ec8 <ADC_IRQHandler>
	...

08009ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <HAL_Init+0x40>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a0d      	ldr	r2, [pc, #52]	; (8009f0c <HAL_Init+0x40>)
 8009ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <HAL_Init+0x40>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <HAL_Init+0x40>)
 8009ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009ee8:	4b08      	ldr	r3, [pc, #32]	; (8009f0c <HAL_Init+0x40>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a07      	ldr	r2, [pc, #28]	; (8009f0c <HAL_Init+0x40>)
 8009eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ef4:	2003      	movs	r0, #3
 8009ef6:	f000 fd51 	bl	800a99c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009efa:	2000      	movs	r0, #0
 8009efc:	f000 f808 	bl	8009f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f00:	f7fc ffb6 	bl	8006e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	40023c00 	.word	0x40023c00

08009f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009f18:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <HAL_InitTick+0x54>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <HAL_InitTick+0x58>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fd69 	bl	800aa06 <HAL_SYSTICK_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e00e      	b.n	8009f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d80a      	bhi.n	8009f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009f44:	2200      	movs	r2, #0
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	f000 fd31 	bl	800a9b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009f50:	4a06      	ldr	r2, [pc, #24]	; (8009f6c <HAL_InitTick+0x5c>)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	e000      	b.n	8009f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20000000 	.word	0x20000000
 8009f68:	20000008 	.word	0x20000008
 8009f6c:	20000004 	.word	0x20000004

08009f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f74:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <HAL_IncTick+0x20>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <HAL_IncTick+0x24>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4413      	add	r3, r2
 8009f80:	4a04      	ldr	r2, [pc, #16]	; (8009f94 <HAL_IncTick+0x24>)
 8009f82:	6013      	str	r3, [r2, #0]
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20000008 	.word	0x20000008
 8009f94:	20047c30 	.word	0x20047c30

08009f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8009f9c:	4b03      	ldr	r3, [pc, #12]	; (8009fac <HAL_GetTick+0x14>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20047c30 	.word	0x20047c30

08009fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009fb8:	f7ff ffee 	bl	8009f98 <HAL_GetTick>
 8009fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc8:	d005      	beq.n	8009fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <HAL_Delay+0x40>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009fd6:	bf00      	nop
 8009fd8:	f7ff ffde 	bl	8009f98 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d8f7      	bhi.n	8009fd8 <HAL_Delay+0x28>
  {
  }
}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000008 	.word	0x20000008

08009ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e033      	b.n	800a072 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d109      	bne.n	800a026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7fc ff54 	bl	8006ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f003 0310 	and.w	r3, r3, #16
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d118      	bne.n	800a064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a03a:	f023 0302 	bic.w	r3, r3, #2
 800a03e:	f043 0202 	orr.w	r2, r3, #2
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fa5a 	bl	800a500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	f043 0201 	orr.w	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	641a      	str	r2, [r3, #64]	; 0x40
 800a062:	e001      	b.n	800a068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_ADC_Start_DMA+0x1e>
 800a096:	2302      	movs	r3, #2
 800a098:	e0cc      	b.n	800a234 <HAL_ADC_Start_DMA+0x1b8>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d018      	beq.n	800a0e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f042 0201 	orr.w	r2, r2, #1
 800a0be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a0c0:	4b5e      	ldr	r3, [pc, #376]	; (800a23c <HAL_ADC_Start_DMA+0x1c0>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a5e      	ldr	r2, [pc, #376]	; (800a240 <HAL_ADC_Start_DMA+0x1c4>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	0c9a      	lsrs	r2, r3, #18
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	4413      	add	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a0d4:	e002      	b.n	800a0dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f9      	bne.n	800a0d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	f040 80a0 	bne.w	800a232 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a0fa:	f023 0301 	bic.w	r3, r3, #1
 800a0fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a11c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a12c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a130:	d106      	bne.n	800a140 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a136:	f023 0206 	bic.w	r2, r3, #6
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	645a      	str	r2, [r3, #68]	; 0x44
 800a13e:	e002      	b.n	800a146 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a14e:	4b3d      	ldr	r3, [pc, #244]	; (800a244 <HAL_ADC_Start_DMA+0x1c8>)
 800a150:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	4a3c      	ldr	r2, [pc, #240]	; (800a248 <HAL_ADC_Start_DMA+0x1cc>)
 800a158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	4a3b      	ldr	r2, [pc, #236]	; (800a24c <HAL_ADC_Start_DMA+0x1d0>)
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	4a3a      	ldr	r2, [pc, #232]	; (800a250 <HAL_ADC_Start_DMA+0x1d4>)
 800a168:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a172:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a182:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a192:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	334c      	adds	r3, #76	; 0x4c
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f000 fcea 	bl	800ab7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f003 031f 	and.w	r3, r3, #31
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d12a      	bne.n	800a20a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a26      	ldr	r2, [pc, #152]	; (800a254 <HAL_ADC_Start_DMA+0x1d8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d015      	beq.n	800a1ea <HAL_ADC_Start_DMA+0x16e>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a25      	ldr	r2, [pc, #148]	; (800a258 <HAL_ADC_Start_DMA+0x1dc>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d105      	bne.n	800a1d4 <HAL_ADC_Start_DMA+0x158>
 800a1c8:	4b1e      	ldr	r3, [pc, #120]	; (800a244 <HAL_ADC_Start_DMA+0x1c8>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a20      	ldr	r2, [pc, #128]	; (800a25c <HAL_ADC_Start_DMA+0x1e0>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d129      	bne.n	800a232 <HAL_ADC_Start_DMA+0x1b6>
 800a1de:	4b19      	ldr	r3, [pc, #100]	; (800a244 <HAL_ADC_Start_DMA+0x1c8>)
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f003 031f 	and.w	r3, r3, #31
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d823      	bhi.n	800a232 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11c      	bne.n	800a232 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a206:	609a      	str	r2, [r3, #8]
 800a208:	e013      	b.n	800a232 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a11      	ldr	r2, [pc, #68]	; (800a254 <HAL_ADC_Start_DMA+0x1d8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d10e      	bne.n	800a232 <HAL_ADC_Start_DMA+0x1b6>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d107      	bne.n	800a232 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a230:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000000 	.word	0x20000000
 800a240:	431bde83 	.word	0x431bde83
 800a244:	40012300 	.word	0x40012300
 800a248:	0800a6f9 	.word	0x0800a6f9
 800a24c:	0800a7b3 	.word	0x0800a7b3
 800a250:	0800a7cf 	.word	0x0800a7cf
 800a254:	40012000 	.word	0x40012000
 800a258:	40012100 	.word	0x40012100
 800a25c:	40012200 	.word	0x40012200

0800a260 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_ADC_ConfigChannel+0x1c>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e113      	b.n	800a4e0 <HAL_ADC_ConfigChannel+0x244>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b09      	cmp	r3, #9
 800a2c6:	d925      	bls.n	800a314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68d9      	ldr	r1, [r3, #12]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	4413      	add	r3, r2
 800a2dc:	3b1e      	subs	r3, #30
 800a2de:	2207      	movs	r2, #7
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	43da      	mvns	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	400a      	ands	r2, r1
 800a2ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68d9      	ldr	r1, [r3, #12]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	4618      	mov	r0, r3
 800a300:	4603      	mov	r3, r0
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	4403      	add	r3, r0
 800a306:	3b1e      	subs	r3, #30
 800a308:	409a      	lsls	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	60da      	str	r2, [r3, #12]
 800a312:	e022      	b.n	800a35a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6919      	ldr	r1, [r3, #16]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	461a      	mov	r2, r3
 800a322:	4613      	mov	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4413      	add	r3, r2
 800a328:	2207      	movs	r2, #7
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	43da      	mvns	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	400a      	ands	r2, r1
 800a336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6919      	ldr	r1, [r3, #16]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	4618      	mov	r0, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4403      	add	r3, r0
 800a350:	409a      	lsls	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2b06      	cmp	r3, #6
 800a360:	d824      	bhi.n	800a3ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	3b05      	subs	r3, #5
 800a374:	221f      	movs	r2, #31
 800a376:	fa02 f303 	lsl.w	r3, r2, r3
 800a37a:	43da      	mvns	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	400a      	ands	r2, r1
 800a382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4618      	mov	r0, r3
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	3b05      	subs	r3, #5
 800a39e:	fa00 f203 	lsl.w	r2, r0, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	635a      	str	r2, [r3, #52]	; 0x34
 800a3aa:	e04c      	b.n	800a446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2b0c      	cmp	r3, #12
 800a3b2:	d824      	bhi.n	800a3fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3b23      	subs	r3, #35	; 0x23
 800a3c6:	221f      	movs	r2, #31
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	43da      	mvns	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	400a      	ands	r2, r1
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3b23      	subs	r3, #35	; 0x23
 800a3f0:	fa00 f203 	lsl.w	r2, r0, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	631a      	str	r2, [r3, #48]	; 0x30
 800a3fc:	e023      	b.n	800a446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	3b41      	subs	r3, #65	; 0x41
 800a410:	221f      	movs	r2, #31
 800a412:	fa02 f303 	lsl.w	r3, r2, r3
 800a416:	43da      	mvns	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	400a      	ands	r2, r1
 800a41e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	4618      	mov	r0, r3
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	4613      	mov	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	3b41      	subs	r3, #65	; 0x41
 800a43a:	fa00 f203 	lsl.w	r2, r0, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a446:	4b29      	ldr	r3, [pc, #164]	; (800a4ec <HAL_ADC_ConfigChannel+0x250>)
 800a448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a28      	ldr	r2, [pc, #160]	; (800a4f0 <HAL_ADC_ConfigChannel+0x254>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d10f      	bne.n	800a474 <HAL_ADC_ConfigChannel+0x1d8>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b12      	cmp	r3, #18
 800a45a:	d10b      	bne.n	800a474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <HAL_ADC_ConfigChannel+0x254>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d12b      	bne.n	800a4d6 <HAL_ADC_ConfigChannel+0x23a>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <HAL_ADC_ConfigChannel+0x258>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d003      	beq.n	800a490 <HAL_ADC_ConfigChannel+0x1f4>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b11      	cmp	r3, #17
 800a48e:	d122      	bne.n	800a4d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a11      	ldr	r2, [pc, #68]	; (800a4f4 <HAL_ADC_ConfigChannel+0x258>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d111      	bne.n	800a4d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a4b2:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <HAL_ADC_ConfigChannel+0x25c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a11      	ldr	r2, [pc, #68]	; (800a4fc <HAL_ADC_ConfigChannel+0x260>)
 800a4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4bc:	0c9a      	lsrs	r2, r3, #18
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a4c8:	e002      	b.n	800a4d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1f9      	bne.n	800a4ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	40012300 	.word	0x40012300
 800a4f0:	40012000 	.word	0x40012000
 800a4f4:	10000012 	.word	0x10000012
 800a4f8:	20000000 	.word	0x20000000
 800a4fc:	431bde83 	.word	0x431bde83

0800a500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a508:	4b79      	ldr	r3, [pc, #484]	; (800a6f0 <ADC_Init+0x1f0>)
 800a50a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	431a      	orrs	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6859      	ldr	r1, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	021a      	lsls	r2, r3, #8
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6859      	ldr	r1, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a57a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6899      	ldr	r1, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a592:	4a58      	ldr	r2, [pc, #352]	; (800a6f4 <ADC_Init+0x1f4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d022      	beq.n	800a5de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689a      	ldr	r2, [r3, #8]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a5a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6899      	ldr	r1, [r3, #8]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a5c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6899      	ldr	r1, [r3, #8]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]
 800a5dc:	e00f      	b.n	800a5fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689a      	ldr	r2, [r3, #8]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a5ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a5fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0202 	bic.w	r2, r2, #2
 800a60c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6899      	ldr	r1, [r3, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7e1b      	ldrb	r3, [r3, #24]
 800a618:	005a      	lsls	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01b      	beq.n	800a664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a63a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a64a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6859      	ldr	r1, [r3, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	3b01      	subs	r3, #1
 800a658:	035a      	lsls	r2, r3, #13
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	e007      	b.n	800a674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	3b01      	subs	r3, #1
 800a690:	051a      	lsls	r2, r3, #20
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a6a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6899      	ldr	r1, [r3, #8]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6b6:	025a      	lsls	r2, r3, #9
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	689a      	ldr	r2, [r3, #8]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6899      	ldr	r1, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	029a      	lsls	r2, r3, #10
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	609a      	str	r2, [r3, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	40012300 	.word	0x40012300
 800a6f4:	0f000001 	.word	0x0f000001

0800a6f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d13c      	bne.n	800a78c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d12b      	bne.n	800a784 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a730:	2b00      	cmp	r3, #0
 800a732:	d127      	bne.n	800a784 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d119      	bne.n	800a784 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 0220 	bic.w	r2, r2, #32
 800a75e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d105      	bne.n	800a784 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77c:	f043 0201 	orr.w	r2, r3, #1
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff fd6b 	bl	800a260 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a78a:	e00e      	b.n	800a7aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff fd75 	bl	800a288 <HAL_ADC_ErrorCallback>
}
 800a79e:	e004      	b.n	800a7aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	4798      	blx	r3
}
 800a7aa:	bf00      	nop
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fd57 	bl	800a274 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2240      	movs	r2, #64	; 0x40
 800a7e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e6:	f043 0204 	orr.w	r2, r3, #4
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff fd4a 	bl	800a288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a7f4:	bf00      	nop
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a80c:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <__NVIC_SetPriorityGrouping+0x44>)
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a818:	4013      	ands	r3, r2
 800a81a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a82e:	4a04      	ldr	r2, [pc, #16]	; (800a840 <__NVIC_SetPriorityGrouping+0x44>)
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	60d3      	str	r3, [r2, #12]
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	e000ed00 	.word	0xe000ed00

0800a844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a844:	b480      	push	{r7}
 800a846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a848:	4b04      	ldr	r3, [pc, #16]	; (800a85c <__NVIC_GetPriorityGrouping+0x18>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	f003 0307 	and.w	r3, r3, #7
}
 800a852:	4618      	mov	r0, r3
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	e000ed00 	.word	0xe000ed00

0800a860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	db0b      	blt.n	800a88a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	f003 021f 	and.w	r2, r3, #31
 800a878:	4907      	ldr	r1, [pc, #28]	; (800a898 <__NVIC_EnableIRQ+0x38>)
 800a87a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a87e:	095b      	lsrs	r3, r3, #5
 800a880:	2001      	movs	r0, #1
 800a882:	fa00 f202 	lsl.w	r2, r0, r2
 800a886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	e000e100 	.word	0xe000e100

0800a89c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	db0a      	blt.n	800a8c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	490c      	ldr	r1, [pc, #48]	; (800a8e8 <__NVIC_SetPriority+0x4c>)
 800a8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ba:	0112      	lsls	r2, r2, #4
 800a8bc:	b2d2      	uxtb	r2, r2
 800a8be:	440b      	add	r3, r1
 800a8c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a8c4:	e00a      	b.n	800a8dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4908      	ldr	r1, [pc, #32]	; (800a8ec <__NVIC_SetPriority+0x50>)
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	f003 030f 	and.w	r3, r3, #15
 800a8d2:	3b04      	subs	r3, #4
 800a8d4:	0112      	lsls	r2, r2, #4
 800a8d6:	b2d2      	uxtb	r2, r2
 800a8d8:	440b      	add	r3, r1
 800a8da:	761a      	strb	r2, [r3, #24]
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	e000e100 	.word	0xe000e100
 800a8ec:	e000ed00 	.word	0xe000ed00

0800a8f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b089      	sub	sp, #36	; 0x24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	f1c3 0307 	rsb	r3, r3, #7
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	bf28      	it	cs
 800a90e:	2304      	movcs	r3, #4
 800a910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3304      	adds	r3, #4
 800a916:	2b06      	cmp	r3, #6
 800a918:	d902      	bls.n	800a920 <NVIC_EncodePriority+0x30>
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	3b03      	subs	r3, #3
 800a91e:	e000      	b.n	800a922 <NVIC_EncodePriority+0x32>
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a924:	f04f 32ff 	mov.w	r2, #4294967295
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	43da      	mvns	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	401a      	ands	r2, r3
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a938:	f04f 31ff 	mov.w	r1, #4294967295
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	fa01 f303 	lsl.w	r3, r1, r3
 800a942:	43d9      	mvns	r1, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a948:	4313      	orrs	r3, r2
         );
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3724      	adds	r7, #36	; 0x24
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3b01      	subs	r3, #1
 800a964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a968:	d301      	bcc.n	800a96e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a96a:	2301      	movs	r3, #1
 800a96c:	e00f      	b.n	800a98e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a96e:	4a0a      	ldr	r2, [pc, #40]	; (800a998 <SysTick_Config+0x40>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3b01      	subs	r3, #1
 800a974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a976:	210f      	movs	r1, #15
 800a978:	f04f 30ff 	mov.w	r0, #4294967295
 800a97c:	f7ff ff8e 	bl	800a89c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <SysTick_Config+0x40>)
 800a982:	2200      	movs	r2, #0
 800a984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a986:	4b04      	ldr	r3, [pc, #16]	; (800a998 <SysTick_Config+0x40>)
 800a988:	2207      	movs	r2, #7
 800a98a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	e000e010 	.word	0xe000e010

0800a99c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff ff29 	bl	800a7fc <__NVIC_SetPriorityGrouping>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b086      	sub	sp, #24
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
 800a9be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a9c4:	f7ff ff3e 	bl	800a844 <__NVIC_GetPriorityGrouping>
 800a9c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	6978      	ldr	r0, [r7, #20]
 800a9d0:	f7ff ff8e 	bl	800a8f0 <NVIC_EncodePriority>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff ff5d 	bl	800a89c <__NVIC_SetPriority>
}
 800a9e2:	bf00      	nop
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a9f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff ff31 	bl	800a860 <__NVIC_EnableIRQ>
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b082      	sub	sp, #8
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff ffa2 	bl	800a958 <SysTick_Config>
 800aa14:	4603      	mov	r3, r0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aa2c:	f7ff fab4 	bl	8009f98 <HAL_GetTick>
 800aa30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e099      	b.n	800ab70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0201 	bic.w	r2, r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa5c:	e00f      	b.n	800aa7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa5e:	f7ff fa9b 	bl	8009f98 <HAL_GetTick>
 800aa62:	4602      	mov	r2, r0
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	2b05      	cmp	r3, #5
 800aa6a:	d908      	bls.n	800aa7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2203      	movs	r2, #3
 800aa76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	e078      	b.n	800ab70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e8      	bne.n	800aa5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	4b38      	ldr	r3, [pc, #224]	; (800ab78 <HAL_DMA_Init+0x158>)
 800aa98:	4013      	ands	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aaaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	4313      	orrs	r3, r2
 800aace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d107      	bne.n	800aae8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae0:	4313      	orrs	r3, r2
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f023 0307 	bic.w	r3, r3, #7
 800aafe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d117      	bne.n	800ab42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00e      	beq.n	800ab42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fa9d 	bl	800b064 <DMA_CheckFifoParam>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d008      	beq.n	800ab42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2240      	movs	r2, #64	; 0x40
 800ab34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e016      	b.n	800ab70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa54 	bl	800aff8 <DMA_CalcBaseAndBitshift>
 800ab50:	4603      	mov	r3, r0
 800ab52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab58:	223f      	movs	r2, #63	; 0x3f
 800ab5a:	409a      	lsls	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	f010803f 	.word	0xf010803f

0800ab7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_DMA_Start_IT+0x26>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e040      	b.n	800ac24 <HAL_DMA_Start_IT+0xa8>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d12f      	bne.n	800ac16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 f9e6 	bl	800af9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abd4:	223f      	movs	r2, #63	; 0x3f
 800abd6:	409a      	lsls	r2, r3
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f042 0216 	orr.w	r2, r2, #22
 800abea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0208 	orr.w	r2, r2, #8
 800ac02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0201 	orr.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	e005      	b.n	800ac22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ac1e:	2302      	movs	r3, #2
 800ac20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d004      	beq.n	800ac4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2280      	movs	r2, #128	; 0x80
 800ac44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e00c      	b.n	800ac64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2205      	movs	r2, #5
 800ac4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f022 0201 	bic.w	r2, r2, #1
 800ac60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac7c:	4b92      	ldr	r3, [pc, #584]	; (800aec8 <HAL_DMA_IRQHandler+0x258>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a92      	ldr	r2, [pc, #584]	; (800aecc <HAL_DMA_IRQHandler+0x25c>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	0a9b      	lsrs	r3, r3, #10
 800ac88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9a:	2208      	movs	r2, #8
 800ac9c:	409a      	lsls	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	4013      	ands	r3, r2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d01a      	beq.n	800acdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d013      	beq.n	800acdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0204 	bic.w	r2, r2, #4
 800acc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acc8:	2208      	movs	r2, #8
 800acca:	409a      	lsls	r2, r3
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd4:	f043 0201 	orr.w	r2, r3, #1
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace0:	2201      	movs	r2, #1
 800ace2:	409a      	lsls	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d012      	beq.n	800ad12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00b      	beq.n	800ad12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfe:	2201      	movs	r2, #1
 800ad00:	409a      	lsls	r2, r3
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad0a:	f043 0202 	orr.w	r2, r3, #2
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad16:	2204      	movs	r2, #4
 800ad18:	409a      	lsls	r2, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d012      	beq.n	800ad48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad34:	2204      	movs	r2, #4
 800ad36:	409a      	lsls	r2, r3
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad40:	f043 0204 	orr.w	r2, r3, #4
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4c:	2210      	movs	r2, #16
 800ad4e:	409a      	lsls	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4013      	ands	r3, r2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d043      	beq.n	800ade0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d03c      	beq.n	800ade0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6a:	2210      	movs	r2, #16
 800ad6c:	409a      	lsls	r2, r3
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d018      	beq.n	800adb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d108      	bne.n	800ada0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d024      	beq.n	800ade0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	4798      	blx	r3
 800ad9e:	e01f      	b.n	800ade0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01b      	beq.n	800ade0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	4798      	blx	r3
 800adb0:	e016      	b.n	800ade0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d107      	bne.n	800add0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f022 0208 	bic.w	r2, r2, #8
 800adce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ade4:	2220      	movs	r2, #32
 800ade6:	409a      	lsls	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4013      	ands	r3, r2
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 808e 	beq.w	800af0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0310 	and.w	r3, r3, #16
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8086 	beq.w	800af0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae06:	2220      	movs	r2, #32
 800ae08:	409a      	lsls	r2, r3
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b05      	cmp	r3, #5
 800ae18:	d136      	bne.n	800ae88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0216 	bic.w	r2, r2, #22
 800ae28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	695a      	ldr	r2, [r3, #20]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <HAL_DMA_IRQHandler+0x1da>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d007      	beq.n	800ae5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 0208 	bic.w	r2, r2, #8
 800ae58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae5e:	223f      	movs	r2, #63	; 0x3f
 800ae60:	409a      	lsls	r2, r3
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d07d      	beq.n	800af7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
        }
        return;
 800ae86:	e078      	b.n	800af7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01c      	beq.n	800aed0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d030      	beq.n	800af0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3
 800aeb4:	e02b      	b.n	800af0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d027      	beq.n	800af0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	4798      	blx	r3
 800aec6:	e022      	b.n	800af0e <HAL_DMA_IRQHandler+0x29e>
 800aec8:	20000000 	.word	0x20000000
 800aecc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10f      	bne.n	800aefe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0210 	bic.w	r2, r2, #16
 800aeec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af12:	2b00      	cmp	r3, #0
 800af14:	d032      	beq.n	800af7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d022      	beq.n	800af68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2205      	movs	r2, #5
 800af26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 0201 	bic.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	3301      	adds	r3, #1
 800af3e:	60bb      	str	r3, [r7, #8]
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	429a      	cmp	r2, r3
 800af44:	d307      	bcc.n	800af56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1f2      	bne.n	800af3a <HAL_DMA_IRQHandler+0x2ca>
 800af54:	e000      	b.n	800af58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800af56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
 800af78:	e000      	b.n	800af7c <HAL_DMA_IRQHandler+0x30c>
        return;
 800af7a:	bf00      	nop
    }
  }
}
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop

0800af84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800afb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	2b40      	cmp	r3, #64	; 0x40
 800afc8:	d108      	bne.n	800afdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800afda:	e007      	b.n	800afec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	60da      	str	r2, [r3, #12]
}
 800afec:	bf00      	nop
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	3b10      	subs	r3, #16
 800b008:	4a14      	ldr	r2, [pc, #80]	; (800b05c <DMA_CalcBaseAndBitshift+0x64>)
 800b00a:	fba2 2303 	umull	r2, r3, r2, r3
 800b00e:	091b      	lsrs	r3, r3, #4
 800b010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b012:	4a13      	ldr	r2, [pc, #76]	; (800b060 <DMA_CalcBaseAndBitshift+0x68>)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b03      	cmp	r3, #3
 800b024:	d909      	bls.n	800b03a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b02e:	f023 0303 	bic.w	r3, r3, #3
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	659a      	str	r2, [r3, #88]	; 0x58
 800b038:	e007      	b.n	800b04a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b042:	f023 0303 	bic.w	r3, r3, #3
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	aaaaaaab 	.word	0xaaaaaaab
 800b060:	08019240 	.word	0x08019240

0800b064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d11f      	bne.n	800b0be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2b03      	cmp	r3, #3
 800b082:	d855      	bhi.n	800b130 <DMA_CheckFifoParam+0xcc>
 800b084:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <DMA_CheckFifoParam+0x28>)
 800b086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08a:	bf00      	nop
 800b08c:	0800b09d 	.word	0x0800b09d
 800b090:	0800b0af 	.word	0x0800b0af
 800b094:	0800b09d 	.word	0x0800b09d
 800b098:	0800b131 	.word	0x0800b131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d045      	beq.n	800b134 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0ac:	e042      	b.n	800b134 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b0b6:	d13f      	bne.n	800b138 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0bc:	e03c      	b.n	800b138 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0c6:	d121      	bne.n	800b10c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d836      	bhi.n	800b13c <DMA_CheckFifoParam+0xd8>
 800b0ce:	a201      	add	r2, pc, #4	; (adr r2, 800b0d4 <DMA_CheckFifoParam+0x70>)
 800b0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d4:	0800b0e5 	.word	0x0800b0e5
 800b0d8:	0800b0eb 	.word	0x0800b0eb
 800b0dc:	0800b0e5 	.word	0x0800b0e5
 800b0e0:	0800b0fd 	.word	0x0800b0fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e8:	e02f      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d024      	beq.n	800b140 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0fa:	e021      	b.n	800b140 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b104:	d11e      	bne.n	800b144 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b10a:	e01b      	b.n	800b144 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d902      	bls.n	800b118 <DMA_CheckFifoParam+0xb4>
 800b112:	2b03      	cmp	r3, #3
 800b114:	d003      	beq.n	800b11e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b116:	e018      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	73fb      	strb	r3, [r7, #15]
      break;
 800b11c:	e015      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00e      	beq.n	800b148 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	73fb      	strb	r3, [r7, #15]
      break;
 800b12e:	e00b      	b.n	800b148 <DMA_CheckFifoParam+0xe4>
      break;
 800b130:	bf00      	nop
 800b132:	e00a      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      break;
 800b134:	bf00      	nop
 800b136:	e008      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      break;
 800b138:	bf00      	nop
 800b13a:	e006      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      break;
 800b13c:	bf00      	nop
 800b13e:	e004      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      break;
 800b140:	bf00      	nop
 800b142:	e002      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      break;   
 800b144:	bf00      	nop
 800b146:	e000      	b.n	800b14a <DMA_CheckFifoParam+0xe6>
      break;
 800b148:	bf00      	nop
    }
  } 
  
  return status; 
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b158:	b480      	push	{r7}
 800b15a:	b089      	sub	sp, #36	; 0x24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b162:	2300      	movs	r3, #0
 800b164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b166:	2300      	movs	r3, #0
 800b168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	e177      	b.n	800b464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b174:	2201      	movs	r2, #1
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4013      	ands	r3, r2
 800b186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	f040 8166 	bne.w	800b45e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d00b      	beq.n	800b1b2 <HAL_GPIO_Init+0x5a>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d007      	beq.n	800b1b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b1a6:	2b11      	cmp	r3, #17
 800b1a8:	d003      	beq.n	800b1b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b12      	cmp	r3, #18
 800b1b0:	d130      	bne.n	800b214 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	2203      	movs	r2, #3
 800b1be:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c2:	43db      	mvns	r3, r3
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	43db      	mvns	r3, r3
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	091b      	lsrs	r3, r3, #4
 800b1fe:	f003 0201 	and.w	r2, r3, #1
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	fa02 f303 	lsl.w	r3, r2, r3
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	2203      	movs	r2, #3
 800b220:	fa02 f303 	lsl.w	r3, r2, r3
 800b224:	43db      	mvns	r3, r3
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	4013      	ands	r3, r2
 800b22a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	fa02 f303 	lsl.w	r3, r2, r3
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d003      	beq.n	800b254 <HAL_GPIO_Init+0xfc>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	2b12      	cmp	r3, #18
 800b252:	d123      	bne.n	800b29c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	08da      	lsrs	r2, r3, #3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3208      	adds	r2, #8
 800b25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	f003 0307 	and.w	r3, r3, #7
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	220f      	movs	r2, #15
 800b26c:	fa02 f303 	lsl.w	r3, r2, r3
 800b270:	43db      	mvns	r3, r3
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	4013      	ands	r3, r2
 800b276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	fa02 f303 	lsl.w	r3, r2, r3
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	08da      	lsrs	r2, r3, #3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3208      	adds	r2, #8
 800b296:	69b9      	ldr	r1, [r7, #24]
 800b298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	2203      	movs	r2, #3
 800b2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ac:	43db      	mvns	r3, r3
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f003 0203 	and.w	r2, r3, #3
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 80c0 	beq.w	800b45e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	4b65      	ldr	r3, [pc, #404]	; (800b478 <HAL_GPIO_Init+0x320>)
 800b2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e6:	4a64      	ldr	r2, [pc, #400]	; (800b478 <HAL_GPIO_Init+0x320>)
 800b2e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2ec:	6453      	str	r3, [r2, #68]	; 0x44
 800b2ee:	4b62      	ldr	r3, [pc, #392]	; (800b478 <HAL_GPIO_Init+0x320>)
 800b2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b2fa:	4a60      	ldr	r2, [pc, #384]	; (800b47c <HAL_GPIO_Init+0x324>)
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	089b      	lsrs	r3, r3, #2
 800b300:	3302      	adds	r3, #2
 800b302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	f003 0303 	and.w	r3, r3, #3
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	220f      	movs	r2, #15
 800b312:	fa02 f303 	lsl.w	r3, r2, r3
 800b316:	43db      	mvns	r3, r3
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	4013      	ands	r3, r2
 800b31c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a57      	ldr	r2, [pc, #348]	; (800b480 <HAL_GPIO_Init+0x328>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d037      	beq.n	800b396 <HAL_GPIO_Init+0x23e>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a56      	ldr	r2, [pc, #344]	; (800b484 <HAL_GPIO_Init+0x32c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d031      	beq.n	800b392 <HAL_GPIO_Init+0x23a>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a55      	ldr	r2, [pc, #340]	; (800b488 <HAL_GPIO_Init+0x330>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d02b      	beq.n	800b38e <HAL_GPIO_Init+0x236>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a54      	ldr	r2, [pc, #336]	; (800b48c <HAL_GPIO_Init+0x334>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d025      	beq.n	800b38a <HAL_GPIO_Init+0x232>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a53      	ldr	r2, [pc, #332]	; (800b490 <HAL_GPIO_Init+0x338>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d01f      	beq.n	800b386 <HAL_GPIO_Init+0x22e>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a52      	ldr	r2, [pc, #328]	; (800b494 <HAL_GPIO_Init+0x33c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d019      	beq.n	800b382 <HAL_GPIO_Init+0x22a>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a51      	ldr	r2, [pc, #324]	; (800b498 <HAL_GPIO_Init+0x340>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d013      	beq.n	800b37e <HAL_GPIO_Init+0x226>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a50      	ldr	r2, [pc, #320]	; (800b49c <HAL_GPIO_Init+0x344>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d00d      	beq.n	800b37a <HAL_GPIO_Init+0x222>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a4f      	ldr	r2, [pc, #316]	; (800b4a0 <HAL_GPIO_Init+0x348>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d007      	beq.n	800b376 <HAL_GPIO_Init+0x21e>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a4e      	ldr	r2, [pc, #312]	; (800b4a4 <HAL_GPIO_Init+0x34c>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d101      	bne.n	800b372 <HAL_GPIO_Init+0x21a>
 800b36e:	2309      	movs	r3, #9
 800b370:	e012      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b372:	230a      	movs	r3, #10
 800b374:	e010      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b376:	2308      	movs	r3, #8
 800b378:	e00e      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b37a:	2307      	movs	r3, #7
 800b37c:	e00c      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b37e:	2306      	movs	r3, #6
 800b380:	e00a      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b382:	2305      	movs	r3, #5
 800b384:	e008      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b386:	2304      	movs	r3, #4
 800b388:	e006      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b38a:	2303      	movs	r3, #3
 800b38c:	e004      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b38e:	2302      	movs	r3, #2
 800b390:	e002      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b392:	2301      	movs	r3, #1
 800b394:	e000      	b.n	800b398 <HAL_GPIO_Init+0x240>
 800b396:	2300      	movs	r3, #0
 800b398:	69fa      	ldr	r2, [r7, #28]
 800b39a:	f002 0203 	and.w	r2, r2, #3
 800b39e:	0092      	lsls	r2, r2, #2
 800b3a0:	4093      	lsls	r3, r2
 800b3a2:	69ba      	ldr	r2, [r7, #24]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b3a8:	4934      	ldr	r1, [pc, #208]	; (800b47c <HAL_GPIO_Init+0x324>)
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	089b      	lsrs	r3, r3, #2
 800b3ae:	3302      	adds	r3, #2
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b3b6:	4b3c      	ldr	r3, [pc, #240]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	43db      	mvns	r3, r3
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b3da:	4a33      	ldr	r2, [pc, #204]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b3e0:	4b31      	ldr	r3, [pc, #196]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	43db      	mvns	r3, r3
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	4313      	orrs	r3, r2
 800b402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b404:	4a28      	ldr	r2, [pc, #160]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b40a:	4b27      	ldr	r3, [pc, #156]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	43db      	mvns	r3, r3
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	4013      	ands	r3, r2
 800b418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b426:	69ba      	ldr	r2, [r7, #24]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b42e:	4a1e      	ldr	r2, [pc, #120]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b434:	4b1c      	ldr	r3, [pc, #112]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	43db      	mvns	r3, r3
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	4013      	ands	r3, r2
 800b442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	4313      	orrs	r3, r2
 800b456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b458:	4a13      	ldr	r2, [pc, #76]	; (800b4a8 <HAL_GPIO_Init+0x350>)
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	3301      	adds	r3, #1
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	2b0f      	cmp	r3, #15
 800b468:	f67f ae84 	bls.w	800b174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b46c:	bf00      	nop
 800b46e:	3724      	adds	r7, #36	; 0x24
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	40023800 	.word	0x40023800
 800b47c:	40013800 	.word	0x40013800
 800b480:	40020000 	.word	0x40020000
 800b484:	40020400 	.word	0x40020400
 800b488:	40020800 	.word	0x40020800
 800b48c:	40020c00 	.word	0x40020c00
 800b490:	40021000 	.word	0x40021000
 800b494:	40021400 	.word	0x40021400
 800b498:	40021800 	.word	0x40021800
 800b49c:	40021c00 	.word	0x40021c00
 800b4a0:	40022000 	.word	0x40022000
 800b4a4:	40022400 	.word	0x40022400
 800b4a8:	40013c00 	.word	0x40013c00

0800b4ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	691a      	ldr	r2, [r3, #16]
 800b4bc:	887b      	ldrh	r3, [r7, #2]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	73fb      	strb	r3, [r7, #15]
 800b4c8:	e001      	b.n	800b4ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	807b      	strh	r3, [r7, #2]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b4ec:	787b      	ldrb	r3, [r7, #1]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b4f2:	887a      	ldrh	r2, [r7, #2]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b4f8:	e003      	b.n	800b502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b4fa:	887b      	ldrh	r3, [r7, #2]
 800b4fc:	041a      	lsls	r2, r3, #16
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	619a      	str	r2, [r3, #24]
}
 800b502:	bf00      	nop
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
	...

0800b510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b51a:	4b08      	ldr	r3, [pc, #32]	; (800b53c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b51c:	695a      	ldr	r2, [r3, #20]
 800b51e:	88fb      	ldrh	r3, [r7, #6]
 800b520:	4013      	ands	r3, r2
 800b522:	2b00      	cmp	r3, #0
 800b524:	d006      	beq.n	800b534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b526:	4a05      	ldr	r2, [pc, #20]	; (800b53c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b52c:	88fb      	ldrh	r3, [r7, #6]
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fa fcfd 	bl	8005f2e <HAL_GPIO_EXTI_Callback>
  }
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	40013c00 	.word	0x40013c00

0800b540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e11f      	b.n	800b792 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7fb fd5c 	bl	8007024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2224      	movs	r2, #36	; 0x24
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0201 	bic.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b5a4:	f001 f96e 	bl	800c884 <HAL_RCC_GetPCLK1Freq>
 800b5a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	4a7b      	ldr	r2, [pc, #492]	; (800b79c <HAL_I2C_Init+0x25c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d807      	bhi.n	800b5c4 <HAL_I2C_Init+0x84>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4a7a      	ldr	r2, [pc, #488]	; (800b7a0 <HAL_I2C_Init+0x260>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	bf94      	ite	ls
 800b5bc:	2301      	movls	r3, #1
 800b5be:	2300      	movhi	r3, #0
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	e006      	b.n	800b5d2 <HAL_I2C_Init+0x92>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4a77      	ldr	r2, [pc, #476]	; (800b7a4 <HAL_I2C_Init+0x264>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	bf94      	ite	ls
 800b5cc:	2301      	movls	r3, #1
 800b5ce:	2300      	movhi	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e0db      	b.n	800b792 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4a72      	ldr	r2, [pc, #456]	; (800b7a8 <HAL_I2C_Init+0x268>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	0c9b      	lsrs	r3, r3, #18
 800b5e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	4a64      	ldr	r2, [pc, #400]	; (800b79c <HAL_I2C_Init+0x25c>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d802      	bhi.n	800b614 <HAL_I2C_Init+0xd4>
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	3301      	adds	r3, #1
 800b612:	e009      	b.n	800b628 <HAL_I2C_Init+0xe8>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b61a:	fb02 f303 	mul.w	r3, r2, r3
 800b61e:	4a63      	ldr	r2, [pc, #396]	; (800b7ac <HAL_I2C_Init+0x26c>)
 800b620:	fba2 2303 	umull	r2, r3, r2, r3
 800b624:	099b      	lsrs	r3, r3, #6
 800b626:	3301      	adds	r3, #1
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	430b      	orrs	r3, r1
 800b62e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b63a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	4956      	ldr	r1, [pc, #344]	; (800b79c <HAL_I2C_Init+0x25c>)
 800b644:	428b      	cmp	r3, r1
 800b646:	d80d      	bhi.n	800b664 <HAL_I2C_Init+0x124>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	1e59      	subs	r1, r3, #1
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	fbb1 f3f3 	udiv	r3, r1, r3
 800b656:	3301      	adds	r3, #1
 800b658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	bf38      	it	cc
 800b660:	2304      	movcc	r3, #4
 800b662:	e04f      	b.n	800b704 <HAL_I2C_Init+0x1c4>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d111      	bne.n	800b690 <HAL_I2C_Init+0x150>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	1e58      	subs	r0, r3, #1
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6859      	ldr	r1, [r3, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	440b      	add	r3, r1
 800b67a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b67e:	3301      	adds	r3, #1
 800b680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b684:	2b00      	cmp	r3, #0
 800b686:	bf0c      	ite	eq
 800b688:	2301      	moveq	r3, #1
 800b68a:	2300      	movne	r3, #0
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	e012      	b.n	800b6b6 <HAL_I2C_Init+0x176>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	1e58      	subs	r0, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6859      	ldr	r1, [r3, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	440b      	add	r3, r1
 800b69e:	0099      	lsls	r1, r3, #2
 800b6a0:	440b      	add	r3, r1
 800b6a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bf0c      	ite	eq
 800b6b0:	2301      	moveq	r3, #1
 800b6b2:	2300      	movne	r3, #0
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <HAL_I2C_Init+0x17e>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e022      	b.n	800b704 <HAL_I2C_Init+0x1c4>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10e      	bne.n	800b6e4 <HAL_I2C_Init+0x1a4>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	1e58      	subs	r0, r3, #1
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6859      	ldr	r1, [r3, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	440b      	add	r3, r1
 800b6d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6d8:	3301      	adds	r3, #1
 800b6da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6e2:	e00f      	b.n	800b704 <HAL_I2C_Init+0x1c4>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	1e58      	subs	r0, r3, #1
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6859      	ldr	r1, [r3, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	440b      	add	r3, r1
 800b6f2:	0099      	lsls	r1, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	6809      	ldr	r1, [r1, #0]
 800b708:	4313      	orrs	r3, r2
 800b70a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	69da      	ldr	r2, [r3, #28]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	431a      	orrs	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6911      	ldr	r1, [r2, #16]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	68d2      	ldr	r2, [r2, #12]
 800b73e:	4311      	orrs	r1, r2
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	430b      	orrs	r3, r1
 800b746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	695a      	ldr	r2, [r3, #20]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	431a      	orrs	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	430a      	orrs	r2, r1
 800b762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f042 0201 	orr.w	r2, r2, #1
 800b772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	000186a0 	.word	0x000186a0
 800b7a0:	001e847f 	.word	0x001e847f
 800b7a4:	003d08ff 	.word	0x003d08ff
 800b7a8:	431bde83 	.word	0x431bde83
 800b7ac:	10624dd3 	.word	0x10624dd3

0800b7b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	460b      	mov	r3, r1
 800b7be:	817b      	strh	r3, [r7, #10]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7c4:	f7fe fbe8 	bl	8009f98 <HAL_GetTick>
 800b7c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	f040 80e0 	bne.w	800b998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2319      	movs	r3, #25
 800b7de:	2201      	movs	r2, #1
 800b7e0:	4970      	ldr	r1, [pc, #448]	; (800b9a4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fc58 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e0d3      	b.n	800b99a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_I2C_Master_Transmit+0x50>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e0cc      	b.n	800b99a <HAL_I2C_Master_Transmit+0x1ea>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b01      	cmp	r3, #1
 800b814:	d007      	beq.n	800b826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0201 	orr.w	r2, r2, #1
 800b824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2221      	movs	r2, #33	; 0x21
 800b83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2210      	movs	r2, #16
 800b842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	893a      	ldrh	r2, [r7, #8]
 800b856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4a50      	ldr	r2, [pc, #320]	; (800b9a8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b868:	8979      	ldrh	r1, [r7, #10]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	6a3a      	ldr	r2, [r7, #32]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 fac2 	bl	800bdf8 <I2C_MasterRequestWrite>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e08d      	b.n	800b99a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b87e:	2300      	movs	r3, #0
 800b880:	613b      	str	r3, [r7, #16]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	613b      	str	r3, [r7, #16]
 800b892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b894:	e066      	b.n	800b964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	6a39      	ldr	r1, [r7, #32]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 fcd2 	bl	800c244 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00d      	beq.n	800b8c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d107      	bne.n	800b8be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e06b      	b.n	800b99a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c6:	781a      	ldrb	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d11b      	bne.n	800b938 <HAL_I2C_Master_Transmit+0x188>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b904:	2b00      	cmp	r3, #0
 800b906:	d017      	beq.n	800b938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	781a      	ldrb	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	6a39      	ldr	r1, [r7, #32]
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 fcc2 	bl	800c2c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00d      	beq.n	800b964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94c:	2b04      	cmp	r3, #4
 800b94e:	d107      	bne.n	800b960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b95e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e01a      	b.n	800b99a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d194      	bne.n	800b896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b97a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2220      	movs	r2, #32
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	e000      	b.n	800b99a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b998:	2302      	movs	r3, #2
  }
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	00100002 	.word	0x00100002
 800b9a8:	ffff0000 	.word	0xffff0000

0800b9ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08c      	sub	sp, #48	; 0x30
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	817b      	strh	r3, [r7, #10]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b9c0:	f7fe faea 	bl	8009f98 <HAL_GetTick>
 800b9c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b20      	cmp	r3, #32
 800b9d0:	f040 820b 	bne.w	800bdea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2319      	movs	r3, #25
 800b9da:	2201      	movs	r2, #1
 800b9dc:	497c      	ldr	r1, [pc, #496]	; (800bbd0 <HAL_I2C_Master_Receive+0x224>)
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fb5a 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e1fe      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d101      	bne.n	800b9fc <HAL_I2C_Master_Receive+0x50>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e1f7      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d007      	beq.n	800ba22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f042 0201 	orr.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2222      	movs	r2, #34	; 0x22
 800ba36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2210      	movs	r2, #16
 800ba3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	893a      	ldrh	r2, [r7, #8]
 800ba52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4a5c      	ldr	r2, [pc, #368]	; (800bbd4 <HAL_I2C_Master_Receive+0x228>)
 800ba62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ba64:	8979      	ldrh	r1, [r7, #10]
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 fa46 	bl	800befc <I2C_MasterRequestRead>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e1b8      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d113      	bne.n	800baaa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba82:	2300      	movs	r3, #0
 800ba84:	623b      	str	r3, [r7, #32]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	623b      	str	r3, [r7, #32]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	623b      	str	r3, [r7, #32]
 800ba96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	e18c      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d11b      	bne.n	800baea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bac2:	2300      	movs	r3, #0
 800bac4:	61fb      	str	r3, [r7, #28]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	e16c      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d11b      	bne.n	800bb2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb12:	2300      	movs	r3, #0
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	695b      	ldr	r3, [r3, #20]
 800bb1c:	61bb      	str	r3, [r7, #24]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	61bb      	str	r3, [r7, #24]
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	e14c      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	617b      	str	r3, [r7, #20]
 800bb4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bb50:	e138      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	f200 80f1 	bhi.w	800bd3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d123      	bne.n	800bbac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 fbed 	bl	800c348 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e139      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	691a      	ldr	r2, [r3, #16]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb82:	b2d2      	uxtb	r2, r2
 800bb84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb94:	3b01      	subs	r3, #1
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	3b01      	subs	r3, #1
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bbaa:	e10b      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d14e      	bne.n	800bc52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4906      	ldr	r1, [pc, #24]	; (800bbd8 <HAL_I2C_Master_Receive+0x22c>)
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 fa6a 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e10e      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
 800bbce:	bf00      	nop
 800bbd0:	00100002 	.word	0x00100002
 800bbd4:	ffff0000 	.word	0xffff0000
 800bbd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	b2d2      	uxtb	r2, r2
 800bbf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	3b01      	subs	r3, #1
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc50:	e0b8      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	2200      	movs	r2, #0
 800bc5a:	4966      	ldr	r1, [pc, #408]	; (800bdf4 <HAL_I2C_Master_Receive+0x448>)
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 fa1b 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e0bf      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	691a      	ldr	r2, [r3, #16]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc86:	b2d2      	uxtb	r2, r2
 800bc88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	3b01      	subs	r3, #1
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	494f      	ldr	r1, [pc, #316]	; (800bdf4 <HAL_I2C_Master_Receive+0x448>)
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f9ed 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e091      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	691a      	ldr	r2, [r3, #16]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	3b01      	subs	r3, #1
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	691a      	ldr	r2, [r3, #16]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	b2d2      	uxtb	r2, r2
 800bd16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	1c5a      	adds	r2, r3, #1
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	3b01      	subs	r3, #1
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd3c:	e042      	b.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 fb00 	bl	800c348 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e04c      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	691a      	ldr	r2, [r3, #16]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	b2d2      	uxtb	r2, r2
 800bd5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d118      	bne.n	800bdc4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	691a      	ldr	r2, [r3, #16]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f47f aec2 	bne.w	800bb52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	e000      	b.n	800bdec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bdea:	2302      	movs	r3, #2
  }
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3728      	adds	r7, #40	; 0x28
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	00010004 	.word	0x00010004

0800bdf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af02      	add	r7, sp, #8
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	607a      	str	r2, [r7, #4]
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	460b      	mov	r3, r1
 800be06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2b08      	cmp	r3, #8
 800be12:	d006      	beq.n	800be22 <I2C_MasterRequestWrite+0x2a>
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d003      	beq.n	800be22 <I2C_MasterRequestWrite+0x2a>
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be20:	d108      	bne.n	800be34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	e00b      	b.n	800be4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be38:	2b12      	cmp	r3, #18
 800be3a:	d107      	bne.n	800be4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f000 f91d 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00d      	beq.n	800be80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be72:	d103      	bne.n	800be7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800be7c:	2303      	movs	r3, #3
 800be7e:	e035      	b.n	800beec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be88:	d108      	bne.n	800be9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be8a:	897b      	ldrh	r3, [r7, #10]
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	461a      	mov	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800be98:	611a      	str	r2, [r3, #16]
 800be9a:	e01b      	b.n	800bed4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800be9c:	897b      	ldrh	r3, [r7, #10]
 800be9e:	11db      	asrs	r3, r3, #7
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 0306 	and.w	r3, r3, #6
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	f063 030f 	orn	r3, r3, #15
 800beac:	b2da      	uxtb	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	490e      	ldr	r1, [pc, #56]	; (800bef4 <I2C_MasterRequestWrite+0xfc>)
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 f943 	bl	800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e010      	b.n	800beec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800beca:	897b      	ldrh	r3, [r7, #10]
 800becc:	b2da      	uxtb	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	4907      	ldr	r1, [pc, #28]	; (800bef8 <I2C_MasterRequestWrite+0x100>)
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 f933 	bl	800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e000      	b.n	800beec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	00010008 	.word	0x00010008
 800bef8:	00010002 	.word	0x00010002

0800befc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af02      	add	r7, sp, #8
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	607a      	str	r2, [r7, #4]
 800bf06:	603b      	str	r3, [r7, #0]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2b08      	cmp	r3, #8
 800bf26:	d006      	beq.n	800bf36 <I2C_MasterRequestRead+0x3a>
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d003      	beq.n	800bf36 <I2C_MasterRequestRead+0x3a>
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf34:	d108      	bne.n	800bf48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	e00b      	b.n	800bf60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4c:	2b11      	cmp	r3, #17
 800bf4e:	d107      	bne.n	800bf60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f893 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00d      	beq.n	800bf94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf86:	d103      	bne.n	800bf90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e079      	b.n	800c088 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf9c:	d108      	bne.n	800bfb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bf9e:	897b      	ldrh	r3, [r7, #10]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f043 0301 	orr.w	r3, r3, #1
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	611a      	str	r2, [r3, #16]
 800bfae:	e05f      	b.n	800c070 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bfb0:	897b      	ldrh	r3, [r7, #10]
 800bfb2:	11db      	asrs	r3, r3, #7
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	f003 0306 	and.w	r3, r3, #6
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	f063 030f 	orn	r3, r3, #15
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	4930      	ldr	r1, [pc, #192]	; (800c090 <I2C_MasterRequestRead+0x194>)
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 f8b9 	bl	800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e054      	b.n	800c088 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bfde:	897b      	ldrh	r3, [r7, #10]
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	4929      	ldr	r1, [pc, #164]	; (800c094 <I2C_MasterRequestRead+0x198>)
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f000 f8a9 	bl	800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e044      	b.n	800c088 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bffe:	2300      	movs	r3, #0
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	613b      	str	r3, [r7, #16]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c022:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f000 f831 	bl	800c098 <I2C_WaitOnFlagUntilTimeout>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00d      	beq.n	800c058 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c04a:	d103      	bne.n	800c054 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c052:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e017      	b.n	800c088 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c058:	897b      	ldrh	r3, [r7, #10]
 800c05a:	11db      	asrs	r3, r3, #7
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	f003 0306 	and.w	r3, r3, #6
 800c062:	b2db      	uxtb	r3, r3
 800c064:	f063 030e 	orn	r3, r3, #14
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	4907      	ldr	r1, [pc, #28]	; (800c094 <I2C_MasterRequestRead+0x198>)
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 f865 	bl	800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e000      	b.n	800c088 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	00010008 	.word	0x00010008
 800c094:	00010002 	.word	0x00010002

0800c098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	603b      	str	r3, [r7, #0]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0a8:	e025      	b.n	800c0f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b0:	d021      	beq.n	800c0f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0b2:	f7fd ff71 	bl	8009f98 <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d302      	bcc.n	800c0c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d116      	bne.n	800c0f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e2:	f043 0220 	orr.w	r2, r3, #32
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e023      	b.n	800c13e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	0c1b      	lsrs	r3, r3, #16
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d10d      	bne.n	800c11c <I2C_WaitOnFlagUntilTimeout+0x84>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	43da      	mvns	r2, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	4013      	ands	r3, r2
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bf0c      	ite	eq
 800c112:	2301      	moveq	r3, #1
 800c114:	2300      	movne	r3, #0
 800c116:	b2db      	uxtb	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	e00c      	b.n	800c136 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	43da      	mvns	r2, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	4013      	ands	r3, r2
 800c128:	b29b      	uxth	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	bf0c      	ite	eq
 800c12e:	2301      	moveq	r3, #1
 800c130:	2300      	movne	r3, #0
 800c132:	b2db      	uxtb	r3, r3
 800c134:	461a      	mov	r2, r3
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d0b6      	beq.n	800c0aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	607a      	str	r2, [r7, #4]
 800c152:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c154:	e051      	b.n	800c1fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c164:	d123      	bne.n	800c1ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c174:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c17e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2220      	movs	r2, #32
 800c18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	f043 0204 	orr.w	r2, r3, #4
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e046      	b.n	800c23c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b4:	d021      	beq.n	800c1fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1b6:	f7fd feef 	bl	8009f98 <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d302      	bcc.n	800c1cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d116      	bne.n	800c1fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2220      	movs	r2, #32
 800c1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e6:	f043 0220 	orr.w	r2, r3, #32
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e020      	b.n	800c23c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b01      	cmp	r3, #1
 800c202:	d10c      	bne.n	800c21e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	43da      	mvns	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	4013      	ands	r3, r2
 800c210:	b29b      	uxth	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	bf14      	ite	ne
 800c216:	2301      	movne	r3, #1
 800c218:	2300      	moveq	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	e00b      	b.n	800c236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	43da      	mvns	r2, r3
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	4013      	ands	r3, r2
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	bf14      	ite	ne
 800c230:	2301      	movne	r3, #1
 800c232:	2300      	moveq	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d18d      	bne.n	800c156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c250:	e02d      	b.n	800c2ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 f8ce 	bl	800c3f4 <I2C_IsAcknowledgeFailed>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c25e:	2301      	movs	r3, #1
 800c260:	e02d      	b.n	800c2be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c268:	d021      	beq.n	800c2ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c26a:	f7fd fe95 	bl	8009f98 <HAL_GetTick>
 800c26e:	4602      	mov	r2, r0
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	429a      	cmp	r2, r3
 800c278:	d302      	bcc.n	800c280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d116      	bne.n	800c2ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2220      	movs	r2, #32
 800c28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	f043 0220 	orr.w	r2, r3, #32
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e007      	b.n	800c2be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b8:	2b80      	cmp	r3, #128	; 0x80
 800c2ba:	d1ca      	bne.n	800c252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	60f8      	str	r0, [r7, #12]
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2d2:	e02d      	b.n	800c330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f88d 	bl	800c3f4 <I2C_IsAcknowledgeFailed>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e02d      	b.n	800c340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d021      	beq.n	800c330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ec:	f7fd fe54 	bl	8009f98 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d302      	bcc.n	800c302 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d116      	bne.n	800c330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	f043 0220 	orr.w	r2, r3, #32
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e007      	b.n	800c340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	f003 0304 	and.w	r3, r3, #4
 800c33a:	2b04      	cmp	r3, #4
 800c33c:	d1ca      	bne.n	800c2d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c354:	e042      	b.n	800c3dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	f003 0310 	and.w	r3, r3, #16
 800c360:	2b10      	cmp	r3, #16
 800c362:	d119      	bne.n	800c398 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f06f 0210 	mvn.w	r2, #16
 800c36c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2220      	movs	r2, #32
 800c378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e029      	b.n	800c3ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c398:	f7fd fdfe 	bl	8009f98 <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d116      	bne.n	800c3dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c8:	f043 0220 	orr.w	r2, r3, #32
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e007      	b.n	800c3ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e6:	2b40      	cmp	r3, #64	; 0x40
 800c3e8:	d1b5      	bne.n	800c356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c40a:	d11b      	bne.n	800c444 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c414:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2220      	movs	r2, #32
 800c420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c430:	f043 0204 	orr.w	r2, r3, #4
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e000      	b.n	800c446 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
	...

0800c454 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c45e:	2300      	movs	r3, #0
 800c460:	603b      	str	r3, [r7, #0]
 800c462:	4b20      	ldr	r3, [pc, #128]	; (800c4e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	4a1f      	ldr	r2, [pc, #124]	; (800c4e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c46c:	6413      	str	r3, [r2, #64]	; 0x40
 800c46e:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c47a:	4b1b      	ldr	r3, [pc, #108]	; (800c4e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800c47c:	2201      	movs	r2, #1
 800c47e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c480:	f7fd fd8a 	bl	8009f98 <HAL_GetTick>
 800c484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c486:	e009      	b.n	800c49c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c488:	f7fd fd86 	bl	8009f98 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c496:	d901      	bls.n	800c49c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c498:	2303      	movs	r3, #3
 800c49a:	e01f      	b.n	800c4dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c49c:	4b13      	ldr	r3, [pc, #76]	; (800c4ec <HAL_PWREx_EnableOverDrive+0x98>)
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a8:	d1ee      	bne.n	800c488 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c4aa:	4b11      	ldr	r3, [pc, #68]	; (800c4f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c4b0:	f7fd fd72 	bl	8009f98 <HAL_GetTick>
 800c4b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4b6:	e009      	b.n	800c4cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4b8:	f7fd fd6e 	bl	8009f98 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4c6:	d901      	bls.n	800c4cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e007      	b.n	800c4dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4cc:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <HAL_PWREx_EnableOverDrive+0x98>)
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d8:	d1ee      	bne.n	800c4b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	40023800 	.word	0x40023800
 800c4e8:	420e0040 	.word	0x420e0040
 800c4ec:	40007000 	.word	0x40007000
 800c4f0:	420e0044 	.word	0x420e0044

0800c4f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e0cc      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c508:	4b68      	ldr	r3, [pc, #416]	; (800c6ac <HAL_RCC_ClockConfig+0x1b8>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 030f 	and.w	r3, r3, #15
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d90c      	bls.n	800c530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c516:	4b65      	ldr	r3, [pc, #404]	; (800c6ac <HAL_RCC_ClockConfig+0x1b8>)
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c51e:	4b63      	ldr	r3, [pc, #396]	; (800c6ac <HAL_RCC_ClockConfig+0x1b8>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 030f 	and.w	r3, r3, #15
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d001      	beq.n	800c530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e0b8      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d020      	beq.n	800c57e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d005      	beq.n	800c554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c548:	4b59      	ldr	r3, [pc, #356]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	4a58      	ldr	r2, [pc, #352]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c54e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 0308 	and.w	r3, r3, #8
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d005      	beq.n	800c56c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c560:	4b53      	ldr	r3, [pc, #332]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	4a52      	ldr	r2, [pc, #328]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c56a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c56c:	4b50      	ldr	r3, [pc, #320]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	494d      	ldr	r1, [pc, #308]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	2b00      	cmp	r3, #0
 800c588:	d044      	beq.n	800c614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d107      	bne.n	800c5a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c592:	4b47      	ldr	r3, [pc, #284]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d119      	bne.n	800c5d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e07f      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d003      	beq.n	800c5b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d107      	bne.n	800c5c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5b2:	4b3f      	ldr	r3, [pc, #252]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d109      	bne.n	800c5d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e06f      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5c2:	4b3b      	ldr	r3, [pc, #236]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0302 	and.w	r3, r3, #2
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e067      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c5d2:	4b37      	ldr	r3, [pc, #220]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f023 0203 	bic.w	r2, r3, #3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	4934      	ldr	r1, [pc, #208]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c5e4:	f7fd fcd8 	bl	8009f98 <HAL_GetTick>
 800c5e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5ea:	e00a      	b.n	800c602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5ec:	f7fd fcd4 	bl	8009f98 <HAL_GetTick>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e04f      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c602:	4b2b      	ldr	r3, [pc, #172]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f003 020c 	and.w	r2, r3, #12
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	429a      	cmp	r2, r3
 800c612:	d1eb      	bne.n	800c5ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c614:	4b25      	ldr	r3, [pc, #148]	; (800c6ac <HAL_RCC_ClockConfig+0x1b8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 030f 	and.w	r3, r3, #15
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d20c      	bcs.n	800c63c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c622:	4b22      	ldr	r3, [pc, #136]	; (800c6ac <HAL_RCC_ClockConfig+0x1b8>)
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	b2d2      	uxtb	r2, r2
 800c628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c62a:	4b20      	ldr	r3, [pc, #128]	; (800c6ac <HAL_RCC_ClockConfig+0x1b8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 030f 	and.w	r3, r3, #15
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d001      	beq.n	800c63c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	e032      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b00      	cmp	r3, #0
 800c646:	d008      	beq.n	800c65a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c648:	4b19      	ldr	r3, [pc, #100]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	4916      	ldr	r1, [pc, #88]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c656:	4313      	orrs	r3, r2
 800c658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 0308 	and.w	r3, r3, #8
 800c662:	2b00      	cmp	r3, #0
 800c664:	d009      	beq.n	800c67a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c666:	4b12      	ldr	r3, [pc, #72]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	490e      	ldr	r1, [pc, #56]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c676:	4313      	orrs	r3, r2
 800c678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c67a:	f000 f821 	bl	800c6c0 <HAL_RCC_GetSysClockFreq>
 800c67e:	4601      	mov	r1, r0
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	091b      	lsrs	r3, r3, #4
 800c686:	f003 030f 	and.w	r3, r3, #15
 800c68a:	4a0a      	ldr	r2, [pc, #40]	; (800c6b4 <HAL_RCC_ClockConfig+0x1c0>)
 800c68c:	5cd3      	ldrb	r3, [r2, r3]
 800c68e:	fa21 f303 	lsr.w	r3, r1, r3
 800c692:	4a09      	ldr	r2, [pc, #36]	; (800c6b8 <HAL_RCC_ClockConfig+0x1c4>)
 800c694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c696:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <HAL_RCC_ClockConfig+0x1c8>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fd fc38 	bl	8009f10 <HAL_InitTick>

  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	40023c00 	.word	0x40023c00
 800c6b0:	40023800 	.word	0x40023800
 800c6b4:	08019228 	.word	0x08019228
 800c6b8:	20000000 	.word	0x20000000
 800c6bc:	20000004 	.word	0x20000004

0800c6c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	607b      	str	r3, [r7, #4]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c6d6:	4b63      	ldr	r3, [pc, #396]	; (800c864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	f003 030c 	and.w	r3, r3, #12
 800c6de:	2b04      	cmp	r3, #4
 800c6e0:	d007      	beq.n	800c6f2 <HAL_RCC_GetSysClockFreq+0x32>
 800c6e2:	2b08      	cmp	r3, #8
 800c6e4:	d008      	beq.n	800c6f8 <HAL_RCC_GetSysClockFreq+0x38>
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f040 80b4 	bne.w	800c854 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c6ec:	4b5e      	ldr	r3, [pc, #376]	; (800c868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c6ee:	60bb      	str	r3, [r7, #8]
       break;
 800c6f0:	e0b3      	b.n	800c85a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c6f2:	4b5d      	ldr	r3, [pc, #372]	; (800c868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c6f4:	60bb      	str	r3, [r7, #8]
      break;
 800c6f6:	e0b0      	b.n	800c85a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c6f8:	4b5a      	ldr	r3, [pc, #360]	; (800c864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c702:	4b58      	ldr	r3, [pc, #352]	; (800c864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d04a      	beq.n	800c7a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c70e:	4b55      	ldr	r3, [pc, #340]	; (800c864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	099b      	lsrs	r3, r3, #6
 800c714:	f04f 0400 	mov.w	r4, #0
 800c718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c71c:	f04f 0200 	mov.w	r2, #0
 800c720:	ea03 0501 	and.w	r5, r3, r1
 800c724:	ea04 0602 	and.w	r6, r4, r2
 800c728:	4629      	mov	r1, r5
 800c72a:	4632      	mov	r2, r6
 800c72c:	f04f 0300 	mov.w	r3, #0
 800c730:	f04f 0400 	mov.w	r4, #0
 800c734:	0154      	lsls	r4, r2, #5
 800c736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c73a:	014b      	lsls	r3, r1, #5
 800c73c:	4619      	mov	r1, r3
 800c73e:	4622      	mov	r2, r4
 800c740:	1b49      	subs	r1, r1, r5
 800c742:	eb62 0206 	sbc.w	r2, r2, r6
 800c746:	f04f 0300 	mov.w	r3, #0
 800c74a:	f04f 0400 	mov.w	r4, #0
 800c74e:	0194      	lsls	r4, r2, #6
 800c750:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c754:	018b      	lsls	r3, r1, #6
 800c756:	1a5b      	subs	r3, r3, r1
 800c758:	eb64 0402 	sbc.w	r4, r4, r2
 800c75c:	f04f 0100 	mov.w	r1, #0
 800c760:	f04f 0200 	mov.w	r2, #0
 800c764:	00e2      	lsls	r2, r4, #3
 800c766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c76a:	00d9      	lsls	r1, r3, #3
 800c76c:	460b      	mov	r3, r1
 800c76e:	4614      	mov	r4, r2
 800c770:	195b      	adds	r3, r3, r5
 800c772:	eb44 0406 	adc.w	r4, r4, r6
 800c776:	f04f 0100 	mov.w	r1, #0
 800c77a:	f04f 0200 	mov.w	r2, #0
 800c77e:	02a2      	lsls	r2, r4, #10
 800c780:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c784:	0299      	lsls	r1, r3, #10
 800c786:	460b      	mov	r3, r1
 800c788:	4614      	mov	r4, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	4621      	mov	r1, r4
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f04f 0400 	mov.w	r4, #0
 800c794:	461a      	mov	r2, r3
 800c796:	4623      	mov	r3, r4
 800c798:	f7f4 fa8e 	bl	8000cb8 <__aeabi_uldivmod>
 800c79c:	4603      	mov	r3, r0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	e049      	b.n	800c838 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7a4:	4b2f      	ldr	r3, [pc, #188]	; (800c864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	099b      	lsrs	r3, r3, #6
 800c7aa:	f04f 0400 	mov.w	r4, #0
 800c7ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c7b2:	f04f 0200 	mov.w	r2, #0
 800c7b6:	ea03 0501 	and.w	r5, r3, r1
 800c7ba:	ea04 0602 	and.w	r6, r4, r2
 800c7be:	4629      	mov	r1, r5
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	f04f 0300 	mov.w	r3, #0
 800c7c6:	f04f 0400 	mov.w	r4, #0
 800c7ca:	0154      	lsls	r4, r2, #5
 800c7cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c7d0:	014b      	lsls	r3, r1, #5
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	1b49      	subs	r1, r1, r5
 800c7d8:	eb62 0206 	sbc.w	r2, r2, r6
 800c7dc:	f04f 0300 	mov.w	r3, #0
 800c7e0:	f04f 0400 	mov.w	r4, #0
 800c7e4:	0194      	lsls	r4, r2, #6
 800c7e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c7ea:	018b      	lsls	r3, r1, #6
 800c7ec:	1a5b      	subs	r3, r3, r1
 800c7ee:	eb64 0402 	sbc.w	r4, r4, r2
 800c7f2:	f04f 0100 	mov.w	r1, #0
 800c7f6:	f04f 0200 	mov.w	r2, #0
 800c7fa:	00e2      	lsls	r2, r4, #3
 800c7fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c800:	00d9      	lsls	r1, r3, #3
 800c802:	460b      	mov	r3, r1
 800c804:	4614      	mov	r4, r2
 800c806:	195b      	adds	r3, r3, r5
 800c808:	eb44 0406 	adc.w	r4, r4, r6
 800c80c:	f04f 0100 	mov.w	r1, #0
 800c810:	f04f 0200 	mov.w	r2, #0
 800c814:	02a2      	lsls	r2, r4, #10
 800c816:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c81a:	0299      	lsls	r1, r3, #10
 800c81c:	460b      	mov	r3, r1
 800c81e:	4614      	mov	r4, r2
 800c820:	4618      	mov	r0, r3
 800c822:	4621      	mov	r1, r4
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f04f 0400 	mov.w	r4, #0
 800c82a:	461a      	mov	r2, r3
 800c82c:	4623      	mov	r3, r4
 800c82e:	f7f4 fa43 	bl	8000cb8 <__aeabi_uldivmod>
 800c832:	4603      	mov	r3, r0
 800c834:	460c      	mov	r4, r1
 800c836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c838:	4b0a      	ldr	r3, [pc, #40]	; (800c864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	0c1b      	lsrs	r3, r3, #16
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	3301      	adds	r3, #1
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c850:	60bb      	str	r3, [r7, #8]
      break;
 800c852:	e002      	b.n	800c85a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c854:	4b04      	ldr	r3, [pc, #16]	; (800c868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c856:	60bb      	str	r3, [r7, #8]
      break;
 800c858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c85a:	68bb      	ldr	r3, [r7, #8]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c864:	40023800 	.word	0x40023800
 800c868:	00f42400 	.word	0x00f42400

0800c86c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c86c:	b480      	push	{r7}
 800c86e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c870:	4b03      	ldr	r3, [pc, #12]	; (800c880 <HAL_RCC_GetHCLKFreq+0x14>)
 800c872:	681b      	ldr	r3, [r3, #0]
}
 800c874:	4618      	mov	r0, r3
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20000000 	.word	0x20000000

0800c884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c888:	f7ff fff0 	bl	800c86c <HAL_RCC_GetHCLKFreq>
 800c88c:	4601      	mov	r1, r0
 800c88e:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	0a9b      	lsrs	r3, r3, #10
 800c894:	f003 0307 	and.w	r3, r3, #7
 800c898:	4a03      	ldr	r2, [pc, #12]	; (800c8a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c89a:	5cd3      	ldrb	r3, [r2, r3]
 800c89c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	40023800 	.word	0x40023800
 800c8a8:	08019238 	.word	0x08019238

0800c8ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c8b0:	f7ff ffdc 	bl	800c86c <HAL_RCC_GetHCLKFreq>
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	0b5b      	lsrs	r3, r3, #13
 800c8bc:	f003 0307 	and.w	r3, r3, #7
 800c8c0:	4a03      	ldr	r2, [pc, #12]	; (800c8d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c8c2:	5cd3      	ldrb	r3, [r2, r3]
 800c8c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	40023800 	.word	0x40023800
 800c8d0:	08019238 	.word	0x08019238

0800c8d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00a      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c8fc:	4b66      	ldr	r3, [pc, #408]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c902:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c90a:	4963      	ldr	r1, [pc, #396]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c90c:	4313      	orrs	r3, r2
 800c90e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00a      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c91e:	4b5e      	ldr	r3, [pc, #376]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c924:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92c:	495a      	ldr	r1, [pc, #360]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c92e:	4313      	orrs	r3, r2
 800c930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10b      	bne.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d105      	bne.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c954:	2b00      	cmp	r3, #0
 800c956:	d075      	beq.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c958:	4b50      	ldr	r3, [pc, #320]	; (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c95e:	f7fd fb1b 	bl	8009f98 <HAL_GetTick>
 800c962:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c964:	e008      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c966:	f7fd fb17 	bl	8009f98 <HAL_GetTick>
 800c96a:	4602      	mov	r2, r0
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	2b02      	cmp	r3, #2
 800c972:	d901      	bls.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c974:	2303      	movs	r3, #3
 800c976:	e1dc      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c978:	4b47      	ldr	r3, [pc, #284]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1f0      	bne.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d009      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	019a      	lsls	r2, r3, #6
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	071b      	lsls	r3, r3, #28
 800c99c:	493e      	ldr	r1, [pc, #248]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d01f      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c9b0:	4b39      	ldr	r3, [pc, #228]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b6:	0f1b      	lsrs	r3, r3, #28
 800c9b8:	f003 0307 	and.w	r3, r3, #7
 800c9bc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	019a      	lsls	r2, r3, #6
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	061b      	lsls	r3, r3, #24
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	071b      	lsls	r3, r3, #28
 800c9d0:	4931      	ldr	r1, [pc, #196]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c9d8:	4b2f      	ldr	r3, [pc, #188]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9de:	f023 021f 	bic.w	r2, r3, #31
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	492b      	ldr	r1, [pc, #172]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00d      	beq.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	019a      	lsls	r2, r3, #6
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	061b      	lsls	r3, r3, #24
 800ca08:	431a      	orrs	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	071b      	lsls	r3, r3, #28
 800ca10:	4921      	ldr	r1, [pc, #132]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca12:	4313      	orrs	r3, r2
 800ca14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ca18:	4b20      	ldr	r3, [pc, #128]	; (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca1e:	f7fd fabb 	bl	8009f98 <HAL_GetTick>
 800ca22:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca24:	e008      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ca26:	f7fd fab7 	bl	8009f98 <HAL_GetTick>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d901      	bls.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca34:	2303      	movs	r3, #3
 800ca36:	e17c      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca38:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d0f0      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d112      	bne.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10c      	bne.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 80ce 	beq.w	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ca6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca72:	f040 80c8 	bne.w	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ca76:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca7c:	f7fd fa8c 	bl	8009f98 <HAL_GetTick>
 800ca80:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca82:	e00f      	b.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ca84:	f7fd fa88 	bl	8009f98 <HAL_GetTick>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d908      	bls.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e14d      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800ca96:	bf00      	nop
 800ca98:	40023800 	.word	0x40023800
 800ca9c:	42470068 	.word	0x42470068
 800caa0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800caa4:	4ba5      	ldr	r3, [pc, #660]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800caac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab0:	d0e8      	beq.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 0304 	and.w	r3, r3, #4
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d02e      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800cabe:	4b9f      	ldr	r3, [pc, #636]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac4:	0c1b      	lsrs	r3, r3, #16
 800cac6:	f003 0303 	and.w	r3, r3, #3
 800caca:	3301      	adds	r3, #1
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cad0:	4b9a      	ldr	r3, [pc, #616]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad6:	0f1b      	lsrs	r3, r3, #28
 800cad8:	f003 0307 	and.w	r3, r3, #7
 800cadc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	019a      	lsls	r2, r3, #6
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	085b      	lsrs	r3, r3, #1
 800cae8:	3b01      	subs	r3, #1
 800caea:	041b      	lsls	r3, r3, #16
 800caec:	431a      	orrs	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	061b      	lsls	r3, r3, #24
 800caf4:	431a      	orrs	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	071b      	lsls	r3, r3, #28
 800cafa:	4990      	ldr	r1, [pc, #576]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cafc:	4313      	orrs	r3, r2
 800cafe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cb02:	4b8e      	ldr	r3, [pc, #568]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	3b01      	subs	r3, #1
 800cb12:	021b      	lsls	r3, r3, #8
 800cb14:	4989      	ldr	r1, [pc, #548]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb16:	4313      	orrs	r3, r2
 800cb18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0308 	and.w	r3, r3, #8
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d02c      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800cb28:	4b84      	ldr	r3, [pc, #528]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb2e:	0c1b      	lsrs	r3, r3, #16
 800cb30:	f003 0303 	and.w	r3, r3, #3
 800cb34:	3301      	adds	r3, #1
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb3a:	4b80      	ldr	r3, [pc, #512]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb40:	0e1b      	lsrs	r3, r3, #24
 800cb42:	f003 030f 	and.w	r3, r3, #15
 800cb46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	019a      	lsls	r2, r3, #6
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	085b      	lsrs	r3, r3, #1
 800cb52:	3b01      	subs	r3, #1
 800cb54:	041b      	lsls	r3, r3, #16
 800cb56:	431a      	orrs	r2, r3
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	061b      	lsls	r3, r3, #24
 800cb5c:	431a      	orrs	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	69db      	ldr	r3, [r3, #28]
 800cb62:	071b      	lsls	r3, r3, #28
 800cb64:	4975      	ldr	r1, [pc, #468]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb66:	4313      	orrs	r3, r2
 800cb68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cb6c:	4b73      	ldr	r3, [pc, #460]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7a:	4970      	ldr	r1, [pc, #448]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d024      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cb92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb96:	d11f      	bne.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb98:	4b68      	ldr	r3, [pc, #416]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb9e:	0e1b      	lsrs	r3, r3, #24
 800cba0:	f003 030f 	and.w	r3, r3, #15
 800cba4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cba6:	4b65      	ldr	r3, [pc, #404]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbac:	0f1b      	lsrs	r3, r3, #28
 800cbae:	f003 0307 	and.w	r3, r3, #7
 800cbb2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	019a      	lsls	r2, r3, #6
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	041b      	lsls	r3, r3, #16
 800cbc4:	431a      	orrs	r2, r3
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	061b      	lsls	r3, r3, #24
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	071b      	lsls	r3, r3, #28
 800cbd0:	495a      	ldr	r1, [pc, #360]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cbd8:	4b59      	ldr	r3, [pc, #356]	; (800cd40 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cbda:	2201      	movs	r2, #1
 800cbdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cbde:	f7fd f9db 	bl	8009f98 <HAL_GetTick>
 800cbe2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbe4:	e008      	b.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cbe6:	f7fd f9d7 	bl	8009f98 <HAL_GetTick>
 800cbea:	4602      	mov	r2, r0
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d901      	bls.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e09c      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbf8:	4b50      	ldr	r3, [pc, #320]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc04:	d1ef      	bne.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 8083 	beq.w	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc14:	2300      	movs	r3, #0
 800cc16:	60bb      	str	r3, [r7, #8]
 800cc18:	4b48      	ldr	r3, [pc, #288]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1c:	4a47      	ldr	r2, [pc, #284]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc22:	6413      	str	r3, [r2, #64]	; 0x40
 800cc24:	4b45      	ldr	r3, [pc, #276]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc2c:	60bb      	str	r3, [r7, #8]
 800cc2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cc30:	4b44      	ldr	r3, [pc, #272]	; (800cd44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a43      	ldr	r2, [pc, #268]	; (800cd44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cc36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc3a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc3c:	f7fd f9ac 	bl	8009f98 <HAL_GetTick>
 800cc40:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cc42:	e008      	b.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cc44:	f7fd f9a8 	bl	8009f98 <HAL_GetTick>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d901      	bls.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e06d      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cc56:	4b3b      	ldr	r3, [pc, #236]	; (800cd44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d0f0      	beq.n	800cc44 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cc62:	4b36      	ldr	r3, [pc, #216]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc6a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d02f      	beq.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d028      	beq.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc80:	4b2e      	ldr	r3, [pc, #184]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc88:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cc8a:	4b2f      	ldr	r3, [pc, #188]	; (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cc90:	4b2d      	ldr	r3, [pc, #180]	; (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cc96:	4a29      	ldr	r2, [pc, #164]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cc9c:	4b27      	ldr	r3, [pc, #156]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d114      	bne.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cca8:	f7fd f976 	bl	8009f98 <HAL_GetTick>
 800ccac:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccae:	e00a      	b.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccb0:	f7fd f972 	bl	8009f98 <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d901      	bls.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e035      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccc6:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccca:	f003 0302 	and.w	r3, r3, #2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0ee      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccde:	d10d      	bne.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cce0:	4b16      	ldr	r3, [pc, #88]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ccf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccf4:	4911      	ldr	r1, [pc, #68]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	608b      	str	r3, [r1, #8]
 800ccfa:	e005      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ccfc:	4b0f      	ldr	r3, [pc, #60]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	4a0e      	ldr	r2, [pc, #56]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cd06:	6093      	str	r3, [r2, #8]
 800cd08:	4b0c      	ldr	r3, [pc, #48]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd14:	4909      	ldr	r1, [pc, #36]	; (800cd3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 0310 	and.w	r3, r3, #16
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d004      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cd2c:	4b07      	ldr	r3, [pc, #28]	; (800cd4c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cd2e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3720      	adds	r7, #32
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	40023800 	.word	0x40023800
 800cd40:	42470070 	.word	0x42470070
 800cd44:	40007000 	.word	0x40007000
 800cd48:	42470e40 	.word	0x42470e40
 800cd4c:	424711e0 	.word	0x424711e0

0800cd50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d075      	beq.n	800ce54 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cd68:	4ba2      	ldr	r3, [pc, #648]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f003 030c 	and.w	r3, r3, #12
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	d00c      	beq.n	800cd8e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd74:	4b9f      	ldr	r3, [pc, #636]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cd7c:	2b08      	cmp	r3, #8
 800cd7e:	d112      	bne.n	800cda6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd80:	4b9c      	ldr	r3, [pc, #624]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd8c:	d10b      	bne.n	800cda6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd8e:	4b99      	ldr	r3, [pc, #612]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d05b      	beq.n	800ce52 <HAL_RCC_OscConfig+0x102>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d157      	bne.n	800ce52 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e20b      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdae:	d106      	bne.n	800cdbe <HAL_RCC_OscConfig+0x6e>
 800cdb0:	4b90      	ldr	r3, [pc, #576]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a8f      	ldr	r2, [pc, #572]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	e01d      	b.n	800cdfa <HAL_RCC_OscConfig+0xaa>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cdc6:	d10c      	bne.n	800cde2 <HAL_RCC_OscConfig+0x92>
 800cdc8:	4b8a      	ldr	r3, [pc, #552]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a89      	ldr	r2, [pc, #548]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cdd2:	6013      	str	r3, [r2, #0]
 800cdd4:	4b87      	ldr	r3, [pc, #540]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a86      	ldr	r2, [pc, #536]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdde:	6013      	str	r3, [r2, #0]
 800cde0:	e00b      	b.n	800cdfa <HAL_RCC_OscConfig+0xaa>
 800cde2:	4b84      	ldr	r3, [pc, #528]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a83      	ldr	r2, [pc, #524]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cde8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdec:	6013      	str	r3, [r2, #0]
 800cdee:	4b81      	ldr	r3, [pc, #516]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a80      	ldr	r2, [pc, #512]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cdf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cdf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d013      	beq.n	800ce2a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce02:	f7fd f8c9 	bl	8009f98 <HAL_GetTick>
 800ce06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce08:	e008      	b.n	800ce1c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ce0a:	f7fd f8c5 	bl	8009f98 <HAL_GetTick>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	2b64      	cmp	r3, #100	; 0x64
 800ce16:	d901      	bls.n	800ce1c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e1d0      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce1c:	4b75      	ldr	r3, [pc, #468]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0f0      	beq.n	800ce0a <HAL_RCC_OscConfig+0xba>
 800ce28:	e014      	b.n	800ce54 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce2a:	f7fd f8b5 	bl	8009f98 <HAL_GetTick>
 800ce2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce30:	e008      	b.n	800ce44 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ce32:	f7fd f8b1 	bl	8009f98 <HAL_GetTick>
 800ce36:	4602      	mov	r2, r0
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	2b64      	cmp	r3, #100	; 0x64
 800ce3e:	d901      	bls.n	800ce44 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ce40:	2303      	movs	r3, #3
 800ce42:	e1bc      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce44:	4b6b      	ldr	r3, [pc, #428]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f0      	bne.n	800ce32 <HAL_RCC_OscConfig+0xe2>
 800ce50:	e000      	b.n	800ce54 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0302 	and.w	r3, r3, #2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d063      	beq.n	800cf28 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ce60:	4b64      	ldr	r3, [pc, #400]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	f003 030c 	and.w	r3, r3, #12
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce6c:	4b61      	ldr	r3, [pc, #388]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ce74:	2b08      	cmp	r3, #8
 800ce76:	d11c      	bne.n	800ceb2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce78:	4b5e      	ldr	r3, [pc, #376]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d116      	bne.n	800ceb2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce84:	4b5b      	ldr	r3, [pc, #364]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 0302 	and.w	r3, r3, #2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d005      	beq.n	800ce9c <HAL_RCC_OscConfig+0x14c>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d001      	beq.n	800ce9c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e190      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce9c:	4b55      	ldr	r3, [pc, #340]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	4952      	ldr	r1, [pc, #328]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ceb0:	e03a      	b.n	800cf28 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d020      	beq.n	800cefc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ceba:	4b4f      	ldr	r3, [pc, #316]	; (800cff8 <HAL_RCC_OscConfig+0x2a8>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cec0:	f7fd f86a 	bl	8009f98 <HAL_GetTick>
 800cec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cec6:	e008      	b.n	800ceda <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cec8:	f7fd f866 	bl	8009f98 <HAL_GetTick>
 800cecc:	4602      	mov	r2, r0
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d901      	bls.n	800ceda <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ced6:	2303      	movs	r3, #3
 800ced8:	e171      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ceda:	4b46      	ldr	r3, [pc, #280]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0302 	and.w	r3, r3, #2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0f0      	beq.n	800cec8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cee6:	4b43      	ldr	r3, [pc, #268]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	493f      	ldr	r1, [pc, #252]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	600b      	str	r3, [r1, #0]
 800cefa:	e015      	b.n	800cf28 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cefc:	4b3e      	ldr	r3, [pc, #248]	; (800cff8 <HAL_RCC_OscConfig+0x2a8>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf02:	f7fd f849 	bl	8009f98 <HAL_GetTick>
 800cf06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf08:	e008      	b.n	800cf1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cf0a:	f7fd f845 	bl	8009f98 <HAL_GetTick>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d901      	bls.n	800cf1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e150      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf1c:	4b35      	ldr	r3, [pc, #212]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0302 	and.w	r3, r3, #2
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1f0      	bne.n	800cf0a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0308 	and.w	r3, r3, #8
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d030      	beq.n	800cf96 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d016      	beq.n	800cf6a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf3c:	4b2f      	ldr	r3, [pc, #188]	; (800cffc <HAL_RCC_OscConfig+0x2ac>)
 800cf3e:	2201      	movs	r2, #1
 800cf40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf42:	f7fd f829 	bl	8009f98 <HAL_GetTick>
 800cf46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf48:	e008      	b.n	800cf5c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf4a:	f7fd f825 	bl	8009f98 <HAL_GetTick>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d901      	bls.n	800cf5c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e130      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf5c:	4b25      	ldr	r3, [pc, #148]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cf5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0f0      	beq.n	800cf4a <HAL_RCC_OscConfig+0x1fa>
 800cf68:	e015      	b.n	800cf96 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf6a:	4b24      	ldr	r3, [pc, #144]	; (800cffc <HAL_RCC_OscConfig+0x2ac>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf70:	f7fd f812 	bl	8009f98 <HAL_GetTick>
 800cf74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf76:	e008      	b.n	800cf8a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf78:	f7fd f80e 	bl	8009f98 <HAL_GetTick>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d901      	bls.n	800cf8a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cf86:	2303      	movs	r3, #3
 800cf88:	e119      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf8a:	4b1a      	ldr	r3, [pc, #104]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cf8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf8e:	f003 0302 	and.w	r3, r3, #2
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1f0      	bne.n	800cf78 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0304 	and.w	r3, r3, #4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 809f 	beq.w	800d0e2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfa8:	4b12      	ldr	r3, [pc, #72]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10f      	bne.n	800cfd4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	4b0e      	ldr	r3, [pc, #56]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbc:	4a0d      	ldr	r2, [pc, #52]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cfbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfc2:	6413      	str	r3, [r2, #64]	; 0x40
 800cfc4:	4b0b      	ldr	r3, [pc, #44]	; (800cff4 <HAL_RCC_OscConfig+0x2a4>)
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfcc:	60fb      	str	r3, [r7, #12]
 800cfce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfd4:	4b0a      	ldr	r3, [pc, #40]	; (800d000 <HAL_RCC_OscConfig+0x2b0>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d120      	bne.n	800d022 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cfe0:	4b07      	ldr	r3, [pc, #28]	; (800d000 <HAL_RCC_OscConfig+0x2b0>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a06      	ldr	r2, [pc, #24]	; (800d000 <HAL_RCC_OscConfig+0x2b0>)
 800cfe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfec:	f7fc ffd4 	bl	8009f98 <HAL_GetTick>
 800cff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cff2:	e010      	b.n	800d016 <HAL_RCC_OscConfig+0x2c6>
 800cff4:	40023800 	.word	0x40023800
 800cff8:	42470000 	.word	0x42470000
 800cffc:	42470e80 	.word	0x42470e80
 800d000:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d004:	f7fc ffc8 	bl	8009f98 <HAL_GetTick>
 800d008:	4602      	mov	r2, r0
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d901      	bls.n	800d016 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800d012:	2303      	movs	r3, #3
 800d014:	e0d3      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d016:	4b6c      	ldr	r3, [pc, #432]	; (800d1c8 <HAL_RCC_OscConfig+0x478>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d0f0      	beq.n	800d004 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	2b01      	cmp	r3, #1
 800d028:	d106      	bne.n	800d038 <HAL_RCC_OscConfig+0x2e8>
 800d02a:	4b68      	ldr	r3, [pc, #416]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d02e:	4a67      	ldr	r2, [pc, #412]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d030:	f043 0301 	orr.w	r3, r3, #1
 800d034:	6713      	str	r3, [r2, #112]	; 0x70
 800d036:	e01c      	b.n	800d072 <HAL_RCC_OscConfig+0x322>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	2b05      	cmp	r3, #5
 800d03e:	d10c      	bne.n	800d05a <HAL_RCC_OscConfig+0x30a>
 800d040:	4b62      	ldr	r3, [pc, #392]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d044:	4a61      	ldr	r2, [pc, #388]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d046:	f043 0304 	orr.w	r3, r3, #4
 800d04a:	6713      	str	r3, [r2, #112]	; 0x70
 800d04c:	4b5f      	ldr	r3, [pc, #380]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d050:	4a5e      	ldr	r2, [pc, #376]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d052:	f043 0301 	orr.w	r3, r3, #1
 800d056:	6713      	str	r3, [r2, #112]	; 0x70
 800d058:	e00b      	b.n	800d072 <HAL_RCC_OscConfig+0x322>
 800d05a:	4b5c      	ldr	r3, [pc, #368]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d05e:	4a5b      	ldr	r2, [pc, #364]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d060:	f023 0301 	bic.w	r3, r3, #1
 800d064:	6713      	str	r3, [r2, #112]	; 0x70
 800d066:	4b59      	ldr	r3, [pc, #356]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d06a:	4a58      	ldr	r2, [pc, #352]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d06c:	f023 0304 	bic.w	r3, r3, #4
 800d070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d015      	beq.n	800d0a6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d07a:	f7fc ff8d 	bl	8009f98 <HAL_GetTick>
 800d07e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d080:	e00a      	b.n	800d098 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d082:	f7fc ff89 	bl	8009f98 <HAL_GetTick>
 800d086:	4602      	mov	r2, r0
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d090:	4293      	cmp	r3, r2
 800d092:	d901      	bls.n	800d098 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	e092      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d098:	4b4c      	ldr	r3, [pc, #304]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09c:	f003 0302 	and.w	r3, r3, #2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0ee      	beq.n	800d082 <HAL_RCC_OscConfig+0x332>
 800d0a4:	e014      	b.n	800d0d0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0a6:	f7fc ff77 	bl	8009f98 <HAL_GetTick>
 800d0aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d0ac:	e00a      	b.n	800d0c4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d0ae:	f7fc ff73 	bl	8009f98 <HAL_GetTick>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d901      	bls.n	800d0c4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e07c      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d0c4:	4b41      	ldr	r3, [pc, #260]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1ee      	bne.n	800d0ae <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d105      	bne.n	800d0e2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0d6:	4b3d      	ldr	r3, [pc, #244]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0da:	4a3c      	ldr	r2, [pc, #240]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d0dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d068      	beq.n	800d1bc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d0ea:	4b38      	ldr	r3, [pc, #224]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f003 030c 	and.w	r3, r3, #12
 800d0f2:	2b08      	cmp	r3, #8
 800d0f4:	d060      	beq.n	800d1b8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	699b      	ldr	r3, [r3, #24]
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d145      	bne.n	800d18a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0fe:	4b34      	ldr	r3, [pc, #208]	; (800d1d0 <HAL_RCC_OscConfig+0x480>)
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d104:	f7fc ff48 	bl	8009f98 <HAL_GetTick>
 800d108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d10a:	e008      	b.n	800d11e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d10c:	f7fc ff44 	bl	8009f98 <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	2b02      	cmp	r3, #2
 800d118:	d901      	bls.n	800d11e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e04f      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d11e:	4b2b      	ldr	r3, [pc, #172]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1f0      	bne.n	800d10c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	69da      	ldr	r2, [r3, #28]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	431a      	orrs	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d138:	019b      	lsls	r3, r3, #6
 800d13a:	431a      	orrs	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d140:	085b      	lsrs	r3, r3, #1
 800d142:	3b01      	subs	r3, #1
 800d144:	041b      	lsls	r3, r3, #16
 800d146:	431a      	orrs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14c:	061b      	lsls	r3, r3, #24
 800d14e:	431a      	orrs	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d154:	071b      	lsls	r3, r3, #28
 800d156:	491d      	ldr	r1, [pc, #116]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d158:	4313      	orrs	r3, r2
 800d15a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d15c:	4b1c      	ldr	r3, [pc, #112]	; (800d1d0 <HAL_RCC_OscConfig+0x480>)
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d162:	f7fc ff19 	bl	8009f98 <HAL_GetTick>
 800d166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d168:	e008      	b.n	800d17c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d16a:	f7fc ff15 	bl	8009f98 <HAL_GetTick>
 800d16e:	4602      	mov	r2, r0
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	2b02      	cmp	r3, #2
 800d176:	d901      	bls.n	800d17c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d178:	2303      	movs	r3, #3
 800d17a:	e020      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d17c:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0f0      	beq.n	800d16a <HAL_RCC_OscConfig+0x41a>
 800d188:	e018      	b.n	800d1bc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d18a:	4b11      	ldr	r3, [pc, #68]	; (800d1d0 <HAL_RCC_OscConfig+0x480>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d190:	f7fc ff02 	bl	8009f98 <HAL_GetTick>
 800d194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d196:	e008      	b.n	800d1aa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d198:	f7fc fefe 	bl	8009f98 <HAL_GetTick>
 800d19c:	4602      	mov	r2, r0
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d901      	bls.n	800d1aa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e009      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d1aa:	4b08      	ldr	r3, [pc, #32]	; (800d1cc <HAL_RCC_OscConfig+0x47c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1f0      	bne.n	800d198 <HAL_RCC_OscConfig+0x448>
 800d1b6:	e001      	b.n	800d1bc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e000      	b.n	800d1be <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	40007000 	.word	0x40007000
 800d1cc:	40023800 	.word	0x40023800
 800d1d0:	42470060 	.word	0x42470060

0800d1d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e022      	b.n	800d22c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d105      	bne.n	800d1fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7f9 ff8f 	bl	800711c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2203      	movs	r2, #3
 800d202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f814 	bl	800d234 <HAL_SD_InitCard>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e00a      	b.n	800d22c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d234:	b5b0      	push	{r4, r5, r7, lr}
 800d236:	b08e      	sub	sp, #56	; 0x38
 800d238:	af04      	add	r7, sp, #16
 800d23a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d23c:	2300      	movs	r3, #0
 800d23e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d240:	2300      	movs	r3, #0
 800d242:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d244:	2300      	movs	r3, #0
 800d246:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d248:	2300      	movs	r3, #0
 800d24a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d24c:	2300      	movs	r3, #0
 800d24e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d250:	2376      	movs	r3, #118	; 0x76
 800d252:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681d      	ldr	r5, [r3, #0]
 800d258:	466c      	mov	r4, sp
 800d25a:	f107 0314 	add.w	r3, r7, #20
 800d25e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d266:	f107 0308 	add.w	r3, r7, #8
 800d26a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d26c:	4628      	mov	r0, r5
 800d26e:	f003 fa87 	bl	8010780 <SDIO_Init>
 800d272:	4603      	mov	r3, r0
 800d274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e031      	b.n	800d2e8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d284:	4b1a      	ldr	r3, [pc, #104]	; (800d2f0 <HAL_SD_InitCard+0xbc>)
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4618      	mov	r0, r3
 800d290:	f003 fabf 	bl	8010812 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d294:	4b16      	ldr	r3, [pc, #88]	; (800d2f0 <HAL_SD_InitCard+0xbc>)
 800d296:	2201      	movs	r2, #1
 800d298:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 ffc6 	bl	800e22c <SD_PowerON>
 800d2a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00b      	beq.n	800d2c0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e013      	b.n	800d2e8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fee5 	bl	800e090 <SD_InitCard>
 800d2c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2c8:	6a3b      	ldr	r3, [r7, #32]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00b      	beq.n	800d2e6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	431a      	orrs	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3728      	adds	r7, #40	; 0x28
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d2f0:	422580a0 	.word	0x422580a0

0800d2f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08c      	sub	sp, #48	; 0x30
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d107      	bne.n	800d31c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d310:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e0c7      	b.n	800d4ac <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b01      	cmp	r3, #1
 800d326:	f040 80c0 	bne.w	800d4aa <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d907      	bls.n	800d34e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d342:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e0ae      	b.n	800d4ac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2203      	movs	r2, #3
 800d352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2200      	movs	r2, #0
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d36c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d372:	4a50      	ldr	r2, [pc, #320]	; (800d4b4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37a:	4a4f      	ldr	r2, [pc, #316]	; (800d4b8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d37c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	2200      	movs	r2, #0
 800d384:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	3380      	adds	r3, #128	; 0x80
 800d390:	4619      	mov	r1, r3
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	025b      	lsls	r3, r3, #9
 800d398:	089b      	lsrs	r3, r3, #2
 800d39a:	f7fd fbef 	bl	800ab7c <HAL_DMA_Start_IT>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d017      	beq.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d3b2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a40      	ldr	r2, [pc, #256]	; (800d4bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e06b      	b.n	800d4ac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d3d4:	4b3a      	ldr	r3, [pc, #232]	; (800d4c0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d002      	beq.n	800d3e8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	025b      	lsls	r3, r3, #9
 800d3e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f003 faa1 	bl	8010938 <SDMMC_CmdBlockLength>
 800d3f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00f      	beq.n	800d41e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a2e      	ldr	r2, [pc, #184]	; (800d4bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d404:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	431a      	orrs	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e046      	b.n	800d4ac <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d41e:	f04f 33ff 	mov.w	r3, #4294967295
 800d422:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	025b      	lsls	r3, r3, #9
 800d428:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d42a:	2390      	movs	r3, #144	; 0x90
 800d42c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d42e:	2302      	movs	r3, #2
 800d430:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d432:	2300      	movs	r3, #0
 800d434:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d436:	2301      	movs	r3, #1
 800d438:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f107 0210 	add.w	r2, r7, #16
 800d442:	4611      	mov	r1, r2
 800d444:	4618      	mov	r0, r3
 800d446:	f003 fa4b 	bl	80108e0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d90a      	bls.n	800d466 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2282      	movs	r2, #130	; 0x82
 800d454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d45c:	4618      	mov	r0, r3
 800d45e:	f003 faaf 	bl	80109c0 <SDMMC_CmdReadMultiBlock>
 800d462:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d464:	e009      	b.n	800d47a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2281      	movs	r2, #129	; 0x81
 800d46a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d472:	4618      	mov	r0, r3
 800d474:	f003 fa82 	bl	801097c <SDMMC_CmdReadSingleBlock>
 800d478:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d012      	beq.n	800d4a6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a0d      	ldr	r2, [pc, #52]	; (800d4bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d486:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	431a      	orrs	r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e002      	b.n	800d4ac <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e000      	b.n	800d4ac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d4aa:	2302      	movs	r3, #2
  }
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3730      	adds	r7, #48	; 0x30
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	0800de9f 	.word	0x0800de9f
 800d4b8:	0800df11 	.word	0x0800df11
 800d4bc:	004005ff 	.word	0x004005ff
 800d4c0:	4225858c 	.word	0x4225858c

0800d4c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b08c      	sub	sp, #48	; 0x30
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d107      	bne.n	800d4ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e0ca      	b.n	800d682 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	f040 80c3 	bne.w	800d680 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	441a      	add	r2, r3
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d907      	bls.n	800d51e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d512:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e0b1      	b.n	800d682 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2203      	movs	r2, #3
 800d522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2200      	movs	r2, #0
 800d52c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f042 021a 	orr.w	r2, r2, #26
 800d53c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	4a52      	ldr	r2, [pc, #328]	; (800d68c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	4a51      	ldr	r2, [pc, #324]	; (800d690 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d54c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	2200      	movs	r2, #0
 800d554:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d002      	beq.n	800d564 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	025b      	lsls	r3, r3, #9
 800d562:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d56c:	4618      	mov	r0, r3
 800d56e:	f003 f9e3 	bl	8010938 <SDMMC_CmdBlockLength>
 800d572:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00f      	beq.n	800d59a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a45      	ldr	r2, [pc, #276]	; (800d694 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d588:	431a      	orrs	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e073      	b.n	800d682 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d90a      	bls.n	800d5b6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	22a0      	movs	r2, #160	; 0xa0
 800d5a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f003 fa4b 	bl	8010a48 <SDMMC_CmdWriteMultiBlock>
 800d5b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d5b4:	e009      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2290      	movs	r2, #144	; 0x90
 800d5ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f003 fa1e 	bl	8010a04 <SDMMC_CmdWriteSingleBlock>
 800d5c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d012      	beq.n	800d5f6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a2f      	ldr	r2, [pc, #188]	; (800d694 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d5d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e045      	b.n	800d682 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d5f6:	4b28      	ldr	r3, [pc, #160]	; (800d698 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d600:	68b9      	ldr	r1, [r7, #8]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3380      	adds	r3, #128	; 0x80
 800d608:	461a      	mov	r2, r3
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	025b      	lsls	r3, r3, #9
 800d60e:	089b      	lsrs	r3, r3, #2
 800d610:	f7fd fab4 	bl	800ab7c <HAL_DMA_Start_IT>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d01a      	beq.n	800d650 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f022 021a 	bic.w	r2, r2, #26
 800d628:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a19      	ldr	r2, [pc, #100]	; (800d694 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d630:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d636:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2200      	movs	r2, #0
 800d64a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e018      	b.n	800d682 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d650:	f04f 33ff 	mov.w	r3, #4294967295
 800d654:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	025b      	lsls	r3, r3, #9
 800d65a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d65c:	2390      	movs	r3, #144	; 0x90
 800d65e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d660:	2300      	movs	r3, #0
 800d662:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d664:	2300      	movs	r3, #0
 800d666:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d668:	2301      	movs	r3, #1
 800d66a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f107 0210 	add.w	r2, r7, #16
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f003 f932 	bl	80108e0 <SDIO_ConfigData>

      return HAL_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	e000      	b.n	800d682 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d680:	2302      	movs	r3, #2
  }
}
 800d682:	4618      	mov	r0, r3
 800d684:	3730      	adds	r7, #48	; 0x30
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	0800de75 	.word	0x0800de75
 800d690:	0800df11 	.word	0x0800df11
 800d694:	004005ff 	.word	0x004005ff
 800d698:	4225858c 	.word	0x4225858c

0800d69c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d008      	beq.n	800d6ca <HAL_SD_IRQHandler+0x2e>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f003 0308 	and.w	r3, r3, #8
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 ffc8 	bl	800e658 <SD_Read_IT>
 800d6c8:	e155      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 808f 	beq.w	800d7f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6e2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	6812      	ldr	r2, [r2, #0]
 800d6ee:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d6f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d6f6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f022 0201 	bic.w	r2, r2, #1
 800d706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f003 0308 	and.w	r3, r3, #8
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d039      	beq.n	800d786 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f003 0302 	and.w	r3, r3, #2
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d104      	bne.n	800d726 <HAL_SD_IRQHandler+0x8a>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f003 0320 	and.w	r3, r3, #32
 800d722:	2b00      	cmp	r3, #0
 800d724:	d011      	beq.n	800d74a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f003 f9ae 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800d730:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d008      	beq.n	800d74a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	431a      	orrs	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f91f 	bl	800d988 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d752:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d104      	bne.n	800d776 <HAL_SD_IRQHandler+0xda>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f003 fe04 	bl	8011384 <HAL_SD_RxCpltCallback>
 800d77c:	e0fb      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f003 fdf6 	bl	8011370 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d784:	e0f7      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 80f2 	beq.w	800d976 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d011      	beq.n	800d7c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f003 f973 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800d7a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d008      	beq.n	800d7c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f8e4 	bl	800d988 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0301 	and.w	r3, r3, #1
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f040 80d5 	bne.w	800d976 <HAL_SD_IRQHandler+0x2da>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f003 0302 	and.w	r3, r3, #2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f040 80cf 	bne.w	800d976 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f022 0208 	bic.w	r2, r2, #8
 800d7e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f003 fdbd 	bl	8011370 <HAL_SD_TxCpltCallback>
}
 800d7f6:	e0be      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d008      	beq.n	800d818 <HAL_SD_IRQHandler+0x17c>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f003 0308 	and.w	r3, r3, #8
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d003      	beq.n	800d818 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 ff72 	bl	800e6fa <SD_Write_IT>
 800d816:	e0ae      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d81e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d822:	2b00      	cmp	r3, #0
 800d824:	f000 80a7 	beq.w	800d976 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82e:	f003 0302 	and.w	r3, r3, #2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	f043 0202 	orr.w	r2, r3, #2
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d848:	f003 0308 	and.w	r3, r3, #8
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d005      	beq.n	800d85c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d854:	f043 0208 	orr.w	r2, r3, #8
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d862:	f003 0320 	and.w	r3, r3, #32
 800d866:	2b00      	cmp	r3, #0
 800d868:	d005      	beq.n	800d876 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86e:	f043 0220 	orr.w	r2, r3, #32
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d87c:	f003 0310 	and.w	r3, r3, #16
 800d880:	2b00      	cmp	r3, #0
 800d882:	d005      	beq.n	800d890 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	f043 0210 	orr.w	r2, r3, #16
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f240 523a 	movw	r2, #1338	; 0x53a
 800d898:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d8a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f003 f8ec 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	431a      	orrs	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f003 0308 	and.w	r3, r3, #8
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f855 	bl	800d988 <HAL_SD_ErrorCallback>
}
 800d8de:	e04a      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d045      	beq.n	800d976 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f003 0310 	and.w	r3, r3, #16
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d104      	bne.n	800d8fe <HAL_SD_IRQHandler+0x262>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f003 0320 	and.w	r3, r3, #32
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d011      	beq.n	800d922 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	4a1f      	ldr	r2, [pc, #124]	; (800d980 <HAL_SD_IRQHandler+0x2e4>)
 800d904:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fd f98e 	bl	800ac2c <HAL_DMA_Abort_IT>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d02f      	beq.n	800d976 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91a:	4618      	mov	r0, r3
 800d91c:	f000 fb4a 	bl	800dfb4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d920:	e029      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d104      	bne.n	800d936 <HAL_SD_IRQHandler+0x29a>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d011      	beq.n	800d95a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	4a12      	ldr	r2, [pc, #72]	; (800d984 <HAL_SD_IRQHandler+0x2e8>)
 800d93c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d942:	4618      	mov	r0, r3
 800d944:	f7fd f972 	bl	800ac2c <HAL_DMA_Abort_IT>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d013      	beq.n	800d976 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d952:	4618      	mov	r0, r3
 800d954:	f000 fb65 	bl	800e022 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d958:	e00d      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f003 fcf4 	bl	801135c <HAL_SD_AbortCallback>
}
 800d974:	e7ff      	b.n	800d976 <HAL_SD_IRQHandler+0x2da>
 800d976:	bf00      	nop
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	0800dfb5 	.word	0x0800dfb5
 800d984:	0800e023 	.word	0x0800e023

0800d988 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9aa:	0f9b      	lsrs	r3, r3, #30
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b6:	0e9b      	lsrs	r3, r3, #26
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 030f 	and.w	r3, r3, #15
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c8:	0e1b      	lsrs	r3, r3, #24
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 0303 	and.w	r3, r3, #3
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9da:	0c1b      	lsrs	r3, r3, #16
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e6:	0a1b      	lsrs	r3, r3, #8
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9fc:	0d1b      	lsrs	r3, r3, #20
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da08:	0c1b      	lsrs	r3, r3, #16
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	f003 030f 	and.w	r3, r3, #15
 800da10:	b2da      	uxtb	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da1a:	0bdb      	lsrs	r3, r3, #15
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2c:	0b9b      	lsrs	r3, r3, #14
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	b2da      	uxtb	r2, r3
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3e:	0b5b      	lsrs	r3, r3, #13
 800da40:	b2db      	uxtb	r3, r3
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	b2da      	uxtb	r2, r3
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da50:	0b1b      	lsrs	r3, r3, #12
 800da52:	b2db      	uxtb	r3, r3
 800da54:	f003 0301 	and.w	r3, r3, #1
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2200      	movs	r2, #0
 800da62:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d163      	bne.n	800db34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da70:	009a      	lsls	r2, r3, #2
 800da72:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da76:	4013      	ands	r3, r2
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800da7c:	0f92      	lsrs	r2, r2, #30
 800da7e:	431a      	orrs	r2, r3
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da88:	0edb      	lsrs	r3, r3, #27
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	f003 0307 	and.w	r3, r3, #7
 800da90:	b2da      	uxtb	r2, r3
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da9a:	0e1b      	lsrs	r3, r3, #24
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daac:	0d5b      	lsrs	r3, r3, #21
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	f003 0307 	and.w	r3, r3, #7
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabe:	0c9b      	lsrs	r3, r3, #18
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	f003 0307 	and.w	r3, r3, #7
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad0:	0bdb      	lsrs	r3, r3, #15
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	f003 0307 	and.w	r3, r3, #7
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	7e1b      	ldrb	r3, [r3, #24]
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0307 	and.w	r3, r3, #7
 800daf2:	3302      	adds	r3, #2
 800daf4:	2201      	movs	r2, #1
 800daf6:	fa02 f303 	lsl.w	r3, r2, r3
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dafe:	fb02 f203 	mul.w	r2, r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	7a1b      	ldrb	r3, [r3, #8]
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 030f 	and.w	r3, r3, #15
 800db10:	2201      	movs	r2, #1
 800db12:	409a      	lsls	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800db20:	0a52      	lsrs	r2, r2, #9
 800db22:	fb02 f203 	mul.w	r2, r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db30:	661a      	str	r2, [r3, #96]	; 0x60
 800db32:	e031      	b.n	800db98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d11d      	bne.n	800db78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db40:	041b      	lsls	r3, r3, #16
 800db42:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4a:	0c1b      	lsrs	r3, r3, #16
 800db4c:	431a      	orrs	r2, r3
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	3301      	adds	r3, #1
 800db58:	029a      	lsls	r2, r3, #10
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	661a      	str	r2, [r3, #96]	; 0x60
 800db76:	e00f      	b.n	800db98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a58      	ldr	r2, [pc, #352]	; (800dce0 <HAL_SD_GetCardCSD+0x344>)
 800db7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e09d      	b.n	800dcd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db9c:	0b9b      	lsrs	r3, r3, #14
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbae:	09db      	lsrs	r3, r3, #7
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd0:	0fdb      	lsrs	r3, r3, #31
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbdc:	0f5b      	lsrs	r3, r3, #29
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	f003 0303 	and.w	r3, r3, #3
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbee:	0e9b      	lsrs	r3, r3, #26
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	f003 0307 	and.w	r3, r3, #7
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc00:	0d9b      	lsrs	r3, r3, #22
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f003 030f 	and.w	r3, r3, #15
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc12:	0d5b      	lsrs	r3, r3, #21
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc2e:	0c1b      	lsrs	r3, r3, #16
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	f003 0301 	and.w	r3, r3, #1
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc42:	0bdb      	lsrs	r3, r3, #15
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc56:	0b9b      	lsrs	r3, r3, #14
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc6a:	0b5b      	lsrs	r3, r3, #13
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc7e:	0b1b      	lsrs	r3, r3, #12
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	f003 0301 	and.w	r3, r3, #1
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc92:	0a9b      	lsrs	r3, r3, #10
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	f003 0303 	and.w	r3, r3, #3
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dca6:	0a1b      	lsrs	r3, r3, #8
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 0303 	and.w	r3, r3, #3
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcba:	085b      	lsrs	r3, r3, #1
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	004005ff 	.word	0x004005ff

0800dce4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd3c:	b5b0      	push	{r4, r5, r7, lr}
 800dd3e:	b08e      	sub	sp, #56	; 0x38
 800dd40:	af04      	add	r7, sp, #16
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2203      	movs	r2, #3
 800dd4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd52:	2b03      	cmp	r3, #3
 800dd54:	d02e      	beq.n	800ddb4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd5c:	d106      	bne.n	800dd6c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	639a      	str	r2, [r3, #56]	; 0x38
 800dd6a:	e029      	b.n	800ddc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd72:	d10a      	bne.n	800dd8a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fb0f 	bl	800e398 <SD_WideBus_Enable>
 800dd7a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	431a      	orrs	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38
 800dd88:	e01a      	b.n	800ddc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10a      	bne.n	800dda6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 fb4c 	bl	800e42e <SD_WideBus_Disable>
 800dd96:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	639a      	str	r2, [r3, #56]	; 0x38
 800dda4:	e00c      	b.n	800ddc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
 800ddb2:	e005      	b.n	800ddc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d009      	beq.n	800dddc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a18      	ldr	r2, [pc, #96]	; (800de30 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ddce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e024      	b.n	800de26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	699b      	ldr	r3, [r3, #24]
 800ddfc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681d      	ldr	r5, [r3, #0]
 800de02:	466c      	mov	r4, sp
 800de04:	f107 0318 	add.w	r3, r7, #24
 800de08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de10:	f107 030c 	add.w	r3, r7, #12
 800de14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de16:	4628      	mov	r0, r5
 800de18:	f002 fcb2 	bl	8010780 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3728      	adds	r7, #40	; 0x28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bdb0      	pop	{r4, r5, r7, pc}
 800de2e:	bf00      	nop
 800de30:	004005ff 	.word	0x004005ff

0800de34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800de40:	f107 030c 	add.w	r3, r7, #12
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 fa7e 	bl	800e348 <SD_SendStatus>
 800de4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	431a      	orrs	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	0a5b      	lsrs	r3, r3, #9
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de6a:	693b      	ldr	r3, [r7, #16]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3718      	adds	r7, #24
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800de92:	bf00      	nop
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deaa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb0:	2b82      	cmp	r3, #130	; 0x82
 800deb2:	d111      	bne.n	800ded8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 fde7 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800debe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d008      	beq.n	800ded8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	431a      	orrs	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f7ff fd58 	bl	800d988 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f022 0208 	bic.w	r2, r2, #8
 800dee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f240 523a 	movw	r2, #1338	; 0x53a
 800def0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2201      	movs	r2, #1
 800def6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f003 fa3f 	bl	8011384 <HAL_SD_RxCpltCallback>
#endif
}
 800df06:	bf00      	nop
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
	...

0800df10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7fd f830 	bl	800af84 <HAL_DMA_GetError>
 800df24:	4603      	mov	r3, r0
 800df26:	2b02      	cmp	r3, #2
 800df28:	d03e      	beq.n	800dfa8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d002      	beq.n	800df46 <SD_DMAError+0x36>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d12d      	bne.n	800dfa2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a19      	ldr	r2, [pc, #100]	; (800dfb0 <SD_DMAError+0xa0>)
 800df4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800df5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800df6a:	6978      	ldr	r0, [r7, #20]
 800df6c:	f7ff ff62 	bl	800de34 <HAL_SD_GetCardState>
 800df70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b06      	cmp	r3, #6
 800df76:	d002      	beq.n	800df7e <SD_DMAError+0x6e>
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2b05      	cmp	r3, #5
 800df7c:	d10a      	bne.n	800df94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4618      	mov	r0, r3
 800df84:	f002 fd82 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800df88:	4602      	mov	r2, r0
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8e:	431a      	orrs	r2, r3
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dfa2:	6978      	ldr	r0, [r7, #20]
 800dfa4:	f7ff fcf0 	bl	800d988 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dfa8:	bf00      	nop
 800dfaa:	3718      	adds	r7, #24
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	004005ff 	.word	0x004005ff

0800dfb4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7ff ff31 	bl	800de34 <HAL_SD_GetCardState>
 800dfd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b06      	cmp	r3, #6
 800dfe6:	d002      	beq.n	800dfee <SD_DMATxAbort+0x3a>
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b05      	cmp	r3, #5
 800dfec:	d10a      	bne.n	800e004 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f002 fd4a 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800dff8:	4602      	mov	r2, r0
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffe:	431a      	orrs	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d103      	bne.n	800e014 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f003 f9a5 	bl	801135c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e012:	e002      	b.n	800e01a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7ff fcb7 	bl	800d988 <HAL_SD_ErrorCallback>
}
 800e01a:	bf00      	nop
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b084      	sub	sp, #16
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f240 523a 	movw	r2, #1338	; 0x53a
 800e038:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff fefa 	bl	800de34 <HAL_SD_GetCardState>
 800e040:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2b06      	cmp	r3, #6
 800e054:	d002      	beq.n	800e05c <SD_DMARxAbort+0x3a>
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	2b05      	cmp	r3, #5
 800e05a:	d10a      	bne.n	800e072 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4618      	mov	r0, r3
 800e062:	f002 fd13 	bl	8010a8c <SDMMC_CmdStopTransfer>
 800e066:	4602      	mov	r2, r0
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06c:	431a      	orrs	r2, r3
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e076:	2b00      	cmp	r3, #0
 800e078:	d103      	bne.n	800e082 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	f003 f96e 	bl	801135c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e080:	e002      	b.n	800e088 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff fc80 	bl	800d988 <HAL_SD_ErrorCallback>
}
 800e088:	bf00      	nop
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e090:	b5b0      	push	{r4, r5, r7, lr}
 800e092:	b094      	sub	sp, #80	; 0x50
 800e094:	af04      	add	r7, sp, #16
 800e096:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e098:	2301      	movs	r3, #1
 800e09a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f002 fbc5 	bl	8010830 <SDIO_GetPowerState>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d102      	bne.n	800e0b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e0ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e0b0:	e0b7      	b.n	800e222 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d02f      	beq.n	800e11a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f002 fdee 	bl	8010ca0 <SDMMC_CmdSendCID>
 800e0c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <SD_InitCard+0x40>
    {
      return errorstate;
 800e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ce:	e0a8      	b.n	800e222 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f002 fbef 	bl	80108ba <SDIO_GetResponse>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2104      	movs	r1, #4
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f002 fbe6 	bl	80108ba <SDIO_GetResponse>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2108      	movs	r1, #8
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fbdd 	bl	80108ba <SDIO_GetResponse>
 800e100:	4602      	mov	r2, r0
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	210c      	movs	r1, #12
 800e10c:	4618      	mov	r0, r3
 800e10e:	f002 fbd4 	bl	80108ba <SDIO_GetResponse>
 800e112:	4602      	mov	r2, r0
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d00d      	beq.n	800e13e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f107 020e 	add.w	r2, r7, #14
 800e12a:	4611      	mov	r1, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f002 fdf4 	bl	8010d1a <SDMMC_CmdSetRelAdd>
 800e132:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <SD_InitCard+0xae>
    {
      return errorstate;
 800e13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13c:	e071      	b.n	800e222 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e142:	2b03      	cmp	r3, #3
 800e144:	d036      	beq.n	800e1b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e146:	89fb      	ldrh	r3, [r7, #14]
 800e148:	461a      	mov	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e156:	041b      	lsls	r3, r3, #16
 800e158:	4619      	mov	r1, r3
 800e15a:	4610      	mov	r0, r2
 800e15c:	f002 fdbe 	bl	8010cdc <SDMMC_CmdSendCSD>
 800e160:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <SD_InitCard+0xdc>
    {
      return errorstate;
 800e168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e16a:	e05a      	b.n	800e222 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2100      	movs	r1, #0
 800e172:	4618      	mov	r0, r3
 800e174:	f002 fba1 	bl	80108ba <SDIO_GetResponse>
 800e178:	4602      	mov	r2, r0
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2104      	movs	r1, #4
 800e184:	4618      	mov	r0, r3
 800e186:	f002 fb98 	bl	80108ba <SDIO_GetResponse>
 800e18a:	4602      	mov	r2, r0
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2108      	movs	r1, #8
 800e196:	4618      	mov	r0, r3
 800e198:	f002 fb8f 	bl	80108ba <SDIO_GetResponse>
 800e19c:	4602      	mov	r2, r0
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	210c      	movs	r1, #12
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f002 fb86 	bl	80108ba <SDIO_GetResponse>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2104      	movs	r1, #4
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f002 fb7d 	bl	80108ba <SDIO_GetResponse>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	0d1a      	lsrs	r2, r3, #20
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e1c8:	f107 0310 	add.w	r3, r7, #16
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff fbe4 	bl	800d99c <HAL_SD_GetCardCSD>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1de:	e020      	b.n	800e222 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6819      	ldr	r1, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e8:	041b      	lsls	r3, r3, #16
 800e1ea:	f04f 0400 	mov.w	r4, #0
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	4623      	mov	r3, r4
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	f002 fc6c 	bl	8010ad0 <SDMMC_CmdSelDesel>
 800e1f8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <SD_InitCard+0x174>
  {
    return errorstate;
 800e200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e202:	e00e      	b.n	800e222 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681d      	ldr	r5, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	466c      	mov	r4, sp
 800e20c:	f103 0210 	add.w	r2, r3, #16
 800e210:	ca07      	ldmia	r2, {r0, r1, r2}
 800e212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e216:	3304      	adds	r3, #4
 800e218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e21a:	4628      	mov	r0, r5
 800e21c:	f002 fab0 	bl	8010780 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3740      	adds	r7, #64	; 0x40
 800e226:	46bd      	mov	sp, r7
 800e228:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e22c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e234:	2300      	movs	r3, #0
 800e236:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e238:	2300      	movs	r3, #0
 800e23a:	617b      	str	r3, [r7, #20]
 800e23c:	2300      	movs	r3, #0
 800e23e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4618      	mov	r0, r3
 800e246:	f002 fc66 	bl	8010b16 <SDMMC_CmdGoIdleState>
 800e24a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	e072      	b.n	800e33c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f002 fc79 	bl	8010b52 <SDMMC_CmdOperCond>
 800e260:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00d      	beq.n	800e284 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f002 fc4f 	bl	8010b16 <SDMMC_CmdGoIdleState>
 800e278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <SD_PowerON+0x5e>
    {
      return errorstate;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	e05b      	b.n	800e33c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d137      	bne.n	800e302 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2100      	movs	r1, #0
 800e298:	4618      	mov	r0, r3
 800e29a:	f002 fc79 	bl	8010b90 <SDMMC_CmdAppCommand>
 800e29e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d02d      	beq.n	800e302 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2aa:	e047      	b.n	800e33c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f002 fc6c 	bl	8010b90 <SDMMC_CmdAppCommand>
 800e2b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <SD_PowerON+0x98>
    {
      return errorstate;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	e03b      	b.n	800e33c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	491e      	ldr	r1, [pc, #120]	; (800e344 <SD_PowerON+0x118>)
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f002 fc82 	bl	8010bd4 <SDMMC_CmdAppOperCommand>
 800e2d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d002      	beq.n	800e2de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2dc:	e02e      	b.n	800e33c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f002 fae8 	bl	80108ba <SDIO_GetResponse>
 800e2ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	0fdb      	lsrs	r3, r3, #31
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d101      	bne.n	800e2f8 <SD_PowerON+0xcc>
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e000      	b.n	800e2fa <SD_PowerON+0xce>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	613b      	str	r3, [r7, #16]

    count++;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	3301      	adds	r3, #1
 800e300:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e308:	4293      	cmp	r3, r2
 800e30a:	d802      	bhi.n	800e312 <SD_PowerON+0xe6>
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0cc      	beq.n	800e2ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e318:	4293      	cmp	r3, r2
 800e31a:	d902      	bls.n	800e322 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e31c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e320:	e00c      	b.n	800e33c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	645a      	str	r2, [r3, #68]	; 0x44
 800e332:	e002      	b.n	800e33a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	c1100000 	.word	0xc1100000

0800e348 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d102      	bne.n	800e35e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e35c:	e018      	b.n	800e390 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e366:	041b      	lsls	r3, r3, #16
 800e368:	4619      	mov	r1, r3
 800e36a:	4610      	mov	r0, r2
 800e36c:	f002 fcf6 	bl	8010d5c <SDMMC_CmdSendStatus>
 800e370:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	e009      	b.n	800e390 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2100      	movs	r1, #0
 800e382:	4618      	mov	r0, r3
 800e384:	f002 fa99 	bl	80108ba <SDIO_GetResponse>
 800e388:	4602      	mov	r2, r0
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f002 fa83 	bl	80108ba <SDIO_GetResponse>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3be:	d102      	bne.n	800e3c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3c4:	e02f      	b.n	800e426 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3c6:	f107 030c 	add.w	r3, r7, #12
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f879 	bl	800e4c4 <SD_FindSCR>
 800e3d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	e023      	b.n	800e426 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d01c      	beq.n	800e422 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3f0:	041b      	lsls	r3, r3, #16
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	f002 fbcb 	bl	8010b90 <SDMMC_CmdAppCommand>
 800e3fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	e00f      	b.n	800e426 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2102      	movs	r1, #2
 800e40c:	4618      	mov	r0, r3
 800e40e:	f002 fc04 	bl	8010c1a <SDMMC_CmdBusWidth>
 800e412:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	e003      	b.n	800e426 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e41e:	2300      	movs	r3, #0
 800e420:	e001      	b.n	800e426 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b086      	sub	sp, #24
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e436:	2300      	movs	r3, #0
 800e438:	60fb      	str	r3, [r7, #12]
 800e43a:	2300      	movs	r3, #0
 800e43c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2100      	movs	r1, #0
 800e444:	4618      	mov	r0, r3
 800e446:	f002 fa38 	bl	80108ba <SDIO_GetResponse>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e454:	d102      	bne.n	800e45c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e45a:	e02f      	b.n	800e4bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e45c:	f107 030c 	add.w	r3, r7, #12
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f82e 	bl	800e4c4 <SD_FindSCR>
 800e468:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	e023      	b.n	800e4bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d01c      	beq.n	800e4b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e486:	041b      	lsls	r3, r3, #16
 800e488:	4619      	mov	r1, r3
 800e48a:	4610      	mov	r0, r2
 800e48c:	f002 fb80 	bl	8010b90 <SDMMC_CmdAppCommand>
 800e490:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	e00f      	b.n	800e4bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f002 fbb9 	bl	8010c1a <SDMMC_CmdBusWidth>
 800e4a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	e003      	b.n	800e4bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e001      	b.n	800e4bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3718      	adds	r7, #24
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4c4:	b590      	push	{r4, r7, lr}
 800e4c6:	b08f      	sub	sp, #60	; 0x3c
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4ce:	f7fb fd63 	bl	8009f98 <HAL_GetTick>
 800e4d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60bb      	str	r3, [r7, #8]
 800e4dc:	2300      	movs	r3, #0
 800e4de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2108      	movs	r1, #8
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f002 fa24 	bl	8010938 <SDMMC_CmdBlockLength>
 800e4f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <SD_FindSCR+0x38>
  {
    return errorstate;
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	e0a9      	b.n	800e650 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e504:	041b      	lsls	r3, r3, #16
 800e506:	4619      	mov	r1, r3
 800e508:	4610      	mov	r0, r2
 800e50a:	f002 fb41 	bl	8010b90 <SDMMC_CmdAppCommand>
 800e50e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e512:	2b00      	cmp	r3, #0
 800e514:	d001      	beq.n	800e51a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e518:	e09a      	b.n	800e650 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e51a:	f04f 33ff 	mov.w	r3, #4294967295
 800e51e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e520:	2308      	movs	r3, #8
 800e522:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e524:	2330      	movs	r3, #48	; 0x30
 800e526:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e528:	2302      	movs	r3, #2
 800e52a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e530:	2301      	movs	r3, #1
 800e532:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f107 0210 	add.w	r2, r7, #16
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f002 f9ce 	bl	80108e0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4618      	mov	r0, r3
 800e54a:	f002 fb88 	bl	8010c5e <SDMMC_CmdSendSCR>
 800e54e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	2b00      	cmp	r3, #0
 800e554:	d022      	beq.n	800e59c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	e07a      	b.n	800e650 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00e      	beq.n	800e586 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6819      	ldr	r1, [r3, #0]
 800e56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	f107 0208 	add.w	r2, r7, #8
 800e574:	18d4      	adds	r4, r2, r3
 800e576:	4608      	mov	r0, r1
 800e578:	f002 f92d 	bl	80107d6 <SDIO_ReadFIFO>
 800e57c:	4603      	mov	r3, r0
 800e57e:	6023      	str	r3, [r4, #0]
      index++;
 800e580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e582:	3301      	adds	r3, #1
 800e584:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e586:	f7fb fd07 	bl	8009f98 <HAL_GetTick>
 800e58a:	4602      	mov	r2, r0
 800e58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e594:	d102      	bne.n	800e59c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e596:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e59a:	e059      	b.n	800e650 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5a2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d0d6      	beq.n	800e55a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b2:	f003 0308 	and.w	r3, r3, #8
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d005      	beq.n	800e5c6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2208      	movs	r2, #8
 800e5c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5c2:	2308      	movs	r3, #8
 800e5c4:	e044      	b.n	800e650 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5cc:	f003 0302 	and.w	r3, r3, #2
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2202      	movs	r2, #2
 800e5da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e5dc:	2302      	movs	r3, #2
 800e5de:	e037      	b.n	800e650 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e6:	f003 0320 	and.w	r3, r3, #32
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d005      	beq.n	800e5fa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2220      	movs	r2, #32
 800e5f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e5f6:	2320      	movs	r3, #32
 800e5f8:	e02a      	b.n	800e650 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800e602:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	061a      	lsls	r2, r3, #24
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	021b      	lsls	r3, r3, #8
 800e60c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e610:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	0a1b      	lsrs	r3, r3, #8
 800e616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e61a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	0e1b      	lsrs	r3, r3, #24
 800e620:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e624:	601a      	str	r2, [r3, #0]
    scr++;
 800e626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e628:	3304      	adds	r3, #4
 800e62a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	061a      	lsls	r2, r3, #24
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	021b      	lsls	r3, r3, #8
 800e634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e638:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	0a1b      	lsrs	r3, r3, #8
 800e63e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e642:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	0e1b      	lsrs	r3, r3, #24
 800e648:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	373c      	adds	r7, #60	; 0x3c
 800e654:	46bd      	mov	sp, r7
 800e656:	bd90      	pop	{r4, r7, pc}

0800e658 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e664:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d03f      	beq.n	800e6f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e672:	2300      	movs	r3, #0
 800e674:	617b      	str	r3, [r7, #20]
 800e676:	e033      	b.n	800e6e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f002 f8aa 	bl	80107d6 <SDIO_ReadFIFO>
 800e682:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	b2da      	uxtb	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	3b01      	subs	r3, #1
 800e696:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	0a1b      	lsrs	r3, r3, #8
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	0c1b      	lsrs	r3, r3, #16
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	0e1b      	lsrs	r3, r3, #24
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	617b      	str	r3, [r7, #20]
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2b07      	cmp	r3, #7
 800e6e4:	d9c8      	bls.n	800e678 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e6f2:	bf00      	nop
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b086      	sub	sp, #24
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a1b      	ldr	r3, [r3, #32]
 800e706:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d043      	beq.n	800e79c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e714:	2300      	movs	r3, #0
 800e716:	617b      	str	r3, [r7, #20]
 800e718:	e037      	b.n	800e78a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3301      	adds	r3, #1
 800e724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	3b01      	subs	r3, #1
 800e72a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	021a      	lsls	r2, r3, #8
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	4313      	orrs	r3, r2
 800e736:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3301      	adds	r3, #1
 800e73c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	3b01      	subs	r3, #1
 800e742:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	041a      	lsls	r2, r3, #16
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	3301      	adds	r3, #1
 800e754:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	3b01      	subs	r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	061a      	lsls	r2, r3, #24
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	4313      	orrs	r3, r2
 800e766:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3301      	adds	r3, #1
 800e76c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	3b01      	subs	r3, #1
 800e772:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f107 0208 	add.w	r2, r7, #8
 800e77c:	4611      	mov	r1, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f002 f836 	bl	80107f0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	3301      	adds	r3, #1
 800e788:	617b      	str	r3, [r7, #20]
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2b07      	cmp	r3, #7
 800e78e:	d9c4      	bls.n	800e71a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e79c:	bf00      	nop
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e056      	b.n	800e864 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d106      	bne.n	800e7d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7f8 fd95 	bl	8007300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2202      	movs	r2, #2
 800e7da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	431a      	orrs	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	431a      	orrs	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	431a      	orrs	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e812:	431a      	orrs	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	431a      	orrs	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	ea42 0103 	orr.w	r1, r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	699b      	ldr	r3, [r3, #24]
 800e832:	0c1b      	lsrs	r3, r3, #16
 800e834:	f003 0104 	and.w	r1, r3, #4
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	430a      	orrs	r2, r1
 800e842:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	69da      	ldr	r2, [r3, #28]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e852:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b088      	sub	sp, #32
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	603b      	str	r3, [r7, #0]
 800e878:	4613      	mov	r3, r2
 800e87a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e886:	2b01      	cmp	r3, #1
 800e888:	d101      	bne.n	800e88e <HAL_SPI_Transmit+0x22>
 800e88a:	2302      	movs	r3, #2
 800e88c:	e11e      	b.n	800eacc <HAL_SPI_Transmit+0x260>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e896:	f7fb fb7f 	bl	8009f98 <HAL_GetTick>
 800e89a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e89c:	88fb      	ldrh	r3, [r7, #6]
 800e89e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d002      	beq.n	800e8b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e8ac:	2302      	movs	r3, #2
 800e8ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e8b0:	e103      	b.n	800eaba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <HAL_SPI_Transmit+0x52>
 800e8b8:	88fb      	ldrh	r3, [r7, #6]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e8c2:	e0fa      	b.n	800eaba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2203      	movs	r2, #3
 800e8c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	88fa      	ldrh	r2, [r7, #6]
 800e8dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	88fa      	ldrh	r2, [r7, #6]
 800e8e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e90a:	d107      	bne.n	800e91c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e91a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e926:	2b40      	cmp	r3, #64	; 0x40
 800e928:	d007      	beq.n	800e93a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e938:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e942:	d14b      	bne.n	800e9dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d002      	beq.n	800e952 <HAL_SPI_Transmit+0xe6>
 800e94c:	8afb      	ldrh	r3, [r7, #22]
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d13e      	bne.n	800e9d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e956:	881a      	ldrh	r2, [r3, #0]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e962:	1c9a      	adds	r2, r3, #2
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	3b01      	subs	r3, #1
 800e970:	b29a      	uxth	r2, r3
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e976:	e02b      	b.n	800e9d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b02      	cmp	r3, #2
 800e984:	d112      	bne.n	800e9ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98a:	881a      	ldrh	r2, [r3, #0]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e996:	1c9a      	adds	r2, r3, #2
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e9aa:	e011      	b.n	800e9d0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9ac:	f7fb faf4 	bl	8009f98 <HAL_GetTick>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d803      	bhi.n	800e9c4 <HAL_SPI_Transmit+0x158>
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c2:	d102      	bne.n	800e9ca <HAL_SPI_Transmit+0x15e>
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d102      	bne.n	800e9d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e9ce:	e074      	b.n	800eaba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1ce      	bne.n	800e978 <HAL_SPI_Transmit+0x10c>
 800e9da:	e04c      	b.n	800ea76 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d002      	beq.n	800e9ea <HAL_SPI_Transmit+0x17e>
 800e9e4:	8afb      	ldrh	r3, [r7, #22]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d140      	bne.n	800ea6c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	330c      	adds	r3, #12
 800e9f4:	7812      	ldrb	r2, [r2, #0]
 800e9f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ea10:	e02c      	b.n	800ea6c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	f003 0302 	and.w	r3, r3, #2
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d113      	bne.n	800ea48 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	330c      	adds	r3, #12
 800ea2a:	7812      	ldrb	r2, [r2, #0]
 800ea2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	86da      	strh	r2, [r3, #54]	; 0x36
 800ea46:	e011      	b.n	800ea6c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea48:	f7fb faa6 	bl	8009f98 <HAL_GetTick>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d803      	bhi.n	800ea60 <HAL_SPI_Transmit+0x1f4>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5e:	d102      	bne.n	800ea66 <HAL_SPI_Transmit+0x1fa>
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d102      	bne.n	800ea6c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ea66:	2303      	movs	r3, #3
 800ea68:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ea6a:	e026      	b.n	800eaba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1cd      	bne.n	800ea12 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea76:	69ba      	ldr	r2, [r7, #24]
 800ea78:	6839      	ldr	r1, [r7, #0]
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f000 fba4 	bl	800f1c8 <SPI_EndRxTxTransaction>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d002      	beq.n	800ea8c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	613b      	str	r3, [r7, #16]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d002      	beq.n	800eab8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	77fb      	strb	r3, [r7, #31]
 800eab6:	e000      	b.n	800eaba <HAL_SPI_Transmit+0x24e>
  }

error:
 800eab8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eaca:	7ffb      	ldrb	r3, [r7, #31]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3720      	adds	r7, #32
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af02      	add	r7, sp, #8
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	603b      	str	r3, [r7, #0]
 800eae0:	4613      	mov	r3, r2
 800eae2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaf0:	d112      	bne.n	800eb18 <HAL_SPI_Receive+0x44>
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10e      	bne.n	800eb18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2204      	movs	r2, #4
 800eafe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800eb02:	88fa      	ldrh	r2, [r7, #6]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f000 f8e9 	bl	800ece6 <HAL_SPI_TransmitReceive>
 800eb14:	4603      	mov	r3, r0
 800eb16:	e0e2      	b.n	800ecde <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d101      	bne.n	800eb26 <HAL_SPI_Receive+0x52>
 800eb22:	2302      	movs	r3, #2
 800eb24:	e0db      	b.n	800ecde <HAL_SPI_Receive+0x20a>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb2e:	f7fb fa33 	bl	8009f98 <HAL_GetTick>
 800eb32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d002      	beq.n	800eb46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800eb40:	2302      	movs	r3, #2
 800eb42:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb44:	e0c2      	b.n	800eccc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d002      	beq.n	800eb52 <HAL_SPI_Receive+0x7e>
 800eb4c:	88fb      	ldrh	r3, [r7, #6]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d102      	bne.n	800eb58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800eb52:	2301      	movs	r3, #1
 800eb54:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb56:	e0b9      	b.n	800eccc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2204      	movs	r2, #4
 800eb5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	88fa      	ldrh	r2, [r7, #6]
 800eb70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	88fa      	ldrh	r2, [r7, #6]
 800eb76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb9e:	d107      	bne.n	800ebb0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ebae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebba:	2b40      	cmp	r3, #64	; 0x40
 800ebbc:	d007      	beq.n	800ebce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d162      	bne.n	800ec9c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ebd6:	e02e      	b.n	800ec36 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d115      	bne.n	800ec12 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f103 020c 	add.w	r2, r3, #12
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf2:	7812      	ldrb	r2, [r2, #0]
 800ebf4:	b2d2      	uxtb	r2, r2
 800ebf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec10:	e011      	b.n	800ec36 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec12:	f7fb f9c1 	bl	8009f98 <HAL_GetTick>
 800ec16:	4602      	mov	r2, r0
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	683a      	ldr	r2, [r7, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d803      	bhi.n	800ec2a <HAL_SPI_Receive+0x156>
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec28:	d102      	bne.n	800ec30 <HAL_SPI_Receive+0x15c>
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ec30:	2303      	movs	r3, #3
 800ec32:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ec34:	e04a      	b.n	800eccc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1cb      	bne.n	800ebd8 <HAL_SPI_Receive+0x104>
 800ec40:	e031      	b.n	800eca6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	689b      	ldr	r3, [r3, #8]
 800ec48:	f003 0301 	and.w	r3, r3, #1
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d113      	bne.n	800ec78 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68da      	ldr	r2, [r3, #12]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	b292      	uxth	r2, r2
 800ec5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec62:	1c9a      	adds	r2, r3, #2
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec76:	e011      	b.n	800ec9c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec78:	f7fb f98e 	bl	8009f98 <HAL_GetTick>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d803      	bhi.n	800ec90 <HAL_SPI_Receive+0x1bc>
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8e:	d102      	bne.n	800ec96 <HAL_SPI_Receive+0x1c2>
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d102      	bne.n	800ec9c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ec9a:	e017      	b.n	800eccc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d1cd      	bne.n	800ec42 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	6839      	ldr	r1, [r7, #0]
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f000 fa27 	bl	800f0fe <SPI_EndRxTransaction>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d002      	beq.n	800ecbc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	75fb      	strb	r3, [r7, #23]
 800ecc8:	e000      	b.n	800eccc <HAL_SPI_Receive+0x1f8>
  }

error :
 800ecca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b08c      	sub	sp, #48	; 0x30
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	607a      	str	r2, [r7, #4]
 800ecf2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d101      	bne.n	800ed0c <HAL_SPI_TransmitReceive+0x26>
 800ed08:	2302      	movs	r3, #2
 800ed0a:	e18a      	b.n	800f022 <HAL_SPI_TransmitReceive+0x33c>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed14:	f7fb f940 	bl	8009f98 <HAL_GetTick>
 800ed18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ed2a:	887b      	ldrh	r3, [r7, #2]
 800ed2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ed2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d00f      	beq.n	800ed56 <HAL_SPI_TransmitReceive+0x70>
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed3c:	d107      	bne.n	800ed4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d103      	bne.n	800ed4e <HAL_SPI_TransmitReceive+0x68>
 800ed46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	d003      	beq.n	800ed56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ed4e:	2302      	movs	r3, #2
 800ed50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ed54:	e15b      	b.n	800f00e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d005      	beq.n	800ed68 <HAL_SPI_TransmitReceive+0x82>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d002      	beq.n	800ed68 <HAL_SPI_TransmitReceive+0x82>
 800ed62:	887b      	ldrh	r3, [r7, #2]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d103      	bne.n	800ed70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ed6e:	e14e      	b.n	800f00e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d003      	beq.n	800ed84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2205      	movs	r2, #5
 800ed80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	887a      	ldrh	r2, [r7, #2]
 800ed94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	887a      	ldrh	r2, [r7, #2]
 800ed9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	887a      	ldrh	r2, [r7, #2]
 800eda6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	887a      	ldrh	r2, [r7, #2]
 800edac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2200      	movs	r2, #0
 800edb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edc4:	2b40      	cmp	r3, #64	; 0x40
 800edc6:	d007      	beq.n	800edd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ede0:	d178      	bne.n	800eed4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <HAL_SPI_TransmitReceive+0x10a>
 800edea:	8b7b      	ldrh	r3, [r7, #26]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d166      	bne.n	800eebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf4:	881a      	ldrh	r2, [r3, #0]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee00:	1c9a      	adds	r2, r3, #2
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee14:	e053      	b.n	800eebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	f003 0302 	and.w	r3, r3, #2
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d11b      	bne.n	800ee5c <HAL_SPI_TransmitReceive+0x176>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d016      	beq.n	800ee5c <HAL_SPI_TransmitReceive+0x176>
 800ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d113      	bne.n	800ee5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee38:	881a      	ldrh	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee44:	1c9a      	adds	r2, r3, #2
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	3b01      	subs	r3, #1
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	689b      	ldr	r3, [r3, #8]
 800ee62:	f003 0301 	and.w	r3, r3, #1
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d119      	bne.n	800ee9e <HAL_SPI_TransmitReceive+0x1b8>
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d014      	beq.n	800ee9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68da      	ldr	r2, [r3, #12]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7e:	b292      	uxth	r2, r2
 800ee80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee86:	1c9a      	adds	r2, r3, #2
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	3b01      	subs	r3, #1
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ee9e:	f7fb f87b 	bl	8009f98 <HAL_GetTick>
 800eea2:	4602      	mov	r2, r0
 800eea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d807      	bhi.n	800eebe <HAL_SPI_TransmitReceive+0x1d8>
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb4:	d003      	beq.n	800eebe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eebc:	e0a7      	b.n	800f00e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1a6      	bne.n	800ee16 <HAL_SPI_TransmitReceive+0x130>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eecc:	b29b      	uxth	r3, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1a1      	bne.n	800ee16 <HAL_SPI_TransmitReceive+0x130>
 800eed2:	e07c      	b.n	800efce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d002      	beq.n	800eee2 <HAL_SPI_TransmitReceive+0x1fc>
 800eedc:	8b7b      	ldrh	r3, [r7, #26]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d16b      	bne.n	800efba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	330c      	adds	r3, #12
 800eeec:	7812      	ldrb	r2, [r2, #0]
 800eeee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef4:	1c5a      	adds	r2, r3, #1
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	3b01      	subs	r3, #1
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef08:	e057      	b.n	800efba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	f003 0302 	and.w	r3, r3, #2
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d11c      	bne.n	800ef52 <HAL_SPI_TransmitReceive+0x26c>
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d017      	beq.n	800ef52 <HAL_SPI_TransmitReceive+0x26c>
 800ef22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d114      	bne.n	800ef52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	330c      	adds	r3, #12
 800ef32:	7812      	ldrb	r2, [r2, #0]
 800ef34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	3b01      	subs	r3, #1
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d119      	bne.n	800ef94 <HAL_SPI_TransmitReceive+0x2ae>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d014      	beq.n	800ef94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68da      	ldr	r2, [r3, #12]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef74:	b2d2      	uxtb	r2, r2
 800ef76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7c:	1c5a      	adds	r2, r3, #1
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ef90:	2301      	movs	r3, #1
 800ef92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ef94:	f7fb f800 	bl	8009f98 <HAL_GetTick>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d803      	bhi.n	800efac <HAL_SPI_TransmitReceive+0x2c6>
 800efa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efaa:	d102      	bne.n	800efb2 <HAL_SPI_TransmitReceive+0x2cc>
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d103      	bne.n	800efba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800efb2:	2303      	movs	r3, #3
 800efb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800efb8:	e029      	b.n	800f00e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1a2      	bne.n	800ef0a <HAL_SPI_TransmitReceive+0x224>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efc8:	b29b      	uxth	r3, r3
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d19d      	bne.n	800ef0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800efce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 f8f8 	bl	800f1c8 <SPI_EndRxTxTransaction>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d006      	beq.n	800efec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800efde:	2301      	movs	r3, #1
 800efe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2220      	movs	r2, #32
 800efe8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800efea:	e010      	b.n	800f00e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10b      	bne.n	800f00c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eff4:	2300      	movs	r3, #0
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	617b      	str	r3, [r7, #20]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	617b      	str	r3, [r7, #20]
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	e000      	b.n	800f00e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f00c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f01e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f022:	4618      	mov	r0, r3
 800f024:	3730      	adds	r7, #48	; 0x30
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	60f8      	str	r0, [r7, #12]
 800f032:	60b9      	str	r1, [r7, #8]
 800f034:	603b      	str	r3, [r7, #0]
 800f036:	4613      	mov	r3, r2
 800f038:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f03a:	e04c      	b.n	800f0d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f042:	d048      	beq.n	800f0d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f044:	f7fa ffa8 	bl	8009f98 <HAL_GetTick>
 800f048:	4602      	mov	r2, r0
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	683a      	ldr	r2, [r7, #0]
 800f050:	429a      	cmp	r2, r3
 800f052:	d902      	bls.n	800f05a <SPI_WaitFlagStateUntilTimeout+0x30>
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d13d      	bne.n	800f0d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f072:	d111      	bne.n	800f098 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f07c:	d004      	beq.n	800f088 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f086:	d107      	bne.n	800f098 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f09c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0a0:	d10f      	bne.n	800f0c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f0c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f0d2:	2303      	movs	r3, #3
 800f0d4:	e00f      	b.n	800f0f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	689a      	ldr	r2, [r3, #8]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	4013      	ands	r3, r2
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	bf0c      	ite	eq
 800f0e6:	2301      	moveq	r3, #1
 800f0e8:	2300      	movne	r3, #0
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	79fb      	ldrb	r3, [r7, #7]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d1a3      	bne.n	800f03c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b086      	sub	sp, #24
 800f102:	af02      	add	r7, sp, #8
 800f104:	60f8      	str	r0, [r7, #12]
 800f106:	60b9      	str	r1, [r7, #8]
 800f108:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f112:	d111      	bne.n	800f138 <SPI_EndRxTransaction+0x3a>
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f11c:	d004      	beq.n	800f128 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f126:	d107      	bne.n	800f138 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f136:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f140:	d12a      	bne.n	800f198 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f14a:	d012      	beq.n	800f172 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2200      	movs	r2, #0
 800f154:	2180      	movs	r1, #128	; 0x80
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f7ff ff67 	bl	800f02a <SPI_WaitFlagStateUntilTimeout>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d02d      	beq.n	800f1be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f166:	f043 0220 	orr.w	r2, r3, #32
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f16e:	2303      	movs	r3, #3
 800f170:	e026      	b.n	800f1c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	2200      	movs	r2, #0
 800f17a:	2101      	movs	r1, #1
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f7ff ff54 	bl	800f02a <SPI_WaitFlagStateUntilTimeout>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d01a      	beq.n	800f1be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18c:	f043 0220 	orr.w	r2, r3, #32
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f194:	2303      	movs	r3, #3
 800f196:	e013      	b.n	800f1c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff ff41 	bl	800f02a <SPI_WaitFlagStateUntilTimeout>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d007      	beq.n	800f1be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1b2:	f043 0220 	orr.w	r2, r3, #32
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	e000      	b.n	800f1c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b088      	sub	sp, #32
 800f1cc:	af02      	add	r7, sp, #8
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f1d4:	4b1b      	ldr	r3, [pc, #108]	; (800f244 <SPI_EndRxTxTransaction+0x7c>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4a1b      	ldr	r2, [pc, #108]	; (800f248 <SPI_EndRxTxTransaction+0x80>)
 800f1da:	fba2 2303 	umull	r2, r3, r2, r3
 800f1de:	0d5b      	lsrs	r3, r3, #21
 800f1e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1e4:	fb02 f303 	mul.w	r3, r2, r3
 800f1e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1f2:	d112      	bne.n	800f21a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	2180      	movs	r1, #128	; 0x80
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7ff ff13 	bl	800f02a <SPI_WaitFlagStateUntilTimeout>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d016      	beq.n	800f238 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f20e:	f043 0220 	orr.w	r2, r3, #32
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f216:	2303      	movs	r3, #3
 800f218:	e00f      	b.n	800f23a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00a      	beq.n	800f236 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	3b01      	subs	r3, #1
 800f224:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f230:	2b80      	cmp	r3, #128	; 0x80
 800f232:	d0f2      	beq.n	800f21a <SPI_EndRxTxTransaction+0x52>
 800f234:	e000      	b.n	800f238 <SPI_EndRxTxTransaction+0x70>
        break;
 800f236:	bf00      	nop
  }

  return HAL_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3718      	adds	r7, #24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20000000 	.word	0x20000000
 800f248:	165e9f81 	.word	0x165e9f81

0800f24c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d101      	bne.n	800f25e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f25a:	2301      	movs	r3, #1
 800f25c:	e01d      	b.n	800f29a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7f8 f900 	bl	8007478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2202      	movs	r2, #2
 800f27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3304      	adds	r3, #4
 800f288:	4619      	mov	r1, r3
 800f28a:	4610      	mov	r0, r2
 800f28c:	f000 fb56 	bl	800f93c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3708      	adds	r7, #8
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f2a2:	b480      	push	{r7}
 800f2a4:	b085      	sub	sp, #20
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68da      	ldr	r2, [r3, #12]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f042 0201 	orr.w	r2, r2, #1
 800f2b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	f003 0307 	and.w	r3, r3, #7
 800f2c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b06      	cmp	r3, #6
 800f2ca:	d007      	beq.n	800f2dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f042 0201 	orr.w	r2, r2, #1
 800f2da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3714      	adds	r7, #20
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr

0800f2ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d101      	bne.n	800f2fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e01d      	b.n	800f338 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d106      	bne.n	800f316 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7f8 f83d 	bl	8007390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2202      	movs	r2, #2
 800f31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3304      	adds	r3, #4
 800f326:	4619      	mov	r1, r3
 800f328:	4610      	mov	r0, r2
 800f32a:	f000 fb07 	bl	800f93c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2201      	movs	r2, #1
 800f332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f336:	2300      	movs	r3, #0
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2201      	movs	r2, #1
 800f350:	6839      	ldr	r1, [r7, #0]
 800f352:	4618      	mov	r0, r3
 800f354:	f000 fd42 	bl	800fddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a15      	ldr	r2, [pc, #84]	; (800f3b4 <HAL_TIM_PWM_Start+0x74>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d004      	beq.n	800f36c <HAL_TIM_PWM_Start+0x2c>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a14      	ldr	r2, [pc, #80]	; (800f3b8 <HAL_TIM_PWM_Start+0x78>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d101      	bne.n	800f370 <HAL_TIM_PWM_Start+0x30>
 800f36c:	2301      	movs	r3, #1
 800f36e:	e000      	b.n	800f372 <HAL_TIM_PWM_Start+0x32>
 800f370:	2300      	movs	r3, #0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d007      	beq.n	800f386 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	f003 0307 	and.w	r3, r3, #7
 800f390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b06      	cmp	r3, #6
 800f396:	d007      	beq.n	800f3a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f042 0201 	orr.w	r2, r2, #1
 800f3a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3a8:	2300      	movs	r3, #0
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3710      	adds	r7, #16
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	40010000 	.word	0x40010000
 800f3b8:	40010400 	.word	0x40010400

0800f3bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e083      	b.n	800f4d8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d106      	bne.n	800f3ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f8 f8d7 	bl	8007598 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2202      	movs	r2, #2
 800f3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	6812      	ldr	r2, [r2, #0]
 800f3fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	3304      	adds	r3, #4
 800f40e:	4619      	mov	r1, r3
 800f410:	4610      	mov	r0, r2
 800f412:	f000 fa93 	bl	800f93c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	6a1b      	ldr	r3, [r3, #32]
 800f42c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	697a      	ldr	r2, [r7, #20]
 800f434:	4313      	orrs	r3, r2
 800f436:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f43e:	f023 0303 	bic.w	r3, r3, #3
 800f442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	689a      	ldr	r2, [r3, #8]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	699b      	ldr	r3, [r3, #24]
 800f44c:	021b      	lsls	r3, r3, #8
 800f44e:	4313      	orrs	r3, r2
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	4313      	orrs	r3, r2
 800f454:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f45c:	f023 030c 	bic.w	r3, r3, #12
 800f460:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	68da      	ldr	r2, [r3, #12]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	69db      	ldr	r3, [r3, #28]
 800f476:	021b      	lsls	r3, r3, #8
 800f478:	4313      	orrs	r3, r2
 800f47a:	693a      	ldr	r2, [r7, #16]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	011a      	lsls	r2, r3, #4
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	6a1b      	ldr	r3, [r3, #32]
 800f48a:	031b      	lsls	r3, r3, #12
 800f48c:	4313      	orrs	r3, r2
 800f48e:	693a      	ldr	r2, [r7, #16]
 800f490:	4313      	orrs	r3, r2
 800f492:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f49a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f4a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	695b      	ldr	r3, [r3, #20]
 800f4ac:	011b      	lsls	r3, r3, #4
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	697a      	ldr	r2, [r7, #20]
 800f4bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	693a      	ldr	r2, [r7, #16]
 800f4c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	68fa      	ldr	r2, [r7, #12]
 800f4cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4d6:	2300      	movs	r3, #0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d002      	beq.n	800f4f6 <HAL_TIM_Encoder_Start+0x16>
 800f4f0:	2b04      	cmp	r3, #4
 800f4f2:	d008      	beq.n	800f506 <HAL_TIM_Encoder_Start+0x26>
 800f4f4:	e00f      	b.n	800f516 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 fc6c 	bl	800fddc <TIM_CCxChannelCmd>
      break;
 800f504:	e016      	b.n	800f534 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2201      	movs	r2, #1
 800f50c:	2104      	movs	r1, #4
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 fc64 	bl	800fddc <TIM_CCxChannelCmd>
      break;
 800f514:	e00e      	b.n	800f534 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2201      	movs	r2, #1
 800f51c:	2100      	movs	r1, #0
 800f51e:	4618      	mov	r0, r3
 800f520:	f000 fc5c 	bl	800fddc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2201      	movs	r2, #1
 800f52a:	2104      	movs	r1, #4
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 fc55 	bl	800fddc <TIM_CCxChannelCmd>
      break;
 800f532:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f042 0201 	orr.w	r2, r2, #1
 800f542:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	f003 0302 	and.w	r3, r3, #2
 800f560:	2b02      	cmp	r3, #2
 800f562:	d122      	bne.n	800f5aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	f003 0302 	and.w	r3, r3, #2
 800f56e:	2b02      	cmp	r3, #2
 800f570:	d11b      	bne.n	800f5aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f06f 0202 	mvn.w	r2, #2
 800f57a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	699b      	ldr	r3, [r3, #24]
 800f588:	f003 0303 	and.w	r3, r3, #3
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d003      	beq.n	800f598 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 f9b5 	bl	800f900 <HAL_TIM_IC_CaptureCallback>
 800f596:	e005      	b.n	800f5a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 f9a7 	bl	800f8ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f9b8 	bl	800f914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	f003 0304 	and.w	r3, r3, #4
 800f5b4:	2b04      	cmp	r3, #4
 800f5b6:	d122      	bne.n	800f5fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	f003 0304 	and.w	r3, r3, #4
 800f5c2:	2b04      	cmp	r3, #4
 800f5c4:	d11b      	bne.n	800f5fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f06f 0204 	mvn.w	r2, #4
 800f5ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	699b      	ldr	r3, [r3, #24]
 800f5dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d003      	beq.n	800f5ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f98b 	bl	800f900 <HAL_TIM_IC_CaptureCallback>
 800f5ea:	e005      	b.n	800f5f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f97d 	bl	800f8ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f98e 	bl	800f914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	f003 0308 	and.w	r3, r3, #8
 800f608:	2b08      	cmp	r3, #8
 800f60a:	d122      	bne.n	800f652 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f003 0308 	and.w	r3, r3, #8
 800f616:	2b08      	cmp	r3, #8
 800f618:	d11b      	bne.n	800f652 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f06f 0208 	mvn.w	r2, #8
 800f622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2204      	movs	r2, #4
 800f628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	69db      	ldr	r3, [r3, #28]
 800f630:	f003 0303 	and.w	r3, r3, #3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f961 	bl	800f900 <HAL_TIM_IC_CaptureCallback>
 800f63e:	e005      	b.n	800f64c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 f953 	bl	800f8ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 f964 	bl	800f914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	f003 0310 	and.w	r3, r3, #16
 800f65c:	2b10      	cmp	r3, #16
 800f65e:	d122      	bne.n	800f6a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f003 0310 	and.w	r3, r3, #16
 800f66a:	2b10      	cmp	r3, #16
 800f66c:	d11b      	bne.n	800f6a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f06f 0210 	mvn.w	r2, #16
 800f676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2208      	movs	r2, #8
 800f67c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d003      	beq.n	800f694 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 f937 	bl	800f900 <HAL_TIM_IC_CaptureCallback>
 800f692:	e005      	b.n	800f6a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 f929 	bl	800f8ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f93a 	bl	800f914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	f003 0301 	and.w	r3, r3, #1
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d10e      	bne.n	800f6d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	f003 0301 	and.w	r3, r3, #1
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d107      	bne.n	800f6d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f06f 0201 	mvn.w	r2, #1
 800f6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7f6 fc3b 	bl	8005f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6dc:	2b80      	cmp	r3, #128	; 0x80
 800f6de:	d10e      	bne.n	800f6fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ea:	2b80      	cmp	r3, #128	; 0x80
 800f6ec:	d107      	bne.n	800f6fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fc6d 	bl	800ffd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f708:	2b40      	cmp	r3, #64	; 0x40
 800f70a:	d10e      	bne.n	800f72a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f716:	2b40      	cmp	r3, #64	; 0x40
 800f718:	d107      	bne.n	800f72a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 f8ff 	bl	800f928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	f003 0320 	and.w	r3, r3, #32
 800f734:	2b20      	cmp	r3, #32
 800f736:	d10e      	bne.n	800f756 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	f003 0320 	and.w	r3, r3, #32
 800f742:	2b20      	cmp	r3, #32
 800f744:	d107      	bne.n	800f756 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f06f 0220 	mvn.w	r2, #32
 800f74e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 fc37 	bl	800ffc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f756:	bf00      	nop
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f772:	2b01      	cmp	r3, #1
 800f774:	d101      	bne.n	800f77a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f776:	2302      	movs	r3, #2
 800f778:	e0b4      	b.n	800f8e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2201      	movs	r2, #1
 800f77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2202      	movs	r2, #2
 800f786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b0c      	cmp	r3, #12
 800f78e:	f200 809f 	bhi.w	800f8d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f792:	a201      	add	r2, pc, #4	; (adr r2, 800f798 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f798:	0800f7cd 	.word	0x0800f7cd
 800f79c:	0800f8d1 	.word	0x0800f8d1
 800f7a0:	0800f8d1 	.word	0x0800f8d1
 800f7a4:	0800f8d1 	.word	0x0800f8d1
 800f7a8:	0800f80d 	.word	0x0800f80d
 800f7ac:	0800f8d1 	.word	0x0800f8d1
 800f7b0:	0800f8d1 	.word	0x0800f8d1
 800f7b4:	0800f8d1 	.word	0x0800f8d1
 800f7b8:	0800f84f 	.word	0x0800f84f
 800f7bc:	0800f8d1 	.word	0x0800f8d1
 800f7c0:	0800f8d1 	.word	0x0800f8d1
 800f7c4:	0800f8d1 	.word	0x0800f8d1
 800f7c8:	0800f88f 	.word	0x0800f88f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68b9      	ldr	r1, [r7, #8]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 f952 	bl	800fa7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	699a      	ldr	r2, [r3, #24]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f042 0208 	orr.w	r2, r2, #8
 800f7e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	699a      	ldr	r2, [r3, #24]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f022 0204 	bic.w	r2, r2, #4
 800f7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6999      	ldr	r1, [r3, #24]
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	691a      	ldr	r2, [r3, #16]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	430a      	orrs	r2, r1
 800f808:	619a      	str	r2, [r3, #24]
      break;
 800f80a:	e062      	b.n	800f8d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	68b9      	ldr	r1, [r7, #8]
 800f812:	4618      	mov	r0, r3
 800f814:	f000 f9a2 	bl	800fb5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	699a      	ldr	r2, [r3, #24]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	699a      	ldr	r2, [r3, #24]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	6999      	ldr	r1, [r3, #24]
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	021a      	lsls	r2, r3, #8
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	430a      	orrs	r2, r1
 800f84a:	619a      	str	r2, [r3, #24]
      break;
 800f84c:	e041      	b.n	800f8d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68b9      	ldr	r1, [r7, #8]
 800f854:	4618      	mov	r0, r3
 800f856:	f000 f9f7 	bl	800fc48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	69da      	ldr	r2, [r3, #28]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f042 0208 	orr.w	r2, r2, #8
 800f868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	69da      	ldr	r2, [r3, #28]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f022 0204 	bic.w	r2, r2, #4
 800f878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	69d9      	ldr	r1, [r3, #28]
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	691a      	ldr	r2, [r3, #16]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	430a      	orrs	r2, r1
 800f88a:	61da      	str	r2, [r3, #28]
      break;
 800f88c:	e021      	b.n	800f8d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	68b9      	ldr	r1, [r7, #8]
 800f894:	4618      	mov	r0, r3
 800f896:	f000 fa4b 	bl	800fd30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	69da      	ldr	r2, [r3, #28]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	69da      	ldr	r2, [r3, #28]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	69d9      	ldr	r1, [r3, #28]
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	021a      	lsls	r2, r3, #8
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	430a      	orrs	r2, r1
 800f8cc:	61da      	str	r2, [r3, #28]
      break;
 800f8ce:	e000      	b.n	800f8d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f8d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8e2:	2300      	movs	r3, #0
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3710      	adds	r7, #16
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f8f4:	bf00      	nop
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f908:	bf00      	nop
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a40      	ldr	r2, [pc, #256]	; (800fa50 <TIM_Base_SetConfig+0x114>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d013      	beq.n	800f97c <TIM_Base_SetConfig+0x40>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f95a:	d00f      	beq.n	800f97c <TIM_Base_SetConfig+0x40>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a3d      	ldr	r2, [pc, #244]	; (800fa54 <TIM_Base_SetConfig+0x118>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d00b      	beq.n	800f97c <TIM_Base_SetConfig+0x40>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a3c      	ldr	r2, [pc, #240]	; (800fa58 <TIM_Base_SetConfig+0x11c>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d007      	beq.n	800f97c <TIM_Base_SetConfig+0x40>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a3b      	ldr	r2, [pc, #236]	; (800fa5c <TIM_Base_SetConfig+0x120>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d003      	beq.n	800f97c <TIM_Base_SetConfig+0x40>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a3a      	ldr	r2, [pc, #232]	; (800fa60 <TIM_Base_SetConfig+0x124>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d108      	bne.n	800f98e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a2f      	ldr	r2, [pc, #188]	; (800fa50 <TIM_Base_SetConfig+0x114>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d02b      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f99c:	d027      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a2c      	ldr	r2, [pc, #176]	; (800fa54 <TIM_Base_SetConfig+0x118>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d023      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a2b      	ldr	r2, [pc, #172]	; (800fa58 <TIM_Base_SetConfig+0x11c>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d01f      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a2a      	ldr	r2, [pc, #168]	; (800fa5c <TIM_Base_SetConfig+0x120>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d01b      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4a29      	ldr	r2, [pc, #164]	; (800fa60 <TIM_Base_SetConfig+0x124>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d017      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4a28      	ldr	r2, [pc, #160]	; (800fa64 <TIM_Base_SetConfig+0x128>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d013      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4a27      	ldr	r2, [pc, #156]	; (800fa68 <TIM_Base_SetConfig+0x12c>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d00f      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4a26      	ldr	r2, [pc, #152]	; (800fa6c <TIM_Base_SetConfig+0x130>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d00b      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a25      	ldr	r2, [pc, #148]	; (800fa70 <TIM_Base_SetConfig+0x134>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d007      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a24      	ldr	r2, [pc, #144]	; (800fa74 <TIM_Base_SetConfig+0x138>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d003      	beq.n	800f9ee <TIM_Base_SetConfig+0xb2>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4a23      	ldr	r2, [pc, #140]	; (800fa78 <TIM_Base_SetConfig+0x13c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d108      	bne.n	800fa00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	68fa      	ldr	r2, [r7, #12]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	695b      	ldr	r3, [r3, #20]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	689a      	ldr	r2, [r3, #8]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a0a      	ldr	r2, [pc, #40]	; (800fa50 <TIM_Base_SetConfig+0x114>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d003      	beq.n	800fa34 <TIM_Base_SetConfig+0xf8>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a0c      	ldr	r2, [pc, #48]	; (800fa60 <TIM_Base_SetConfig+0x124>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d103      	bne.n	800fa3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	691a      	ldr	r2, [r3, #16]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	615a      	str	r2, [r3, #20]
}
 800fa42:	bf00      	nop
 800fa44:	3714      	adds	r7, #20
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	40010000 	.word	0x40010000
 800fa54:	40000400 	.word	0x40000400
 800fa58:	40000800 	.word	0x40000800
 800fa5c:	40000c00 	.word	0x40000c00
 800fa60:	40010400 	.word	0x40010400
 800fa64:	40014000 	.word	0x40014000
 800fa68:	40014400 	.word	0x40014400
 800fa6c:	40014800 	.word	0x40014800
 800fa70:	40001800 	.word	0x40001800
 800fa74:	40001c00 	.word	0x40001c00
 800fa78:	40002000 	.word	0x40002000

0800fa7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b087      	sub	sp, #28
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a1b      	ldr	r3, [r3, #32]
 800fa8a:	f023 0201 	bic.w	r2, r3, #1
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a1b      	ldr	r3, [r3, #32]
 800fa96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f023 0303 	bic.w	r3, r3, #3
 800fab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	4313      	orrs	r3, r2
 800fabc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f023 0302 	bic.w	r3, r3, #2
 800fac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	4313      	orrs	r3, r2
 800face:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4a20      	ldr	r2, [pc, #128]	; (800fb54 <TIM_OC1_SetConfig+0xd8>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d003      	beq.n	800fae0 <TIM_OC1_SetConfig+0x64>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a1f      	ldr	r2, [pc, #124]	; (800fb58 <TIM_OC1_SetConfig+0xdc>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d10c      	bne.n	800fafa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f023 0308 	bic.w	r3, r3, #8
 800fae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	697a      	ldr	r2, [r7, #20]
 800faee:	4313      	orrs	r3, r2
 800faf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f023 0304 	bic.w	r3, r3, #4
 800faf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a15      	ldr	r2, [pc, #84]	; (800fb54 <TIM_OC1_SetConfig+0xd8>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d003      	beq.n	800fb0a <TIM_OC1_SetConfig+0x8e>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4a14      	ldr	r2, [pc, #80]	; (800fb58 <TIM_OC1_SetConfig+0xdc>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d111      	bne.n	800fb2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	695b      	ldr	r3, [r3, #20]
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	699b      	ldr	r3, [r3, #24]
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	697a      	ldr	r2, [r7, #20]
 800fb46:	621a      	str	r2, [r3, #32]
}
 800fb48:	bf00      	nop
 800fb4a:	371c      	adds	r7, #28
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	40010000 	.word	0x40010000
 800fb58:	40010400 	.word	0x40010400

0800fb5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b087      	sub	sp, #28
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	f023 0210 	bic.w	r2, r3, #16
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	699b      	ldr	r3, [r3, #24]
 800fb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	021b      	lsls	r3, r3, #8
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	f023 0320 	bic.w	r3, r3, #32
 800fba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	011b      	lsls	r3, r3, #4
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4a22      	ldr	r2, [pc, #136]	; (800fc40 <TIM_OC2_SetConfig+0xe4>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d003      	beq.n	800fbc4 <TIM_OC2_SetConfig+0x68>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a21      	ldr	r2, [pc, #132]	; (800fc44 <TIM_OC2_SetConfig+0xe8>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d10d      	bne.n	800fbe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a17      	ldr	r2, [pc, #92]	; (800fc40 <TIM_OC2_SetConfig+0xe4>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d003      	beq.n	800fbf0 <TIM_OC2_SetConfig+0x94>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a16      	ldr	r2, [pc, #88]	; (800fc44 <TIM_OC2_SetConfig+0xe8>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d113      	bne.n	800fc18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	693a      	ldr	r2, [r7, #16]
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	699b      	ldr	r3, [r3, #24]
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	693a      	ldr	r2, [r7, #16]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	697a      	ldr	r2, [r7, #20]
 800fc30:	621a      	str	r2, [r3, #32]
}
 800fc32:	bf00      	nop
 800fc34:	371c      	adds	r7, #28
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	40010000 	.word	0x40010000
 800fc44:	40010400 	.word	0x40010400

0800fc48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b087      	sub	sp, #28
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6a1b      	ldr	r3, [r3, #32]
 800fc62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	69db      	ldr	r3, [r3, #28]
 800fc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f023 0303 	bic.w	r3, r3, #3
 800fc7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	021b      	lsls	r3, r3, #8
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a21      	ldr	r2, [pc, #132]	; (800fd28 <TIM_OC3_SetConfig+0xe0>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d003      	beq.n	800fcae <TIM_OC3_SetConfig+0x66>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4a20      	ldr	r2, [pc, #128]	; (800fd2c <TIM_OC3_SetConfig+0xe4>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d10d      	bne.n	800fcca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	021b      	lsls	r3, r3, #8
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fcc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4a16      	ldr	r2, [pc, #88]	; (800fd28 <TIM_OC3_SetConfig+0xe0>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d003      	beq.n	800fcda <TIM_OC3_SetConfig+0x92>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4a15      	ldr	r2, [pc, #84]	; (800fd2c <TIM_OC3_SetConfig+0xe4>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d113      	bne.n	800fd02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	011b      	lsls	r3, r3, #4
 800fcf0:	693a      	ldr	r2, [r7, #16]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	699b      	ldr	r3, [r3, #24]
 800fcfa:	011b      	lsls	r3, r3, #4
 800fcfc:	693a      	ldr	r2, [r7, #16]
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	693a      	ldr	r2, [r7, #16]
 800fd06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	68fa      	ldr	r2, [r7, #12]
 800fd0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	685a      	ldr	r2, [r3, #4]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	697a      	ldr	r2, [r7, #20]
 800fd1a:	621a      	str	r2, [r3, #32]
}
 800fd1c:	bf00      	nop
 800fd1e:	371c      	adds	r7, #28
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	40010000 	.word	0x40010000
 800fd2c:	40010400 	.word	0x40010400

0800fd30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b087      	sub	sp, #28
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a1b      	ldr	r3, [r3, #32]
 800fd3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	021b      	lsls	r3, r3, #8
 800fd6e:	68fa      	ldr	r2, [r7, #12]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	031b      	lsls	r3, r3, #12
 800fd82:	693a      	ldr	r2, [r7, #16]
 800fd84:	4313      	orrs	r3, r2
 800fd86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a12      	ldr	r2, [pc, #72]	; (800fdd4 <TIM_OC4_SetConfig+0xa4>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d003      	beq.n	800fd98 <TIM_OC4_SetConfig+0x68>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4a11      	ldr	r2, [pc, #68]	; (800fdd8 <TIM_OC4_SetConfig+0xa8>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d109      	bne.n	800fdac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	695b      	ldr	r3, [r3, #20]
 800fda4:	019b      	lsls	r3, r3, #6
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	621a      	str	r2, [r3, #32]
}
 800fdc6:	bf00      	nop
 800fdc8:	371c      	adds	r7, #28
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	40010000 	.word	0x40010000
 800fdd8:	40010400 	.word	0x40010400

0800fddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	f003 031f 	and.w	r3, r3, #31
 800fdee:	2201      	movs	r2, #1
 800fdf0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6a1a      	ldr	r2, [r3, #32]
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	43db      	mvns	r3, r3
 800fdfe:	401a      	ands	r2, r3
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6a1a      	ldr	r2, [r3, #32]
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	f003 031f 	and.w	r3, r3, #31
 800fe0e:	6879      	ldr	r1, [r7, #4]
 800fe10:	fa01 f303 	lsl.w	r3, r1, r3
 800fe14:	431a      	orrs	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	621a      	str	r2, [r3, #32]
}
 800fe1a:	bf00      	nop
 800fe1c:	371c      	adds	r7, #28
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
	...

0800fe28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d101      	bne.n	800fe40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	e05a      	b.n	800fef6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4a21      	ldr	r2, [pc, #132]	; (800ff04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d022      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe8c:	d01d      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a1d      	ldr	r2, [pc, #116]	; (800ff08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d018      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a1b      	ldr	r2, [pc, #108]	; (800ff0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d013      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a1a      	ldr	r2, [pc, #104]	; (800ff10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d00e      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a18      	ldr	r2, [pc, #96]	; (800ff14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d009      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a17      	ldr	r2, [pc, #92]	; (800ff18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d004      	beq.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a15      	ldr	r2, [pc, #84]	; (800ff1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d10c      	bne.n	800fee4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	4313      	orrs	r3, r2
 800feda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68ba      	ldr	r2, [r7, #8]
 800fee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop
 800ff04:	40010000 	.word	0x40010000
 800ff08:	40000400 	.word	0x40000400
 800ff0c:	40000800 	.word	0x40000800
 800ff10:	40000c00 	.word	0x40000c00
 800ff14:	40010400 	.word	0x40010400
 800ff18:	40014000 	.word	0x40014000
 800ff1c:	40001800 	.word	0x40001800

0800ff20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d101      	bne.n	800ff3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ff38:	2302      	movs	r3, #2
 800ff3a:	e03d      	b.n	800ffb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4313      	orrs	r3, r2
 800ff7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	4313      	orrs	r3, r2
 800ff88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	695b      	ldr	r3, [r3, #20]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	69db      	ldr	r3, [r3, #28]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3714      	adds	r7, #20
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d101      	bne.n	800fffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fffa:	2301      	movs	r3, #1
 800fffc:	e03f      	b.n	801007e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010004:	b2db      	uxtb	r3, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	d106      	bne.n	8010018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7f7 fbea 	bl	80077ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2224      	movs	r2, #36	; 0x24
 801001c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68da      	ldr	r2, [r3, #12]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801002e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 f829 	bl	8010088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	691a      	ldr	r2, [r3, #16]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	695a      	ldr	r2, [r3, #20]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	68da      	ldr	r2, [r3, #12]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2220      	movs	r2, #32
 8010070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2220      	movs	r2, #32
 8010078:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
	...

08010088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008c:	b085      	sub	sp, #20
 801008e:	af00      	add	r7, sp, #0
 8010090:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	68da      	ldr	r2, [r3, #12]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	430a      	orrs	r2, r1
 80100a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	689a      	ldr	r2, [r3, #8]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	431a      	orrs	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	431a      	orrs	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	69db      	ldr	r3, [r3, #28]
 80100bc:	4313      	orrs	r3, r2
 80100be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80100ca:	f023 030c 	bic.w	r3, r3, #12
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	6812      	ldr	r2, [r2, #0]
 80100d2:	68f9      	ldr	r1, [r7, #12]
 80100d4:	430b      	orrs	r3, r1
 80100d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	699a      	ldr	r2, [r3, #24]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	430a      	orrs	r2, r1
 80100ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	69db      	ldr	r3, [r3, #28]
 80100f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100f6:	f040 818b 	bne.w	8010410 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4ac1      	ldr	r2, [pc, #772]	; (8010404 <UART_SetConfig+0x37c>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d005      	beq.n	8010110 <UART_SetConfig+0x88>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4abf      	ldr	r2, [pc, #764]	; (8010408 <UART_SetConfig+0x380>)
 801010a:	4293      	cmp	r3, r2
 801010c:	f040 80bd 	bne.w	801028a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010110:	f7fc fbcc 	bl	800c8ac <HAL_RCC_GetPCLK2Freq>
 8010114:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	461d      	mov	r5, r3
 801011a:	f04f 0600 	mov.w	r6, #0
 801011e:	46a8      	mov	r8, r5
 8010120:	46b1      	mov	r9, r6
 8010122:	eb18 0308 	adds.w	r3, r8, r8
 8010126:	eb49 0409 	adc.w	r4, r9, r9
 801012a:	4698      	mov	r8, r3
 801012c:	46a1      	mov	r9, r4
 801012e:	eb18 0805 	adds.w	r8, r8, r5
 8010132:	eb49 0906 	adc.w	r9, r9, r6
 8010136:	f04f 0100 	mov.w	r1, #0
 801013a:	f04f 0200 	mov.w	r2, #0
 801013e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010142:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010146:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801014a:	4688      	mov	r8, r1
 801014c:	4691      	mov	r9, r2
 801014e:	eb18 0005 	adds.w	r0, r8, r5
 8010152:	eb49 0106 	adc.w	r1, r9, r6
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	461d      	mov	r5, r3
 801015c:	f04f 0600 	mov.w	r6, #0
 8010160:	196b      	adds	r3, r5, r5
 8010162:	eb46 0406 	adc.w	r4, r6, r6
 8010166:	461a      	mov	r2, r3
 8010168:	4623      	mov	r3, r4
 801016a:	f7f0 fda5 	bl	8000cb8 <__aeabi_uldivmod>
 801016e:	4603      	mov	r3, r0
 8010170:	460c      	mov	r4, r1
 8010172:	461a      	mov	r2, r3
 8010174:	4ba5      	ldr	r3, [pc, #660]	; (801040c <UART_SetConfig+0x384>)
 8010176:	fba3 2302 	umull	r2, r3, r3, r2
 801017a:	095b      	lsrs	r3, r3, #5
 801017c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	461d      	mov	r5, r3
 8010184:	f04f 0600 	mov.w	r6, #0
 8010188:	46a9      	mov	r9, r5
 801018a:	46b2      	mov	sl, r6
 801018c:	eb19 0309 	adds.w	r3, r9, r9
 8010190:	eb4a 040a 	adc.w	r4, sl, sl
 8010194:	4699      	mov	r9, r3
 8010196:	46a2      	mov	sl, r4
 8010198:	eb19 0905 	adds.w	r9, r9, r5
 801019c:	eb4a 0a06 	adc.w	sl, sl, r6
 80101a0:	f04f 0100 	mov.w	r1, #0
 80101a4:	f04f 0200 	mov.w	r2, #0
 80101a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101b4:	4689      	mov	r9, r1
 80101b6:	4692      	mov	sl, r2
 80101b8:	eb19 0005 	adds.w	r0, r9, r5
 80101bc:	eb4a 0106 	adc.w	r1, sl, r6
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	461d      	mov	r5, r3
 80101c6:	f04f 0600 	mov.w	r6, #0
 80101ca:	196b      	adds	r3, r5, r5
 80101cc:	eb46 0406 	adc.w	r4, r6, r6
 80101d0:	461a      	mov	r2, r3
 80101d2:	4623      	mov	r3, r4
 80101d4:	f7f0 fd70 	bl	8000cb8 <__aeabi_uldivmod>
 80101d8:	4603      	mov	r3, r0
 80101da:	460c      	mov	r4, r1
 80101dc:	461a      	mov	r2, r3
 80101de:	4b8b      	ldr	r3, [pc, #556]	; (801040c <UART_SetConfig+0x384>)
 80101e0:	fba3 1302 	umull	r1, r3, r3, r2
 80101e4:	095b      	lsrs	r3, r3, #5
 80101e6:	2164      	movs	r1, #100	; 0x64
 80101e8:	fb01 f303 	mul.w	r3, r1, r3
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	3332      	adds	r3, #50	; 0x32
 80101f2:	4a86      	ldr	r2, [pc, #536]	; (801040c <UART_SetConfig+0x384>)
 80101f4:	fba2 2303 	umull	r2, r3, r2, r3
 80101f8:	095b      	lsrs	r3, r3, #5
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010200:	4498      	add	r8, r3
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	461d      	mov	r5, r3
 8010206:	f04f 0600 	mov.w	r6, #0
 801020a:	46a9      	mov	r9, r5
 801020c:	46b2      	mov	sl, r6
 801020e:	eb19 0309 	adds.w	r3, r9, r9
 8010212:	eb4a 040a 	adc.w	r4, sl, sl
 8010216:	4699      	mov	r9, r3
 8010218:	46a2      	mov	sl, r4
 801021a:	eb19 0905 	adds.w	r9, r9, r5
 801021e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010222:	f04f 0100 	mov.w	r1, #0
 8010226:	f04f 0200 	mov.w	r2, #0
 801022a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801022e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010232:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010236:	4689      	mov	r9, r1
 8010238:	4692      	mov	sl, r2
 801023a:	eb19 0005 	adds.w	r0, r9, r5
 801023e:	eb4a 0106 	adc.w	r1, sl, r6
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	461d      	mov	r5, r3
 8010248:	f04f 0600 	mov.w	r6, #0
 801024c:	196b      	adds	r3, r5, r5
 801024e:	eb46 0406 	adc.w	r4, r6, r6
 8010252:	461a      	mov	r2, r3
 8010254:	4623      	mov	r3, r4
 8010256:	f7f0 fd2f 	bl	8000cb8 <__aeabi_uldivmod>
 801025a:	4603      	mov	r3, r0
 801025c:	460c      	mov	r4, r1
 801025e:	461a      	mov	r2, r3
 8010260:	4b6a      	ldr	r3, [pc, #424]	; (801040c <UART_SetConfig+0x384>)
 8010262:	fba3 1302 	umull	r1, r3, r3, r2
 8010266:	095b      	lsrs	r3, r3, #5
 8010268:	2164      	movs	r1, #100	; 0x64
 801026a:	fb01 f303 	mul.w	r3, r1, r3
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	3332      	adds	r3, #50	; 0x32
 8010274:	4a65      	ldr	r2, [pc, #404]	; (801040c <UART_SetConfig+0x384>)
 8010276:	fba2 2303 	umull	r2, r3, r2, r3
 801027a:	095b      	lsrs	r3, r3, #5
 801027c:	f003 0207 	and.w	r2, r3, #7
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4442      	add	r2, r8
 8010286:	609a      	str	r2, [r3, #8]
 8010288:	e26f      	b.n	801076a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801028a:	f7fc fafb 	bl	800c884 <HAL_RCC_GetPCLK1Freq>
 801028e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	461d      	mov	r5, r3
 8010294:	f04f 0600 	mov.w	r6, #0
 8010298:	46a8      	mov	r8, r5
 801029a:	46b1      	mov	r9, r6
 801029c:	eb18 0308 	adds.w	r3, r8, r8
 80102a0:	eb49 0409 	adc.w	r4, r9, r9
 80102a4:	4698      	mov	r8, r3
 80102a6:	46a1      	mov	r9, r4
 80102a8:	eb18 0805 	adds.w	r8, r8, r5
 80102ac:	eb49 0906 	adc.w	r9, r9, r6
 80102b0:	f04f 0100 	mov.w	r1, #0
 80102b4:	f04f 0200 	mov.w	r2, #0
 80102b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80102bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80102c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80102c4:	4688      	mov	r8, r1
 80102c6:	4691      	mov	r9, r2
 80102c8:	eb18 0005 	adds.w	r0, r8, r5
 80102cc:	eb49 0106 	adc.w	r1, r9, r6
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	461d      	mov	r5, r3
 80102d6:	f04f 0600 	mov.w	r6, #0
 80102da:	196b      	adds	r3, r5, r5
 80102dc:	eb46 0406 	adc.w	r4, r6, r6
 80102e0:	461a      	mov	r2, r3
 80102e2:	4623      	mov	r3, r4
 80102e4:	f7f0 fce8 	bl	8000cb8 <__aeabi_uldivmod>
 80102e8:	4603      	mov	r3, r0
 80102ea:	460c      	mov	r4, r1
 80102ec:	461a      	mov	r2, r3
 80102ee:	4b47      	ldr	r3, [pc, #284]	; (801040c <UART_SetConfig+0x384>)
 80102f0:	fba3 2302 	umull	r2, r3, r3, r2
 80102f4:	095b      	lsrs	r3, r3, #5
 80102f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	461d      	mov	r5, r3
 80102fe:	f04f 0600 	mov.w	r6, #0
 8010302:	46a9      	mov	r9, r5
 8010304:	46b2      	mov	sl, r6
 8010306:	eb19 0309 	adds.w	r3, r9, r9
 801030a:	eb4a 040a 	adc.w	r4, sl, sl
 801030e:	4699      	mov	r9, r3
 8010310:	46a2      	mov	sl, r4
 8010312:	eb19 0905 	adds.w	r9, r9, r5
 8010316:	eb4a 0a06 	adc.w	sl, sl, r6
 801031a:	f04f 0100 	mov.w	r1, #0
 801031e:	f04f 0200 	mov.w	r2, #0
 8010322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801032a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801032e:	4689      	mov	r9, r1
 8010330:	4692      	mov	sl, r2
 8010332:	eb19 0005 	adds.w	r0, r9, r5
 8010336:	eb4a 0106 	adc.w	r1, sl, r6
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	461d      	mov	r5, r3
 8010340:	f04f 0600 	mov.w	r6, #0
 8010344:	196b      	adds	r3, r5, r5
 8010346:	eb46 0406 	adc.w	r4, r6, r6
 801034a:	461a      	mov	r2, r3
 801034c:	4623      	mov	r3, r4
 801034e:	f7f0 fcb3 	bl	8000cb8 <__aeabi_uldivmod>
 8010352:	4603      	mov	r3, r0
 8010354:	460c      	mov	r4, r1
 8010356:	461a      	mov	r2, r3
 8010358:	4b2c      	ldr	r3, [pc, #176]	; (801040c <UART_SetConfig+0x384>)
 801035a:	fba3 1302 	umull	r1, r3, r3, r2
 801035e:	095b      	lsrs	r3, r3, #5
 8010360:	2164      	movs	r1, #100	; 0x64
 8010362:	fb01 f303 	mul.w	r3, r1, r3
 8010366:	1ad3      	subs	r3, r2, r3
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	3332      	adds	r3, #50	; 0x32
 801036c:	4a27      	ldr	r2, [pc, #156]	; (801040c <UART_SetConfig+0x384>)
 801036e:	fba2 2303 	umull	r2, r3, r2, r3
 8010372:	095b      	lsrs	r3, r3, #5
 8010374:	005b      	lsls	r3, r3, #1
 8010376:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801037a:	4498      	add	r8, r3
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	461d      	mov	r5, r3
 8010380:	f04f 0600 	mov.w	r6, #0
 8010384:	46a9      	mov	r9, r5
 8010386:	46b2      	mov	sl, r6
 8010388:	eb19 0309 	adds.w	r3, r9, r9
 801038c:	eb4a 040a 	adc.w	r4, sl, sl
 8010390:	4699      	mov	r9, r3
 8010392:	46a2      	mov	sl, r4
 8010394:	eb19 0905 	adds.w	r9, r9, r5
 8010398:	eb4a 0a06 	adc.w	sl, sl, r6
 801039c:	f04f 0100 	mov.w	r1, #0
 80103a0:	f04f 0200 	mov.w	r2, #0
 80103a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103b0:	4689      	mov	r9, r1
 80103b2:	4692      	mov	sl, r2
 80103b4:	eb19 0005 	adds.w	r0, r9, r5
 80103b8:	eb4a 0106 	adc.w	r1, sl, r6
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	461d      	mov	r5, r3
 80103c2:	f04f 0600 	mov.w	r6, #0
 80103c6:	196b      	adds	r3, r5, r5
 80103c8:	eb46 0406 	adc.w	r4, r6, r6
 80103cc:	461a      	mov	r2, r3
 80103ce:	4623      	mov	r3, r4
 80103d0:	f7f0 fc72 	bl	8000cb8 <__aeabi_uldivmod>
 80103d4:	4603      	mov	r3, r0
 80103d6:	460c      	mov	r4, r1
 80103d8:	461a      	mov	r2, r3
 80103da:	4b0c      	ldr	r3, [pc, #48]	; (801040c <UART_SetConfig+0x384>)
 80103dc:	fba3 1302 	umull	r1, r3, r3, r2
 80103e0:	095b      	lsrs	r3, r3, #5
 80103e2:	2164      	movs	r1, #100	; 0x64
 80103e4:	fb01 f303 	mul.w	r3, r1, r3
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	00db      	lsls	r3, r3, #3
 80103ec:	3332      	adds	r3, #50	; 0x32
 80103ee:	4a07      	ldr	r2, [pc, #28]	; (801040c <UART_SetConfig+0x384>)
 80103f0:	fba2 2303 	umull	r2, r3, r2, r3
 80103f4:	095b      	lsrs	r3, r3, #5
 80103f6:	f003 0207 	and.w	r2, r3, #7
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4442      	add	r2, r8
 8010400:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010402:	e1b2      	b.n	801076a <UART_SetConfig+0x6e2>
 8010404:	40011000 	.word	0x40011000
 8010408:	40011400 	.word	0x40011400
 801040c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4ad7      	ldr	r2, [pc, #860]	; (8010774 <UART_SetConfig+0x6ec>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d005      	beq.n	8010426 <UART_SetConfig+0x39e>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4ad6      	ldr	r2, [pc, #856]	; (8010778 <UART_SetConfig+0x6f0>)
 8010420:	4293      	cmp	r3, r2
 8010422:	f040 80d1 	bne.w	80105c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010426:	f7fc fa41 	bl	800c8ac <HAL_RCC_GetPCLK2Freq>
 801042a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	469a      	mov	sl, r3
 8010430:	f04f 0b00 	mov.w	fp, #0
 8010434:	46d0      	mov	r8, sl
 8010436:	46d9      	mov	r9, fp
 8010438:	eb18 0308 	adds.w	r3, r8, r8
 801043c:	eb49 0409 	adc.w	r4, r9, r9
 8010440:	4698      	mov	r8, r3
 8010442:	46a1      	mov	r9, r4
 8010444:	eb18 080a 	adds.w	r8, r8, sl
 8010448:	eb49 090b 	adc.w	r9, r9, fp
 801044c:	f04f 0100 	mov.w	r1, #0
 8010450:	f04f 0200 	mov.w	r2, #0
 8010454:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010458:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801045c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010460:	4688      	mov	r8, r1
 8010462:	4691      	mov	r9, r2
 8010464:	eb1a 0508 	adds.w	r5, sl, r8
 8010468:	eb4b 0609 	adc.w	r6, fp, r9
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	4619      	mov	r1, r3
 8010472:	f04f 0200 	mov.w	r2, #0
 8010476:	f04f 0300 	mov.w	r3, #0
 801047a:	f04f 0400 	mov.w	r4, #0
 801047e:	0094      	lsls	r4, r2, #2
 8010480:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010484:	008b      	lsls	r3, r1, #2
 8010486:	461a      	mov	r2, r3
 8010488:	4623      	mov	r3, r4
 801048a:	4628      	mov	r0, r5
 801048c:	4631      	mov	r1, r6
 801048e:	f7f0 fc13 	bl	8000cb8 <__aeabi_uldivmod>
 8010492:	4603      	mov	r3, r0
 8010494:	460c      	mov	r4, r1
 8010496:	461a      	mov	r2, r3
 8010498:	4bb8      	ldr	r3, [pc, #736]	; (801077c <UART_SetConfig+0x6f4>)
 801049a:	fba3 2302 	umull	r2, r3, r3, r2
 801049e:	095b      	lsrs	r3, r3, #5
 80104a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	469b      	mov	fp, r3
 80104a8:	f04f 0c00 	mov.w	ip, #0
 80104ac:	46d9      	mov	r9, fp
 80104ae:	46e2      	mov	sl, ip
 80104b0:	eb19 0309 	adds.w	r3, r9, r9
 80104b4:	eb4a 040a 	adc.w	r4, sl, sl
 80104b8:	4699      	mov	r9, r3
 80104ba:	46a2      	mov	sl, r4
 80104bc:	eb19 090b 	adds.w	r9, r9, fp
 80104c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80104c4:	f04f 0100 	mov.w	r1, #0
 80104c8:	f04f 0200 	mov.w	r2, #0
 80104cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104d8:	4689      	mov	r9, r1
 80104da:	4692      	mov	sl, r2
 80104dc:	eb1b 0509 	adds.w	r5, fp, r9
 80104e0:	eb4c 060a 	adc.w	r6, ip, sl
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	4619      	mov	r1, r3
 80104ea:	f04f 0200 	mov.w	r2, #0
 80104ee:	f04f 0300 	mov.w	r3, #0
 80104f2:	f04f 0400 	mov.w	r4, #0
 80104f6:	0094      	lsls	r4, r2, #2
 80104f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104fc:	008b      	lsls	r3, r1, #2
 80104fe:	461a      	mov	r2, r3
 8010500:	4623      	mov	r3, r4
 8010502:	4628      	mov	r0, r5
 8010504:	4631      	mov	r1, r6
 8010506:	f7f0 fbd7 	bl	8000cb8 <__aeabi_uldivmod>
 801050a:	4603      	mov	r3, r0
 801050c:	460c      	mov	r4, r1
 801050e:	461a      	mov	r2, r3
 8010510:	4b9a      	ldr	r3, [pc, #616]	; (801077c <UART_SetConfig+0x6f4>)
 8010512:	fba3 1302 	umull	r1, r3, r3, r2
 8010516:	095b      	lsrs	r3, r3, #5
 8010518:	2164      	movs	r1, #100	; 0x64
 801051a:	fb01 f303 	mul.w	r3, r1, r3
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	011b      	lsls	r3, r3, #4
 8010522:	3332      	adds	r3, #50	; 0x32
 8010524:	4a95      	ldr	r2, [pc, #596]	; (801077c <UART_SetConfig+0x6f4>)
 8010526:	fba2 2303 	umull	r2, r3, r2, r3
 801052a:	095b      	lsrs	r3, r3, #5
 801052c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010530:	4498      	add	r8, r3
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	469b      	mov	fp, r3
 8010536:	f04f 0c00 	mov.w	ip, #0
 801053a:	46d9      	mov	r9, fp
 801053c:	46e2      	mov	sl, ip
 801053e:	eb19 0309 	adds.w	r3, r9, r9
 8010542:	eb4a 040a 	adc.w	r4, sl, sl
 8010546:	4699      	mov	r9, r3
 8010548:	46a2      	mov	sl, r4
 801054a:	eb19 090b 	adds.w	r9, r9, fp
 801054e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010552:	f04f 0100 	mov.w	r1, #0
 8010556:	f04f 0200 	mov.w	r2, #0
 801055a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801055e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010562:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010566:	4689      	mov	r9, r1
 8010568:	4692      	mov	sl, r2
 801056a:	eb1b 0509 	adds.w	r5, fp, r9
 801056e:	eb4c 060a 	adc.w	r6, ip, sl
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	4619      	mov	r1, r3
 8010578:	f04f 0200 	mov.w	r2, #0
 801057c:	f04f 0300 	mov.w	r3, #0
 8010580:	f04f 0400 	mov.w	r4, #0
 8010584:	0094      	lsls	r4, r2, #2
 8010586:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801058a:	008b      	lsls	r3, r1, #2
 801058c:	461a      	mov	r2, r3
 801058e:	4623      	mov	r3, r4
 8010590:	4628      	mov	r0, r5
 8010592:	4631      	mov	r1, r6
 8010594:	f7f0 fb90 	bl	8000cb8 <__aeabi_uldivmod>
 8010598:	4603      	mov	r3, r0
 801059a:	460c      	mov	r4, r1
 801059c:	461a      	mov	r2, r3
 801059e:	4b77      	ldr	r3, [pc, #476]	; (801077c <UART_SetConfig+0x6f4>)
 80105a0:	fba3 1302 	umull	r1, r3, r3, r2
 80105a4:	095b      	lsrs	r3, r3, #5
 80105a6:	2164      	movs	r1, #100	; 0x64
 80105a8:	fb01 f303 	mul.w	r3, r1, r3
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	011b      	lsls	r3, r3, #4
 80105b0:	3332      	adds	r3, #50	; 0x32
 80105b2:	4a72      	ldr	r2, [pc, #456]	; (801077c <UART_SetConfig+0x6f4>)
 80105b4:	fba2 2303 	umull	r2, r3, r2, r3
 80105b8:	095b      	lsrs	r3, r3, #5
 80105ba:	f003 020f 	and.w	r2, r3, #15
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4442      	add	r2, r8
 80105c4:	609a      	str	r2, [r3, #8]
 80105c6:	e0d0      	b.n	801076a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80105c8:	f7fc f95c 	bl	800c884 <HAL_RCC_GetPCLK1Freq>
 80105cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	469a      	mov	sl, r3
 80105d2:	f04f 0b00 	mov.w	fp, #0
 80105d6:	46d0      	mov	r8, sl
 80105d8:	46d9      	mov	r9, fp
 80105da:	eb18 0308 	adds.w	r3, r8, r8
 80105de:	eb49 0409 	adc.w	r4, r9, r9
 80105e2:	4698      	mov	r8, r3
 80105e4:	46a1      	mov	r9, r4
 80105e6:	eb18 080a 	adds.w	r8, r8, sl
 80105ea:	eb49 090b 	adc.w	r9, r9, fp
 80105ee:	f04f 0100 	mov.w	r1, #0
 80105f2:	f04f 0200 	mov.w	r2, #0
 80105f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80105fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80105fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010602:	4688      	mov	r8, r1
 8010604:	4691      	mov	r9, r2
 8010606:	eb1a 0508 	adds.w	r5, sl, r8
 801060a:	eb4b 0609 	adc.w	r6, fp, r9
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	4619      	mov	r1, r3
 8010614:	f04f 0200 	mov.w	r2, #0
 8010618:	f04f 0300 	mov.w	r3, #0
 801061c:	f04f 0400 	mov.w	r4, #0
 8010620:	0094      	lsls	r4, r2, #2
 8010622:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010626:	008b      	lsls	r3, r1, #2
 8010628:	461a      	mov	r2, r3
 801062a:	4623      	mov	r3, r4
 801062c:	4628      	mov	r0, r5
 801062e:	4631      	mov	r1, r6
 8010630:	f7f0 fb42 	bl	8000cb8 <__aeabi_uldivmod>
 8010634:	4603      	mov	r3, r0
 8010636:	460c      	mov	r4, r1
 8010638:	461a      	mov	r2, r3
 801063a:	4b50      	ldr	r3, [pc, #320]	; (801077c <UART_SetConfig+0x6f4>)
 801063c:	fba3 2302 	umull	r2, r3, r3, r2
 8010640:	095b      	lsrs	r3, r3, #5
 8010642:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	469b      	mov	fp, r3
 801064a:	f04f 0c00 	mov.w	ip, #0
 801064e:	46d9      	mov	r9, fp
 8010650:	46e2      	mov	sl, ip
 8010652:	eb19 0309 	adds.w	r3, r9, r9
 8010656:	eb4a 040a 	adc.w	r4, sl, sl
 801065a:	4699      	mov	r9, r3
 801065c:	46a2      	mov	sl, r4
 801065e:	eb19 090b 	adds.w	r9, r9, fp
 8010662:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010666:	f04f 0100 	mov.w	r1, #0
 801066a:	f04f 0200 	mov.w	r2, #0
 801066e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010672:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010676:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801067a:	4689      	mov	r9, r1
 801067c:	4692      	mov	sl, r2
 801067e:	eb1b 0509 	adds.w	r5, fp, r9
 8010682:	eb4c 060a 	adc.w	r6, ip, sl
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	4619      	mov	r1, r3
 801068c:	f04f 0200 	mov.w	r2, #0
 8010690:	f04f 0300 	mov.w	r3, #0
 8010694:	f04f 0400 	mov.w	r4, #0
 8010698:	0094      	lsls	r4, r2, #2
 801069a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801069e:	008b      	lsls	r3, r1, #2
 80106a0:	461a      	mov	r2, r3
 80106a2:	4623      	mov	r3, r4
 80106a4:	4628      	mov	r0, r5
 80106a6:	4631      	mov	r1, r6
 80106a8:	f7f0 fb06 	bl	8000cb8 <__aeabi_uldivmod>
 80106ac:	4603      	mov	r3, r0
 80106ae:	460c      	mov	r4, r1
 80106b0:	461a      	mov	r2, r3
 80106b2:	4b32      	ldr	r3, [pc, #200]	; (801077c <UART_SetConfig+0x6f4>)
 80106b4:	fba3 1302 	umull	r1, r3, r3, r2
 80106b8:	095b      	lsrs	r3, r3, #5
 80106ba:	2164      	movs	r1, #100	; 0x64
 80106bc:	fb01 f303 	mul.w	r3, r1, r3
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	011b      	lsls	r3, r3, #4
 80106c4:	3332      	adds	r3, #50	; 0x32
 80106c6:	4a2d      	ldr	r2, [pc, #180]	; (801077c <UART_SetConfig+0x6f4>)
 80106c8:	fba2 2303 	umull	r2, r3, r2, r3
 80106cc:	095b      	lsrs	r3, r3, #5
 80106ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106d2:	4498      	add	r8, r3
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	469b      	mov	fp, r3
 80106d8:	f04f 0c00 	mov.w	ip, #0
 80106dc:	46d9      	mov	r9, fp
 80106de:	46e2      	mov	sl, ip
 80106e0:	eb19 0309 	adds.w	r3, r9, r9
 80106e4:	eb4a 040a 	adc.w	r4, sl, sl
 80106e8:	4699      	mov	r9, r3
 80106ea:	46a2      	mov	sl, r4
 80106ec:	eb19 090b 	adds.w	r9, r9, fp
 80106f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80106f4:	f04f 0100 	mov.w	r1, #0
 80106f8:	f04f 0200 	mov.w	r2, #0
 80106fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010708:	4689      	mov	r9, r1
 801070a:	4692      	mov	sl, r2
 801070c:	eb1b 0509 	adds.w	r5, fp, r9
 8010710:	eb4c 060a 	adc.w	r6, ip, sl
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	4619      	mov	r1, r3
 801071a:	f04f 0200 	mov.w	r2, #0
 801071e:	f04f 0300 	mov.w	r3, #0
 8010722:	f04f 0400 	mov.w	r4, #0
 8010726:	0094      	lsls	r4, r2, #2
 8010728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801072c:	008b      	lsls	r3, r1, #2
 801072e:	461a      	mov	r2, r3
 8010730:	4623      	mov	r3, r4
 8010732:	4628      	mov	r0, r5
 8010734:	4631      	mov	r1, r6
 8010736:	f7f0 fabf 	bl	8000cb8 <__aeabi_uldivmod>
 801073a:	4603      	mov	r3, r0
 801073c:	460c      	mov	r4, r1
 801073e:	461a      	mov	r2, r3
 8010740:	4b0e      	ldr	r3, [pc, #56]	; (801077c <UART_SetConfig+0x6f4>)
 8010742:	fba3 1302 	umull	r1, r3, r3, r2
 8010746:	095b      	lsrs	r3, r3, #5
 8010748:	2164      	movs	r1, #100	; 0x64
 801074a:	fb01 f303 	mul.w	r3, r1, r3
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	011b      	lsls	r3, r3, #4
 8010752:	3332      	adds	r3, #50	; 0x32
 8010754:	4a09      	ldr	r2, [pc, #36]	; (801077c <UART_SetConfig+0x6f4>)
 8010756:	fba2 2303 	umull	r2, r3, r2, r3
 801075a:	095b      	lsrs	r3, r3, #5
 801075c:	f003 020f 	and.w	r2, r3, #15
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4442      	add	r2, r8
 8010766:	609a      	str	r2, [r3, #8]
}
 8010768:	e7ff      	b.n	801076a <UART_SetConfig+0x6e2>
 801076a:	bf00      	nop
 801076c:	3714      	adds	r7, #20
 801076e:	46bd      	mov	sp, r7
 8010770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010774:	40011000 	.word	0x40011000
 8010778:	40011400 	.word	0x40011400
 801077c:	51eb851f 	.word	0x51eb851f

08010780 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010780:	b084      	sub	sp, #16
 8010782:	b480      	push	{r7}
 8010784:	b085      	sub	sp, #20
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	f107 001c 	add.w	r0, r7, #28
 801078e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010796:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010798:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801079a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801079e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80107a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80107a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80107a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80107aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80107ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	431a      	orrs	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	b004      	add	sp, #16
 80107d4:	4770      	bx	lr

080107d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80107d6:	b480      	push	{r7}
 80107d8:	b083      	sub	sp, #12
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010812:	b580      	push	{r7, lr}
 8010814:	b082      	sub	sp, #8
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2203      	movs	r2, #3
 801081e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010820:	2002      	movs	r0, #2
 8010822:	f7f9 fbc5 	bl	8009fb0 <HAL_Delay>
  
  return HAL_OK;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 0303 	and.w	r3, r3, #3
}
 8010840:	4618      	mov	r0, r3
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801086a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010870:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010876:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	4313      	orrs	r3, r2
 801087c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010886:	f023 030f 	bic.w	r3, r3, #15
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	431a      	orrs	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010892:	2300      	movs	r3, #0
}
 8010894:	4618      	mov	r0, r3
 8010896:	3714      	adds	r7, #20
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	b2db      	uxtb	r3, r3
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80108ba:	b480      	push	{r7}
 80108bc:	b085      	sub	sp, #20
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	3314      	adds	r3, #20
 80108c8:	461a      	mov	r2, r3
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	4413      	add	r3, r2
 80108ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
}  
 80108d4:	4618      	mov	r0, r3
 80108d6:	3714      	adds	r7, #20
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685a      	ldr	r2, [r3, #4]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010906:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801090c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010912:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	4313      	orrs	r3, r2
 8010918:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	431a      	orrs	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801092a:	2300      	movs	r3, #0

}
 801092c:	4618      	mov	r0, r3
 801092e:	3714      	adds	r7, #20
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b088      	sub	sp, #32
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010946:	2310      	movs	r3, #16
 8010948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801094a:	2340      	movs	r3, #64	; 0x40
 801094c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801094e:	2300      	movs	r3, #0
 8010950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010958:	f107 0308 	add.w	r3, r7, #8
 801095c:	4619      	mov	r1, r3
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff ff74 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010964:	f241 3288 	movw	r2, #5000	; 0x1388
 8010968:	2110      	movs	r1, #16
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fa40 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010972:	69fb      	ldr	r3, [r7, #28]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3720      	adds	r7, #32
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b088      	sub	sp, #32
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801098a:	2311      	movs	r3, #17
 801098c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801098e:	2340      	movs	r3, #64	; 0x40
 8010990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010992:	2300      	movs	r3, #0
 8010994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801099a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801099c:	f107 0308 	add.w	r3, r7, #8
 80109a0:	4619      	mov	r1, r3
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f7ff ff52 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80109a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109ac:	2111      	movs	r1, #17
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 fa1e 	bl	8010df0 <SDMMC_GetCmdResp1>
 80109b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109b6:	69fb      	ldr	r3, [r7, #28]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3720      	adds	r7, #32
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b088      	sub	sp, #32
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80109ce:	2312      	movs	r3, #18
 80109d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109d2:	2340      	movs	r3, #64	; 0x40
 80109d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109d6:	2300      	movs	r3, #0
 80109d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109e0:	f107 0308 	add.w	r3, r7, #8
 80109e4:	4619      	mov	r1, r3
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7ff ff30 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80109ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80109f0:	2112      	movs	r1, #18
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f9fc 	bl	8010df0 <SDMMC_GetCmdResp1>
 80109f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109fa:	69fb      	ldr	r3, [r7, #28]
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3720      	adds	r7, #32
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b088      	sub	sp, #32
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a12:	2318      	movs	r3, #24
 8010a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a16:	2340      	movs	r3, #64	; 0x40
 8010a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a24:	f107 0308 	add.w	r3, r7, #8
 8010a28:	4619      	mov	r1, r3
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff ff0e 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a34:	2118      	movs	r1, #24
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 f9da 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a3e:	69fb      	ldr	r3, [r7, #28]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3720      	adds	r7, #32
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b088      	sub	sp, #32
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a56:	2319      	movs	r3, #25
 8010a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a5a:	2340      	movs	r3, #64	; 0x40
 8010a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a68:	f107 0308 	add.w	r3, r7, #8
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff feec 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a78:	2119      	movs	r1, #25
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f9b8 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a82:	69fb      	ldr	r3, [r7, #28]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3720      	adds	r7, #32
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b088      	sub	sp, #32
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010a94:	2300      	movs	r3, #0
 8010a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010a98:	230c      	movs	r3, #12
 8010a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aaa:	f107 0308 	add.w	r3, r7, #8
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fecb 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010ab6:	4a05      	ldr	r2, [pc, #20]	; (8010acc <SDMMC_CmdStopTransfer+0x40>)
 8010ab8:	210c      	movs	r1, #12
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 f998 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ac2:	69fb      	ldr	r3, [r7, #28]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3720      	adds	r7, #32
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	05f5e100 	.word	0x05f5e100

08010ad0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b08a      	sub	sp, #40	; 0x28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010ae0:	2307      	movs	r3, #7
 8010ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ae4:	2340      	movs	r3, #64	; 0x40
 8010ae6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010af0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010af2:	f107 0310 	add.w	r3, r7, #16
 8010af6:	4619      	mov	r1, r3
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	f7ff fea7 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b02:	2107      	movs	r1, #7
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f000 f973 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010b0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3728      	adds	r7, #40	; 0x28
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b088      	sub	sp, #32
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b22:	2300      	movs	r3, #0
 8010b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010b26:	2300      	movs	r3, #0
 8010b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b34:	f107 0308 	add.w	r3, r7, #8
 8010b38:	4619      	mov	r1, r3
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f7ff fe86 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f92d 	bl	8010da0 <SDMMC_GetCmdError>
 8010b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b48:	69fb      	ldr	r3, [r7, #28]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3720      	adds	r7, #32
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b088      	sub	sp, #32
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010b5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010b5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010b60:	2308      	movs	r3, #8
 8010b62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b64:	2340      	movs	r3, #64	; 0x40
 8010b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b72:	f107 0308 	add.w	r3, r7, #8
 8010b76:	4619      	mov	r1, r3
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff fe67 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fb16 	bl	80111b0 <SDMMC_GetCmdResp7>
 8010b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b86:	69fb      	ldr	r3, [r7, #28]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3720      	adds	r7, #32
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b088      	sub	sp, #32
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010b9e:	2337      	movs	r3, #55	; 0x37
 8010ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ba2:	2340      	movs	r3, #64	; 0x40
 8010ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bb0:	f107 0308 	add.w	r3, r7, #8
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7ff fe48 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bc0:	2137      	movs	r1, #55	; 0x37
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f914 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bca:	69fb      	ldr	r3, [r7, #28]
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3720      	adds	r7, #32
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b088      	sub	sp, #32
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010bea:	2329      	movs	r3, #41	; 0x29
 8010bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bee:	2340      	movs	r3, #64	; 0x40
 8010bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bfc:	f107 0308 	add.w	r3, r7, #8
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7ff fe22 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 fa23 	bl	8011054 <SDMMC_GetCmdResp3>
 8010c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c10:	69fb      	ldr	r3, [r7, #28]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3720      	adds	r7, #32
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b088      	sub	sp, #32
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010c28:	2306      	movs	r3, #6
 8010c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c30:	2300      	movs	r3, #0
 8010c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c3a:	f107 0308 	add.w	r3, r7, #8
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff fe03 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c4a:	2106      	movs	r1, #6
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f8cf 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010c52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c54:	69fb      	ldr	r3, [r7, #28]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3720      	adds	r7, #32
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b088      	sub	sp, #32
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c66:	2300      	movs	r3, #0
 8010c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010c6a:	2333      	movs	r3, #51	; 0x33
 8010c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c6e:	2340      	movs	r3, #64	; 0x40
 8010c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c72:	2300      	movs	r3, #0
 8010c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c7c:	f107 0308 	add.w	r3, r7, #8
 8010c80:	4619      	mov	r1, r3
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff fde2 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c8c:	2133      	movs	r1, #51	; 0x33
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f8ae 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c96:	69fb      	ldr	r3, [r7, #28]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010cac:	2302      	movs	r3, #2
 8010cae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010cb0:	23c0      	movs	r3, #192	; 0xc0
 8010cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cbe:	f107 0308 	add.w	r3, r7, #8
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7ff fdc1 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 f97c 	bl	8010fc8 <SDMMC_GetCmdResp2>
 8010cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cd2:	69fb      	ldr	r3, [r7, #28]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3720      	adds	r7, #32
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010cea:	2309      	movs	r3, #9
 8010cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010cee:	23c0      	movs	r3, #192	; 0xc0
 8010cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cfc:	f107 0308 	add.w	r3, r7, #8
 8010d00:	4619      	mov	r1, r3
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7ff fda2 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f95d 	bl	8010fc8 <SDMMC_GetCmdResp2>
 8010d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d10:	69fb      	ldr	r3, [r7, #28]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3720      	adds	r7, #32
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b088      	sub	sp, #32
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
 8010d22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d24:	2300      	movs	r3, #0
 8010d26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d2c:	2340      	movs	r3, #64	; 0x40
 8010d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d30:	2300      	movs	r3, #0
 8010d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	4619      	mov	r1, r3
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff fd83 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	2103      	movs	r1, #3
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f9bc 	bl	80110c8 <SDMMC_GetCmdResp6>
 8010d50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d52:	69fb      	ldr	r3, [r7, #28]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3720      	adds	r7, #32
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b088      	sub	sp, #32
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010d6a:	230d      	movs	r3, #13
 8010d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d6e:	2340      	movs	r3, #64	; 0x40
 8010d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d72:	2300      	movs	r3, #0
 8010d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d7c:	f107 0308 	add.w	r3, r7, #8
 8010d80:	4619      	mov	r1, r3
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7ff fd62 	bl	801084c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d8c:	210d      	movs	r1, #13
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f82e 	bl	8010df0 <SDMMC_GetCmdResp1>
 8010d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d96:	69fb      	ldr	r3, [r7, #28]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3720      	adds	r7, #32
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010da0:	b490      	push	{r4, r7}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010da8:	4b0f      	ldr	r3, [pc, #60]	; (8010de8 <SDMMC_GetCmdError+0x48>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4a0f      	ldr	r2, [pc, #60]	; (8010dec <SDMMC_GetCmdError+0x4c>)
 8010dae:	fba2 2303 	umull	r2, r3, r2, r3
 8010db2:	0a5b      	lsrs	r3, r3, #9
 8010db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010db8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010dbc:	4623      	mov	r3, r4
 8010dbe:	1e5c      	subs	r4, r3, #1
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d102      	bne.n	8010dca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010dc8:	e009      	b.n	8010dde <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d0f2      	beq.n	8010dbc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	22c5      	movs	r2, #197	; 0xc5
 8010dda:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bc90      	pop	{r4, r7}
 8010de6:	4770      	bx	lr
 8010de8:	20000000 	.word	0x20000000
 8010dec:	10624dd3 	.word	0x10624dd3

08010df0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010df0:	b590      	push	{r4, r7, lr}
 8010df2:	b087      	sub	sp, #28
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010dfe:	4b6f      	ldr	r3, [pc, #444]	; (8010fbc <SDMMC_GetCmdResp1+0x1cc>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4a6f      	ldr	r2, [pc, #444]	; (8010fc0 <SDMMC_GetCmdResp1+0x1d0>)
 8010e04:	fba2 2303 	umull	r2, r3, r2, r3
 8010e08:	0a5b      	lsrs	r3, r3, #9
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e10:	4623      	mov	r3, r4
 8010e12:	1e5c      	subs	r4, r3, #1
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d102      	bne.n	8010e1e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e1c:	e0c9      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e22:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d0f0      	beq.n	8010e10 <SDMMC_GetCmdResp1+0x20>
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d1eb      	bne.n	8010e10 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d004      	beq.n	8010e4e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2204      	movs	r2, #4
 8010e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e4a:	2304      	movs	r3, #4
 8010e4c:	e0b1      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e52:	f003 0301 	and.w	r3, r3, #1
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d004      	beq.n	8010e64 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e60:	2301      	movs	r3, #1
 8010e62:	e0a6      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	22c5      	movs	r2, #197	; 0xc5
 8010e68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ff fd18 	bl	80108a0 <SDIO_GetCommandResponse>
 8010e70:	4603      	mov	r3, r0
 8010e72:	461a      	mov	r2, r3
 8010e74:	7afb      	ldrb	r3, [r7, #11]
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d001      	beq.n	8010e7e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e099      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010e7e:	2100      	movs	r1, #0
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f7ff fd1a 	bl	80108ba <SDIO_GetResponse>
 8010e86:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010e88:	693a      	ldr	r2, [r7, #16]
 8010e8a:	4b4e      	ldr	r3, [pc, #312]	; (8010fc4 <SDMMC_GetCmdResp1+0x1d4>)
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d101      	bne.n	8010e96 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010e92:	2300      	movs	r3, #0
 8010e94:	e08d      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	da02      	bge.n	8010ea2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010ea0:	e087      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d001      	beq.n	8010eb0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010eac:	2340      	movs	r3, #64	; 0x40
 8010eae:	e080      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d001      	beq.n	8010ebe <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010eba:	2380      	movs	r3, #128	; 0x80
 8010ebc:	e079      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ecc:	e071      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010edc:	e069      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d002      	beq.n	8010eee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eec:	e061      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d002      	beq.n	8010efe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010efc:	e059      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f0c:	e051      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d002      	beq.n	8010f1e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f1c:	e049      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d002      	beq.n	8010f2e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f2c:	e041      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d002      	beq.n	8010f3e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f3c:	e039      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d002      	beq.n	8010f4e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010f4c:	e031      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d002      	beq.n	8010f5e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010f58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010f5c:	e029      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d002      	beq.n	8010f6e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010f68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010f6c:	e021      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010f78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010f7c:	e019      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010f88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010f8c:	e011      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010f9c:	e009      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	f003 0308 	and.w	r3, r3, #8
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010fa8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010fac:	e001      	b.n	8010fb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	371c      	adds	r7, #28
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd90      	pop	{r4, r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	20000000 	.word	0x20000000
 8010fc0:	10624dd3 	.word	0x10624dd3
 8010fc4:	fdffe008 	.word	0xfdffe008

08010fc8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010fc8:	b490      	push	{r4, r7}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fd0:	4b1e      	ldr	r3, [pc, #120]	; (801104c <SDMMC_GetCmdResp2+0x84>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4a1e      	ldr	r2, [pc, #120]	; (8011050 <SDMMC_GetCmdResp2+0x88>)
 8010fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8010fda:	0a5b      	lsrs	r3, r3, #9
 8010fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fe0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010fe4:	4623      	mov	r3, r4
 8010fe6:	1e5c      	subs	r4, r3, #1
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d102      	bne.n	8010ff2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ff0:	e026      	b.n	8011040 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d0f0      	beq.n	8010fe4 <SDMMC_GetCmdResp2+0x1c>
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1eb      	bne.n	8010fe4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011010:	f003 0304 	and.w	r3, r3, #4
 8011014:	2b00      	cmp	r3, #0
 8011016:	d004      	beq.n	8011022 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2204      	movs	r2, #4
 801101c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801101e:	2304      	movs	r3, #4
 8011020:	e00e      	b.n	8011040 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011026:	f003 0301 	and.w	r3, r3, #1
 801102a:	2b00      	cmp	r3, #0
 801102c:	d004      	beq.n	8011038 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2201      	movs	r2, #1
 8011032:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011034:	2301      	movs	r3, #1
 8011036:	e003      	b.n	8011040 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	22c5      	movs	r2, #197	; 0xc5
 801103c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3710      	adds	r7, #16
 8011044:	46bd      	mov	sp, r7
 8011046:	bc90      	pop	{r4, r7}
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop
 801104c:	20000000 	.word	0x20000000
 8011050:	10624dd3 	.word	0x10624dd3

08011054 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8011054:	b490      	push	{r4, r7}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801105c:	4b18      	ldr	r3, [pc, #96]	; (80110c0 <SDMMC_GetCmdResp3+0x6c>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4a18      	ldr	r2, [pc, #96]	; (80110c4 <SDMMC_GetCmdResp3+0x70>)
 8011062:	fba2 2303 	umull	r2, r3, r2, r3
 8011066:	0a5b      	lsrs	r3, r3, #9
 8011068:	f241 3288 	movw	r2, #5000	; 0x1388
 801106c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011070:	4623      	mov	r3, r4
 8011072:	1e5c      	subs	r4, r3, #1
 8011074:	2b00      	cmp	r3, #0
 8011076:	d102      	bne.n	801107e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801107c:	e01b      	b.n	80110b6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011082:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801108a:	2b00      	cmp	r3, #0
 801108c:	d0f0      	beq.n	8011070 <SDMMC_GetCmdResp3+0x1c>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011094:	2b00      	cmp	r3, #0
 8011096:	d1eb      	bne.n	8011070 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801109c:	f003 0304 	and.w	r3, r3, #4
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d004      	beq.n	80110ae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2204      	movs	r2, #4
 80110a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110aa:	2304      	movs	r3, #4
 80110ac:	e003      	b.n	80110b6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	22c5      	movs	r2, #197	; 0xc5
 80110b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80110b4:	2300      	movs	r3, #0
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bc90      	pop	{r4, r7}
 80110be:	4770      	bx	lr
 80110c0:	20000000 	.word	0x20000000
 80110c4:	10624dd3 	.word	0x10624dd3

080110c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80110c8:	b590      	push	{r4, r7, lr}
 80110ca:	b087      	sub	sp, #28
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	460b      	mov	r3, r1
 80110d2:	607a      	str	r2, [r7, #4]
 80110d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110d6:	4b34      	ldr	r3, [pc, #208]	; (80111a8 <SDMMC_GetCmdResp6+0xe0>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a34      	ldr	r2, [pc, #208]	; (80111ac <SDMMC_GetCmdResp6+0xe4>)
 80110dc:	fba2 2303 	umull	r2, r3, r2, r3
 80110e0:	0a5b      	lsrs	r3, r3, #9
 80110e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80110e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110ea:	4623      	mov	r3, r4
 80110ec:	1e5c      	subs	r4, r3, #1
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d102      	bne.n	80110f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110f6:	e052      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0f0      	beq.n	80110ea <SDMMC_GetCmdResp6+0x22>
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801110e:	2b00      	cmp	r3, #0
 8011110:	d1eb      	bne.n	80110ea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011116:	f003 0304 	and.w	r3, r3, #4
 801111a:	2b00      	cmp	r3, #0
 801111c:	d004      	beq.n	8011128 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2204      	movs	r2, #4
 8011122:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011124:	2304      	movs	r3, #4
 8011126:	e03a      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801112c:	f003 0301 	and.w	r3, r3, #1
 8011130:	2b00      	cmp	r3, #0
 8011132:	d004      	beq.n	801113e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2201      	movs	r2, #1
 8011138:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801113a:	2301      	movs	r3, #1
 801113c:	e02f      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801113e:	68f8      	ldr	r0, [r7, #12]
 8011140:	f7ff fbae 	bl	80108a0 <SDIO_GetCommandResponse>
 8011144:	4603      	mov	r3, r0
 8011146:	461a      	mov	r2, r3
 8011148:	7afb      	ldrb	r3, [r7, #11]
 801114a:	4293      	cmp	r3, r2
 801114c:	d001      	beq.n	8011152 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801114e:	2301      	movs	r3, #1
 8011150:	e025      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	22c5      	movs	r2, #197	; 0xc5
 8011156:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011158:	2100      	movs	r1, #0
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f7ff fbad 	bl	80108ba <SDIO_GetResponse>
 8011160:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011168:	2b00      	cmp	r3, #0
 801116a:	d106      	bne.n	801117a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	0c1b      	lsrs	r3, r3, #16
 8011170:	b29a      	uxth	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011176:	2300      	movs	r3, #0
 8011178:	e011      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011188:	e009      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011198:	e001      	b.n	801119e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801119a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801119e:	4618      	mov	r0, r3
 80111a0:	371c      	adds	r7, #28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd90      	pop	{r4, r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20000000 	.word	0x20000000
 80111ac:	10624dd3 	.word	0x10624dd3

080111b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80111b0:	b490      	push	{r4, r7}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111b8:	4b21      	ldr	r3, [pc, #132]	; (8011240 <SDMMC_GetCmdResp7+0x90>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4a21      	ldr	r2, [pc, #132]	; (8011244 <SDMMC_GetCmdResp7+0x94>)
 80111be:	fba2 2303 	umull	r2, r3, r2, r3
 80111c2:	0a5b      	lsrs	r3, r3, #9
 80111c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80111c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80111cc:	4623      	mov	r3, r4
 80111ce:	1e5c      	subs	r4, r3, #1
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d102      	bne.n	80111da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111d8:	e02c      	b.n	8011234 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0f0      	beq.n	80111cc <SDMMC_GetCmdResp7+0x1c>
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d1eb      	bne.n	80111cc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111f8:	f003 0304 	and.w	r3, r3, #4
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d004      	beq.n	801120a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2204      	movs	r2, #4
 8011204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011206:	2304      	movs	r3, #4
 8011208:	e014      	b.n	8011234 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120e:	f003 0301 	and.w	r3, r3, #1
 8011212:	2b00      	cmp	r3, #0
 8011214:	d004      	beq.n	8011220 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2201      	movs	r2, #1
 801121a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801121c:	2301      	movs	r3, #1
 801121e:	e009      	b.n	8011234 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011228:	2b00      	cmp	r3, #0
 801122a:	d002      	beq.n	8011232 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2240      	movs	r2, #64	; 0x40
 8011230:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011232:	2300      	movs	r3, #0
  
}
 8011234:	4618      	mov	r0, r3
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bc90      	pop	{r4, r7}
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop
 8011240:	20000000 	.word	0x20000000
 8011244:	10624dd3 	.word	0x10624dd3

08011248 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801124c:	4904      	ldr	r1, [pc, #16]	; (8011260 <MX_FATFS_Init+0x18>)
 801124e:	4805      	ldr	r0, [pc, #20]	; (8011264 <MX_FATFS_Init+0x1c>)
 8011250:	f003 fb9c 	bl	801498c <FATFS_LinkDriver>
 8011254:	4603      	mov	r3, r0
 8011256:	461a      	mov	r2, r3
 8011258:	4b03      	ldr	r3, [pc, #12]	; (8011268 <MX_FATFS_Init+0x20>)
 801125a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801125c:	bf00      	nop
 801125e:	bd80      	pop	{r7, pc}
 8011260:	20047c38 	.word	0x20047c38
 8011264:	08019248 	.word	0x08019248
 8011268:	20047c34 	.word	0x20047c34

0801126c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011276:	f000 f896 	bl	80113a6 <BSP_SD_IsDetected>
 801127a:	4603      	mov	r3, r0
 801127c:	2b01      	cmp	r3, #1
 801127e:	d001      	beq.n	8011284 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	e012      	b.n	80112aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011284:	480b      	ldr	r0, [pc, #44]	; (80112b4 <BSP_SD_Init+0x48>)
 8011286:	f7fb ffa5 	bl	800d1d4 <HAL_SD_Init>
 801128a:	4603      	mov	r3, r0
 801128c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d109      	bne.n	80112a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011298:	4806      	ldr	r0, [pc, #24]	; (80112b4 <BSP_SD_Init+0x48>)
 801129a:	f7fc fd4f 	bl	800dd3c <HAL_SD_ConfigWideBusOperation>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d001      	beq.n	80112a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80112a4:	2301      	movs	r3, #1
 80112a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80112a8:	79fb      	ldrb	r3, [r7, #7]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	20047a34 	.word	0x20047a34

080112b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68ba      	ldr	r2, [r7, #8]
 80112cc:	68f9      	ldr	r1, [r7, #12]
 80112ce:	4806      	ldr	r0, [pc, #24]	; (80112e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80112d0:	f7fc f810 	bl	800d2f4 <HAL_SD_ReadBlocks_DMA>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112da:	2301      	movs	r3, #1
 80112dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3718      	adds	r7, #24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	20047a34 	.word	0x20047a34

080112ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b086      	sub	sp, #24
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	68f9      	ldr	r1, [r7, #12]
 8011302:	4806      	ldr	r0, [pc, #24]	; (801131c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011304:	f7fc f8de 	bl	800d4c4 <HAL_SD_WriteBlocks_DMA>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801130e:	2301      	movs	r3, #1
 8011310:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011312:	7dfb      	ldrb	r3, [r7, #23]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3718      	adds	r7, #24
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20047a34 	.word	0x20047a34

08011320 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011324:	4805      	ldr	r0, [pc, #20]	; (801133c <BSP_SD_GetCardState+0x1c>)
 8011326:	f7fc fd85 	bl	800de34 <HAL_SD_GetCardState>
 801132a:	4603      	mov	r3, r0
 801132c:	2b04      	cmp	r3, #4
 801132e:	bf14      	ite	ne
 8011330:	2301      	movne	r3, #1
 8011332:	2300      	moveq	r3, #0
 8011334:	b2db      	uxtb	r3, r3
}
 8011336:	4618      	mov	r0, r3
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	20047a34 	.word	0x20047a34

08011340 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011348:	6879      	ldr	r1, [r7, #4]
 801134a:	4803      	ldr	r0, [pc, #12]	; (8011358 <BSP_SD_GetCardInfo+0x18>)
 801134c:	f7fc fcca 	bl	800dce4 <HAL_SD_GetCardInfo>
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	20047a34 	.word	0x20047a34

0801135c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011364:	f000 f818 	bl	8011398 <BSP_SD_AbortCallback>
}
 8011368:	bf00      	nop
 801136a:	3708      	adds	r7, #8
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011378:	f000 f9a8 	bl	80116cc <BSP_SD_WriteCpltCallback>
}
 801137c:	bf00      	nop
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801138c:	f000 f9aa 	bl	80116e4 <BSP_SD_ReadCpltCallback>
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011398:	b480      	push	{r7}
 801139a:	af00      	add	r7, sp, #0

}
 801139c:	bf00      	nop
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80113a6:	b580      	push	{r7, lr}
 80113a8:	b082      	sub	sp, #8
 80113aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80113ac:	2301      	movs	r3, #1
 80113ae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80113b0:	f000 f80c 	bl	80113cc <BSP_PlatformIsDetected>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d101      	bne.n	80113be <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80113ba:	2300      	movs	r3, #0
 80113bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	b2db      	uxtb	r3, r3
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
	...

080113cc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80113d2:	2301      	movs	r3, #1
 80113d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80113d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80113da:	4806      	ldr	r0, [pc, #24]	; (80113f4 <BSP_PlatformIsDetected+0x28>)
 80113dc:	f7fa f866 	bl	800b4ac <HAL_GPIO_ReadPin>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d001      	beq.n	80113ea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80113e6:	2300      	movs	r3, #0
 80113e8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80113ea:	79fb      	ldrb	r3, [r7, #7]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	40020000 	.word	0x40020000

080113f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011400:	f7f8 fdca 	bl	8009f98 <HAL_GetTick>
 8011404:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011406:	e006      	b.n	8011416 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011408:	f7ff ff8a 	bl	8011320 <BSP_SD_GetCardState>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d101      	bne.n	8011416 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011412:	2300      	movs	r3, #0
 8011414:	e009      	b.n	801142a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011416:	f7f8 fdbf 	bl	8009f98 <HAL_GetTick>
 801141a:	4602      	mov	r2, r0
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	429a      	cmp	r2, r3
 8011424:	d8f0      	bhi.n	8011408 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011426:	f04f 33ff 	mov.w	r3, #4294967295
}
 801142a:	4618      	mov	r0, r3
 801142c:	3710      	adds	r7, #16
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
	...

08011434 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	4603      	mov	r3, r0
 801143c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801143e:	4b0b      	ldr	r3, [pc, #44]	; (801146c <SD_CheckStatus+0x38>)
 8011440:	2201      	movs	r2, #1
 8011442:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011444:	f7ff ff6c 	bl	8011320 <BSP_SD_GetCardState>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d107      	bne.n	801145e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801144e:	4b07      	ldr	r3, [pc, #28]	; (801146c <SD_CheckStatus+0x38>)
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	b2db      	uxtb	r3, r3
 8011454:	f023 0301 	bic.w	r3, r3, #1
 8011458:	b2da      	uxtb	r2, r3
 801145a:	4b04      	ldr	r3, [pc, #16]	; (801146c <SD_CheckStatus+0x38>)
 801145c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801145e:	4b03      	ldr	r3, [pc, #12]	; (801146c <SD_CheckStatus+0x38>)
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	b2db      	uxtb	r3, r3
}
 8011464:	4618      	mov	r0, r3
 8011466:	3708      	adds	r7, #8
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	20000009 	.word	0x20000009

08011470 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	4603      	mov	r3, r0
 8011478:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801147a:	f7ff fef7 	bl	801126c <BSP_SD_Init>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d107      	bne.n	8011494 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff ffd4 	bl	8011434 <SD_CheckStatus>
 801148c:	4603      	mov	r3, r0
 801148e:	461a      	mov	r2, r3
 8011490:	4b04      	ldr	r3, [pc, #16]	; (80114a4 <SD_initialize+0x34>)
 8011492:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011494:	4b03      	ldr	r3, [pc, #12]	; (80114a4 <SD_initialize+0x34>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	b2db      	uxtb	r3, r3
}
 801149a:	4618      	mov	r0, r3
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	20000009 	.word	0x20000009

080114a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	4603      	mov	r3, r0
 80114b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80114b2:	79fb      	ldrb	r3, [r7, #7]
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff ffbd 	bl	8011434 <SD_CheckStatus>
 80114ba:	4603      	mov	r3, r0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b086      	sub	sp, #24
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60b9      	str	r1, [r7, #8]
 80114cc:	607a      	str	r2, [r7, #4]
 80114ce:	603b      	str	r3, [r7, #0]
 80114d0:	4603      	mov	r3, r0
 80114d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114d4:	2301      	movs	r3, #1
 80114d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80114dc:	f7ff ff8c 	bl	80113f8 <SD_CheckStatusWithTimeout>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	da01      	bge.n	80114ea <SD_read+0x26>
  {
    return res;
 80114e6:	7dfb      	ldrb	r3, [r7, #23]
 80114e8:	e03b      	b.n	8011562 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80114ea:	683a      	ldr	r2, [r7, #0]
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	68b8      	ldr	r0, [r7, #8]
 80114f0:	f7ff fee2 	bl	80112b8 <BSP_SD_ReadBlocks_DMA>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d132      	bne.n	8011560 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80114fa:	4b1c      	ldr	r3, [pc, #112]	; (801156c <SD_read+0xa8>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011500:	f7f8 fd4a 	bl	8009f98 <HAL_GetTick>
 8011504:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011506:	bf00      	nop
 8011508:	4b18      	ldr	r3, [pc, #96]	; (801156c <SD_read+0xa8>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d108      	bne.n	8011522 <SD_read+0x5e>
 8011510:	f7f8 fd42 	bl	8009f98 <HAL_GetTick>
 8011514:	4602      	mov	r2, r0
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	f247 522f 	movw	r2, #29999	; 0x752f
 801151e:	4293      	cmp	r3, r2
 8011520:	d9f2      	bls.n	8011508 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011522:	4b12      	ldr	r3, [pc, #72]	; (801156c <SD_read+0xa8>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d102      	bne.n	8011530 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801152a:	2301      	movs	r3, #1
 801152c:	75fb      	strb	r3, [r7, #23]
 801152e:	e017      	b.n	8011560 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011530:	4b0e      	ldr	r3, [pc, #56]	; (801156c <SD_read+0xa8>)
 8011532:	2200      	movs	r2, #0
 8011534:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011536:	f7f8 fd2f 	bl	8009f98 <HAL_GetTick>
 801153a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801153c:	e007      	b.n	801154e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801153e:	f7ff feef 	bl	8011320 <BSP_SD_GetCardState>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d102      	bne.n	801154e <SD_read+0x8a>
          {
            res = RES_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801154c:	e008      	b.n	8011560 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801154e:	f7f8 fd23 	bl	8009f98 <HAL_GetTick>
 8011552:	4602      	mov	r2, r0
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	f247 522f 	movw	r2, #29999	; 0x752f
 801155c:	4293      	cmp	r3, r2
 801155e:	d9ee      	bls.n	801153e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011560:	7dfb      	ldrb	r3, [r7, #23]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	200452d0 	.word	0x200452d0

08011570 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	60b9      	str	r1, [r7, #8]
 8011578:	607a      	str	r2, [r7, #4]
 801157a:	603b      	str	r3, [r7, #0]
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011584:	4b24      	ldr	r3, [pc, #144]	; (8011618 <SD_write+0xa8>)
 8011586:	2200      	movs	r2, #0
 8011588:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801158a:	f247 5030 	movw	r0, #30000	; 0x7530
 801158e:	f7ff ff33 	bl	80113f8 <SD_CheckStatusWithTimeout>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	da01      	bge.n	801159c <SD_write+0x2c>
  {
    return res;
 8011598:	7dfb      	ldrb	r3, [r7, #23]
 801159a:	e038      	b.n	801160e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	6879      	ldr	r1, [r7, #4]
 80115a0:	68b8      	ldr	r0, [r7, #8]
 80115a2:	f7ff fea3 	bl	80112ec <BSP_SD_WriteBlocks_DMA>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d12f      	bne.n	801160c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80115ac:	f7f8 fcf4 	bl	8009f98 <HAL_GetTick>
 80115b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80115b2:	bf00      	nop
 80115b4:	4b18      	ldr	r3, [pc, #96]	; (8011618 <SD_write+0xa8>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d108      	bne.n	80115ce <SD_write+0x5e>
 80115bc:	f7f8 fcec 	bl	8009f98 <HAL_GetTick>
 80115c0:	4602      	mov	r2, r0
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d9f2      	bls.n	80115b4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80115ce:	4b12      	ldr	r3, [pc, #72]	; (8011618 <SD_write+0xa8>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d102      	bne.n	80115dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80115d6:	2301      	movs	r3, #1
 80115d8:	75fb      	strb	r3, [r7, #23]
 80115da:	e017      	b.n	801160c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80115dc:	4b0e      	ldr	r3, [pc, #56]	; (8011618 <SD_write+0xa8>)
 80115de:	2200      	movs	r2, #0
 80115e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80115e2:	f7f8 fcd9 	bl	8009f98 <HAL_GetTick>
 80115e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115e8:	e007      	b.n	80115fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115ea:	f7ff fe99 	bl	8011320 <BSP_SD_GetCardState>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d102      	bne.n	80115fa <SD_write+0x8a>
          {
            res = RES_OK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	75fb      	strb	r3, [r7, #23]
            break;
 80115f8:	e008      	b.n	801160c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115fa:	f7f8 fccd 	bl	8009f98 <HAL_GetTick>
 80115fe:	4602      	mov	r2, r0
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	f247 522f 	movw	r2, #29999	; 0x752f
 8011608:	4293      	cmp	r3, r2
 801160a:	d9ee      	bls.n	80115ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801160c:	7dfb      	ldrb	r3, [r7, #23]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3718      	adds	r7, #24
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	200452cc 	.word	0x200452cc

0801161c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b08c      	sub	sp, #48	; 0x30
 8011620:	af00      	add	r7, sp, #0
 8011622:	4603      	mov	r3, r0
 8011624:	603a      	str	r2, [r7, #0]
 8011626:	71fb      	strb	r3, [r7, #7]
 8011628:	460b      	mov	r3, r1
 801162a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801162c:	2301      	movs	r3, #1
 801162e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011632:	4b25      	ldr	r3, [pc, #148]	; (80116c8 <SD_ioctl+0xac>)
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	b2db      	uxtb	r3, r3
 8011638:	f003 0301 	and.w	r3, r3, #1
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <SD_ioctl+0x28>
 8011640:	2303      	movs	r3, #3
 8011642:	e03c      	b.n	80116be <SD_ioctl+0xa2>

  switch (cmd)
 8011644:	79bb      	ldrb	r3, [r7, #6]
 8011646:	2b03      	cmp	r3, #3
 8011648:	d834      	bhi.n	80116b4 <SD_ioctl+0x98>
 801164a:	a201      	add	r2, pc, #4	; (adr r2, 8011650 <SD_ioctl+0x34>)
 801164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011650:	08011661 	.word	0x08011661
 8011654:	08011669 	.word	0x08011669
 8011658:	08011681 	.word	0x08011681
 801165c:	0801169b 	.word	0x0801169b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011666:	e028      	b.n	80116ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011668:	f107 030c 	add.w	r3, r7, #12
 801166c:	4618      	mov	r0, r3
 801166e:	f7ff fe67 	bl	8011340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011678:	2300      	movs	r3, #0
 801167a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801167e:	e01c      	b.n	80116ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011680:	f107 030c 	add.w	r3, r7, #12
 8011684:	4618      	mov	r0, r3
 8011686:	f7ff fe5b 	bl	8011340 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168c:	b29a      	uxth	r2, r3
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011692:	2300      	movs	r3, #0
 8011694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011698:	e00f      	b.n	80116ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801169a:	f107 030c 	add.w	r3, r7, #12
 801169e:	4618      	mov	r0, r3
 80116a0:	f7ff fe4e 	bl	8011340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	0a5a      	lsrs	r2, r3, #9
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80116ac:	2300      	movs	r3, #0
 80116ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80116b2:	e002      	b.n	80116ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80116b4:	2304      	movs	r3, #4
 80116b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80116ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3730      	adds	r7, #48	; 0x30
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	20000009 	.word	0x20000009

080116cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80116cc:	b480      	push	{r7}
 80116ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80116d0:	4b03      	ldr	r3, [pc, #12]	; (80116e0 <BSP_SD_WriteCpltCallback+0x14>)
 80116d2:	2201      	movs	r2, #1
 80116d4:	601a      	str	r2, [r3, #0]
}
 80116d6:	bf00      	nop
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr
 80116e0:	200452cc 	.word	0x200452cc

080116e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80116e4:	b480      	push	{r7}
 80116e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80116e8:	4b03      	ldr	r3, [pc, #12]	; (80116f8 <BSP_SD_ReadCpltCallback+0x14>)
 80116ea:	2201      	movs	r2, #1
 80116ec:	601a      	str	r2, [r3, #0]
}
 80116ee:	bf00      	nop
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr
 80116f8:	200452d0 	.word	0x200452d0

080116fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	4603      	mov	r3, r0
 8011704:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	4a08      	ldr	r2, [pc, #32]	; (801172c <disk_status+0x30>)
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	4413      	add	r3, r2
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	79fa      	ldrb	r2, [r7, #7]
 8011714:	4905      	ldr	r1, [pc, #20]	; (801172c <disk_status+0x30>)
 8011716:	440a      	add	r2, r1
 8011718:	7a12      	ldrb	r2, [r2, #8]
 801171a:	4610      	mov	r0, r2
 801171c:	4798      	blx	r3
 801171e:	4603      	mov	r3, r0
 8011720:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011722:	7bfb      	ldrb	r3, [r7, #15]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	200452fc 	.word	0x200452fc

08011730 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	4603      	mov	r3, r0
 8011738:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801173a:	2300      	movs	r3, #0
 801173c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801173e:	79fb      	ldrb	r3, [r7, #7]
 8011740:	4a0d      	ldr	r2, [pc, #52]	; (8011778 <disk_initialize+0x48>)
 8011742:	5cd3      	ldrb	r3, [r2, r3]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d111      	bne.n	801176c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011748:	79fb      	ldrb	r3, [r7, #7]
 801174a:	4a0b      	ldr	r2, [pc, #44]	; (8011778 <disk_initialize+0x48>)
 801174c:	2101      	movs	r1, #1
 801174e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011750:	79fb      	ldrb	r3, [r7, #7]
 8011752:	4a09      	ldr	r2, [pc, #36]	; (8011778 <disk_initialize+0x48>)
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	4413      	add	r3, r2
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	79fa      	ldrb	r2, [r7, #7]
 801175e:	4906      	ldr	r1, [pc, #24]	; (8011778 <disk_initialize+0x48>)
 8011760:	440a      	add	r2, r1
 8011762:	7a12      	ldrb	r2, [r2, #8]
 8011764:	4610      	mov	r0, r2
 8011766:	4798      	blx	r3
 8011768:	4603      	mov	r3, r0
 801176a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801176c:	7bfb      	ldrb	r3, [r7, #15]
}
 801176e:	4618      	mov	r0, r3
 8011770:	3710      	adds	r7, #16
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	200452fc 	.word	0x200452fc

0801177c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801177c:	b590      	push	{r4, r7, lr}
 801177e:	b087      	sub	sp, #28
 8011780:	af00      	add	r7, sp, #0
 8011782:	60b9      	str	r1, [r7, #8]
 8011784:	607a      	str	r2, [r7, #4]
 8011786:	603b      	str	r3, [r7, #0]
 8011788:	4603      	mov	r3, r0
 801178a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801178c:	7bfb      	ldrb	r3, [r7, #15]
 801178e:	4a0a      	ldr	r2, [pc, #40]	; (80117b8 <disk_read+0x3c>)
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	4413      	add	r3, r2
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	689c      	ldr	r4, [r3, #8]
 8011798:	7bfb      	ldrb	r3, [r7, #15]
 801179a:	4a07      	ldr	r2, [pc, #28]	; (80117b8 <disk_read+0x3c>)
 801179c:	4413      	add	r3, r2
 801179e:	7a18      	ldrb	r0, [r3, #8]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	68b9      	ldr	r1, [r7, #8]
 80117a6:	47a0      	blx	r4
 80117a8:	4603      	mov	r3, r0
 80117aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	371c      	adds	r7, #28
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd90      	pop	{r4, r7, pc}
 80117b6:	bf00      	nop
 80117b8:	200452fc 	.word	0x200452fc

080117bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80117bc:	b590      	push	{r4, r7, lr}
 80117be:	b087      	sub	sp, #28
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60b9      	str	r1, [r7, #8]
 80117c4:	607a      	str	r2, [r7, #4]
 80117c6:	603b      	str	r3, [r7, #0]
 80117c8:	4603      	mov	r3, r0
 80117ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80117cc:	7bfb      	ldrb	r3, [r7, #15]
 80117ce:	4a0a      	ldr	r2, [pc, #40]	; (80117f8 <disk_write+0x3c>)
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	4413      	add	r3, r2
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	68dc      	ldr	r4, [r3, #12]
 80117d8:	7bfb      	ldrb	r3, [r7, #15]
 80117da:	4a07      	ldr	r2, [pc, #28]	; (80117f8 <disk_write+0x3c>)
 80117dc:	4413      	add	r3, r2
 80117de:	7a18      	ldrb	r0, [r3, #8]
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	68b9      	ldr	r1, [r7, #8]
 80117e6:	47a0      	blx	r4
 80117e8:	4603      	mov	r3, r0
 80117ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80117ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	371c      	adds	r7, #28
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd90      	pop	{r4, r7, pc}
 80117f6:	bf00      	nop
 80117f8:	200452fc 	.word	0x200452fc

080117fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	4603      	mov	r3, r0
 8011804:	603a      	str	r2, [r7, #0]
 8011806:	71fb      	strb	r3, [r7, #7]
 8011808:	460b      	mov	r3, r1
 801180a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801180c:	79fb      	ldrb	r3, [r7, #7]
 801180e:	4a09      	ldr	r2, [pc, #36]	; (8011834 <disk_ioctl+0x38>)
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	4413      	add	r3, r2
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	691b      	ldr	r3, [r3, #16]
 8011818:	79fa      	ldrb	r2, [r7, #7]
 801181a:	4906      	ldr	r1, [pc, #24]	; (8011834 <disk_ioctl+0x38>)
 801181c:	440a      	add	r2, r1
 801181e:	7a10      	ldrb	r0, [r2, #8]
 8011820:	79b9      	ldrb	r1, [r7, #6]
 8011822:	683a      	ldr	r2, [r7, #0]
 8011824:	4798      	blx	r3
 8011826:	4603      	mov	r3, r0
 8011828:	73fb      	strb	r3, [r7, #15]
  return res;
 801182a:	7bfb      	ldrb	r3, [r7, #15]
}
 801182c:	4618      	mov	r0, r3
 801182e:	3710      	adds	r7, #16
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	200452fc 	.word	0x200452fc

08011838 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	3301      	adds	r3, #1
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011848:	89fb      	ldrh	r3, [r7, #14]
 801184a:	021b      	lsls	r3, r3, #8
 801184c:	b21a      	sxth	r2, r3
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	b21b      	sxth	r3, r3
 8011854:	4313      	orrs	r3, r2
 8011856:	b21b      	sxth	r3, r3
 8011858:	81fb      	strh	r3, [r7, #14]
	return rv;
 801185a:	89fb      	ldrh	r3, [r7, #14]
}
 801185c:	4618      	mov	r0, r3
 801185e:	3714      	adds	r7, #20
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr

08011868 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	3303      	adds	r3, #3
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	021b      	lsls	r3, r3, #8
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	3202      	adds	r2, #2
 8011880:	7812      	ldrb	r2, [r2, #0]
 8011882:	4313      	orrs	r3, r2
 8011884:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	021b      	lsls	r3, r3, #8
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	3201      	adds	r2, #1
 801188e:	7812      	ldrb	r2, [r2, #0]
 8011890:	4313      	orrs	r3, r2
 8011892:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	021b      	lsls	r3, r3, #8
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	7812      	ldrb	r2, [r2, #0]
 801189c:	4313      	orrs	r3, r2
 801189e:	60fb      	str	r3, [r7, #12]
	return rv;
 80118a0:	68fb      	ldr	r3, [r7, #12]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80118ae:	b480      	push	{r7}
 80118b0:	b083      	sub	sp, #12
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
 80118b6:	460b      	mov	r3, r1
 80118b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	887a      	ldrh	r2, [r7, #2]
 80118c2:	b2d2      	uxtb	r2, r2
 80118c4:	701a      	strb	r2, [r3, #0]
 80118c6:	887b      	ldrh	r3, [r7, #2]
 80118c8:	0a1b      	lsrs	r3, r3, #8
 80118ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	607a      	str	r2, [r7, #4]
 80118d2:	887a      	ldrh	r2, [r7, #2]
 80118d4:	b2d2      	uxtb	r2, r2
 80118d6:	701a      	strb	r2, [r3, #0]
}
 80118d8:	bf00      	nop
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr

080118e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	1c5a      	adds	r2, r3, #1
 80118f2:	607a      	str	r2, [r7, #4]
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	b2d2      	uxtb	r2, r2
 80118f8:	701a      	strb	r2, [r3, #0]
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	0a1b      	lsrs	r3, r3, #8
 80118fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	1c5a      	adds	r2, r3, #1
 8011904:	607a      	str	r2, [r7, #4]
 8011906:	683a      	ldr	r2, [r7, #0]
 8011908:	b2d2      	uxtb	r2, r2
 801190a:	701a      	strb	r2, [r3, #0]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	0a1b      	lsrs	r3, r3, #8
 8011910:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	1c5a      	adds	r2, r3, #1
 8011916:	607a      	str	r2, [r7, #4]
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	b2d2      	uxtb	r2, r2
 801191c:	701a      	strb	r2, [r3, #0]
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	0a1b      	lsrs	r3, r3, #8
 8011922:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	1c5a      	adds	r2, r3, #1
 8011928:	607a      	str	r2, [r7, #4]
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	b2d2      	uxtb	r2, r2
 801192e:	701a      	strb	r2, [r3, #0]
}
 8011930:	bf00      	nop
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801193c:	b480      	push	{r7}
 801193e:	b087      	sub	sp, #28
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d00d      	beq.n	8011972 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011956:	693a      	ldr	r2, [r7, #16]
 8011958:	1c53      	adds	r3, r2, #1
 801195a:	613b      	str	r3, [r7, #16]
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	1c59      	adds	r1, r3, #1
 8011960:	6179      	str	r1, [r7, #20]
 8011962:	7812      	ldrb	r2, [r2, #0]
 8011964:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3b01      	subs	r3, #1
 801196a:	607b      	str	r3, [r7, #4]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1f1      	bne.n	8011956 <mem_cpy+0x1a>
	}
}
 8011972:	bf00      	nop
 8011974:	371c      	adds	r7, #28
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801197e:	b480      	push	{r7}
 8011980:	b087      	sub	sp, #28
 8011982:	af00      	add	r7, sp, #0
 8011984:	60f8      	str	r0, [r7, #12]
 8011986:	60b9      	str	r1, [r7, #8]
 8011988:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	1c5a      	adds	r2, r3, #1
 8011992:	617a      	str	r2, [r7, #20]
 8011994:	68ba      	ldr	r2, [r7, #8]
 8011996:	b2d2      	uxtb	r2, r2
 8011998:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3b01      	subs	r3, #1
 801199e:	607b      	str	r3, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1f3      	bne.n	801198e <mem_set+0x10>
}
 80119a6:	bf00      	nop
 80119a8:	371c      	adds	r7, #28
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr

080119b2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80119b2:	b480      	push	{r7}
 80119b4:	b089      	sub	sp, #36	; 0x24
 80119b6:	af00      	add	r7, sp, #0
 80119b8:	60f8      	str	r0, [r7, #12]
 80119ba:	60b9      	str	r1, [r7, #8]
 80119bc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	61fb      	str	r3, [r7, #28]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	61fa      	str	r2, [r7, #28]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	4619      	mov	r1, r3
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	1c5a      	adds	r2, r3, #1
 80119d8:	61ba      	str	r2, [r7, #24]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	1acb      	subs	r3, r1, r3
 80119de:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	3b01      	subs	r3, #1
 80119e4:	607b      	str	r3, [r7, #4]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d002      	beq.n	80119f2 <mem_cmp+0x40>
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d0eb      	beq.n	80119ca <mem_cmp+0x18>

	return r;
 80119f2:	697b      	ldr	r3, [r7, #20]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3724      	adds	r7, #36	; 0x24
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011a0a:	e002      	b.n	8011a12 <chk_chr+0x12>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	607b      	str	r3, [r7, #4]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d005      	beq.n	8011a26 <chk_chr+0x26>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d1f2      	bne.n	8011a0c <chk_chr+0xc>
	return *str;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	781b      	ldrb	r3, [r3, #0]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	370c      	adds	r7, #12
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr
	...

08011a38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b085      	sub	sp, #20
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a42:	2300      	movs	r3, #0
 8011a44:	60bb      	str	r3, [r7, #8]
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	60fb      	str	r3, [r7, #12]
 8011a4a:	e029      	b.n	8011aa0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011a4c:	4a27      	ldr	r2, [pc, #156]	; (8011aec <chk_lock+0xb4>)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	011b      	lsls	r3, r3, #4
 8011a52:	4413      	add	r3, r2
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d01d      	beq.n	8011a96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a5a:	4a24      	ldr	r2, [pc, #144]	; (8011aec <chk_lock+0xb4>)
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	011b      	lsls	r3, r3, #4
 8011a60:	4413      	add	r3, r2
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d116      	bne.n	8011a9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011a6c:	4a1f      	ldr	r2, [pc, #124]	; (8011aec <chk_lock+0xb4>)
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	011b      	lsls	r3, r3, #4
 8011a72:	4413      	add	r3, r2
 8011a74:	3304      	adds	r3, #4
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d10c      	bne.n	8011a9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a80:	4a1a      	ldr	r2, [pc, #104]	; (8011aec <chk_lock+0xb4>)
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	011b      	lsls	r3, r3, #4
 8011a86:	4413      	add	r3, r2
 8011a88:	3308      	adds	r3, #8
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d102      	bne.n	8011a9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a94:	e007      	b.n	8011aa6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011a96:	2301      	movs	r3, #1
 8011a98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d9d2      	bls.n	8011a4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2b02      	cmp	r3, #2
 8011aaa:	d109      	bne.n	8011ac0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d102      	bne.n	8011ab8 <chk_lock+0x80>
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	d101      	bne.n	8011abc <chk_lock+0x84>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	e010      	b.n	8011ade <chk_lock+0xa6>
 8011abc:	2312      	movs	r3, #18
 8011abe:	e00e      	b.n	8011ade <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d108      	bne.n	8011ad8 <chk_lock+0xa0>
 8011ac6:	4a09      	ldr	r2, [pc, #36]	; (8011aec <chk_lock+0xb4>)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	011b      	lsls	r3, r3, #4
 8011acc:	4413      	add	r3, r2
 8011ace:	330c      	adds	r3, #12
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ad6:	d101      	bne.n	8011adc <chk_lock+0xa4>
 8011ad8:	2310      	movs	r3, #16
 8011ada:	e000      	b.n	8011ade <chk_lock+0xa6>
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3714      	adds	r7, #20
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	200452dc 	.word	0x200452dc

08011af0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011af6:	2300      	movs	r3, #0
 8011af8:	607b      	str	r3, [r7, #4]
 8011afa:	e002      	b.n	8011b02 <enq_lock+0x12>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	3301      	adds	r3, #1
 8011b00:	607b      	str	r3, [r7, #4]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d806      	bhi.n	8011b16 <enq_lock+0x26>
 8011b08:	4a09      	ldr	r2, [pc, #36]	; (8011b30 <enq_lock+0x40>)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	011b      	lsls	r3, r3, #4
 8011b0e:	4413      	add	r3, r2
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1f2      	bne.n	8011afc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	bf14      	ite	ne
 8011b1c:	2301      	movne	r3, #1
 8011b1e:	2300      	moveq	r3, #0
 8011b20:	b2db      	uxtb	r3, r3
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	370c      	adds	r7, #12
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	200452dc 	.word	0x200452dc

08011b34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b085      	sub	sp, #20
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b3e:	2300      	movs	r3, #0
 8011b40:	60fb      	str	r3, [r7, #12]
 8011b42:	e01f      	b.n	8011b84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011b44:	4a41      	ldr	r2, [pc, #260]	; (8011c4c <inc_lock+0x118>)
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	011b      	lsls	r3, r3, #4
 8011b4a:	4413      	add	r3, r2
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d113      	bne.n	8011b7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011b56:	4a3d      	ldr	r2, [pc, #244]	; (8011c4c <inc_lock+0x118>)
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	011b      	lsls	r3, r3, #4
 8011b5c:	4413      	add	r3, r2
 8011b5e:	3304      	adds	r3, #4
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d109      	bne.n	8011b7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011b6a:	4a38      	ldr	r2, [pc, #224]	; (8011c4c <inc_lock+0x118>)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	011b      	lsls	r3, r3, #4
 8011b70:	4413      	add	r3, r2
 8011b72:	3308      	adds	r3, #8
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d006      	beq.n	8011b8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	3301      	adds	r3, #1
 8011b82:	60fb      	str	r3, [r7, #12]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d9dc      	bls.n	8011b44 <inc_lock+0x10>
 8011b8a:	e000      	b.n	8011b8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011b8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d132      	bne.n	8011bfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b94:	2300      	movs	r3, #0
 8011b96:	60fb      	str	r3, [r7, #12]
 8011b98:	e002      	b.n	8011ba0 <inc_lock+0x6c>
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d806      	bhi.n	8011bb4 <inc_lock+0x80>
 8011ba6:	4a29      	ldr	r2, [pc, #164]	; (8011c4c <inc_lock+0x118>)
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	011b      	lsls	r3, r3, #4
 8011bac:	4413      	add	r3, r2
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1f2      	bne.n	8011b9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2b02      	cmp	r3, #2
 8011bb8:	d101      	bne.n	8011bbe <inc_lock+0x8a>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e040      	b.n	8011c40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681a      	ldr	r2, [r3, #0]
 8011bc2:	4922      	ldr	r1, [pc, #136]	; (8011c4c <inc_lock+0x118>)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	011b      	lsls	r3, r3, #4
 8011bc8:	440b      	add	r3, r1
 8011bca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	689a      	ldr	r2, [r3, #8]
 8011bd0:	491e      	ldr	r1, [pc, #120]	; (8011c4c <inc_lock+0x118>)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	011b      	lsls	r3, r3, #4
 8011bd6:	440b      	add	r3, r1
 8011bd8:	3304      	adds	r3, #4
 8011bda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	695a      	ldr	r2, [r3, #20]
 8011be0:	491a      	ldr	r1, [pc, #104]	; (8011c4c <inc_lock+0x118>)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	011b      	lsls	r3, r3, #4
 8011be6:	440b      	add	r3, r1
 8011be8:	3308      	adds	r3, #8
 8011bea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011bec:	4a17      	ldr	r2, [pc, #92]	; (8011c4c <inc_lock+0x118>)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	011b      	lsls	r3, r3, #4
 8011bf2:	4413      	add	r3, r2
 8011bf4:	330c      	adds	r3, #12
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d009      	beq.n	8011c14 <inc_lock+0xe0>
 8011c00:	4a12      	ldr	r2, [pc, #72]	; (8011c4c <inc_lock+0x118>)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	011b      	lsls	r3, r3, #4
 8011c06:	4413      	add	r3, r2
 8011c08:	330c      	adds	r3, #12
 8011c0a:	881b      	ldrh	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d001      	beq.n	8011c14 <inc_lock+0xe0>
 8011c10:	2300      	movs	r3, #0
 8011c12:	e015      	b.n	8011c40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d108      	bne.n	8011c2c <inc_lock+0xf8>
 8011c1a:	4a0c      	ldr	r2, [pc, #48]	; (8011c4c <inc_lock+0x118>)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	011b      	lsls	r3, r3, #4
 8011c20:	4413      	add	r3, r2
 8011c22:	330c      	adds	r3, #12
 8011c24:	881b      	ldrh	r3, [r3, #0]
 8011c26:	3301      	adds	r3, #1
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	e001      	b.n	8011c30 <inc_lock+0xfc>
 8011c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011c30:	4906      	ldr	r1, [pc, #24]	; (8011c4c <inc_lock+0x118>)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	440b      	add	r3, r1
 8011c38:	330c      	adds	r3, #12
 8011c3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	3301      	adds	r3, #1
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3714      	adds	r7, #20
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr
 8011c4c:	200452dc 	.word	0x200452dc

08011c50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	3b01      	subs	r3, #1
 8011c5c:	607b      	str	r3, [r7, #4]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d825      	bhi.n	8011cb0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011c64:	4a17      	ldr	r2, [pc, #92]	; (8011cc4 <dec_lock+0x74>)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	011b      	lsls	r3, r3, #4
 8011c6a:	4413      	add	r3, r2
 8011c6c:	330c      	adds	r3, #12
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011c72:	89fb      	ldrh	r3, [r7, #14]
 8011c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c78:	d101      	bne.n	8011c7e <dec_lock+0x2e>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011c7e:	89fb      	ldrh	r3, [r7, #14]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d002      	beq.n	8011c8a <dec_lock+0x3a>
 8011c84:	89fb      	ldrh	r3, [r7, #14]
 8011c86:	3b01      	subs	r3, #1
 8011c88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011c8a:	4a0e      	ldr	r2, [pc, #56]	; (8011cc4 <dec_lock+0x74>)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	011b      	lsls	r3, r3, #4
 8011c90:	4413      	add	r3, r2
 8011c92:	330c      	adds	r3, #12
 8011c94:	89fa      	ldrh	r2, [r7, #14]
 8011c96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011c98:	89fb      	ldrh	r3, [r7, #14]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d105      	bne.n	8011caa <dec_lock+0x5a>
 8011c9e:	4a09      	ldr	r2, [pc, #36]	; (8011cc4 <dec_lock+0x74>)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	011b      	lsls	r3, r3, #4
 8011ca4:	4413      	add	r3, r2
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	737b      	strb	r3, [r7, #13]
 8011cae:	e001      	b.n	8011cb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011cb4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3714      	adds	r7, #20
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop
 8011cc4:	200452dc 	.word	0x200452dc

08011cc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	60fb      	str	r3, [r7, #12]
 8011cd4:	e010      	b.n	8011cf8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011cd6:	4a0d      	ldr	r2, [pc, #52]	; (8011d0c <clear_lock+0x44>)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	011b      	lsls	r3, r3, #4
 8011cdc:	4413      	add	r3, r2
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d105      	bne.n	8011cf2 <clear_lock+0x2a>
 8011ce6:	4a09      	ldr	r2, [pc, #36]	; (8011d0c <clear_lock+0x44>)
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	011b      	lsls	r3, r3, #4
 8011cec:	4413      	add	r3, r2
 8011cee:	2200      	movs	r2, #0
 8011cf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d9eb      	bls.n	8011cd6 <clear_lock+0xe>
	}
}
 8011cfe:	bf00      	nop
 8011d00:	3714      	adds	r7, #20
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	200452dc 	.word	0x200452dc

08011d10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b086      	sub	sp, #24
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	78db      	ldrb	r3, [r3, #3]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d034      	beq.n	8011d8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	7858      	ldrb	r0, [r3, #1]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d34:	2301      	movs	r3, #1
 8011d36:	697a      	ldr	r2, [r7, #20]
 8011d38:	f7ff fd40 	bl	80117bc <disk_write>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011d42:	2301      	movs	r3, #1
 8011d44:	73fb      	strb	r3, [r7, #15]
 8011d46:	e022      	b.n	8011d8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	1ad2      	subs	r2, r2, r3
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a1b      	ldr	r3, [r3, #32]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d217      	bcs.n	8011d8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	789b      	ldrb	r3, [r3, #2]
 8011d62:	613b      	str	r3, [r7, #16]
 8011d64:	e010      	b.n	8011d88 <sync_window+0x78>
					wsect += fs->fsize;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6a1b      	ldr	r3, [r3, #32]
 8011d6a:	697a      	ldr	r2, [r7, #20]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7858      	ldrb	r0, [r3, #1]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	697a      	ldr	r2, [r7, #20]
 8011d7e:	f7ff fd1d 	bl	80117bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	3b01      	subs	r3, #1
 8011d86:	613b      	str	r3, [r7, #16]
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d8eb      	bhi.n	8011d66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3718      	adds	r7, #24
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b084      	sub	sp, #16
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011daa:	683a      	ldr	r2, [r7, #0]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d01b      	beq.n	8011de8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7ff ffad 	bl	8011d10 <sync_window>
 8011db6:	4603      	mov	r3, r0
 8011db8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011dba:	7bfb      	ldrb	r3, [r7, #15]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d113      	bne.n	8011de8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7858      	ldrb	r0, [r3, #1]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dca:	2301      	movs	r3, #1
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	f7ff fcd5 	bl	801177c <disk_read>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d004      	beq.n	8011de2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ddc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011dde:	2301      	movs	r3, #1
 8011de0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
	...

08011df4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f7ff ff87 	bl	8011d10 <sync_window>
 8011e02:	4603      	mov	r3, r0
 8011e04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d159      	bne.n	8011ec0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	2b03      	cmp	r3, #3
 8011e12:	d149      	bne.n	8011ea8 <sync_fs+0xb4>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	791b      	ldrb	r3, [r3, #4]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d145      	bne.n	8011ea8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	461a      	mov	r2, r3
 8011e28:	2100      	movs	r1, #0
 8011e2a:	f7ff fda8 	bl	801197e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	3338      	adds	r3, #56	; 0x38
 8011e32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e36:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff fd37 	bl	80118ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	3338      	adds	r3, #56	; 0x38
 8011e44:	4921      	ldr	r1, [pc, #132]	; (8011ecc <sync_fs+0xd8>)
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7ff fd4c 	bl	80118e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3338      	adds	r3, #56	; 0x38
 8011e50:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e54:	491e      	ldr	r1, [pc, #120]	; (8011ed0 <sync_fs+0xdc>)
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7ff fd44 	bl	80118e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	3338      	adds	r3, #56	; 0x38
 8011e60:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	695b      	ldr	r3, [r3, #20]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	4610      	mov	r0, r2
 8011e6c:	f7ff fd3a 	bl	80118e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	3338      	adds	r3, #56	; 0x38
 8011e74:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	4610      	mov	r0, r2
 8011e80:	f7ff fd30 	bl	80118e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e88:	1c5a      	adds	r2, r3, #1
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	7858      	ldrb	r0, [r3, #1]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	f7ff fc8d 	bl	80117bc <disk_write>
			fs->fsi_flag = 0;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	785b      	ldrb	r3, [r3, #1]
 8011eac:	2200      	movs	r2, #0
 8011eae:	2100      	movs	r1, #0
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff fca3 	bl	80117fc <disk_ioctl>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d001      	beq.n	8011ec0 <sync_fs+0xcc>
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3710      	adds	r7, #16
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	41615252 	.word	0x41615252
 8011ed0:	61417272 	.word	0x61417272

08011ed4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	3b02      	subs	r3, #2
 8011ee2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	69db      	ldr	r3, [r3, #28]
 8011ee8:	3b02      	subs	r3, #2
 8011eea:	683a      	ldr	r2, [r7, #0]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d301      	bcc.n	8011ef4 <clust2sect+0x20>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	e008      	b.n	8011f06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	895b      	ldrh	r3, [r3, #10]
 8011ef8:	461a      	mov	r2, r3
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	fb03 f202 	mul.w	r2, r3, r2
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f04:	4413      	add	r3, r2
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	370c      	adds	r7, #12
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr

08011f12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b086      	sub	sp, #24
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
 8011f1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d904      	bls.n	8011f32 <get_fat+0x20>
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	69db      	ldr	r3, [r3, #28]
 8011f2c:	683a      	ldr	r2, [r7, #0]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d302      	bcc.n	8011f38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011f32:	2301      	movs	r3, #1
 8011f34:	617b      	str	r3, [r7, #20]
 8011f36:	e0b7      	b.n	80120a8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011f38:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	2b02      	cmp	r3, #2
 8011f44:	d05a      	beq.n	8011ffc <get_fat+0xea>
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d07d      	beq.n	8012046 <get_fat+0x134>
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	f040 80a2 	bne.w	8012094 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	60fb      	str	r3, [r7, #12]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	085b      	lsrs	r3, r3, #1
 8011f58:	68fa      	ldr	r2, [r7, #12]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	899b      	ldrh	r3, [r3, #12]
 8011f66:	4619      	mov	r1, r3
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f6e:	4413      	add	r3, r2
 8011f70:	4619      	mov	r1, r3
 8011f72:	6938      	ldr	r0, [r7, #16]
 8011f74:	f7ff ff10 	bl	8011d98 <move_window>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f040 808d 	bne.w	801209a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	1c5a      	adds	r2, r3, #1
 8011f84:	60fa      	str	r2, [r7, #12]
 8011f86:	693a      	ldr	r2, [r7, #16]
 8011f88:	8992      	ldrh	r2, [r2, #12]
 8011f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f8e:	fb02 f201 	mul.w	r2, r2, r1
 8011f92:	1a9b      	subs	r3, r3, r2
 8011f94:	693a      	ldr	r2, [r7, #16]
 8011f96:	4413      	add	r3, r2
 8011f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	899b      	ldrh	r3, [r3, #12]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fae:	4413      	add	r3, r2
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	6938      	ldr	r0, [r7, #16]
 8011fb4:	f7ff fef0 	bl	8011d98 <move_window>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d16f      	bne.n	801209e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	899b      	ldrh	r3, [r3, #12]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fca:	fb02 f201 	mul.w	r2, r2, r1
 8011fce:	1a9b      	subs	r3, r3, r2
 8011fd0:	693a      	ldr	r2, [r7, #16]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011fd8:	021b      	lsls	r3, r3, #8
 8011fda:	461a      	mov	r2, r3
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	f003 0301 	and.w	r3, r3, #1
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d002      	beq.n	8011ff2 <get_fat+0xe0>
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	091b      	lsrs	r3, r3, #4
 8011ff0:	e002      	b.n	8011ff8 <get_fat+0xe6>
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011ff8:	617b      	str	r3, [r7, #20]
			break;
 8011ffa:	e055      	b.n	80120a8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	899b      	ldrh	r3, [r3, #12]
 8012004:	085b      	lsrs	r3, r3, #1
 8012006:	b29b      	uxth	r3, r3
 8012008:	4619      	mov	r1, r3
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012010:	4413      	add	r3, r2
 8012012:	4619      	mov	r1, r3
 8012014:	6938      	ldr	r0, [r7, #16]
 8012016:	f7ff febf 	bl	8011d98 <move_window>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d140      	bne.n	80120a2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	005b      	lsls	r3, r3, #1
 801202a:	693a      	ldr	r2, [r7, #16]
 801202c:	8992      	ldrh	r2, [r2, #12]
 801202e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012032:	fb02 f200 	mul.w	r2, r2, r0
 8012036:	1a9b      	subs	r3, r3, r2
 8012038:	440b      	add	r3, r1
 801203a:	4618      	mov	r0, r3
 801203c:	f7ff fbfc 	bl	8011838 <ld_word>
 8012040:	4603      	mov	r3, r0
 8012042:	617b      	str	r3, [r7, #20]
			break;
 8012044:	e030      	b.n	80120a8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	899b      	ldrh	r3, [r3, #12]
 801204e:	089b      	lsrs	r3, r3, #2
 8012050:	b29b      	uxth	r3, r3
 8012052:	4619      	mov	r1, r3
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	fbb3 f3f1 	udiv	r3, r3, r1
 801205a:	4413      	add	r3, r2
 801205c:	4619      	mov	r1, r3
 801205e:	6938      	ldr	r0, [r7, #16]
 8012060:	f7ff fe9a 	bl	8011d98 <move_window>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	d11d      	bne.n	80120a6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	693a      	ldr	r2, [r7, #16]
 8012076:	8992      	ldrh	r2, [r2, #12]
 8012078:	fbb3 f0f2 	udiv	r0, r3, r2
 801207c:	fb02 f200 	mul.w	r2, r2, r0
 8012080:	1a9b      	subs	r3, r3, r2
 8012082:	440b      	add	r3, r1
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff fbef 	bl	8011868 <ld_dword>
 801208a:	4603      	mov	r3, r0
 801208c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012090:	617b      	str	r3, [r7, #20]
			break;
 8012092:	e009      	b.n	80120a8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012094:	2301      	movs	r3, #1
 8012096:	617b      	str	r3, [r7, #20]
 8012098:	e006      	b.n	80120a8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801209a:	bf00      	nop
 801209c:	e004      	b.n	80120a8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801209e:	bf00      	nop
 80120a0:	e002      	b.n	80120a8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80120a2:	bf00      	nop
 80120a4:	e000      	b.n	80120a8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80120a6:	bf00      	nop
		}
	}

	return val;
 80120a8:	697b      	ldr	r3, [r7, #20]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80120b2:	b590      	push	{r4, r7, lr}
 80120b4:	b089      	sub	sp, #36	; 0x24
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	60f8      	str	r0, [r7, #12]
 80120ba:	60b9      	str	r1, [r7, #8]
 80120bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80120be:	2302      	movs	r3, #2
 80120c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	f240 8106 	bls.w	80122d6 <put_fat+0x224>
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	69db      	ldr	r3, [r3, #28]
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	f080 8100 	bcs.w	80122d6 <put_fat+0x224>
		switch (fs->fs_type) {
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b02      	cmp	r3, #2
 80120dc:	f000 8088 	beq.w	80121f0 <put_fat+0x13e>
 80120e0:	2b03      	cmp	r3, #3
 80120e2:	f000 80b0 	beq.w	8012246 <put_fat+0x194>
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	f040 80f5 	bne.w	80122d6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	61bb      	str	r3, [r7, #24]
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	085b      	lsrs	r3, r3, #1
 80120f4:	69ba      	ldr	r2, [r7, #24]
 80120f6:	4413      	add	r3, r2
 80120f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	899b      	ldrh	r3, [r3, #12]
 8012102:	4619      	mov	r1, r3
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	fbb3 f3f1 	udiv	r3, r3, r1
 801210a:	4413      	add	r3, r2
 801210c:	4619      	mov	r1, r3
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	f7ff fe42 	bl	8011d98 <move_window>
 8012114:	4603      	mov	r3, r0
 8012116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012118:	7ffb      	ldrb	r3, [r7, #31]
 801211a:	2b00      	cmp	r3, #0
 801211c:	f040 80d4 	bne.w	80122c8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	1c5a      	adds	r2, r3, #1
 801212a:	61ba      	str	r2, [r7, #24]
 801212c:	68fa      	ldr	r2, [r7, #12]
 801212e:	8992      	ldrh	r2, [r2, #12]
 8012130:	fbb3 f0f2 	udiv	r0, r3, r2
 8012134:	fb02 f200 	mul.w	r2, r2, r0
 8012138:	1a9b      	subs	r3, r3, r2
 801213a:	440b      	add	r3, r1
 801213c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	f003 0301 	and.w	r3, r3, #1
 8012144:	2b00      	cmp	r3, #0
 8012146:	d00d      	beq.n	8012164 <put_fat+0xb2>
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	b25b      	sxtb	r3, r3
 801214e:	f003 030f 	and.w	r3, r3, #15
 8012152:	b25a      	sxtb	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	b2db      	uxtb	r3, r3
 8012158:	011b      	lsls	r3, r3, #4
 801215a:	b25b      	sxtb	r3, r3
 801215c:	4313      	orrs	r3, r2
 801215e:	b25b      	sxtb	r3, r3
 8012160:	b2db      	uxtb	r3, r3
 8012162:	e001      	b.n	8012168 <put_fat+0xb6>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	b2db      	uxtb	r3, r3
 8012168:	697a      	ldr	r2, [r7, #20]
 801216a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	2201      	movs	r2, #1
 8012170:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	899b      	ldrh	r3, [r3, #12]
 801217a:	4619      	mov	r1, r3
 801217c:	69bb      	ldr	r3, [r7, #24]
 801217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012182:	4413      	add	r3, r2
 8012184:	4619      	mov	r1, r3
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f7ff fe06 	bl	8011d98 <move_window>
 801218c:	4603      	mov	r3, r0
 801218e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012190:	7ffb      	ldrb	r3, [r7, #31]
 8012192:	2b00      	cmp	r3, #0
 8012194:	f040 809a 	bne.w	80122cc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	899b      	ldrh	r3, [r3, #12]
 80121a2:	461a      	mov	r2, r3
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80121aa:	fb02 f200 	mul.w	r2, r2, r0
 80121ae:	1a9b      	subs	r3, r3, r2
 80121b0:	440b      	add	r3, r1
 80121b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	f003 0301 	and.w	r3, r3, #1
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d003      	beq.n	80121c6 <put_fat+0x114>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	091b      	lsrs	r3, r3, #4
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	e00e      	b.n	80121e4 <put_fat+0x132>
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	b25b      	sxtb	r3, r3
 80121cc:	f023 030f 	bic.w	r3, r3, #15
 80121d0:	b25a      	sxtb	r2, r3
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	0a1b      	lsrs	r3, r3, #8
 80121d6:	b25b      	sxtb	r3, r3
 80121d8:	f003 030f 	and.w	r3, r3, #15
 80121dc:	b25b      	sxtb	r3, r3
 80121de:	4313      	orrs	r3, r2
 80121e0:	b25b      	sxtb	r3, r3
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2201      	movs	r2, #1
 80121ec:	70da      	strb	r2, [r3, #3]
			break;
 80121ee:	e072      	b.n	80122d6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	899b      	ldrh	r3, [r3, #12]
 80121f8:	085b      	lsrs	r3, r3, #1
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	4619      	mov	r1, r3
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	fbb3 f3f1 	udiv	r3, r3, r1
 8012204:	4413      	add	r3, r2
 8012206:	4619      	mov	r1, r3
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f7ff fdc5 	bl	8011d98 <move_window>
 801220e:	4603      	mov	r3, r0
 8012210:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012212:	7ffb      	ldrb	r3, [r7, #31]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d15b      	bne.n	80122d0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	005b      	lsls	r3, r3, #1
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	8992      	ldrh	r2, [r2, #12]
 8012226:	fbb3 f0f2 	udiv	r0, r3, r2
 801222a:	fb02 f200 	mul.w	r2, r2, r0
 801222e:	1a9b      	subs	r3, r3, r2
 8012230:	440b      	add	r3, r1
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	b292      	uxth	r2, r2
 8012236:	4611      	mov	r1, r2
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff fb38 	bl	80118ae <st_word>
			fs->wflag = 1;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2201      	movs	r2, #1
 8012242:	70da      	strb	r2, [r3, #3]
			break;
 8012244:	e047      	b.n	80122d6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	899b      	ldrh	r3, [r3, #12]
 801224e:	089b      	lsrs	r3, r3, #2
 8012250:	b29b      	uxth	r3, r3
 8012252:	4619      	mov	r1, r3
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	fbb3 f3f1 	udiv	r3, r3, r1
 801225a:	4413      	add	r3, r2
 801225c:	4619      	mov	r1, r3
 801225e:	68f8      	ldr	r0, [r7, #12]
 8012260:	f7ff fd9a 	bl	8011d98 <move_window>
 8012264:	4603      	mov	r3, r0
 8012266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012268:	7ffb      	ldrb	r3, [r7, #31]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d132      	bne.n	80122d4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	8992      	ldrh	r2, [r2, #12]
 8012282:	fbb3 f0f2 	udiv	r0, r3, r2
 8012286:	fb02 f200 	mul.w	r2, r2, r0
 801228a:	1a9b      	subs	r3, r3, r2
 801228c:	440b      	add	r3, r1
 801228e:	4618      	mov	r0, r3
 8012290:	f7ff faea 	bl	8011868 <ld_dword>
 8012294:	4603      	mov	r3, r0
 8012296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801229a:	4323      	orrs	r3, r4
 801229c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	68fa      	ldr	r2, [r7, #12]
 80122aa:	8992      	ldrh	r2, [r2, #12]
 80122ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80122b0:	fb02 f200 	mul.w	r2, r2, r0
 80122b4:	1a9b      	subs	r3, r3, r2
 80122b6:	440b      	add	r3, r1
 80122b8:	6879      	ldr	r1, [r7, #4]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7ff fb12 	bl	80118e4 <st_dword>
			fs->wflag = 1;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2201      	movs	r2, #1
 80122c4:	70da      	strb	r2, [r3, #3]
			break;
 80122c6:	e006      	b.n	80122d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80122c8:	bf00      	nop
 80122ca:	e004      	b.n	80122d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80122cc:	bf00      	nop
 80122ce:	e002      	b.n	80122d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80122d0:	bf00      	nop
 80122d2:	e000      	b.n	80122d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80122d4:	bf00      	nop
		}
	}
	return res;
 80122d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3724      	adds	r7, #36	; 0x24
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd90      	pop	{r4, r7, pc}

080122e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b088      	sub	sp, #32
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80122ec:	2300      	movs	r3, #0
 80122ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	d904      	bls.n	8012306 <remove_chain+0x26>
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	69db      	ldr	r3, [r3, #28]
 8012300:	68ba      	ldr	r2, [r7, #8]
 8012302:	429a      	cmp	r2, r3
 8012304:	d301      	bcc.n	801230a <remove_chain+0x2a>
 8012306:	2302      	movs	r3, #2
 8012308:	e04b      	b.n	80123a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00c      	beq.n	801232a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012310:	f04f 32ff 	mov.w	r2, #4294967295
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	69b8      	ldr	r0, [r7, #24]
 8012318:	f7ff fecb 	bl	80120b2 <put_fat>
 801231c:	4603      	mov	r3, r0
 801231e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012320:	7ffb      	ldrb	r3, [r7, #31]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d001      	beq.n	801232a <remove_chain+0x4a>
 8012326:	7ffb      	ldrb	r3, [r7, #31]
 8012328:	e03b      	b.n	80123a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801232a:	68b9      	ldr	r1, [r7, #8]
 801232c:	68f8      	ldr	r0, [r7, #12]
 801232e:	f7ff fdf0 	bl	8011f12 <get_fat>
 8012332:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d031      	beq.n	801239e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d101      	bne.n	8012344 <remove_chain+0x64>
 8012340:	2302      	movs	r3, #2
 8012342:	e02e      	b.n	80123a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801234a:	d101      	bne.n	8012350 <remove_chain+0x70>
 801234c:	2301      	movs	r3, #1
 801234e:	e028      	b.n	80123a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012350:	2200      	movs	r2, #0
 8012352:	68b9      	ldr	r1, [r7, #8]
 8012354:	69b8      	ldr	r0, [r7, #24]
 8012356:	f7ff feac 	bl	80120b2 <put_fat>
 801235a:	4603      	mov	r3, r0
 801235c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801235e:	7ffb      	ldrb	r3, [r7, #31]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d001      	beq.n	8012368 <remove_chain+0x88>
 8012364:	7ffb      	ldrb	r3, [r7, #31]
 8012366:	e01c      	b.n	80123a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	695a      	ldr	r2, [r3, #20]
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	69db      	ldr	r3, [r3, #28]
 8012370:	3b02      	subs	r3, #2
 8012372:	429a      	cmp	r2, r3
 8012374:	d20b      	bcs.n	801238e <remove_chain+0xae>
			fs->free_clst++;
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	695b      	ldr	r3, [r3, #20]
 801237a:	1c5a      	adds	r2, r3, #1
 801237c:	69bb      	ldr	r3, [r7, #24]
 801237e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	791b      	ldrb	r3, [r3, #4]
 8012384:	f043 0301 	orr.w	r3, r3, #1
 8012388:	b2da      	uxtb	r2, r3
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	69db      	ldr	r3, [r3, #28]
 8012396:	68ba      	ldr	r2, [r7, #8]
 8012398:	429a      	cmp	r2, r3
 801239a:	d3c6      	bcc.n	801232a <remove_chain+0x4a>
 801239c:	e000      	b.n	80123a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801239e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3720      	adds	r7, #32
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b088      	sub	sp, #32
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
 80123b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d10d      	bne.n	80123dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	691b      	ldr	r3, [r3, #16]
 80123c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d004      	beq.n	80123d6 <create_chain+0x2c>
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	69db      	ldr	r3, [r3, #28]
 80123d0:	69ba      	ldr	r2, [r7, #24]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d31b      	bcc.n	801240e <create_chain+0x64>
 80123d6:	2301      	movs	r3, #1
 80123d8:	61bb      	str	r3, [r7, #24]
 80123da:	e018      	b.n	801240e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80123dc:	6839      	ldr	r1, [r7, #0]
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7ff fd97 	bl	8011f12 <get_fat>
 80123e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d801      	bhi.n	80123f0 <create_chain+0x46>
 80123ec:	2301      	movs	r3, #1
 80123ee:	e070      	b.n	80124d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f6:	d101      	bne.n	80123fc <create_chain+0x52>
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	e06a      	b.n	80124d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	69db      	ldr	r3, [r3, #28]
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	429a      	cmp	r2, r3
 8012404:	d201      	bcs.n	801240a <create_chain+0x60>
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	e063      	b.n	80124d2 <create_chain+0x128>
		scl = clst;
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	3301      	adds	r3, #1
 8012416:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	69db      	ldr	r3, [r3, #28]
 801241c:	69fa      	ldr	r2, [r7, #28]
 801241e:	429a      	cmp	r2, r3
 8012420:	d307      	bcc.n	8012432 <create_chain+0x88>
				ncl = 2;
 8012422:	2302      	movs	r3, #2
 8012424:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012426:	69fa      	ldr	r2, [r7, #28]
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	429a      	cmp	r2, r3
 801242c:	d901      	bls.n	8012432 <create_chain+0x88>
 801242e:	2300      	movs	r3, #0
 8012430:	e04f      	b.n	80124d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012432:	69f9      	ldr	r1, [r7, #28]
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f7ff fd6c 	bl	8011f12 <get_fat>
 801243a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00e      	beq.n	8012460 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d003      	beq.n	8012450 <create_chain+0xa6>
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801244e:	d101      	bne.n	8012454 <create_chain+0xaa>
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	e03e      	b.n	80124d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012454:	69fa      	ldr	r2, [r7, #28]
 8012456:	69bb      	ldr	r3, [r7, #24]
 8012458:	429a      	cmp	r2, r3
 801245a:	d1da      	bne.n	8012412 <create_chain+0x68>
 801245c:	2300      	movs	r3, #0
 801245e:	e038      	b.n	80124d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012460:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012462:	f04f 32ff 	mov.w	r2, #4294967295
 8012466:	69f9      	ldr	r1, [r7, #28]
 8012468:	6938      	ldr	r0, [r7, #16]
 801246a:	f7ff fe22 	bl	80120b2 <put_fat>
 801246e:	4603      	mov	r3, r0
 8012470:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012472:	7dfb      	ldrb	r3, [r7, #23]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d109      	bne.n	801248c <create_chain+0xe2>
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d006      	beq.n	801248c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801247e:	69fa      	ldr	r2, [r7, #28]
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6938      	ldr	r0, [r7, #16]
 8012484:	f7ff fe15 	bl	80120b2 <put_fat>
 8012488:	4603      	mov	r3, r0
 801248a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801248c:	7dfb      	ldrb	r3, [r7, #23]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d116      	bne.n	80124c0 <create_chain+0x116>
		fs->last_clst = ncl;
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	69fa      	ldr	r2, [r7, #28]
 8012496:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	695a      	ldr	r2, [r3, #20]
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	69db      	ldr	r3, [r3, #28]
 80124a0:	3b02      	subs	r3, #2
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d804      	bhi.n	80124b0 <create_chain+0x106>
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	695b      	ldr	r3, [r3, #20]
 80124aa:	1e5a      	subs	r2, r3, #1
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	791b      	ldrb	r3, [r3, #4]
 80124b4:	f043 0301 	orr.w	r3, r3, #1
 80124b8:	b2da      	uxtb	r2, r3
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	711a      	strb	r2, [r3, #4]
 80124be:	e007      	b.n	80124d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80124c0:	7dfb      	ldrb	r3, [r7, #23]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d102      	bne.n	80124cc <create_chain+0x122>
 80124c6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ca:	e000      	b.n	80124ce <create_chain+0x124>
 80124cc:	2301      	movs	r3, #1
 80124ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80124d0:	69fb      	ldr	r3, [r7, #28]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3720      	adds	r7, #32
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80124da:	b480      	push	{r7}
 80124dc:	b087      	sub	sp, #28
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
 80124e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ee:	3304      	adds	r3, #4
 80124f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	899b      	ldrh	r3, [r3, #12]
 80124f6:	461a      	mov	r2, r3
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	8952      	ldrh	r2, [r2, #10]
 8012502:	fbb3 f3f2 	udiv	r3, r3, r2
 8012506:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	1d1a      	adds	r2, r3, #4
 801250c:	613a      	str	r2, [r7, #16]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d101      	bne.n	801251c <clmt_clust+0x42>
 8012518:	2300      	movs	r3, #0
 801251a:	e010      	b.n	801253e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801251c:	697a      	ldr	r2, [r7, #20]
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	429a      	cmp	r2, r3
 8012522:	d307      	bcc.n	8012534 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012524:	697a      	ldr	r2, [r7, #20]
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	1ad3      	subs	r3, r2, r3
 801252a:	617b      	str	r3, [r7, #20]
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	3304      	adds	r3, #4
 8012530:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012532:	e7e9      	b.n	8012508 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012534:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	681a      	ldr	r2, [r3, #0]
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	4413      	add	r3, r2
}
 801253e:	4618      	mov	r0, r3
 8012540:	371c      	adds	r7, #28
 8012542:	46bd      	mov	sp, r7
 8012544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012548:	4770      	bx	lr

0801254a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801254a:	b580      	push	{r7, lr}
 801254c:	b086      	sub	sp, #24
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
 8012552:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012560:	d204      	bcs.n	801256c <dir_sdi+0x22>
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	f003 031f 	and.w	r3, r3, #31
 8012568:	2b00      	cmp	r3, #0
 801256a:	d001      	beq.n	8012570 <dir_sdi+0x26>
		return FR_INT_ERR;
 801256c:	2302      	movs	r3, #2
 801256e:	e071      	b.n	8012654 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	683a      	ldr	r2, [r7, #0]
 8012574:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	689b      	ldr	r3, [r3, #8]
 801257a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d106      	bne.n	8012590 <dir_sdi+0x46>
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b02      	cmp	r3, #2
 8012588:	d902      	bls.n	8012590 <dir_sdi+0x46>
		clst = fs->dirbase;
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10c      	bne.n	80125b0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	095b      	lsrs	r3, r3, #5
 801259a:	693a      	ldr	r2, [r7, #16]
 801259c:	8912      	ldrh	r2, [r2, #8]
 801259e:	4293      	cmp	r3, r2
 80125a0:	d301      	bcc.n	80125a6 <dir_sdi+0x5c>
 80125a2:	2302      	movs	r3, #2
 80125a4:	e056      	b.n	8012654 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	61da      	str	r2, [r3, #28]
 80125ae:	e02d      	b.n	801260c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	895b      	ldrh	r3, [r3, #10]
 80125b4:	461a      	mov	r2, r3
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	899b      	ldrh	r3, [r3, #12]
 80125ba:	fb03 f302 	mul.w	r3, r3, r2
 80125be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80125c0:	e019      	b.n	80125f6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6979      	ldr	r1, [r7, #20]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7ff fca3 	bl	8011f12 <get_fat>
 80125cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125d4:	d101      	bne.n	80125da <dir_sdi+0x90>
 80125d6:	2301      	movs	r3, #1
 80125d8:	e03c      	b.n	8012654 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b01      	cmp	r3, #1
 80125de:	d904      	bls.n	80125ea <dir_sdi+0xa0>
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	69db      	ldr	r3, [r3, #28]
 80125e4:	697a      	ldr	r2, [r7, #20]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d301      	bcc.n	80125ee <dir_sdi+0xa4>
 80125ea:	2302      	movs	r3, #2
 80125ec:	e032      	b.n	8012654 <dir_sdi+0x10a>
			ofs -= csz;
 80125ee:	683a      	ldr	r2, [r7, #0]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80125f6:	683a      	ldr	r2, [r7, #0]
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d2e1      	bcs.n	80125c2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80125fe:	6979      	ldr	r1, [r7, #20]
 8012600:	6938      	ldr	r0, [r7, #16]
 8012602:	f7ff fc67 	bl	8011ed4 <clust2sect>
 8012606:	4602      	mov	r2, r0
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	697a      	ldr	r2, [r7, #20]
 8012610:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	69db      	ldr	r3, [r3, #28]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d101      	bne.n	801261e <dir_sdi+0xd4>
 801261a:	2302      	movs	r3, #2
 801261c:	e01a      	b.n	8012654 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	69da      	ldr	r2, [r3, #28]
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	899b      	ldrh	r3, [r3, #12]
 8012626:	4619      	mov	r1, r3
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	fbb3 f3f1 	udiv	r3, r3, r1
 801262e:	441a      	add	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	899b      	ldrh	r3, [r3, #12]
 801263e:	461a      	mov	r2, r3
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	fbb3 f0f2 	udiv	r0, r3, r2
 8012646:	fb02 f200 	mul.w	r2, r2, r0
 801264a:	1a9b      	subs	r3, r3, r2
 801264c:	18ca      	adds	r2, r1, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012652:	2300      	movs	r3, #0
}
 8012654:	4618      	mov	r0, r3
 8012656:	3718      	adds	r7, #24
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b086      	sub	sp, #24
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	695b      	ldr	r3, [r3, #20]
 8012670:	3320      	adds	r3, #32
 8012672:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	69db      	ldr	r3, [r3, #28]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d003      	beq.n	8012684 <dir_next+0x28>
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012682:	d301      	bcc.n	8012688 <dir_next+0x2c>
 8012684:	2304      	movs	r3, #4
 8012686:	e0bb      	b.n	8012800 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	899b      	ldrh	r3, [r3, #12]
 801268c:	461a      	mov	r2, r3
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	fbb3 f1f2 	udiv	r1, r3, r2
 8012694:	fb02 f201 	mul.w	r2, r2, r1
 8012698:	1a9b      	subs	r3, r3, r2
 801269a:	2b00      	cmp	r3, #0
 801269c:	f040 809d 	bne.w	80127da <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	69db      	ldr	r3, [r3, #28]
 80126a4:	1c5a      	adds	r2, r3, #1
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	699b      	ldr	r3, [r3, #24]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d10b      	bne.n	80126ca <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	095b      	lsrs	r3, r3, #5
 80126b6:	68fa      	ldr	r2, [r7, #12]
 80126b8:	8912      	ldrh	r2, [r2, #8]
 80126ba:	4293      	cmp	r3, r2
 80126bc:	f0c0 808d 	bcc.w	80127da <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	61da      	str	r2, [r3, #28]
 80126c6:	2304      	movs	r3, #4
 80126c8:	e09a      	b.n	8012800 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	899b      	ldrh	r3, [r3, #12]
 80126ce:	461a      	mov	r2, r3
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80126d6:	68fa      	ldr	r2, [r7, #12]
 80126d8:	8952      	ldrh	r2, [r2, #10]
 80126da:	3a01      	subs	r2, #1
 80126dc:	4013      	ands	r3, r2
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d17b      	bne.n	80127da <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	699b      	ldr	r3, [r3, #24]
 80126e8:	4619      	mov	r1, r3
 80126ea:	4610      	mov	r0, r2
 80126ec:	f7ff fc11 	bl	8011f12 <get_fat>
 80126f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	2b01      	cmp	r3, #1
 80126f6:	d801      	bhi.n	80126fc <dir_next+0xa0>
 80126f8:	2302      	movs	r3, #2
 80126fa:	e081      	b.n	8012800 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012702:	d101      	bne.n	8012708 <dir_next+0xac>
 8012704:	2301      	movs	r3, #1
 8012706:	e07b      	b.n	8012800 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	69db      	ldr	r3, [r3, #28]
 801270c:	697a      	ldr	r2, [r7, #20]
 801270e:	429a      	cmp	r2, r3
 8012710:	d359      	bcc.n	80127c6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d104      	bne.n	8012722 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2200      	movs	r2, #0
 801271c:	61da      	str	r2, [r3, #28]
 801271e:	2304      	movs	r3, #4
 8012720:	e06e      	b.n	8012800 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	699b      	ldr	r3, [r3, #24]
 8012728:	4619      	mov	r1, r3
 801272a:	4610      	mov	r0, r2
 801272c:	f7ff fe3d 	bl	80123aa <create_chain>
 8012730:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d101      	bne.n	801273c <dir_next+0xe0>
 8012738:	2307      	movs	r3, #7
 801273a:	e061      	b.n	8012800 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	2b01      	cmp	r3, #1
 8012740:	d101      	bne.n	8012746 <dir_next+0xea>
 8012742:	2302      	movs	r3, #2
 8012744:	e05c      	b.n	8012800 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274c:	d101      	bne.n	8012752 <dir_next+0xf6>
 801274e:	2301      	movs	r3, #1
 8012750:	e056      	b.n	8012800 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f7ff fadc 	bl	8011d10 <sync_window>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <dir_next+0x106>
 801275e:	2301      	movs	r3, #1
 8012760:	e04e      	b.n	8012800 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	899b      	ldrh	r3, [r3, #12]
 801276c:	461a      	mov	r2, r3
 801276e:	2100      	movs	r1, #0
 8012770:	f7ff f905 	bl	801197e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012774:	2300      	movs	r3, #0
 8012776:	613b      	str	r3, [r7, #16]
 8012778:	6979      	ldr	r1, [r7, #20]
 801277a:	68f8      	ldr	r0, [r7, #12]
 801277c:	f7ff fbaa 	bl	8011ed4 <clust2sect>
 8012780:	4602      	mov	r2, r0
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	635a      	str	r2, [r3, #52]	; 0x34
 8012786:	e012      	b.n	80127ae <dir_next+0x152>
						fs->wflag = 1;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	2201      	movs	r2, #1
 801278c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f7ff fabe 	bl	8011d10 <sync_window>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <dir_next+0x142>
 801279a:	2301      	movs	r3, #1
 801279c:	e030      	b.n	8012800 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	3301      	adds	r3, #1
 80127a2:	613b      	str	r3, [r7, #16]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	635a      	str	r2, [r3, #52]	; 0x34
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	895b      	ldrh	r3, [r3, #10]
 80127b2:	461a      	mov	r2, r3
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d3e6      	bcc.n	8012788 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	1ad2      	subs	r2, r2, r3
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	697a      	ldr	r2, [r7, #20]
 80127ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80127cc:	6979      	ldr	r1, [r7, #20]
 80127ce:	68f8      	ldr	r0, [r7, #12]
 80127d0:	f7ff fb80 	bl	8011ed4 <clust2sect>
 80127d4:	4602      	mov	r2, r0
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	68ba      	ldr	r2, [r7, #8]
 80127de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	899b      	ldrh	r3, [r3, #12]
 80127ea:	461a      	mov	r2, r3
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80127f2:	fb02 f200 	mul.w	r2, r2, r0
 80127f6:	1a9b      	subs	r3, r3, r2
 80127f8:	18ca      	adds	r2, r1, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80127fe:	2300      	movs	r3, #0
}
 8012800:	4618      	mov	r0, r3
 8012802:	3718      	adds	r7, #24
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b086      	sub	sp, #24
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012818:	2100      	movs	r1, #0
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f7ff fe95 	bl	801254a <dir_sdi>
 8012820:	4603      	mov	r3, r0
 8012822:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012824:	7dfb      	ldrb	r3, [r7, #23]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d12b      	bne.n	8012882 <dir_alloc+0x7a>
		n = 0;
 801282a:	2300      	movs	r3, #0
 801282c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	69db      	ldr	r3, [r3, #28]
 8012832:	4619      	mov	r1, r3
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f7ff faaf 	bl	8011d98 <move_window>
 801283a:	4603      	mov	r3, r0
 801283c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801283e:	7dfb      	ldrb	r3, [r7, #23]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11d      	bne.n	8012880 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6a1b      	ldr	r3, [r3, #32]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	2be5      	cmp	r3, #229	; 0xe5
 801284c:	d004      	beq.n	8012858 <dir_alloc+0x50>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6a1b      	ldr	r3, [r3, #32]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d107      	bne.n	8012868 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	3301      	adds	r3, #1
 801285c:	613b      	str	r3, [r7, #16]
 801285e:	693a      	ldr	r2, [r7, #16]
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	429a      	cmp	r2, r3
 8012864:	d102      	bne.n	801286c <dir_alloc+0x64>
 8012866:	e00c      	b.n	8012882 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012868:	2300      	movs	r3, #0
 801286a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801286c:	2101      	movs	r1, #1
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff fef4 	bl	801265c <dir_next>
 8012874:	4603      	mov	r3, r0
 8012876:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012878:	7dfb      	ldrb	r3, [r7, #23]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d0d7      	beq.n	801282e <dir_alloc+0x26>
 801287e:	e000      	b.n	8012882 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012880:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012882:	7dfb      	ldrb	r3, [r7, #23]
 8012884:	2b04      	cmp	r3, #4
 8012886:	d101      	bne.n	801288c <dir_alloc+0x84>
 8012888:	2307      	movs	r3, #7
 801288a:	75fb      	strb	r3, [r7, #23]
	return res;
 801288c:	7dfb      	ldrb	r3, [r7, #23]
}
 801288e:	4618      	mov	r0, r3
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b084      	sub	sp, #16
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	331a      	adds	r3, #26
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fe ffc7 	bl	8011838 <ld_word>
 80128aa:	4603      	mov	r3, r0
 80128ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d109      	bne.n	80128ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	3314      	adds	r3, #20
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fe ffbc 	bl	8011838 <ld_word>
 80128c0:	4603      	mov	r3, r0
 80128c2:	041b      	lsls	r3, r3, #16
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	4313      	orrs	r3, r2
 80128c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80128ca:	68fb      	ldr	r3, [r7, #12]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	331a      	adds	r3, #26
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	b292      	uxth	r2, r2
 80128e8:	4611      	mov	r1, r2
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe ffdf 	bl	80118ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b03      	cmp	r3, #3
 80128f6:	d109      	bne.n	801290c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	f103 0214 	add.w	r2, r3, #20
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	0c1b      	lsrs	r3, r3, #16
 8012902:	b29b      	uxth	r3, r3
 8012904:	4619      	mov	r1, r3
 8012906:	4610      	mov	r0, r2
 8012908:	f7fe ffd1 	bl	80118ae <st_word>
	}
}
 801290c:	bf00      	nop
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b086      	sub	sp, #24
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801291e:	2304      	movs	r3, #4
 8012920:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012928:	e03c      	b.n	80129a4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	69db      	ldr	r3, [r3, #28]
 801292e:	4619      	mov	r1, r3
 8012930:	6938      	ldr	r0, [r7, #16]
 8012932:	f7ff fa31 	bl	8011d98 <move_window>
 8012936:	4603      	mov	r3, r0
 8012938:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801293a:	7dfb      	ldrb	r3, [r7, #23]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d136      	bne.n	80129ae <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6a1b      	ldr	r3, [r3, #32]
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012948:	7bfb      	ldrb	r3, [r7, #15]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d102      	bne.n	8012954 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801294e:	2304      	movs	r3, #4
 8012950:	75fb      	strb	r3, [r7, #23]
 8012952:	e031      	b.n	80129b8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6a1b      	ldr	r3, [r3, #32]
 8012958:	330b      	adds	r3, #11
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012960:	73bb      	strb	r3, [r7, #14]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	7bba      	ldrb	r2, [r7, #14]
 8012966:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012968:	7bfb      	ldrb	r3, [r7, #15]
 801296a:	2be5      	cmp	r3, #229	; 0xe5
 801296c:	d011      	beq.n	8012992 <dir_read+0x7e>
 801296e:	7bfb      	ldrb	r3, [r7, #15]
 8012970:	2b2e      	cmp	r3, #46	; 0x2e
 8012972:	d00e      	beq.n	8012992 <dir_read+0x7e>
 8012974:	7bbb      	ldrb	r3, [r7, #14]
 8012976:	2b0f      	cmp	r3, #15
 8012978:	d00b      	beq.n	8012992 <dir_read+0x7e>
 801297a:	7bbb      	ldrb	r3, [r7, #14]
 801297c:	f023 0320 	bic.w	r3, r3, #32
 8012980:	2b08      	cmp	r3, #8
 8012982:	bf0c      	ite	eq
 8012984:	2301      	moveq	r3, #1
 8012986:	2300      	movne	r3, #0
 8012988:	b2db      	uxtb	r3, r3
 801298a:	461a      	mov	r2, r3
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	4293      	cmp	r3, r2
 8012990:	d00f      	beq.n	80129b2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012992:	2100      	movs	r1, #0
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f7ff fe61 	bl	801265c <dir_next>
 801299a:	4603      	mov	r3, r0
 801299c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801299e:	7dfb      	ldrb	r3, [r7, #23]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d108      	bne.n	80129b6 <dir_read+0xa2>
	while (dp->sect) {
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	69db      	ldr	r3, [r3, #28]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d1be      	bne.n	801292a <dir_read+0x16>
 80129ac:	e004      	b.n	80129b8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80129ae:	bf00      	nop
 80129b0:	e002      	b.n	80129b8 <dir_read+0xa4>
				break;
 80129b2:	bf00      	nop
 80129b4:	e000      	b.n	80129b8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80129b6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80129b8:	7dfb      	ldrb	r3, [r7, #23]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d002      	beq.n	80129c4 <dir_read+0xb0>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2200      	movs	r2, #0
 80129c2:	61da      	str	r2, [r3, #28]
	return res;
 80129c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3718      	adds	r7, #24
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b086      	sub	sp, #24
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80129dc:	2100      	movs	r1, #0
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7ff fdb3 	bl	801254a <dir_sdi>
 80129e4:	4603      	mov	r3, r0
 80129e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80129e8:	7dfb      	ldrb	r3, [r7, #23]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d001      	beq.n	80129f2 <dir_find+0x24>
 80129ee:	7dfb      	ldrb	r3, [r7, #23]
 80129f0:	e03e      	b.n	8012a70 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	69db      	ldr	r3, [r3, #28]
 80129f6:	4619      	mov	r1, r3
 80129f8:	6938      	ldr	r0, [r7, #16]
 80129fa:	f7ff f9cd 	bl	8011d98 <move_window>
 80129fe:	4603      	mov	r3, r0
 8012a00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a02:	7dfb      	ldrb	r3, [r7, #23]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d12f      	bne.n	8012a68 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6a1b      	ldr	r3, [r3, #32]
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012a10:	7bfb      	ldrb	r3, [r7, #15]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d102      	bne.n	8012a1c <dir_find+0x4e>
 8012a16:	2304      	movs	r3, #4
 8012a18:	75fb      	strb	r3, [r7, #23]
 8012a1a:	e028      	b.n	8012a6e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a1b      	ldr	r3, [r3, #32]
 8012a20:	330b      	adds	r3, #11
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6a1b      	ldr	r3, [r3, #32]
 8012a32:	330b      	adds	r3, #11
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	f003 0308 	and.w	r3, r3, #8
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d10a      	bne.n	8012a54 <dir_find+0x86>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6a18      	ldr	r0, [r3, #32]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	3324      	adds	r3, #36	; 0x24
 8012a46:	220b      	movs	r2, #11
 8012a48:	4619      	mov	r1, r3
 8012a4a:	f7fe ffb2 	bl	80119b2 <mem_cmp>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d00b      	beq.n	8012a6c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012a54:	2100      	movs	r1, #0
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7ff fe00 	bl	801265c <dir_next>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012a60:	7dfb      	ldrb	r3, [r7, #23]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d0c5      	beq.n	80129f2 <dir_find+0x24>
 8012a66:	e002      	b.n	8012a6e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012a68:	bf00      	nop
 8012a6a:	e000      	b.n	8012a6e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012a6c:	bf00      	nop

	return res;
 8012a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3718      	adds	r7, #24
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012a86:	2101      	movs	r1, #1
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7ff febd 	bl	8012808 <dir_alloc>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012a92:	7bfb      	ldrb	r3, [r7, #15]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d11c      	bne.n	8012ad2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	69db      	ldr	r3, [r3, #28]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	68b8      	ldr	r0, [r7, #8]
 8012aa0:	f7ff f97a 	bl	8011d98 <move_window>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012aa8:	7bfb      	ldrb	r3, [r7, #15]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d111      	bne.n	8012ad2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6a1b      	ldr	r3, [r3, #32]
 8012ab2:	2220      	movs	r2, #32
 8012ab4:	2100      	movs	r1, #0
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fe ff61 	bl	801197e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6a18      	ldr	r0, [r3, #32]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	3324      	adds	r3, #36	; 0x24
 8012ac4:	220b      	movs	r2, #11
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	f7fe ff38 	bl	801193c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	2201      	movs	r2, #1
 8012ad0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3710      	adds	r7, #16
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	69db      	ldr	r3, [r3, #28]
 8012aee:	4619      	mov	r1, r3
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	f7ff f951 	bl	8011d98 <move_window>
 8012af6:	4603      	mov	r3, r0
 8012af8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012afa:	7afb      	ldrb	r3, [r7, #11]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d106      	bne.n	8012b0e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6a1b      	ldr	r3, [r3, #32]
 8012b04:	22e5      	movs	r2, #229	; 0xe5
 8012b06:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3710      	adds	r7, #16
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	60fb      	str	r3, [r7, #12]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	3324      	adds	r3, #36	; 0x24
 8012b2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012b2e:	220b      	movs	r2, #11
 8012b30:	2120      	movs	r1, #32
 8012b32:	68b8      	ldr	r0, [r7, #8]
 8012b34:	f7fe ff23 	bl	801197e <mem_set>
	si = i = 0; ni = 8;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	613b      	str	r3, [r7, #16]
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	617b      	str	r3, [r7, #20]
 8012b40:	2308      	movs	r3, #8
 8012b42:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	4413      	add	r3, r2
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4e:	d12f      	bne.n	8012bb0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	1c5a      	adds	r2, r3, #1
 8012b54:	617a      	str	r2, [r7, #20]
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	4413      	add	r3, r2
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012b5e:	7ffb      	ldrb	r3, [r7, #31]
 8012b60:	2b2e      	cmp	r3, #46	; 0x2e
 8012b62:	d10a      	bne.n	8012b7a <create_name+0x62>
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	2b02      	cmp	r3, #2
 8012b68:	d807      	bhi.n	8012b7a <create_name+0x62>
			sfn[i++] = c;
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	1c5a      	adds	r2, r3, #1
 8012b6e:	613a      	str	r2, [r7, #16]
 8012b70:	68ba      	ldr	r2, [r7, #8]
 8012b72:	4413      	add	r3, r2
 8012b74:	7ffa      	ldrb	r2, [r7, #31]
 8012b76:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012b78:	e7ea      	b.n	8012b50 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012b7a:	7ffb      	ldrb	r3, [r7, #31]
 8012b7c:	2b2f      	cmp	r3, #47	; 0x2f
 8012b7e:	d007      	beq.n	8012b90 <create_name+0x78>
 8012b80:	7ffb      	ldrb	r3, [r7, #31]
 8012b82:	2b5c      	cmp	r3, #92	; 0x5c
 8012b84:	d004      	beq.n	8012b90 <create_name+0x78>
 8012b86:	7ffb      	ldrb	r3, [r7, #31]
 8012b88:	2b20      	cmp	r3, #32
 8012b8a:	d901      	bls.n	8012b90 <create_name+0x78>
 8012b8c:	2306      	movs	r3, #6
 8012b8e:	e084      	b.n	8012c9a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012b90:	68fa      	ldr	r2, [r7, #12]
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	441a      	add	r2, r3
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012b9a:	7ffb      	ldrb	r3, [r7, #31]
 8012b9c:	2b20      	cmp	r3, #32
 8012b9e:	d801      	bhi.n	8012ba4 <create_name+0x8c>
 8012ba0:	2224      	movs	r2, #36	; 0x24
 8012ba2:	e000      	b.n	8012ba6 <create_name+0x8e>
 8012ba4:	2220      	movs	r2, #32
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	330b      	adds	r3, #11
 8012baa:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012bac:	2300      	movs	r3, #0
 8012bae:	e074      	b.n	8012c9a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	1c5a      	adds	r2, r3, #1
 8012bb4:	617a      	str	r2, [r7, #20]
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	4413      	add	r3, r2
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012bbe:	7ffb      	ldrb	r3, [r7, #31]
 8012bc0:	2b20      	cmp	r3, #32
 8012bc2:	d94e      	bls.n	8012c62 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012bc4:	7ffb      	ldrb	r3, [r7, #31]
 8012bc6:	2b2f      	cmp	r3, #47	; 0x2f
 8012bc8:	d006      	beq.n	8012bd8 <create_name+0xc0>
 8012bca:	7ffb      	ldrb	r3, [r7, #31]
 8012bcc:	2b5c      	cmp	r3, #92	; 0x5c
 8012bce:	d110      	bne.n	8012bf2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012bd0:	e002      	b.n	8012bd8 <create_name+0xc0>
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	617b      	str	r3, [r7, #20]
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	4413      	add	r3, r2
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	2b2f      	cmp	r3, #47	; 0x2f
 8012be2:	d0f6      	beq.n	8012bd2 <create_name+0xba>
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	4413      	add	r3, r2
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b5c      	cmp	r3, #92	; 0x5c
 8012bee:	d0f0      	beq.n	8012bd2 <create_name+0xba>
			break;
 8012bf0:	e038      	b.n	8012c64 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012bf2:	7ffb      	ldrb	r3, [r7, #31]
 8012bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8012bf6:	d003      	beq.n	8012c00 <create_name+0xe8>
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d30c      	bcc.n	8012c1a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012c00:	69bb      	ldr	r3, [r7, #24]
 8012c02:	2b0b      	cmp	r3, #11
 8012c04:	d002      	beq.n	8012c0c <create_name+0xf4>
 8012c06:	7ffb      	ldrb	r3, [r7, #31]
 8012c08:	2b2e      	cmp	r3, #46	; 0x2e
 8012c0a:	d001      	beq.n	8012c10 <create_name+0xf8>
 8012c0c:	2306      	movs	r3, #6
 8012c0e:	e044      	b.n	8012c9a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012c10:	2308      	movs	r3, #8
 8012c12:	613b      	str	r3, [r7, #16]
 8012c14:	230b      	movs	r3, #11
 8012c16:	61bb      	str	r3, [r7, #24]
			continue;
 8012c18:	e022      	b.n	8012c60 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	da04      	bge.n	8012c2c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012c22:	7ffb      	ldrb	r3, [r7, #31]
 8012c24:	3b80      	subs	r3, #128	; 0x80
 8012c26:	4a1f      	ldr	r2, [pc, #124]	; (8012ca4 <create_name+0x18c>)
 8012c28:	5cd3      	ldrb	r3, [r2, r3]
 8012c2a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012c2c:	7ffb      	ldrb	r3, [r7, #31]
 8012c2e:	4619      	mov	r1, r3
 8012c30:	481d      	ldr	r0, [pc, #116]	; (8012ca8 <create_name+0x190>)
 8012c32:	f7fe fee5 	bl	8011a00 <chk_chr>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d001      	beq.n	8012c40 <create_name+0x128>
 8012c3c:	2306      	movs	r3, #6
 8012c3e:	e02c      	b.n	8012c9a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012c40:	7ffb      	ldrb	r3, [r7, #31]
 8012c42:	2b60      	cmp	r3, #96	; 0x60
 8012c44:	d905      	bls.n	8012c52 <create_name+0x13a>
 8012c46:	7ffb      	ldrb	r3, [r7, #31]
 8012c48:	2b7a      	cmp	r3, #122	; 0x7a
 8012c4a:	d802      	bhi.n	8012c52 <create_name+0x13a>
 8012c4c:	7ffb      	ldrb	r3, [r7, #31]
 8012c4e:	3b20      	subs	r3, #32
 8012c50:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	1c5a      	adds	r2, r3, #1
 8012c56:	613a      	str	r2, [r7, #16]
 8012c58:	68ba      	ldr	r2, [r7, #8]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	7ffa      	ldrb	r2, [r7, #31]
 8012c5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012c60:	e7a6      	b.n	8012bb0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012c62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012c64:	68fa      	ldr	r2, [r7, #12]
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	441a      	add	r2, r3
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d101      	bne.n	8012c78 <create_name+0x160>
 8012c74:	2306      	movs	r3, #6
 8012c76:	e010      	b.n	8012c9a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	2be5      	cmp	r3, #229	; 0xe5
 8012c7e:	d102      	bne.n	8012c86 <create_name+0x16e>
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	2205      	movs	r2, #5
 8012c84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012c86:	7ffb      	ldrb	r3, [r7, #31]
 8012c88:	2b20      	cmp	r3, #32
 8012c8a:	d801      	bhi.n	8012c90 <create_name+0x178>
 8012c8c:	2204      	movs	r2, #4
 8012c8e:	e000      	b.n	8012c92 <create_name+0x17a>
 8012c90:	2200      	movs	r2, #0
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	330b      	adds	r3, #11
 8012c96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012c98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3720      	adds	r7, #32
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	0801925c 	.word	0x0801925c
 8012ca8:	0801920c 	.word	0x0801920c

08012cac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8012cc6:	d00b      	beq.n	8012ce0 <follow_path+0x34>
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8012cce:	d007      	beq.n	8012ce0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	699a      	ldr	r2, [r3, #24]
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	609a      	str	r2, [r3, #8]
 8012cd8:	e00d      	b.n	8012cf6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	603b      	str	r3, [r7, #0]
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b2f      	cmp	r3, #47	; 0x2f
 8012ce6:	d0f8      	beq.n	8012cda <follow_path+0x2e>
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	2b5c      	cmp	r3, #92	; 0x5c
 8012cee:	d0f4      	beq.n	8012cda <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	2b1f      	cmp	r3, #31
 8012cfc:	d80a      	bhi.n	8012d14 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2280      	movs	r2, #128	; 0x80
 8012d02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012d06:	2100      	movs	r1, #0
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7ff fc1e 	bl	801254a <dir_sdi>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	75fb      	strb	r3, [r7, #23]
 8012d12:	e05b      	b.n	8012dcc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012d14:	463b      	mov	r3, r7
 8012d16:	4619      	mov	r1, r3
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7ff fefd 	bl	8012b18 <create_name>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d22:	7dfb      	ldrb	r3, [r7, #23]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d14c      	bne.n	8012dc2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff fe50 	bl	80129ce <dir_find>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012d3a:	7dfb      	ldrb	r3, [r7, #23]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d01b      	beq.n	8012d78 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
 8012d42:	2b04      	cmp	r3, #4
 8012d44:	d13f      	bne.n	8012dc6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012d46:	7afb      	ldrb	r3, [r7, #11]
 8012d48:	f003 0320 	and.w	r3, r3, #32
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00b      	beq.n	8012d68 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012d50:	7afb      	ldrb	r3, [r7, #11]
 8012d52:	f003 0304 	and.w	r3, r3, #4
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d031      	beq.n	8012dbe <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2280      	movs	r2, #128	; 0x80
 8012d5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012d62:	2300      	movs	r3, #0
 8012d64:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012d66:	e02e      	b.n	8012dc6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012d68:	7afb      	ldrb	r3, [r7, #11]
 8012d6a:	f003 0304 	and.w	r3, r3, #4
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d129      	bne.n	8012dc6 <follow_path+0x11a>
 8012d72:	2305      	movs	r3, #5
 8012d74:	75fb      	strb	r3, [r7, #23]
				break;
 8012d76:	e026      	b.n	8012dc6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012d78:	7afb      	ldrb	r3, [r7, #11]
 8012d7a:	f003 0304 	and.w	r3, r3, #4
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d123      	bne.n	8012dca <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	799b      	ldrb	r3, [r3, #6]
 8012d86:	f003 0310 	and.w	r3, r3, #16
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d102      	bne.n	8012d94 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012d8e:	2305      	movs	r3, #5
 8012d90:	75fb      	strb	r3, [r7, #23]
 8012d92:	e01b      	b.n	8012dcc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	695b      	ldr	r3, [r3, #20]
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	8992      	ldrh	r2, [r2, #12]
 8012da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012da6:	fb02 f200 	mul.w	r2, r2, r0
 8012daa:	1a9b      	subs	r3, r3, r2
 8012dac:	440b      	add	r3, r1
 8012dae:	4619      	mov	r1, r3
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f7ff fd70 	bl	8012896 <ld_clust>
 8012db6:	4602      	mov	r2, r0
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	609a      	str	r2, [r3, #8]
 8012dbc:	e7aa      	b.n	8012d14 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012dbe:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012dc0:	e7a8      	b.n	8012d14 <follow_path+0x68>
			if (res != FR_OK) break;
 8012dc2:	bf00      	nop
 8012dc4:	e002      	b.n	8012dcc <follow_path+0x120>
				break;
 8012dc6:	bf00      	nop
 8012dc8:	e000      	b.n	8012dcc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012dca:	bf00      	nop
			}
		}
	}

	return res;
 8012dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3718      	adds	r7, #24
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012dd6:	b480      	push	{r7}
 8012dd8:	b087      	sub	sp, #28
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012dde:	f04f 33ff 	mov.w	r3, #4294967295
 8012de2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d031      	beq.n	8012e50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	617b      	str	r3, [r7, #20]
 8012df2:	e002      	b.n	8012dfa <get_ldnumber+0x24>
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	3301      	adds	r3, #1
 8012df8:	617b      	str	r3, [r7, #20]
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	2b20      	cmp	r3, #32
 8012e00:	d903      	bls.n	8012e0a <get_ldnumber+0x34>
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	2b3a      	cmp	r3, #58	; 0x3a
 8012e08:	d1f4      	bne.n	8012df4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	2b3a      	cmp	r3, #58	; 0x3a
 8012e10:	d11c      	bne.n	8012e4c <get_ldnumber+0x76>
			tp = *path;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	1c5a      	adds	r2, r3, #1
 8012e1c:	60fa      	str	r2, [r7, #12]
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	3b30      	subs	r3, #48	; 0x30
 8012e22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	2b09      	cmp	r3, #9
 8012e28:	d80e      	bhi.n	8012e48 <get_ldnumber+0x72>
 8012e2a:	68fa      	ldr	r2, [r7, #12]
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d10a      	bne.n	8012e48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d107      	bne.n	8012e48 <get_ldnumber+0x72>
					vol = (int)i;
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	3301      	adds	r3, #1
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	697a      	ldr	r2, [r7, #20]
 8012e46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	e002      	b.n	8012e52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012e50:	693b      	ldr	r3, [r7, #16]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	371c      	adds	r7, #28
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
	...

08012e60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	70da      	strb	r2, [r3, #3]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f04f 32ff 	mov.w	r2, #4294967295
 8012e76:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012e78:	6839      	ldr	r1, [r7, #0]
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f7fe ff8c 	bl	8011d98 <move_window>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <check_fs+0x2a>
 8012e86:	2304      	movs	r3, #4
 8012e88:	e038      	b.n	8012efc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	3338      	adds	r3, #56	; 0x38
 8012e8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fcd0 	bl	8011838 <ld_word>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d001      	beq.n	8012ea8 <check_fs+0x48>
 8012ea4:	2303      	movs	r3, #3
 8012ea6:	e029      	b.n	8012efc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012eae:	2be9      	cmp	r3, #233	; 0xe9
 8012eb0:	d009      	beq.n	8012ec6 <check_fs+0x66>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012eb8:	2beb      	cmp	r3, #235	; 0xeb
 8012eba:	d11e      	bne.n	8012efa <check_fs+0x9a>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012ec2:	2b90      	cmp	r3, #144	; 0x90
 8012ec4:	d119      	bne.n	8012efa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	3338      	adds	r3, #56	; 0x38
 8012eca:	3336      	adds	r3, #54	; 0x36
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7fe fccb 	bl	8011868 <ld_dword>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ed8:	4a0a      	ldr	r2, [pc, #40]	; (8012f04 <check_fs+0xa4>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d101      	bne.n	8012ee2 <check_fs+0x82>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	e00c      	b.n	8012efc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	3338      	adds	r3, #56	; 0x38
 8012ee6:	3352      	adds	r3, #82	; 0x52
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe fcbd 	bl	8011868 <ld_dword>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <check_fs+0xa8>)
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d101      	bne.n	8012efa <check_fs+0x9a>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	e000      	b.n	8012efc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012efa:	2302      	movs	r3, #2
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	00544146 	.word	0x00544146
 8012f08:	33544146 	.word	0x33544146

08012f0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b096      	sub	sp, #88	; 0x58
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	60b9      	str	r1, [r7, #8]
 8012f16:	4613      	mov	r3, r2
 8012f18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f7ff ff58 	bl	8012dd6 <get_ldnumber>
 8012f26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	da01      	bge.n	8012f32 <find_volume+0x26>
 8012f2e:	230b      	movs	r3, #11
 8012f30:	e268      	b.n	8013404 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012f32:	4ab0      	ldr	r2, [pc, #704]	; (80131f4 <find_volume+0x2e8>)
 8012f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d101      	bne.n	8012f46 <find_volume+0x3a>
 8012f42:	230c      	movs	r3, #12
 8012f44:	e25e      	b.n	8013404 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	f023 0301 	bic.w	r3, r3, #1
 8012f52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d01a      	beq.n	8012f92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5e:	785b      	ldrb	r3, [r3, #1]
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fe fbcb 	bl	80116fc <disk_status>
 8012f66:	4603      	mov	r3, r0
 8012f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f70:	f003 0301 	and.w	r3, r3, #1
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10c      	bne.n	8012f92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012f78:	79fb      	ldrb	r3, [r7, #7]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d007      	beq.n	8012f8e <find_volume+0x82>
 8012f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f82:	f003 0304 	and.w	r3, r3, #4
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d001      	beq.n	8012f8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012f8a:	230a      	movs	r3, #10
 8012f8c:	e23a      	b.n	8013404 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012f8e:	2300      	movs	r3, #0
 8012f90:	e238      	b.n	8013404 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f94:	2200      	movs	r2, #0
 8012f96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f9a:	b2da      	uxtb	r2, r3
 8012f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa2:	785b      	ldrb	r3, [r3, #1]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7fe fbc3 	bl	8011730 <disk_initialize>
 8012faa:	4603      	mov	r3, r0
 8012fac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fb4:	f003 0301 	and.w	r3, r3, #1
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d001      	beq.n	8012fc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	e221      	b.n	8013404 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012fc0:	79fb      	ldrb	r3, [r7, #7]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d007      	beq.n	8012fd6 <find_volume+0xca>
 8012fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fca:	f003 0304 	and.w	r3, r3, #4
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d001      	beq.n	8012fd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012fd2:	230a      	movs	r3, #10
 8012fd4:	e216      	b.n	8013404 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd8:	7858      	ldrb	r0, [r3, #1]
 8012fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fdc:	330c      	adds	r3, #12
 8012fde:	461a      	mov	r2, r3
 8012fe0:	2102      	movs	r1, #2
 8012fe2:	f7fe fc0b 	bl	80117fc <disk_ioctl>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d001      	beq.n	8012ff0 <find_volume+0xe4>
 8012fec:	2301      	movs	r3, #1
 8012fee:	e209      	b.n	8013404 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff2:	899b      	ldrh	r3, [r3, #12]
 8012ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ff8:	d80d      	bhi.n	8013016 <find_volume+0x10a>
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	899b      	ldrh	r3, [r3, #12]
 8012ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013002:	d308      	bcc.n	8013016 <find_volume+0x10a>
 8013004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013006:	899b      	ldrh	r3, [r3, #12]
 8013008:	461a      	mov	r2, r3
 801300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300c:	899b      	ldrh	r3, [r3, #12]
 801300e:	3b01      	subs	r3, #1
 8013010:	4013      	ands	r3, r2
 8013012:	2b00      	cmp	r3, #0
 8013014:	d001      	beq.n	801301a <find_volume+0x10e>
 8013016:	2301      	movs	r3, #1
 8013018:	e1f4      	b.n	8013404 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801301e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013022:	f7ff ff1d 	bl	8012e60 <check_fs>
 8013026:	4603      	mov	r3, r0
 8013028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801302c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013030:	2b02      	cmp	r3, #2
 8013032:	d14b      	bne.n	80130cc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013034:	2300      	movs	r3, #0
 8013036:	643b      	str	r3, [r7, #64]	; 0x40
 8013038:	e01f      	b.n	801307a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013042:	011b      	lsls	r3, r3, #4
 8013044:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013048:	4413      	add	r3, r2
 801304a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304e:	3304      	adds	r3, #4
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d006      	beq.n	8013064 <find_volume+0x158>
 8013056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013058:	3308      	adds	r3, #8
 801305a:	4618      	mov	r0, r3
 801305c:	f7fe fc04 	bl	8011868 <ld_dword>
 8013060:	4602      	mov	r2, r0
 8013062:	e000      	b.n	8013066 <find_volume+0x15a>
 8013064:	2200      	movs	r2, #0
 8013066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801306e:	440b      	add	r3, r1
 8013070:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013076:	3301      	adds	r3, #1
 8013078:	643b      	str	r3, [r7, #64]	; 0x40
 801307a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801307c:	2b03      	cmp	r3, #3
 801307e:	d9dc      	bls.n	801303a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013080:	2300      	movs	r3, #0
 8013082:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013086:	2b00      	cmp	r3, #0
 8013088:	d002      	beq.n	8013090 <find_volume+0x184>
 801308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801308c:	3b01      	subs	r3, #1
 801308e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013098:	4413      	add	r3, r2
 801309a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801309e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80130a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d005      	beq.n	80130b2 <find_volume+0x1a6>
 80130a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80130a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130aa:	f7ff fed9 	bl	8012e60 <check_fs>
 80130ae:	4603      	mov	r3, r0
 80130b0:	e000      	b.n	80130b4 <find_volume+0x1a8>
 80130b2:	2303      	movs	r3, #3
 80130b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80130b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d905      	bls.n	80130cc <find_volume+0x1c0>
 80130c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130c2:	3301      	adds	r3, #1
 80130c4:	643b      	str	r3, [r7, #64]	; 0x40
 80130c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130c8:	2b03      	cmp	r3, #3
 80130ca:	d9e1      	bls.n	8013090 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80130cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130d0:	2b04      	cmp	r3, #4
 80130d2:	d101      	bne.n	80130d8 <find_volume+0x1cc>
 80130d4:	2301      	movs	r3, #1
 80130d6:	e195      	b.n	8013404 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80130d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d901      	bls.n	80130e4 <find_volume+0x1d8>
 80130e0:	230d      	movs	r3, #13
 80130e2:	e18f      	b.n	8013404 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	3338      	adds	r3, #56	; 0x38
 80130e8:	330b      	adds	r3, #11
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fe fba4 	bl	8011838 <ld_word>
 80130f0:	4603      	mov	r3, r0
 80130f2:	461a      	mov	r2, r3
 80130f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f6:	899b      	ldrh	r3, [r3, #12]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d001      	beq.n	8013100 <find_volume+0x1f4>
 80130fc:	230d      	movs	r3, #13
 80130fe:	e181      	b.n	8013404 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013102:	3338      	adds	r3, #56	; 0x38
 8013104:	3316      	adds	r3, #22
 8013106:	4618      	mov	r0, r3
 8013108:	f7fe fb96 	bl	8011838 <ld_word>
 801310c:	4603      	mov	r3, r0
 801310e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013112:	2b00      	cmp	r3, #0
 8013114:	d106      	bne.n	8013124 <find_volume+0x218>
 8013116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013118:	3338      	adds	r3, #56	; 0x38
 801311a:	3324      	adds	r3, #36	; 0x24
 801311c:	4618      	mov	r0, r3
 801311e:	f7fe fba3 	bl	8011868 <ld_dword>
 8013122:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013128:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013132:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	789b      	ldrb	r3, [r3, #2]
 8013138:	2b01      	cmp	r3, #1
 801313a:	d005      	beq.n	8013148 <find_volume+0x23c>
 801313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313e:	789b      	ldrb	r3, [r3, #2]
 8013140:	2b02      	cmp	r3, #2
 8013142:	d001      	beq.n	8013148 <find_volume+0x23c>
 8013144:	230d      	movs	r3, #13
 8013146:	e15d      	b.n	8013404 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314a:	789b      	ldrb	r3, [r3, #2]
 801314c:	461a      	mov	r2, r3
 801314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013150:	fb02 f303 	mul.w	r3, r2, r3
 8013154:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801315c:	b29a      	uxth	r2, r3
 801315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013160:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013164:	895b      	ldrh	r3, [r3, #10]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d008      	beq.n	801317c <find_volume+0x270>
 801316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316c:	895b      	ldrh	r3, [r3, #10]
 801316e:	461a      	mov	r2, r3
 8013170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013172:	895b      	ldrh	r3, [r3, #10]
 8013174:	3b01      	subs	r3, #1
 8013176:	4013      	ands	r3, r2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d001      	beq.n	8013180 <find_volume+0x274>
 801317c:	230d      	movs	r3, #13
 801317e:	e141      	b.n	8013404 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013182:	3338      	adds	r3, #56	; 0x38
 8013184:	3311      	adds	r3, #17
 8013186:	4618      	mov	r0, r3
 8013188:	f7fe fb56 	bl	8011838 <ld_word>
 801318c:	4603      	mov	r3, r0
 801318e:	461a      	mov	r2, r3
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013196:	891b      	ldrh	r3, [r3, #8]
 8013198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801319a:	8992      	ldrh	r2, [r2, #12]
 801319c:	0952      	lsrs	r2, r2, #5
 801319e:	b292      	uxth	r2, r2
 80131a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80131a4:	fb02 f201 	mul.w	r2, r2, r1
 80131a8:	1a9b      	subs	r3, r3, r2
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d001      	beq.n	80131b4 <find_volume+0x2a8>
 80131b0:	230d      	movs	r3, #13
 80131b2:	e127      	b.n	8013404 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80131b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b6:	3338      	adds	r3, #56	; 0x38
 80131b8:	3313      	adds	r3, #19
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fe fb3c 	bl	8011838 <ld_word>
 80131c0:	4603      	mov	r3, r0
 80131c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80131c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d106      	bne.n	80131d8 <find_volume+0x2cc>
 80131ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131cc:	3338      	adds	r3, #56	; 0x38
 80131ce:	3320      	adds	r3, #32
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fe fb49 	bl	8011868 <ld_dword>
 80131d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80131d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131da:	3338      	adds	r3, #56	; 0x38
 80131dc:	330e      	adds	r3, #14
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fe fb2a 	bl	8011838 <ld_word>
 80131e4:	4603      	mov	r3, r0
 80131e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80131e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d104      	bne.n	80131f8 <find_volume+0x2ec>
 80131ee:	230d      	movs	r3, #13
 80131f0:	e108      	b.n	8013404 <find_volume+0x4f8>
 80131f2:	bf00      	nop
 80131f4:	200452d4 	.word	0x200452d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80131f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80131fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131fc:	4413      	add	r3, r2
 80131fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013200:	8911      	ldrh	r1, [r2, #8]
 8013202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013204:	8992      	ldrh	r2, [r2, #12]
 8013206:	0952      	lsrs	r2, r2, #5
 8013208:	b292      	uxth	r2, r2
 801320a:	fbb1 f2f2 	udiv	r2, r1, r2
 801320e:	b292      	uxth	r2, r2
 8013210:	4413      	add	r3, r2
 8013212:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013218:	429a      	cmp	r2, r3
 801321a:	d201      	bcs.n	8013220 <find_volume+0x314>
 801321c:	230d      	movs	r3, #13
 801321e:	e0f1      	b.n	8013404 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013228:	8952      	ldrh	r2, [r2, #10]
 801322a:	fbb3 f3f2 	udiv	r3, r3, r2
 801322e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	2b00      	cmp	r3, #0
 8013234:	d101      	bne.n	801323a <find_volume+0x32e>
 8013236:	230d      	movs	r3, #13
 8013238:	e0e4      	b.n	8013404 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801323a:	2303      	movs	r3, #3
 801323c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013242:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013246:	4293      	cmp	r3, r2
 8013248:	d802      	bhi.n	8013250 <find_volume+0x344>
 801324a:	2302      	movs	r3, #2
 801324c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013252:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013256:	4293      	cmp	r3, r2
 8013258:	d802      	bhi.n	8013260 <find_volume+0x354>
 801325a:	2301      	movs	r3, #1
 801325c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013262:	1c9a      	adds	r2, r3, #2
 8013264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013266:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801326c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801326e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013272:	441a      	add	r2, r3
 8013274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013276:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327c:	441a      	add	r2, r3
 801327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013280:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8013282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013286:	2b03      	cmp	r3, #3
 8013288:	d11e      	bne.n	80132c8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328c:	3338      	adds	r3, #56	; 0x38
 801328e:	332a      	adds	r3, #42	; 0x2a
 8013290:	4618      	mov	r0, r3
 8013292:	f7fe fad1 	bl	8011838 <ld_word>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <find_volume+0x394>
 801329c:	230d      	movs	r3, #13
 801329e:	e0b1      	b.n	8013404 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80132a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a2:	891b      	ldrh	r3, [r3, #8]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d001      	beq.n	80132ac <find_volume+0x3a0>
 80132a8:	230d      	movs	r3, #13
 80132aa:	e0ab      	b.n	8013404 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80132ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ae:	3338      	adds	r3, #56	; 0x38
 80132b0:	332c      	adds	r3, #44	; 0x2c
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fe fad8 	bl	8011868 <ld_dword>
 80132b8:	4602      	mov	r2, r0
 80132ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80132be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c0:	69db      	ldr	r3, [r3, #28]
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	647b      	str	r3, [r7, #68]	; 0x44
 80132c6:	e01f      	b.n	8013308 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80132c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ca:	891b      	ldrh	r3, [r3, #8]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d101      	bne.n	80132d4 <find_volume+0x3c8>
 80132d0:	230d      	movs	r3, #13
 80132d2:	e097      	b.n	8013404 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80132d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80132d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132da:	441a      	add	r2, r3
 80132dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132de:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80132e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d103      	bne.n	80132f0 <find_volume+0x3e4>
 80132e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ea:	69db      	ldr	r3, [r3, #28]
 80132ec:	005b      	lsls	r3, r3, #1
 80132ee:	e00a      	b.n	8013306 <find_volume+0x3fa>
 80132f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f2:	69da      	ldr	r2, [r3, #28]
 80132f4:	4613      	mov	r3, r2
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	4413      	add	r3, r2
 80132fa:	085a      	lsrs	r2, r3, #1
 80132fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fe:	69db      	ldr	r3, [r3, #28]
 8013300:	f003 0301 	and.w	r3, r3, #1
 8013304:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013306:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330a:	6a1a      	ldr	r2, [r3, #32]
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	899b      	ldrh	r3, [r3, #12]
 8013310:	4619      	mov	r1, r3
 8013312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013314:	440b      	add	r3, r1
 8013316:	3b01      	subs	r3, #1
 8013318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801331a:	8989      	ldrh	r1, [r1, #12]
 801331c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013320:	429a      	cmp	r2, r3
 8013322:	d201      	bcs.n	8013328 <find_volume+0x41c>
 8013324:	230d      	movs	r3, #13
 8013326:	e06d      	b.n	8013404 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801332a:	f04f 32ff 	mov.w	r2, #4294967295
 801332e:	615a      	str	r2, [r3, #20]
 8013330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013332:	695a      	ldr	r2, [r3, #20]
 8013334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013336:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333a:	2280      	movs	r2, #128	; 0x80
 801333c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801333e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013342:	2b03      	cmp	r3, #3
 8013344:	d149      	bne.n	80133da <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013348:	3338      	adds	r3, #56	; 0x38
 801334a:	3330      	adds	r3, #48	; 0x30
 801334c:	4618      	mov	r0, r3
 801334e:	f7fe fa73 	bl	8011838 <ld_word>
 8013352:	4603      	mov	r3, r0
 8013354:	2b01      	cmp	r3, #1
 8013356:	d140      	bne.n	80133da <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801335a:	3301      	adds	r3, #1
 801335c:	4619      	mov	r1, r3
 801335e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013360:	f7fe fd1a 	bl	8011d98 <move_window>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d137      	bne.n	80133da <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336c:	2200      	movs	r2, #0
 801336e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013372:	3338      	adds	r3, #56	; 0x38
 8013374:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013378:	4618      	mov	r0, r3
 801337a:	f7fe fa5d 	bl	8011838 <ld_word>
 801337e:	4603      	mov	r3, r0
 8013380:	461a      	mov	r2, r3
 8013382:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013386:	429a      	cmp	r2, r3
 8013388:	d127      	bne.n	80133da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801338c:	3338      	adds	r3, #56	; 0x38
 801338e:	4618      	mov	r0, r3
 8013390:	f7fe fa6a 	bl	8011868 <ld_dword>
 8013394:	4602      	mov	r2, r0
 8013396:	4b1d      	ldr	r3, [pc, #116]	; (801340c <find_volume+0x500>)
 8013398:	429a      	cmp	r2, r3
 801339a:	d11e      	bne.n	80133da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801339e:	3338      	adds	r3, #56	; 0x38
 80133a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fe fa5f 	bl	8011868 <ld_dword>
 80133aa:	4602      	mov	r2, r0
 80133ac:	4b18      	ldr	r3, [pc, #96]	; (8013410 <find_volume+0x504>)
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d113      	bne.n	80133da <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80133b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b4:	3338      	adds	r3, #56	; 0x38
 80133b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7fe fa54 	bl	8011868 <ld_dword>
 80133c0:	4602      	mov	r2, r0
 80133c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80133c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c8:	3338      	adds	r3, #56	; 0x38
 80133ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe fa4a 	bl	8011868 <ld_dword>
 80133d4:	4602      	mov	r2, r0
 80133d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80133da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80133e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80133e2:	4b0c      	ldr	r3, [pc, #48]	; (8013414 <find_volume+0x508>)
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	3301      	adds	r3, #1
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	4b0a      	ldr	r3, [pc, #40]	; (8013414 <find_volume+0x508>)
 80133ec:	801a      	strh	r2, [r3, #0]
 80133ee:	4b09      	ldr	r3, [pc, #36]	; (8013414 <find_volume+0x508>)
 80133f0:	881a      	ldrh	r2, [r3, #0]
 80133f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80133f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f8:	2200      	movs	r2, #0
 80133fa:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80133fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133fe:	f7fe fc63 	bl	8011cc8 <clear_lock>
#endif
	return FR_OK;
 8013402:	2300      	movs	r3, #0
}
 8013404:	4618      	mov	r0, r3
 8013406:	3758      	adds	r7, #88	; 0x58
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	41615252 	.word	0x41615252
 8013410:	61417272 	.word	0x61417272
 8013414:	200452d8 	.word	0x200452d8

08013418 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013422:	2309      	movs	r3, #9
 8013424:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d01c      	beq.n	8013466 <validate+0x4e>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d018      	beq.n	8013466 <validate+0x4e>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d013      	beq.n	8013466 <validate+0x4e>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	889a      	ldrh	r2, [r3, #4]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	88db      	ldrh	r3, [r3, #6]
 8013448:	429a      	cmp	r2, r3
 801344a:	d10c      	bne.n	8013466 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	785b      	ldrb	r3, [r3, #1]
 8013452:	4618      	mov	r0, r3
 8013454:	f7fe f952 	bl	80116fc <disk_status>
 8013458:	4603      	mov	r3, r0
 801345a:	f003 0301 	and.w	r3, r3, #1
 801345e:	2b00      	cmp	r3, #0
 8013460:	d101      	bne.n	8013466 <validate+0x4e>
			res = FR_OK;
 8013462:	2300      	movs	r3, #0
 8013464:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013466:	7bfb      	ldrb	r3, [r7, #15]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d102      	bne.n	8013472 <validate+0x5a>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	e000      	b.n	8013474 <validate+0x5c>
 8013472:	2300      	movs	r3, #0
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	6013      	str	r3, [r2, #0]
	return res;
 8013478:	7bfb      	ldrb	r3, [r7, #15]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
	...

08013484 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b088      	sub	sp, #32
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	4613      	mov	r3, r2
 8013490:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013496:	f107 0310 	add.w	r3, r7, #16
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff fc9b 	bl	8012dd6 <get_ldnumber>
 80134a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	da01      	bge.n	80134ac <f_mount+0x28>
 80134a8:	230b      	movs	r3, #11
 80134aa:	e02b      	b.n	8013504 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80134ac:	4a17      	ldr	r2, [pc, #92]	; (801350c <f_mount+0x88>)
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d005      	beq.n	80134c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80134bc:	69b8      	ldr	r0, [r7, #24]
 80134be:	f7fe fc03 	bl	8011cc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	2200      	movs	r2, #0
 80134c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d002      	beq.n	80134d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2200      	movs	r2, #0
 80134d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	490d      	ldr	r1, [pc, #52]	; (801350c <f_mount+0x88>)
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <f_mount+0x66>
 80134e4:	79fb      	ldrb	r3, [r7, #7]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d001      	beq.n	80134ee <f_mount+0x6a>
 80134ea:	2300      	movs	r3, #0
 80134ec:	e00a      	b.n	8013504 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80134ee:	f107 010c 	add.w	r1, r7, #12
 80134f2:	f107 0308 	add.w	r3, r7, #8
 80134f6:	2200      	movs	r2, #0
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fd07 	bl	8012f0c <find_volume>
 80134fe:	4603      	mov	r3, r0
 8013500:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013502:	7dfb      	ldrb	r3, [r7, #23]
}
 8013504:	4618      	mov	r0, r3
 8013506:	3720      	adds	r7, #32
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	200452d4 	.word	0x200452d4

08013510 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b098      	sub	sp, #96	; 0x60
 8013514:	af00      	add	r7, sp, #0
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	4613      	mov	r3, r2
 801351c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d101      	bne.n	8013528 <f_open+0x18>
 8013524:	2309      	movs	r3, #9
 8013526:	e1ba      	b.n	801389e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013528:	79fb      	ldrb	r3, [r7, #7]
 801352a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801352e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013530:	79fa      	ldrb	r2, [r7, #7]
 8013532:	f107 0110 	add.w	r1, r7, #16
 8013536:	f107 0308 	add.w	r3, r7, #8
 801353a:	4618      	mov	r0, r3
 801353c:	f7ff fce6 	bl	8012f0c <find_volume>
 8013540:	4603      	mov	r3, r0
 8013542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801354a:	2b00      	cmp	r3, #0
 801354c:	f040 819e 	bne.w	801388c <f_open+0x37c>
		dj.obj.fs = fs;
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	f107 0314 	add.w	r3, r7, #20
 801355a:	4611      	mov	r1, r2
 801355c:	4618      	mov	r0, r3
 801355e:	f7ff fba5 	bl	8012cac <follow_path>
 8013562:	4603      	mov	r3, r0
 8013564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801356c:	2b00      	cmp	r3, #0
 801356e:	d11a      	bne.n	80135a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013570:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013574:	b25b      	sxtb	r3, r3
 8013576:	2b00      	cmp	r3, #0
 8013578:	da03      	bge.n	8013582 <f_open+0x72>
				res = FR_INVALID_NAME;
 801357a:	2306      	movs	r3, #6
 801357c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013580:	e011      	b.n	80135a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013582:	79fb      	ldrb	r3, [r7, #7]
 8013584:	f023 0301 	bic.w	r3, r3, #1
 8013588:	2b00      	cmp	r3, #0
 801358a:	bf14      	ite	ne
 801358c:	2301      	movne	r3, #1
 801358e:	2300      	moveq	r3, #0
 8013590:	b2db      	uxtb	r3, r3
 8013592:	461a      	mov	r2, r3
 8013594:	f107 0314 	add.w	r3, r7, #20
 8013598:	4611      	mov	r1, r2
 801359a:	4618      	mov	r0, r3
 801359c:	f7fe fa4c 	bl	8011a38 <chk_lock>
 80135a0:	4603      	mov	r3, r0
 80135a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	f003 031c 	and.w	r3, r3, #28
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d07e      	beq.n	80136ae <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80135b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d017      	beq.n	80135e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80135b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135bc:	2b04      	cmp	r3, #4
 80135be:	d10e      	bne.n	80135de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80135c0:	f7fe fa96 	bl	8011af0 <enq_lock>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d006      	beq.n	80135d8 <f_open+0xc8>
 80135ca:	f107 0314 	add.w	r3, r7, #20
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff fa52 	bl	8012a78 <dir_register>
 80135d4:	4603      	mov	r3, r0
 80135d6:	e000      	b.n	80135da <f_open+0xca>
 80135d8:	2312      	movs	r3, #18
 80135da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80135de:	79fb      	ldrb	r3, [r7, #7]
 80135e0:	f043 0308 	orr.w	r3, r3, #8
 80135e4:	71fb      	strb	r3, [r7, #7]
 80135e6:	e010      	b.n	801360a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80135e8:	7ebb      	ldrb	r3, [r7, #26]
 80135ea:	f003 0311 	and.w	r3, r3, #17
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d003      	beq.n	80135fa <f_open+0xea>
					res = FR_DENIED;
 80135f2:	2307      	movs	r3, #7
 80135f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135f8:	e007      	b.n	801360a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80135fa:	79fb      	ldrb	r3, [r7, #7]
 80135fc:	f003 0304 	and.w	r3, r3, #4
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <f_open+0xfa>
 8013604:	2308      	movs	r3, #8
 8013606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801360a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801360e:	2b00      	cmp	r3, #0
 8013610:	d167      	bne.n	80136e2 <f_open+0x1d2>
 8013612:	79fb      	ldrb	r3, [r7, #7]
 8013614:	f003 0308 	and.w	r3, r3, #8
 8013618:	2b00      	cmp	r3, #0
 801361a:	d062      	beq.n	80136e2 <f_open+0x1d2>
				dw = GET_FATTIME();
 801361c:	4ba2      	ldr	r3, [pc, #648]	; (80138a8 <f_open+0x398>)
 801361e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013622:	330e      	adds	r3, #14
 8013624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013626:	4618      	mov	r0, r3
 8013628:	f7fe f95c 	bl	80118e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801362e:	3316      	adds	r3, #22
 8013630:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013632:	4618      	mov	r0, r3
 8013634:	f7fe f956 	bl	80118e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801363a:	330b      	adds	r3, #11
 801363c:	2220      	movs	r2, #32
 801363e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013644:	4611      	mov	r1, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f7ff f925 	bl	8012896 <ld_clust>
 801364c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013652:	2200      	movs	r2, #0
 8013654:	4618      	mov	r0, r3
 8013656:	f7ff f93d 	bl	80128d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801365c:	331c      	adds	r3, #28
 801365e:	2100      	movs	r1, #0
 8013660:	4618      	mov	r0, r3
 8013662:	f7fe f93f 	bl	80118e4 <st_dword>
					fs->wflag = 1;
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	2201      	movs	r2, #1
 801366a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801366c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801366e:	2b00      	cmp	r3, #0
 8013670:	d037      	beq.n	80136e2 <f_open+0x1d2>
						dw = fs->winsect;
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013676:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013678:	f107 0314 	add.w	r3, r7, #20
 801367c:	2200      	movs	r2, #0
 801367e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013680:	4618      	mov	r0, r3
 8013682:	f7fe fe2d 	bl	80122e0 <remove_chain>
 8013686:	4603      	mov	r3, r0
 8013688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801368c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013690:	2b00      	cmp	r3, #0
 8013692:	d126      	bne.n	80136e2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013698:	4618      	mov	r0, r3
 801369a:	f7fe fb7d 	bl	8011d98 <move_window>
 801369e:	4603      	mov	r3, r0
 80136a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80136a8:	3a01      	subs	r2, #1
 80136aa:	611a      	str	r2, [r3, #16]
 80136ac:	e019      	b.n	80136e2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80136ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d115      	bne.n	80136e2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80136b6:	7ebb      	ldrb	r3, [r7, #26]
 80136b8:	f003 0310 	and.w	r3, r3, #16
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d003      	beq.n	80136c8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80136c0:	2304      	movs	r3, #4
 80136c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80136c6:	e00c      	b.n	80136e2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80136c8:	79fb      	ldrb	r3, [r7, #7]
 80136ca:	f003 0302 	and.w	r3, r3, #2
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d007      	beq.n	80136e2 <f_open+0x1d2>
 80136d2:	7ebb      	ldrb	r3, [r7, #26]
 80136d4:	f003 0301 	and.w	r3, r3, #1
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d002      	beq.n	80136e2 <f_open+0x1d2>
						res = FR_DENIED;
 80136dc:	2307      	movs	r3, #7
 80136de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80136e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d128      	bne.n	801373c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80136ea:	79fb      	ldrb	r3, [r7, #7]
 80136ec:	f003 0308 	and.w	r3, r3, #8
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d003      	beq.n	80136fc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80136f4:	79fb      	ldrb	r3, [r7, #7]
 80136f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136fa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801370a:	79fb      	ldrb	r3, [r7, #7]
 801370c:	f023 0301 	bic.w	r3, r3, #1
 8013710:	2b00      	cmp	r3, #0
 8013712:	bf14      	ite	ne
 8013714:	2301      	movne	r3, #1
 8013716:	2300      	moveq	r3, #0
 8013718:	b2db      	uxtb	r3, r3
 801371a:	461a      	mov	r2, r3
 801371c:	f107 0314 	add.w	r3, r7, #20
 8013720:	4611      	mov	r1, r2
 8013722:	4618      	mov	r0, r3
 8013724:	f7fe fa06 	bl	8011b34 <inc_lock>
 8013728:	4602      	mov	r2, r0
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	691b      	ldr	r3, [r3, #16]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d102      	bne.n	801373c <f_open+0x22c>
 8013736:	2302      	movs	r3, #2
 8013738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801373c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013740:	2b00      	cmp	r3, #0
 8013742:	f040 80a3 	bne.w	801388c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801374a:	4611      	mov	r1, r2
 801374c:	4618      	mov	r0, r3
 801374e:	f7ff f8a2 	bl	8012896 <ld_clust>
 8013752:	4602      	mov	r2, r0
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801375a:	331c      	adds	r3, #28
 801375c:	4618      	mov	r0, r3
 801375e:	f7fe f883 	bl	8011868 <ld_dword>
 8013762:	4602      	mov	r2, r0
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2200      	movs	r2, #0
 801376c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801376e:	693a      	ldr	r2, [r7, #16]
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	88da      	ldrh	r2, [r3, #6]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	79fa      	ldrb	r2, [r7, #7]
 8013780:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2200      	movs	r2, #0
 8013786:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	2200      	movs	r2, #0
 801378c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2200      	movs	r2, #0
 8013792:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	3330      	adds	r3, #48	; 0x30
 8013798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801379c:	2100      	movs	r1, #0
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fe f8ed 	bl	801197e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80137a4:	79fb      	ldrb	r3, [r7, #7]
 80137a6:	f003 0320 	and.w	r3, r3, #32
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d06e      	beq.n	801388c <f_open+0x37c>
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d06a      	beq.n	801388c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	68da      	ldr	r2, [r3, #12]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	895b      	ldrh	r3, [r3, #10]
 80137c2:	461a      	mov	r2, r3
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	899b      	ldrh	r3, [r3, #12]
 80137c8:	fb03 f302 	mul.w	r3, r3, r2
 80137cc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	657b      	str	r3, [r7, #84]	; 0x54
 80137da:	e016      	b.n	801380a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fe fb96 	bl	8011f12 <get_fat>
 80137e6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80137e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137ea:	2b01      	cmp	r3, #1
 80137ec:	d802      	bhi.n	80137f4 <f_open+0x2e4>
 80137ee:	2302      	movs	r3, #2
 80137f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80137f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137fa:	d102      	bne.n	8013802 <f_open+0x2f2>
 80137fc:	2301      	movs	r3, #1
 80137fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013802:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013806:	1ad3      	subs	r3, r2, r3
 8013808:	657b      	str	r3, [r7, #84]	; 0x54
 801380a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801380e:	2b00      	cmp	r3, #0
 8013810:	d103      	bne.n	801381a <f_open+0x30a>
 8013812:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013816:	429a      	cmp	r2, r3
 8013818:	d8e0      	bhi.n	80137dc <f_open+0x2cc>
				}
				fp->clust = clst;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801381e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013824:	2b00      	cmp	r3, #0
 8013826:	d131      	bne.n	801388c <f_open+0x37c>
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	899b      	ldrh	r3, [r3, #12]
 801382c:	461a      	mov	r2, r3
 801382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013830:	fbb3 f1f2 	udiv	r1, r3, r2
 8013834:	fb02 f201 	mul.w	r2, r2, r1
 8013838:	1a9b      	subs	r3, r3, r2
 801383a:	2b00      	cmp	r3, #0
 801383c:	d026      	beq.n	801388c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013842:	4618      	mov	r0, r3
 8013844:	f7fe fb46 	bl	8011ed4 <clust2sect>
 8013848:	6478      	str	r0, [r7, #68]	; 0x44
 801384a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801384c:	2b00      	cmp	r3, #0
 801384e:	d103      	bne.n	8013858 <f_open+0x348>
						res = FR_INT_ERR;
 8013850:	2302      	movs	r3, #2
 8013852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013856:	e019      	b.n	801388c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	899b      	ldrh	r3, [r3, #12]
 801385c:	461a      	mov	r2, r3
 801385e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013860:	fbb3 f2f2 	udiv	r2, r3, r2
 8013864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013866:	441a      	add	r2, r3
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	7858      	ldrb	r0, [r3, #1]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	6a1a      	ldr	r2, [r3, #32]
 801387a:	2301      	movs	r3, #1
 801387c:	f7fd ff7e 	bl	801177c <disk_read>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <f_open+0x37c>
 8013886:	2301      	movs	r3, #1
 8013888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801388c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013890:	2b00      	cmp	r3, #0
 8013892:	d002      	beq.n	801389a <f_open+0x38a>
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2200      	movs	r2, #0
 8013898:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801389a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3760      	adds	r7, #96	; 0x60
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	274a0000 	.word	0x274a0000

080138ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b08e      	sub	sp, #56	; 0x38
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	607a      	str	r2, [r7, #4]
 80138b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	2200      	movs	r2, #0
 80138c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f107 0214 	add.w	r2, r7, #20
 80138ca:	4611      	mov	r1, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7ff fda3 	bl	8013418 <validate>
 80138d2:	4603      	mov	r3, r0
 80138d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80138d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d107      	bne.n	80138f0 <f_read+0x44>
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	7d5b      	ldrb	r3, [r3, #21]
 80138e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80138e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d002      	beq.n	80138f6 <f_read+0x4a>
 80138f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138f4:	e135      	b.n	8013b62 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	7d1b      	ldrb	r3, [r3, #20]
 80138fa:	f003 0301 	and.w	r3, r3, #1
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d101      	bne.n	8013906 <f_read+0x5a>
 8013902:	2307      	movs	r3, #7
 8013904:	e12d      	b.n	8013b62 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	68da      	ldr	r2, [r3, #12]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	699b      	ldr	r3, [r3, #24]
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	6a3b      	ldr	r3, [r7, #32]
 8013916:	429a      	cmp	r2, r3
 8013918:	f240 811e 	bls.w	8013b58 <f_read+0x2ac>
 801391c:	6a3b      	ldr	r3, [r7, #32]
 801391e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013920:	e11a      	b.n	8013b58 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	699b      	ldr	r3, [r3, #24]
 8013926:	697a      	ldr	r2, [r7, #20]
 8013928:	8992      	ldrh	r2, [r2, #12]
 801392a:	fbb3 f1f2 	udiv	r1, r3, r2
 801392e:	fb02 f201 	mul.w	r2, r2, r1
 8013932:	1a9b      	subs	r3, r3, r2
 8013934:	2b00      	cmp	r3, #0
 8013936:	f040 80d5 	bne.w	8013ae4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	699b      	ldr	r3, [r3, #24]
 801393e:	697a      	ldr	r2, [r7, #20]
 8013940:	8992      	ldrh	r2, [r2, #12]
 8013942:	fbb3 f3f2 	udiv	r3, r3, r2
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	8952      	ldrh	r2, [r2, #10]
 801394a:	3a01      	subs	r2, #1
 801394c:	4013      	ands	r3, r2
 801394e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d12f      	bne.n	80139b6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d103      	bne.n	8013966 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	633b      	str	r3, [r7, #48]	; 0x30
 8013964:	e013      	b.n	801398e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801396a:	2b00      	cmp	r3, #0
 801396c:	d007      	beq.n	801397e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	699b      	ldr	r3, [r3, #24]
 8013972:	4619      	mov	r1, r3
 8013974:	68f8      	ldr	r0, [r7, #12]
 8013976:	f7fe fdb0 	bl	80124da <clmt_clust>
 801397a:	6338      	str	r0, [r7, #48]	; 0x30
 801397c:	e007      	b.n	801398e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	69db      	ldr	r3, [r3, #28]
 8013984:	4619      	mov	r1, r3
 8013986:	4610      	mov	r0, r2
 8013988:	f7fe fac3 	bl	8011f12 <get_fat>
 801398c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013990:	2b01      	cmp	r3, #1
 8013992:	d804      	bhi.n	801399e <f_read+0xf2>
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2202      	movs	r2, #2
 8013998:	755a      	strb	r2, [r3, #21]
 801399a:	2302      	movs	r3, #2
 801399c:	e0e1      	b.n	8013b62 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139a4:	d104      	bne.n	80139b0 <f_read+0x104>
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2201      	movs	r2, #1
 80139aa:	755a      	strb	r2, [r3, #21]
 80139ac:	2301      	movs	r3, #1
 80139ae:	e0d8      	b.n	8013b62 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80139b6:	697a      	ldr	r2, [r7, #20]
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	69db      	ldr	r3, [r3, #28]
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7fe fa88 	bl	8011ed4 <clust2sect>
 80139c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d104      	bne.n	80139d6 <f_read+0x12a>
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2202      	movs	r2, #2
 80139d0:	755a      	strb	r2, [r3, #21]
 80139d2:	2302      	movs	r3, #2
 80139d4:	e0c5      	b.n	8013b62 <f_read+0x2b6>
			sect += csect;
 80139d6:	69ba      	ldr	r2, [r7, #24]
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	4413      	add	r3, r2
 80139dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	899b      	ldrh	r3, [r3, #12]
 80139e2:	461a      	mov	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80139ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80139ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d041      	beq.n	8013a76 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80139f2:	69fa      	ldr	r2, [r7, #28]
 80139f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f6:	4413      	add	r3, r2
 80139f8:	697a      	ldr	r2, [r7, #20]
 80139fa:	8952      	ldrh	r2, [r2, #10]
 80139fc:	4293      	cmp	r3, r2
 80139fe:	d905      	bls.n	8013a0c <f_read+0x160>
					cc = fs->csize - csect;
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	895b      	ldrh	r3, [r3, #10]
 8013a04:	461a      	mov	r2, r3
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	1ad3      	subs	r3, r2, r3
 8013a0a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	7858      	ldrb	r0, [r3, #1]
 8013a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a12:	69ba      	ldr	r2, [r7, #24]
 8013a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a16:	f7fd feb1 	bl	801177c <disk_read>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d004      	beq.n	8013a2a <f_read+0x17e>
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2201      	movs	r2, #1
 8013a24:	755a      	strb	r2, [r3, #21]
 8013a26:	2301      	movs	r3, #1
 8013a28:	e09b      	b.n	8013b62 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	7d1b      	ldrb	r3, [r3, #20]
 8013a2e:	b25b      	sxtb	r3, r3
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	da18      	bge.n	8013a66 <f_read+0x1ba>
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	6a1a      	ldr	r2, [r3, #32]
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d911      	bls.n	8013a66 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6a1a      	ldr	r2, [r3, #32]
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	1ad3      	subs	r3, r2, r3
 8013a4a:	697a      	ldr	r2, [r7, #20]
 8013a4c:	8992      	ldrh	r2, [r2, #12]
 8013a4e:	fb02 f303 	mul.w	r3, r2, r3
 8013a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a54:	18d0      	adds	r0, r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	899b      	ldrh	r3, [r3, #12]
 8013a60:	461a      	mov	r2, r3
 8013a62:	f7fd ff6b 	bl	801193c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	899b      	ldrh	r3, [r3, #12]
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6e:	fb02 f303 	mul.w	r3, r2, r3
 8013a72:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013a74:	e05c      	b.n	8013b30 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	6a1b      	ldr	r3, [r3, #32]
 8013a7a:	69ba      	ldr	r2, [r7, #24]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d02e      	beq.n	8013ade <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	7d1b      	ldrb	r3, [r3, #20]
 8013a84:	b25b      	sxtb	r3, r3
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	da18      	bge.n	8013abc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	7858      	ldrb	r0, [r3, #1]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6a1a      	ldr	r2, [r3, #32]
 8013a98:	2301      	movs	r3, #1
 8013a9a:	f7fd fe8f 	bl	80117bc <disk_write>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d004      	beq.n	8013aae <f_read+0x202>
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	755a      	strb	r2, [r3, #21]
 8013aaa:	2301      	movs	r3, #1
 8013aac:	e059      	b.n	8013b62 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	7d1b      	ldrb	r3, [r3, #20]
 8013ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ab6:	b2da      	uxtb	r2, r3
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	7858      	ldrb	r0, [r3, #1]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	69ba      	ldr	r2, [r7, #24]
 8013aca:	f7fd fe57 	bl	801177c <disk_read>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d004      	beq.n	8013ade <f_read+0x232>
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	755a      	strb	r2, [r3, #21]
 8013ada:	2301      	movs	r3, #1
 8013adc:	e041      	b.n	8013b62 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	69ba      	ldr	r2, [r7, #24]
 8013ae2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	899b      	ldrh	r3, [r3, #12]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	699b      	ldr	r3, [r3, #24]
 8013aee:	697a      	ldr	r2, [r7, #20]
 8013af0:	8992      	ldrh	r2, [r2, #12]
 8013af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013af6:	fb02 f201 	mul.w	r2, r2, r1
 8013afa:	1a9b      	subs	r3, r3, r2
 8013afc:	1ac3      	subs	r3, r0, r3
 8013afe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d901      	bls.n	8013b0c <f_read+0x260>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	699b      	ldr	r3, [r3, #24]
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	8992      	ldrh	r2, [r2, #12]
 8013b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b1e:	fb02 f200 	mul.w	r2, r2, r0
 8013b22:	1a9b      	subs	r3, r3, r2
 8013b24:	440b      	add	r3, r1
 8013b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b28:	4619      	mov	r1, r3
 8013b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b2c:	f7fd ff06 	bl	801193c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b34:	4413      	add	r3, r2
 8013b36:	627b      	str	r3, [r7, #36]	; 0x24
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	699a      	ldr	r2, [r3, #24]
 8013b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3e:	441a      	add	r2, r3
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	619a      	str	r2, [r3, #24]
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b4a:	441a      	add	r2, r3
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	601a      	str	r2, [r3, #0]
 8013b50:	687a      	ldr	r2, [r7, #4]
 8013b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b54:	1ad3      	subs	r3, r2, r3
 8013b56:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f47f aee1 	bne.w	8013922 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013b60:	2300      	movs	r3, #0
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3738      	adds	r7, #56	; 0x38
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b08c      	sub	sp, #48	; 0x30
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	60f8      	str	r0, [r7, #12]
 8013b72:	60b9      	str	r1, [r7, #8]
 8013b74:	607a      	str	r2, [r7, #4]
 8013b76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f107 0210 	add.w	r2, r7, #16
 8013b88:	4611      	mov	r1, r2
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7ff fc44 	bl	8013418 <validate>
 8013b90:	4603      	mov	r3, r0
 8013b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d107      	bne.n	8013bae <f_write+0x44>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	7d5b      	ldrb	r3, [r3, #21]
 8013ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d002      	beq.n	8013bb4 <f_write+0x4a>
 8013bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bb2:	e16a      	b.n	8013e8a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	7d1b      	ldrb	r3, [r3, #20]
 8013bb8:	f003 0302 	and.w	r3, r3, #2
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <f_write+0x5a>
 8013bc0:	2307      	movs	r3, #7
 8013bc2:	e162      	b.n	8013e8a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	699a      	ldr	r2, [r3, #24]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	441a      	add	r2, r3
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	699b      	ldr	r3, [r3, #24]
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	f080 814c 	bcs.w	8013e6e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	699b      	ldr	r3, [r3, #24]
 8013bda:	43db      	mvns	r3, r3
 8013bdc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013bde:	e146      	b.n	8013e6e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	699b      	ldr	r3, [r3, #24]
 8013be4:	693a      	ldr	r2, [r7, #16]
 8013be6:	8992      	ldrh	r2, [r2, #12]
 8013be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bec:	fb02 f201 	mul.w	r2, r2, r1
 8013bf0:	1a9b      	subs	r3, r3, r2
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	f040 80f1 	bne.w	8013dda <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	699b      	ldr	r3, [r3, #24]
 8013bfc:	693a      	ldr	r2, [r7, #16]
 8013bfe:	8992      	ldrh	r2, [r2, #12]
 8013c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c04:	693a      	ldr	r2, [r7, #16]
 8013c06:	8952      	ldrh	r2, [r2, #10]
 8013c08:	3a01      	subs	r2, #1
 8013c0a:	4013      	ands	r3, r2
 8013c0c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d143      	bne.n	8013c9c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	699b      	ldr	r3, [r3, #24]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10c      	bne.n	8013c36 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d11a      	bne.n	8013c5e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fe fbbc 	bl	80123aa <create_chain>
 8013c32:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c34:	e013      	b.n	8013c5e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d007      	beq.n	8013c4e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	699b      	ldr	r3, [r3, #24]
 8013c42:	4619      	mov	r1, r3
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f7fe fc48 	bl	80124da <clmt_clust>
 8013c4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c4c:	e007      	b.n	8013c5e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013c4e:	68fa      	ldr	r2, [r7, #12]
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	69db      	ldr	r3, [r3, #28]
 8013c54:	4619      	mov	r1, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	f7fe fba7 	bl	80123aa <create_chain>
 8013c5c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 8109 	beq.w	8013e78 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	d104      	bne.n	8013c76 <f_write+0x10c>
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2202      	movs	r2, #2
 8013c70:	755a      	strb	r2, [r3, #21]
 8013c72:	2302      	movs	r3, #2
 8013c74:	e109      	b.n	8013e8a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c7c:	d104      	bne.n	8013c88 <f_write+0x11e>
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2201      	movs	r2, #1
 8013c82:	755a      	strb	r2, [r3, #21]
 8013c84:	2301      	movs	r3, #1
 8013c86:	e100      	b.n	8013e8a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c8c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d102      	bne.n	8013c9c <f_write+0x132>
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c9a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ca0:	b25b      	sxtb	r3, r3
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	da18      	bge.n	8013cd8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	7858      	ldrb	r0, [r3, #1]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6a1a      	ldr	r2, [r3, #32]
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	f7fd fd81 	bl	80117bc <disk_write>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d004      	beq.n	8013cca <f_write+0x160>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	755a      	strb	r2, [r3, #21]
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e0df      	b.n	8013e8a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	7d1b      	ldrb	r3, [r3, #20]
 8013cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cd2:	b2da      	uxtb	r2, r3
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013cd8:	693a      	ldr	r2, [r7, #16]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	69db      	ldr	r3, [r3, #28]
 8013cde:	4619      	mov	r1, r3
 8013ce0:	4610      	mov	r0, r2
 8013ce2:	f7fe f8f7 	bl	8011ed4 <clust2sect>
 8013ce6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d104      	bne.n	8013cf8 <f_write+0x18e>
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2202      	movs	r2, #2
 8013cf2:	755a      	strb	r2, [r3, #21]
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	e0c8      	b.n	8013e8a <f_write+0x320>
			sect += csect;
 8013cf8:	697a      	ldr	r2, [r7, #20]
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	899b      	ldrh	r3, [r3, #12]
 8013d04:	461a      	mov	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d0c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013d0e:	6a3b      	ldr	r3, [r7, #32]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d043      	beq.n	8013d9c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013d14:	69ba      	ldr	r2, [r7, #24]
 8013d16:	6a3b      	ldr	r3, [r7, #32]
 8013d18:	4413      	add	r3, r2
 8013d1a:	693a      	ldr	r2, [r7, #16]
 8013d1c:	8952      	ldrh	r2, [r2, #10]
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	d905      	bls.n	8013d2e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	895b      	ldrh	r3, [r3, #10]
 8013d26:	461a      	mov	r2, r3
 8013d28:	69bb      	ldr	r3, [r7, #24]
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	7858      	ldrb	r0, [r3, #1]
 8013d32:	6a3b      	ldr	r3, [r7, #32]
 8013d34:	697a      	ldr	r2, [r7, #20]
 8013d36:	69f9      	ldr	r1, [r7, #28]
 8013d38:	f7fd fd40 	bl	80117bc <disk_write>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d004      	beq.n	8013d4c <f_write+0x1e2>
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	2201      	movs	r2, #1
 8013d46:	755a      	strb	r2, [r3, #21]
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e09e      	b.n	8013e8a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6a1a      	ldr	r2, [r3, #32]
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	6a3a      	ldr	r2, [r7, #32]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d918      	bls.n	8013d8c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	6a1a      	ldr	r2, [r3, #32]
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	1ad3      	subs	r3, r2, r3
 8013d68:	693a      	ldr	r2, [r7, #16]
 8013d6a:	8992      	ldrh	r2, [r2, #12]
 8013d6c:	fb02 f303 	mul.w	r3, r2, r3
 8013d70:	69fa      	ldr	r2, [r7, #28]
 8013d72:	18d1      	adds	r1, r2, r3
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	899b      	ldrh	r3, [r3, #12]
 8013d78:	461a      	mov	r2, r3
 8013d7a:	f7fd fddf 	bl	801193c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	7d1b      	ldrb	r3, [r3, #20]
 8013d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d86:	b2da      	uxtb	r2, r3
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	899b      	ldrh	r3, [r3, #12]
 8013d90:	461a      	mov	r2, r3
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	fb02 f303 	mul.w	r3, r2, r3
 8013d98:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013d9a:	e04b      	b.n	8013e34 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	6a1b      	ldr	r3, [r3, #32]
 8013da0:	697a      	ldr	r2, [r7, #20]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d016      	beq.n	8013dd4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	699a      	ldr	r2, [r3, #24]
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d210      	bcs.n	8013dd4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	7858      	ldrb	r0, [r3, #1]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	697a      	ldr	r2, [r7, #20]
 8013dc0:	f7fd fcdc 	bl	801177c <disk_read>
 8013dc4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d004      	beq.n	8013dd4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	755a      	strb	r2, [r3, #21]
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	e05a      	b.n	8013e8a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	697a      	ldr	r2, [r7, #20]
 8013dd8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	899b      	ldrh	r3, [r3, #12]
 8013dde:	4618      	mov	r0, r3
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	699b      	ldr	r3, [r3, #24]
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	8992      	ldrh	r2, [r2, #12]
 8013de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dec:	fb02 f201 	mul.w	r2, r2, r1
 8013df0:	1a9b      	subs	r3, r3, r2
 8013df2:	1ac3      	subs	r3, r0, r3
 8013df4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d901      	bls.n	8013e02 <f_write+0x298>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	699b      	ldr	r3, [r3, #24]
 8013e0c:	693a      	ldr	r2, [r7, #16]
 8013e0e:	8992      	ldrh	r2, [r2, #12]
 8013e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8013e14:	fb02 f200 	mul.w	r2, r2, r0
 8013e18:	1a9b      	subs	r3, r3, r2
 8013e1a:	440b      	add	r3, r1
 8013e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e1e:	69f9      	ldr	r1, [r7, #28]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fd fd8b 	bl	801193c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	7d1b      	ldrb	r3, [r3, #20]
 8013e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e2e:	b2da      	uxtb	r2, r3
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013e34:	69fa      	ldr	r2, [r7, #28]
 8013e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e38:	4413      	add	r3, r2
 8013e3a:	61fb      	str	r3, [r7, #28]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	699a      	ldr	r2, [r3, #24]
 8013e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e42:	441a      	add	r2, r3
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	619a      	str	r2, [r3, #24]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	68da      	ldr	r2, [r3, #12]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	699b      	ldr	r3, [r3, #24]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	bf38      	it	cc
 8013e54:	461a      	movcc	r2, r3
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	60da      	str	r2, [r3, #12]
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e60:	441a      	add	r2, r3
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	601a      	str	r2, [r3, #0]
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	1ad3      	subs	r3, r2, r3
 8013e6c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f47f aeb5 	bne.w	8013be0 <f_write+0x76>
 8013e76:	e000      	b.n	8013e7a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e78:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	7d1b      	ldrb	r3, [r3, #20]
 8013e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e82:	b2da      	uxtb	r2, r3
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3730      	adds	r7, #48	; 0x30
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
	...

08013e94 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b086      	sub	sp, #24
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f107 0208 	add.w	r2, r7, #8
 8013ea2:	4611      	mov	r1, r2
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ff fab7 	bl	8013418 <validate>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d167      	bne.n	8013f84 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	7d1b      	ldrb	r3, [r3, #20]
 8013eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d061      	beq.n	8013f84 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	7d1b      	ldrb	r3, [r3, #20]
 8013ec4:	b25b      	sxtb	r3, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	da15      	bge.n	8013ef6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	7858      	ldrb	r0, [r3, #1]
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6a1a      	ldr	r2, [r3, #32]
 8013ed8:	2301      	movs	r3, #1
 8013eda:	f7fd fc6f 	bl	80117bc <disk_write>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d001      	beq.n	8013ee8 <f_sync+0x54>
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	e04e      	b.n	8013f86 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	7d1b      	ldrb	r3, [r3, #20]
 8013eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ef0:	b2da      	uxtb	r2, r3
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013ef6:	4b26      	ldr	r3, [pc, #152]	; (8013f90 <f_sync+0xfc>)
 8013ef8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f00:	4619      	mov	r1, r3
 8013f02:	4610      	mov	r0, r2
 8013f04:	f7fd ff48 	bl	8011d98 <move_window>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013f0c:	7dfb      	ldrb	r3, [r7, #23]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d138      	bne.n	8013f84 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f16:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	330b      	adds	r3, #11
 8013f1c:	781a      	ldrb	r2, [r3, #0]
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	330b      	adds	r3, #11
 8013f22:	f042 0220 	orr.w	r2, r2, #32
 8013f26:	b2d2      	uxtb	r2, r2
 8013f28:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6818      	ldr	r0, [r3, #0]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	689b      	ldr	r3, [r3, #8]
 8013f32:	461a      	mov	r2, r3
 8013f34:	68f9      	ldr	r1, [r7, #12]
 8013f36:	f7fe fccd 	bl	80128d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f103 021c 	add.w	r2, r3, #28
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	68db      	ldr	r3, [r3, #12]
 8013f44:	4619      	mov	r1, r3
 8013f46:	4610      	mov	r0, r2
 8013f48:	f7fd fccc 	bl	80118e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	3316      	adds	r3, #22
 8013f50:	6939      	ldr	r1, [r7, #16]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7fd fcc6 	bl	80118e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	3312      	adds	r3, #18
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7fd fca5 	bl	80118ae <st_word>
					fs->wflag = 1;
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	2201      	movs	r2, #1
 8013f68:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fd ff41 	bl	8011df4 <sync_fs>
 8013f72:	4603      	mov	r3, r0
 8013f74:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	7d1b      	ldrb	r3, [r3, #20]
 8013f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f7e:	b2da      	uxtb	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3718      	adds	r7, #24
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	274a0000 	.word	0x274a0000

08013f94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff ff79 	bl	8013e94 <f_sync>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013fa6:	7bfb      	ldrb	r3, [r7, #15]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d118      	bne.n	8013fde <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f107 0208 	add.w	r2, r7, #8
 8013fb2:	4611      	mov	r1, r2
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7ff fa2f 	bl	8013418 <validate>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013fbe:	7bfb      	ldrb	r3, [r7, #15]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d10c      	bne.n	8013fde <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	691b      	ldr	r3, [r3, #16]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fd fe41 	bl	8011c50 <dec_lock>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013fd2:	7bfb      	ldrb	r3, [r7, #15]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d102      	bne.n	8013fde <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013fe8:	b590      	push	{r4, r7, lr}
 8013fea:	b091      	sub	sp, #68	; 0x44
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013ff0:	f107 0108 	add.w	r1, r7, #8
 8013ff4:	1d3b      	adds	r3, r7, #4
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fe ff87 	bl	8012f0c <find_volume>
 8013ffe:	4603      	mov	r3, r0
 8014000:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8014004:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014008:	2b00      	cmp	r3, #0
 801400a:	d131      	bne.n	8014070 <f_chdir+0x88>
		dj.obj.fs = fs;
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	f107 030c 	add.w	r3, r7, #12
 8014016:	4611      	mov	r1, r2
 8014018:	4618      	mov	r0, r3
 801401a:	f7fe fe47 	bl	8012cac <follow_path>
 801401e:	4603      	mov	r3, r0
 8014020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8014024:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014028:	2b00      	cmp	r3, #0
 801402a:	d11a      	bne.n	8014062 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801402c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014030:	b25b      	sxtb	r3, r3
 8014032:	2b00      	cmp	r3, #0
 8014034:	da03      	bge.n	801403e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	697a      	ldr	r2, [r7, #20]
 801403a:	619a      	str	r2, [r3, #24]
 801403c:	e011      	b.n	8014062 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801403e:	7cbb      	ldrb	r3, [r7, #18]
 8014040:	f003 0310 	and.w	r3, r3, #16
 8014044:	2b00      	cmp	r3, #0
 8014046:	d009      	beq.n	801405c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801404c:	68bc      	ldr	r4, [r7, #8]
 801404e:	4611      	mov	r1, r2
 8014050:	4618      	mov	r0, r3
 8014052:	f7fe fc20 	bl	8012896 <ld_clust>
 8014056:	4603      	mov	r3, r0
 8014058:	61a3      	str	r3, [r4, #24]
 801405a:	e002      	b.n	8014062 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801405c:	2305      	movs	r3, #5
 801405e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014066:	2b04      	cmp	r3, #4
 8014068:	d102      	bne.n	8014070 <f_chdir+0x88>
 801406a:	2305      	movs	r3, #5
 801406c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8014070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014074:	4618      	mov	r0, r3
 8014076:	3744      	adds	r7, #68	; 0x44
 8014078:	46bd      	mov	sp, r7
 801407a:	bd90      	pop	{r4, r7, pc}

0801407c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b090      	sub	sp, #64	; 0x40
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f107 0208 	add.w	r2, r7, #8
 801408c:	4611      	mov	r1, r2
 801408e:	4618      	mov	r0, r3
 8014090:	f7ff f9c2 	bl	8013418 <validate>
 8014094:	4603      	mov	r3, r0
 8014096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801409a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d103      	bne.n	80140aa <f_lseek+0x2e>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	7d5b      	ldrb	r3, [r3, #21]
 80140a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80140aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d002      	beq.n	80140b8 <f_lseek+0x3c>
 80140b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80140b6:	e201      	b.n	80144bc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140bc:	2b00      	cmp	r3, #0
 80140be:	f000 80d9 	beq.w	8014274 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140c8:	d15a      	bne.n	8014180 <f_lseek+0x104>
			tbl = fp->cltbl;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ce:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80140d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d2:	1d1a      	adds	r2, r3, #4
 80140d4:	627a      	str	r2, [r7, #36]	; 0x24
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	617b      	str	r3, [r7, #20]
 80140da:	2302      	movs	r3, #2
 80140dc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	689b      	ldr	r3, [r3, #8]
 80140e2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80140e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d03a      	beq.n	8014160 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80140ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ec:	613b      	str	r3, [r7, #16]
 80140ee:	2300      	movs	r3, #0
 80140f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f4:	3302      	adds	r3, #2
 80140f6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80140f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fa:	60fb      	str	r3, [r7, #12]
 80140fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fe:	3301      	adds	r3, #1
 8014100:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014106:	4618      	mov	r0, r3
 8014108:	f7fd ff03 	bl	8011f12 <get_fat>
 801410c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014110:	2b01      	cmp	r3, #1
 8014112:	d804      	bhi.n	801411e <f_lseek+0xa2>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2202      	movs	r2, #2
 8014118:	755a      	strb	r2, [r3, #21]
 801411a:	2302      	movs	r3, #2
 801411c:	e1ce      	b.n	80144bc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014124:	d104      	bne.n	8014130 <f_lseek+0xb4>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2201      	movs	r2, #1
 801412a:	755a      	strb	r2, [r3, #21]
 801412c:	2301      	movs	r3, #1
 801412e:	e1c5      	b.n	80144bc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	3301      	adds	r3, #1
 8014134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014136:	429a      	cmp	r2, r3
 8014138:	d0de      	beq.n	80140f8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	429a      	cmp	r2, r3
 8014140:	d809      	bhi.n	8014156 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014144:	1d1a      	adds	r2, r3, #4
 8014146:	627a      	str	r2, [r7, #36]	; 0x24
 8014148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801414a:	601a      	str	r2, [r3, #0]
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414e:	1d1a      	adds	r2, r3, #4
 8014150:	627a      	str	r2, [r7, #36]	; 0x24
 8014152:	693a      	ldr	r2, [r7, #16]
 8014154:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	69db      	ldr	r3, [r3, #28]
 801415a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801415c:	429a      	cmp	r2, r3
 801415e:	d3c4      	bcc.n	80140ea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014166:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	429a      	cmp	r2, r3
 801416e:	d803      	bhi.n	8014178 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014172:	2200      	movs	r2, #0
 8014174:	601a      	str	r2, [r3, #0]
 8014176:	e19f      	b.n	80144b8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014178:	2311      	movs	r3, #17
 801417a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801417e:	e19b      	b.n	80144b8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	683a      	ldr	r2, [r7, #0]
 8014186:	429a      	cmp	r2, r3
 8014188:	d902      	bls.n	8014190 <f_lseek+0x114>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	68db      	ldr	r3, [r3, #12]
 801418e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	f000 818d 	beq.w	80144b8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	3b01      	subs	r3, #1
 80141a2:	4619      	mov	r1, r3
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f7fe f998 	bl	80124da <clmt_clust>
 80141aa:	4602      	mov	r2, r0
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80141b0:	68ba      	ldr	r2, [r7, #8]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	69db      	ldr	r3, [r3, #28]
 80141b6:	4619      	mov	r1, r3
 80141b8:	4610      	mov	r0, r2
 80141ba:	f7fd fe8b 	bl	8011ed4 <clust2sect>
 80141be:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d104      	bne.n	80141d0 <f_lseek+0x154>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2202      	movs	r2, #2
 80141ca:	755a      	strb	r2, [r3, #21]
 80141cc:	2302      	movs	r3, #2
 80141ce:	e175      	b.n	80144bc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	3b01      	subs	r3, #1
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	8992      	ldrh	r2, [r2, #12]
 80141d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80141dc:	68ba      	ldr	r2, [r7, #8]
 80141de:	8952      	ldrh	r2, [r2, #10]
 80141e0:	3a01      	subs	r2, #1
 80141e2:	4013      	ands	r3, r2
 80141e4:	69ba      	ldr	r2, [r7, #24]
 80141e6:	4413      	add	r3, r2
 80141e8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	699b      	ldr	r3, [r3, #24]
 80141ee:	68ba      	ldr	r2, [r7, #8]
 80141f0:	8992      	ldrh	r2, [r2, #12]
 80141f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80141f6:	fb02 f201 	mul.w	r2, r2, r1
 80141fa:	1a9b      	subs	r3, r3, r2
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	f000 815b 	beq.w	80144b8 <f_lseek+0x43c>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6a1b      	ldr	r3, [r3, #32]
 8014206:	69ba      	ldr	r2, [r7, #24]
 8014208:	429a      	cmp	r2, r3
 801420a:	f000 8155 	beq.w	80144b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	7d1b      	ldrb	r3, [r3, #20]
 8014212:	b25b      	sxtb	r3, r3
 8014214:	2b00      	cmp	r3, #0
 8014216:	da18      	bge.n	801424a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	7858      	ldrb	r0, [r3, #1]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6a1a      	ldr	r2, [r3, #32]
 8014226:	2301      	movs	r3, #1
 8014228:	f7fd fac8 	bl	80117bc <disk_write>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d004      	beq.n	801423c <f_lseek+0x1c0>
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	2201      	movs	r2, #1
 8014236:	755a      	strb	r2, [r3, #21]
 8014238:	2301      	movs	r3, #1
 801423a:	e13f      	b.n	80144bc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	7d1b      	ldrb	r3, [r3, #20]
 8014240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014244:	b2da      	uxtb	r2, r3
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	7858      	ldrb	r0, [r3, #1]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014254:	2301      	movs	r3, #1
 8014256:	69ba      	ldr	r2, [r7, #24]
 8014258:	f7fd fa90 	bl	801177c <disk_read>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d004      	beq.n	801426c <f_lseek+0x1f0>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2201      	movs	r2, #1
 8014266:	755a      	strb	r2, [r3, #21]
 8014268:	2301      	movs	r3, #1
 801426a:	e127      	b.n	80144bc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	69ba      	ldr	r2, [r7, #24]
 8014270:	621a      	str	r2, [r3, #32]
 8014272:	e121      	b.n	80144b8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	429a      	cmp	r2, r3
 801427c:	d908      	bls.n	8014290 <f_lseek+0x214>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	7d1b      	ldrb	r3, [r3, #20]
 8014282:	f003 0302 	and.w	r3, r3, #2
 8014286:	2b00      	cmp	r3, #0
 8014288:	d102      	bne.n	8014290 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	699b      	ldr	r3, [r3, #24]
 8014294:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014296:	2300      	movs	r3, #0
 8014298:	637b      	str	r3, [r7, #52]	; 0x34
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801429e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f000 80b5 	beq.w	8014412 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	895b      	ldrh	r3, [r3, #10]
 80142ac:	461a      	mov	r2, r3
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	899b      	ldrh	r3, [r3, #12]
 80142b2:	fb03 f302 	mul.w	r3, r3, r2
 80142b6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80142b8:	6a3b      	ldr	r3, [r7, #32]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d01b      	beq.n	80142f6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	1e5a      	subs	r2, r3, #1
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80142c8:	6a3b      	ldr	r3, [r7, #32]
 80142ca:	1e59      	subs	r1, r3, #1
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d30f      	bcc.n	80142f6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80142d6:	6a3b      	ldr	r3, [r7, #32]
 80142d8:	1e5a      	subs	r2, r3, #1
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	425b      	negs	r3, r3
 80142de:	401a      	ands	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	683a      	ldr	r2, [r7, #0]
 80142ea:	1ad3      	subs	r3, r2, r3
 80142ec:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	69db      	ldr	r3, [r3, #28]
 80142f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80142f4:	e022      	b.n	801433c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	689b      	ldr	r3, [r3, #8]
 80142fa:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80142fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d119      	bne.n	8014336 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2100      	movs	r1, #0
 8014306:	4618      	mov	r0, r3
 8014308:	f7fe f84f 	bl	80123aa <create_chain>
 801430c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014310:	2b01      	cmp	r3, #1
 8014312:	d104      	bne.n	801431e <f_lseek+0x2a2>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2202      	movs	r2, #2
 8014318:	755a      	strb	r2, [r3, #21]
 801431a:	2302      	movs	r3, #2
 801431c:	e0ce      	b.n	80144bc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014324:	d104      	bne.n	8014330 <f_lseek+0x2b4>
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2201      	movs	r2, #1
 801432a:	755a      	strb	r2, [r3, #21]
 801432c:	2301      	movs	r3, #1
 801432e:	e0c5      	b.n	80144bc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014334:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801433a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801433e:	2b00      	cmp	r3, #0
 8014340:	d067      	beq.n	8014412 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014342:	e03a      	b.n	80143ba <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014344:	683a      	ldr	r2, [r7, #0]
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	1ad3      	subs	r3, r2, r3
 801434a:	603b      	str	r3, [r7, #0]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	699a      	ldr	r2, [r3, #24]
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	441a      	add	r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	7d1b      	ldrb	r3, [r3, #20]
 801435c:	f003 0302 	and.w	r3, r3, #2
 8014360:	2b00      	cmp	r3, #0
 8014362:	d00b      	beq.n	801437c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014368:	4618      	mov	r0, r3
 801436a:	f7fe f81e 	bl	80123aa <create_chain>
 801436e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014372:	2b00      	cmp	r3, #0
 8014374:	d108      	bne.n	8014388 <f_lseek+0x30c>
							ofs = 0; break;
 8014376:	2300      	movs	r3, #0
 8014378:	603b      	str	r3, [r7, #0]
 801437a:	e022      	b.n	80143c2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014380:	4618      	mov	r0, r3
 8014382:	f7fd fdc6 	bl	8011f12 <get_fat>
 8014386:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801438e:	d104      	bne.n	801439a <f_lseek+0x31e>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2201      	movs	r2, #1
 8014394:	755a      	strb	r2, [r3, #21]
 8014396:	2301      	movs	r3, #1
 8014398:	e090      	b.n	80144bc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439c:	2b01      	cmp	r3, #1
 801439e:	d904      	bls.n	80143aa <f_lseek+0x32e>
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	69db      	ldr	r3, [r3, #28]
 80143a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d304      	bcc.n	80143b4 <f_lseek+0x338>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2202      	movs	r2, #2
 80143ae:	755a      	strb	r2, [r3, #21]
 80143b0:	2302      	movs	r3, #2
 80143b2:	e083      	b.n	80144bc <f_lseek+0x440>
					fp->clust = clst;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143b8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80143ba:	683a      	ldr	r2, [r7, #0]
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d8c0      	bhi.n	8014344 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	699a      	ldr	r2, [r3, #24]
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	441a      	add	r2, r3
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	899b      	ldrh	r3, [r3, #12]
 80143d2:	461a      	mov	r2, r3
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80143da:	fb02 f201 	mul.w	r2, r2, r1
 80143de:	1a9b      	subs	r3, r3, r2
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d016      	beq.n	8014412 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fd fd73 	bl	8011ed4 <clust2sect>
 80143ee:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80143f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d104      	bne.n	8014400 <f_lseek+0x384>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2202      	movs	r2, #2
 80143fa:	755a      	strb	r2, [r3, #21]
 80143fc:	2302      	movs	r3, #2
 80143fe:	e05d      	b.n	80144bc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	899b      	ldrh	r3, [r3, #12]
 8014404:	461a      	mov	r2, r3
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	fbb3 f3f2 	udiv	r3, r3, r2
 801440c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801440e:	4413      	add	r3, r2
 8014410:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	699a      	ldr	r2, [r3, #24]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	68db      	ldr	r3, [r3, #12]
 801441a:	429a      	cmp	r2, r3
 801441c:	d90a      	bls.n	8014434 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	699a      	ldr	r2, [r3, #24]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	7d1b      	ldrb	r3, [r3, #20]
 801442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801442e:	b2da      	uxtb	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	699b      	ldr	r3, [r3, #24]
 8014438:	68ba      	ldr	r2, [r7, #8]
 801443a:	8992      	ldrh	r2, [r2, #12]
 801443c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014440:	fb02 f201 	mul.w	r2, r2, r1
 8014444:	1a9b      	subs	r3, r3, r2
 8014446:	2b00      	cmp	r3, #0
 8014448:	d036      	beq.n	80144b8 <f_lseek+0x43c>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6a1b      	ldr	r3, [r3, #32]
 801444e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014450:	429a      	cmp	r2, r3
 8014452:	d031      	beq.n	80144b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	7d1b      	ldrb	r3, [r3, #20]
 8014458:	b25b      	sxtb	r3, r3
 801445a:	2b00      	cmp	r3, #0
 801445c:	da18      	bge.n	8014490 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	7858      	ldrb	r0, [r3, #1]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6a1a      	ldr	r2, [r3, #32]
 801446c:	2301      	movs	r3, #1
 801446e:	f7fd f9a5 	bl	80117bc <disk_write>
 8014472:	4603      	mov	r3, r0
 8014474:	2b00      	cmp	r3, #0
 8014476:	d004      	beq.n	8014482 <f_lseek+0x406>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2201      	movs	r2, #1
 801447c:	755a      	strb	r2, [r3, #21]
 801447e:	2301      	movs	r3, #1
 8014480:	e01c      	b.n	80144bc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	7d1b      	ldrb	r3, [r3, #20]
 8014486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801448a:	b2da      	uxtb	r2, r3
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	7858      	ldrb	r0, [r3, #1]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801449a:	2301      	movs	r3, #1
 801449c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801449e:	f7fd f96d 	bl	801177c <disk_read>
 80144a2:	4603      	mov	r3, r0
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d004      	beq.n	80144b2 <f_lseek+0x436>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2201      	movs	r2, #1
 80144ac:	755a      	strb	r2, [r3, #21]
 80144ae:	2301      	movs	r3, #1
 80144b0:	e004      	b.n	80144bc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144b6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80144b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3740      	adds	r7, #64	; 0x40
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b09e      	sub	sp, #120	; 0x78
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80144cc:	2300      	movs	r3, #0
 80144ce:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80144d0:	f107 010c 	add.w	r1, r7, #12
 80144d4:	1d3b      	adds	r3, r7, #4
 80144d6:	2202      	movs	r2, #2
 80144d8:	4618      	mov	r0, r3
 80144da:	f7fe fd17 	bl	8012f0c <find_volume>
 80144de:	4603      	mov	r3, r0
 80144e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80144e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f040 80a4 	bne.w	801463a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80144f8:	4611      	mov	r1, r2
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fe fbd6 	bl	8012cac <follow_path>
 8014500:	4603      	mov	r3, r0
 8014502:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014506:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801450a:	2b00      	cmp	r3, #0
 801450c:	d108      	bne.n	8014520 <f_unlink+0x5c>
 801450e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014512:	f003 0320 	and.w	r3, r3, #32
 8014516:	2b00      	cmp	r3, #0
 8014518:	d002      	beq.n	8014520 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801451a:	2306      	movs	r3, #6
 801451c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014520:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014524:	2b00      	cmp	r3, #0
 8014526:	d108      	bne.n	801453a <f_unlink+0x76>
 8014528:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801452c:	2102      	movs	r1, #2
 801452e:	4618      	mov	r0, r3
 8014530:	f7fd fa82 	bl	8011a38 <chk_lock>
 8014534:	4603      	mov	r3, r0
 8014536:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801453a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801453e:	2b00      	cmp	r3, #0
 8014540:	d17b      	bne.n	801463a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014546:	b25b      	sxtb	r3, r3
 8014548:	2b00      	cmp	r3, #0
 801454a:	da03      	bge.n	8014554 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801454c:	2306      	movs	r3, #6
 801454e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014552:	e008      	b.n	8014566 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014554:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014558:	f003 0301 	and.w	r3, r3, #1
 801455c:	2b00      	cmp	r3, #0
 801455e:	d002      	beq.n	8014566 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014560:	2307      	movs	r3, #7
 8014562:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014566:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801456a:	2b00      	cmp	r3, #0
 801456c:	d13d      	bne.n	80145ea <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014572:	4611      	mov	r1, r2
 8014574:	4618      	mov	r0, r3
 8014576:	f7fe f98e 	bl	8012896 <ld_clust>
 801457a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801457c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014580:	f003 0310 	and.w	r3, r3, #16
 8014584:	2b00      	cmp	r3, #0
 8014586:	d030      	beq.n	80145ea <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	699b      	ldr	r3, [r3, #24]
 801458c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801458e:	429a      	cmp	r2, r3
 8014590:	d103      	bne.n	801459a <f_unlink+0xd6>
						res = FR_DENIED;
 8014592:	2307      	movs	r3, #7
 8014594:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014598:	e027      	b.n	80145ea <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145a0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80145a2:	f107 0310 	add.w	r3, r7, #16
 80145a6:	2100      	movs	r1, #0
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7fd ffce 	bl	801254a <dir_sdi>
 80145ae:	4603      	mov	r3, r0
 80145b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80145b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d116      	bne.n	80145ea <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80145bc:	f107 0310 	add.w	r3, r7, #16
 80145c0:	2100      	movs	r1, #0
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fe f9a6 	bl	8012914 <dir_read>
 80145c8:	4603      	mov	r3, r0
 80145ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80145ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d102      	bne.n	80145dc <f_unlink+0x118>
 80145d6:	2307      	movs	r3, #7
 80145d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80145dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145e0:	2b04      	cmp	r3, #4
 80145e2:	d102      	bne.n	80145ea <f_unlink+0x126>
 80145e4:	2300      	movs	r3, #0
 80145e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80145ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d123      	bne.n	801463a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80145f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7fe fa70 	bl	8012adc <dir_remove>
 80145fc:	4603      	mov	r3, r0
 80145fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014602:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014606:	2b00      	cmp	r3, #0
 8014608:	d10c      	bne.n	8014624 <f_unlink+0x160>
 801460a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801460c:	2b00      	cmp	r3, #0
 801460e:	d009      	beq.n	8014624 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014614:	2200      	movs	r2, #0
 8014616:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014618:	4618      	mov	r0, r3
 801461a:	f7fd fe61 	bl	80122e0 <remove_chain>
 801461e:	4603      	mov	r3, r0
 8014620:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014624:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014628:	2b00      	cmp	r3, #0
 801462a:	d106      	bne.n	801463a <f_unlink+0x176>
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	4618      	mov	r0, r3
 8014630:	f7fd fbe0 	bl	8011df4 <sync_fs>
 8014634:	4603      	mov	r3, r0
 8014636:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801463a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801463e:	4618      	mov	r0, r3
 8014640:	3778      	adds	r7, #120	; 0x78
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
	...

08014648 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b096      	sub	sp, #88	; 0x58
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014650:	f107 0108 	add.w	r1, r7, #8
 8014654:	1d3b      	adds	r3, r7, #4
 8014656:	2202      	movs	r2, #2
 8014658:	4618      	mov	r0, r3
 801465a:	f7fe fc57 	bl	8012f0c <find_volume>
 801465e:	4603      	mov	r3, r0
 8014660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801466c:	2b00      	cmp	r3, #0
 801466e:	f040 80fe 	bne.w	801486e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	f107 030c 	add.w	r3, r7, #12
 8014678:	4611      	mov	r1, r2
 801467a:	4618      	mov	r0, r3
 801467c:	f7fe fb16 	bl	8012cac <follow_path>
 8014680:	4603      	mov	r3, r0
 8014682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801468a:	2b00      	cmp	r3, #0
 801468c:	d102      	bne.n	8014694 <f_mkdir+0x4c>
 801468e:	2308      	movs	r3, #8
 8014690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014698:	2b04      	cmp	r3, #4
 801469a:	d108      	bne.n	80146ae <f_mkdir+0x66>
 801469c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80146a0:	f003 0320 	and.w	r3, r3, #32
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d002      	beq.n	80146ae <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80146a8:	2306      	movs	r3, #6
 80146aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80146ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146b2:	2b04      	cmp	r3, #4
 80146b4:	f040 80db 	bne.w	801486e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80146b8:	f107 030c 	add.w	r3, r7, #12
 80146bc:	2100      	movs	r1, #0
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fd fe73 	bl	80123aa <create_chain>
 80146c4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	895b      	ldrh	r3, [r3, #10]
 80146ca:	461a      	mov	r2, r3
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	899b      	ldrh	r3, [r3, #12]
 80146d0:	fb03 f302 	mul.w	r3, r3, r2
 80146d4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80146d6:	2300      	movs	r3, #0
 80146d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80146dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d102      	bne.n	80146e8 <f_mkdir+0xa0>
 80146e2:	2307      	movs	r3, #7
 80146e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80146e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146ea:	2b01      	cmp	r3, #1
 80146ec:	d102      	bne.n	80146f4 <f_mkdir+0xac>
 80146ee:	2302      	movs	r3, #2
 80146f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80146f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146fa:	d102      	bne.n	8014702 <f_mkdir+0xba>
 80146fc:	2301      	movs	r3, #1
 80146fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014702:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014706:	2b00      	cmp	r3, #0
 8014708:	d106      	bne.n	8014718 <f_mkdir+0xd0>
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	4618      	mov	r0, r3
 801470e:	f7fd faff 	bl	8011d10 <sync_window>
 8014712:	4603      	mov	r3, r0
 8014714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014718:	4b58      	ldr	r3, [pc, #352]	; (801487c <f_mkdir+0x234>)
 801471a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801471c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014720:	2b00      	cmp	r3, #0
 8014722:	d16c      	bne.n	80147fe <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014728:	4618      	mov	r0, r3
 801472a:	f7fd fbd3 	bl	8011ed4 <clust2sect>
 801472e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	3338      	adds	r3, #56	; 0x38
 8014734:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	899b      	ldrh	r3, [r3, #12]
 801473a:	461a      	mov	r2, r3
 801473c:	2100      	movs	r1, #0
 801473e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014740:	f7fd f91d 	bl	801197e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014744:	220b      	movs	r2, #11
 8014746:	2120      	movs	r1, #32
 8014748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801474a:	f7fd f918 	bl	801197e <mem_set>
					dir[DIR_Name] = '.';
 801474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014750:	222e      	movs	r2, #46	; 0x2e
 8014752:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014756:	330b      	adds	r3, #11
 8014758:	2210      	movs	r2, #16
 801475a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801475c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801475e:	3316      	adds	r3, #22
 8014760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014762:	4618      	mov	r0, r3
 8014764:	f7fd f8be 	bl	80118e4 <st_dword>
					st_clust(fs, dir, dcl);
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801476c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801476e:	4618      	mov	r0, r3
 8014770:	f7fe f8b0 	bl	80128d4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014776:	3320      	adds	r3, #32
 8014778:	2220      	movs	r2, #32
 801477a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801477c:	4618      	mov	r0, r3
 801477e:	f7fd f8dd 	bl	801193c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014784:	3321      	adds	r3, #33	; 0x21
 8014786:	222e      	movs	r2, #46	; 0x2e
 8014788:	701a      	strb	r2, [r3, #0]
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	2b03      	cmp	r3, #3
 8014794:	d106      	bne.n	80147a4 <f_mkdir+0x15c>
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801479a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801479c:	429a      	cmp	r2, r3
 801479e:	d101      	bne.n	80147a4 <f_mkdir+0x15c>
 80147a0:	2300      	movs	r3, #0
 80147a2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80147a4:	68b8      	ldr	r0, [r7, #8]
 80147a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147a8:	3320      	adds	r3, #32
 80147aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147ac:	4619      	mov	r1, r3
 80147ae:	f7fe f891 	bl	80128d4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	895b      	ldrh	r3, [r3, #10]
 80147b6:	653b      	str	r3, [r7, #80]	; 0x50
 80147b8:	e01c      	b.n	80147f4 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80147ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147bc:	1c5a      	adds	r2, r3, #1
 80147be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	2201      	movs	r2, #1
 80147c8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7fd fa9f 	bl	8011d10 <sync_window>
 80147d2:	4603      	mov	r3, r0
 80147d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80147d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10d      	bne.n	80147fc <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	899b      	ldrh	r3, [r3, #12]
 80147e4:	461a      	mov	r2, r3
 80147e6:	2100      	movs	r1, #0
 80147e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80147ea:	f7fd f8c8 	bl	801197e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80147ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147f0:	3b01      	subs	r3, #1
 80147f2:	653b      	str	r3, [r7, #80]	; 0x50
 80147f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d1df      	bne.n	80147ba <f_mkdir+0x172>
 80147fa:	e000      	b.n	80147fe <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80147fc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80147fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014802:	2b00      	cmp	r3, #0
 8014804:	d107      	bne.n	8014816 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014806:	f107 030c 	add.w	r3, r7, #12
 801480a:	4618      	mov	r0, r3
 801480c:	f7fe f934 	bl	8012a78 <dir_register>
 8014810:	4603      	mov	r3, r0
 8014812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014816:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801481a:	2b00      	cmp	r3, #0
 801481c:	d120      	bne.n	8014860 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014820:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014824:	3316      	adds	r3, #22
 8014826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014828:	4618      	mov	r0, r3
 801482a:	f7fd f85b 	bl	80118e4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014834:	4618      	mov	r0, r3
 8014836:	f7fe f84d 	bl	80128d4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801483c:	330b      	adds	r3, #11
 801483e:	2210      	movs	r2, #16
 8014840:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	2201      	movs	r2, #1
 8014846:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801484c:	2b00      	cmp	r3, #0
 801484e:	d10e      	bne.n	801486e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	4618      	mov	r0, r3
 8014854:	f7fd face 	bl	8011df4 <sync_fs>
 8014858:	4603      	mov	r3, r0
 801485a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801485e:	e006      	b.n	801486e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014860:	f107 030c 	add.w	r3, r7, #12
 8014864:	2200      	movs	r2, #0
 8014866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014868:	4618      	mov	r0, r3
 801486a:	f7fd fd39 	bl	80122e0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801486e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014872:	4618      	mov	r0, r3
 8014874:	3758      	adds	r7, #88	; 0x58
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	274a0000 	.word	0x274a0000

08014880 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b088      	sub	sp, #32
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014894:	e017      	b.n	80148c6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014896:	f107 0310 	add.w	r3, r7, #16
 801489a:	f107 0114 	add.w	r1, r7, #20
 801489e:	2201      	movs	r2, #1
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7ff f803 	bl	80138ac <f_read>
		if (rc != 1) break;
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d112      	bne.n	80148d2 <f_gets+0x52>
		c = s[0];
 80148ac:	7d3b      	ldrb	r3, [r7, #20]
 80148ae:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	1c5a      	adds	r2, r3, #1
 80148b4:	61ba      	str	r2, [r7, #24]
 80148b6:	7dfa      	ldrb	r2, [r7, #23]
 80148b8:	701a      	strb	r2, [r3, #0]
		n++;
 80148ba:	69fb      	ldr	r3, [r7, #28]
 80148bc:	3301      	adds	r3, #1
 80148be:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80148c0:	7dfb      	ldrb	r3, [r7, #23]
 80148c2:	2b0a      	cmp	r3, #10
 80148c4:	d007      	beq.n	80148d6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	3b01      	subs	r3, #1
 80148ca:	69fa      	ldr	r2, [r7, #28]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	dbe2      	blt.n	8014896 <f_gets+0x16>
 80148d0:	e002      	b.n	80148d8 <f_gets+0x58>
		if (rc != 1) break;
 80148d2:	bf00      	nop
 80148d4:	e000      	b.n	80148d8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80148d6:	bf00      	nop
	}
	*p = 0;
 80148d8:	69bb      	ldr	r3, [r7, #24]
 80148da:	2200      	movs	r2, #0
 80148dc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d001      	beq.n	80148e8 <f_gets+0x68>
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	e000      	b.n	80148ea <f_gets+0x6a>
 80148e8:	2300      	movs	r3, #0
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3720      	adds	r7, #32
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
	...

080148f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80148f4:	b480      	push	{r7}
 80148f6:	b087      	sub	sp, #28
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	4613      	mov	r3, r2
 8014900:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014902:	2301      	movs	r3, #1
 8014904:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801490a:	4b1f      	ldr	r3, [pc, #124]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 801490c:	7a5b      	ldrb	r3, [r3, #9]
 801490e:	b2db      	uxtb	r3, r3
 8014910:	2b00      	cmp	r3, #0
 8014912:	d131      	bne.n	8014978 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014914:	4b1c      	ldr	r3, [pc, #112]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 8014916:	7a5b      	ldrb	r3, [r3, #9]
 8014918:	b2db      	uxtb	r3, r3
 801491a:	461a      	mov	r2, r3
 801491c:	4b1a      	ldr	r3, [pc, #104]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 801491e:	2100      	movs	r1, #0
 8014920:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014922:	4b19      	ldr	r3, [pc, #100]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 8014924:	7a5b      	ldrb	r3, [r3, #9]
 8014926:	b2db      	uxtb	r3, r3
 8014928:	4a17      	ldr	r2, [pc, #92]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	4413      	add	r3, r2
 801492e:	68fa      	ldr	r2, [r7, #12]
 8014930:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014932:	4b15      	ldr	r3, [pc, #84]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 8014934:	7a5b      	ldrb	r3, [r3, #9]
 8014936:	b2db      	uxtb	r3, r3
 8014938:	461a      	mov	r2, r3
 801493a:	4b13      	ldr	r3, [pc, #76]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 801493c:	4413      	add	r3, r2
 801493e:	79fa      	ldrb	r2, [r7, #7]
 8014940:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014942:	4b11      	ldr	r3, [pc, #68]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 8014944:	7a5b      	ldrb	r3, [r3, #9]
 8014946:	b2db      	uxtb	r3, r3
 8014948:	1c5a      	adds	r2, r3, #1
 801494a:	b2d1      	uxtb	r1, r2
 801494c:	4a0e      	ldr	r2, [pc, #56]	; (8014988 <FATFS_LinkDriverEx+0x94>)
 801494e:	7251      	strb	r1, [r2, #9]
 8014950:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014952:	7dbb      	ldrb	r3, [r7, #22]
 8014954:	3330      	adds	r3, #48	; 0x30
 8014956:	b2da      	uxtb	r2, r3
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	3301      	adds	r3, #1
 8014960:	223a      	movs	r2, #58	; 0x3a
 8014962:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	3302      	adds	r3, #2
 8014968:	222f      	movs	r2, #47	; 0x2f
 801496a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	3303      	adds	r3, #3
 8014970:	2200      	movs	r2, #0
 8014972:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014974:	2300      	movs	r3, #0
 8014976:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014978:	7dfb      	ldrb	r3, [r7, #23]
}
 801497a:	4618      	mov	r0, r3
 801497c:	371c      	adds	r7, #28
 801497e:	46bd      	mov	sp, r7
 8014980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	200452fc 	.word	0x200452fc

0801498c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014996:	2200      	movs	r2, #0
 8014998:	6839      	ldr	r1, [r7, #0]
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f7ff ffaa 	bl	80148f4 <FATFS_LinkDriverEx>
 80149a0:	4603      	mov	r3, r0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <__cxa_guard_acquire>:
 80149aa:	6803      	ldr	r3, [r0, #0]
 80149ac:	07db      	lsls	r3, r3, #31
 80149ae:	d406      	bmi.n	80149be <__cxa_guard_acquire+0x14>
 80149b0:	7843      	ldrb	r3, [r0, #1]
 80149b2:	b103      	cbz	r3, 80149b6 <__cxa_guard_acquire+0xc>
 80149b4:	deff      	udf	#255	; 0xff
 80149b6:	2301      	movs	r3, #1
 80149b8:	7043      	strb	r3, [r0, #1]
 80149ba:	4618      	mov	r0, r3
 80149bc:	4770      	bx	lr
 80149be:	2000      	movs	r0, #0
 80149c0:	4770      	bx	lr

080149c2 <__cxa_guard_release>:
 80149c2:	2301      	movs	r3, #1
 80149c4:	6003      	str	r3, [r0, #0]
 80149c6:	4770      	bx	lr

080149c8 <__errno>:
 80149c8:	4b01      	ldr	r3, [pc, #4]	; (80149d0 <__errno+0x8>)
 80149ca:	6818      	ldr	r0, [r3, #0]
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	2000000c 	.word	0x2000000c

080149d4 <__libc_init_array>:
 80149d4:	b570      	push	{r4, r5, r6, lr}
 80149d6:	4e0d      	ldr	r6, [pc, #52]	; (8014a0c <__libc_init_array+0x38>)
 80149d8:	4c0d      	ldr	r4, [pc, #52]	; (8014a10 <__libc_init_array+0x3c>)
 80149da:	1ba4      	subs	r4, r4, r6
 80149dc:	10a4      	asrs	r4, r4, #2
 80149de:	2500      	movs	r5, #0
 80149e0:	42a5      	cmp	r5, r4
 80149e2:	d109      	bne.n	80149f8 <__libc_init_array+0x24>
 80149e4:	4e0b      	ldr	r6, [pc, #44]	; (8014a14 <__libc_init_array+0x40>)
 80149e6:	4c0c      	ldr	r4, [pc, #48]	; (8014a18 <__libc_init_array+0x44>)
 80149e8:	f004 f9e8 	bl	8018dbc <_init>
 80149ec:	1ba4      	subs	r4, r4, r6
 80149ee:	10a4      	asrs	r4, r4, #2
 80149f0:	2500      	movs	r5, #0
 80149f2:	42a5      	cmp	r5, r4
 80149f4:	d105      	bne.n	8014a02 <__libc_init_array+0x2e>
 80149f6:	bd70      	pop	{r4, r5, r6, pc}
 80149f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149fc:	4798      	blx	r3
 80149fe:	3501      	adds	r5, #1
 8014a00:	e7ee      	b.n	80149e0 <__libc_init_array+0xc>
 8014a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014a06:	4798      	blx	r3
 8014a08:	3501      	adds	r5, #1
 8014a0a:	e7f2      	b.n	80149f2 <__libc_init_array+0x1e>
 8014a0c:	08019614 	.word	0x08019614
 8014a10:	08019614 	.word	0x08019614
 8014a14:	08019614 	.word	0x08019614
 8014a18:	0801961c 	.word	0x0801961c

08014a1c <memset>:
 8014a1c:	4402      	add	r2, r0
 8014a1e:	4603      	mov	r3, r0
 8014a20:	4293      	cmp	r3, r2
 8014a22:	d100      	bne.n	8014a26 <memset+0xa>
 8014a24:	4770      	bx	lr
 8014a26:	f803 1b01 	strb.w	r1, [r3], #1
 8014a2a:	e7f9      	b.n	8014a20 <memset+0x4>

08014a2c <__cvt>:
 8014a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a30:	ec55 4b10 	vmov	r4, r5, d0
 8014a34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014a36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014a3a:	2d00      	cmp	r5, #0
 8014a3c:	460e      	mov	r6, r1
 8014a3e:	4691      	mov	r9, r2
 8014a40:	4619      	mov	r1, r3
 8014a42:	bfb8      	it	lt
 8014a44:	4622      	movlt	r2, r4
 8014a46:	462b      	mov	r3, r5
 8014a48:	f027 0720 	bic.w	r7, r7, #32
 8014a4c:	bfbb      	ittet	lt
 8014a4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014a52:	461d      	movlt	r5, r3
 8014a54:	2300      	movge	r3, #0
 8014a56:	232d      	movlt	r3, #45	; 0x2d
 8014a58:	bfb8      	it	lt
 8014a5a:	4614      	movlt	r4, r2
 8014a5c:	2f46      	cmp	r7, #70	; 0x46
 8014a5e:	700b      	strb	r3, [r1, #0]
 8014a60:	d004      	beq.n	8014a6c <__cvt+0x40>
 8014a62:	2f45      	cmp	r7, #69	; 0x45
 8014a64:	d100      	bne.n	8014a68 <__cvt+0x3c>
 8014a66:	3601      	adds	r6, #1
 8014a68:	2102      	movs	r1, #2
 8014a6a:	e000      	b.n	8014a6e <__cvt+0x42>
 8014a6c:	2103      	movs	r1, #3
 8014a6e:	ab03      	add	r3, sp, #12
 8014a70:	9301      	str	r3, [sp, #4]
 8014a72:	ab02      	add	r3, sp, #8
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	4632      	mov	r2, r6
 8014a78:	4653      	mov	r3, sl
 8014a7a:	ec45 4b10 	vmov	d0, r4, r5
 8014a7e:	f001 fdff 	bl	8016680 <_dtoa_r>
 8014a82:	2f47      	cmp	r7, #71	; 0x47
 8014a84:	4680      	mov	r8, r0
 8014a86:	d102      	bne.n	8014a8e <__cvt+0x62>
 8014a88:	f019 0f01 	tst.w	r9, #1
 8014a8c:	d026      	beq.n	8014adc <__cvt+0xb0>
 8014a8e:	2f46      	cmp	r7, #70	; 0x46
 8014a90:	eb08 0906 	add.w	r9, r8, r6
 8014a94:	d111      	bne.n	8014aba <__cvt+0x8e>
 8014a96:	f898 3000 	ldrb.w	r3, [r8]
 8014a9a:	2b30      	cmp	r3, #48	; 0x30
 8014a9c:	d10a      	bne.n	8014ab4 <__cvt+0x88>
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	4629      	mov	r1, r5
 8014aa6:	f7ec f827 	bl	8000af8 <__aeabi_dcmpeq>
 8014aaa:	b918      	cbnz	r0, 8014ab4 <__cvt+0x88>
 8014aac:	f1c6 0601 	rsb	r6, r6, #1
 8014ab0:	f8ca 6000 	str.w	r6, [sl]
 8014ab4:	f8da 3000 	ldr.w	r3, [sl]
 8014ab8:	4499      	add	r9, r3
 8014aba:	2200      	movs	r2, #0
 8014abc:	2300      	movs	r3, #0
 8014abe:	4620      	mov	r0, r4
 8014ac0:	4629      	mov	r1, r5
 8014ac2:	f7ec f819 	bl	8000af8 <__aeabi_dcmpeq>
 8014ac6:	b938      	cbnz	r0, 8014ad8 <__cvt+0xac>
 8014ac8:	2230      	movs	r2, #48	; 0x30
 8014aca:	9b03      	ldr	r3, [sp, #12]
 8014acc:	454b      	cmp	r3, r9
 8014ace:	d205      	bcs.n	8014adc <__cvt+0xb0>
 8014ad0:	1c59      	adds	r1, r3, #1
 8014ad2:	9103      	str	r1, [sp, #12]
 8014ad4:	701a      	strb	r2, [r3, #0]
 8014ad6:	e7f8      	b.n	8014aca <__cvt+0x9e>
 8014ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014adc:	9b03      	ldr	r3, [sp, #12]
 8014ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ae0:	eba3 0308 	sub.w	r3, r3, r8
 8014ae4:	4640      	mov	r0, r8
 8014ae6:	6013      	str	r3, [r2, #0]
 8014ae8:	b004      	add	sp, #16
 8014aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014aee <__exponent>:
 8014aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014af0:	2900      	cmp	r1, #0
 8014af2:	4604      	mov	r4, r0
 8014af4:	bfba      	itte	lt
 8014af6:	4249      	neglt	r1, r1
 8014af8:	232d      	movlt	r3, #45	; 0x2d
 8014afa:	232b      	movge	r3, #43	; 0x2b
 8014afc:	2909      	cmp	r1, #9
 8014afe:	f804 2b02 	strb.w	r2, [r4], #2
 8014b02:	7043      	strb	r3, [r0, #1]
 8014b04:	dd20      	ble.n	8014b48 <__exponent+0x5a>
 8014b06:	f10d 0307 	add.w	r3, sp, #7
 8014b0a:	461f      	mov	r7, r3
 8014b0c:	260a      	movs	r6, #10
 8014b0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014b12:	fb06 1115 	mls	r1, r6, r5, r1
 8014b16:	3130      	adds	r1, #48	; 0x30
 8014b18:	2d09      	cmp	r5, #9
 8014b1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014b1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8014b22:	4629      	mov	r1, r5
 8014b24:	dc09      	bgt.n	8014b3a <__exponent+0x4c>
 8014b26:	3130      	adds	r1, #48	; 0x30
 8014b28:	3b02      	subs	r3, #2
 8014b2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014b2e:	42bb      	cmp	r3, r7
 8014b30:	4622      	mov	r2, r4
 8014b32:	d304      	bcc.n	8014b3e <__exponent+0x50>
 8014b34:	1a10      	subs	r0, r2, r0
 8014b36:	b003      	add	sp, #12
 8014b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b3a:	4613      	mov	r3, r2
 8014b3c:	e7e7      	b.n	8014b0e <__exponent+0x20>
 8014b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b42:	f804 2b01 	strb.w	r2, [r4], #1
 8014b46:	e7f2      	b.n	8014b2e <__exponent+0x40>
 8014b48:	2330      	movs	r3, #48	; 0x30
 8014b4a:	4419      	add	r1, r3
 8014b4c:	7083      	strb	r3, [r0, #2]
 8014b4e:	1d02      	adds	r2, r0, #4
 8014b50:	70c1      	strb	r1, [r0, #3]
 8014b52:	e7ef      	b.n	8014b34 <__exponent+0x46>

08014b54 <_printf_float>:
 8014b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b58:	b08d      	sub	sp, #52	; 0x34
 8014b5a:	460c      	mov	r4, r1
 8014b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014b60:	4616      	mov	r6, r2
 8014b62:	461f      	mov	r7, r3
 8014b64:	4605      	mov	r5, r0
 8014b66:	f002 fe7d 	bl	8017864 <_localeconv_r>
 8014b6a:	6803      	ldr	r3, [r0, #0]
 8014b6c:	9304      	str	r3, [sp, #16]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7eb fb46 	bl	8000200 <strlen>
 8014b74:	2300      	movs	r3, #0
 8014b76:	930a      	str	r3, [sp, #40]	; 0x28
 8014b78:	f8d8 3000 	ldr.w	r3, [r8]
 8014b7c:	9005      	str	r0, [sp, #20]
 8014b7e:	3307      	adds	r3, #7
 8014b80:	f023 0307 	bic.w	r3, r3, #7
 8014b84:	f103 0208 	add.w	r2, r3, #8
 8014b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8014b90:	f8c8 2000 	str.w	r2, [r8]
 8014b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014b9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014ba0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ba4:	9307      	str	r3, [sp, #28]
 8014ba6:	f8cd 8018 	str.w	r8, [sp, #24]
 8014baa:	f04f 32ff 	mov.w	r2, #4294967295
 8014bae:	4ba7      	ldr	r3, [pc, #668]	; (8014e4c <_printf_float+0x2f8>)
 8014bb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014bb4:	f7eb ffd2 	bl	8000b5c <__aeabi_dcmpun>
 8014bb8:	bb70      	cbnz	r0, 8014c18 <_printf_float+0xc4>
 8014bba:	f04f 32ff 	mov.w	r2, #4294967295
 8014bbe:	4ba3      	ldr	r3, [pc, #652]	; (8014e4c <_printf_float+0x2f8>)
 8014bc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014bc4:	f7eb ffac 	bl	8000b20 <__aeabi_dcmple>
 8014bc8:	bb30      	cbnz	r0, 8014c18 <_printf_float+0xc4>
 8014bca:	2200      	movs	r2, #0
 8014bcc:	2300      	movs	r3, #0
 8014bce:	4640      	mov	r0, r8
 8014bd0:	4649      	mov	r1, r9
 8014bd2:	f7eb ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8014bd6:	b110      	cbz	r0, 8014bde <_printf_float+0x8a>
 8014bd8:	232d      	movs	r3, #45	; 0x2d
 8014bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bde:	4a9c      	ldr	r2, [pc, #624]	; (8014e50 <_printf_float+0x2fc>)
 8014be0:	4b9c      	ldr	r3, [pc, #624]	; (8014e54 <_printf_float+0x300>)
 8014be2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014be6:	bf8c      	ite	hi
 8014be8:	4690      	movhi	r8, r2
 8014bea:	4698      	movls	r8, r3
 8014bec:	2303      	movs	r3, #3
 8014bee:	f02b 0204 	bic.w	r2, fp, #4
 8014bf2:	6123      	str	r3, [r4, #16]
 8014bf4:	6022      	str	r2, [r4, #0]
 8014bf6:	f04f 0900 	mov.w	r9, #0
 8014bfa:	9700      	str	r7, [sp, #0]
 8014bfc:	4633      	mov	r3, r6
 8014bfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8014c00:	4621      	mov	r1, r4
 8014c02:	4628      	mov	r0, r5
 8014c04:	f000 f9e6 	bl	8014fd4 <_printf_common>
 8014c08:	3001      	adds	r0, #1
 8014c0a:	f040 808d 	bne.w	8014d28 <_printf_float+0x1d4>
 8014c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c12:	b00d      	add	sp, #52	; 0x34
 8014c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c18:	4642      	mov	r2, r8
 8014c1a:	464b      	mov	r3, r9
 8014c1c:	4640      	mov	r0, r8
 8014c1e:	4649      	mov	r1, r9
 8014c20:	f7eb ff9c 	bl	8000b5c <__aeabi_dcmpun>
 8014c24:	b110      	cbz	r0, 8014c2c <_printf_float+0xd8>
 8014c26:	4a8c      	ldr	r2, [pc, #560]	; (8014e58 <_printf_float+0x304>)
 8014c28:	4b8c      	ldr	r3, [pc, #560]	; (8014e5c <_printf_float+0x308>)
 8014c2a:	e7da      	b.n	8014be2 <_printf_float+0x8e>
 8014c2c:	6861      	ldr	r1, [r4, #4]
 8014c2e:	1c4b      	adds	r3, r1, #1
 8014c30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014c34:	a80a      	add	r0, sp, #40	; 0x28
 8014c36:	d13e      	bne.n	8014cb6 <_printf_float+0x162>
 8014c38:	2306      	movs	r3, #6
 8014c3a:	6063      	str	r3, [r4, #4]
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014c42:	ab09      	add	r3, sp, #36	; 0x24
 8014c44:	9300      	str	r3, [sp, #0]
 8014c46:	ec49 8b10 	vmov	d0, r8, r9
 8014c4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014c4e:	6022      	str	r2, [r4, #0]
 8014c50:	f8cd a004 	str.w	sl, [sp, #4]
 8014c54:	6861      	ldr	r1, [r4, #4]
 8014c56:	4628      	mov	r0, r5
 8014c58:	f7ff fee8 	bl	8014a2c <__cvt>
 8014c5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014c60:	2b47      	cmp	r3, #71	; 0x47
 8014c62:	4680      	mov	r8, r0
 8014c64:	d109      	bne.n	8014c7a <_printf_float+0x126>
 8014c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c68:	1cd8      	adds	r0, r3, #3
 8014c6a:	db02      	blt.n	8014c72 <_printf_float+0x11e>
 8014c6c:	6862      	ldr	r2, [r4, #4]
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	dd47      	ble.n	8014d02 <_printf_float+0x1ae>
 8014c72:	f1aa 0a02 	sub.w	sl, sl, #2
 8014c76:	fa5f fa8a 	uxtb.w	sl, sl
 8014c7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c80:	d824      	bhi.n	8014ccc <_printf_float+0x178>
 8014c82:	3901      	subs	r1, #1
 8014c84:	4652      	mov	r2, sl
 8014c86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014c8a:	9109      	str	r1, [sp, #36]	; 0x24
 8014c8c:	f7ff ff2f 	bl	8014aee <__exponent>
 8014c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c92:	1813      	adds	r3, r2, r0
 8014c94:	2a01      	cmp	r2, #1
 8014c96:	4681      	mov	r9, r0
 8014c98:	6123      	str	r3, [r4, #16]
 8014c9a:	dc02      	bgt.n	8014ca2 <_printf_float+0x14e>
 8014c9c:	6822      	ldr	r2, [r4, #0]
 8014c9e:	07d1      	lsls	r1, r2, #31
 8014ca0:	d501      	bpl.n	8014ca6 <_printf_float+0x152>
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	6123      	str	r3, [r4, #16]
 8014ca6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d0a5      	beq.n	8014bfa <_printf_float+0xa6>
 8014cae:	232d      	movs	r3, #45	; 0x2d
 8014cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cb4:	e7a1      	b.n	8014bfa <_printf_float+0xa6>
 8014cb6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014cba:	f000 8177 	beq.w	8014fac <_printf_float+0x458>
 8014cbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014cc2:	d1bb      	bne.n	8014c3c <_printf_float+0xe8>
 8014cc4:	2900      	cmp	r1, #0
 8014cc6:	d1b9      	bne.n	8014c3c <_printf_float+0xe8>
 8014cc8:	2301      	movs	r3, #1
 8014cca:	e7b6      	b.n	8014c3a <_printf_float+0xe6>
 8014ccc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014cd0:	d119      	bne.n	8014d06 <_printf_float+0x1b2>
 8014cd2:	2900      	cmp	r1, #0
 8014cd4:	6863      	ldr	r3, [r4, #4]
 8014cd6:	dd0c      	ble.n	8014cf2 <_printf_float+0x19e>
 8014cd8:	6121      	str	r1, [r4, #16]
 8014cda:	b913      	cbnz	r3, 8014ce2 <_printf_float+0x18e>
 8014cdc:	6822      	ldr	r2, [r4, #0]
 8014cde:	07d2      	lsls	r2, r2, #31
 8014ce0:	d502      	bpl.n	8014ce8 <_printf_float+0x194>
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	440b      	add	r3, r1
 8014ce6:	6123      	str	r3, [r4, #16]
 8014ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cea:	65a3      	str	r3, [r4, #88]	; 0x58
 8014cec:	f04f 0900 	mov.w	r9, #0
 8014cf0:	e7d9      	b.n	8014ca6 <_printf_float+0x152>
 8014cf2:	b913      	cbnz	r3, 8014cfa <_printf_float+0x1a6>
 8014cf4:	6822      	ldr	r2, [r4, #0]
 8014cf6:	07d0      	lsls	r0, r2, #31
 8014cf8:	d501      	bpl.n	8014cfe <_printf_float+0x1aa>
 8014cfa:	3302      	adds	r3, #2
 8014cfc:	e7f3      	b.n	8014ce6 <_printf_float+0x192>
 8014cfe:	2301      	movs	r3, #1
 8014d00:	e7f1      	b.n	8014ce6 <_printf_float+0x192>
 8014d02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014d06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	db05      	blt.n	8014d1a <_printf_float+0x1c6>
 8014d0e:	6822      	ldr	r2, [r4, #0]
 8014d10:	6123      	str	r3, [r4, #16]
 8014d12:	07d1      	lsls	r1, r2, #31
 8014d14:	d5e8      	bpl.n	8014ce8 <_printf_float+0x194>
 8014d16:	3301      	adds	r3, #1
 8014d18:	e7e5      	b.n	8014ce6 <_printf_float+0x192>
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	bfd4      	ite	le
 8014d1e:	f1c3 0302 	rsble	r3, r3, #2
 8014d22:	2301      	movgt	r3, #1
 8014d24:	4413      	add	r3, r2
 8014d26:	e7de      	b.n	8014ce6 <_printf_float+0x192>
 8014d28:	6823      	ldr	r3, [r4, #0]
 8014d2a:	055a      	lsls	r2, r3, #21
 8014d2c:	d407      	bmi.n	8014d3e <_printf_float+0x1ea>
 8014d2e:	6923      	ldr	r3, [r4, #16]
 8014d30:	4642      	mov	r2, r8
 8014d32:	4631      	mov	r1, r6
 8014d34:	4628      	mov	r0, r5
 8014d36:	47b8      	blx	r7
 8014d38:	3001      	adds	r0, #1
 8014d3a:	d12b      	bne.n	8014d94 <_printf_float+0x240>
 8014d3c:	e767      	b.n	8014c0e <_printf_float+0xba>
 8014d3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014d42:	f240 80dc 	bls.w	8014efe <_printf_float+0x3aa>
 8014d46:	2200      	movs	r2, #0
 8014d48:	2300      	movs	r3, #0
 8014d4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014d4e:	f7eb fed3 	bl	8000af8 <__aeabi_dcmpeq>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d033      	beq.n	8014dbe <_printf_float+0x26a>
 8014d56:	2301      	movs	r3, #1
 8014d58:	4a41      	ldr	r2, [pc, #260]	; (8014e60 <_printf_float+0x30c>)
 8014d5a:	4631      	mov	r1, r6
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	47b8      	blx	r7
 8014d60:	3001      	adds	r0, #1
 8014d62:	f43f af54 	beq.w	8014c0e <_printf_float+0xba>
 8014d66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	db02      	blt.n	8014d74 <_printf_float+0x220>
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	07d8      	lsls	r0, r3, #31
 8014d72:	d50f      	bpl.n	8014d94 <_printf_float+0x240>
 8014d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d78:	4631      	mov	r1, r6
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	47b8      	blx	r7
 8014d7e:	3001      	adds	r0, #1
 8014d80:	f43f af45 	beq.w	8014c0e <_printf_float+0xba>
 8014d84:	f04f 0800 	mov.w	r8, #0
 8014d88:	f104 091a 	add.w	r9, r4, #26
 8014d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d8e:	3b01      	subs	r3, #1
 8014d90:	4543      	cmp	r3, r8
 8014d92:	dc09      	bgt.n	8014da8 <_printf_float+0x254>
 8014d94:	6823      	ldr	r3, [r4, #0]
 8014d96:	079b      	lsls	r3, r3, #30
 8014d98:	f100 8103 	bmi.w	8014fa2 <_printf_float+0x44e>
 8014d9c:	68e0      	ldr	r0, [r4, #12]
 8014d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014da0:	4298      	cmp	r0, r3
 8014da2:	bfb8      	it	lt
 8014da4:	4618      	movlt	r0, r3
 8014da6:	e734      	b.n	8014c12 <_printf_float+0xbe>
 8014da8:	2301      	movs	r3, #1
 8014daa:	464a      	mov	r2, r9
 8014dac:	4631      	mov	r1, r6
 8014dae:	4628      	mov	r0, r5
 8014db0:	47b8      	blx	r7
 8014db2:	3001      	adds	r0, #1
 8014db4:	f43f af2b 	beq.w	8014c0e <_printf_float+0xba>
 8014db8:	f108 0801 	add.w	r8, r8, #1
 8014dbc:	e7e6      	b.n	8014d8c <_printf_float+0x238>
 8014dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	dc2b      	bgt.n	8014e1c <_printf_float+0x2c8>
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	4a26      	ldr	r2, [pc, #152]	; (8014e60 <_printf_float+0x30c>)
 8014dc8:	4631      	mov	r1, r6
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b8      	blx	r7
 8014dce:	3001      	adds	r0, #1
 8014dd0:	f43f af1d 	beq.w	8014c0e <_printf_float+0xba>
 8014dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dd6:	b923      	cbnz	r3, 8014de2 <_printf_float+0x28e>
 8014dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dda:	b913      	cbnz	r3, 8014de2 <_printf_float+0x28e>
 8014ddc:	6823      	ldr	r3, [r4, #0]
 8014dde:	07d9      	lsls	r1, r3, #31
 8014de0:	d5d8      	bpl.n	8014d94 <_printf_float+0x240>
 8014de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014de6:	4631      	mov	r1, r6
 8014de8:	4628      	mov	r0, r5
 8014dea:	47b8      	blx	r7
 8014dec:	3001      	adds	r0, #1
 8014dee:	f43f af0e 	beq.w	8014c0e <_printf_float+0xba>
 8014df2:	f04f 0900 	mov.w	r9, #0
 8014df6:	f104 0a1a 	add.w	sl, r4, #26
 8014dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dfc:	425b      	negs	r3, r3
 8014dfe:	454b      	cmp	r3, r9
 8014e00:	dc01      	bgt.n	8014e06 <_printf_float+0x2b2>
 8014e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e04:	e794      	b.n	8014d30 <_printf_float+0x1dc>
 8014e06:	2301      	movs	r3, #1
 8014e08:	4652      	mov	r2, sl
 8014e0a:	4631      	mov	r1, r6
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	47b8      	blx	r7
 8014e10:	3001      	adds	r0, #1
 8014e12:	f43f aefc 	beq.w	8014c0e <_printf_float+0xba>
 8014e16:	f109 0901 	add.w	r9, r9, #1
 8014e1a:	e7ee      	b.n	8014dfa <_printf_float+0x2a6>
 8014e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014e20:	429a      	cmp	r2, r3
 8014e22:	bfa8      	it	ge
 8014e24:	461a      	movge	r2, r3
 8014e26:	2a00      	cmp	r2, #0
 8014e28:	4691      	mov	r9, r2
 8014e2a:	dd07      	ble.n	8014e3c <_printf_float+0x2e8>
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	4631      	mov	r1, r6
 8014e30:	4642      	mov	r2, r8
 8014e32:	4628      	mov	r0, r5
 8014e34:	47b8      	blx	r7
 8014e36:	3001      	adds	r0, #1
 8014e38:	f43f aee9 	beq.w	8014c0e <_printf_float+0xba>
 8014e3c:	f104 031a 	add.w	r3, r4, #26
 8014e40:	f04f 0b00 	mov.w	fp, #0
 8014e44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e48:	9306      	str	r3, [sp, #24]
 8014e4a:	e015      	b.n	8014e78 <_printf_float+0x324>
 8014e4c:	7fefffff 	.word	0x7fefffff
 8014e50:	080192e0 	.word	0x080192e0
 8014e54:	080192dc 	.word	0x080192dc
 8014e58:	080192e8 	.word	0x080192e8
 8014e5c:	080192e4 	.word	0x080192e4
 8014e60:	080194a3 	.word	0x080194a3
 8014e64:	2301      	movs	r3, #1
 8014e66:	9a06      	ldr	r2, [sp, #24]
 8014e68:	4631      	mov	r1, r6
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	47b8      	blx	r7
 8014e6e:	3001      	adds	r0, #1
 8014e70:	f43f aecd 	beq.w	8014c0e <_printf_float+0xba>
 8014e74:	f10b 0b01 	add.w	fp, fp, #1
 8014e78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014e7c:	ebaa 0309 	sub.w	r3, sl, r9
 8014e80:	455b      	cmp	r3, fp
 8014e82:	dcef      	bgt.n	8014e64 <_printf_float+0x310>
 8014e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	44d0      	add	r8, sl
 8014e8c:	db15      	blt.n	8014eba <_printf_float+0x366>
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	07da      	lsls	r2, r3, #31
 8014e92:	d412      	bmi.n	8014eba <_printf_float+0x366>
 8014e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e98:	eba3 020a 	sub.w	r2, r3, sl
 8014e9c:	eba3 0a01 	sub.w	sl, r3, r1
 8014ea0:	4592      	cmp	sl, r2
 8014ea2:	bfa8      	it	ge
 8014ea4:	4692      	movge	sl, r2
 8014ea6:	f1ba 0f00 	cmp.w	sl, #0
 8014eaa:	dc0e      	bgt.n	8014eca <_printf_float+0x376>
 8014eac:	f04f 0800 	mov.w	r8, #0
 8014eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014eb4:	f104 091a 	add.w	r9, r4, #26
 8014eb8:	e019      	b.n	8014eee <_printf_float+0x39a>
 8014eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ebe:	4631      	mov	r1, r6
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	47b8      	blx	r7
 8014ec4:	3001      	adds	r0, #1
 8014ec6:	d1e5      	bne.n	8014e94 <_printf_float+0x340>
 8014ec8:	e6a1      	b.n	8014c0e <_printf_float+0xba>
 8014eca:	4653      	mov	r3, sl
 8014ecc:	4642      	mov	r2, r8
 8014ece:	4631      	mov	r1, r6
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	47b8      	blx	r7
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	d1e9      	bne.n	8014eac <_printf_float+0x358>
 8014ed8:	e699      	b.n	8014c0e <_printf_float+0xba>
 8014eda:	2301      	movs	r3, #1
 8014edc:	464a      	mov	r2, r9
 8014ede:	4631      	mov	r1, r6
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	47b8      	blx	r7
 8014ee4:	3001      	adds	r0, #1
 8014ee6:	f43f ae92 	beq.w	8014c0e <_printf_float+0xba>
 8014eea:	f108 0801 	add.w	r8, r8, #1
 8014eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ef2:	1a9b      	subs	r3, r3, r2
 8014ef4:	eba3 030a 	sub.w	r3, r3, sl
 8014ef8:	4543      	cmp	r3, r8
 8014efa:	dcee      	bgt.n	8014eda <_printf_float+0x386>
 8014efc:	e74a      	b.n	8014d94 <_printf_float+0x240>
 8014efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f00:	2a01      	cmp	r2, #1
 8014f02:	dc01      	bgt.n	8014f08 <_printf_float+0x3b4>
 8014f04:	07db      	lsls	r3, r3, #31
 8014f06:	d53a      	bpl.n	8014f7e <_printf_float+0x42a>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	4642      	mov	r2, r8
 8014f0c:	4631      	mov	r1, r6
 8014f0e:	4628      	mov	r0, r5
 8014f10:	47b8      	blx	r7
 8014f12:	3001      	adds	r0, #1
 8014f14:	f43f ae7b 	beq.w	8014c0e <_printf_float+0xba>
 8014f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f1c:	4631      	mov	r1, r6
 8014f1e:	4628      	mov	r0, r5
 8014f20:	47b8      	blx	r7
 8014f22:	3001      	adds	r0, #1
 8014f24:	f108 0801 	add.w	r8, r8, #1
 8014f28:	f43f ae71 	beq.w	8014c0e <_printf_float+0xba>
 8014f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f103 3aff 	add.w	sl, r3, #4294967295
 8014f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f38:	2300      	movs	r3, #0
 8014f3a:	f7eb fddd 	bl	8000af8 <__aeabi_dcmpeq>
 8014f3e:	b9c8      	cbnz	r0, 8014f74 <_printf_float+0x420>
 8014f40:	4653      	mov	r3, sl
 8014f42:	4642      	mov	r2, r8
 8014f44:	4631      	mov	r1, r6
 8014f46:	4628      	mov	r0, r5
 8014f48:	47b8      	blx	r7
 8014f4a:	3001      	adds	r0, #1
 8014f4c:	d10e      	bne.n	8014f6c <_printf_float+0x418>
 8014f4e:	e65e      	b.n	8014c0e <_printf_float+0xba>
 8014f50:	2301      	movs	r3, #1
 8014f52:	4652      	mov	r2, sl
 8014f54:	4631      	mov	r1, r6
 8014f56:	4628      	mov	r0, r5
 8014f58:	47b8      	blx	r7
 8014f5a:	3001      	adds	r0, #1
 8014f5c:	f43f ae57 	beq.w	8014c0e <_printf_float+0xba>
 8014f60:	f108 0801 	add.w	r8, r8, #1
 8014f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f66:	3b01      	subs	r3, #1
 8014f68:	4543      	cmp	r3, r8
 8014f6a:	dcf1      	bgt.n	8014f50 <_printf_float+0x3fc>
 8014f6c:	464b      	mov	r3, r9
 8014f6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f72:	e6de      	b.n	8014d32 <_printf_float+0x1de>
 8014f74:	f04f 0800 	mov.w	r8, #0
 8014f78:	f104 0a1a 	add.w	sl, r4, #26
 8014f7c:	e7f2      	b.n	8014f64 <_printf_float+0x410>
 8014f7e:	2301      	movs	r3, #1
 8014f80:	e7df      	b.n	8014f42 <_printf_float+0x3ee>
 8014f82:	2301      	movs	r3, #1
 8014f84:	464a      	mov	r2, r9
 8014f86:	4631      	mov	r1, r6
 8014f88:	4628      	mov	r0, r5
 8014f8a:	47b8      	blx	r7
 8014f8c:	3001      	adds	r0, #1
 8014f8e:	f43f ae3e 	beq.w	8014c0e <_printf_float+0xba>
 8014f92:	f108 0801 	add.w	r8, r8, #1
 8014f96:	68e3      	ldr	r3, [r4, #12]
 8014f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f9a:	1a9b      	subs	r3, r3, r2
 8014f9c:	4543      	cmp	r3, r8
 8014f9e:	dcf0      	bgt.n	8014f82 <_printf_float+0x42e>
 8014fa0:	e6fc      	b.n	8014d9c <_printf_float+0x248>
 8014fa2:	f04f 0800 	mov.w	r8, #0
 8014fa6:	f104 0919 	add.w	r9, r4, #25
 8014faa:	e7f4      	b.n	8014f96 <_printf_float+0x442>
 8014fac:	2900      	cmp	r1, #0
 8014fae:	f43f ae8b 	beq.w	8014cc8 <_printf_float+0x174>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014fb8:	ab09      	add	r3, sp, #36	; 0x24
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	ec49 8b10 	vmov	d0, r8, r9
 8014fc0:	6022      	str	r2, [r4, #0]
 8014fc2:	f8cd a004 	str.w	sl, [sp, #4]
 8014fc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f7ff fd2e 	bl	8014a2c <__cvt>
 8014fd0:	4680      	mov	r8, r0
 8014fd2:	e648      	b.n	8014c66 <_printf_float+0x112>

08014fd4 <_printf_common>:
 8014fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd8:	4691      	mov	r9, r2
 8014fda:	461f      	mov	r7, r3
 8014fdc:	688a      	ldr	r2, [r1, #8]
 8014fde:	690b      	ldr	r3, [r1, #16]
 8014fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014fe4:	4293      	cmp	r3, r2
 8014fe6:	bfb8      	it	lt
 8014fe8:	4613      	movlt	r3, r2
 8014fea:	f8c9 3000 	str.w	r3, [r9]
 8014fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ff2:	4606      	mov	r6, r0
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	b112      	cbz	r2, 8014ffe <_printf_common+0x2a>
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	f8c9 3000 	str.w	r3, [r9]
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	0699      	lsls	r1, r3, #26
 8015002:	bf42      	ittt	mi
 8015004:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015008:	3302      	addmi	r3, #2
 801500a:	f8c9 3000 	strmi.w	r3, [r9]
 801500e:	6825      	ldr	r5, [r4, #0]
 8015010:	f015 0506 	ands.w	r5, r5, #6
 8015014:	d107      	bne.n	8015026 <_printf_common+0x52>
 8015016:	f104 0a19 	add.w	sl, r4, #25
 801501a:	68e3      	ldr	r3, [r4, #12]
 801501c:	f8d9 2000 	ldr.w	r2, [r9]
 8015020:	1a9b      	subs	r3, r3, r2
 8015022:	42ab      	cmp	r3, r5
 8015024:	dc28      	bgt.n	8015078 <_printf_common+0xa4>
 8015026:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801502a:	6822      	ldr	r2, [r4, #0]
 801502c:	3300      	adds	r3, #0
 801502e:	bf18      	it	ne
 8015030:	2301      	movne	r3, #1
 8015032:	0692      	lsls	r2, r2, #26
 8015034:	d42d      	bmi.n	8015092 <_printf_common+0xbe>
 8015036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801503a:	4639      	mov	r1, r7
 801503c:	4630      	mov	r0, r6
 801503e:	47c0      	blx	r8
 8015040:	3001      	adds	r0, #1
 8015042:	d020      	beq.n	8015086 <_printf_common+0xb2>
 8015044:	6823      	ldr	r3, [r4, #0]
 8015046:	68e5      	ldr	r5, [r4, #12]
 8015048:	f8d9 2000 	ldr.w	r2, [r9]
 801504c:	f003 0306 	and.w	r3, r3, #6
 8015050:	2b04      	cmp	r3, #4
 8015052:	bf08      	it	eq
 8015054:	1aad      	subeq	r5, r5, r2
 8015056:	68a3      	ldr	r3, [r4, #8]
 8015058:	6922      	ldr	r2, [r4, #16]
 801505a:	bf0c      	ite	eq
 801505c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015060:	2500      	movne	r5, #0
 8015062:	4293      	cmp	r3, r2
 8015064:	bfc4      	itt	gt
 8015066:	1a9b      	subgt	r3, r3, r2
 8015068:	18ed      	addgt	r5, r5, r3
 801506a:	f04f 0900 	mov.w	r9, #0
 801506e:	341a      	adds	r4, #26
 8015070:	454d      	cmp	r5, r9
 8015072:	d11a      	bne.n	80150aa <_printf_common+0xd6>
 8015074:	2000      	movs	r0, #0
 8015076:	e008      	b.n	801508a <_printf_common+0xb6>
 8015078:	2301      	movs	r3, #1
 801507a:	4652      	mov	r2, sl
 801507c:	4639      	mov	r1, r7
 801507e:	4630      	mov	r0, r6
 8015080:	47c0      	blx	r8
 8015082:	3001      	adds	r0, #1
 8015084:	d103      	bne.n	801508e <_printf_common+0xba>
 8015086:	f04f 30ff 	mov.w	r0, #4294967295
 801508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801508e:	3501      	adds	r5, #1
 8015090:	e7c3      	b.n	801501a <_printf_common+0x46>
 8015092:	18e1      	adds	r1, r4, r3
 8015094:	1c5a      	adds	r2, r3, #1
 8015096:	2030      	movs	r0, #48	; 0x30
 8015098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801509c:	4422      	add	r2, r4
 801509e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80150a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80150a6:	3302      	adds	r3, #2
 80150a8:	e7c5      	b.n	8015036 <_printf_common+0x62>
 80150aa:	2301      	movs	r3, #1
 80150ac:	4622      	mov	r2, r4
 80150ae:	4639      	mov	r1, r7
 80150b0:	4630      	mov	r0, r6
 80150b2:	47c0      	blx	r8
 80150b4:	3001      	adds	r0, #1
 80150b6:	d0e6      	beq.n	8015086 <_printf_common+0xb2>
 80150b8:	f109 0901 	add.w	r9, r9, #1
 80150bc:	e7d8      	b.n	8015070 <_printf_common+0x9c>
	...

080150c0 <_printf_i>:
 80150c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80150c8:	460c      	mov	r4, r1
 80150ca:	7e09      	ldrb	r1, [r1, #24]
 80150cc:	b085      	sub	sp, #20
 80150ce:	296e      	cmp	r1, #110	; 0x6e
 80150d0:	4617      	mov	r7, r2
 80150d2:	4606      	mov	r6, r0
 80150d4:	4698      	mov	r8, r3
 80150d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150d8:	f000 80b3 	beq.w	8015242 <_printf_i+0x182>
 80150dc:	d822      	bhi.n	8015124 <_printf_i+0x64>
 80150de:	2963      	cmp	r1, #99	; 0x63
 80150e0:	d036      	beq.n	8015150 <_printf_i+0x90>
 80150e2:	d80a      	bhi.n	80150fa <_printf_i+0x3a>
 80150e4:	2900      	cmp	r1, #0
 80150e6:	f000 80b9 	beq.w	801525c <_printf_i+0x19c>
 80150ea:	2958      	cmp	r1, #88	; 0x58
 80150ec:	f000 8083 	beq.w	80151f6 <_printf_i+0x136>
 80150f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80150f8:	e032      	b.n	8015160 <_printf_i+0xa0>
 80150fa:	2964      	cmp	r1, #100	; 0x64
 80150fc:	d001      	beq.n	8015102 <_printf_i+0x42>
 80150fe:	2969      	cmp	r1, #105	; 0x69
 8015100:	d1f6      	bne.n	80150f0 <_printf_i+0x30>
 8015102:	6820      	ldr	r0, [r4, #0]
 8015104:	6813      	ldr	r3, [r2, #0]
 8015106:	0605      	lsls	r5, r0, #24
 8015108:	f103 0104 	add.w	r1, r3, #4
 801510c:	d52a      	bpl.n	8015164 <_printf_i+0xa4>
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	6011      	str	r1, [r2, #0]
 8015112:	2b00      	cmp	r3, #0
 8015114:	da03      	bge.n	801511e <_printf_i+0x5e>
 8015116:	222d      	movs	r2, #45	; 0x2d
 8015118:	425b      	negs	r3, r3
 801511a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801511e:	486f      	ldr	r0, [pc, #444]	; (80152dc <_printf_i+0x21c>)
 8015120:	220a      	movs	r2, #10
 8015122:	e039      	b.n	8015198 <_printf_i+0xd8>
 8015124:	2973      	cmp	r1, #115	; 0x73
 8015126:	f000 809d 	beq.w	8015264 <_printf_i+0x1a4>
 801512a:	d808      	bhi.n	801513e <_printf_i+0x7e>
 801512c:	296f      	cmp	r1, #111	; 0x6f
 801512e:	d020      	beq.n	8015172 <_printf_i+0xb2>
 8015130:	2970      	cmp	r1, #112	; 0x70
 8015132:	d1dd      	bne.n	80150f0 <_printf_i+0x30>
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	f043 0320 	orr.w	r3, r3, #32
 801513a:	6023      	str	r3, [r4, #0]
 801513c:	e003      	b.n	8015146 <_printf_i+0x86>
 801513e:	2975      	cmp	r1, #117	; 0x75
 8015140:	d017      	beq.n	8015172 <_printf_i+0xb2>
 8015142:	2978      	cmp	r1, #120	; 0x78
 8015144:	d1d4      	bne.n	80150f0 <_printf_i+0x30>
 8015146:	2378      	movs	r3, #120	; 0x78
 8015148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801514c:	4864      	ldr	r0, [pc, #400]	; (80152e0 <_printf_i+0x220>)
 801514e:	e055      	b.n	80151fc <_printf_i+0x13c>
 8015150:	6813      	ldr	r3, [r2, #0]
 8015152:	1d19      	adds	r1, r3, #4
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	6011      	str	r1, [r2, #0]
 8015158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801515c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015160:	2301      	movs	r3, #1
 8015162:	e08c      	b.n	801527e <_printf_i+0x1be>
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	6011      	str	r1, [r2, #0]
 8015168:	f010 0f40 	tst.w	r0, #64	; 0x40
 801516c:	bf18      	it	ne
 801516e:	b21b      	sxthne	r3, r3
 8015170:	e7cf      	b.n	8015112 <_printf_i+0x52>
 8015172:	6813      	ldr	r3, [r2, #0]
 8015174:	6825      	ldr	r5, [r4, #0]
 8015176:	1d18      	adds	r0, r3, #4
 8015178:	6010      	str	r0, [r2, #0]
 801517a:	0628      	lsls	r0, r5, #24
 801517c:	d501      	bpl.n	8015182 <_printf_i+0xc2>
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	e002      	b.n	8015188 <_printf_i+0xc8>
 8015182:	0668      	lsls	r0, r5, #25
 8015184:	d5fb      	bpl.n	801517e <_printf_i+0xbe>
 8015186:	881b      	ldrh	r3, [r3, #0]
 8015188:	4854      	ldr	r0, [pc, #336]	; (80152dc <_printf_i+0x21c>)
 801518a:	296f      	cmp	r1, #111	; 0x6f
 801518c:	bf14      	ite	ne
 801518e:	220a      	movne	r2, #10
 8015190:	2208      	moveq	r2, #8
 8015192:	2100      	movs	r1, #0
 8015194:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015198:	6865      	ldr	r5, [r4, #4]
 801519a:	60a5      	str	r5, [r4, #8]
 801519c:	2d00      	cmp	r5, #0
 801519e:	f2c0 8095 	blt.w	80152cc <_printf_i+0x20c>
 80151a2:	6821      	ldr	r1, [r4, #0]
 80151a4:	f021 0104 	bic.w	r1, r1, #4
 80151a8:	6021      	str	r1, [r4, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d13d      	bne.n	801522a <_printf_i+0x16a>
 80151ae:	2d00      	cmp	r5, #0
 80151b0:	f040 808e 	bne.w	80152d0 <_printf_i+0x210>
 80151b4:	4665      	mov	r5, ip
 80151b6:	2a08      	cmp	r2, #8
 80151b8:	d10b      	bne.n	80151d2 <_printf_i+0x112>
 80151ba:	6823      	ldr	r3, [r4, #0]
 80151bc:	07db      	lsls	r3, r3, #31
 80151be:	d508      	bpl.n	80151d2 <_printf_i+0x112>
 80151c0:	6923      	ldr	r3, [r4, #16]
 80151c2:	6862      	ldr	r2, [r4, #4]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	bfde      	ittt	le
 80151c8:	2330      	movle	r3, #48	; 0x30
 80151ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80151ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80151d2:	ebac 0305 	sub.w	r3, ip, r5
 80151d6:	6123      	str	r3, [r4, #16]
 80151d8:	f8cd 8000 	str.w	r8, [sp]
 80151dc:	463b      	mov	r3, r7
 80151de:	aa03      	add	r2, sp, #12
 80151e0:	4621      	mov	r1, r4
 80151e2:	4630      	mov	r0, r6
 80151e4:	f7ff fef6 	bl	8014fd4 <_printf_common>
 80151e8:	3001      	adds	r0, #1
 80151ea:	d14d      	bne.n	8015288 <_printf_i+0x1c8>
 80151ec:	f04f 30ff 	mov.w	r0, #4294967295
 80151f0:	b005      	add	sp, #20
 80151f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151f6:	4839      	ldr	r0, [pc, #228]	; (80152dc <_printf_i+0x21c>)
 80151f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80151fc:	6813      	ldr	r3, [r2, #0]
 80151fe:	6821      	ldr	r1, [r4, #0]
 8015200:	1d1d      	adds	r5, r3, #4
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	6015      	str	r5, [r2, #0]
 8015206:	060a      	lsls	r2, r1, #24
 8015208:	d50b      	bpl.n	8015222 <_printf_i+0x162>
 801520a:	07ca      	lsls	r2, r1, #31
 801520c:	bf44      	itt	mi
 801520e:	f041 0120 	orrmi.w	r1, r1, #32
 8015212:	6021      	strmi	r1, [r4, #0]
 8015214:	b91b      	cbnz	r3, 801521e <_printf_i+0x15e>
 8015216:	6822      	ldr	r2, [r4, #0]
 8015218:	f022 0220 	bic.w	r2, r2, #32
 801521c:	6022      	str	r2, [r4, #0]
 801521e:	2210      	movs	r2, #16
 8015220:	e7b7      	b.n	8015192 <_printf_i+0xd2>
 8015222:	064d      	lsls	r5, r1, #25
 8015224:	bf48      	it	mi
 8015226:	b29b      	uxthmi	r3, r3
 8015228:	e7ef      	b.n	801520a <_printf_i+0x14a>
 801522a:	4665      	mov	r5, ip
 801522c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015230:	fb02 3311 	mls	r3, r2, r1, r3
 8015234:	5cc3      	ldrb	r3, [r0, r3]
 8015236:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801523a:	460b      	mov	r3, r1
 801523c:	2900      	cmp	r1, #0
 801523e:	d1f5      	bne.n	801522c <_printf_i+0x16c>
 8015240:	e7b9      	b.n	80151b6 <_printf_i+0xf6>
 8015242:	6813      	ldr	r3, [r2, #0]
 8015244:	6825      	ldr	r5, [r4, #0]
 8015246:	6961      	ldr	r1, [r4, #20]
 8015248:	1d18      	adds	r0, r3, #4
 801524a:	6010      	str	r0, [r2, #0]
 801524c:	0628      	lsls	r0, r5, #24
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	d501      	bpl.n	8015256 <_printf_i+0x196>
 8015252:	6019      	str	r1, [r3, #0]
 8015254:	e002      	b.n	801525c <_printf_i+0x19c>
 8015256:	066a      	lsls	r2, r5, #25
 8015258:	d5fb      	bpl.n	8015252 <_printf_i+0x192>
 801525a:	8019      	strh	r1, [r3, #0]
 801525c:	2300      	movs	r3, #0
 801525e:	6123      	str	r3, [r4, #16]
 8015260:	4665      	mov	r5, ip
 8015262:	e7b9      	b.n	80151d8 <_printf_i+0x118>
 8015264:	6813      	ldr	r3, [r2, #0]
 8015266:	1d19      	adds	r1, r3, #4
 8015268:	6011      	str	r1, [r2, #0]
 801526a:	681d      	ldr	r5, [r3, #0]
 801526c:	6862      	ldr	r2, [r4, #4]
 801526e:	2100      	movs	r1, #0
 8015270:	4628      	mov	r0, r5
 8015272:	f7ea ffcd 	bl	8000210 <memchr>
 8015276:	b108      	cbz	r0, 801527c <_printf_i+0x1bc>
 8015278:	1b40      	subs	r0, r0, r5
 801527a:	6060      	str	r0, [r4, #4]
 801527c:	6863      	ldr	r3, [r4, #4]
 801527e:	6123      	str	r3, [r4, #16]
 8015280:	2300      	movs	r3, #0
 8015282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015286:	e7a7      	b.n	80151d8 <_printf_i+0x118>
 8015288:	6923      	ldr	r3, [r4, #16]
 801528a:	462a      	mov	r2, r5
 801528c:	4639      	mov	r1, r7
 801528e:	4630      	mov	r0, r6
 8015290:	47c0      	blx	r8
 8015292:	3001      	adds	r0, #1
 8015294:	d0aa      	beq.n	80151ec <_printf_i+0x12c>
 8015296:	6823      	ldr	r3, [r4, #0]
 8015298:	079b      	lsls	r3, r3, #30
 801529a:	d413      	bmi.n	80152c4 <_printf_i+0x204>
 801529c:	68e0      	ldr	r0, [r4, #12]
 801529e:	9b03      	ldr	r3, [sp, #12]
 80152a0:	4298      	cmp	r0, r3
 80152a2:	bfb8      	it	lt
 80152a4:	4618      	movlt	r0, r3
 80152a6:	e7a3      	b.n	80151f0 <_printf_i+0x130>
 80152a8:	2301      	movs	r3, #1
 80152aa:	464a      	mov	r2, r9
 80152ac:	4639      	mov	r1, r7
 80152ae:	4630      	mov	r0, r6
 80152b0:	47c0      	blx	r8
 80152b2:	3001      	adds	r0, #1
 80152b4:	d09a      	beq.n	80151ec <_printf_i+0x12c>
 80152b6:	3501      	adds	r5, #1
 80152b8:	68e3      	ldr	r3, [r4, #12]
 80152ba:	9a03      	ldr	r2, [sp, #12]
 80152bc:	1a9b      	subs	r3, r3, r2
 80152be:	42ab      	cmp	r3, r5
 80152c0:	dcf2      	bgt.n	80152a8 <_printf_i+0x1e8>
 80152c2:	e7eb      	b.n	801529c <_printf_i+0x1dc>
 80152c4:	2500      	movs	r5, #0
 80152c6:	f104 0919 	add.w	r9, r4, #25
 80152ca:	e7f5      	b.n	80152b8 <_printf_i+0x1f8>
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d1ac      	bne.n	801522a <_printf_i+0x16a>
 80152d0:	7803      	ldrb	r3, [r0, #0]
 80152d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80152d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152da:	e76c      	b.n	80151b6 <_printf_i+0xf6>
 80152dc:	080192ec 	.word	0x080192ec
 80152e0:	080192fd 	.word	0x080192fd

080152e4 <_scanf_float>:
 80152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e8:	469a      	mov	sl, r3
 80152ea:	688b      	ldr	r3, [r1, #8]
 80152ec:	4616      	mov	r6, r2
 80152ee:	1e5a      	subs	r2, r3, #1
 80152f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80152f4:	b087      	sub	sp, #28
 80152f6:	bf83      	ittte	hi
 80152f8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80152fc:	189b      	addhi	r3, r3, r2
 80152fe:	9301      	strhi	r3, [sp, #4]
 8015300:	2300      	movls	r3, #0
 8015302:	bf86      	itte	hi
 8015304:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015308:	608b      	strhi	r3, [r1, #8]
 801530a:	9301      	strls	r3, [sp, #4]
 801530c:	680b      	ldr	r3, [r1, #0]
 801530e:	4688      	mov	r8, r1
 8015310:	f04f 0b00 	mov.w	fp, #0
 8015314:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015318:	f848 3b1c 	str.w	r3, [r8], #28
 801531c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015320:	4607      	mov	r7, r0
 8015322:	460c      	mov	r4, r1
 8015324:	4645      	mov	r5, r8
 8015326:	465a      	mov	r2, fp
 8015328:	46d9      	mov	r9, fp
 801532a:	f8cd b008 	str.w	fp, [sp, #8]
 801532e:	68a1      	ldr	r1, [r4, #8]
 8015330:	b181      	cbz	r1, 8015354 <_scanf_float+0x70>
 8015332:	6833      	ldr	r3, [r6, #0]
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	2b49      	cmp	r3, #73	; 0x49
 8015338:	d071      	beq.n	801541e <_scanf_float+0x13a>
 801533a:	d84d      	bhi.n	80153d8 <_scanf_float+0xf4>
 801533c:	2b39      	cmp	r3, #57	; 0x39
 801533e:	d840      	bhi.n	80153c2 <_scanf_float+0xde>
 8015340:	2b31      	cmp	r3, #49	; 0x31
 8015342:	f080 8088 	bcs.w	8015456 <_scanf_float+0x172>
 8015346:	2b2d      	cmp	r3, #45	; 0x2d
 8015348:	f000 8090 	beq.w	801546c <_scanf_float+0x188>
 801534c:	d815      	bhi.n	801537a <_scanf_float+0x96>
 801534e:	2b2b      	cmp	r3, #43	; 0x2b
 8015350:	f000 808c 	beq.w	801546c <_scanf_float+0x188>
 8015354:	f1b9 0f00 	cmp.w	r9, #0
 8015358:	d003      	beq.n	8015362 <_scanf_float+0x7e>
 801535a:	6823      	ldr	r3, [r4, #0]
 801535c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015360:	6023      	str	r3, [r4, #0]
 8015362:	3a01      	subs	r2, #1
 8015364:	2a01      	cmp	r2, #1
 8015366:	f200 80ea 	bhi.w	801553e <_scanf_float+0x25a>
 801536a:	4545      	cmp	r5, r8
 801536c:	f200 80dc 	bhi.w	8015528 <_scanf_float+0x244>
 8015370:	2601      	movs	r6, #1
 8015372:	4630      	mov	r0, r6
 8015374:	b007      	add	sp, #28
 8015376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801537a:	2b2e      	cmp	r3, #46	; 0x2e
 801537c:	f000 809f 	beq.w	80154be <_scanf_float+0x1da>
 8015380:	2b30      	cmp	r3, #48	; 0x30
 8015382:	d1e7      	bne.n	8015354 <_scanf_float+0x70>
 8015384:	6820      	ldr	r0, [r4, #0]
 8015386:	f410 7f80 	tst.w	r0, #256	; 0x100
 801538a:	d064      	beq.n	8015456 <_scanf_float+0x172>
 801538c:	9b01      	ldr	r3, [sp, #4]
 801538e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015392:	6020      	str	r0, [r4, #0]
 8015394:	f109 0901 	add.w	r9, r9, #1
 8015398:	b11b      	cbz	r3, 80153a2 <_scanf_float+0xbe>
 801539a:	3b01      	subs	r3, #1
 801539c:	3101      	adds	r1, #1
 801539e:	9301      	str	r3, [sp, #4]
 80153a0:	60a1      	str	r1, [r4, #8]
 80153a2:	68a3      	ldr	r3, [r4, #8]
 80153a4:	3b01      	subs	r3, #1
 80153a6:	60a3      	str	r3, [r4, #8]
 80153a8:	6923      	ldr	r3, [r4, #16]
 80153aa:	3301      	adds	r3, #1
 80153ac:	6123      	str	r3, [r4, #16]
 80153ae:	6873      	ldr	r3, [r6, #4]
 80153b0:	3b01      	subs	r3, #1
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	6073      	str	r3, [r6, #4]
 80153b6:	f340 80ac 	ble.w	8015512 <_scanf_float+0x22e>
 80153ba:	6833      	ldr	r3, [r6, #0]
 80153bc:	3301      	adds	r3, #1
 80153be:	6033      	str	r3, [r6, #0]
 80153c0:	e7b5      	b.n	801532e <_scanf_float+0x4a>
 80153c2:	2b45      	cmp	r3, #69	; 0x45
 80153c4:	f000 8085 	beq.w	80154d2 <_scanf_float+0x1ee>
 80153c8:	2b46      	cmp	r3, #70	; 0x46
 80153ca:	d06a      	beq.n	80154a2 <_scanf_float+0x1be>
 80153cc:	2b41      	cmp	r3, #65	; 0x41
 80153ce:	d1c1      	bne.n	8015354 <_scanf_float+0x70>
 80153d0:	2a01      	cmp	r2, #1
 80153d2:	d1bf      	bne.n	8015354 <_scanf_float+0x70>
 80153d4:	2202      	movs	r2, #2
 80153d6:	e046      	b.n	8015466 <_scanf_float+0x182>
 80153d8:	2b65      	cmp	r3, #101	; 0x65
 80153da:	d07a      	beq.n	80154d2 <_scanf_float+0x1ee>
 80153dc:	d818      	bhi.n	8015410 <_scanf_float+0x12c>
 80153de:	2b54      	cmp	r3, #84	; 0x54
 80153e0:	d066      	beq.n	80154b0 <_scanf_float+0x1cc>
 80153e2:	d811      	bhi.n	8015408 <_scanf_float+0x124>
 80153e4:	2b4e      	cmp	r3, #78	; 0x4e
 80153e6:	d1b5      	bne.n	8015354 <_scanf_float+0x70>
 80153e8:	2a00      	cmp	r2, #0
 80153ea:	d146      	bne.n	801547a <_scanf_float+0x196>
 80153ec:	f1b9 0f00 	cmp.w	r9, #0
 80153f0:	d145      	bne.n	801547e <_scanf_float+0x19a>
 80153f2:	6821      	ldr	r1, [r4, #0]
 80153f4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80153f8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80153fc:	d13f      	bne.n	801547e <_scanf_float+0x19a>
 80153fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015402:	6021      	str	r1, [r4, #0]
 8015404:	2201      	movs	r2, #1
 8015406:	e02e      	b.n	8015466 <_scanf_float+0x182>
 8015408:	2b59      	cmp	r3, #89	; 0x59
 801540a:	d01e      	beq.n	801544a <_scanf_float+0x166>
 801540c:	2b61      	cmp	r3, #97	; 0x61
 801540e:	e7de      	b.n	80153ce <_scanf_float+0xea>
 8015410:	2b6e      	cmp	r3, #110	; 0x6e
 8015412:	d0e9      	beq.n	80153e8 <_scanf_float+0x104>
 8015414:	d815      	bhi.n	8015442 <_scanf_float+0x15e>
 8015416:	2b66      	cmp	r3, #102	; 0x66
 8015418:	d043      	beq.n	80154a2 <_scanf_float+0x1be>
 801541a:	2b69      	cmp	r3, #105	; 0x69
 801541c:	d19a      	bne.n	8015354 <_scanf_float+0x70>
 801541e:	f1bb 0f00 	cmp.w	fp, #0
 8015422:	d138      	bne.n	8015496 <_scanf_float+0x1b2>
 8015424:	f1b9 0f00 	cmp.w	r9, #0
 8015428:	d197      	bne.n	801535a <_scanf_float+0x76>
 801542a:	6821      	ldr	r1, [r4, #0]
 801542c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015430:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015434:	d195      	bne.n	8015362 <_scanf_float+0x7e>
 8015436:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801543a:	6021      	str	r1, [r4, #0]
 801543c:	f04f 0b01 	mov.w	fp, #1
 8015440:	e011      	b.n	8015466 <_scanf_float+0x182>
 8015442:	2b74      	cmp	r3, #116	; 0x74
 8015444:	d034      	beq.n	80154b0 <_scanf_float+0x1cc>
 8015446:	2b79      	cmp	r3, #121	; 0x79
 8015448:	d184      	bne.n	8015354 <_scanf_float+0x70>
 801544a:	f1bb 0f07 	cmp.w	fp, #7
 801544e:	d181      	bne.n	8015354 <_scanf_float+0x70>
 8015450:	f04f 0b08 	mov.w	fp, #8
 8015454:	e007      	b.n	8015466 <_scanf_float+0x182>
 8015456:	eb12 0f0b 	cmn.w	r2, fp
 801545a:	f47f af7b 	bne.w	8015354 <_scanf_float+0x70>
 801545e:	6821      	ldr	r1, [r4, #0]
 8015460:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015464:	6021      	str	r1, [r4, #0]
 8015466:	702b      	strb	r3, [r5, #0]
 8015468:	3501      	adds	r5, #1
 801546a:	e79a      	b.n	80153a2 <_scanf_float+0xbe>
 801546c:	6821      	ldr	r1, [r4, #0]
 801546e:	0608      	lsls	r0, r1, #24
 8015470:	f57f af70 	bpl.w	8015354 <_scanf_float+0x70>
 8015474:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015478:	e7f4      	b.n	8015464 <_scanf_float+0x180>
 801547a:	2a02      	cmp	r2, #2
 801547c:	d047      	beq.n	801550e <_scanf_float+0x22a>
 801547e:	f1bb 0f01 	cmp.w	fp, #1
 8015482:	d003      	beq.n	801548c <_scanf_float+0x1a8>
 8015484:	f1bb 0f04 	cmp.w	fp, #4
 8015488:	f47f af64 	bne.w	8015354 <_scanf_float+0x70>
 801548c:	f10b 0b01 	add.w	fp, fp, #1
 8015490:	fa5f fb8b 	uxtb.w	fp, fp
 8015494:	e7e7      	b.n	8015466 <_scanf_float+0x182>
 8015496:	f1bb 0f03 	cmp.w	fp, #3
 801549a:	d0f7      	beq.n	801548c <_scanf_float+0x1a8>
 801549c:	f1bb 0f05 	cmp.w	fp, #5
 80154a0:	e7f2      	b.n	8015488 <_scanf_float+0x1a4>
 80154a2:	f1bb 0f02 	cmp.w	fp, #2
 80154a6:	f47f af55 	bne.w	8015354 <_scanf_float+0x70>
 80154aa:	f04f 0b03 	mov.w	fp, #3
 80154ae:	e7da      	b.n	8015466 <_scanf_float+0x182>
 80154b0:	f1bb 0f06 	cmp.w	fp, #6
 80154b4:	f47f af4e 	bne.w	8015354 <_scanf_float+0x70>
 80154b8:	f04f 0b07 	mov.w	fp, #7
 80154bc:	e7d3      	b.n	8015466 <_scanf_float+0x182>
 80154be:	6821      	ldr	r1, [r4, #0]
 80154c0:	0588      	lsls	r0, r1, #22
 80154c2:	f57f af47 	bpl.w	8015354 <_scanf_float+0x70>
 80154c6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80154ca:	6021      	str	r1, [r4, #0]
 80154cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80154d0:	e7c9      	b.n	8015466 <_scanf_float+0x182>
 80154d2:	6821      	ldr	r1, [r4, #0]
 80154d4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80154d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80154dc:	d006      	beq.n	80154ec <_scanf_float+0x208>
 80154de:	0548      	lsls	r0, r1, #21
 80154e0:	f57f af38 	bpl.w	8015354 <_scanf_float+0x70>
 80154e4:	f1b9 0f00 	cmp.w	r9, #0
 80154e8:	f43f af3b 	beq.w	8015362 <_scanf_float+0x7e>
 80154ec:	0588      	lsls	r0, r1, #22
 80154ee:	bf58      	it	pl
 80154f0:	9802      	ldrpl	r0, [sp, #8]
 80154f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80154f6:	bf58      	it	pl
 80154f8:	eba9 0000 	subpl.w	r0, r9, r0
 80154fc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015500:	bf58      	it	pl
 8015502:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015506:	6021      	str	r1, [r4, #0]
 8015508:	f04f 0900 	mov.w	r9, #0
 801550c:	e7ab      	b.n	8015466 <_scanf_float+0x182>
 801550e:	2203      	movs	r2, #3
 8015510:	e7a9      	b.n	8015466 <_scanf_float+0x182>
 8015512:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015516:	9205      	str	r2, [sp, #20]
 8015518:	4631      	mov	r1, r6
 801551a:	4638      	mov	r0, r7
 801551c:	4798      	blx	r3
 801551e:	9a05      	ldr	r2, [sp, #20]
 8015520:	2800      	cmp	r0, #0
 8015522:	f43f af04 	beq.w	801532e <_scanf_float+0x4a>
 8015526:	e715      	b.n	8015354 <_scanf_float+0x70>
 8015528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801552c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015530:	4632      	mov	r2, r6
 8015532:	4638      	mov	r0, r7
 8015534:	4798      	blx	r3
 8015536:	6923      	ldr	r3, [r4, #16]
 8015538:	3b01      	subs	r3, #1
 801553a:	6123      	str	r3, [r4, #16]
 801553c:	e715      	b.n	801536a <_scanf_float+0x86>
 801553e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015542:	2b06      	cmp	r3, #6
 8015544:	d80a      	bhi.n	801555c <_scanf_float+0x278>
 8015546:	f1bb 0f02 	cmp.w	fp, #2
 801554a:	d968      	bls.n	801561e <_scanf_float+0x33a>
 801554c:	f1ab 0b03 	sub.w	fp, fp, #3
 8015550:	fa5f fb8b 	uxtb.w	fp, fp
 8015554:	eba5 0b0b 	sub.w	fp, r5, fp
 8015558:	455d      	cmp	r5, fp
 801555a:	d14b      	bne.n	80155f4 <_scanf_float+0x310>
 801555c:	6823      	ldr	r3, [r4, #0]
 801555e:	05da      	lsls	r2, r3, #23
 8015560:	d51f      	bpl.n	80155a2 <_scanf_float+0x2be>
 8015562:	055b      	lsls	r3, r3, #21
 8015564:	d468      	bmi.n	8015638 <_scanf_float+0x354>
 8015566:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801556a:	6923      	ldr	r3, [r4, #16]
 801556c:	2965      	cmp	r1, #101	; 0x65
 801556e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015572:	f105 3bff 	add.w	fp, r5, #4294967295
 8015576:	6123      	str	r3, [r4, #16]
 8015578:	d00d      	beq.n	8015596 <_scanf_float+0x2b2>
 801557a:	2945      	cmp	r1, #69	; 0x45
 801557c:	d00b      	beq.n	8015596 <_scanf_float+0x2b2>
 801557e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015582:	4632      	mov	r2, r6
 8015584:	4638      	mov	r0, r7
 8015586:	4798      	blx	r3
 8015588:	6923      	ldr	r3, [r4, #16]
 801558a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801558e:	3b01      	subs	r3, #1
 8015590:	f1a5 0b02 	sub.w	fp, r5, #2
 8015594:	6123      	str	r3, [r4, #16]
 8015596:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801559a:	4632      	mov	r2, r6
 801559c:	4638      	mov	r0, r7
 801559e:	4798      	blx	r3
 80155a0:	465d      	mov	r5, fp
 80155a2:	6826      	ldr	r6, [r4, #0]
 80155a4:	f016 0610 	ands.w	r6, r6, #16
 80155a8:	d17a      	bne.n	80156a0 <_scanf_float+0x3bc>
 80155aa:	702e      	strb	r6, [r5, #0]
 80155ac:	6823      	ldr	r3, [r4, #0]
 80155ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80155b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80155b6:	d142      	bne.n	801563e <_scanf_float+0x35a>
 80155b8:	9b02      	ldr	r3, [sp, #8]
 80155ba:	eba9 0303 	sub.w	r3, r9, r3
 80155be:	425a      	negs	r2, r3
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d149      	bne.n	8015658 <_scanf_float+0x374>
 80155c4:	2200      	movs	r2, #0
 80155c6:	4641      	mov	r1, r8
 80155c8:	4638      	mov	r0, r7
 80155ca:	f000 ff0d 	bl	80163e8 <_strtod_r>
 80155ce:	6825      	ldr	r5, [r4, #0]
 80155d0:	f8da 3000 	ldr.w	r3, [sl]
 80155d4:	f015 0f02 	tst.w	r5, #2
 80155d8:	f103 0204 	add.w	r2, r3, #4
 80155dc:	ec59 8b10 	vmov	r8, r9, d0
 80155e0:	f8ca 2000 	str.w	r2, [sl]
 80155e4:	d043      	beq.n	801566e <_scanf_float+0x38a>
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	e9c3 8900 	strd	r8, r9, [r3]
 80155ec:	68e3      	ldr	r3, [r4, #12]
 80155ee:	3301      	adds	r3, #1
 80155f0:	60e3      	str	r3, [r4, #12]
 80155f2:	e6be      	b.n	8015372 <_scanf_float+0x8e>
 80155f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80155fc:	4632      	mov	r2, r6
 80155fe:	4638      	mov	r0, r7
 8015600:	4798      	blx	r3
 8015602:	6923      	ldr	r3, [r4, #16]
 8015604:	3b01      	subs	r3, #1
 8015606:	6123      	str	r3, [r4, #16]
 8015608:	e7a6      	b.n	8015558 <_scanf_float+0x274>
 801560a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801560e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015612:	4632      	mov	r2, r6
 8015614:	4638      	mov	r0, r7
 8015616:	4798      	blx	r3
 8015618:	6923      	ldr	r3, [r4, #16]
 801561a:	3b01      	subs	r3, #1
 801561c:	6123      	str	r3, [r4, #16]
 801561e:	4545      	cmp	r5, r8
 8015620:	d8f3      	bhi.n	801560a <_scanf_float+0x326>
 8015622:	e6a5      	b.n	8015370 <_scanf_float+0x8c>
 8015624:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015628:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801562c:	4632      	mov	r2, r6
 801562e:	4638      	mov	r0, r7
 8015630:	4798      	blx	r3
 8015632:	6923      	ldr	r3, [r4, #16]
 8015634:	3b01      	subs	r3, #1
 8015636:	6123      	str	r3, [r4, #16]
 8015638:	4545      	cmp	r5, r8
 801563a:	d8f3      	bhi.n	8015624 <_scanf_float+0x340>
 801563c:	e698      	b.n	8015370 <_scanf_float+0x8c>
 801563e:	9b03      	ldr	r3, [sp, #12]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d0bf      	beq.n	80155c4 <_scanf_float+0x2e0>
 8015644:	9904      	ldr	r1, [sp, #16]
 8015646:	230a      	movs	r3, #10
 8015648:	4632      	mov	r2, r6
 801564a:	3101      	adds	r1, #1
 801564c:	4638      	mov	r0, r7
 801564e:	f000 ff57 	bl	8016500 <_strtol_r>
 8015652:	9b03      	ldr	r3, [sp, #12]
 8015654:	9d04      	ldr	r5, [sp, #16]
 8015656:	1ac2      	subs	r2, r0, r3
 8015658:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801565c:	429d      	cmp	r5, r3
 801565e:	bf28      	it	cs
 8015660:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015664:	490f      	ldr	r1, [pc, #60]	; (80156a4 <_scanf_float+0x3c0>)
 8015666:	4628      	mov	r0, r5
 8015668:	f000 f858 	bl	801571c <siprintf>
 801566c:	e7aa      	b.n	80155c4 <_scanf_float+0x2e0>
 801566e:	f015 0504 	ands.w	r5, r5, #4
 8015672:	d1b8      	bne.n	80155e6 <_scanf_float+0x302>
 8015674:	681f      	ldr	r7, [r3, #0]
 8015676:	ee10 2a10 	vmov	r2, s0
 801567a:	464b      	mov	r3, r9
 801567c:	ee10 0a10 	vmov	r0, s0
 8015680:	4649      	mov	r1, r9
 8015682:	f7eb fa6b 	bl	8000b5c <__aeabi_dcmpun>
 8015686:	b128      	cbz	r0, 8015694 <_scanf_float+0x3b0>
 8015688:	4628      	mov	r0, r5
 801568a:	f000 f80d 	bl	80156a8 <nanf>
 801568e:	ed87 0a00 	vstr	s0, [r7]
 8015692:	e7ab      	b.n	80155ec <_scanf_float+0x308>
 8015694:	4640      	mov	r0, r8
 8015696:	4649      	mov	r1, r9
 8015698:	f7eb fabe 	bl	8000c18 <__aeabi_d2f>
 801569c:	6038      	str	r0, [r7, #0]
 801569e:	e7a5      	b.n	80155ec <_scanf_float+0x308>
 80156a0:	2600      	movs	r6, #0
 80156a2:	e666      	b.n	8015372 <_scanf_float+0x8e>
 80156a4:	0801930e 	.word	0x0801930e

080156a8 <nanf>:
 80156a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80156b0 <nanf+0x8>
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	7fc00000 	.word	0x7fc00000

080156b4 <sniprintf>:
 80156b4:	b40c      	push	{r2, r3}
 80156b6:	b530      	push	{r4, r5, lr}
 80156b8:	4b17      	ldr	r3, [pc, #92]	; (8015718 <sniprintf+0x64>)
 80156ba:	1e0c      	subs	r4, r1, #0
 80156bc:	b09d      	sub	sp, #116	; 0x74
 80156be:	681d      	ldr	r5, [r3, #0]
 80156c0:	da08      	bge.n	80156d4 <sniprintf+0x20>
 80156c2:	238b      	movs	r3, #139	; 0x8b
 80156c4:	602b      	str	r3, [r5, #0]
 80156c6:	f04f 30ff 	mov.w	r0, #4294967295
 80156ca:	b01d      	add	sp, #116	; 0x74
 80156cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156d0:	b002      	add	sp, #8
 80156d2:	4770      	bx	lr
 80156d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80156d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80156dc:	bf14      	ite	ne
 80156de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80156e2:	4623      	moveq	r3, r4
 80156e4:	9304      	str	r3, [sp, #16]
 80156e6:	9307      	str	r3, [sp, #28]
 80156e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156ec:	9002      	str	r0, [sp, #8]
 80156ee:	9006      	str	r0, [sp, #24]
 80156f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80156f6:	ab21      	add	r3, sp, #132	; 0x84
 80156f8:	a902      	add	r1, sp, #8
 80156fa:	4628      	mov	r0, r5
 80156fc:	9301      	str	r3, [sp, #4]
 80156fe:	f002 fdf3 	bl	80182e8 <_svfiprintf_r>
 8015702:	1c43      	adds	r3, r0, #1
 8015704:	bfbc      	itt	lt
 8015706:	238b      	movlt	r3, #139	; 0x8b
 8015708:	602b      	strlt	r3, [r5, #0]
 801570a:	2c00      	cmp	r4, #0
 801570c:	d0dd      	beq.n	80156ca <sniprintf+0x16>
 801570e:	9b02      	ldr	r3, [sp, #8]
 8015710:	2200      	movs	r2, #0
 8015712:	701a      	strb	r2, [r3, #0]
 8015714:	e7d9      	b.n	80156ca <sniprintf+0x16>
 8015716:	bf00      	nop
 8015718:	2000000c 	.word	0x2000000c

0801571c <siprintf>:
 801571c:	b40e      	push	{r1, r2, r3}
 801571e:	b500      	push	{lr}
 8015720:	b09c      	sub	sp, #112	; 0x70
 8015722:	ab1d      	add	r3, sp, #116	; 0x74
 8015724:	9002      	str	r0, [sp, #8]
 8015726:	9006      	str	r0, [sp, #24]
 8015728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801572c:	4809      	ldr	r0, [pc, #36]	; (8015754 <siprintf+0x38>)
 801572e:	9107      	str	r1, [sp, #28]
 8015730:	9104      	str	r1, [sp, #16]
 8015732:	4909      	ldr	r1, [pc, #36]	; (8015758 <siprintf+0x3c>)
 8015734:	f853 2b04 	ldr.w	r2, [r3], #4
 8015738:	9105      	str	r1, [sp, #20]
 801573a:	6800      	ldr	r0, [r0, #0]
 801573c:	9301      	str	r3, [sp, #4]
 801573e:	a902      	add	r1, sp, #8
 8015740:	f002 fdd2 	bl	80182e8 <_svfiprintf_r>
 8015744:	9b02      	ldr	r3, [sp, #8]
 8015746:	2200      	movs	r2, #0
 8015748:	701a      	strb	r2, [r3, #0]
 801574a:	b01c      	add	sp, #112	; 0x70
 801574c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015750:	b003      	add	sp, #12
 8015752:	4770      	bx	lr
 8015754:	2000000c 	.word	0x2000000c
 8015758:	ffff0208 	.word	0xffff0208

0801575c <siscanf>:
 801575c:	b40e      	push	{r1, r2, r3}
 801575e:	b530      	push	{r4, r5, lr}
 8015760:	b09c      	sub	sp, #112	; 0x70
 8015762:	ac1f      	add	r4, sp, #124	; 0x7c
 8015764:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015768:	f854 5b04 	ldr.w	r5, [r4], #4
 801576c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015770:	9002      	str	r0, [sp, #8]
 8015772:	9006      	str	r0, [sp, #24]
 8015774:	f7ea fd44 	bl	8000200 <strlen>
 8015778:	4b0b      	ldr	r3, [pc, #44]	; (80157a8 <siscanf+0x4c>)
 801577a:	9003      	str	r0, [sp, #12]
 801577c:	9007      	str	r0, [sp, #28]
 801577e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015780:	480a      	ldr	r0, [pc, #40]	; (80157ac <siscanf+0x50>)
 8015782:	9401      	str	r4, [sp, #4]
 8015784:	2300      	movs	r3, #0
 8015786:	930f      	str	r3, [sp, #60]	; 0x3c
 8015788:	9314      	str	r3, [sp, #80]	; 0x50
 801578a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801578e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015792:	462a      	mov	r2, r5
 8015794:	4623      	mov	r3, r4
 8015796:	a902      	add	r1, sp, #8
 8015798:	6800      	ldr	r0, [r0, #0]
 801579a:	f002 fef7 	bl	801858c <__ssvfiscanf_r>
 801579e:	b01c      	add	sp, #112	; 0x70
 80157a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157a4:	b003      	add	sp, #12
 80157a6:	4770      	bx	lr
 80157a8:	080157b1 	.word	0x080157b1
 80157ac:	2000000c 	.word	0x2000000c

080157b0 <__seofread>:
 80157b0:	2000      	movs	r0, #0
 80157b2:	4770      	bx	lr

080157b4 <strcpy>:
 80157b4:	4603      	mov	r3, r0
 80157b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157ba:	f803 2b01 	strb.w	r2, [r3], #1
 80157be:	2a00      	cmp	r2, #0
 80157c0:	d1f9      	bne.n	80157b6 <strcpy+0x2>
 80157c2:	4770      	bx	lr

080157c4 <sulp>:
 80157c4:	b570      	push	{r4, r5, r6, lr}
 80157c6:	4604      	mov	r4, r0
 80157c8:	460d      	mov	r5, r1
 80157ca:	ec45 4b10 	vmov	d0, r4, r5
 80157ce:	4616      	mov	r6, r2
 80157d0:	f002 fb46 	bl	8017e60 <__ulp>
 80157d4:	ec51 0b10 	vmov	r0, r1, d0
 80157d8:	b17e      	cbz	r6, 80157fa <sulp+0x36>
 80157da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80157de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	dd09      	ble.n	80157fa <sulp+0x36>
 80157e6:	051b      	lsls	r3, r3, #20
 80157e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80157ec:	2400      	movs	r4, #0
 80157ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80157f2:	4622      	mov	r2, r4
 80157f4:	462b      	mov	r3, r5
 80157f6:	f7ea ff17 	bl	8000628 <__aeabi_dmul>
 80157fa:	bd70      	pop	{r4, r5, r6, pc}
 80157fc:	0000      	movs	r0, r0
	...

08015800 <_strtod_l>:
 8015800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015804:	461f      	mov	r7, r3
 8015806:	b0a1      	sub	sp, #132	; 0x84
 8015808:	2300      	movs	r3, #0
 801580a:	4681      	mov	r9, r0
 801580c:	4638      	mov	r0, r7
 801580e:	460e      	mov	r6, r1
 8015810:	9217      	str	r2, [sp, #92]	; 0x5c
 8015812:	931c      	str	r3, [sp, #112]	; 0x70
 8015814:	f002 f824 	bl	8017860 <__localeconv_l>
 8015818:	4680      	mov	r8, r0
 801581a:	6800      	ldr	r0, [r0, #0]
 801581c:	f7ea fcf0 	bl	8000200 <strlen>
 8015820:	f04f 0a00 	mov.w	sl, #0
 8015824:	4604      	mov	r4, r0
 8015826:	f04f 0b00 	mov.w	fp, #0
 801582a:	961b      	str	r6, [sp, #108]	; 0x6c
 801582c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801582e:	781a      	ldrb	r2, [r3, #0]
 8015830:	2a0d      	cmp	r2, #13
 8015832:	d832      	bhi.n	801589a <_strtod_l+0x9a>
 8015834:	2a09      	cmp	r2, #9
 8015836:	d236      	bcs.n	80158a6 <_strtod_l+0xa6>
 8015838:	2a00      	cmp	r2, #0
 801583a:	d03e      	beq.n	80158ba <_strtod_l+0xba>
 801583c:	2300      	movs	r3, #0
 801583e:	930d      	str	r3, [sp, #52]	; 0x34
 8015840:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015842:	782b      	ldrb	r3, [r5, #0]
 8015844:	2b30      	cmp	r3, #48	; 0x30
 8015846:	f040 80ac 	bne.w	80159a2 <_strtod_l+0x1a2>
 801584a:	786b      	ldrb	r3, [r5, #1]
 801584c:	2b58      	cmp	r3, #88	; 0x58
 801584e:	d001      	beq.n	8015854 <_strtod_l+0x54>
 8015850:	2b78      	cmp	r3, #120	; 0x78
 8015852:	d167      	bne.n	8015924 <_strtod_l+0x124>
 8015854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015856:	9301      	str	r3, [sp, #4]
 8015858:	ab1c      	add	r3, sp, #112	; 0x70
 801585a:	9300      	str	r3, [sp, #0]
 801585c:	9702      	str	r7, [sp, #8]
 801585e:	ab1d      	add	r3, sp, #116	; 0x74
 8015860:	4a88      	ldr	r2, [pc, #544]	; (8015a84 <_strtod_l+0x284>)
 8015862:	a91b      	add	r1, sp, #108	; 0x6c
 8015864:	4648      	mov	r0, r9
 8015866:	f001 fd12 	bl	801728e <__gethex>
 801586a:	f010 0407 	ands.w	r4, r0, #7
 801586e:	4606      	mov	r6, r0
 8015870:	d005      	beq.n	801587e <_strtod_l+0x7e>
 8015872:	2c06      	cmp	r4, #6
 8015874:	d12b      	bne.n	80158ce <_strtod_l+0xce>
 8015876:	3501      	adds	r5, #1
 8015878:	2300      	movs	r3, #0
 801587a:	951b      	str	r5, [sp, #108]	; 0x6c
 801587c:	930d      	str	r3, [sp, #52]	; 0x34
 801587e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015880:	2b00      	cmp	r3, #0
 8015882:	f040 859a 	bne.w	80163ba <_strtod_l+0xbba>
 8015886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015888:	b1e3      	cbz	r3, 80158c4 <_strtod_l+0xc4>
 801588a:	4652      	mov	r2, sl
 801588c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015890:	ec43 2b10 	vmov	d0, r2, r3
 8015894:	b021      	add	sp, #132	; 0x84
 8015896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801589a:	2a2b      	cmp	r2, #43	; 0x2b
 801589c:	d015      	beq.n	80158ca <_strtod_l+0xca>
 801589e:	2a2d      	cmp	r2, #45	; 0x2d
 80158a0:	d004      	beq.n	80158ac <_strtod_l+0xac>
 80158a2:	2a20      	cmp	r2, #32
 80158a4:	d1ca      	bne.n	801583c <_strtod_l+0x3c>
 80158a6:	3301      	adds	r3, #1
 80158a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80158aa:	e7bf      	b.n	801582c <_strtod_l+0x2c>
 80158ac:	2201      	movs	r2, #1
 80158ae:	920d      	str	r2, [sp, #52]	; 0x34
 80158b0:	1c5a      	adds	r2, r3, #1
 80158b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80158b4:	785b      	ldrb	r3, [r3, #1]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d1c2      	bne.n	8015840 <_strtod_l+0x40>
 80158ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80158bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f040 8579 	bne.w	80163b6 <_strtod_l+0xbb6>
 80158c4:	4652      	mov	r2, sl
 80158c6:	465b      	mov	r3, fp
 80158c8:	e7e2      	b.n	8015890 <_strtod_l+0x90>
 80158ca:	2200      	movs	r2, #0
 80158cc:	e7ef      	b.n	80158ae <_strtod_l+0xae>
 80158ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80158d0:	b13a      	cbz	r2, 80158e2 <_strtod_l+0xe2>
 80158d2:	2135      	movs	r1, #53	; 0x35
 80158d4:	a81e      	add	r0, sp, #120	; 0x78
 80158d6:	f002 fbbb 	bl	8018050 <__copybits>
 80158da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80158dc:	4648      	mov	r0, r9
 80158de:	f002 f828 	bl	8017932 <_Bfree>
 80158e2:	3c01      	subs	r4, #1
 80158e4:	2c04      	cmp	r4, #4
 80158e6:	d806      	bhi.n	80158f6 <_strtod_l+0xf6>
 80158e8:	e8df f004 	tbb	[pc, r4]
 80158ec:	1714030a 	.word	0x1714030a
 80158f0:	0a          	.byte	0x0a
 80158f1:	00          	.byte	0x00
 80158f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80158f6:	0730      	lsls	r0, r6, #28
 80158f8:	d5c1      	bpl.n	801587e <_strtod_l+0x7e>
 80158fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80158fe:	e7be      	b.n	801587e <_strtod_l+0x7e>
 8015900:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015904:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015906:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801590a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801590e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015912:	e7f0      	b.n	80158f6 <_strtod_l+0xf6>
 8015914:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015a88 <_strtod_l+0x288>
 8015918:	e7ed      	b.n	80158f6 <_strtod_l+0xf6>
 801591a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801591e:	f04f 3aff 	mov.w	sl, #4294967295
 8015922:	e7e8      	b.n	80158f6 <_strtod_l+0xf6>
 8015924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015926:	1c5a      	adds	r2, r3, #1
 8015928:	921b      	str	r2, [sp, #108]	; 0x6c
 801592a:	785b      	ldrb	r3, [r3, #1]
 801592c:	2b30      	cmp	r3, #48	; 0x30
 801592e:	d0f9      	beq.n	8015924 <_strtod_l+0x124>
 8015930:	2b00      	cmp	r3, #0
 8015932:	d0a4      	beq.n	801587e <_strtod_l+0x7e>
 8015934:	2301      	movs	r3, #1
 8015936:	2500      	movs	r5, #0
 8015938:	9306      	str	r3, [sp, #24]
 801593a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801593c:	9308      	str	r3, [sp, #32]
 801593e:	9507      	str	r5, [sp, #28]
 8015940:	9505      	str	r5, [sp, #20]
 8015942:	220a      	movs	r2, #10
 8015944:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015946:	7807      	ldrb	r7, [r0, #0]
 8015948:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801594c:	b2d9      	uxtb	r1, r3
 801594e:	2909      	cmp	r1, #9
 8015950:	d929      	bls.n	80159a6 <_strtod_l+0x1a6>
 8015952:	4622      	mov	r2, r4
 8015954:	f8d8 1000 	ldr.w	r1, [r8]
 8015958:	f003 f902 	bl	8018b60 <strncmp>
 801595c:	2800      	cmp	r0, #0
 801595e:	d031      	beq.n	80159c4 <_strtod_l+0x1c4>
 8015960:	2000      	movs	r0, #0
 8015962:	9c05      	ldr	r4, [sp, #20]
 8015964:	9004      	str	r0, [sp, #16]
 8015966:	463b      	mov	r3, r7
 8015968:	4602      	mov	r2, r0
 801596a:	2b65      	cmp	r3, #101	; 0x65
 801596c:	d001      	beq.n	8015972 <_strtod_l+0x172>
 801596e:	2b45      	cmp	r3, #69	; 0x45
 8015970:	d114      	bne.n	801599c <_strtod_l+0x19c>
 8015972:	b924      	cbnz	r4, 801597e <_strtod_l+0x17e>
 8015974:	b910      	cbnz	r0, 801597c <_strtod_l+0x17c>
 8015976:	9b06      	ldr	r3, [sp, #24]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d09e      	beq.n	80158ba <_strtod_l+0xba>
 801597c:	2400      	movs	r4, #0
 801597e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015980:	1c73      	adds	r3, r6, #1
 8015982:	931b      	str	r3, [sp, #108]	; 0x6c
 8015984:	7873      	ldrb	r3, [r6, #1]
 8015986:	2b2b      	cmp	r3, #43	; 0x2b
 8015988:	d078      	beq.n	8015a7c <_strtod_l+0x27c>
 801598a:	2b2d      	cmp	r3, #45	; 0x2d
 801598c:	d070      	beq.n	8015a70 <_strtod_l+0x270>
 801598e:	f04f 0c00 	mov.w	ip, #0
 8015992:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015996:	2f09      	cmp	r7, #9
 8015998:	d97c      	bls.n	8015a94 <_strtod_l+0x294>
 801599a:	961b      	str	r6, [sp, #108]	; 0x6c
 801599c:	f04f 0e00 	mov.w	lr, #0
 80159a0:	e09a      	b.n	8015ad8 <_strtod_l+0x2d8>
 80159a2:	2300      	movs	r3, #0
 80159a4:	e7c7      	b.n	8015936 <_strtod_l+0x136>
 80159a6:	9905      	ldr	r1, [sp, #20]
 80159a8:	2908      	cmp	r1, #8
 80159aa:	bfdd      	ittte	le
 80159ac:	9907      	ldrle	r1, [sp, #28]
 80159ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80159b2:	9307      	strle	r3, [sp, #28]
 80159b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80159b8:	9b05      	ldr	r3, [sp, #20]
 80159ba:	3001      	adds	r0, #1
 80159bc:	3301      	adds	r3, #1
 80159be:	9305      	str	r3, [sp, #20]
 80159c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80159c2:	e7bf      	b.n	8015944 <_strtod_l+0x144>
 80159c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159c6:	191a      	adds	r2, r3, r4
 80159c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80159ca:	9a05      	ldr	r2, [sp, #20]
 80159cc:	5d1b      	ldrb	r3, [r3, r4]
 80159ce:	2a00      	cmp	r2, #0
 80159d0:	d037      	beq.n	8015a42 <_strtod_l+0x242>
 80159d2:	9c05      	ldr	r4, [sp, #20]
 80159d4:	4602      	mov	r2, r0
 80159d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80159da:	2909      	cmp	r1, #9
 80159dc:	d913      	bls.n	8015a06 <_strtod_l+0x206>
 80159de:	2101      	movs	r1, #1
 80159e0:	9104      	str	r1, [sp, #16]
 80159e2:	e7c2      	b.n	801596a <_strtod_l+0x16a>
 80159e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159e6:	1c5a      	adds	r2, r3, #1
 80159e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80159ea:	785b      	ldrb	r3, [r3, #1]
 80159ec:	3001      	adds	r0, #1
 80159ee:	2b30      	cmp	r3, #48	; 0x30
 80159f0:	d0f8      	beq.n	80159e4 <_strtod_l+0x1e4>
 80159f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80159f6:	2a08      	cmp	r2, #8
 80159f8:	f200 84e4 	bhi.w	80163c4 <_strtod_l+0xbc4>
 80159fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80159fe:	9208      	str	r2, [sp, #32]
 8015a00:	4602      	mov	r2, r0
 8015a02:	2000      	movs	r0, #0
 8015a04:	4604      	mov	r4, r0
 8015a06:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015a0a:	f100 0101 	add.w	r1, r0, #1
 8015a0e:	d012      	beq.n	8015a36 <_strtod_l+0x236>
 8015a10:	440a      	add	r2, r1
 8015a12:	eb00 0c04 	add.w	ip, r0, r4
 8015a16:	4621      	mov	r1, r4
 8015a18:	270a      	movs	r7, #10
 8015a1a:	458c      	cmp	ip, r1
 8015a1c:	d113      	bne.n	8015a46 <_strtod_l+0x246>
 8015a1e:	1821      	adds	r1, r4, r0
 8015a20:	2908      	cmp	r1, #8
 8015a22:	f104 0401 	add.w	r4, r4, #1
 8015a26:	4404      	add	r4, r0
 8015a28:	dc19      	bgt.n	8015a5e <_strtod_l+0x25e>
 8015a2a:	9b07      	ldr	r3, [sp, #28]
 8015a2c:	210a      	movs	r1, #10
 8015a2e:	fb01 e303 	mla	r3, r1, r3, lr
 8015a32:	9307      	str	r3, [sp, #28]
 8015a34:	2100      	movs	r1, #0
 8015a36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a38:	1c58      	adds	r0, r3, #1
 8015a3a:	901b      	str	r0, [sp, #108]	; 0x6c
 8015a3c:	785b      	ldrb	r3, [r3, #1]
 8015a3e:	4608      	mov	r0, r1
 8015a40:	e7c9      	b.n	80159d6 <_strtod_l+0x1d6>
 8015a42:	9805      	ldr	r0, [sp, #20]
 8015a44:	e7d3      	b.n	80159ee <_strtod_l+0x1ee>
 8015a46:	2908      	cmp	r1, #8
 8015a48:	f101 0101 	add.w	r1, r1, #1
 8015a4c:	dc03      	bgt.n	8015a56 <_strtod_l+0x256>
 8015a4e:	9b07      	ldr	r3, [sp, #28]
 8015a50:	437b      	muls	r3, r7
 8015a52:	9307      	str	r3, [sp, #28]
 8015a54:	e7e1      	b.n	8015a1a <_strtod_l+0x21a>
 8015a56:	2910      	cmp	r1, #16
 8015a58:	bfd8      	it	le
 8015a5a:	437d      	mulle	r5, r7
 8015a5c:	e7dd      	b.n	8015a1a <_strtod_l+0x21a>
 8015a5e:	2c10      	cmp	r4, #16
 8015a60:	bfdc      	itt	le
 8015a62:	210a      	movle	r1, #10
 8015a64:	fb01 e505 	mlale	r5, r1, r5, lr
 8015a68:	e7e4      	b.n	8015a34 <_strtod_l+0x234>
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	9304      	str	r3, [sp, #16]
 8015a6e:	e781      	b.n	8015974 <_strtod_l+0x174>
 8015a70:	f04f 0c01 	mov.w	ip, #1
 8015a74:	1cb3      	adds	r3, r6, #2
 8015a76:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a78:	78b3      	ldrb	r3, [r6, #2]
 8015a7a:	e78a      	b.n	8015992 <_strtod_l+0x192>
 8015a7c:	f04f 0c00 	mov.w	ip, #0
 8015a80:	e7f8      	b.n	8015a74 <_strtod_l+0x274>
 8015a82:	bf00      	nop
 8015a84:	08019314 	.word	0x08019314
 8015a88:	7ff00000 	.word	0x7ff00000
 8015a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a8e:	1c5f      	adds	r7, r3, #1
 8015a90:	971b      	str	r7, [sp, #108]	; 0x6c
 8015a92:	785b      	ldrb	r3, [r3, #1]
 8015a94:	2b30      	cmp	r3, #48	; 0x30
 8015a96:	d0f9      	beq.n	8015a8c <_strtod_l+0x28c>
 8015a98:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015a9c:	2f08      	cmp	r7, #8
 8015a9e:	f63f af7d 	bhi.w	801599c <_strtod_l+0x19c>
 8015aa2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015aa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8015aaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015aac:	1c5f      	adds	r7, r3, #1
 8015aae:	971b      	str	r7, [sp, #108]	; 0x6c
 8015ab0:	785b      	ldrb	r3, [r3, #1]
 8015ab2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015ab6:	f1b8 0f09 	cmp.w	r8, #9
 8015aba:	d937      	bls.n	8015b2c <_strtod_l+0x32c>
 8015abc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015abe:	1a7f      	subs	r7, r7, r1
 8015ac0:	2f08      	cmp	r7, #8
 8015ac2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015ac6:	dc37      	bgt.n	8015b38 <_strtod_l+0x338>
 8015ac8:	45be      	cmp	lr, r7
 8015aca:	bfa8      	it	ge
 8015acc:	46be      	movge	lr, r7
 8015ace:	f1bc 0f00 	cmp.w	ip, #0
 8015ad2:	d001      	beq.n	8015ad8 <_strtod_l+0x2d8>
 8015ad4:	f1ce 0e00 	rsb	lr, lr, #0
 8015ad8:	2c00      	cmp	r4, #0
 8015ada:	d151      	bne.n	8015b80 <_strtod_l+0x380>
 8015adc:	2800      	cmp	r0, #0
 8015ade:	f47f aece 	bne.w	801587e <_strtod_l+0x7e>
 8015ae2:	9a06      	ldr	r2, [sp, #24]
 8015ae4:	2a00      	cmp	r2, #0
 8015ae6:	f47f aeca 	bne.w	801587e <_strtod_l+0x7e>
 8015aea:	9a04      	ldr	r2, [sp, #16]
 8015aec:	2a00      	cmp	r2, #0
 8015aee:	f47f aee4 	bne.w	80158ba <_strtod_l+0xba>
 8015af2:	2b4e      	cmp	r3, #78	; 0x4e
 8015af4:	d027      	beq.n	8015b46 <_strtod_l+0x346>
 8015af6:	dc21      	bgt.n	8015b3c <_strtod_l+0x33c>
 8015af8:	2b49      	cmp	r3, #73	; 0x49
 8015afa:	f47f aede 	bne.w	80158ba <_strtod_l+0xba>
 8015afe:	49a0      	ldr	r1, [pc, #640]	; (8015d80 <_strtod_l+0x580>)
 8015b00:	a81b      	add	r0, sp, #108	; 0x6c
 8015b02:	f001 fdf7 	bl	80176f4 <__match>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f43f aed7 	beq.w	80158ba <_strtod_l+0xba>
 8015b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b0e:	499d      	ldr	r1, [pc, #628]	; (8015d84 <_strtod_l+0x584>)
 8015b10:	3b01      	subs	r3, #1
 8015b12:	a81b      	add	r0, sp, #108	; 0x6c
 8015b14:	931b      	str	r3, [sp, #108]	; 0x6c
 8015b16:	f001 fded 	bl	80176f4 <__match>
 8015b1a:	b910      	cbnz	r0, 8015b22 <_strtod_l+0x322>
 8015b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b1e:	3301      	adds	r3, #1
 8015b20:	931b      	str	r3, [sp, #108]	; 0x6c
 8015b22:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015d98 <_strtod_l+0x598>
 8015b26:	f04f 0a00 	mov.w	sl, #0
 8015b2a:	e6a8      	b.n	801587e <_strtod_l+0x7e>
 8015b2c:	210a      	movs	r1, #10
 8015b2e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015b32:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015b36:	e7b8      	b.n	8015aaa <_strtod_l+0x2aa>
 8015b38:	46be      	mov	lr, r7
 8015b3a:	e7c8      	b.n	8015ace <_strtod_l+0x2ce>
 8015b3c:	2b69      	cmp	r3, #105	; 0x69
 8015b3e:	d0de      	beq.n	8015afe <_strtod_l+0x2fe>
 8015b40:	2b6e      	cmp	r3, #110	; 0x6e
 8015b42:	f47f aeba 	bne.w	80158ba <_strtod_l+0xba>
 8015b46:	4990      	ldr	r1, [pc, #576]	; (8015d88 <_strtod_l+0x588>)
 8015b48:	a81b      	add	r0, sp, #108	; 0x6c
 8015b4a:	f001 fdd3 	bl	80176f4 <__match>
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	f43f aeb3 	beq.w	80158ba <_strtod_l+0xba>
 8015b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	2b28      	cmp	r3, #40	; 0x28
 8015b5a:	d10e      	bne.n	8015b7a <_strtod_l+0x37a>
 8015b5c:	aa1e      	add	r2, sp, #120	; 0x78
 8015b5e:	498b      	ldr	r1, [pc, #556]	; (8015d8c <_strtod_l+0x58c>)
 8015b60:	a81b      	add	r0, sp, #108	; 0x6c
 8015b62:	f001 fddb 	bl	801771c <__hexnan>
 8015b66:	2805      	cmp	r0, #5
 8015b68:	d107      	bne.n	8015b7a <_strtod_l+0x37a>
 8015b6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015b6c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015b70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015b74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015b78:	e681      	b.n	801587e <_strtod_l+0x7e>
 8015b7a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015da0 <_strtod_l+0x5a0>
 8015b7e:	e7d2      	b.n	8015b26 <_strtod_l+0x326>
 8015b80:	ebae 0302 	sub.w	r3, lr, r2
 8015b84:	9306      	str	r3, [sp, #24]
 8015b86:	9b05      	ldr	r3, [sp, #20]
 8015b88:	9807      	ldr	r0, [sp, #28]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	bf08      	it	eq
 8015b8e:	4623      	moveq	r3, r4
 8015b90:	2c10      	cmp	r4, #16
 8015b92:	9305      	str	r3, [sp, #20]
 8015b94:	46a0      	mov	r8, r4
 8015b96:	bfa8      	it	ge
 8015b98:	f04f 0810 	movge.w	r8, #16
 8015b9c:	f7ea fcca 	bl	8000534 <__aeabi_ui2d>
 8015ba0:	2c09      	cmp	r4, #9
 8015ba2:	4682      	mov	sl, r0
 8015ba4:	468b      	mov	fp, r1
 8015ba6:	dc13      	bgt.n	8015bd0 <_strtod_l+0x3d0>
 8015ba8:	9b06      	ldr	r3, [sp, #24]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f43f ae67 	beq.w	801587e <_strtod_l+0x7e>
 8015bb0:	9b06      	ldr	r3, [sp, #24]
 8015bb2:	dd7a      	ble.n	8015caa <_strtod_l+0x4aa>
 8015bb4:	2b16      	cmp	r3, #22
 8015bb6:	dc61      	bgt.n	8015c7c <_strtod_l+0x47c>
 8015bb8:	4a75      	ldr	r2, [pc, #468]	; (8015d90 <_strtod_l+0x590>)
 8015bba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015bbe:	e9de 0100 	ldrd	r0, r1, [lr]
 8015bc2:	4652      	mov	r2, sl
 8015bc4:	465b      	mov	r3, fp
 8015bc6:	f7ea fd2f 	bl	8000628 <__aeabi_dmul>
 8015bca:	4682      	mov	sl, r0
 8015bcc:	468b      	mov	fp, r1
 8015bce:	e656      	b.n	801587e <_strtod_l+0x7e>
 8015bd0:	4b6f      	ldr	r3, [pc, #444]	; (8015d90 <_strtod_l+0x590>)
 8015bd2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015bd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015bda:	f7ea fd25 	bl	8000628 <__aeabi_dmul>
 8015bde:	4606      	mov	r6, r0
 8015be0:	4628      	mov	r0, r5
 8015be2:	460f      	mov	r7, r1
 8015be4:	f7ea fca6 	bl	8000534 <__aeabi_ui2d>
 8015be8:	4602      	mov	r2, r0
 8015bea:	460b      	mov	r3, r1
 8015bec:	4630      	mov	r0, r6
 8015bee:	4639      	mov	r1, r7
 8015bf0:	f7ea fb64 	bl	80002bc <__adddf3>
 8015bf4:	2c0f      	cmp	r4, #15
 8015bf6:	4682      	mov	sl, r0
 8015bf8:	468b      	mov	fp, r1
 8015bfa:	ddd5      	ble.n	8015ba8 <_strtod_l+0x3a8>
 8015bfc:	9b06      	ldr	r3, [sp, #24]
 8015bfe:	eba4 0808 	sub.w	r8, r4, r8
 8015c02:	4498      	add	r8, r3
 8015c04:	f1b8 0f00 	cmp.w	r8, #0
 8015c08:	f340 8096 	ble.w	8015d38 <_strtod_l+0x538>
 8015c0c:	f018 030f 	ands.w	r3, r8, #15
 8015c10:	d00a      	beq.n	8015c28 <_strtod_l+0x428>
 8015c12:	495f      	ldr	r1, [pc, #380]	; (8015d90 <_strtod_l+0x590>)
 8015c14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c18:	4652      	mov	r2, sl
 8015c1a:	465b      	mov	r3, fp
 8015c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c20:	f7ea fd02 	bl	8000628 <__aeabi_dmul>
 8015c24:	4682      	mov	sl, r0
 8015c26:	468b      	mov	fp, r1
 8015c28:	f038 080f 	bics.w	r8, r8, #15
 8015c2c:	d073      	beq.n	8015d16 <_strtod_l+0x516>
 8015c2e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015c32:	dd47      	ble.n	8015cc4 <_strtod_l+0x4c4>
 8015c34:	2400      	movs	r4, #0
 8015c36:	46a0      	mov	r8, r4
 8015c38:	9407      	str	r4, [sp, #28]
 8015c3a:	9405      	str	r4, [sp, #20]
 8015c3c:	2322      	movs	r3, #34	; 0x22
 8015c3e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015d98 <_strtod_l+0x598>
 8015c42:	f8c9 3000 	str.w	r3, [r9]
 8015c46:	f04f 0a00 	mov.w	sl, #0
 8015c4a:	9b07      	ldr	r3, [sp, #28]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	f43f ae16 	beq.w	801587e <_strtod_l+0x7e>
 8015c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c54:	4648      	mov	r0, r9
 8015c56:	f001 fe6c 	bl	8017932 <_Bfree>
 8015c5a:	9905      	ldr	r1, [sp, #20]
 8015c5c:	4648      	mov	r0, r9
 8015c5e:	f001 fe68 	bl	8017932 <_Bfree>
 8015c62:	4641      	mov	r1, r8
 8015c64:	4648      	mov	r0, r9
 8015c66:	f001 fe64 	bl	8017932 <_Bfree>
 8015c6a:	9907      	ldr	r1, [sp, #28]
 8015c6c:	4648      	mov	r0, r9
 8015c6e:	f001 fe60 	bl	8017932 <_Bfree>
 8015c72:	4621      	mov	r1, r4
 8015c74:	4648      	mov	r0, r9
 8015c76:	f001 fe5c 	bl	8017932 <_Bfree>
 8015c7a:	e600      	b.n	801587e <_strtod_l+0x7e>
 8015c7c:	9a06      	ldr	r2, [sp, #24]
 8015c7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015c82:	4293      	cmp	r3, r2
 8015c84:	dbba      	blt.n	8015bfc <_strtod_l+0x3fc>
 8015c86:	4d42      	ldr	r5, [pc, #264]	; (8015d90 <_strtod_l+0x590>)
 8015c88:	f1c4 040f 	rsb	r4, r4, #15
 8015c8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015c90:	4652      	mov	r2, sl
 8015c92:	465b      	mov	r3, fp
 8015c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c98:	f7ea fcc6 	bl	8000628 <__aeabi_dmul>
 8015c9c:	9b06      	ldr	r3, [sp, #24]
 8015c9e:	1b1c      	subs	r4, r3, r4
 8015ca0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015ca4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ca8:	e78d      	b.n	8015bc6 <_strtod_l+0x3c6>
 8015caa:	f113 0f16 	cmn.w	r3, #22
 8015cae:	dba5      	blt.n	8015bfc <_strtod_l+0x3fc>
 8015cb0:	4a37      	ldr	r2, [pc, #220]	; (8015d90 <_strtod_l+0x590>)
 8015cb2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015cb6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015cba:	4650      	mov	r0, sl
 8015cbc:	4659      	mov	r1, fp
 8015cbe:	f7ea fddd 	bl	800087c <__aeabi_ddiv>
 8015cc2:	e782      	b.n	8015bca <_strtod_l+0x3ca>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	4e33      	ldr	r6, [pc, #204]	; (8015d94 <_strtod_l+0x594>)
 8015cc8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015ccc:	4650      	mov	r0, sl
 8015cce:	4659      	mov	r1, fp
 8015cd0:	461d      	mov	r5, r3
 8015cd2:	f1b8 0f01 	cmp.w	r8, #1
 8015cd6:	dc21      	bgt.n	8015d1c <_strtod_l+0x51c>
 8015cd8:	b10b      	cbz	r3, 8015cde <_strtod_l+0x4de>
 8015cda:	4682      	mov	sl, r0
 8015cdc:	468b      	mov	fp, r1
 8015cde:	4b2d      	ldr	r3, [pc, #180]	; (8015d94 <_strtod_l+0x594>)
 8015ce0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015ce4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015ce8:	4652      	mov	r2, sl
 8015cea:	465b      	mov	r3, fp
 8015cec:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015cf0:	f7ea fc9a 	bl	8000628 <__aeabi_dmul>
 8015cf4:	4b28      	ldr	r3, [pc, #160]	; (8015d98 <_strtod_l+0x598>)
 8015cf6:	460a      	mov	r2, r1
 8015cf8:	400b      	ands	r3, r1
 8015cfa:	4928      	ldr	r1, [pc, #160]	; (8015d9c <_strtod_l+0x59c>)
 8015cfc:	428b      	cmp	r3, r1
 8015cfe:	4682      	mov	sl, r0
 8015d00:	d898      	bhi.n	8015c34 <_strtod_l+0x434>
 8015d02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015d06:	428b      	cmp	r3, r1
 8015d08:	bf86      	itte	hi
 8015d0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015da4 <_strtod_l+0x5a4>
 8015d0e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015d12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015d16:	2300      	movs	r3, #0
 8015d18:	9304      	str	r3, [sp, #16]
 8015d1a:	e077      	b.n	8015e0c <_strtod_l+0x60c>
 8015d1c:	f018 0f01 	tst.w	r8, #1
 8015d20:	d006      	beq.n	8015d30 <_strtod_l+0x530>
 8015d22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2a:	f7ea fc7d 	bl	8000628 <__aeabi_dmul>
 8015d2e:	2301      	movs	r3, #1
 8015d30:	3501      	adds	r5, #1
 8015d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015d36:	e7cc      	b.n	8015cd2 <_strtod_l+0x4d2>
 8015d38:	d0ed      	beq.n	8015d16 <_strtod_l+0x516>
 8015d3a:	f1c8 0800 	rsb	r8, r8, #0
 8015d3e:	f018 020f 	ands.w	r2, r8, #15
 8015d42:	d00a      	beq.n	8015d5a <_strtod_l+0x55a>
 8015d44:	4b12      	ldr	r3, [pc, #72]	; (8015d90 <_strtod_l+0x590>)
 8015d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d4a:	4650      	mov	r0, sl
 8015d4c:	4659      	mov	r1, fp
 8015d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d52:	f7ea fd93 	bl	800087c <__aeabi_ddiv>
 8015d56:	4682      	mov	sl, r0
 8015d58:	468b      	mov	fp, r1
 8015d5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015d5e:	d0da      	beq.n	8015d16 <_strtod_l+0x516>
 8015d60:	f1b8 0f1f 	cmp.w	r8, #31
 8015d64:	dd20      	ble.n	8015da8 <_strtod_l+0x5a8>
 8015d66:	2400      	movs	r4, #0
 8015d68:	46a0      	mov	r8, r4
 8015d6a:	9407      	str	r4, [sp, #28]
 8015d6c:	9405      	str	r4, [sp, #20]
 8015d6e:	2322      	movs	r3, #34	; 0x22
 8015d70:	f04f 0a00 	mov.w	sl, #0
 8015d74:	f04f 0b00 	mov.w	fp, #0
 8015d78:	f8c9 3000 	str.w	r3, [r9]
 8015d7c:	e765      	b.n	8015c4a <_strtod_l+0x44a>
 8015d7e:	bf00      	nop
 8015d80:	080192e1 	.word	0x080192e1
 8015d84:	0801936b 	.word	0x0801936b
 8015d88:	080192e9 	.word	0x080192e9
 8015d8c:	08019328 	.word	0x08019328
 8015d90:	080193a8 	.word	0x080193a8
 8015d94:	08019380 	.word	0x08019380
 8015d98:	7ff00000 	.word	0x7ff00000
 8015d9c:	7ca00000 	.word	0x7ca00000
 8015da0:	fff80000 	.word	0xfff80000
 8015da4:	7fefffff 	.word	0x7fefffff
 8015da8:	f018 0310 	ands.w	r3, r8, #16
 8015dac:	bf18      	it	ne
 8015dae:	236a      	movne	r3, #106	; 0x6a
 8015db0:	4da0      	ldr	r5, [pc, #640]	; (8016034 <_strtod_l+0x834>)
 8015db2:	9304      	str	r3, [sp, #16]
 8015db4:	4650      	mov	r0, sl
 8015db6:	4659      	mov	r1, fp
 8015db8:	2300      	movs	r3, #0
 8015dba:	f1b8 0f00 	cmp.w	r8, #0
 8015dbe:	f300 810a 	bgt.w	8015fd6 <_strtod_l+0x7d6>
 8015dc2:	b10b      	cbz	r3, 8015dc8 <_strtod_l+0x5c8>
 8015dc4:	4682      	mov	sl, r0
 8015dc6:	468b      	mov	fp, r1
 8015dc8:	9b04      	ldr	r3, [sp, #16]
 8015dca:	b1bb      	cbz	r3, 8015dfc <_strtod_l+0x5fc>
 8015dcc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015dd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	4659      	mov	r1, fp
 8015dd8:	dd10      	ble.n	8015dfc <_strtod_l+0x5fc>
 8015dda:	2b1f      	cmp	r3, #31
 8015ddc:	f340 8107 	ble.w	8015fee <_strtod_l+0x7ee>
 8015de0:	2b34      	cmp	r3, #52	; 0x34
 8015de2:	bfde      	ittt	le
 8015de4:	3b20      	suble	r3, #32
 8015de6:	f04f 32ff 	movle.w	r2, #4294967295
 8015dea:	fa02 f303 	lslle.w	r3, r2, r3
 8015dee:	f04f 0a00 	mov.w	sl, #0
 8015df2:	bfcc      	ite	gt
 8015df4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015df8:	ea03 0b01 	andle.w	fp, r3, r1
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	2300      	movs	r3, #0
 8015e00:	4650      	mov	r0, sl
 8015e02:	4659      	mov	r1, fp
 8015e04:	f7ea fe78 	bl	8000af8 <__aeabi_dcmpeq>
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	d1ac      	bne.n	8015d66 <_strtod_l+0x566>
 8015e0c:	9b07      	ldr	r3, [sp, #28]
 8015e0e:	9300      	str	r3, [sp, #0]
 8015e10:	9a05      	ldr	r2, [sp, #20]
 8015e12:	9908      	ldr	r1, [sp, #32]
 8015e14:	4623      	mov	r3, r4
 8015e16:	4648      	mov	r0, r9
 8015e18:	f001 fddd 	bl	80179d6 <__s2b>
 8015e1c:	9007      	str	r0, [sp, #28]
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	f43f af08 	beq.w	8015c34 <_strtod_l+0x434>
 8015e24:	9a06      	ldr	r2, [sp, #24]
 8015e26:	9b06      	ldr	r3, [sp, #24]
 8015e28:	2a00      	cmp	r2, #0
 8015e2a:	f1c3 0300 	rsb	r3, r3, #0
 8015e2e:	bfa8      	it	ge
 8015e30:	2300      	movge	r3, #0
 8015e32:	930e      	str	r3, [sp, #56]	; 0x38
 8015e34:	2400      	movs	r4, #0
 8015e36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015e3a:	9316      	str	r3, [sp, #88]	; 0x58
 8015e3c:	46a0      	mov	r8, r4
 8015e3e:	9b07      	ldr	r3, [sp, #28]
 8015e40:	4648      	mov	r0, r9
 8015e42:	6859      	ldr	r1, [r3, #4]
 8015e44:	f001 fd41 	bl	80178ca <_Balloc>
 8015e48:	9005      	str	r0, [sp, #20]
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	f43f aef6 	beq.w	8015c3c <_strtod_l+0x43c>
 8015e50:	9b07      	ldr	r3, [sp, #28]
 8015e52:	691a      	ldr	r2, [r3, #16]
 8015e54:	3202      	adds	r2, #2
 8015e56:	f103 010c 	add.w	r1, r3, #12
 8015e5a:	0092      	lsls	r2, r2, #2
 8015e5c:	300c      	adds	r0, #12
 8015e5e:	f001 fd29 	bl	80178b4 <memcpy>
 8015e62:	aa1e      	add	r2, sp, #120	; 0x78
 8015e64:	a91d      	add	r1, sp, #116	; 0x74
 8015e66:	ec4b ab10 	vmov	d0, sl, fp
 8015e6a:	4648      	mov	r0, r9
 8015e6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015e70:	f002 f86c 	bl	8017f4c <__d2b>
 8015e74:	901c      	str	r0, [sp, #112]	; 0x70
 8015e76:	2800      	cmp	r0, #0
 8015e78:	f43f aee0 	beq.w	8015c3c <_strtod_l+0x43c>
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	4648      	mov	r0, r9
 8015e80:	f001 fe35 	bl	8017aee <__i2b>
 8015e84:	4680      	mov	r8, r0
 8015e86:	2800      	cmp	r0, #0
 8015e88:	f43f aed8 	beq.w	8015c3c <_strtod_l+0x43c>
 8015e8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015e8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015e90:	2e00      	cmp	r6, #0
 8015e92:	bfab      	itete	ge
 8015e94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015e96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015e98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015e9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015e9c:	bfac      	ite	ge
 8015e9e:	18f7      	addge	r7, r6, r3
 8015ea0:	1b9d      	sublt	r5, r3, r6
 8015ea2:	9b04      	ldr	r3, [sp, #16]
 8015ea4:	1af6      	subs	r6, r6, r3
 8015ea6:	4416      	add	r6, r2
 8015ea8:	4b63      	ldr	r3, [pc, #396]	; (8016038 <_strtod_l+0x838>)
 8015eaa:	3e01      	subs	r6, #1
 8015eac:	429e      	cmp	r6, r3
 8015eae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015eb2:	f280 80af 	bge.w	8016014 <_strtod_l+0x814>
 8015eb6:	1b9b      	subs	r3, r3, r6
 8015eb8:	2b1f      	cmp	r3, #31
 8015eba:	eba2 0203 	sub.w	r2, r2, r3
 8015ebe:	f04f 0101 	mov.w	r1, #1
 8015ec2:	f300 809b 	bgt.w	8015ffc <_strtod_l+0x7fc>
 8015ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8015eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ecc:	2300      	movs	r3, #0
 8015ece:	930a      	str	r3, [sp, #40]	; 0x28
 8015ed0:	18be      	adds	r6, r7, r2
 8015ed2:	9b04      	ldr	r3, [sp, #16]
 8015ed4:	42b7      	cmp	r7, r6
 8015ed6:	4415      	add	r5, r2
 8015ed8:	441d      	add	r5, r3
 8015eda:	463b      	mov	r3, r7
 8015edc:	bfa8      	it	ge
 8015ede:	4633      	movge	r3, r6
 8015ee0:	42ab      	cmp	r3, r5
 8015ee2:	bfa8      	it	ge
 8015ee4:	462b      	movge	r3, r5
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	bfc2      	ittt	gt
 8015eea:	1af6      	subgt	r6, r6, r3
 8015eec:	1aed      	subgt	r5, r5, r3
 8015eee:	1aff      	subgt	r7, r7, r3
 8015ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ef2:	b1bb      	cbz	r3, 8015f24 <_strtod_l+0x724>
 8015ef4:	4641      	mov	r1, r8
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	4648      	mov	r0, r9
 8015efa:	f001 fe97 	bl	8017c2c <__pow5mult>
 8015efe:	4680      	mov	r8, r0
 8015f00:	2800      	cmp	r0, #0
 8015f02:	f43f ae9b 	beq.w	8015c3c <_strtod_l+0x43c>
 8015f06:	4601      	mov	r1, r0
 8015f08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f0a:	4648      	mov	r0, r9
 8015f0c:	f001 fdf8 	bl	8017b00 <__multiply>
 8015f10:	900c      	str	r0, [sp, #48]	; 0x30
 8015f12:	2800      	cmp	r0, #0
 8015f14:	f43f ae92 	beq.w	8015c3c <_strtod_l+0x43c>
 8015f18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f1a:	4648      	mov	r0, r9
 8015f1c:	f001 fd09 	bl	8017932 <_Bfree>
 8015f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f22:	931c      	str	r3, [sp, #112]	; 0x70
 8015f24:	2e00      	cmp	r6, #0
 8015f26:	dc7a      	bgt.n	801601e <_strtod_l+0x81e>
 8015f28:	9b06      	ldr	r3, [sp, #24]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	dd08      	ble.n	8015f40 <_strtod_l+0x740>
 8015f2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f30:	9905      	ldr	r1, [sp, #20]
 8015f32:	4648      	mov	r0, r9
 8015f34:	f001 fe7a 	bl	8017c2c <__pow5mult>
 8015f38:	9005      	str	r0, [sp, #20]
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	f43f ae7e 	beq.w	8015c3c <_strtod_l+0x43c>
 8015f40:	2d00      	cmp	r5, #0
 8015f42:	dd08      	ble.n	8015f56 <_strtod_l+0x756>
 8015f44:	462a      	mov	r2, r5
 8015f46:	9905      	ldr	r1, [sp, #20]
 8015f48:	4648      	mov	r0, r9
 8015f4a:	f001 febd 	bl	8017cc8 <__lshift>
 8015f4e:	9005      	str	r0, [sp, #20]
 8015f50:	2800      	cmp	r0, #0
 8015f52:	f43f ae73 	beq.w	8015c3c <_strtod_l+0x43c>
 8015f56:	2f00      	cmp	r7, #0
 8015f58:	dd08      	ble.n	8015f6c <_strtod_l+0x76c>
 8015f5a:	4641      	mov	r1, r8
 8015f5c:	463a      	mov	r2, r7
 8015f5e:	4648      	mov	r0, r9
 8015f60:	f001 feb2 	bl	8017cc8 <__lshift>
 8015f64:	4680      	mov	r8, r0
 8015f66:	2800      	cmp	r0, #0
 8015f68:	f43f ae68 	beq.w	8015c3c <_strtod_l+0x43c>
 8015f6c:	9a05      	ldr	r2, [sp, #20]
 8015f6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f70:	4648      	mov	r0, r9
 8015f72:	f001 ff17 	bl	8017da4 <__mdiff>
 8015f76:	4604      	mov	r4, r0
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	f43f ae5f 	beq.w	8015c3c <_strtod_l+0x43c>
 8015f7e:	68c3      	ldr	r3, [r0, #12]
 8015f80:	930c      	str	r3, [sp, #48]	; 0x30
 8015f82:	2300      	movs	r3, #0
 8015f84:	60c3      	str	r3, [r0, #12]
 8015f86:	4641      	mov	r1, r8
 8015f88:	f001 fef2 	bl	8017d70 <__mcmp>
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	da55      	bge.n	801603c <_strtod_l+0x83c>
 8015f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f92:	b9e3      	cbnz	r3, 8015fce <_strtod_l+0x7ce>
 8015f94:	f1ba 0f00 	cmp.w	sl, #0
 8015f98:	d119      	bne.n	8015fce <_strtod_l+0x7ce>
 8015f9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f9e:	b9b3      	cbnz	r3, 8015fce <_strtod_l+0x7ce>
 8015fa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015fa4:	0d1b      	lsrs	r3, r3, #20
 8015fa6:	051b      	lsls	r3, r3, #20
 8015fa8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015fac:	d90f      	bls.n	8015fce <_strtod_l+0x7ce>
 8015fae:	6963      	ldr	r3, [r4, #20]
 8015fb0:	b913      	cbnz	r3, 8015fb8 <_strtod_l+0x7b8>
 8015fb2:	6923      	ldr	r3, [r4, #16]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	dd0a      	ble.n	8015fce <_strtod_l+0x7ce>
 8015fb8:	4621      	mov	r1, r4
 8015fba:	2201      	movs	r2, #1
 8015fbc:	4648      	mov	r0, r9
 8015fbe:	f001 fe83 	bl	8017cc8 <__lshift>
 8015fc2:	4641      	mov	r1, r8
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	f001 fed3 	bl	8017d70 <__mcmp>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	dc67      	bgt.n	801609e <_strtod_l+0x89e>
 8015fce:	9b04      	ldr	r3, [sp, #16]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d171      	bne.n	80160b8 <_strtod_l+0x8b8>
 8015fd4:	e63d      	b.n	8015c52 <_strtod_l+0x452>
 8015fd6:	f018 0f01 	tst.w	r8, #1
 8015fda:	d004      	beq.n	8015fe6 <_strtod_l+0x7e6>
 8015fdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015fe0:	f7ea fb22 	bl	8000628 <__aeabi_dmul>
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015fea:	3508      	adds	r5, #8
 8015fec:	e6e5      	b.n	8015dba <_strtod_l+0x5ba>
 8015fee:	f04f 32ff 	mov.w	r2, #4294967295
 8015ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ff6:	ea03 0a0a 	and.w	sl, r3, sl
 8015ffa:	e6ff      	b.n	8015dfc <_strtod_l+0x5fc>
 8015ffc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016000:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016004:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016008:	36e2      	adds	r6, #226	; 0xe2
 801600a:	fa01 f306 	lsl.w	r3, r1, r6
 801600e:	930a      	str	r3, [sp, #40]	; 0x28
 8016010:	910f      	str	r1, [sp, #60]	; 0x3c
 8016012:	e75d      	b.n	8015ed0 <_strtod_l+0x6d0>
 8016014:	2300      	movs	r3, #0
 8016016:	930a      	str	r3, [sp, #40]	; 0x28
 8016018:	2301      	movs	r3, #1
 801601a:	930f      	str	r3, [sp, #60]	; 0x3c
 801601c:	e758      	b.n	8015ed0 <_strtod_l+0x6d0>
 801601e:	4632      	mov	r2, r6
 8016020:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016022:	4648      	mov	r0, r9
 8016024:	f001 fe50 	bl	8017cc8 <__lshift>
 8016028:	901c      	str	r0, [sp, #112]	; 0x70
 801602a:	2800      	cmp	r0, #0
 801602c:	f47f af7c 	bne.w	8015f28 <_strtod_l+0x728>
 8016030:	e604      	b.n	8015c3c <_strtod_l+0x43c>
 8016032:	bf00      	nop
 8016034:	08019340 	.word	0x08019340
 8016038:	fffffc02 	.word	0xfffffc02
 801603c:	465d      	mov	r5, fp
 801603e:	f040 8086 	bne.w	801614e <_strtod_l+0x94e>
 8016042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016048:	b32a      	cbz	r2, 8016096 <_strtod_l+0x896>
 801604a:	4aaf      	ldr	r2, [pc, #700]	; (8016308 <_strtod_l+0xb08>)
 801604c:	4293      	cmp	r3, r2
 801604e:	d153      	bne.n	80160f8 <_strtod_l+0x8f8>
 8016050:	9b04      	ldr	r3, [sp, #16]
 8016052:	4650      	mov	r0, sl
 8016054:	b1d3      	cbz	r3, 801608c <_strtod_l+0x88c>
 8016056:	4aad      	ldr	r2, [pc, #692]	; (801630c <_strtod_l+0xb0c>)
 8016058:	402a      	ands	r2, r5
 801605a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801605e:	f04f 31ff 	mov.w	r1, #4294967295
 8016062:	d816      	bhi.n	8016092 <_strtod_l+0x892>
 8016064:	0d12      	lsrs	r2, r2, #20
 8016066:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801606a:	fa01 f303 	lsl.w	r3, r1, r3
 801606e:	4298      	cmp	r0, r3
 8016070:	d142      	bne.n	80160f8 <_strtod_l+0x8f8>
 8016072:	4ba7      	ldr	r3, [pc, #668]	; (8016310 <_strtod_l+0xb10>)
 8016074:	429d      	cmp	r5, r3
 8016076:	d102      	bne.n	801607e <_strtod_l+0x87e>
 8016078:	3001      	adds	r0, #1
 801607a:	f43f addf 	beq.w	8015c3c <_strtod_l+0x43c>
 801607e:	4ba3      	ldr	r3, [pc, #652]	; (801630c <_strtod_l+0xb0c>)
 8016080:	402b      	ands	r3, r5
 8016082:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016086:	f04f 0a00 	mov.w	sl, #0
 801608a:	e7a0      	b.n	8015fce <_strtod_l+0x7ce>
 801608c:	f04f 33ff 	mov.w	r3, #4294967295
 8016090:	e7ed      	b.n	801606e <_strtod_l+0x86e>
 8016092:	460b      	mov	r3, r1
 8016094:	e7eb      	b.n	801606e <_strtod_l+0x86e>
 8016096:	bb7b      	cbnz	r3, 80160f8 <_strtod_l+0x8f8>
 8016098:	f1ba 0f00 	cmp.w	sl, #0
 801609c:	d12c      	bne.n	80160f8 <_strtod_l+0x8f8>
 801609e:	9904      	ldr	r1, [sp, #16]
 80160a0:	4a9a      	ldr	r2, [pc, #616]	; (801630c <_strtod_l+0xb0c>)
 80160a2:	465b      	mov	r3, fp
 80160a4:	b1f1      	cbz	r1, 80160e4 <_strtod_l+0x8e4>
 80160a6:	ea02 010b 	and.w	r1, r2, fp
 80160aa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80160ae:	dc19      	bgt.n	80160e4 <_strtod_l+0x8e4>
 80160b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80160b4:	f77f ae5b 	ble.w	8015d6e <_strtod_l+0x56e>
 80160b8:	4a96      	ldr	r2, [pc, #600]	; (8016314 <_strtod_l+0xb14>)
 80160ba:	2300      	movs	r3, #0
 80160bc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80160c0:	4650      	mov	r0, sl
 80160c2:	4659      	mov	r1, fp
 80160c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80160c8:	f7ea faae 	bl	8000628 <__aeabi_dmul>
 80160cc:	4682      	mov	sl, r0
 80160ce:	468b      	mov	fp, r1
 80160d0:	2900      	cmp	r1, #0
 80160d2:	f47f adbe 	bne.w	8015c52 <_strtod_l+0x452>
 80160d6:	2800      	cmp	r0, #0
 80160d8:	f47f adbb 	bne.w	8015c52 <_strtod_l+0x452>
 80160dc:	2322      	movs	r3, #34	; 0x22
 80160de:	f8c9 3000 	str.w	r3, [r9]
 80160e2:	e5b6      	b.n	8015c52 <_strtod_l+0x452>
 80160e4:	4013      	ands	r3, r2
 80160e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80160ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80160ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80160f2:	f04f 3aff 	mov.w	sl, #4294967295
 80160f6:	e76a      	b.n	8015fce <_strtod_l+0x7ce>
 80160f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160fa:	b193      	cbz	r3, 8016122 <_strtod_l+0x922>
 80160fc:	422b      	tst	r3, r5
 80160fe:	f43f af66 	beq.w	8015fce <_strtod_l+0x7ce>
 8016102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016104:	9a04      	ldr	r2, [sp, #16]
 8016106:	4650      	mov	r0, sl
 8016108:	4659      	mov	r1, fp
 801610a:	b173      	cbz	r3, 801612a <_strtod_l+0x92a>
 801610c:	f7ff fb5a 	bl	80157c4 <sulp>
 8016110:	4602      	mov	r2, r0
 8016112:	460b      	mov	r3, r1
 8016114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016118:	f7ea f8d0 	bl	80002bc <__adddf3>
 801611c:	4682      	mov	sl, r0
 801611e:	468b      	mov	fp, r1
 8016120:	e755      	b.n	8015fce <_strtod_l+0x7ce>
 8016122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016124:	ea13 0f0a 	tst.w	r3, sl
 8016128:	e7e9      	b.n	80160fe <_strtod_l+0x8fe>
 801612a:	f7ff fb4b 	bl	80157c4 <sulp>
 801612e:	4602      	mov	r2, r0
 8016130:	460b      	mov	r3, r1
 8016132:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016136:	f7ea f8bf 	bl	80002b8 <__aeabi_dsub>
 801613a:	2200      	movs	r2, #0
 801613c:	2300      	movs	r3, #0
 801613e:	4682      	mov	sl, r0
 8016140:	468b      	mov	fp, r1
 8016142:	f7ea fcd9 	bl	8000af8 <__aeabi_dcmpeq>
 8016146:	2800      	cmp	r0, #0
 8016148:	f47f ae11 	bne.w	8015d6e <_strtod_l+0x56e>
 801614c:	e73f      	b.n	8015fce <_strtod_l+0x7ce>
 801614e:	4641      	mov	r1, r8
 8016150:	4620      	mov	r0, r4
 8016152:	f001 ff4a 	bl	8017fea <__ratio>
 8016156:	ec57 6b10 	vmov	r6, r7, d0
 801615a:	2200      	movs	r2, #0
 801615c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016160:	ee10 0a10 	vmov	r0, s0
 8016164:	4639      	mov	r1, r7
 8016166:	f7ea fcdb 	bl	8000b20 <__aeabi_dcmple>
 801616a:	2800      	cmp	r0, #0
 801616c:	d077      	beq.n	801625e <_strtod_l+0xa5e>
 801616e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016170:	2b00      	cmp	r3, #0
 8016172:	d04a      	beq.n	801620a <_strtod_l+0xa0a>
 8016174:	4b68      	ldr	r3, [pc, #416]	; (8016318 <_strtod_l+0xb18>)
 8016176:	2200      	movs	r2, #0
 8016178:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801617c:	4f66      	ldr	r7, [pc, #408]	; (8016318 <_strtod_l+0xb18>)
 801617e:	2600      	movs	r6, #0
 8016180:	4b62      	ldr	r3, [pc, #392]	; (801630c <_strtod_l+0xb0c>)
 8016182:	402b      	ands	r3, r5
 8016184:	930f      	str	r3, [sp, #60]	; 0x3c
 8016186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016188:	4b64      	ldr	r3, [pc, #400]	; (801631c <_strtod_l+0xb1c>)
 801618a:	429a      	cmp	r2, r3
 801618c:	f040 80ce 	bne.w	801632c <_strtod_l+0xb2c>
 8016190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016198:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801619c:	ec4b ab10 	vmov	d0, sl, fp
 80161a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80161a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80161a8:	f001 fe5a 	bl	8017e60 <__ulp>
 80161ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80161b0:	ec53 2b10 	vmov	r2, r3, d0
 80161b4:	f7ea fa38 	bl	8000628 <__aeabi_dmul>
 80161b8:	4652      	mov	r2, sl
 80161ba:	465b      	mov	r3, fp
 80161bc:	f7ea f87e 	bl	80002bc <__adddf3>
 80161c0:	460b      	mov	r3, r1
 80161c2:	4952      	ldr	r1, [pc, #328]	; (801630c <_strtod_l+0xb0c>)
 80161c4:	4a56      	ldr	r2, [pc, #344]	; (8016320 <_strtod_l+0xb20>)
 80161c6:	4019      	ands	r1, r3
 80161c8:	4291      	cmp	r1, r2
 80161ca:	4682      	mov	sl, r0
 80161cc:	d95b      	bls.n	8016286 <_strtod_l+0xa86>
 80161ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80161d4:	4293      	cmp	r3, r2
 80161d6:	d103      	bne.n	80161e0 <_strtod_l+0x9e0>
 80161d8:	9b08      	ldr	r3, [sp, #32]
 80161da:	3301      	adds	r3, #1
 80161dc:	f43f ad2e 	beq.w	8015c3c <_strtod_l+0x43c>
 80161e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016310 <_strtod_l+0xb10>
 80161e4:	f04f 3aff 	mov.w	sl, #4294967295
 80161e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80161ea:	4648      	mov	r0, r9
 80161ec:	f001 fba1 	bl	8017932 <_Bfree>
 80161f0:	9905      	ldr	r1, [sp, #20]
 80161f2:	4648      	mov	r0, r9
 80161f4:	f001 fb9d 	bl	8017932 <_Bfree>
 80161f8:	4641      	mov	r1, r8
 80161fa:	4648      	mov	r0, r9
 80161fc:	f001 fb99 	bl	8017932 <_Bfree>
 8016200:	4621      	mov	r1, r4
 8016202:	4648      	mov	r0, r9
 8016204:	f001 fb95 	bl	8017932 <_Bfree>
 8016208:	e619      	b.n	8015e3e <_strtod_l+0x63e>
 801620a:	f1ba 0f00 	cmp.w	sl, #0
 801620e:	d11a      	bne.n	8016246 <_strtod_l+0xa46>
 8016210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016214:	b9eb      	cbnz	r3, 8016252 <_strtod_l+0xa52>
 8016216:	2200      	movs	r2, #0
 8016218:	4b3f      	ldr	r3, [pc, #252]	; (8016318 <_strtod_l+0xb18>)
 801621a:	4630      	mov	r0, r6
 801621c:	4639      	mov	r1, r7
 801621e:	f7ea fc75 	bl	8000b0c <__aeabi_dcmplt>
 8016222:	b9c8      	cbnz	r0, 8016258 <_strtod_l+0xa58>
 8016224:	4630      	mov	r0, r6
 8016226:	4639      	mov	r1, r7
 8016228:	2200      	movs	r2, #0
 801622a:	4b3e      	ldr	r3, [pc, #248]	; (8016324 <_strtod_l+0xb24>)
 801622c:	f7ea f9fc 	bl	8000628 <__aeabi_dmul>
 8016230:	4606      	mov	r6, r0
 8016232:	460f      	mov	r7, r1
 8016234:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016238:	9618      	str	r6, [sp, #96]	; 0x60
 801623a:	9319      	str	r3, [sp, #100]	; 0x64
 801623c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016240:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016244:	e79c      	b.n	8016180 <_strtod_l+0x980>
 8016246:	f1ba 0f01 	cmp.w	sl, #1
 801624a:	d102      	bne.n	8016252 <_strtod_l+0xa52>
 801624c:	2d00      	cmp	r5, #0
 801624e:	f43f ad8e 	beq.w	8015d6e <_strtod_l+0x56e>
 8016252:	2200      	movs	r2, #0
 8016254:	4b34      	ldr	r3, [pc, #208]	; (8016328 <_strtod_l+0xb28>)
 8016256:	e78f      	b.n	8016178 <_strtod_l+0x978>
 8016258:	2600      	movs	r6, #0
 801625a:	4f32      	ldr	r7, [pc, #200]	; (8016324 <_strtod_l+0xb24>)
 801625c:	e7ea      	b.n	8016234 <_strtod_l+0xa34>
 801625e:	4b31      	ldr	r3, [pc, #196]	; (8016324 <_strtod_l+0xb24>)
 8016260:	4630      	mov	r0, r6
 8016262:	4639      	mov	r1, r7
 8016264:	2200      	movs	r2, #0
 8016266:	f7ea f9df 	bl	8000628 <__aeabi_dmul>
 801626a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801626c:	4606      	mov	r6, r0
 801626e:	460f      	mov	r7, r1
 8016270:	b933      	cbnz	r3, 8016280 <_strtod_l+0xa80>
 8016272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016276:	9010      	str	r0, [sp, #64]	; 0x40
 8016278:	9311      	str	r3, [sp, #68]	; 0x44
 801627a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801627e:	e7df      	b.n	8016240 <_strtod_l+0xa40>
 8016280:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016284:	e7f9      	b.n	801627a <_strtod_l+0xa7a>
 8016286:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801628a:	9b04      	ldr	r3, [sp, #16]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d1ab      	bne.n	80161e8 <_strtod_l+0x9e8>
 8016290:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016294:	0d1b      	lsrs	r3, r3, #20
 8016296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016298:	051b      	lsls	r3, r3, #20
 801629a:	429a      	cmp	r2, r3
 801629c:	465d      	mov	r5, fp
 801629e:	d1a3      	bne.n	80161e8 <_strtod_l+0x9e8>
 80162a0:	4639      	mov	r1, r7
 80162a2:	4630      	mov	r0, r6
 80162a4:	f7ea fc70 	bl	8000b88 <__aeabi_d2iz>
 80162a8:	f7ea f954 	bl	8000554 <__aeabi_i2d>
 80162ac:	460b      	mov	r3, r1
 80162ae:	4602      	mov	r2, r0
 80162b0:	4639      	mov	r1, r7
 80162b2:	4630      	mov	r0, r6
 80162b4:	f7ea f800 	bl	80002b8 <__aeabi_dsub>
 80162b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ba:	4606      	mov	r6, r0
 80162bc:	460f      	mov	r7, r1
 80162be:	b933      	cbnz	r3, 80162ce <_strtod_l+0xace>
 80162c0:	f1ba 0f00 	cmp.w	sl, #0
 80162c4:	d103      	bne.n	80162ce <_strtod_l+0xace>
 80162c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80162ca:	2d00      	cmp	r5, #0
 80162cc:	d06d      	beq.n	80163aa <_strtod_l+0xbaa>
 80162ce:	a30a      	add	r3, pc, #40	; (adr r3, 80162f8 <_strtod_l+0xaf8>)
 80162d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d4:	4630      	mov	r0, r6
 80162d6:	4639      	mov	r1, r7
 80162d8:	f7ea fc18 	bl	8000b0c <__aeabi_dcmplt>
 80162dc:	2800      	cmp	r0, #0
 80162de:	f47f acb8 	bne.w	8015c52 <_strtod_l+0x452>
 80162e2:	a307      	add	r3, pc, #28	; (adr r3, 8016300 <_strtod_l+0xb00>)
 80162e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e8:	4630      	mov	r0, r6
 80162ea:	4639      	mov	r1, r7
 80162ec:	f7ea fc2c 	bl	8000b48 <__aeabi_dcmpgt>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	f43f af79 	beq.w	80161e8 <_strtod_l+0x9e8>
 80162f6:	e4ac      	b.n	8015c52 <_strtod_l+0x452>
 80162f8:	94a03595 	.word	0x94a03595
 80162fc:	3fdfffff 	.word	0x3fdfffff
 8016300:	35afe535 	.word	0x35afe535
 8016304:	3fe00000 	.word	0x3fe00000
 8016308:	000fffff 	.word	0x000fffff
 801630c:	7ff00000 	.word	0x7ff00000
 8016310:	7fefffff 	.word	0x7fefffff
 8016314:	39500000 	.word	0x39500000
 8016318:	3ff00000 	.word	0x3ff00000
 801631c:	7fe00000 	.word	0x7fe00000
 8016320:	7c9fffff 	.word	0x7c9fffff
 8016324:	3fe00000 	.word	0x3fe00000
 8016328:	bff00000 	.word	0xbff00000
 801632c:	9b04      	ldr	r3, [sp, #16]
 801632e:	b333      	cbz	r3, 801637e <_strtod_l+0xb7e>
 8016330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016332:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016336:	d822      	bhi.n	801637e <_strtod_l+0xb7e>
 8016338:	a327      	add	r3, pc, #156	; (adr r3, 80163d8 <_strtod_l+0xbd8>)
 801633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633e:	4630      	mov	r0, r6
 8016340:	4639      	mov	r1, r7
 8016342:	f7ea fbed 	bl	8000b20 <__aeabi_dcmple>
 8016346:	b1a0      	cbz	r0, 8016372 <_strtod_l+0xb72>
 8016348:	4639      	mov	r1, r7
 801634a:	4630      	mov	r0, r6
 801634c:	f7ea fc44 	bl	8000bd8 <__aeabi_d2uiz>
 8016350:	2800      	cmp	r0, #0
 8016352:	bf08      	it	eq
 8016354:	2001      	moveq	r0, #1
 8016356:	f7ea f8ed 	bl	8000534 <__aeabi_ui2d>
 801635a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801635c:	4606      	mov	r6, r0
 801635e:	460f      	mov	r7, r1
 8016360:	bb03      	cbnz	r3, 80163a4 <_strtod_l+0xba4>
 8016362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016366:	9012      	str	r0, [sp, #72]	; 0x48
 8016368:	9313      	str	r3, [sp, #76]	; 0x4c
 801636a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801636e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016376:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801637a:	1a9b      	subs	r3, r3, r2
 801637c:	930b      	str	r3, [sp, #44]	; 0x2c
 801637e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016382:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016386:	f001 fd6b 	bl	8017e60 <__ulp>
 801638a:	4650      	mov	r0, sl
 801638c:	ec53 2b10 	vmov	r2, r3, d0
 8016390:	4659      	mov	r1, fp
 8016392:	f7ea f949 	bl	8000628 <__aeabi_dmul>
 8016396:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801639a:	f7e9 ff8f 	bl	80002bc <__adddf3>
 801639e:	4682      	mov	sl, r0
 80163a0:	468b      	mov	fp, r1
 80163a2:	e772      	b.n	801628a <_strtod_l+0xa8a>
 80163a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80163a8:	e7df      	b.n	801636a <_strtod_l+0xb6a>
 80163aa:	a30d      	add	r3, pc, #52	; (adr r3, 80163e0 <_strtod_l+0xbe0>)
 80163ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b0:	f7ea fbac 	bl	8000b0c <__aeabi_dcmplt>
 80163b4:	e79c      	b.n	80162f0 <_strtod_l+0xaf0>
 80163b6:	2300      	movs	r3, #0
 80163b8:	930d      	str	r3, [sp, #52]	; 0x34
 80163ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80163bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163be:	6013      	str	r3, [r2, #0]
 80163c0:	f7ff ba61 	b.w	8015886 <_strtod_l+0x86>
 80163c4:	2b65      	cmp	r3, #101	; 0x65
 80163c6:	f04f 0200 	mov.w	r2, #0
 80163ca:	f43f ab4e 	beq.w	8015a6a <_strtod_l+0x26a>
 80163ce:	2101      	movs	r1, #1
 80163d0:	4614      	mov	r4, r2
 80163d2:	9104      	str	r1, [sp, #16]
 80163d4:	f7ff bacb 	b.w	801596e <_strtod_l+0x16e>
 80163d8:	ffc00000 	.word	0xffc00000
 80163dc:	41dfffff 	.word	0x41dfffff
 80163e0:	94a03595 	.word	0x94a03595
 80163e4:	3fcfffff 	.word	0x3fcfffff

080163e8 <_strtod_r>:
 80163e8:	4b05      	ldr	r3, [pc, #20]	; (8016400 <_strtod_r+0x18>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	b410      	push	{r4}
 80163ee:	6a1b      	ldr	r3, [r3, #32]
 80163f0:	4c04      	ldr	r4, [pc, #16]	; (8016404 <_strtod_r+0x1c>)
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	bf08      	it	eq
 80163f6:	4623      	moveq	r3, r4
 80163f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163fc:	f7ff ba00 	b.w	8015800 <_strtod_l>
 8016400:	2000000c 	.word	0x2000000c
 8016404:	20000070 	.word	0x20000070

08016408 <_strtol_l.isra.0>:
 8016408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801640c:	4680      	mov	r8, r0
 801640e:	4689      	mov	r9, r1
 8016410:	4692      	mov	sl, r2
 8016412:	461e      	mov	r6, r3
 8016414:	460f      	mov	r7, r1
 8016416:	463d      	mov	r5, r7
 8016418:	9808      	ldr	r0, [sp, #32]
 801641a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801641e:	f001 fa0d 	bl	801783c <__locale_ctype_ptr_l>
 8016422:	4420      	add	r0, r4
 8016424:	7843      	ldrb	r3, [r0, #1]
 8016426:	f013 0308 	ands.w	r3, r3, #8
 801642a:	d132      	bne.n	8016492 <_strtol_l.isra.0+0x8a>
 801642c:	2c2d      	cmp	r4, #45	; 0x2d
 801642e:	d132      	bne.n	8016496 <_strtol_l.isra.0+0x8e>
 8016430:	787c      	ldrb	r4, [r7, #1]
 8016432:	1cbd      	adds	r5, r7, #2
 8016434:	2201      	movs	r2, #1
 8016436:	2e00      	cmp	r6, #0
 8016438:	d05d      	beq.n	80164f6 <_strtol_l.isra.0+0xee>
 801643a:	2e10      	cmp	r6, #16
 801643c:	d109      	bne.n	8016452 <_strtol_l.isra.0+0x4a>
 801643e:	2c30      	cmp	r4, #48	; 0x30
 8016440:	d107      	bne.n	8016452 <_strtol_l.isra.0+0x4a>
 8016442:	782b      	ldrb	r3, [r5, #0]
 8016444:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016448:	2b58      	cmp	r3, #88	; 0x58
 801644a:	d14f      	bne.n	80164ec <_strtol_l.isra.0+0xe4>
 801644c:	786c      	ldrb	r4, [r5, #1]
 801644e:	2610      	movs	r6, #16
 8016450:	3502      	adds	r5, #2
 8016452:	2a00      	cmp	r2, #0
 8016454:	bf14      	ite	ne
 8016456:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801645a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801645e:	2700      	movs	r7, #0
 8016460:	fbb1 fcf6 	udiv	ip, r1, r6
 8016464:	4638      	mov	r0, r7
 8016466:	fb06 1e1c 	mls	lr, r6, ip, r1
 801646a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801646e:	2b09      	cmp	r3, #9
 8016470:	d817      	bhi.n	80164a2 <_strtol_l.isra.0+0x9a>
 8016472:	461c      	mov	r4, r3
 8016474:	42a6      	cmp	r6, r4
 8016476:	dd23      	ble.n	80164c0 <_strtol_l.isra.0+0xb8>
 8016478:	1c7b      	adds	r3, r7, #1
 801647a:	d007      	beq.n	801648c <_strtol_l.isra.0+0x84>
 801647c:	4584      	cmp	ip, r0
 801647e:	d31c      	bcc.n	80164ba <_strtol_l.isra.0+0xb2>
 8016480:	d101      	bne.n	8016486 <_strtol_l.isra.0+0x7e>
 8016482:	45a6      	cmp	lr, r4
 8016484:	db19      	blt.n	80164ba <_strtol_l.isra.0+0xb2>
 8016486:	fb00 4006 	mla	r0, r0, r6, r4
 801648a:	2701      	movs	r7, #1
 801648c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016490:	e7eb      	b.n	801646a <_strtol_l.isra.0+0x62>
 8016492:	462f      	mov	r7, r5
 8016494:	e7bf      	b.n	8016416 <_strtol_l.isra.0+0xe>
 8016496:	2c2b      	cmp	r4, #43	; 0x2b
 8016498:	bf04      	itt	eq
 801649a:	1cbd      	addeq	r5, r7, #2
 801649c:	787c      	ldrbeq	r4, [r7, #1]
 801649e:	461a      	mov	r2, r3
 80164a0:	e7c9      	b.n	8016436 <_strtol_l.isra.0+0x2e>
 80164a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80164a6:	2b19      	cmp	r3, #25
 80164a8:	d801      	bhi.n	80164ae <_strtol_l.isra.0+0xa6>
 80164aa:	3c37      	subs	r4, #55	; 0x37
 80164ac:	e7e2      	b.n	8016474 <_strtol_l.isra.0+0x6c>
 80164ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80164b2:	2b19      	cmp	r3, #25
 80164b4:	d804      	bhi.n	80164c0 <_strtol_l.isra.0+0xb8>
 80164b6:	3c57      	subs	r4, #87	; 0x57
 80164b8:	e7dc      	b.n	8016474 <_strtol_l.isra.0+0x6c>
 80164ba:	f04f 37ff 	mov.w	r7, #4294967295
 80164be:	e7e5      	b.n	801648c <_strtol_l.isra.0+0x84>
 80164c0:	1c7b      	adds	r3, r7, #1
 80164c2:	d108      	bne.n	80164d6 <_strtol_l.isra.0+0xce>
 80164c4:	2322      	movs	r3, #34	; 0x22
 80164c6:	f8c8 3000 	str.w	r3, [r8]
 80164ca:	4608      	mov	r0, r1
 80164cc:	f1ba 0f00 	cmp.w	sl, #0
 80164d0:	d107      	bne.n	80164e2 <_strtol_l.isra.0+0xda>
 80164d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164d6:	b102      	cbz	r2, 80164da <_strtol_l.isra.0+0xd2>
 80164d8:	4240      	negs	r0, r0
 80164da:	f1ba 0f00 	cmp.w	sl, #0
 80164de:	d0f8      	beq.n	80164d2 <_strtol_l.isra.0+0xca>
 80164e0:	b10f      	cbz	r7, 80164e6 <_strtol_l.isra.0+0xde>
 80164e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80164e6:	f8ca 9000 	str.w	r9, [sl]
 80164ea:	e7f2      	b.n	80164d2 <_strtol_l.isra.0+0xca>
 80164ec:	2430      	movs	r4, #48	; 0x30
 80164ee:	2e00      	cmp	r6, #0
 80164f0:	d1af      	bne.n	8016452 <_strtol_l.isra.0+0x4a>
 80164f2:	2608      	movs	r6, #8
 80164f4:	e7ad      	b.n	8016452 <_strtol_l.isra.0+0x4a>
 80164f6:	2c30      	cmp	r4, #48	; 0x30
 80164f8:	d0a3      	beq.n	8016442 <_strtol_l.isra.0+0x3a>
 80164fa:	260a      	movs	r6, #10
 80164fc:	e7a9      	b.n	8016452 <_strtol_l.isra.0+0x4a>
	...

08016500 <_strtol_r>:
 8016500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016502:	4c06      	ldr	r4, [pc, #24]	; (801651c <_strtol_r+0x1c>)
 8016504:	4d06      	ldr	r5, [pc, #24]	; (8016520 <_strtol_r+0x20>)
 8016506:	6824      	ldr	r4, [r4, #0]
 8016508:	6a24      	ldr	r4, [r4, #32]
 801650a:	2c00      	cmp	r4, #0
 801650c:	bf08      	it	eq
 801650e:	462c      	moveq	r4, r5
 8016510:	9400      	str	r4, [sp, #0]
 8016512:	f7ff ff79 	bl	8016408 <_strtol_l.isra.0>
 8016516:	b003      	add	sp, #12
 8016518:	bd30      	pop	{r4, r5, pc}
 801651a:	bf00      	nop
 801651c:	2000000c 	.word	0x2000000c
 8016520:	20000070 	.word	0x20000070

08016524 <_vsiprintf_r>:
 8016524:	b500      	push	{lr}
 8016526:	b09b      	sub	sp, #108	; 0x6c
 8016528:	9100      	str	r1, [sp, #0]
 801652a:	9104      	str	r1, [sp, #16]
 801652c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016530:	9105      	str	r1, [sp, #20]
 8016532:	9102      	str	r1, [sp, #8]
 8016534:	4905      	ldr	r1, [pc, #20]	; (801654c <_vsiprintf_r+0x28>)
 8016536:	9103      	str	r1, [sp, #12]
 8016538:	4669      	mov	r1, sp
 801653a:	f001 fed5 	bl	80182e8 <_svfiprintf_r>
 801653e:	9b00      	ldr	r3, [sp, #0]
 8016540:	2200      	movs	r2, #0
 8016542:	701a      	strb	r2, [r3, #0]
 8016544:	b01b      	add	sp, #108	; 0x6c
 8016546:	f85d fb04 	ldr.w	pc, [sp], #4
 801654a:	bf00      	nop
 801654c:	ffff0208 	.word	0xffff0208

08016550 <vsiprintf>:
 8016550:	4613      	mov	r3, r2
 8016552:	460a      	mov	r2, r1
 8016554:	4601      	mov	r1, r0
 8016556:	4802      	ldr	r0, [pc, #8]	; (8016560 <vsiprintf+0x10>)
 8016558:	6800      	ldr	r0, [r0, #0]
 801655a:	f7ff bfe3 	b.w	8016524 <_vsiprintf_r>
 801655e:	bf00      	nop
 8016560:	2000000c 	.word	0x2000000c

08016564 <quorem>:
 8016564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016568:	6903      	ldr	r3, [r0, #16]
 801656a:	690c      	ldr	r4, [r1, #16]
 801656c:	42a3      	cmp	r3, r4
 801656e:	4680      	mov	r8, r0
 8016570:	f2c0 8082 	blt.w	8016678 <quorem+0x114>
 8016574:	3c01      	subs	r4, #1
 8016576:	f101 0714 	add.w	r7, r1, #20
 801657a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801657e:	f100 0614 	add.w	r6, r0, #20
 8016582:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016586:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801658a:	eb06 030c 	add.w	r3, r6, ip
 801658e:	3501      	adds	r5, #1
 8016590:	eb07 090c 	add.w	r9, r7, ip
 8016594:	9301      	str	r3, [sp, #4]
 8016596:	fbb0 f5f5 	udiv	r5, r0, r5
 801659a:	b395      	cbz	r5, 8016602 <quorem+0x9e>
 801659c:	f04f 0a00 	mov.w	sl, #0
 80165a0:	4638      	mov	r0, r7
 80165a2:	46b6      	mov	lr, r6
 80165a4:	46d3      	mov	fp, sl
 80165a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80165aa:	b293      	uxth	r3, r2
 80165ac:	fb05 a303 	mla	r3, r5, r3, sl
 80165b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80165b4:	b29b      	uxth	r3, r3
 80165b6:	ebab 0303 	sub.w	r3, fp, r3
 80165ba:	0c12      	lsrs	r2, r2, #16
 80165bc:	f8de b000 	ldr.w	fp, [lr]
 80165c0:	fb05 a202 	mla	r2, r5, r2, sl
 80165c4:	fa13 f38b 	uxtah	r3, r3, fp
 80165c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80165cc:	fa1f fb82 	uxth.w	fp, r2
 80165d0:	f8de 2000 	ldr.w	r2, [lr]
 80165d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80165d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80165dc:	b29b      	uxth	r3, r3
 80165de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165e2:	4581      	cmp	r9, r0
 80165e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80165e8:	f84e 3b04 	str.w	r3, [lr], #4
 80165ec:	d2db      	bcs.n	80165a6 <quorem+0x42>
 80165ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80165f2:	b933      	cbnz	r3, 8016602 <quorem+0x9e>
 80165f4:	9b01      	ldr	r3, [sp, #4]
 80165f6:	3b04      	subs	r3, #4
 80165f8:	429e      	cmp	r6, r3
 80165fa:	461a      	mov	r2, r3
 80165fc:	d330      	bcc.n	8016660 <quorem+0xfc>
 80165fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8016602:	4640      	mov	r0, r8
 8016604:	f001 fbb4 	bl	8017d70 <__mcmp>
 8016608:	2800      	cmp	r0, #0
 801660a:	db25      	blt.n	8016658 <quorem+0xf4>
 801660c:	3501      	adds	r5, #1
 801660e:	4630      	mov	r0, r6
 8016610:	f04f 0c00 	mov.w	ip, #0
 8016614:	f857 2b04 	ldr.w	r2, [r7], #4
 8016618:	f8d0 e000 	ldr.w	lr, [r0]
 801661c:	b293      	uxth	r3, r2
 801661e:	ebac 0303 	sub.w	r3, ip, r3
 8016622:	0c12      	lsrs	r2, r2, #16
 8016624:	fa13 f38e 	uxtah	r3, r3, lr
 8016628:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801662c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016630:	b29b      	uxth	r3, r3
 8016632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016636:	45b9      	cmp	r9, r7
 8016638:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801663c:	f840 3b04 	str.w	r3, [r0], #4
 8016640:	d2e8      	bcs.n	8016614 <quorem+0xb0>
 8016642:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016646:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801664a:	b92a      	cbnz	r2, 8016658 <quorem+0xf4>
 801664c:	3b04      	subs	r3, #4
 801664e:	429e      	cmp	r6, r3
 8016650:	461a      	mov	r2, r3
 8016652:	d30b      	bcc.n	801666c <quorem+0x108>
 8016654:	f8c8 4010 	str.w	r4, [r8, #16]
 8016658:	4628      	mov	r0, r5
 801665a:	b003      	add	sp, #12
 801665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016660:	6812      	ldr	r2, [r2, #0]
 8016662:	3b04      	subs	r3, #4
 8016664:	2a00      	cmp	r2, #0
 8016666:	d1ca      	bne.n	80165fe <quorem+0x9a>
 8016668:	3c01      	subs	r4, #1
 801666a:	e7c5      	b.n	80165f8 <quorem+0x94>
 801666c:	6812      	ldr	r2, [r2, #0]
 801666e:	3b04      	subs	r3, #4
 8016670:	2a00      	cmp	r2, #0
 8016672:	d1ef      	bne.n	8016654 <quorem+0xf0>
 8016674:	3c01      	subs	r4, #1
 8016676:	e7ea      	b.n	801664e <quorem+0xea>
 8016678:	2000      	movs	r0, #0
 801667a:	e7ee      	b.n	801665a <quorem+0xf6>
 801667c:	0000      	movs	r0, r0
	...

08016680 <_dtoa_r>:
 8016680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016684:	ec57 6b10 	vmov	r6, r7, d0
 8016688:	b097      	sub	sp, #92	; 0x5c
 801668a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801668c:	9106      	str	r1, [sp, #24]
 801668e:	4604      	mov	r4, r0
 8016690:	920b      	str	r2, [sp, #44]	; 0x2c
 8016692:	9312      	str	r3, [sp, #72]	; 0x48
 8016694:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016698:	e9cd 6700 	strd	r6, r7, [sp]
 801669c:	b93d      	cbnz	r5, 80166ae <_dtoa_r+0x2e>
 801669e:	2010      	movs	r0, #16
 80166a0:	f001 f8ee 	bl	8017880 <malloc>
 80166a4:	6260      	str	r0, [r4, #36]	; 0x24
 80166a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80166aa:	6005      	str	r5, [r0, #0]
 80166ac:	60c5      	str	r5, [r0, #12]
 80166ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166b0:	6819      	ldr	r1, [r3, #0]
 80166b2:	b151      	cbz	r1, 80166ca <_dtoa_r+0x4a>
 80166b4:	685a      	ldr	r2, [r3, #4]
 80166b6:	604a      	str	r2, [r1, #4]
 80166b8:	2301      	movs	r3, #1
 80166ba:	4093      	lsls	r3, r2
 80166bc:	608b      	str	r3, [r1, #8]
 80166be:	4620      	mov	r0, r4
 80166c0:	f001 f937 	bl	8017932 <_Bfree>
 80166c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166c6:	2200      	movs	r2, #0
 80166c8:	601a      	str	r2, [r3, #0]
 80166ca:	1e3b      	subs	r3, r7, #0
 80166cc:	bfbb      	ittet	lt
 80166ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80166d2:	9301      	strlt	r3, [sp, #4]
 80166d4:	2300      	movge	r3, #0
 80166d6:	2201      	movlt	r2, #1
 80166d8:	bfac      	ite	ge
 80166da:	f8c8 3000 	strge.w	r3, [r8]
 80166de:	f8c8 2000 	strlt.w	r2, [r8]
 80166e2:	4baf      	ldr	r3, [pc, #700]	; (80169a0 <_dtoa_r+0x320>)
 80166e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80166e8:	ea33 0308 	bics.w	r3, r3, r8
 80166ec:	d114      	bne.n	8016718 <_dtoa_r+0x98>
 80166ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80166f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80166f4:	6013      	str	r3, [r2, #0]
 80166f6:	9b00      	ldr	r3, [sp, #0]
 80166f8:	b923      	cbnz	r3, 8016704 <_dtoa_r+0x84>
 80166fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80166fe:	2800      	cmp	r0, #0
 8016700:	f000 8542 	beq.w	8017188 <_dtoa_r+0xb08>
 8016704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016706:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80169b4 <_dtoa_r+0x334>
 801670a:	2b00      	cmp	r3, #0
 801670c:	f000 8544 	beq.w	8017198 <_dtoa_r+0xb18>
 8016710:	f10b 0303 	add.w	r3, fp, #3
 8016714:	f000 bd3e 	b.w	8017194 <_dtoa_r+0xb14>
 8016718:	e9dd 6700 	ldrd	r6, r7, [sp]
 801671c:	2200      	movs	r2, #0
 801671e:	2300      	movs	r3, #0
 8016720:	4630      	mov	r0, r6
 8016722:	4639      	mov	r1, r7
 8016724:	f7ea f9e8 	bl	8000af8 <__aeabi_dcmpeq>
 8016728:	4681      	mov	r9, r0
 801672a:	b168      	cbz	r0, 8016748 <_dtoa_r+0xc8>
 801672c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801672e:	2301      	movs	r3, #1
 8016730:	6013      	str	r3, [r2, #0]
 8016732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016734:	2b00      	cmp	r3, #0
 8016736:	f000 8524 	beq.w	8017182 <_dtoa_r+0xb02>
 801673a:	4b9a      	ldr	r3, [pc, #616]	; (80169a4 <_dtoa_r+0x324>)
 801673c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801673e:	f103 3bff 	add.w	fp, r3, #4294967295
 8016742:	6013      	str	r3, [r2, #0]
 8016744:	f000 bd28 	b.w	8017198 <_dtoa_r+0xb18>
 8016748:	aa14      	add	r2, sp, #80	; 0x50
 801674a:	a915      	add	r1, sp, #84	; 0x54
 801674c:	ec47 6b10 	vmov	d0, r6, r7
 8016750:	4620      	mov	r0, r4
 8016752:	f001 fbfb 	bl	8017f4c <__d2b>
 8016756:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801675a:	9004      	str	r0, [sp, #16]
 801675c:	2d00      	cmp	r5, #0
 801675e:	d07c      	beq.n	801685a <_dtoa_r+0x1da>
 8016760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016764:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016768:	46b2      	mov	sl, r6
 801676a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801676e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016772:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016776:	2200      	movs	r2, #0
 8016778:	4b8b      	ldr	r3, [pc, #556]	; (80169a8 <_dtoa_r+0x328>)
 801677a:	4650      	mov	r0, sl
 801677c:	4659      	mov	r1, fp
 801677e:	f7e9 fd9b 	bl	80002b8 <__aeabi_dsub>
 8016782:	a381      	add	r3, pc, #516	; (adr r3, 8016988 <_dtoa_r+0x308>)
 8016784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016788:	f7e9 ff4e 	bl	8000628 <__aeabi_dmul>
 801678c:	a380      	add	r3, pc, #512	; (adr r3, 8016990 <_dtoa_r+0x310>)
 801678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016792:	f7e9 fd93 	bl	80002bc <__adddf3>
 8016796:	4606      	mov	r6, r0
 8016798:	4628      	mov	r0, r5
 801679a:	460f      	mov	r7, r1
 801679c:	f7e9 feda 	bl	8000554 <__aeabi_i2d>
 80167a0:	a37d      	add	r3, pc, #500	; (adr r3, 8016998 <_dtoa_r+0x318>)
 80167a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a6:	f7e9 ff3f 	bl	8000628 <__aeabi_dmul>
 80167aa:	4602      	mov	r2, r0
 80167ac:	460b      	mov	r3, r1
 80167ae:	4630      	mov	r0, r6
 80167b0:	4639      	mov	r1, r7
 80167b2:	f7e9 fd83 	bl	80002bc <__adddf3>
 80167b6:	4606      	mov	r6, r0
 80167b8:	460f      	mov	r7, r1
 80167ba:	f7ea f9e5 	bl	8000b88 <__aeabi_d2iz>
 80167be:	2200      	movs	r2, #0
 80167c0:	4682      	mov	sl, r0
 80167c2:	2300      	movs	r3, #0
 80167c4:	4630      	mov	r0, r6
 80167c6:	4639      	mov	r1, r7
 80167c8:	f7ea f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80167cc:	b148      	cbz	r0, 80167e2 <_dtoa_r+0x162>
 80167ce:	4650      	mov	r0, sl
 80167d0:	f7e9 fec0 	bl	8000554 <__aeabi_i2d>
 80167d4:	4632      	mov	r2, r6
 80167d6:	463b      	mov	r3, r7
 80167d8:	f7ea f98e 	bl	8000af8 <__aeabi_dcmpeq>
 80167dc:	b908      	cbnz	r0, 80167e2 <_dtoa_r+0x162>
 80167de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167e2:	f1ba 0f16 	cmp.w	sl, #22
 80167e6:	d859      	bhi.n	801689c <_dtoa_r+0x21c>
 80167e8:	4970      	ldr	r1, [pc, #448]	; (80169ac <_dtoa_r+0x32c>)
 80167ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80167ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167f6:	f7ea f9a7 	bl	8000b48 <__aeabi_dcmpgt>
 80167fa:	2800      	cmp	r0, #0
 80167fc:	d050      	beq.n	80168a0 <_dtoa_r+0x220>
 80167fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016802:	2300      	movs	r3, #0
 8016804:	930f      	str	r3, [sp, #60]	; 0x3c
 8016806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016808:	1b5d      	subs	r5, r3, r5
 801680a:	f1b5 0801 	subs.w	r8, r5, #1
 801680e:	bf49      	itett	mi
 8016810:	f1c5 0301 	rsbmi	r3, r5, #1
 8016814:	2300      	movpl	r3, #0
 8016816:	9305      	strmi	r3, [sp, #20]
 8016818:	f04f 0800 	movmi.w	r8, #0
 801681c:	bf58      	it	pl
 801681e:	9305      	strpl	r3, [sp, #20]
 8016820:	f1ba 0f00 	cmp.w	sl, #0
 8016824:	db3e      	blt.n	80168a4 <_dtoa_r+0x224>
 8016826:	2300      	movs	r3, #0
 8016828:	44d0      	add	r8, sl
 801682a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801682e:	9307      	str	r3, [sp, #28]
 8016830:	9b06      	ldr	r3, [sp, #24]
 8016832:	2b09      	cmp	r3, #9
 8016834:	f200 8090 	bhi.w	8016958 <_dtoa_r+0x2d8>
 8016838:	2b05      	cmp	r3, #5
 801683a:	bfc4      	itt	gt
 801683c:	3b04      	subgt	r3, #4
 801683e:	9306      	strgt	r3, [sp, #24]
 8016840:	9b06      	ldr	r3, [sp, #24]
 8016842:	f1a3 0302 	sub.w	r3, r3, #2
 8016846:	bfcc      	ite	gt
 8016848:	2500      	movgt	r5, #0
 801684a:	2501      	movle	r5, #1
 801684c:	2b03      	cmp	r3, #3
 801684e:	f200 808f 	bhi.w	8016970 <_dtoa_r+0x2f0>
 8016852:	e8df f003 	tbb	[pc, r3]
 8016856:	7f7d      	.short	0x7f7d
 8016858:	7131      	.short	0x7131
 801685a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801685e:	441d      	add	r5, r3
 8016860:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016864:	2820      	cmp	r0, #32
 8016866:	dd13      	ble.n	8016890 <_dtoa_r+0x210>
 8016868:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801686c:	9b00      	ldr	r3, [sp, #0]
 801686e:	fa08 f800 	lsl.w	r8, r8, r0
 8016872:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016876:	fa23 f000 	lsr.w	r0, r3, r0
 801687a:	ea48 0000 	orr.w	r0, r8, r0
 801687e:	f7e9 fe59 	bl	8000534 <__aeabi_ui2d>
 8016882:	2301      	movs	r3, #1
 8016884:	4682      	mov	sl, r0
 8016886:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801688a:	3d01      	subs	r5, #1
 801688c:	9313      	str	r3, [sp, #76]	; 0x4c
 801688e:	e772      	b.n	8016776 <_dtoa_r+0xf6>
 8016890:	9b00      	ldr	r3, [sp, #0]
 8016892:	f1c0 0020 	rsb	r0, r0, #32
 8016896:	fa03 f000 	lsl.w	r0, r3, r0
 801689a:	e7f0      	b.n	801687e <_dtoa_r+0x1fe>
 801689c:	2301      	movs	r3, #1
 801689e:	e7b1      	b.n	8016804 <_dtoa_r+0x184>
 80168a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80168a2:	e7b0      	b.n	8016806 <_dtoa_r+0x186>
 80168a4:	9b05      	ldr	r3, [sp, #20]
 80168a6:	eba3 030a 	sub.w	r3, r3, sl
 80168aa:	9305      	str	r3, [sp, #20]
 80168ac:	f1ca 0300 	rsb	r3, sl, #0
 80168b0:	9307      	str	r3, [sp, #28]
 80168b2:	2300      	movs	r3, #0
 80168b4:	930e      	str	r3, [sp, #56]	; 0x38
 80168b6:	e7bb      	b.n	8016830 <_dtoa_r+0x1b0>
 80168b8:	2301      	movs	r3, #1
 80168ba:	930a      	str	r3, [sp, #40]	; 0x28
 80168bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168be:	2b00      	cmp	r3, #0
 80168c0:	dd59      	ble.n	8016976 <_dtoa_r+0x2f6>
 80168c2:	9302      	str	r3, [sp, #8]
 80168c4:	4699      	mov	r9, r3
 80168c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80168c8:	2200      	movs	r2, #0
 80168ca:	6072      	str	r2, [r6, #4]
 80168cc:	2204      	movs	r2, #4
 80168ce:	f102 0014 	add.w	r0, r2, #20
 80168d2:	4298      	cmp	r0, r3
 80168d4:	6871      	ldr	r1, [r6, #4]
 80168d6:	d953      	bls.n	8016980 <_dtoa_r+0x300>
 80168d8:	4620      	mov	r0, r4
 80168da:	f000 fff6 	bl	80178ca <_Balloc>
 80168de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80168e0:	6030      	str	r0, [r6, #0]
 80168e2:	f1b9 0f0e 	cmp.w	r9, #14
 80168e6:	f8d3 b000 	ldr.w	fp, [r3]
 80168ea:	f200 80e6 	bhi.w	8016aba <_dtoa_r+0x43a>
 80168ee:	2d00      	cmp	r5, #0
 80168f0:	f000 80e3 	beq.w	8016aba <_dtoa_r+0x43a>
 80168f4:	ed9d 7b00 	vldr	d7, [sp]
 80168f8:	f1ba 0f00 	cmp.w	sl, #0
 80168fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016900:	dd74      	ble.n	80169ec <_dtoa_r+0x36c>
 8016902:	4a2a      	ldr	r2, [pc, #168]	; (80169ac <_dtoa_r+0x32c>)
 8016904:	f00a 030f 	and.w	r3, sl, #15
 8016908:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801690c:	ed93 7b00 	vldr	d7, [r3]
 8016910:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016914:	06f0      	lsls	r0, r6, #27
 8016916:	ed8d 7b08 	vstr	d7, [sp, #32]
 801691a:	d565      	bpl.n	80169e8 <_dtoa_r+0x368>
 801691c:	4b24      	ldr	r3, [pc, #144]	; (80169b0 <_dtoa_r+0x330>)
 801691e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016922:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016926:	f7e9 ffa9 	bl	800087c <__aeabi_ddiv>
 801692a:	e9cd 0100 	strd	r0, r1, [sp]
 801692e:	f006 060f 	and.w	r6, r6, #15
 8016932:	2503      	movs	r5, #3
 8016934:	4f1e      	ldr	r7, [pc, #120]	; (80169b0 <_dtoa_r+0x330>)
 8016936:	e04c      	b.n	80169d2 <_dtoa_r+0x352>
 8016938:	2301      	movs	r3, #1
 801693a:	930a      	str	r3, [sp, #40]	; 0x28
 801693c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801693e:	4453      	add	r3, sl
 8016940:	f103 0901 	add.w	r9, r3, #1
 8016944:	9302      	str	r3, [sp, #8]
 8016946:	464b      	mov	r3, r9
 8016948:	2b01      	cmp	r3, #1
 801694a:	bfb8      	it	lt
 801694c:	2301      	movlt	r3, #1
 801694e:	e7ba      	b.n	80168c6 <_dtoa_r+0x246>
 8016950:	2300      	movs	r3, #0
 8016952:	e7b2      	b.n	80168ba <_dtoa_r+0x23a>
 8016954:	2300      	movs	r3, #0
 8016956:	e7f0      	b.n	801693a <_dtoa_r+0x2ba>
 8016958:	2501      	movs	r5, #1
 801695a:	2300      	movs	r3, #0
 801695c:	9306      	str	r3, [sp, #24]
 801695e:	950a      	str	r5, [sp, #40]	; 0x28
 8016960:	f04f 33ff 	mov.w	r3, #4294967295
 8016964:	9302      	str	r3, [sp, #8]
 8016966:	4699      	mov	r9, r3
 8016968:	2200      	movs	r2, #0
 801696a:	2312      	movs	r3, #18
 801696c:	920b      	str	r2, [sp, #44]	; 0x2c
 801696e:	e7aa      	b.n	80168c6 <_dtoa_r+0x246>
 8016970:	2301      	movs	r3, #1
 8016972:	930a      	str	r3, [sp, #40]	; 0x28
 8016974:	e7f4      	b.n	8016960 <_dtoa_r+0x2e0>
 8016976:	2301      	movs	r3, #1
 8016978:	9302      	str	r3, [sp, #8]
 801697a:	4699      	mov	r9, r3
 801697c:	461a      	mov	r2, r3
 801697e:	e7f5      	b.n	801696c <_dtoa_r+0x2ec>
 8016980:	3101      	adds	r1, #1
 8016982:	6071      	str	r1, [r6, #4]
 8016984:	0052      	lsls	r2, r2, #1
 8016986:	e7a2      	b.n	80168ce <_dtoa_r+0x24e>
 8016988:	636f4361 	.word	0x636f4361
 801698c:	3fd287a7 	.word	0x3fd287a7
 8016990:	8b60c8b3 	.word	0x8b60c8b3
 8016994:	3fc68a28 	.word	0x3fc68a28
 8016998:	509f79fb 	.word	0x509f79fb
 801699c:	3fd34413 	.word	0x3fd34413
 80169a0:	7ff00000 	.word	0x7ff00000
 80169a4:	080194a4 	.word	0x080194a4
 80169a8:	3ff80000 	.word	0x3ff80000
 80169ac:	080193a8 	.word	0x080193a8
 80169b0:	08019380 	.word	0x08019380
 80169b4:	08019371 	.word	0x08019371
 80169b8:	07f1      	lsls	r1, r6, #31
 80169ba:	d508      	bpl.n	80169ce <_dtoa_r+0x34e>
 80169bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169c4:	f7e9 fe30 	bl	8000628 <__aeabi_dmul>
 80169c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80169cc:	3501      	adds	r5, #1
 80169ce:	1076      	asrs	r6, r6, #1
 80169d0:	3708      	adds	r7, #8
 80169d2:	2e00      	cmp	r6, #0
 80169d4:	d1f0      	bne.n	80169b8 <_dtoa_r+0x338>
 80169d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169de:	f7e9 ff4d 	bl	800087c <__aeabi_ddiv>
 80169e2:	e9cd 0100 	strd	r0, r1, [sp]
 80169e6:	e01a      	b.n	8016a1e <_dtoa_r+0x39e>
 80169e8:	2502      	movs	r5, #2
 80169ea:	e7a3      	b.n	8016934 <_dtoa_r+0x2b4>
 80169ec:	f000 80a0 	beq.w	8016b30 <_dtoa_r+0x4b0>
 80169f0:	f1ca 0600 	rsb	r6, sl, #0
 80169f4:	4b9f      	ldr	r3, [pc, #636]	; (8016c74 <_dtoa_r+0x5f4>)
 80169f6:	4fa0      	ldr	r7, [pc, #640]	; (8016c78 <_dtoa_r+0x5f8>)
 80169f8:	f006 020f 	and.w	r2, r6, #15
 80169fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016a08:	f7e9 fe0e 	bl	8000628 <__aeabi_dmul>
 8016a0c:	e9cd 0100 	strd	r0, r1, [sp]
 8016a10:	1136      	asrs	r6, r6, #4
 8016a12:	2300      	movs	r3, #0
 8016a14:	2502      	movs	r5, #2
 8016a16:	2e00      	cmp	r6, #0
 8016a18:	d17f      	bne.n	8016b1a <_dtoa_r+0x49a>
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d1e1      	bne.n	80169e2 <_dtoa_r+0x362>
 8016a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	f000 8087 	beq.w	8016b34 <_dtoa_r+0x4b4>
 8016a26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	4b93      	ldr	r3, [pc, #588]	; (8016c7c <_dtoa_r+0x5fc>)
 8016a2e:	4630      	mov	r0, r6
 8016a30:	4639      	mov	r1, r7
 8016a32:	f7ea f86b 	bl	8000b0c <__aeabi_dcmplt>
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d07c      	beq.n	8016b34 <_dtoa_r+0x4b4>
 8016a3a:	f1b9 0f00 	cmp.w	r9, #0
 8016a3e:	d079      	beq.n	8016b34 <_dtoa_r+0x4b4>
 8016a40:	9b02      	ldr	r3, [sp, #8]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	dd35      	ble.n	8016ab2 <_dtoa_r+0x432>
 8016a46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016a4a:	9308      	str	r3, [sp, #32]
 8016a4c:	4639      	mov	r1, r7
 8016a4e:	2200      	movs	r2, #0
 8016a50:	4b8b      	ldr	r3, [pc, #556]	; (8016c80 <_dtoa_r+0x600>)
 8016a52:	4630      	mov	r0, r6
 8016a54:	f7e9 fde8 	bl	8000628 <__aeabi_dmul>
 8016a58:	e9cd 0100 	strd	r0, r1, [sp]
 8016a5c:	9f02      	ldr	r7, [sp, #8]
 8016a5e:	3501      	adds	r5, #1
 8016a60:	4628      	mov	r0, r5
 8016a62:	f7e9 fd77 	bl	8000554 <__aeabi_i2d>
 8016a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a6a:	f7e9 fddd 	bl	8000628 <__aeabi_dmul>
 8016a6e:	2200      	movs	r2, #0
 8016a70:	4b84      	ldr	r3, [pc, #528]	; (8016c84 <_dtoa_r+0x604>)
 8016a72:	f7e9 fc23 	bl	80002bc <__adddf3>
 8016a76:	4605      	mov	r5, r0
 8016a78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016a7c:	2f00      	cmp	r7, #0
 8016a7e:	d15d      	bne.n	8016b3c <_dtoa_r+0x4bc>
 8016a80:	2200      	movs	r2, #0
 8016a82:	4b81      	ldr	r3, [pc, #516]	; (8016c88 <_dtoa_r+0x608>)
 8016a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a88:	f7e9 fc16 	bl	80002b8 <__aeabi_dsub>
 8016a8c:	462a      	mov	r2, r5
 8016a8e:	4633      	mov	r3, r6
 8016a90:	e9cd 0100 	strd	r0, r1, [sp]
 8016a94:	f7ea f858 	bl	8000b48 <__aeabi_dcmpgt>
 8016a98:	2800      	cmp	r0, #0
 8016a9a:	f040 8288 	bne.w	8016fae <_dtoa_r+0x92e>
 8016a9e:	462a      	mov	r2, r5
 8016aa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aa8:	f7ea f830 	bl	8000b0c <__aeabi_dcmplt>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	f040 827c 	bne.w	8016faa <_dtoa_r+0x92a>
 8016ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8016aba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	f2c0 8150 	blt.w	8016d62 <_dtoa_r+0x6e2>
 8016ac2:	f1ba 0f0e 	cmp.w	sl, #14
 8016ac6:	f300 814c 	bgt.w	8016d62 <_dtoa_r+0x6e2>
 8016aca:	4b6a      	ldr	r3, [pc, #424]	; (8016c74 <_dtoa_r+0x5f4>)
 8016acc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016ad0:	ed93 7b00 	vldr	d7, [r3]
 8016ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016adc:	f280 80d8 	bge.w	8016c90 <_dtoa_r+0x610>
 8016ae0:	f1b9 0f00 	cmp.w	r9, #0
 8016ae4:	f300 80d4 	bgt.w	8016c90 <_dtoa_r+0x610>
 8016ae8:	f040 825e 	bne.w	8016fa8 <_dtoa_r+0x928>
 8016aec:	2200      	movs	r2, #0
 8016aee:	4b66      	ldr	r3, [pc, #408]	; (8016c88 <_dtoa_r+0x608>)
 8016af0:	ec51 0b17 	vmov	r0, r1, d7
 8016af4:	f7e9 fd98 	bl	8000628 <__aeabi_dmul>
 8016af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016afc:	f7ea f81a 	bl	8000b34 <__aeabi_dcmpge>
 8016b00:	464f      	mov	r7, r9
 8016b02:	464e      	mov	r6, r9
 8016b04:	2800      	cmp	r0, #0
 8016b06:	f040 8234 	bne.w	8016f72 <_dtoa_r+0x8f2>
 8016b0a:	2331      	movs	r3, #49	; 0x31
 8016b0c:	f10b 0501 	add.w	r5, fp, #1
 8016b10:	f88b 3000 	strb.w	r3, [fp]
 8016b14:	f10a 0a01 	add.w	sl, sl, #1
 8016b18:	e22f      	b.n	8016f7a <_dtoa_r+0x8fa>
 8016b1a:	07f2      	lsls	r2, r6, #31
 8016b1c:	d505      	bpl.n	8016b2a <_dtoa_r+0x4aa>
 8016b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b22:	f7e9 fd81 	bl	8000628 <__aeabi_dmul>
 8016b26:	3501      	adds	r5, #1
 8016b28:	2301      	movs	r3, #1
 8016b2a:	1076      	asrs	r6, r6, #1
 8016b2c:	3708      	adds	r7, #8
 8016b2e:	e772      	b.n	8016a16 <_dtoa_r+0x396>
 8016b30:	2502      	movs	r5, #2
 8016b32:	e774      	b.n	8016a1e <_dtoa_r+0x39e>
 8016b34:	f8cd a020 	str.w	sl, [sp, #32]
 8016b38:	464f      	mov	r7, r9
 8016b3a:	e791      	b.n	8016a60 <_dtoa_r+0x3e0>
 8016b3c:	4b4d      	ldr	r3, [pc, #308]	; (8016c74 <_dtoa_r+0x5f4>)
 8016b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016b42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d047      	beq.n	8016bdc <_dtoa_r+0x55c>
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	460b      	mov	r3, r1
 8016b50:	2000      	movs	r0, #0
 8016b52:	494e      	ldr	r1, [pc, #312]	; (8016c8c <_dtoa_r+0x60c>)
 8016b54:	f7e9 fe92 	bl	800087c <__aeabi_ddiv>
 8016b58:	462a      	mov	r2, r5
 8016b5a:	4633      	mov	r3, r6
 8016b5c:	f7e9 fbac 	bl	80002b8 <__aeabi_dsub>
 8016b60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b64:	465d      	mov	r5, fp
 8016b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b6a:	f7ea f80d 	bl	8000b88 <__aeabi_d2iz>
 8016b6e:	4606      	mov	r6, r0
 8016b70:	f7e9 fcf0 	bl	8000554 <__aeabi_i2d>
 8016b74:	4602      	mov	r2, r0
 8016b76:	460b      	mov	r3, r1
 8016b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b7c:	f7e9 fb9c 	bl	80002b8 <__aeabi_dsub>
 8016b80:	3630      	adds	r6, #48	; 0x30
 8016b82:	f805 6b01 	strb.w	r6, [r5], #1
 8016b86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8016b8e:	f7e9 ffbd 	bl	8000b0c <__aeabi_dcmplt>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d163      	bne.n	8016c5e <_dtoa_r+0x5de>
 8016b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	4937      	ldr	r1, [pc, #220]	; (8016c7c <_dtoa_r+0x5fc>)
 8016b9e:	f7e9 fb8b 	bl	80002b8 <__aeabi_dsub>
 8016ba2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ba6:	f7e9 ffb1 	bl	8000b0c <__aeabi_dcmplt>
 8016baa:	2800      	cmp	r0, #0
 8016bac:	f040 80b7 	bne.w	8016d1e <_dtoa_r+0x69e>
 8016bb0:	eba5 030b 	sub.w	r3, r5, fp
 8016bb4:	429f      	cmp	r7, r3
 8016bb6:	f77f af7c 	ble.w	8016ab2 <_dtoa_r+0x432>
 8016bba:	2200      	movs	r2, #0
 8016bbc:	4b30      	ldr	r3, [pc, #192]	; (8016c80 <_dtoa_r+0x600>)
 8016bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016bc2:	f7e9 fd31 	bl	8000628 <__aeabi_dmul>
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016bcc:	4b2c      	ldr	r3, [pc, #176]	; (8016c80 <_dtoa_r+0x600>)
 8016bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bd2:	f7e9 fd29 	bl	8000628 <__aeabi_dmul>
 8016bd6:	e9cd 0100 	strd	r0, r1, [sp]
 8016bda:	e7c4      	b.n	8016b66 <_dtoa_r+0x4e6>
 8016bdc:	462a      	mov	r2, r5
 8016bde:	4633      	mov	r3, r6
 8016be0:	f7e9 fd22 	bl	8000628 <__aeabi_dmul>
 8016be4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016be8:	eb0b 0507 	add.w	r5, fp, r7
 8016bec:	465e      	mov	r6, fp
 8016bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bf2:	f7e9 ffc9 	bl	8000b88 <__aeabi_d2iz>
 8016bf6:	4607      	mov	r7, r0
 8016bf8:	f7e9 fcac 	bl	8000554 <__aeabi_i2d>
 8016bfc:	3730      	adds	r7, #48	; 0x30
 8016bfe:	4602      	mov	r2, r0
 8016c00:	460b      	mov	r3, r1
 8016c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c06:	f7e9 fb57 	bl	80002b8 <__aeabi_dsub>
 8016c0a:	f806 7b01 	strb.w	r7, [r6], #1
 8016c0e:	42ae      	cmp	r6, r5
 8016c10:	e9cd 0100 	strd	r0, r1, [sp]
 8016c14:	f04f 0200 	mov.w	r2, #0
 8016c18:	d126      	bne.n	8016c68 <_dtoa_r+0x5e8>
 8016c1a:	4b1c      	ldr	r3, [pc, #112]	; (8016c8c <_dtoa_r+0x60c>)
 8016c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c20:	f7e9 fb4c 	bl	80002bc <__adddf3>
 8016c24:	4602      	mov	r2, r0
 8016c26:	460b      	mov	r3, r1
 8016c28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c2c:	f7e9 ff8c 	bl	8000b48 <__aeabi_dcmpgt>
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d174      	bne.n	8016d1e <_dtoa_r+0x69e>
 8016c34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016c38:	2000      	movs	r0, #0
 8016c3a:	4914      	ldr	r1, [pc, #80]	; (8016c8c <_dtoa_r+0x60c>)
 8016c3c:	f7e9 fb3c 	bl	80002b8 <__aeabi_dsub>
 8016c40:	4602      	mov	r2, r0
 8016c42:	460b      	mov	r3, r1
 8016c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c48:	f7e9 ff60 	bl	8000b0c <__aeabi_dcmplt>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	f43f af30 	beq.w	8016ab2 <_dtoa_r+0x432>
 8016c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c56:	2b30      	cmp	r3, #48	; 0x30
 8016c58:	f105 32ff 	add.w	r2, r5, #4294967295
 8016c5c:	d002      	beq.n	8016c64 <_dtoa_r+0x5e4>
 8016c5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016c62:	e04a      	b.n	8016cfa <_dtoa_r+0x67a>
 8016c64:	4615      	mov	r5, r2
 8016c66:	e7f4      	b.n	8016c52 <_dtoa_r+0x5d2>
 8016c68:	4b05      	ldr	r3, [pc, #20]	; (8016c80 <_dtoa_r+0x600>)
 8016c6a:	f7e9 fcdd 	bl	8000628 <__aeabi_dmul>
 8016c6e:	e9cd 0100 	strd	r0, r1, [sp]
 8016c72:	e7bc      	b.n	8016bee <_dtoa_r+0x56e>
 8016c74:	080193a8 	.word	0x080193a8
 8016c78:	08019380 	.word	0x08019380
 8016c7c:	3ff00000 	.word	0x3ff00000
 8016c80:	40240000 	.word	0x40240000
 8016c84:	401c0000 	.word	0x401c0000
 8016c88:	40140000 	.word	0x40140000
 8016c8c:	3fe00000 	.word	0x3fe00000
 8016c90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016c94:	465d      	mov	r5, fp
 8016c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c9a:	4630      	mov	r0, r6
 8016c9c:	4639      	mov	r1, r7
 8016c9e:	f7e9 fded 	bl	800087c <__aeabi_ddiv>
 8016ca2:	f7e9 ff71 	bl	8000b88 <__aeabi_d2iz>
 8016ca6:	4680      	mov	r8, r0
 8016ca8:	f7e9 fc54 	bl	8000554 <__aeabi_i2d>
 8016cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016cb0:	f7e9 fcba 	bl	8000628 <__aeabi_dmul>
 8016cb4:	4602      	mov	r2, r0
 8016cb6:	460b      	mov	r3, r1
 8016cb8:	4630      	mov	r0, r6
 8016cba:	4639      	mov	r1, r7
 8016cbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016cc0:	f7e9 fafa 	bl	80002b8 <__aeabi_dsub>
 8016cc4:	f805 6b01 	strb.w	r6, [r5], #1
 8016cc8:	eba5 060b 	sub.w	r6, r5, fp
 8016ccc:	45b1      	cmp	r9, r6
 8016cce:	4602      	mov	r2, r0
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	d139      	bne.n	8016d48 <_dtoa_r+0x6c8>
 8016cd4:	f7e9 faf2 	bl	80002bc <__adddf3>
 8016cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016cdc:	4606      	mov	r6, r0
 8016cde:	460f      	mov	r7, r1
 8016ce0:	f7e9 ff32 	bl	8000b48 <__aeabi_dcmpgt>
 8016ce4:	b9c8      	cbnz	r0, 8016d1a <_dtoa_r+0x69a>
 8016ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016cea:	4630      	mov	r0, r6
 8016cec:	4639      	mov	r1, r7
 8016cee:	f7e9 ff03 	bl	8000af8 <__aeabi_dcmpeq>
 8016cf2:	b110      	cbz	r0, 8016cfa <_dtoa_r+0x67a>
 8016cf4:	f018 0f01 	tst.w	r8, #1
 8016cf8:	d10f      	bne.n	8016d1a <_dtoa_r+0x69a>
 8016cfa:	9904      	ldr	r1, [sp, #16]
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f000 fe18 	bl	8017932 <_Bfree>
 8016d02:	2300      	movs	r3, #0
 8016d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d06:	702b      	strb	r3, [r5, #0]
 8016d08:	f10a 0301 	add.w	r3, sl, #1
 8016d0c:	6013      	str	r3, [r2, #0]
 8016d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	f000 8241 	beq.w	8017198 <_dtoa_r+0xb18>
 8016d16:	601d      	str	r5, [r3, #0]
 8016d18:	e23e      	b.n	8017198 <_dtoa_r+0xb18>
 8016d1a:	f8cd a020 	str.w	sl, [sp, #32]
 8016d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016d22:	2a39      	cmp	r2, #57	; 0x39
 8016d24:	f105 33ff 	add.w	r3, r5, #4294967295
 8016d28:	d108      	bne.n	8016d3c <_dtoa_r+0x6bc>
 8016d2a:	459b      	cmp	fp, r3
 8016d2c:	d10a      	bne.n	8016d44 <_dtoa_r+0x6c4>
 8016d2e:	9b08      	ldr	r3, [sp, #32]
 8016d30:	3301      	adds	r3, #1
 8016d32:	9308      	str	r3, [sp, #32]
 8016d34:	2330      	movs	r3, #48	; 0x30
 8016d36:	f88b 3000 	strb.w	r3, [fp]
 8016d3a:	465b      	mov	r3, fp
 8016d3c:	781a      	ldrb	r2, [r3, #0]
 8016d3e:	3201      	adds	r2, #1
 8016d40:	701a      	strb	r2, [r3, #0]
 8016d42:	e78c      	b.n	8016c5e <_dtoa_r+0x5de>
 8016d44:	461d      	mov	r5, r3
 8016d46:	e7ea      	b.n	8016d1e <_dtoa_r+0x69e>
 8016d48:	2200      	movs	r2, #0
 8016d4a:	4b9b      	ldr	r3, [pc, #620]	; (8016fb8 <_dtoa_r+0x938>)
 8016d4c:	f7e9 fc6c 	bl	8000628 <__aeabi_dmul>
 8016d50:	2200      	movs	r2, #0
 8016d52:	2300      	movs	r3, #0
 8016d54:	4606      	mov	r6, r0
 8016d56:	460f      	mov	r7, r1
 8016d58:	f7e9 fece 	bl	8000af8 <__aeabi_dcmpeq>
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	d09a      	beq.n	8016c96 <_dtoa_r+0x616>
 8016d60:	e7cb      	b.n	8016cfa <_dtoa_r+0x67a>
 8016d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d64:	2a00      	cmp	r2, #0
 8016d66:	f000 808b 	beq.w	8016e80 <_dtoa_r+0x800>
 8016d6a:	9a06      	ldr	r2, [sp, #24]
 8016d6c:	2a01      	cmp	r2, #1
 8016d6e:	dc6e      	bgt.n	8016e4e <_dtoa_r+0x7ce>
 8016d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d72:	2a00      	cmp	r2, #0
 8016d74:	d067      	beq.n	8016e46 <_dtoa_r+0x7c6>
 8016d76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016d7a:	9f07      	ldr	r7, [sp, #28]
 8016d7c:	9d05      	ldr	r5, [sp, #20]
 8016d7e:	9a05      	ldr	r2, [sp, #20]
 8016d80:	2101      	movs	r1, #1
 8016d82:	441a      	add	r2, r3
 8016d84:	4620      	mov	r0, r4
 8016d86:	9205      	str	r2, [sp, #20]
 8016d88:	4498      	add	r8, r3
 8016d8a:	f000 feb0 	bl	8017aee <__i2b>
 8016d8e:	4606      	mov	r6, r0
 8016d90:	2d00      	cmp	r5, #0
 8016d92:	dd0c      	ble.n	8016dae <_dtoa_r+0x72e>
 8016d94:	f1b8 0f00 	cmp.w	r8, #0
 8016d98:	dd09      	ble.n	8016dae <_dtoa_r+0x72e>
 8016d9a:	4545      	cmp	r5, r8
 8016d9c:	9a05      	ldr	r2, [sp, #20]
 8016d9e:	462b      	mov	r3, r5
 8016da0:	bfa8      	it	ge
 8016da2:	4643      	movge	r3, r8
 8016da4:	1ad2      	subs	r2, r2, r3
 8016da6:	9205      	str	r2, [sp, #20]
 8016da8:	1aed      	subs	r5, r5, r3
 8016daa:	eba8 0803 	sub.w	r8, r8, r3
 8016dae:	9b07      	ldr	r3, [sp, #28]
 8016db0:	b1eb      	cbz	r3, 8016dee <_dtoa_r+0x76e>
 8016db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d067      	beq.n	8016e88 <_dtoa_r+0x808>
 8016db8:	b18f      	cbz	r7, 8016dde <_dtoa_r+0x75e>
 8016dba:	4631      	mov	r1, r6
 8016dbc:	463a      	mov	r2, r7
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f000 ff34 	bl	8017c2c <__pow5mult>
 8016dc4:	9a04      	ldr	r2, [sp, #16]
 8016dc6:	4601      	mov	r1, r0
 8016dc8:	4606      	mov	r6, r0
 8016dca:	4620      	mov	r0, r4
 8016dcc:	f000 fe98 	bl	8017b00 <__multiply>
 8016dd0:	9904      	ldr	r1, [sp, #16]
 8016dd2:	9008      	str	r0, [sp, #32]
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f000 fdac 	bl	8017932 <_Bfree>
 8016dda:	9b08      	ldr	r3, [sp, #32]
 8016ddc:	9304      	str	r3, [sp, #16]
 8016dde:	9b07      	ldr	r3, [sp, #28]
 8016de0:	1bda      	subs	r2, r3, r7
 8016de2:	d004      	beq.n	8016dee <_dtoa_r+0x76e>
 8016de4:	9904      	ldr	r1, [sp, #16]
 8016de6:	4620      	mov	r0, r4
 8016de8:	f000 ff20 	bl	8017c2c <__pow5mult>
 8016dec:	9004      	str	r0, [sp, #16]
 8016dee:	2101      	movs	r1, #1
 8016df0:	4620      	mov	r0, r4
 8016df2:	f000 fe7c 	bl	8017aee <__i2b>
 8016df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016df8:	4607      	mov	r7, r0
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	f000 81d0 	beq.w	80171a0 <_dtoa_r+0xb20>
 8016e00:	461a      	mov	r2, r3
 8016e02:	4601      	mov	r1, r0
 8016e04:	4620      	mov	r0, r4
 8016e06:	f000 ff11 	bl	8017c2c <__pow5mult>
 8016e0a:	9b06      	ldr	r3, [sp, #24]
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	4607      	mov	r7, r0
 8016e10:	dc40      	bgt.n	8016e94 <_dtoa_r+0x814>
 8016e12:	9b00      	ldr	r3, [sp, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d139      	bne.n	8016e8c <_dtoa_r+0x80c>
 8016e18:	9b01      	ldr	r3, [sp, #4]
 8016e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d136      	bne.n	8016e90 <_dtoa_r+0x810>
 8016e22:	9b01      	ldr	r3, [sp, #4]
 8016e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e28:	0d1b      	lsrs	r3, r3, #20
 8016e2a:	051b      	lsls	r3, r3, #20
 8016e2c:	b12b      	cbz	r3, 8016e3a <_dtoa_r+0x7ba>
 8016e2e:	9b05      	ldr	r3, [sp, #20]
 8016e30:	3301      	adds	r3, #1
 8016e32:	9305      	str	r3, [sp, #20]
 8016e34:	f108 0801 	add.w	r8, r8, #1
 8016e38:	2301      	movs	r3, #1
 8016e3a:	9307      	str	r3, [sp, #28]
 8016e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d12a      	bne.n	8016e98 <_dtoa_r+0x818>
 8016e42:	2001      	movs	r0, #1
 8016e44:	e030      	b.n	8016ea8 <_dtoa_r+0x828>
 8016e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016e4c:	e795      	b.n	8016d7a <_dtoa_r+0x6fa>
 8016e4e:	9b07      	ldr	r3, [sp, #28]
 8016e50:	f109 37ff 	add.w	r7, r9, #4294967295
 8016e54:	42bb      	cmp	r3, r7
 8016e56:	bfbf      	itttt	lt
 8016e58:	9b07      	ldrlt	r3, [sp, #28]
 8016e5a:	9707      	strlt	r7, [sp, #28]
 8016e5c:	1afa      	sublt	r2, r7, r3
 8016e5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016e60:	bfbb      	ittet	lt
 8016e62:	189b      	addlt	r3, r3, r2
 8016e64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016e66:	1bdf      	subge	r7, r3, r7
 8016e68:	2700      	movlt	r7, #0
 8016e6a:	f1b9 0f00 	cmp.w	r9, #0
 8016e6e:	bfb5      	itete	lt
 8016e70:	9b05      	ldrlt	r3, [sp, #20]
 8016e72:	9d05      	ldrge	r5, [sp, #20]
 8016e74:	eba3 0509 	sublt.w	r5, r3, r9
 8016e78:	464b      	movge	r3, r9
 8016e7a:	bfb8      	it	lt
 8016e7c:	2300      	movlt	r3, #0
 8016e7e:	e77e      	b.n	8016d7e <_dtoa_r+0x6fe>
 8016e80:	9f07      	ldr	r7, [sp, #28]
 8016e82:	9d05      	ldr	r5, [sp, #20]
 8016e84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016e86:	e783      	b.n	8016d90 <_dtoa_r+0x710>
 8016e88:	9a07      	ldr	r2, [sp, #28]
 8016e8a:	e7ab      	b.n	8016de4 <_dtoa_r+0x764>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	e7d4      	b.n	8016e3a <_dtoa_r+0x7ba>
 8016e90:	9b00      	ldr	r3, [sp, #0]
 8016e92:	e7d2      	b.n	8016e3a <_dtoa_r+0x7ba>
 8016e94:	2300      	movs	r3, #0
 8016e96:	9307      	str	r3, [sp, #28]
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016e9e:	6918      	ldr	r0, [r3, #16]
 8016ea0:	f000 fdd7 	bl	8017a52 <__hi0bits>
 8016ea4:	f1c0 0020 	rsb	r0, r0, #32
 8016ea8:	4440      	add	r0, r8
 8016eaa:	f010 001f 	ands.w	r0, r0, #31
 8016eae:	d047      	beq.n	8016f40 <_dtoa_r+0x8c0>
 8016eb0:	f1c0 0320 	rsb	r3, r0, #32
 8016eb4:	2b04      	cmp	r3, #4
 8016eb6:	dd3b      	ble.n	8016f30 <_dtoa_r+0x8b0>
 8016eb8:	9b05      	ldr	r3, [sp, #20]
 8016eba:	f1c0 001c 	rsb	r0, r0, #28
 8016ebe:	4403      	add	r3, r0
 8016ec0:	9305      	str	r3, [sp, #20]
 8016ec2:	4405      	add	r5, r0
 8016ec4:	4480      	add	r8, r0
 8016ec6:	9b05      	ldr	r3, [sp, #20]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	dd05      	ble.n	8016ed8 <_dtoa_r+0x858>
 8016ecc:	461a      	mov	r2, r3
 8016ece:	9904      	ldr	r1, [sp, #16]
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	f000 fef9 	bl	8017cc8 <__lshift>
 8016ed6:	9004      	str	r0, [sp, #16]
 8016ed8:	f1b8 0f00 	cmp.w	r8, #0
 8016edc:	dd05      	ble.n	8016eea <_dtoa_r+0x86a>
 8016ede:	4639      	mov	r1, r7
 8016ee0:	4642      	mov	r2, r8
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f000 fef0 	bl	8017cc8 <__lshift>
 8016ee8:	4607      	mov	r7, r0
 8016eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016eec:	b353      	cbz	r3, 8016f44 <_dtoa_r+0x8c4>
 8016eee:	4639      	mov	r1, r7
 8016ef0:	9804      	ldr	r0, [sp, #16]
 8016ef2:	f000 ff3d 	bl	8017d70 <__mcmp>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	da24      	bge.n	8016f44 <_dtoa_r+0x8c4>
 8016efa:	2300      	movs	r3, #0
 8016efc:	220a      	movs	r2, #10
 8016efe:	9904      	ldr	r1, [sp, #16]
 8016f00:	4620      	mov	r0, r4
 8016f02:	f000 fd2d 	bl	8017960 <__multadd>
 8016f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f08:	9004      	str	r0, [sp, #16]
 8016f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	f000 814d 	beq.w	80171ae <_dtoa_r+0xb2e>
 8016f14:	2300      	movs	r3, #0
 8016f16:	4631      	mov	r1, r6
 8016f18:	220a      	movs	r2, #10
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f000 fd20 	bl	8017960 <__multadd>
 8016f20:	9b02      	ldr	r3, [sp, #8]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	4606      	mov	r6, r0
 8016f26:	dc4f      	bgt.n	8016fc8 <_dtoa_r+0x948>
 8016f28:	9b06      	ldr	r3, [sp, #24]
 8016f2a:	2b02      	cmp	r3, #2
 8016f2c:	dd4c      	ble.n	8016fc8 <_dtoa_r+0x948>
 8016f2e:	e011      	b.n	8016f54 <_dtoa_r+0x8d4>
 8016f30:	d0c9      	beq.n	8016ec6 <_dtoa_r+0x846>
 8016f32:	9a05      	ldr	r2, [sp, #20]
 8016f34:	331c      	adds	r3, #28
 8016f36:	441a      	add	r2, r3
 8016f38:	9205      	str	r2, [sp, #20]
 8016f3a:	441d      	add	r5, r3
 8016f3c:	4498      	add	r8, r3
 8016f3e:	e7c2      	b.n	8016ec6 <_dtoa_r+0x846>
 8016f40:	4603      	mov	r3, r0
 8016f42:	e7f6      	b.n	8016f32 <_dtoa_r+0x8b2>
 8016f44:	f1b9 0f00 	cmp.w	r9, #0
 8016f48:	dc38      	bgt.n	8016fbc <_dtoa_r+0x93c>
 8016f4a:	9b06      	ldr	r3, [sp, #24]
 8016f4c:	2b02      	cmp	r3, #2
 8016f4e:	dd35      	ble.n	8016fbc <_dtoa_r+0x93c>
 8016f50:	f8cd 9008 	str.w	r9, [sp, #8]
 8016f54:	9b02      	ldr	r3, [sp, #8]
 8016f56:	b963      	cbnz	r3, 8016f72 <_dtoa_r+0x8f2>
 8016f58:	4639      	mov	r1, r7
 8016f5a:	2205      	movs	r2, #5
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f000 fcff 	bl	8017960 <__multadd>
 8016f62:	4601      	mov	r1, r0
 8016f64:	4607      	mov	r7, r0
 8016f66:	9804      	ldr	r0, [sp, #16]
 8016f68:	f000 ff02 	bl	8017d70 <__mcmp>
 8016f6c:	2800      	cmp	r0, #0
 8016f6e:	f73f adcc 	bgt.w	8016b0a <_dtoa_r+0x48a>
 8016f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f74:	465d      	mov	r5, fp
 8016f76:	ea6f 0a03 	mvn.w	sl, r3
 8016f7a:	f04f 0900 	mov.w	r9, #0
 8016f7e:	4639      	mov	r1, r7
 8016f80:	4620      	mov	r0, r4
 8016f82:	f000 fcd6 	bl	8017932 <_Bfree>
 8016f86:	2e00      	cmp	r6, #0
 8016f88:	f43f aeb7 	beq.w	8016cfa <_dtoa_r+0x67a>
 8016f8c:	f1b9 0f00 	cmp.w	r9, #0
 8016f90:	d005      	beq.n	8016f9e <_dtoa_r+0x91e>
 8016f92:	45b1      	cmp	r9, r6
 8016f94:	d003      	beq.n	8016f9e <_dtoa_r+0x91e>
 8016f96:	4649      	mov	r1, r9
 8016f98:	4620      	mov	r0, r4
 8016f9a:	f000 fcca 	bl	8017932 <_Bfree>
 8016f9e:	4631      	mov	r1, r6
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	f000 fcc6 	bl	8017932 <_Bfree>
 8016fa6:	e6a8      	b.n	8016cfa <_dtoa_r+0x67a>
 8016fa8:	2700      	movs	r7, #0
 8016faa:	463e      	mov	r6, r7
 8016fac:	e7e1      	b.n	8016f72 <_dtoa_r+0x8f2>
 8016fae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016fb2:	463e      	mov	r6, r7
 8016fb4:	e5a9      	b.n	8016b0a <_dtoa_r+0x48a>
 8016fb6:	bf00      	nop
 8016fb8:	40240000 	.word	0x40240000
 8016fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f000 80fa 	beq.w	80171bc <_dtoa_r+0xb3c>
 8016fc8:	2d00      	cmp	r5, #0
 8016fca:	dd05      	ble.n	8016fd8 <_dtoa_r+0x958>
 8016fcc:	4631      	mov	r1, r6
 8016fce:	462a      	mov	r2, r5
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f000 fe79 	bl	8017cc8 <__lshift>
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	9b07      	ldr	r3, [sp, #28]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d04c      	beq.n	8017078 <_dtoa_r+0x9f8>
 8016fde:	6871      	ldr	r1, [r6, #4]
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f000 fc72 	bl	80178ca <_Balloc>
 8016fe6:	6932      	ldr	r2, [r6, #16]
 8016fe8:	3202      	adds	r2, #2
 8016fea:	4605      	mov	r5, r0
 8016fec:	0092      	lsls	r2, r2, #2
 8016fee:	f106 010c 	add.w	r1, r6, #12
 8016ff2:	300c      	adds	r0, #12
 8016ff4:	f000 fc5e 	bl	80178b4 <memcpy>
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	4629      	mov	r1, r5
 8016ffc:	4620      	mov	r0, r4
 8016ffe:	f000 fe63 	bl	8017cc8 <__lshift>
 8017002:	9b00      	ldr	r3, [sp, #0]
 8017004:	f8cd b014 	str.w	fp, [sp, #20]
 8017008:	f003 0301 	and.w	r3, r3, #1
 801700c:	46b1      	mov	r9, r6
 801700e:	9307      	str	r3, [sp, #28]
 8017010:	4606      	mov	r6, r0
 8017012:	4639      	mov	r1, r7
 8017014:	9804      	ldr	r0, [sp, #16]
 8017016:	f7ff faa5 	bl	8016564 <quorem>
 801701a:	4649      	mov	r1, r9
 801701c:	4605      	mov	r5, r0
 801701e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017022:	9804      	ldr	r0, [sp, #16]
 8017024:	f000 fea4 	bl	8017d70 <__mcmp>
 8017028:	4632      	mov	r2, r6
 801702a:	9000      	str	r0, [sp, #0]
 801702c:	4639      	mov	r1, r7
 801702e:	4620      	mov	r0, r4
 8017030:	f000 feb8 	bl	8017da4 <__mdiff>
 8017034:	68c3      	ldr	r3, [r0, #12]
 8017036:	4602      	mov	r2, r0
 8017038:	bb03      	cbnz	r3, 801707c <_dtoa_r+0x9fc>
 801703a:	4601      	mov	r1, r0
 801703c:	9008      	str	r0, [sp, #32]
 801703e:	9804      	ldr	r0, [sp, #16]
 8017040:	f000 fe96 	bl	8017d70 <__mcmp>
 8017044:	9a08      	ldr	r2, [sp, #32]
 8017046:	4603      	mov	r3, r0
 8017048:	4611      	mov	r1, r2
 801704a:	4620      	mov	r0, r4
 801704c:	9308      	str	r3, [sp, #32]
 801704e:	f000 fc70 	bl	8017932 <_Bfree>
 8017052:	9b08      	ldr	r3, [sp, #32]
 8017054:	b9a3      	cbnz	r3, 8017080 <_dtoa_r+0xa00>
 8017056:	9a06      	ldr	r2, [sp, #24]
 8017058:	b992      	cbnz	r2, 8017080 <_dtoa_r+0xa00>
 801705a:	9a07      	ldr	r2, [sp, #28]
 801705c:	b982      	cbnz	r2, 8017080 <_dtoa_r+0xa00>
 801705e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017062:	d029      	beq.n	80170b8 <_dtoa_r+0xa38>
 8017064:	9b00      	ldr	r3, [sp, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	dd01      	ble.n	801706e <_dtoa_r+0x9ee>
 801706a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801706e:	9b05      	ldr	r3, [sp, #20]
 8017070:	1c5d      	adds	r5, r3, #1
 8017072:	f883 8000 	strb.w	r8, [r3]
 8017076:	e782      	b.n	8016f7e <_dtoa_r+0x8fe>
 8017078:	4630      	mov	r0, r6
 801707a:	e7c2      	b.n	8017002 <_dtoa_r+0x982>
 801707c:	2301      	movs	r3, #1
 801707e:	e7e3      	b.n	8017048 <_dtoa_r+0x9c8>
 8017080:	9a00      	ldr	r2, [sp, #0]
 8017082:	2a00      	cmp	r2, #0
 8017084:	db04      	blt.n	8017090 <_dtoa_r+0xa10>
 8017086:	d125      	bne.n	80170d4 <_dtoa_r+0xa54>
 8017088:	9a06      	ldr	r2, [sp, #24]
 801708a:	bb1a      	cbnz	r2, 80170d4 <_dtoa_r+0xa54>
 801708c:	9a07      	ldr	r2, [sp, #28]
 801708e:	bb0a      	cbnz	r2, 80170d4 <_dtoa_r+0xa54>
 8017090:	2b00      	cmp	r3, #0
 8017092:	ddec      	ble.n	801706e <_dtoa_r+0x9ee>
 8017094:	2201      	movs	r2, #1
 8017096:	9904      	ldr	r1, [sp, #16]
 8017098:	4620      	mov	r0, r4
 801709a:	f000 fe15 	bl	8017cc8 <__lshift>
 801709e:	4639      	mov	r1, r7
 80170a0:	9004      	str	r0, [sp, #16]
 80170a2:	f000 fe65 	bl	8017d70 <__mcmp>
 80170a6:	2800      	cmp	r0, #0
 80170a8:	dc03      	bgt.n	80170b2 <_dtoa_r+0xa32>
 80170aa:	d1e0      	bne.n	801706e <_dtoa_r+0x9ee>
 80170ac:	f018 0f01 	tst.w	r8, #1
 80170b0:	d0dd      	beq.n	801706e <_dtoa_r+0x9ee>
 80170b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80170b6:	d1d8      	bne.n	801706a <_dtoa_r+0x9ea>
 80170b8:	9b05      	ldr	r3, [sp, #20]
 80170ba:	9a05      	ldr	r2, [sp, #20]
 80170bc:	1c5d      	adds	r5, r3, #1
 80170be:	2339      	movs	r3, #57	; 0x39
 80170c0:	7013      	strb	r3, [r2, #0]
 80170c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80170c6:	2b39      	cmp	r3, #57	; 0x39
 80170c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80170cc:	d04f      	beq.n	801716e <_dtoa_r+0xaee>
 80170ce:	3301      	adds	r3, #1
 80170d0:	7013      	strb	r3, [r2, #0]
 80170d2:	e754      	b.n	8016f7e <_dtoa_r+0x8fe>
 80170d4:	9a05      	ldr	r2, [sp, #20]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	f102 0501 	add.w	r5, r2, #1
 80170dc:	dd06      	ble.n	80170ec <_dtoa_r+0xa6c>
 80170de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80170e2:	d0e9      	beq.n	80170b8 <_dtoa_r+0xa38>
 80170e4:	f108 0801 	add.w	r8, r8, #1
 80170e8:	9b05      	ldr	r3, [sp, #20]
 80170ea:	e7c2      	b.n	8017072 <_dtoa_r+0x9f2>
 80170ec:	9a02      	ldr	r2, [sp, #8]
 80170ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80170f2:	eba5 030b 	sub.w	r3, r5, fp
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d021      	beq.n	801713e <_dtoa_r+0xabe>
 80170fa:	2300      	movs	r3, #0
 80170fc:	220a      	movs	r2, #10
 80170fe:	9904      	ldr	r1, [sp, #16]
 8017100:	4620      	mov	r0, r4
 8017102:	f000 fc2d 	bl	8017960 <__multadd>
 8017106:	45b1      	cmp	r9, r6
 8017108:	9004      	str	r0, [sp, #16]
 801710a:	f04f 0300 	mov.w	r3, #0
 801710e:	f04f 020a 	mov.w	r2, #10
 8017112:	4649      	mov	r1, r9
 8017114:	4620      	mov	r0, r4
 8017116:	d105      	bne.n	8017124 <_dtoa_r+0xaa4>
 8017118:	f000 fc22 	bl	8017960 <__multadd>
 801711c:	4681      	mov	r9, r0
 801711e:	4606      	mov	r6, r0
 8017120:	9505      	str	r5, [sp, #20]
 8017122:	e776      	b.n	8017012 <_dtoa_r+0x992>
 8017124:	f000 fc1c 	bl	8017960 <__multadd>
 8017128:	4631      	mov	r1, r6
 801712a:	4681      	mov	r9, r0
 801712c:	2300      	movs	r3, #0
 801712e:	220a      	movs	r2, #10
 8017130:	4620      	mov	r0, r4
 8017132:	f000 fc15 	bl	8017960 <__multadd>
 8017136:	4606      	mov	r6, r0
 8017138:	e7f2      	b.n	8017120 <_dtoa_r+0xaa0>
 801713a:	f04f 0900 	mov.w	r9, #0
 801713e:	2201      	movs	r2, #1
 8017140:	9904      	ldr	r1, [sp, #16]
 8017142:	4620      	mov	r0, r4
 8017144:	f000 fdc0 	bl	8017cc8 <__lshift>
 8017148:	4639      	mov	r1, r7
 801714a:	9004      	str	r0, [sp, #16]
 801714c:	f000 fe10 	bl	8017d70 <__mcmp>
 8017150:	2800      	cmp	r0, #0
 8017152:	dcb6      	bgt.n	80170c2 <_dtoa_r+0xa42>
 8017154:	d102      	bne.n	801715c <_dtoa_r+0xadc>
 8017156:	f018 0f01 	tst.w	r8, #1
 801715a:	d1b2      	bne.n	80170c2 <_dtoa_r+0xa42>
 801715c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017160:	2b30      	cmp	r3, #48	; 0x30
 8017162:	f105 32ff 	add.w	r2, r5, #4294967295
 8017166:	f47f af0a 	bne.w	8016f7e <_dtoa_r+0x8fe>
 801716a:	4615      	mov	r5, r2
 801716c:	e7f6      	b.n	801715c <_dtoa_r+0xadc>
 801716e:	4593      	cmp	fp, r2
 8017170:	d105      	bne.n	801717e <_dtoa_r+0xafe>
 8017172:	2331      	movs	r3, #49	; 0x31
 8017174:	f10a 0a01 	add.w	sl, sl, #1
 8017178:	f88b 3000 	strb.w	r3, [fp]
 801717c:	e6ff      	b.n	8016f7e <_dtoa_r+0x8fe>
 801717e:	4615      	mov	r5, r2
 8017180:	e79f      	b.n	80170c2 <_dtoa_r+0xa42>
 8017182:	f8df b064 	ldr.w	fp, [pc, #100]	; 80171e8 <_dtoa_r+0xb68>
 8017186:	e007      	b.n	8017198 <_dtoa_r+0xb18>
 8017188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801718a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80171ec <_dtoa_r+0xb6c>
 801718e:	b11b      	cbz	r3, 8017198 <_dtoa_r+0xb18>
 8017190:	f10b 0308 	add.w	r3, fp, #8
 8017194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017196:	6013      	str	r3, [r2, #0]
 8017198:	4658      	mov	r0, fp
 801719a:	b017      	add	sp, #92	; 0x5c
 801719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a0:	9b06      	ldr	r3, [sp, #24]
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	f77f ae35 	ble.w	8016e12 <_dtoa_r+0x792>
 80171a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171aa:	9307      	str	r3, [sp, #28]
 80171ac:	e649      	b.n	8016e42 <_dtoa_r+0x7c2>
 80171ae:	9b02      	ldr	r3, [sp, #8]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	dc03      	bgt.n	80171bc <_dtoa_r+0xb3c>
 80171b4:	9b06      	ldr	r3, [sp, #24]
 80171b6:	2b02      	cmp	r3, #2
 80171b8:	f73f aecc 	bgt.w	8016f54 <_dtoa_r+0x8d4>
 80171bc:	465d      	mov	r5, fp
 80171be:	4639      	mov	r1, r7
 80171c0:	9804      	ldr	r0, [sp, #16]
 80171c2:	f7ff f9cf 	bl	8016564 <quorem>
 80171c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80171ca:	f805 8b01 	strb.w	r8, [r5], #1
 80171ce:	9a02      	ldr	r2, [sp, #8]
 80171d0:	eba5 030b 	sub.w	r3, r5, fp
 80171d4:	429a      	cmp	r2, r3
 80171d6:	ddb0      	ble.n	801713a <_dtoa_r+0xaba>
 80171d8:	2300      	movs	r3, #0
 80171da:	220a      	movs	r2, #10
 80171dc:	9904      	ldr	r1, [sp, #16]
 80171de:	4620      	mov	r0, r4
 80171e0:	f000 fbbe 	bl	8017960 <__multadd>
 80171e4:	9004      	str	r0, [sp, #16]
 80171e6:	e7ea      	b.n	80171be <_dtoa_r+0xb3e>
 80171e8:	080194a3 	.word	0x080194a3
 80171ec:	08019368 	.word	0x08019368

080171f0 <rshift>:
 80171f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171f2:	6906      	ldr	r6, [r0, #16]
 80171f4:	114b      	asrs	r3, r1, #5
 80171f6:	429e      	cmp	r6, r3
 80171f8:	f100 0414 	add.w	r4, r0, #20
 80171fc:	dd30      	ble.n	8017260 <rshift+0x70>
 80171fe:	f011 011f 	ands.w	r1, r1, #31
 8017202:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017206:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801720a:	d108      	bne.n	801721e <rshift+0x2e>
 801720c:	4621      	mov	r1, r4
 801720e:	42b2      	cmp	r2, r6
 8017210:	460b      	mov	r3, r1
 8017212:	d211      	bcs.n	8017238 <rshift+0x48>
 8017214:	f852 3b04 	ldr.w	r3, [r2], #4
 8017218:	f841 3b04 	str.w	r3, [r1], #4
 801721c:	e7f7      	b.n	801720e <rshift+0x1e>
 801721e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017222:	f1c1 0c20 	rsb	ip, r1, #32
 8017226:	40cd      	lsrs	r5, r1
 8017228:	3204      	adds	r2, #4
 801722a:	4623      	mov	r3, r4
 801722c:	42b2      	cmp	r2, r6
 801722e:	4617      	mov	r7, r2
 8017230:	d30c      	bcc.n	801724c <rshift+0x5c>
 8017232:	601d      	str	r5, [r3, #0]
 8017234:	b105      	cbz	r5, 8017238 <rshift+0x48>
 8017236:	3304      	adds	r3, #4
 8017238:	1b1a      	subs	r2, r3, r4
 801723a:	42a3      	cmp	r3, r4
 801723c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017240:	bf08      	it	eq
 8017242:	2300      	moveq	r3, #0
 8017244:	6102      	str	r2, [r0, #16]
 8017246:	bf08      	it	eq
 8017248:	6143      	streq	r3, [r0, #20]
 801724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801724c:	683f      	ldr	r7, [r7, #0]
 801724e:	fa07 f70c 	lsl.w	r7, r7, ip
 8017252:	433d      	orrs	r5, r7
 8017254:	f843 5b04 	str.w	r5, [r3], #4
 8017258:	f852 5b04 	ldr.w	r5, [r2], #4
 801725c:	40cd      	lsrs	r5, r1
 801725e:	e7e5      	b.n	801722c <rshift+0x3c>
 8017260:	4623      	mov	r3, r4
 8017262:	e7e9      	b.n	8017238 <rshift+0x48>

08017264 <__hexdig_fun>:
 8017264:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017268:	2b09      	cmp	r3, #9
 801726a:	d802      	bhi.n	8017272 <__hexdig_fun+0xe>
 801726c:	3820      	subs	r0, #32
 801726e:	b2c0      	uxtb	r0, r0
 8017270:	4770      	bx	lr
 8017272:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017276:	2b05      	cmp	r3, #5
 8017278:	d801      	bhi.n	801727e <__hexdig_fun+0x1a>
 801727a:	3847      	subs	r0, #71	; 0x47
 801727c:	e7f7      	b.n	801726e <__hexdig_fun+0xa>
 801727e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017282:	2b05      	cmp	r3, #5
 8017284:	d801      	bhi.n	801728a <__hexdig_fun+0x26>
 8017286:	3827      	subs	r0, #39	; 0x27
 8017288:	e7f1      	b.n	801726e <__hexdig_fun+0xa>
 801728a:	2000      	movs	r0, #0
 801728c:	4770      	bx	lr

0801728e <__gethex>:
 801728e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017292:	b08b      	sub	sp, #44	; 0x2c
 8017294:	468a      	mov	sl, r1
 8017296:	9002      	str	r0, [sp, #8]
 8017298:	9816      	ldr	r0, [sp, #88]	; 0x58
 801729a:	9306      	str	r3, [sp, #24]
 801729c:	4690      	mov	r8, r2
 801729e:	f000 fadf 	bl	8017860 <__localeconv_l>
 80172a2:	6803      	ldr	r3, [r0, #0]
 80172a4:	9303      	str	r3, [sp, #12]
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7e8 ffaa 	bl	8000200 <strlen>
 80172ac:	9b03      	ldr	r3, [sp, #12]
 80172ae:	9001      	str	r0, [sp, #4]
 80172b0:	4403      	add	r3, r0
 80172b2:	f04f 0b00 	mov.w	fp, #0
 80172b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80172ba:	9307      	str	r3, [sp, #28]
 80172bc:	f8da 3000 	ldr.w	r3, [sl]
 80172c0:	3302      	adds	r3, #2
 80172c2:	461f      	mov	r7, r3
 80172c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80172c8:	2830      	cmp	r0, #48	; 0x30
 80172ca:	d06c      	beq.n	80173a6 <__gethex+0x118>
 80172cc:	f7ff ffca 	bl	8017264 <__hexdig_fun>
 80172d0:	4604      	mov	r4, r0
 80172d2:	2800      	cmp	r0, #0
 80172d4:	d16a      	bne.n	80173ac <__gethex+0x11e>
 80172d6:	9a01      	ldr	r2, [sp, #4]
 80172d8:	9903      	ldr	r1, [sp, #12]
 80172da:	4638      	mov	r0, r7
 80172dc:	f001 fc40 	bl	8018b60 <strncmp>
 80172e0:	2800      	cmp	r0, #0
 80172e2:	d166      	bne.n	80173b2 <__gethex+0x124>
 80172e4:	9b01      	ldr	r3, [sp, #4]
 80172e6:	5cf8      	ldrb	r0, [r7, r3]
 80172e8:	18fe      	adds	r6, r7, r3
 80172ea:	f7ff ffbb 	bl	8017264 <__hexdig_fun>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d062      	beq.n	80173b8 <__gethex+0x12a>
 80172f2:	4633      	mov	r3, r6
 80172f4:	7818      	ldrb	r0, [r3, #0]
 80172f6:	2830      	cmp	r0, #48	; 0x30
 80172f8:	461f      	mov	r7, r3
 80172fa:	f103 0301 	add.w	r3, r3, #1
 80172fe:	d0f9      	beq.n	80172f4 <__gethex+0x66>
 8017300:	f7ff ffb0 	bl	8017264 <__hexdig_fun>
 8017304:	fab0 f580 	clz	r5, r0
 8017308:	096d      	lsrs	r5, r5, #5
 801730a:	4634      	mov	r4, r6
 801730c:	f04f 0b01 	mov.w	fp, #1
 8017310:	463a      	mov	r2, r7
 8017312:	4616      	mov	r6, r2
 8017314:	3201      	adds	r2, #1
 8017316:	7830      	ldrb	r0, [r6, #0]
 8017318:	f7ff ffa4 	bl	8017264 <__hexdig_fun>
 801731c:	2800      	cmp	r0, #0
 801731e:	d1f8      	bne.n	8017312 <__gethex+0x84>
 8017320:	9a01      	ldr	r2, [sp, #4]
 8017322:	9903      	ldr	r1, [sp, #12]
 8017324:	4630      	mov	r0, r6
 8017326:	f001 fc1b 	bl	8018b60 <strncmp>
 801732a:	b950      	cbnz	r0, 8017342 <__gethex+0xb4>
 801732c:	b954      	cbnz	r4, 8017344 <__gethex+0xb6>
 801732e:	9b01      	ldr	r3, [sp, #4]
 8017330:	18f4      	adds	r4, r6, r3
 8017332:	4622      	mov	r2, r4
 8017334:	4616      	mov	r6, r2
 8017336:	3201      	adds	r2, #1
 8017338:	7830      	ldrb	r0, [r6, #0]
 801733a:	f7ff ff93 	bl	8017264 <__hexdig_fun>
 801733e:	2800      	cmp	r0, #0
 8017340:	d1f8      	bne.n	8017334 <__gethex+0xa6>
 8017342:	b10c      	cbz	r4, 8017348 <__gethex+0xba>
 8017344:	1ba4      	subs	r4, r4, r6
 8017346:	00a4      	lsls	r4, r4, #2
 8017348:	7833      	ldrb	r3, [r6, #0]
 801734a:	2b50      	cmp	r3, #80	; 0x50
 801734c:	d001      	beq.n	8017352 <__gethex+0xc4>
 801734e:	2b70      	cmp	r3, #112	; 0x70
 8017350:	d140      	bne.n	80173d4 <__gethex+0x146>
 8017352:	7873      	ldrb	r3, [r6, #1]
 8017354:	2b2b      	cmp	r3, #43	; 0x2b
 8017356:	d031      	beq.n	80173bc <__gethex+0x12e>
 8017358:	2b2d      	cmp	r3, #45	; 0x2d
 801735a:	d033      	beq.n	80173c4 <__gethex+0x136>
 801735c:	1c71      	adds	r1, r6, #1
 801735e:	f04f 0900 	mov.w	r9, #0
 8017362:	7808      	ldrb	r0, [r1, #0]
 8017364:	f7ff ff7e 	bl	8017264 <__hexdig_fun>
 8017368:	1e43      	subs	r3, r0, #1
 801736a:	b2db      	uxtb	r3, r3
 801736c:	2b18      	cmp	r3, #24
 801736e:	d831      	bhi.n	80173d4 <__gethex+0x146>
 8017370:	f1a0 0210 	sub.w	r2, r0, #16
 8017374:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017378:	f7ff ff74 	bl	8017264 <__hexdig_fun>
 801737c:	1e43      	subs	r3, r0, #1
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b18      	cmp	r3, #24
 8017382:	d922      	bls.n	80173ca <__gethex+0x13c>
 8017384:	f1b9 0f00 	cmp.w	r9, #0
 8017388:	d000      	beq.n	801738c <__gethex+0xfe>
 801738a:	4252      	negs	r2, r2
 801738c:	4414      	add	r4, r2
 801738e:	f8ca 1000 	str.w	r1, [sl]
 8017392:	b30d      	cbz	r5, 80173d8 <__gethex+0x14a>
 8017394:	f1bb 0f00 	cmp.w	fp, #0
 8017398:	bf0c      	ite	eq
 801739a:	2706      	moveq	r7, #6
 801739c:	2700      	movne	r7, #0
 801739e:	4638      	mov	r0, r7
 80173a0:	b00b      	add	sp, #44	; 0x2c
 80173a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a6:	f10b 0b01 	add.w	fp, fp, #1
 80173aa:	e78a      	b.n	80172c2 <__gethex+0x34>
 80173ac:	2500      	movs	r5, #0
 80173ae:	462c      	mov	r4, r5
 80173b0:	e7ae      	b.n	8017310 <__gethex+0x82>
 80173b2:	463e      	mov	r6, r7
 80173b4:	2501      	movs	r5, #1
 80173b6:	e7c7      	b.n	8017348 <__gethex+0xba>
 80173b8:	4604      	mov	r4, r0
 80173ba:	e7fb      	b.n	80173b4 <__gethex+0x126>
 80173bc:	f04f 0900 	mov.w	r9, #0
 80173c0:	1cb1      	adds	r1, r6, #2
 80173c2:	e7ce      	b.n	8017362 <__gethex+0xd4>
 80173c4:	f04f 0901 	mov.w	r9, #1
 80173c8:	e7fa      	b.n	80173c0 <__gethex+0x132>
 80173ca:	230a      	movs	r3, #10
 80173cc:	fb03 0202 	mla	r2, r3, r2, r0
 80173d0:	3a10      	subs	r2, #16
 80173d2:	e7cf      	b.n	8017374 <__gethex+0xe6>
 80173d4:	4631      	mov	r1, r6
 80173d6:	e7da      	b.n	801738e <__gethex+0x100>
 80173d8:	1bf3      	subs	r3, r6, r7
 80173da:	3b01      	subs	r3, #1
 80173dc:	4629      	mov	r1, r5
 80173de:	2b07      	cmp	r3, #7
 80173e0:	dc49      	bgt.n	8017476 <__gethex+0x1e8>
 80173e2:	9802      	ldr	r0, [sp, #8]
 80173e4:	f000 fa71 	bl	80178ca <_Balloc>
 80173e8:	9b01      	ldr	r3, [sp, #4]
 80173ea:	f100 0914 	add.w	r9, r0, #20
 80173ee:	f04f 0b00 	mov.w	fp, #0
 80173f2:	f1c3 0301 	rsb	r3, r3, #1
 80173f6:	4605      	mov	r5, r0
 80173f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80173fc:	46da      	mov	sl, fp
 80173fe:	9308      	str	r3, [sp, #32]
 8017400:	42b7      	cmp	r7, r6
 8017402:	d33b      	bcc.n	801747c <__gethex+0x1ee>
 8017404:	9804      	ldr	r0, [sp, #16]
 8017406:	f840 ab04 	str.w	sl, [r0], #4
 801740a:	eba0 0009 	sub.w	r0, r0, r9
 801740e:	1080      	asrs	r0, r0, #2
 8017410:	6128      	str	r0, [r5, #16]
 8017412:	0147      	lsls	r7, r0, #5
 8017414:	4650      	mov	r0, sl
 8017416:	f000 fb1c 	bl	8017a52 <__hi0bits>
 801741a:	f8d8 6000 	ldr.w	r6, [r8]
 801741e:	1a3f      	subs	r7, r7, r0
 8017420:	42b7      	cmp	r7, r6
 8017422:	dd64      	ble.n	80174ee <__gethex+0x260>
 8017424:	1bbf      	subs	r7, r7, r6
 8017426:	4639      	mov	r1, r7
 8017428:	4628      	mov	r0, r5
 801742a:	f000 fe2b 	bl	8018084 <__any_on>
 801742e:	4682      	mov	sl, r0
 8017430:	b178      	cbz	r0, 8017452 <__gethex+0x1c4>
 8017432:	1e7b      	subs	r3, r7, #1
 8017434:	1159      	asrs	r1, r3, #5
 8017436:	f003 021f 	and.w	r2, r3, #31
 801743a:	f04f 0a01 	mov.w	sl, #1
 801743e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017442:	fa0a f202 	lsl.w	r2, sl, r2
 8017446:	420a      	tst	r2, r1
 8017448:	d003      	beq.n	8017452 <__gethex+0x1c4>
 801744a:	4553      	cmp	r3, sl
 801744c:	dc46      	bgt.n	80174dc <__gethex+0x24e>
 801744e:	f04f 0a02 	mov.w	sl, #2
 8017452:	4639      	mov	r1, r7
 8017454:	4628      	mov	r0, r5
 8017456:	f7ff fecb 	bl	80171f0 <rshift>
 801745a:	443c      	add	r4, r7
 801745c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017460:	42a3      	cmp	r3, r4
 8017462:	da52      	bge.n	801750a <__gethex+0x27c>
 8017464:	4629      	mov	r1, r5
 8017466:	9802      	ldr	r0, [sp, #8]
 8017468:	f000 fa63 	bl	8017932 <_Bfree>
 801746c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801746e:	2300      	movs	r3, #0
 8017470:	6013      	str	r3, [r2, #0]
 8017472:	27a3      	movs	r7, #163	; 0xa3
 8017474:	e793      	b.n	801739e <__gethex+0x110>
 8017476:	3101      	adds	r1, #1
 8017478:	105b      	asrs	r3, r3, #1
 801747a:	e7b0      	b.n	80173de <__gethex+0x150>
 801747c:	1e73      	subs	r3, r6, #1
 801747e:	9305      	str	r3, [sp, #20]
 8017480:	9a07      	ldr	r2, [sp, #28]
 8017482:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017486:	4293      	cmp	r3, r2
 8017488:	d018      	beq.n	80174bc <__gethex+0x22e>
 801748a:	f1bb 0f20 	cmp.w	fp, #32
 801748e:	d107      	bne.n	80174a0 <__gethex+0x212>
 8017490:	9b04      	ldr	r3, [sp, #16]
 8017492:	f8c3 a000 	str.w	sl, [r3]
 8017496:	3304      	adds	r3, #4
 8017498:	f04f 0a00 	mov.w	sl, #0
 801749c:	9304      	str	r3, [sp, #16]
 801749e:	46d3      	mov	fp, sl
 80174a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80174a4:	f7ff fede 	bl	8017264 <__hexdig_fun>
 80174a8:	f000 000f 	and.w	r0, r0, #15
 80174ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80174b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80174b4:	f10b 0b04 	add.w	fp, fp, #4
 80174b8:	9b05      	ldr	r3, [sp, #20]
 80174ba:	e00d      	b.n	80174d8 <__gethex+0x24a>
 80174bc:	9b05      	ldr	r3, [sp, #20]
 80174be:	9a08      	ldr	r2, [sp, #32]
 80174c0:	4413      	add	r3, r2
 80174c2:	42bb      	cmp	r3, r7
 80174c4:	d3e1      	bcc.n	801748a <__gethex+0x1fc>
 80174c6:	4618      	mov	r0, r3
 80174c8:	9a01      	ldr	r2, [sp, #4]
 80174ca:	9903      	ldr	r1, [sp, #12]
 80174cc:	9309      	str	r3, [sp, #36]	; 0x24
 80174ce:	f001 fb47 	bl	8018b60 <strncmp>
 80174d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d4:	2800      	cmp	r0, #0
 80174d6:	d1d8      	bne.n	801748a <__gethex+0x1fc>
 80174d8:	461e      	mov	r6, r3
 80174da:	e791      	b.n	8017400 <__gethex+0x172>
 80174dc:	1eb9      	subs	r1, r7, #2
 80174de:	4628      	mov	r0, r5
 80174e0:	f000 fdd0 	bl	8018084 <__any_on>
 80174e4:	2800      	cmp	r0, #0
 80174e6:	d0b2      	beq.n	801744e <__gethex+0x1c0>
 80174e8:	f04f 0a03 	mov.w	sl, #3
 80174ec:	e7b1      	b.n	8017452 <__gethex+0x1c4>
 80174ee:	da09      	bge.n	8017504 <__gethex+0x276>
 80174f0:	1bf7      	subs	r7, r6, r7
 80174f2:	4629      	mov	r1, r5
 80174f4:	463a      	mov	r2, r7
 80174f6:	9802      	ldr	r0, [sp, #8]
 80174f8:	f000 fbe6 	bl	8017cc8 <__lshift>
 80174fc:	1be4      	subs	r4, r4, r7
 80174fe:	4605      	mov	r5, r0
 8017500:	f100 0914 	add.w	r9, r0, #20
 8017504:	f04f 0a00 	mov.w	sl, #0
 8017508:	e7a8      	b.n	801745c <__gethex+0x1ce>
 801750a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801750e:	42a0      	cmp	r0, r4
 8017510:	dd6a      	ble.n	80175e8 <__gethex+0x35a>
 8017512:	1b04      	subs	r4, r0, r4
 8017514:	42a6      	cmp	r6, r4
 8017516:	dc2e      	bgt.n	8017576 <__gethex+0x2e8>
 8017518:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801751c:	2b02      	cmp	r3, #2
 801751e:	d022      	beq.n	8017566 <__gethex+0x2d8>
 8017520:	2b03      	cmp	r3, #3
 8017522:	d024      	beq.n	801756e <__gethex+0x2e0>
 8017524:	2b01      	cmp	r3, #1
 8017526:	d115      	bne.n	8017554 <__gethex+0x2c6>
 8017528:	42a6      	cmp	r6, r4
 801752a:	d113      	bne.n	8017554 <__gethex+0x2c6>
 801752c:	2e01      	cmp	r6, #1
 801752e:	dc0b      	bgt.n	8017548 <__gethex+0x2ba>
 8017530:	9a06      	ldr	r2, [sp, #24]
 8017532:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017536:	6013      	str	r3, [r2, #0]
 8017538:	2301      	movs	r3, #1
 801753a:	612b      	str	r3, [r5, #16]
 801753c:	f8c9 3000 	str.w	r3, [r9]
 8017540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017542:	2762      	movs	r7, #98	; 0x62
 8017544:	601d      	str	r5, [r3, #0]
 8017546:	e72a      	b.n	801739e <__gethex+0x110>
 8017548:	1e71      	subs	r1, r6, #1
 801754a:	4628      	mov	r0, r5
 801754c:	f000 fd9a 	bl	8018084 <__any_on>
 8017550:	2800      	cmp	r0, #0
 8017552:	d1ed      	bne.n	8017530 <__gethex+0x2a2>
 8017554:	4629      	mov	r1, r5
 8017556:	9802      	ldr	r0, [sp, #8]
 8017558:	f000 f9eb 	bl	8017932 <_Bfree>
 801755c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801755e:	2300      	movs	r3, #0
 8017560:	6013      	str	r3, [r2, #0]
 8017562:	2750      	movs	r7, #80	; 0x50
 8017564:	e71b      	b.n	801739e <__gethex+0x110>
 8017566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017568:	2b00      	cmp	r3, #0
 801756a:	d0e1      	beq.n	8017530 <__gethex+0x2a2>
 801756c:	e7f2      	b.n	8017554 <__gethex+0x2c6>
 801756e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017570:	2b00      	cmp	r3, #0
 8017572:	d1dd      	bne.n	8017530 <__gethex+0x2a2>
 8017574:	e7ee      	b.n	8017554 <__gethex+0x2c6>
 8017576:	1e67      	subs	r7, r4, #1
 8017578:	f1ba 0f00 	cmp.w	sl, #0
 801757c:	d131      	bne.n	80175e2 <__gethex+0x354>
 801757e:	b127      	cbz	r7, 801758a <__gethex+0x2fc>
 8017580:	4639      	mov	r1, r7
 8017582:	4628      	mov	r0, r5
 8017584:	f000 fd7e 	bl	8018084 <__any_on>
 8017588:	4682      	mov	sl, r0
 801758a:	117a      	asrs	r2, r7, #5
 801758c:	2301      	movs	r3, #1
 801758e:	f007 071f 	and.w	r7, r7, #31
 8017592:	fa03 f707 	lsl.w	r7, r3, r7
 8017596:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801759a:	4621      	mov	r1, r4
 801759c:	421f      	tst	r7, r3
 801759e:	4628      	mov	r0, r5
 80175a0:	bf18      	it	ne
 80175a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80175a6:	1b36      	subs	r6, r6, r4
 80175a8:	f7ff fe22 	bl	80171f0 <rshift>
 80175ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80175b0:	2702      	movs	r7, #2
 80175b2:	f1ba 0f00 	cmp.w	sl, #0
 80175b6:	d048      	beq.n	801764a <__gethex+0x3bc>
 80175b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80175bc:	2b02      	cmp	r3, #2
 80175be:	d015      	beq.n	80175ec <__gethex+0x35e>
 80175c0:	2b03      	cmp	r3, #3
 80175c2:	d017      	beq.n	80175f4 <__gethex+0x366>
 80175c4:	2b01      	cmp	r3, #1
 80175c6:	d109      	bne.n	80175dc <__gethex+0x34e>
 80175c8:	f01a 0f02 	tst.w	sl, #2
 80175cc:	d006      	beq.n	80175dc <__gethex+0x34e>
 80175ce:	f8d9 3000 	ldr.w	r3, [r9]
 80175d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80175d6:	f01a 0f01 	tst.w	sl, #1
 80175da:	d10e      	bne.n	80175fa <__gethex+0x36c>
 80175dc:	f047 0710 	orr.w	r7, r7, #16
 80175e0:	e033      	b.n	801764a <__gethex+0x3bc>
 80175e2:	f04f 0a01 	mov.w	sl, #1
 80175e6:	e7d0      	b.n	801758a <__gethex+0x2fc>
 80175e8:	2701      	movs	r7, #1
 80175ea:	e7e2      	b.n	80175b2 <__gethex+0x324>
 80175ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175ee:	f1c3 0301 	rsb	r3, r3, #1
 80175f2:	9315      	str	r3, [sp, #84]	; 0x54
 80175f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d0f0      	beq.n	80175dc <__gethex+0x34e>
 80175fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80175fe:	f105 0314 	add.w	r3, r5, #20
 8017602:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017606:	eb03 010a 	add.w	r1, r3, sl
 801760a:	f04f 0c00 	mov.w	ip, #0
 801760e:	4618      	mov	r0, r3
 8017610:	f853 2b04 	ldr.w	r2, [r3], #4
 8017614:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017618:	d01c      	beq.n	8017654 <__gethex+0x3c6>
 801761a:	3201      	adds	r2, #1
 801761c:	6002      	str	r2, [r0, #0]
 801761e:	2f02      	cmp	r7, #2
 8017620:	f105 0314 	add.w	r3, r5, #20
 8017624:	d138      	bne.n	8017698 <__gethex+0x40a>
 8017626:	f8d8 2000 	ldr.w	r2, [r8]
 801762a:	3a01      	subs	r2, #1
 801762c:	42b2      	cmp	r2, r6
 801762e:	d10a      	bne.n	8017646 <__gethex+0x3b8>
 8017630:	1171      	asrs	r1, r6, #5
 8017632:	2201      	movs	r2, #1
 8017634:	f006 061f 	and.w	r6, r6, #31
 8017638:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801763c:	fa02 f606 	lsl.w	r6, r2, r6
 8017640:	421e      	tst	r6, r3
 8017642:	bf18      	it	ne
 8017644:	4617      	movne	r7, r2
 8017646:	f047 0720 	orr.w	r7, r7, #32
 801764a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801764c:	601d      	str	r5, [r3, #0]
 801764e:	9b06      	ldr	r3, [sp, #24]
 8017650:	601c      	str	r4, [r3, #0]
 8017652:	e6a4      	b.n	801739e <__gethex+0x110>
 8017654:	4299      	cmp	r1, r3
 8017656:	f843 cc04 	str.w	ip, [r3, #-4]
 801765a:	d8d8      	bhi.n	801760e <__gethex+0x380>
 801765c:	68ab      	ldr	r3, [r5, #8]
 801765e:	4599      	cmp	r9, r3
 8017660:	db12      	blt.n	8017688 <__gethex+0x3fa>
 8017662:	6869      	ldr	r1, [r5, #4]
 8017664:	9802      	ldr	r0, [sp, #8]
 8017666:	3101      	adds	r1, #1
 8017668:	f000 f92f 	bl	80178ca <_Balloc>
 801766c:	692a      	ldr	r2, [r5, #16]
 801766e:	3202      	adds	r2, #2
 8017670:	f105 010c 	add.w	r1, r5, #12
 8017674:	4683      	mov	fp, r0
 8017676:	0092      	lsls	r2, r2, #2
 8017678:	300c      	adds	r0, #12
 801767a:	f000 f91b 	bl	80178b4 <memcpy>
 801767e:	4629      	mov	r1, r5
 8017680:	9802      	ldr	r0, [sp, #8]
 8017682:	f000 f956 	bl	8017932 <_Bfree>
 8017686:	465d      	mov	r5, fp
 8017688:	692b      	ldr	r3, [r5, #16]
 801768a:	1c5a      	adds	r2, r3, #1
 801768c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017690:	612a      	str	r2, [r5, #16]
 8017692:	2201      	movs	r2, #1
 8017694:	615a      	str	r2, [r3, #20]
 8017696:	e7c2      	b.n	801761e <__gethex+0x390>
 8017698:	692a      	ldr	r2, [r5, #16]
 801769a:	454a      	cmp	r2, r9
 801769c:	dd0b      	ble.n	80176b6 <__gethex+0x428>
 801769e:	2101      	movs	r1, #1
 80176a0:	4628      	mov	r0, r5
 80176a2:	f7ff fda5 	bl	80171f0 <rshift>
 80176a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80176aa:	3401      	adds	r4, #1
 80176ac:	42a3      	cmp	r3, r4
 80176ae:	f6ff aed9 	blt.w	8017464 <__gethex+0x1d6>
 80176b2:	2701      	movs	r7, #1
 80176b4:	e7c7      	b.n	8017646 <__gethex+0x3b8>
 80176b6:	f016 061f 	ands.w	r6, r6, #31
 80176ba:	d0fa      	beq.n	80176b2 <__gethex+0x424>
 80176bc:	449a      	add	sl, r3
 80176be:	f1c6 0620 	rsb	r6, r6, #32
 80176c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80176c6:	f000 f9c4 	bl	8017a52 <__hi0bits>
 80176ca:	42b0      	cmp	r0, r6
 80176cc:	dbe7      	blt.n	801769e <__gethex+0x410>
 80176ce:	e7f0      	b.n	80176b2 <__gethex+0x424>

080176d0 <L_shift>:
 80176d0:	f1c2 0208 	rsb	r2, r2, #8
 80176d4:	0092      	lsls	r2, r2, #2
 80176d6:	b570      	push	{r4, r5, r6, lr}
 80176d8:	f1c2 0620 	rsb	r6, r2, #32
 80176dc:	6843      	ldr	r3, [r0, #4]
 80176de:	6804      	ldr	r4, [r0, #0]
 80176e0:	fa03 f506 	lsl.w	r5, r3, r6
 80176e4:	432c      	orrs	r4, r5
 80176e6:	40d3      	lsrs	r3, r2
 80176e8:	6004      	str	r4, [r0, #0]
 80176ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80176ee:	4288      	cmp	r0, r1
 80176f0:	d3f4      	bcc.n	80176dc <L_shift+0xc>
 80176f2:	bd70      	pop	{r4, r5, r6, pc}

080176f4 <__match>:
 80176f4:	b530      	push	{r4, r5, lr}
 80176f6:	6803      	ldr	r3, [r0, #0]
 80176f8:	3301      	adds	r3, #1
 80176fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176fe:	b914      	cbnz	r4, 8017706 <__match+0x12>
 8017700:	6003      	str	r3, [r0, #0]
 8017702:	2001      	movs	r0, #1
 8017704:	bd30      	pop	{r4, r5, pc}
 8017706:	f813 2b01 	ldrb.w	r2, [r3], #1
 801770a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801770e:	2d19      	cmp	r5, #25
 8017710:	bf98      	it	ls
 8017712:	3220      	addls	r2, #32
 8017714:	42a2      	cmp	r2, r4
 8017716:	d0f0      	beq.n	80176fa <__match+0x6>
 8017718:	2000      	movs	r0, #0
 801771a:	e7f3      	b.n	8017704 <__match+0x10>

0801771c <__hexnan>:
 801771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017720:	680b      	ldr	r3, [r1, #0]
 8017722:	6801      	ldr	r1, [r0, #0]
 8017724:	115f      	asrs	r7, r3, #5
 8017726:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801772a:	f013 031f 	ands.w	r3, r3, #31
 801772e:	b087      	sub	sp, #28
 8017730:	bf18      	it	ne
 8017732:	3704      	addne	r7, #4
 8017734:	2500      	movs	r5, #0
 8017736:	1f3e      	subs	r6, r7, #4
 8017738:	4682      	mov	sl, r0
 801773a:	4690      	mov	r8, r2
 801773c:	9301      	str	r3, [sp, #4]
 801773e:	f847 5c04 	str.w	r5, [r7, #-4]
 8017742:	46b1      	mov	r9, r6
 8017744:	4634      	mov	r4, r6
 8017746:	9502      	str	r5, [sp, #8]
 8017748:	46ab      	mov	fp, r5
 801774a:	784a      	ldrb	r2, [r1, #1]
 801774c:	1c4b      	adds	r3, r1, #1
 801774e:	9303      	str	r3, [sp, #12]
 8017750:	b342      	cbz	r2, 80177a4 <__hexnan+0x88>
 8017752:	4610      	mov	r0, r2
 8017754:	9105      	str	r1, [sp, #20]
 8017756:	9204      	str	r2, [sp, #16]
 8017758:	f7ff fd84 	bl	8017264 <__hexdig_fun>
 801775c:	2800      	cmp	r0, #0
 801775e:	d143      	bne.n	80177e8 <__hexnan+0xcc>
 8017760:	9a04      	ldr	r2, [sp, #16]
 8017762:	9905      	ldr	r1, [sp, #20]
 8017764:	2a20      	cmp	r2, #32
 8017766:	d818      	bhi.n	801779a <__hexnan+0x7e>
 8017768:	9b02      	ldr	r3, [sp, #8]
 801776a:	459b      	cmp	fp, r3
 801776c:	dd13      	ble.n	8017796 <__hexnan+0x7a>
 801776e:	454c      	cmp	r4, r9
 8017770:	d206      	bcs.n	8017780 <__hexnan+0x64>
 8017772:	2d07      	cmp	r5, #7
 8017774:	dc04      	bgt.n	8017780 <__hexnan+0x64>
 8017776:	462a      	mov	r2, r5
 8017778:	4649      	mov	r1, r9
 801777a:	4620      	mov	r0, r4
 801777c:	f7ff ffa8 	bl	80176d0 <L_shift>
 8017780:	4544      	cmp	r4, r8
 8017782:	d944      	bls.n	801780e <__hexnan+0xf2>
 8017784:	2300      	movs	r3, #0
 8017786:	f1a4 0904 	sub.w	r9, r4, #4
 801778a:	f844 3c04 	str.w	r3, [r4, #-4]
 801778e:	f8cd b008 	str.w	fp, [sp, #8]
 8017792:	464c      	mov	r4, r9
 8017794:	461d      	mov	r5, r3
 8017796:	9903      	ldr	r1, [sp, #12]
 8017798:	e7d7      	b.n	801774a <__hexnan+0x2e>
 801779a:	2a29      	cmp	r2, #41	; 0x29
 801779c:	d14a      	bne.n	8017834 <__hexnan+0x118>
 801779e:	3102      	adds	r1, #2
 80177a0:	f8ca 1000 	str.w	r1, [sl]
 80177a4:	f1bb 0f00 	cmp.w	fp, #0
 80177a8:	d044      	beq.n	8017834 <__hexnan+0x118>
 80177aa:	454c      	cmp	r4, r9
 80177ac:	d206      	bcs.n	80177bc <__hexnan+0xa0>
 80177ae:	2d07      	cmp	r5, #7
 80177b0:	dc04      	bgt.n	80177bc <__hexnan+0xa0>
 80177b2:	462a      	mov	r2, r5
 80177b4:	4649      	mov	r1, r9
 80177b6:	4620      	mov	r0, r4
 80177b8:	f7ff ff8a 	bl	80176d0 <L_shift>
 80177bc:	4544      	cmp	r4, r8
 80177be:	d928      	bls.n	8017812 <__hexnan+0xf6>
 80177c0:	4643      	mov	r3, r8
 80177c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80177c6:	f843 2b04 	str.w	r2, [r3], #4
 80177ca:	42a6      	cmp	r6, r4
 80177cc:	d2f9      	bcs.n	80177c2 <__hexnan+0xa6>
 80177ce:	2200      	movs	r2, #0
 80177d0:	f843 2b04 	str.w	r2, [r3], #4
 80177d4:	429e      	cmp	r6, r3
 80177d6:	d2fb      	bcs.n	80177d0 <__hexnan+0xb4>
 80177d8:	6833      	ldr	r3, [r6, #0]
 80177da:	b91b      	cbnz	r3, 80177e4 <__hexnan+0xc8>
 80177dc:	4546      	cmp	r6, r8
 80177de:	d127      	bne.n	8017830 <__hexnan+0x114>
 80177e0:	2301      	movs	r3, #1
 80177e2:	6033      	str	r3, [r6, #0]
 80177e4:	2005      	movs	r0, #5
 80177e6:	e026      	b.n	8017836 <__hexnan+0x11a>
 80177e8:	3501      	adds	r5, #1
 80177ea:	2d08      	cmp	r5, #8
 80177ec:	f10b 0b01 	add.w	fp, fp, #1
 80177f0:	dd06      	ble.n	8017800 <__hexnan+0xe4>
 80177f2:	4544      	cmp	r4, r8
 80177f4:	d9cf      	bls.n	8017796 <__hexnan+0x7a>
 80177f6:	2300      	movs	r3, #0
 80177f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80177fc:	2501      	movs	r5, #1
 80177fe:	3c04      	subs	r4, #4
 8017800:	6822      	ldr	r2, [r4, #0]
 8017802:	f000 000f 	and.w	r0, r0, #15
 8017806:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801780a:	6020      	str	r0, [r4, #0]
 801780c:	e7c3      	b.n	8017796 <__hexnan+0x7a>
 801780e:	2508      	movs	r5, #8
 8017810:	e7c1      	b.n	8017796 <__hexnan+0x7a>
 8017812:	9b01      	ldr	r3, [sp, #4]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d0df      	beq.n	80177d8 <__hexnan+0xbc>
 8017818:	f04f 32ff 	mov.w	r2, #4294967295
 801781c:	f1c3 0320 	rsb	r3, r3, #32
 8017820:	fa22 f303 	lsr.w	r3, r2, r3
 8017824:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017828:	401a      	ands	r2, r3
 801782a:	f847 2c04 	str.w	r2, [r7, #-4]
 801782e:	e7d3      	b.n	80177d8 <__hexnan+0xbc>
 8017830:	3e04      	subs	r6, #4
 8017832:	e7d1      	b.n	80177d8 <__hexnan+0xbc>
 8017834:	2004      	movs	r0, #4
 8017836:	b007      	add	sp, #28
 8017838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801783c <__locale_ctype_ptr_l>:
 801783c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017840:	4770      	bx	lr
	...

08017844 <__locale_ctype_ptr>:
 8017844:	4b04      	ldr	r3, [pc, #16]	; (8017858 <__locale_ctype_ptr+0x14>)
 8017846:	4a05      	ldr	r2, [pc, #20]	; (801785c <__locale_ctype_ptr+0x18>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	6a1b      	ldr	r3, [r3, #32]
 801784c:	2b00      	cmp	r3, #0
 801784e:	bf08      	it	eq
 8017850:	4613      	moveq	r3, r2
 8017852:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017856:	4770      	bx	lr
 8017858:	2000000c 	.word	0x2000000c
 801785c:	20000070 	.word	0x20000070

08017860 <__localeconv_l>:
 8017860:	30f0      	adds	r0, #240	; 0xf0
 8017862:	4770      	bx	lr

08017864 <_localeconv_r>:
 8017864:	4b04      	ldr	r3, [pc, #16]	; (8017878 <_localeconv_r+0x14>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	6a18      	ldr	r0, [r3, #32]
 801786a:	4b04      	ldr	r3, [pc, #16]	; (801787c <_localeconv_r+0x18>)
 801786c:	2800      	cmp	r0, #0
 801786e:	bf08      	it	eq
 8017870:	4618      	moveq	r0, r3
 8017872:	30f0      	adds	r0, #240	; 0xf0
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop
 8017878:	2000000c 	.word	0x2000000c
 801787c:	20000070 	.word	0x20000070

08017880 <malloc>:
 8017880:	4b02      	ldr	r3, [pc, #8]	; (801788c <malloc+0xc>)
 8017882:	4601      	mov	r1, r0
 8017884:	6818      	ldr	r0, [r3, #0]
 8017886:	f000 bc7b 	b.w	8018180 <_malloc_r>
 801788a:	bf00      	nop
 801788c:	2000000c 	.word	0x2000000c

08017890 <__ascii_mbtowc>:
 8017890:	b082      	sub	sp, #8
 8017892:	b901      	cbnz	r1, 8017896 <__ascii_mbtowc+0x6>
 8017894:	a901      	add	r1, sp, #4
 8017896:	b142      	cbz	r2, 80178aa <__ascii_mbtowc+0x1a>
 8017898:	b14b      	cbz	r3, 80178ae <__ascii_mbtowc+0x1e>
 801789a:	7813      	ldrb	r3, [r2, #0]
 801789c:	600b      	str	r3, [r1, #0]
 801789e:	7812      	ldrb	r2, [r2, #0]
 80178a0:	1c10      	adds	r0, r2, #0
 80178a2:	bf18      	it	ne
 80178a4:	2001      	movne	r0, #1
 80178a6:	b002      	add	sp, #8
 80178a8:	4770      	bx	lr
 80178aa:	4610      	mov	r0, r2
 80178ac:	e7fb      	b.n	80178a6 <__ascii_mbtowc+0x16>
 80178ae:	f06f 0001 	mvn.w	r0, #1
 80178b2:	e7f8      	b.n	80178a6 <__ascii_mbtowc+0x16>

080178b4 <memcpy>:
 80178b4:	b510      	push	{r4, lr}
 80178b6:	1e43      	subs	r3, r0, #1
 80178b8:	440a      	add	r2, r1
 80178ba:	4291      	cmp	r1, r2
 80178bc:	d100      	bne.n	80178c0 <memcpy+0xc>
 80178be:	bd10      	pop	{r4, pc}
 80178c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178c8:	e7f7      	b.n	80178ba <memcpy+0x6>

080178ca <_Balloc>:
 80178ca:	b570      	push	{r4, r5, r6, lr}
 80178cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80178ce:	4604      	mov	r4, r0
 80178d0:	460e      	mov	r6, r1
 80178d2:	b93d      	cbnz	r5, 80178e4 <_Balloc+0x1a>
 80178d4:	2010      	movs	r0, #16
 80178d6:	f7ff ffd3 	bl	8017880 <malloc>
 80178da:	6260      	str	r0, [r4, #36]	; 0x24
 80178dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80178e0:	6005      	str	r5, [r0, #0]
 80178e2:	60c5      	str	r5, [r0, #12]
 80178e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80178e6:	68eb      	ldr	r3, [r5, #12]
 80178e8:	b183      	cbz	r3, 801790c <_Balloc+0x42>
 80178ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178ec:	68db      	ldr	r3, [r3, #12]
 80178ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80178f2:	b9b8      	cbnz	r0, 8017924 <_Balloc+0x5a>
 80178f4:	2101      	movs	r1, #1
 80178f6:	fa01 f506 	lsl.w	r5, r1, r6
 80178fa:	1d6a      	adds	r2, r5, #5
 80178fc:	0092      	lsls	r2, r2, #2
 80178fe:	4620      	mov	r0, r4
 8017900:	f000 fbe1 	bl	80180c6 <_calloc_r>
 8017904:	b160      	cbz	r0, 8017920 <_Balloc+0x56>
 8017906:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801790a:	e00e      	b.n	801792a <_Balloc+0x60>
 801790c:	2221      	movs	r2, #33	; 0x21
 801790e:	2104      	movs	r1, #4
 8017910:	4620      	mov	r0, r4
 8017912:	f000 fbd8 	bl	80180c6 <_calloc_r>
 8017916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017918:	60e8      	str	r0, [r5, #12]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d1e4      	bne.n	80178ea <_Balloc+0x20>
 8017920:	2000      	movs	r0, #0
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	6802      	ldr	r2, [r0, #0]
 8017926:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801792a:	2300      	movs	r3, #0
 801792c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017930:	e7f7      	b.n	8017922 <_Balloc+0x58>

08017932 <_Bfree>:
 8017932:	b570      	push	{r4, r5, r6, lr}
 8017934:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017936:	4606      	mov	r6, r0
 8017938:	460d      	mov	r5, r1
 801793a:	b93c      	cbnz	r4, 801794c <_Bfree+0x1a>
 801793c:	2010      	movs	r0, #16
 801793e:	f7ff ff9f 	bl	8017880 <malloc>
 8017942:	6270      	str	r0, [r6, #36]	; 0x24
 8017944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017948:	6004      	str	r4, [r0, #0]
 801794a:	60c4      	str	r4, [r0, #12]
 801794c:	b13d      	cbz	r5, 801795e <_Bfree+0x2c>
 801794e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017950:	686a      	ldr	r2, [r5, #4]
 8017952:	68db      	ldr	r3, [r3, #12]
 8017954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017958:	6029      	str	r1, [r5, #0]
 801795a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801795e:	bd70      	pop	{r4, r5, r6, pc}

08017960 <__multadd>:
 8017960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017964:	690d      	ldr	r5, [r1, #16]
 8017966:	461f      	mov	r7, r3
 8017968:	4606      	mov	r6, r0
 801796a:	460c      	mov	r4, r1
 801796c:	f101 0c14 	add.w	ip, r1, #20
 8017970:	2300      	movs	r3, #0
 8017972:	f8dc 0000 	ldr.w	r0, [ip]
 8017976:	b281      	uxth	r1, r0
 8017978:	fb02 7101 	mla	r1, r2, r1, r7
 801797c:	0c0f      	lsrs	r7, r1, #16
 801797e:	0c00      	lsrs	r0, r0, #16
 8017980:	fb02 7000 	mla	r0, r2, r0, r7
 8017984:	b289      	uxth	r1, r1
 8017986:	3301      	adds	r3, #1
 8017988:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801798c:	429d      	cmp	r5, r3
 801798e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017992:	f84c 1b04 	str.w	r1, [ip], #4
 8017996:	dcec      	bgt.n	8017972 <__multadd+0x12>
 8017998:	b1d7      	cbz	r7, 80179d0 <__multadd+0x70>
 801799a:	68a3      	ldr	r3, [r4, #8]
 801799c:	42ab      	cmp	r3, r5
 801799e:	dc12      	bgt.n	80179c6 <__multadd+0x66>
 80179a0:	6861      	ldr	r1, [r4, #4]
 80179a2:	4630      	mov	r0, r6
 80179a4:	3101      	adds	r1, #1
 80179a6:	f7ff ff90 	bl	80178ca <_Balloc>
 80179aa:	6922      	ldr	r2, [r4, #16]
 80179ac:	3202      	adds	r2, #2
 80179ae:	f104 010c 	add.w	r1, r4, #12
 80179b2:	4680      	mov	r8, r0
 80179b4:	0092      	lsls	r2, r2, #2
 80179b6:	300c      	adds	r0, #12
 80179b8:	f7ff ff7c 	bl	80178b4 <memcpy>
 80179bc:	4621      	mov	r1, r4
 80179be:	4630      	mov	r0, r6
 80179c0:	f7ff ffb7 	bl	8017932 <_Bfree>
 80179c4:	4644      	mov	r4, r8
 80179c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80179ca:	3501      	adds	r5, #1
 80179cc:	615f      	str	r7, [r3, #20]
 80179ce:	6125      	str	r5, [r4, #16]
 80179d0:	4620      	mov	r0, r4
 80179d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080179d6 <__s2b>:
 80179d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179da:	460c      	mov	r4, r1
 80179dc:	4615      	mov	r5, r2
 80179de:	461f      	mov	r7, r3
 80179e0:	2209      	movs	r2, #9
 80179e2:	3308      	adds	r3, #8
 80179e4:	4606      	mov	r6, r0
 80179e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80179ea:	2100      	movs	r1, #0
 80179ec:	2201      	movs	r2, #1
 80179ee:	429a      	cmp	r2, r3
 80179f0:	db20      	blt.n	8017a34 <__s2b+0x5e>
 80179f2:	4630      	mov	r0, r6
 80179f4:	f7ff ff69 	bl	80178ca <_Balloc>
 80179f8:	9b08      	ldr	r3, [sp, #32]
 80179fa:	6143      	str	r3, [r0, #20]
 80179fc:	2d09      	cmp	r5, #9
 80179fe:	f04f 0301 	mov.w	r3, #1
 8017a02:	6103      	str	r3, [r0, #16]
 8017a04:	dd19      	ble.n	8017a3a <__s2b+0x64>
 8017a06:	f104 0809 	add.w	r8, r4, #9
 8017a0a:	46c1      	mov	r9, r8
 8017a0c:	442c      	add	r4, r5
 8017a0e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017a12:	4601      	mov	r1, r0
 8017a14:	3b30      	subs	r3, #48	; 0x30
 8017a16:	220a      	movs	r2, #10
 8017a18:	4630      	mov	r0, r6
 8017a1a:	f7ff ffa1 	bl	8017960 <__multadd>
 8017a1e:	45a1      	cmp	r9, r4
 8017a20:	d1f5      	bne.n	8017a0e <__s2b+0x38>
 8017a22:	eb08 0405 	add.w	r4, r8, r5
 8017a26:	3c08      	subs	r4, #8
 8017a28:	1b2d      	subs	r5, r5, r4
 8017a2a:	1963      	adds	r3, r4, r5
 8017a2c:	42bb      	cmp	r3, r7
 8017a2e:	db07      	blt.n	8017a40 <__s2b+0x6a>
 8017a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a34:	0052      	lsls	r2, r2, #1
 8017a36:	3101      	adds	r1, #1
 8017a38:	e7d9      	b.n	80179ee <__s2b+0x18>
 8017a3a:	340a      	adds	r4, #10
 8017a3c:	2509      	movs	r5, #9
 8017a3e:	e7f3      	b.n	8017a28 <__s2b+0x52>
 8017a40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017a44:	4601      	mov	r1, r0
 8017a46:	3b30      	subs	r3, #48	; 0x30
 8017a48:	220a      	movs	r2, #10
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7ff ff88 	bl	8017960 <__multadd>
 8017a50:	e7eb      	b.n	8017a2a <__s2b+0x54>

08017a52 <__hi0bits>:
 8017a52:	0c02      	lsrs	r2, r0, #16
 8017a54:	0412      	lsls	r2, r2, #16
 8017a56:	4603      	mov	r3, r0
 8017a58:	b9b2      	cbnz	r2, 8017a88 <__hi0bits+0x36>
 8017a5a:	0403      	lsls	r3, r0, #16
 8017a5c:	2010      	movs	r0, #16
 8017a5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017a62:	bf04      	itt	eq
 8017a64:	021b      	lsleq	r3, r3, #8
 8017a66:	3008      	addeq	r0, #8
 8017a68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017a6c:	bf04      	itt	eq
 8017a6e:	011b      	lsleq	r3, r3, #4
 8017a70:	3004      	addeq	r0, #4
 8017a72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017a76:	bf04      	itt	eq
 8017a78:	009b      	lsleq	r3, r3, #2
 8017a7a:	3002      	addeq	r0, #2
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	db06      	blt.n	8017a8e <__hi0bits+0x3c>
 8017a80:	005b      	lsls	r3, r3, #1
 8017a82:	d503      	bpl.n	8017a8c <__hi0bits+0x3a>
 8017a84:	3001      	adds	r0, #1
 8017a86:	4770      	bx	lr
 8017a88:	2000      	movs	r0, #0
 8017a8a:	e7e8      	b.n	8017a5e <__hi0bits+0xc>
 8017a8c:	2020      	movs	r0, #32
 8017a8e:	4770      	bx	lr

08017a90 <__lo0bits>:
 8017a90:	6803      	ldr	r3, [r0, #0]
 8017a92:	f013 0207 	ands.w	r2, r3, #7
 8017a96:	4601      	mov	r1, r0
 8017a98:	d00b      	beq.n	8017ab2 <__lo0bits+0x22>
 8017a9a:	07da      	lsls	r2, r3, #31
 8017a9c:	d423      	bmi.n	8017ae6 <__lo0bits+0x56>
 8017a9e:	0798      	lsls	r0, r3, #30
 8017aa0:	bf49      	itett	mi
 8017aa2:	085b      	lsrmi	r3, r3, #1
 8017aa4:	089b      	lsrpl	r3, r3, #2
 8017aa6:	2001      	movmi	r0, #1
 8017aa8:	600b      	strmi	r3, [r1, #0]
 8017aaa:	bf5c      	itt	pl
 8017aac:	600b      	strpl	r3, [r1, #0]
 8017aae:	2002      	movpl	r0, #2
 8017ab0:	4770      	bx	lr
 8017ab2:	b298      	uxth	r0, r3
 8017ab4:	b9a8      	cbnz	r0, 8017ae2 <__lo0bits+0x52>
 8017ab6:	0c1b      	lsrs	r3, r3, #16
 8017ab8:	2010      	movs	r0, #16
 8017aba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017abe:	bf04      	itt	eq
 8017ac0:	0a1b      	lsreq	r3, r3, #8
 8017ac2:	3008      	addeq	r0, #8
 8017ac4:	071a      	lsls	r2, r3, #28
 8017ac6:	bf04      	itt	eq
 8017ac8:	091b      	lsreq	r3, r3, #4
 8017aca:	3004      	addeq	r0, #4
 8017acc:	079a      	lsls	r2, r3, #30
 8017ace:	bf04      	itt	eq
 8017ad0:	089b      	lsreq	r3, r3, #2
 8017ad2:	3002      	addeq	r0, #2
 8017ad4:	07da      	lsls	r2, r3, #31
 8017ad6:	d402      	bmi.n	8017ade <__lo0bits+0x4e>
 8017ad8:	085b      	lsrs	r3, r3, #1
 8017ada:	d006      	beq.n	8017aea <__lo0bits+0x5a>
 8017adc:	3001      	adds	r0, #1
 8017ade:	600b      	str	r3, [r1, #0]
 8017ae0:	4770      	bx	lr
 8017ae2:	4610      	mov	r0, r2
 8017ae4:	e7e9      	b.n	8017aba <__lo0bits+0x2a>
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	4770      	bx	lr
 8017aea:	2020      	movs	r0, #32
 8017aec:	4770      	bx	lr

08017aee <__i2b>:
 8017aee:	b510      	push	{r4, lr}
 8017af0:	460c      	mov	r4, r1
 8017af2:	2101      	movs	r1, #1
 8017af4:	f7ff fee9 	bl	80178ca <_Balloc>
 8017af8:	2201      	movs	r2, #1
 8017afa:	6144      	str	r4, [r0, #20]
 8017afc:	6102      	str	r2, [r0, #16]
 8017afe:	bd10      	pop	{r4, pc}

08017b00 <__multiply>:
 8017b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b04:	4614      	mov	r4, r2
 8017b06:	690a      	ldr	r2, [r1, #16]
 8017b08:	6923      	ldr	r3, [r4, #16]
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	bfb8      	it	lt
 8017b0e:	460b      	movlt	r3, r1
 8017b10:	4688      	mov	r8, r1
 8017b12:	bfbc      	itt	lt
 8017b14:	46a0      	movlt	r8, r4
 8017b16:	461c      	movlt	r4, r3
 8017b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017b1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017b20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017b24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017b28:	eb07 0609 	add.w	r6, r7, r9
 8017b2c:	42b3      	cmp	r3, r6
 8017b2e:	bfb8      	it	lt
 8017b30:	3101      	addlt	r1, #1
 8017b32:	f7ff feca 	bl	80178ca <_Balloc>
 8017b36:	f100 0514 	add.w	r5, r0, #20
 8017b3a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017b3e:	462b      	mov	r3, r5
 8017b40:	2200      	movs	r2, #0
 8017b42:	4573      	cmp	r3, lr
 8017b44:	d316      	bcc.n	8017b74 <__multiply+0x74>
 8017b46:	f104 0214 	add.w	r2, r4, #20
 8017b4a:	f108 0114 	add.w	r1, r8, #20
 8017b4e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017b52:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017b56:	9300      	str	r3, [sp, #0]
 8017b58:	9b00      	ldr	r3, [sp, #0]
 8017b5a:	9201      	str	r2, [sp, #4]
 8017b5c:	4293      	cmp	r3, r2
 8017b5e:	d80c      	bhi.n	8017b7a <__multiply+0x7a>
 8017b60:	2e00      	cmp	r6, #0
 8017b62:	dd03      	ble.n	8017b6c <__multiply+0x6c>
 8017b64:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d05d      	beq.n	8017c28 <__multiply+0x128>
 8017b6c:	6106      	str	r6, [r0, #16]
 8017b6e:	b003      	add	sp, #12
 8017b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b74:	f843 2b04 	str.w	r2, [r3], #4
 8017b78:	e7e3      	b.n	8017b42 <__multiply+0x42>
 8017b7a:	f8b2 b000 	ldrh.w	fp, [r2]
 8017b7e:	f1bb 0f00 	cmp.w	fp, #0
 8017b82:	d023      	beq.n	8017bcc <__multiply+0xcc>
 8017b84:	4689      	mov	r9, r1
 8017b86:	46ac      	mov	ip, r5
 8017b88:	f04f 0800 	mov.w	r8, #0
 8017b8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8017b90:	f8dc a000 	ldr.w	sl, [ip]
 8017b94:	b2a3      	uxth	r3, r4
 8017b96:	fa1f fa8a 	uxth.w	sl, sl
 8017b9a:	fb0b a303 	mla	r3, fp, r3, sl
 8017b9e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017ba2:	f8dc 4000 	ldr.w	r4, [ip]
 8017ba6:	4443      	add	r3, r8
 8017ba8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017bac:	fb0b 840a 	mla	r4, fp, sl, r8
 8017bb0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017bb4:	46e2      	mov	sl, ip
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017bbc:	454f      	cmp	r7, r9
 8017bbe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017bc2:	f84a 3b04 	str.w	r3, [sl], #4
 8017bc6:	d82b      	bhi.n	8017c20 <__multiply+0x120>
 8017bc8:	f8cc 8004 	str.w	r8, [ip, #4]
 8017bcc:	9b01      	ldr	r3, [sp, #4]
 8017bce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017bd2:	3204      	adds	r2, #4
 8017bd4:	f1ba 0f00 	cmp.w	sl, #0
 8017bd8:	d020      	beq.n	8017c1c <__multiply+0x11c>
 8017bda:	682b      	ldr	r3, [r5, #0]
 8017bdc:	4689      	mov	r9, r1
 8017bde:	46a8      	mov	r8, r5
 8017be0:	f04f 0b00 	mov.w	fp, #0
 8017be4:	f8b9 c000 	ldrh.w	ip, [r9]
 8017be8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017bec:	fb0a 440c 	mla	r4, sl, ip, r4
 8017bf0:	445c      	add	r4, fp
 8017bf2:	46c4      	mov	ip, r8
 8017bf4:	b29b      	uxth	r3, r3
 8017bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017bfa:	f84c 3b04 	str.w	r3, [ip], #4
 8017bfe:	f859 3b04 	ldr.w	r3, [r9], #4
 8017c02:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017c06:	0c1b      	lsrs	r3, r3, #16
 8017c08:	fb0a b303 	mla	r3, sl, r3, fp
 8017c0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017c10:	454f      	cmp	r7, r9
 8017c12:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017c16:	d805      	bhi.n	8017c24 <__multiply+0x124>
 8017c18:	f8c8 3004 	str.w	r3, [r8, #4]
 8017c1c:	3504      	adds	r5, #4
 8017c1e:	e79b      	b.n	8017b58 <__multiply+0x58>
 8017c20:	46d4      	mov	ip, sl
 8017c22:	e7b3      	b.n	8017b8c <__multiply+0x8c>
 8017c24:	46e0      	mov	r8, ip
 8017c26:	e7dd      	b.n	8017be4 <__multiply+0xe4>
 8017c28:	3e01      	subs	r6, #1
 8017c2a:	e799      	b.n	8017b60 <__multiply+0x60>

08017c2c <__pow5mult>:
 8017c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c30:	4615      	mov	r5, r2
 8017c32:	f012 0203 	ands.w	r2, r2, #3
 8017c36:	4606      	mov	r6, r0
 8017c38:	460f      	mov	r7, r1
 8017c3a:	d007      	beq.n	8017c4c <__pow5mult+0x20>
 8017c3c:	3a01      	subs	r2, #1
 8017c3e:	4c21      	ldr	r4, [pc, #132]	; (8017cc4 <__pow5mult+0x98>)
 8017c40:	2300      	movs	r3, #0
 8017c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c46:	f7ff fe8b 	bl	8017960 <__multadd>
 8017c4a:	4607      	mov	r7, r0
 8017c4c:	10ad      	asrs	r5, r5, #2
 8017c4e:	d035      	beq.n	8017cbc <__pow5mult+0x90>
 8017c50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017c52:	b93c      	cbnz	r4, 8017c64 <__pow5mult+0x38>
 8017c54:	2010      	movs	r0, #16
 8017c56:	f7ff fe13 	bl	8017880 <malloc>
 8017c5a:	6270      	str	r0, [r6, #36]	; 0x24
 8017c5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c60:	6004      	str	r4, [r0, #0]
 8017c62:	60c4      	str	r4, [r0, #12]
 8017c64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017c68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c6c:	b94c      	cbnz	r4, 8017c82 <__pow5mult+0x56>
 8017c6e:	f240 2171 	movw	r1, #625	; 0x271
 8017c72:	4630      	mov	r0, r6
 8017c74:	f7ff ff3b 	bl	8017aee <__i2b>
 8017c78:	2300      	movs	r3, #0
 8017c7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c7e:	4604      	mov	r4, r0
 8017c80:	6003      	str	r3, [r0, #0]
 8017c82:	f04f 0800 	mov.w	r8, #0
 8017c86:	07eb      	lsls	r3, r5, #31
 8017c88:	d50a      	bpl.n	8017ca0 <__pow5mult+0x74>
 8017c8a:	4639      	mov	r1, r7
 8017c8c:	4622      	mov	r2, r4
 8017c8e:	4630      	mov	r0, r6
 8017c90:	f7ff ff36 	bl	8017b00 <__multiply>
 8017c94:	4639      	mov	r1, r7
 8017c96:	4681      	mov	r9, r0
 8017c98:	4630      	mov	r0, r6
 8017c9a:	f7ff fe4a 	bl	8017932 <_Bfree>
 8017c9e:	464f      	mov	r7, r9
 8017ca0:	106d      	asrs	r5, r5, #1
 8017ca2:	d00b      	beq.n	8017cbc <__pow5mult+0x90>
 8017ca4:	6820      	ldr	r0, [r4, #0]
 8017ca6:	b938      	cbnz	r0, 8017cb8 <__pow5mult+0x8c>
 8017ca8:	4622      	mov	r2, r4
 8017caa:	4621      	mov	r1, r4
 8017cac:	4630      	mov	r0, r6
 8017cae:	f7ff ff27 	bl	8017b00 <__multiply>
 8017cb2:	6020      	str	r0, [r4, #0]
 8017cb4:	f8c0 8000 	str.w	r8, [r0]
 8017cb8:	4604      	mov	r4, r0
 8017cba:	e7e4      	b.n	8017c86 <__pow5mult+0x5a>
 8017cbc:	4638      	mov	r0, r7
 8017cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cc2:	bf00      	nop
 8017cc4:	08019470 	.word	0x08019470

08017cc8 <__lshift>:
 8017cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ccc:	460c      	mov	r4, r1
 8017cce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017cd2:	6923      	ldr	r3, [r4, #16]
 8017cd4:	6849      	ldr	r1, [r1, #4]
 8017cd6:	eb0a 0903 	add.w	r9, sl, r3
 8017cda:	68a3      	ldr	r3, [r4, #8]
 8017cdc:	4607      	mov	r7, r0
 8017cde:	4616      	mov	r6, r2
 8017ce0:	f109 0501 	add.w	r5, r9, #1
 8017ce4:	42ab      	cmp	r3, r5
 8017ce6:	db32      	blt.n	8017d4e <__lshift+0x86>
 8017ce8:	4638      	mov	r0, r7
 8017cea:	f7ff fdee 	bl	80178ca <_Balloc>
 8017cee:	2300      	movs	r3, #0
 8017cf0:	4680      	mov	r8, r0
 8017cf2:	f100 0114 	add.w	r1, r0, #20
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	4553      	cmp	r3, sl
 8017cfa:	db2b      	blt.n	8017d54 <__lshift+0x8c>
 8017cfc:	6920      	ldr	r0, [r4, #16]
 8017cfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017d02:	f104 0314 	add.w	r3, r4, #20
 8017d06:	f016 021f 	ands.w	r2, r6, #31
 8017d0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017d12:	d025      	beq.n	8017d60 <__lshift+0x98>
 8017d14:	f1c2 0e20 	rsb	lr, r2, #32
 8017d18:	2000      	movs	r0, #0
 8017d1a:	681e      	ldr	r6, [r3, #0]
 8017d1c:	468a      	mov	sl, r1
 8017d1e:	4096      	lsls	r6, r2
 8017d20:	4330      	orrs	r0, r6
 8017d22:	f84a 0b04 	str.w	r0, [sl], #4
 8017d26:	f853 0b04 	ldr.w	r0, [r3], #4
 8017d2a:	459c      	cmp	ip, r3
 8017d2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8017d30:	d814      	bhi.n	8017d5c <__lshift+0x94>
 8017d32:	6048      	str	r0, [r1, #4]
 8017d34:	b108      	cbz	r0, 8017d3a <__lshift+0x72>
 8017d36:	f109 0502 	add.w	r5, r9, #2
 8017d3a:	3d01      	subs	r5, #1
 8017d3c:	4638      	mov	r0, r7
 8017d3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8017d42:	4621      	mov	r1, r4
 8017d44:	f7ff fdf5 	bl	8017932 <_Bfree>
 8017d48:	4640      	mov	r0, r8
 8017d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d4e:	3101      	adds	r1, #1
 8017d50:	005b      	lsls	r3, r3, #1
 8017d52:	e7c7      	b.n	8017ce4 <__lshift+0x1c>
 8017d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017d58:	3301      	adds	r3, #1
 8017d5a:	e7cd      	b.n	8017cf8 <__lshift+0x30>
 8017d5c:	4651      	mov	r1, sl
 8017d5e:	e7dc      	b.n	8017d1a <__lshift+0x52>
 8017d60:	3904      	subs	r1, #4
 8017d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d66:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d6a:	459c      	cmp	ip, r3
 8017d6c:	d8f9      	bhi.n	8017d62 <__lshift+0x9a>
 8017d6e:	e7e4      	b.n	8017d3a <__lshift+0x72>

08017d70 <__mcmp>:
 8017d70:	6903      	ldr	r3, [r0, #16]
 8017d72:	690a      	ldr	r2, [r1, #16]
 8017d74:	1a9b      	subs	r3, r3, r2
 8017d76:	b530      	push	{r4, r5, lr}
 8017d78:	d10c      	bne.n	8017d94 <__mcmp+0x24>
 8017d7a:	0092      	lsls	r2, r2, #2
 8017d7c:	3014      	adds	r0, #20
 8017d7e:	3114      	adds	r1, #20
 8017d80:	1884      	adds	r4, r0, r2
 8017d82:	4411      	add	r1, r2
 8017d84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017d88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017d8c:	4295      	cmp	r5, r2
 8017d8e:	d003      	beq.n	8017d98 <__mcmp+0x28>
 8017d90:	d305      	bcc.n	8017d9e <__mcmp+0x2e>
 8017d92:	2301      	movs	r3, #1
 8017d94:	4618      	mov	r0, r3
 8017d96:	bd30      	pop	{r4, r5, pc}
 8017d98:	42a0      	cmp	r0, r4
 8017d9a:	d3f3      	bcc.n	8017d84 <__mcmp+0x14>
 8017d9c:	e7fa      	b.n	8017d94 <__mcmp+0x24>
 8017d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8017da2:	e7f7      	b.n	8017d94 <__mcmp+0x24>

08017da4 <__mdiff>:
 8017da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017da8:	460d      	mov	r5, r1
 8017daa:	4607      	mov	r7, r0
 8017dac:	4611      	mov	r1, r2
 8017dae:	4628      	mov	r0, r5
 8017db0:	4614      	mov	r4, r2
 8017db2:	f7ff ffdd 	bl	8017d70 <__mcmp>
 8017db6:	1e06      	subs	r6, r0, #0
 8017db8:	d108      	bne.n	8017dcc <__mdiff+0x28>
 8017dba:	4631      	mov	r1, r6
 8017dbc:	4638      	mov	r0, r7
 8017dbe:	f7ff fd84 	bl	80178ca <_Balloc>
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dcc:	bfa4      	itt	ge
 8017dce:	4623      	movge	r3, r4
 8017dd0:	462c      	movge	r4, r5
 8017dd2:	4638      	mov	r0, r7
 8017dd4:	6861      	ldr	r1, [r4, #4]
 8017dd6:	bfa6      	itte	ge
 8017dd8:	461d      	movge	r5, r3
 8017dda:	2600      	movge	r6, #0
 8017ddc:	2601      	movlt	r6, #1
 8017dde:	f7ff fd74 	bl	80178ca <_Balloc>
 8017de2:	692b      	ldr	r3, [r5, #16]
 8017de4:	60c6      	str	r6, [r0, #12]
 8017de6:	6926      	ldr	r6, [r4, #16]
 8017de8:	f105 0914 	add.w	r9, r5, #20
 8017dec:	f104 0214 	add.w	r2, r4, #20
 8017df0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017df4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017df8:	f100 0514 	add.w	r5, r0, #20
 8017dfc:	f04f 0e00 	mov.w	lr, #0
 8017e00:	f852 ab04 	ldr.w	sl, [r2], #4
 8017e04:	f859 4b04 	ldr.w	r4, [r9], #4
 8017e08:	fa1e f18a 	uxtah	r1, lr, sl
 8017e0c:	b2a3      	uxth	r3, r4
 8017e0e:	1ac9      	subs	r1, r1, r3
 8017e10:	0c23      	lsrs	r3, r4, #16
 8017e12:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017e16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017e1a:	b289      	uxth	r1, r1
 8017e1c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017e20:	45c8      	cmp	r8, r9
 8017e22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017e26:	4694      	mov	ip, r2
 8017e28:	f845 3b04 	str.w	r3, [r5], #4
 8017e2c:	d8e8      	bhi.n	8017e00 <__mdiff+0x5c>
 8017e2e:	45bc      	cmp	ip, r7
 8017e30:	d304      	bcc.n	8017e3c <__mdiff+0x98>
 8017e32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017e36:	b183      	cbz	r3, 8017e5a <__mdiff+0xb6>
 8017e38:	6106      	str	r6, [r0, #16]
 8017e3a:	e7c5      	b.n	8017dc8 <__mdiff+0x24>
 8017e3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017e40:	fa1e f381 	uxtah	r3, lr, r1
 8017e44:	141a      	asrs	r2, r3, #16
 8017e46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017e4a:	b29b      	uxth	r3, r3
 8017e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017e54:	f845 3b04 	str.w	r3, [r5], #4
 8017e58:	e7e9      	b.n	8017e2e <__mdiff+0x8a>
 8017e5a:	3e01      	subs	r6, #1
 8017e5c:	e7e9      	b.n	8017e32 <__mdiff+0x8e>
	...

08017e60 <__ulp>:
 8017e60:	4b12      	ldr	r3, [pc, #72]	; (8017eac <__ulp+0x4c>)
 8017e62:	ee10 2a90 	vmov	r2, s1
 8017e66:	401a      	ands	r2, r3
 8017e68:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	dd04      	ble.n	8017e7a <__ulp+0x1a>
 8017e70:	2000      	movs	r0, #0
 8017e72:	4619      	mov	r1, r3
 8017e74:	ec41 0b10 	vmov	d0, r0, r1
 8017e78:	4770      	bx	lr
 8017e7a:	425b      	negs	r3, r3
 8017e7c:	151b      	asrs	r3, r3, #20
 8017e7e:	2b13      	cmp	r3, #19
 8017e80:	f04f 0000 	mov.w	r0, #0
 8017e84:	f04f 0100 	mov.w	r1, #0
 8017e88:	dc04      	bgt.n	8017e94 <__ulp+0x34>
 8017e8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017e8e:	fa42 f103 	asr.w	r1, r2, r3
 8017e92:	e7ef      	b.n	8017e74 <__ulp+0x14>
 8017e94:	3b14      	subs	r3, #20
 8017e96:	2b1e      	cmp	r3, #30
 8017e98:	f04f 0201 	mov.w	r2, #1
 8017e9c:	bfda      	itte	le
 8017e9e:	f1c3 031f 	rsble	r3, r3, #31
 8017ea2:	fa02 f303 	lslle.w	r3, r2, r3
 8017ea6:	4613      	movgt	r3, r2
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	e7e3      	b.n	8017e74 <__ulp+0x14>
 8017eac:	7ff00000 	.word	0x7ff00000

08017eb0 <__b2d>:
 8017eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb2:	6905      	ldr	r5, [r0, #16]
 8017eb4:	f100 0714 	add.w	r7, r0, #20
 8017eb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017ebc:	1f2e      	subs	r6, r5, #4
 8017ebe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f7ff fdc5 	bl	8017a52 <__hi0bits>
 8017ec8:	f1c0 0320 	rsb	r3, r0, #32
 8017ecc:	280a      	cmp	r0, #10
 8017ece:	600b      	str	r3, [r1, #0]
 8017ed0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017f48 <__b2d+0x98>
 8017ed4:	dc14      	bgt.n	8017f00 <__b2d+0x50>
 8017ed6:	f1c0 0e0b 	rsb	lr, r0, #11
 8017eda:	fa24 f10e 	lsr.w	r1, r4, lr
 8017ede:	42b7      	cmp	r7, r6
 8017ee0:	ea41 030c 	orr.w	r3, r1, ip
 8017ee4:	bf34      	ite	cc
 8017ee6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017eea:	2100      	movcs	r1, #0
 8017eec:	3015      	adds	r0, #21
 8017eee:	fa04 f000 	lsl.w	r0, r4, r0
 8017ef2:	fa21 f10e 	lsr.w	r1, r1, lr
 8017ef6:	ea40 0201 	orr.w	r2, r0, r1
 8017efa:	ec43 2b10 	vmov	d0, r2, r3
 8017efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f00:	42b7      	cmp	r7, r6
 8017f02:	bf3a      	itte	cc
 8017f04:	f1a5 0608 	subcc.w	r6, r5, #8
 8017f08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017f0c:	2100      	movcs	r1, #0
 8017f0e:	380b      	subs	r0, #11
 8017f10:	d015      	beq.n	8017f3e <__b2d+0x8e>
 8017f12:	4084      	lsls	r4, r0
 8017f14:	f1c0 0520 	rsb	r5, r0, #32
 8017f18:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017f1c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017f20:	42be      	cmp	r6, r7
 8017f22:	fa21 fc05 	lsr.w	ip, r1, r5
 8017f26:	ea44 030c 	orr.w	r3, r4, ip
 8017f2a:	bf8c      	ite	hi
 8017f2c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017f30:	2400      	movls	r4, #0
 8017f32:	fa01 f000 	lsl.w	r0, r1, r0
 8017f36:	40ec      	lsrs	r4, r5
 8017f38:	ea40 0204 	orr.w	r2, r0, r4
 8017f3c:	e7dd      	b.n	8017efa <__b2d+0x4a>
 8017f3e:	ea44 030c 	orr.w	r3, r4, ip
 8017f42:	460a      	mov	r2, r1
 8017f44:	e7d9      	b.n	8017efa <__b2d+0x4a>
 8017f46:	bf00      	nop
 8017f48:	3ff00000 	.word	0x3ff00000

08017f4c <__d2b>:
 8017f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017f50:	460e      	mov	r6, r1
 8017f52:	2101      	movs	r1, #1
 8017f54:	ec59 8b10 	vmov	r8, r9, d0
 8017f58:	4615      	mov	r5, r2
 8017f5a:	f7ff fcb6 	bl	80178ca <_Balloc>
 8017f5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017f62:	4607      	mov	r7, r0
 8017f64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017f68:	bb34      	cbnz	r4, 8017fb8 <__d2b+0x6c>
 8017f6a:	9301      	str	r3, [sp, #4]
 8017f6c:	f1b8 0300 	subs.w	r3, r8, #0
 8017f70:	d027      	beq.n	8017fc2 <__d2b+0x76>
 8017f72:	a802      	add	r0, sp, #8
 8017f74:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017f78:	f7ff fd8a 	bl	8017a90 <__lo0bits>
 8017f7c:	9900      	ldr	r1, [sp, #0]
 8017f7e:	b1f0      	cbz	r0, 8017fbe <__d2b+0x72>
 8017f80:	9a01      	ldr	r2, [sp, #4]
 8017f82:	f1c0 0320 	rsb	r3, r0, #32
 8017f86:	fa02 f303 	lsl.w	r3, r2, r3
 8017f8a:	430b      	orrs	r3, r1
 8017f8c:	40c2      	lsrs	r2, r0
 8017f8e:	617b      	str	r3, [r7, #20]
 8017f90:	9201      	str	r2, [sp, #4]
 8017f92:	9b01      	ldr	r3, [sp, #4]
 8017f94:	61bb      	str	r3, [r7, #24]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	bf14      	ite	ne
 8017f9a:	2102      	movne	r1, #2
 8017f9c:	2101      	moveq	r1, #1
 8017f9e:	6139      	str	r1, [r7, #16]
 8017fa0:	b1c4      	cbz	r4, 8017fd4 <__d2b+0x88>
 8017fa2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017fa6:	4404      	add	r4, r0
 8017fa8:	6034      	str	r4, [r6, #0]
 8017faa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017fae:	6028      	str	r0, [r5, #0]
 8017fb0:	4638      	mov	r0, r7
 8017fb2:	b003      	add	sp, #12
 8017fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017fbc:	e7d5      	b.n	8017f6a <__d2b+0x1e>
 8017fbe:	6179      	str	r1, [r7, #20]
 8017fc0:	e7e7      	b.n	8017f92 <__d2b+0x46>
 8017fc2:	a801      	add	r0, sp, #4
 8017fc4:	f7ff fd64 	bl	8017a90 <__lo0bits>
 8017fc8:	9b01      	ldr	r3, [sp, #4]
 8017fca:	617b      	str	r3, [r7, #20]
 8017fcc:	2101      	movs	r1, #1
 8017fce:	6139      	str	r1, [r7, #16]
 8017fd0:	3020      	adds	r0, #32
 8017fd2:	e7e5      	b.n	8017fa0 <__d2b+0x54>
 8017fd4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017fd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017fdc:	6030      	str	r0, [r6, #0]
 8017fde:	6918      	ldr	r0, [r3, #16]
 8017fe0:	f7ff fd37 	bl	8017a52 <__hi0bits>
 8017fe4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017fe8:	e7e1      	b.n	8017fae <__d2b+0x62>

08017fea <__ratio>:
 8017fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fee:	4688      	mov	r8, r1
 8017ff0:	4669      	mov	r1, sp
 8017ff2:	4681      	mov	r9, r0
 8017ff4:	f7ff ff5c 	bl	8017eb0 <__b2d>
 8017ff8:	a901      	add	r1, sp, #4
 8017ffa:	4640      	mov	r0, r8
 8017ffc:	ec57 6b10 	vmov	r6, r7, d0
 8018000:	f7ff ff56 	bl	8017eb0 <__b2d>
 8018004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018008:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801800c:	eba3 0c02 	sub.w	ip, r3, r2
 8018010:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018014:	1a9b      	subs	r3, r3, r2
 8018016:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801801a:	ec5b ab10 	vmov	sl, fp, d0
 801801e:	2b00      	cmp	r3, #0
 8018020:	bfce      	itee	gt
 8018022:	463a      	movgt	r2, r7
 8018024:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018028:	465a      	movle	r2, fp
 801802a:	4659      	mov	r1, fp
 801802c:	463d      	mov	r5, r7
 801802e:	bfd4      	ite	le
 8018030:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018034:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018038:	4630      	mov	r0, r6
 801803a:	ee10 2a10 	vmov	r2, s0
 801803e:	460b      	mov	r3, r1
 8018040:	4629      	mov	r1, r5
 8018042:	f7e8 fc1b 	bl	800087c <__aeabi_ddiv>
 8018046:	ec41 0b10 	vmov	d0, r0, r1
 801804a:	b003      	add	sp, #12
 801804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018050 <__copybits>:
 8018050:	3901      	subs	r1, #1
 8018052:	b510      	push	{r4, lr}
 8018054:	1149      	asrs	r1, r1, #5
 8018056:	6914      	ldr	r4, [r2, #16]
 8018058:	3101      	adds	r1, #1
 801805a:	f102 0314 	add.w	r3, r2, #20
 801805e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018062:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018066:	42a3      	cmp	r3, r4
 8018068:	4602      	mov	r2, r0
 801806a:	d303      	bcc.n	8018074 <__copybits+0x24>
 801806c:	2300      	movs	r3, #0
 801806e:	428a      	cmp	r2, r1
 8018070:	d305      	bcc.n	801807e <__copybits+0x2e>
 8018072:	bd10      	pop	{r4, pc}
 8018074:	f853 2b04 	ldr.w	r2, [r3], #4
 8018078:	f840 2b04 	str.w	r2, [r0], #4
 801807c:	e7f3      	b.n	8018066 <__copybits+0x16>
 801807e:	f842 3b04 	str.w	r3, [r2], #4
 8018082:	e7f4      	b.n	801806e <__copybits+0x1e>

08018084 <__any_on>:
 8018084:	f100 0214 	add.w	r2, r0, #20
 8018088:	6900      	ldr	r0, [r0, #16]
 801808a:	114b      	asrs	r3, r1, #5
 801808c:	4298      	cmp	r0, r3
 801808e:	b510      	push	{r4, lr}
 8018090:	db11      	blt.n	80180b6 <__any_on+0x32>
 8018092:	dd0a      	ble.n	80180aa <__any_on+0x26>
 8018094:	f011 011f 	ands.w	r1, r1, #31
 8018098:	d007      	beq.n	80180aa <__any_on+0x26>
 801809a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801809e:	fa24 f001 	lsr.w	r0, r4, r1
 80180a2:	fa00 f101 	lsl.w	r1, r0, r1
 80180a6:	428c      	cmp	r4, r1
 80180a8:	d10b      	bne.n	80180c2 <__any_on+0x3e>
 80180aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80180ae:	4293      	cmp	r3, r2
 80180b0:	d803      	bhi.n	80180ba <__any_on+0x36>
 80180b2:	2000      	movs	r0, #0
 80180b4:	bd10      	pop	{r4, pc}
 80180b6:	4603      	mov	r3, r0
 80180b8:	e7f7      	b.n	80180aa <__any_on+0x26>
 80180ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80180be:	2900      	cmp	r1, #0
 80180c0:	d0f5      	beq.n	80180ae <__any_on+0x2a>
 80180c2:	2001      	movs	r0, #1
 80180c4:	e7f6      	b.n	80180b4 <__any_on+0x30>

080180c6 <_calloc_r>:
 80180c6:	b538      	push	{r3, r4, r5, lr}
 80180c8:	fb02 f401 	mul.w	r4, r2, r1
 80180cc:	4621      	mov	r1, r4
 80180ce:	f000 f857 	bl	8018180 <_malloc_r>
 80180d2:	4605      	mov	r5, r0
 80180d4:	b118      	cbz	r0, 80180de <_calloc_r+0x18>
 80180d6:	4622      	mov	r2, r4
 80180d8:	2100      	movs	r1, #0
 80180da:	f7fc fc9f 	bl	8014a1c <memset>
 80180de:	4628      	mov	r0, r5
 80180e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080180e4 <_free_r>:
 80180e4:	b538      	push	{r3, r4, r5, lr}
 80180e6:	4605      	mov	r5, r0
 80180e8:	2900      	cmp	r1, #0
 80180ea:	d045      	beq.n	8018178 <_free_r+0x94>
 80180ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180f0:	1f0c      	subs	r4, r1, #4
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	bfb8      	it	lt
 80180f6:	18e4      	addlt	r4, r4, r3
 80180f8:	f000 fe30 	bl	8018d5c <__malloc_lock>
 80180fc:	4a1f      	ldr	r2, [pc, #124]	; (801817c <_free_r+0x98>)
 80180fe:	6813      	ldr	r3, [r2, #0]
 8018100:	4610      	mov	r0, r2
 8018102:	b933      	cbnz	r3, 8018112 <_free_r+0x2e>
 8018104:	6063      	str	r3, [r4, #4]
 8018106:	6014      	str	r4, [r2, #0]
 8018108:	4628      	mov	r0, r5
 801810a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801810e:	f000 be26 	b.w	8018d5e <__malloc_unlock>
 8018112:	42a3      	cmp	r3, r4
 8018114:	d90c      	bls.n	8018130 <_free_r+0x4c>
 8018116:	6821      	ldr	r1, [r4, #0]
 8018118:	1862      	adds	r2, r4, r1
 801811a:	4293      	cmp	r3, r2
 801811c:	bf04      	itt	eq
 801811e:	681a      	ldreq	r2, [r3, #0]
 8018120:	685b      	ldreq	r3, [r3, #4]
 8018122:	6063      	str	r3, [r4, #4]
 8018124:	bf04      	itt	eq
 8018126:	1852      	addeq	r2, r2, r1
 8018128:	6022      	streq	r2, [r4, #0]
 801812a:	6004      	str	r4, [r0, #0]
 801812c:	e7ec      	b.n	8018108 <_free_r+0x24>
 801812e:	4613      	mov	r3, r2
 8018130:	685a      	ldr	r2, [r3, #4]
 8018132:	b10a      	cbz	r2, 8018138 <_free_r+0x54>
 8018134:	42a2      	cmp	r2, r4
 8018136:	d9fa      	bls.n	801812e <_free_r+0x4a>
 8018138:	6819      	ldr	r1, [r3, #0]
 801813a:	1858      	adds	r0, r3, r1
 801813c:	42a0      	cmp	r0, r4
 801813e:	d10b      	bne.n	8018158 <_free_r+0x74>
 8018140:	6820      	ldr	r0, [r4, #0]
 8018142:	4401      	add	r1, r0
 8018144:	1858      	adds	r0, r3, r1
 8018146:	4282      	cmp	r2, r0
 8018148:	6019      	str	r1, [r3, #0]
 801814a:	d1dd      	bne.n	8018108 <_free_r+0x24>
 801814c:	6810      	ldr	r0, [r2, #0]
 801814e:	6852      	ldr	r2, [r2, #4]
 8018150:	605a      	str	r2, [r3, #4]
 8018152:	4401      	add	r1, r0
 8018154:	6019      	str	r1, [r3, #0]
 8018156:	e7d7      	b.n	8018108 <_free_r+0x24>
 8018158:	d902      	bls.n	8018160 <_free_r+0x7c>
 801815a:	230c      	movs	r3, #12
 801815c:	602b      	str	r3, [r5, #0]
 801815e:	e7d3      	b.n	8018108 <_free_r+0x24>
 8018160:	6820      	ldr	r0, [r4, #0]
 8018162:	1821      	adds	r1, r4, r0
 8018164:	428a      	cmp	r2, r1
 8018166:	bf04      	itt	eq
 8018168:	6811      	ldreq	r1, [r2, #0]
 801816a:	6852      	ldreq	r2, [r2, #4]
 801816c:	6062      	str	r2, [r4, #4]
 801816e:	bf04      	itt	eq
 8018170:	1809      	addeq	r1, r1, r0
 8018172:	6021      	streq	r1, [r4, #0]
 8018174:	605c      	str	r4, [r3, #4]
 8018176:	e7c7      	b.n	8018108 <_free_r+0x24>
 8018178:	bd38      	pop	{r3, r4, r5, pc}
 801817a:	bf00      	nop
 801817c:	20045308 	.word	0x20045308

08018180 <_malloc_r>:
 8018180:	b570      	push	{r4, r5, r6, lr}
 8018182:	1ccd      	adds	r5, r1, #3
 8018184:	f025 0503 	bic.w	r5, r5, #3
 8018188:	3508      	adds	r5, #8
 801818a:	2d0c      	cmp	r5, #12
 801818c:	bf38      	it	cc
 801818e:	250c      	movcc	r5, #12
 8018190:	2d00      	cmp	r5, #0
 8018192:	4606      	mov	r6, r0
 8018194:	db01      	blt.n	801819a <_malloc_r+0x1a>
 8018196:	42a9      	cmp	r1, r5
 8018198:	d903      	bls.n	80181a2 <_malloc_r+0x22>
 801819a:	230c      	movs	r3, #12
 801819c:	6033      	str	r3, [r6, #0]
 801819e:	2000      	movs	r0, #0
 80181a0:	bd70      	pop	{r4, r5, r6, pc}
 80181a2:	f000 fddb 	bl	8018d5c <__malloc_lock>
 80181a6:	4a21      	ldr	r2, [pc, #132]	; (801822c <_malloc_r+0xac>)
 80181a8:	6814      	ldr	r4, [r2, #0]
 80181aa:	4621      	mov	r1, r4
 80181ac:	b991      	cbnz	r1, 80181d4 <_malloc_r+0x54>
 80181ae:	4c20      	ldr	r4, [pc, #128]	; (8018230 <_malloc_r+0xb0>)
 80181b0:	6823      	ldr	r3, [r4, #0]
 80181b2:	b91b      	cbnz	r3, 80181bc <_malloc_r+0x3c>
 80181b4:	4630      	mov	r0, r6
 80181b6:	f000 fc91 	bl	8018adc <_sbrk_r>
 80181ba:	6020      	str	r0, [r4, #0]
 80181bc:	4629      	mov	r1, r5
 80181be:	4630      	mov	r0, r6
 80181c0:	f000 fc8c 	bl	8018adc <_sbrk_r>
 80181c4:	1c43      	adds	r3, r0, #1
 80181c6:	d124      	bne.n	8018212 <_malloc_r+0x92>
 80181c8:	230c      	movs	r3, #12
 80181ca:	6033      	str	r3, [r6, #0]
 80181cc:	4630      	mov	r0, r6
 80181ce:	f000 fdc6 	bl	8018d5e <__malloc_unlock>
 80181d2:	e7e4      	b.n	801819e <_malloc_r+0x1e>
 80181d4:	680b      	ldr	r3, [r1, #0]
 80181d6:	1b5b      	subs	r3, r3, r5
 80181d8:	d418      	bmi.n	801820c <_malloc_r+0x8c>
 80181da:	2b0b      	cmp	r3, #11
 80181dc:	d90f      	bls.n	80181fe <_malloc_r+0x7e>
 80181de:	600b      	str	r3, [r1, #0]
 80181e0:	50cd      	str	r5, [r1, r3]
 80181e2:	18cc      	adds	r4, r1, r3
 80181e4:	4630      	mov	r0, r6
 80181e6:	f000 fdba 	bl	8018d5e <__malloc_unlock>
 80181ea:	f104 000b 	add.w	r0, r4, #11
 80181ee:	1d23      	adds	r3, r4, #4
 80181f0:	f020 0007 	bic.w	r0, r0, #7
 80181f4:	1ac3      	subs	r3, r0, r3
 80181f6:	d0d3      	beq.n	80181a0 <_malloc_r+0x20>
 80181f8:	425a      	negs	r2, r3
 80181fa:	50e2      	str	r2, [r4, r3]
 80181fc:	e7d0      	b.n	80181a0 <_malloc_r+0x20>
 80181fe:	428c      	cmp	r4, r1
 8018200:	684b      	ldr	r3, [r1, #4]
 8018202:	bf16      	itet	ne
 8018204:	6063      	strne	r3, [r4, #4]
 8018206:	6013      	streq	r3, [r2, #0]
 8018208:	460c      	movne	r4, r1
 801820a:	e7eb      	b.n	80181e4 <_malloc_r+0x64>
 801820c:	460c      	mov	r4, r1
 801820e:	6849      	ldr	r1, [r1, #4]
 8018210:	e7cc      	b.n	80181ac <_malloc_r+0x2c>
 8018212:	1cc4      	adds	r4, r0, #3
 8018214:	f024 0403 	bic.w	r4, r4, #3
 8018218:	42a0      	cmp	r0, r4
 801821a:	d005      	beq.n	8018228 <_malloc_r+0xa8>
 801821c:	1a21      	subs	r1, r4, r0
 801821e:	4630      	mov	r0, r6
 8018220:	f000 fc5c 	bl	8018adc <_sbrk_r>
 8018224:	3001      	adds	r0, #1
 8018226:	d0cf      	beq.n	80181c8 <_malloc_r+0x48>
 8018228:	6025      	str	r5, [r4, #0]
 801822a:	e7db      	b.n	80181e4 <_malloc_r+0x64>
 801822c:	20045308 	.word	0x20045308
 8018230:	2004530c 	.word	0x2004530c

08018234 <__ssputs_r>:
 8018234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018238:	688e      	ldr	r6, [r1, #8]
 801823a:	429e      	cmp	r6, r3
 801823c:	4682      	mov	sl, r0
 801823e:	460c      	mov	r4, r1
 8018240:	4690      	mov	r8, r2
 8018242:	4699      	mov	r9, r3
 8018244:	d837      	bhi.n	80182b6 <__ssputs_r+0x82>
 8018246:	898a      	ldrh	r2, [r1, #12]
 8018248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801824c:	d031      	beq.n	80182b2 <__ssputs_r+0x7e>
 801824e:	6825      	ldr	r5, [r4, #0]
 8018250:	6909      	ldr	r1, [r1, #16]
 8018252:	1a6f      	subs	r7, r5, r1
 8018254:	6965      	ldr	r5, [r4, #20]
 8018256:	2302      	movs	r3, #2
 8018258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801825c:	fb95 f5f3 	sdiv	r5, r5, r3
 8018260:	f109 0301 	add.w	r3, r9, #1
 8018264:	443b      	add	r3, r7
 8018266:	429d      	cmp	r5, r3
 8018268:	bf38      	it	cc
 801826a:	461d      	movcc	r5, r3
 801826c:	0553      	lsls	r3, r2, #21
 801826e:	d530      	bpl.n	80182d2 <__ssputs_r+0x9e>
 8018270:	4629      	mov	r1, r5
 8018272:	f7ff ff85 	bl	8018180 <_malloc_r>
 8018276:	4606      	mov	r6, r0
 8018278:	b950      	cbnz	r0, 8018290 <__ssputs_r+0x5c>
 801827a:	230c      	movs	r3, #12
 801827c:	f8ca 3000 	str.w	r3, [sl]
 8018280:	89a3      	ldrh	r3, [r4, #12]
 8018282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018286:	81a3      	strh	r3, [r4, #12]
 8018288:	f04f 30ff 	mov.w	r0, #4294967295
 801828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018290:	463a      	mov	r2, r7
 8018292:	6921      	ldr	r1, [r4, #16]
 8018294:	f7ff fb0e 	bl	80178b4 <memcpy>
 8018298:	89a3      	ldrh	r3, [r4, #12]
 801829a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801829e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182a2:	81a3      	strh	r3, [r4, #12]
 80182a4:	6126      	str	r6, [r4, #16]
 80182a6:	6165      	str	r5, [r4, #20]
 80182a8:	443e      	add	r6, r7
 80182aa:	1bed      	subs	r5, r5, r7
 80182ac:	6026      	str	r6, [r4, #0]
 80182ae:	60a5      	str	r5, [r4, #8]
 80182b0:	464e      	mov	r6, r9
 80182b2:	454e      	cmp	r6, r9
 80182b4:	d900      	bls.n	80182b8 <__ssputs_r+0x84>
 80182b6:	464e      	mov	r6, r9
 80182b8:	4632      	mov	r2, r6
 80182ba:	4641      	mov	r1, r8
 80182bc:	6820      	ldr	r0, [r4, #0]
 80182be:	f000 fd34 	bl	8018d2a <memmove>
 80182c2:	68a3      	ldr	r3, [r4, #8]
 80182c4:	1b9b      	subs	r3, r3, r6
 80182c6:	60a3      	str	r3, [r4, #8]
 80182c8:	6823      	ldr	r3, [r4, #0]
 80182ca:	441e      	add	r6, r3
 80182cc:	6026      	str	r6, [r4, #0]
 80182ce:	2000      	movs	r0, #0
 80182d0:	e7dc      	b.n	801828c <__ssputs_r+0x58>
 80182d2:	462a      	mov	r2, r5
 80182d4:	f000 fd44 	bl	8018d60 <_realloc_r>
 80182d8:	4606      	mov	r6, r0
 80182da:	2800      	cmp	r0, #0
 80182dc:	d1e2      	bne.n	80182a4 <__ssputs_r+0x70>
 80182de:	6921      	ldr	r1, [r4, #16]
 80182e0:	4650      	mov	r0, sl
 80182e2:	f7ff feff 	bl	80180e4 <_free_r>
 80182e6:	e7c8      	b.n	801827a <__ssputs_r+0x46>

080182e8 <_svfiprintf_r>:
 80182e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ec:	461d      	mov	r5, r3
 80182ee:	898b      	ldrh	r3, [r1, #12]
 80182f0:	061f      	lsls	r7, r3, #24
 80182f2:	b09d      	sub	sp, #116	; 0x74
 80182f4:	4680      	mov	r8, r0
 80182f6:	460c      	mov	r4, r1
 80182f8:	4616      	mov	r6, r2
 80182fa:	d50f      	bpl.n	801831c <_svfiprintf_r+0x34>
 80182fc:	690b      	ldr	r3, [r1, #16]
 80182fe:	b96b      	cbnz	r3, 801831c <_svfiprintf_r+0x34>
 8018300:	2140      	movs	r1, #64	; 0x40
 8018302:	f7ff ff3d 	bl	8018180 <_malloc_r>
 8018306:	6020      	str	r0, [r4, #0]
 8018308:	6120      	str	r0, [r4, #16]
 801830a:	b928      	cbnz	r0, 8018318 <_svfiprintf_r+0x30>
 801830c:	230c      	movs	r3, #12
 801830e:	f8c8 3000 	str.w	r3, [r8]
 8018312:	f04f 30ff 	mov.w	r0, #4294967295
 8018316:	e0c8      	b.n	80184aa <_svfiprintf_r+0x1c2>
 8018318:	2340      	movs	r3, #64	; 0x40
 801831a:	6163      	str	r3, [r4, #20]
 801831c:	2300      	movs	r3, #0
 801831e:	9309      	str	r3, [sp, #36]	; 0x24
 8018320:	2320      	movs	r3, #32
 8018322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018326:	2330      	movs	r3, #48	; 0x30
 8018328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801832c:	9503      	str	r5, [sp, #12]
 801832e:	f04f 0b01 	mov.w	fp, #1
 8018332:	4637      	mov	r7, r6
 8018334:	463d      	mov	r5, r7
 8018336:	f815 3b01 	ldrb.w	r3, [r5], #1
 801833a:	b10b      	cbz	r3, 8018340 <_svfiprintf_r+0x58>
 801833c:	2b25      	cmp	r3, #37	; 0x25
 801833e:	d13e      	bne.n	80183be <_svfiprintf_r+0xd6>
 8018340:	ebb7 0a06 	subs.w	sl, r7, r6
 8018344:	d00b      	beq.n	801835e <_svfiprintf_r+0x76>
 8018346:	4653      	mov	r3, sl
 8018348:	4632      	mov	r2, r6
 801834a:	4621      	mov	r1, r4
 801834c:	4640      	mov	r0, r8
 801834e:	f7ff ff71 	bl	8018234 <__ssputs_r>
 8018352:	3001      	adds	r0, #1
 8018354:	f000 80a4 	beq.w	80184a0 <_svfiprintf_r+0x1b8>
 8018358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801835a:	4453      	add	r3, sl
 801835c:	9309      	str	r3, [sp, #36]	; 0x24
 801835e:	783b      	ldrb	r3, [r7, #0]
 8018360:	2b00      	cmp	r3, #0
 8018362:	f000 809d 	beq.w	80184a0 <_svfiprintf_r+0x1b8>
 8018366:	2300      	movs	r3, #0
 8018368:	f04f 32ff 	mov.w	r2, #4294967295
 801836c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018370:	9304      	str	r3, [sp, #16]
 8018372:	9307      	str	r3, [sp, #28]
 8018374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018378:	931a      	str	r3, [sp, #104]	; 0x68
 801837a:	462f      	mov	r7, r5
 801837c:	2205      	movs	r2, #5
 801837e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018382:	4850      	ldr	r0, [pc, #320]	; (80184c4 <_svfiprintf_r+0x1dc>)
 8018384:	f7e7 ff44 	bl	8000210 <memchr>
 8018388:	9b04      	ldr	r3, [sp, #16]
 801838a:	b9d0      	cbnz	r0, 80183c2 <_svfiprintf_r+0xda>
 801838c:	06d9      	lsls	r1, r3, #27
 801838e:	bf44      	itt	mi
 8018390:	2220      	movmi	r2, #32
 8018392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018396:	071a      	lsls	r2, r3, #28
 8018398:	bf44      	itt	mi
 801839a:	222b      	movmi	r2, #43	; 0x2b
 801839c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80183a0:	782a      	ldrb	r2, [r5, #0]
 80183a2:	2a2a      	cmp	r2, #42	; 0x2a
 80183a4:	d015      	beq.n	80183d2 <_svfiprintf_r+0xea>
 80183a6:	9a07      	ldr	r2, [sp, #28]
 80183a8:	462f      	mov	r7, r5
 80183aa:	2000      	movs	r0, #0
 80183ac:	250a      	movs	r5, #10
 80183ae:	4639      	mov	r1, r7
 80183b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80183b4:	3b30      	subs	r3, #48	; 0x30
 80183b6:	2b09      	cmp	r3, #9
 80183b8:	d94d      	bls.n	8018456 <_svfiprintf_r+0x16e>
 80183ba:	b1b8      	cbz	r0, 80183ec <_svfiprintf_r+0x104>
 80183bc:	e00f      	b.n	80183de <_svfiprintf_r+0xf6>
 80183be:	462f      	mov	r7, r5
 80183c0:	e7b8      	b.n	8018334 <_svfiprintf_r+0x4c>
 80183c2:	4a40      	ldr	r2, [pc, #256]	; (80184c4 <_svfiprintf_r+0x1dc>)
 80183c4:	1a80      	subs	r0, r0, r2
 80183c6:	fa0b f000 	lsl.w	r0, fp, r0
 80183ca:	4318      	orrs	r0, r3
 80183cc:	9004      	str	r0, [sp, #16]
 80183ce:	463d      	mov	r5, r7
 80183d0:	e7d3      	b.n	801837a <_svfiprintf_r+0x92>
 80183d2:	9a03      	ldr	r2, [sp, #12]
 80183d4:	1d11      	adds	r1, r2, #4
 80183d6:	6812      	ldr	r2, [r2, #0]
 80183d8:	9103      	str	r1, [sp, #12]
 80183da:	2a00      	cmp	r2, #0
 80183dc:	db01      	blt.n	80183e2 <_svfiprintf_r+0xfa>
 80183de:	9207      	str	r2, [sp, #28]
 80183e0:	e004      	b.n	80183ec <_svfiprintf_r+0x104>
 80183e2:	4252      	negs	r2, r2
 80183e4:	f043 0302 	orr.w	r3, r3, #2
 80183e8:	9207      	str	r2, [sp, #28]
 80183ea:	9304      	str	r3, [sp, #16]
 80183ec:	783b      	ldrb	r3, [r7, #0]
 80183ee:	2b2e      	cmp	r3, #46	; 0x2e
 80183f0:	d10c      	bne.n	801840c <_svfiprintf_r+0x124>
 80183f2:	787b      	ldrb	r3, [r7, #1]
 80183f4:	2b2a      	cmp	r3, #42	; 0x2a
 80183f6:	d133      	bne.n	8018460 <_svfiprintf_r+0x178>
 80183f8:	9b03      	ldr	r3, [sp, #12]
 80183fa:	1d1a      	adds	r2, r3, #4
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	9203      	str	r2, [sp, #12]
 8018400:	2b00      	cmp	r3, #0
 8018402:	bfb8      	it	lt
 8018404:	f04f 33ff 	movlt.w	r3, #4294967295
 8018408:	3702      	adds	r7, #2
 801840a:	9305      	str	r3, [sp, #20]
 801840c:	4d2e      	ldr	r5, [pc, #184]	; (80184c8 <_svfiprintf_r+0x1e0>)
 801840e:	7839      	ldrb	r1, [r7, #0]
 8018410:	2203      	movs	r2, #3
 8018412:	4628      	mov	r0, r5
 8018414:	f7e7 fefc 	bl	8000210 <memchr>
 8018418:	b138      	cbz	r0, 801842a <_svfiprintf_r+0x142>
 801841a:	2340      	movs	r3, #64	; 0x40
 801841c:	1b40      	subs	r0, r0, r5
 801841e:	fa03 f000 	lsl.w	r0, r3, r0
 8018422:	9b04      	ldr	r3, [sp, #16]
 8018424:	4303      	orrs	r3, r0
 8018426:	3701      	adds	r7, #1
 8018428:	9304      	str	r3, [sp, #16]
 801842a:	7839      	ldrb	r1, [r7, #0]
 801842c:	4827      	ldr	r0, [pc, #156]	; (80184cc <_svfiprintf_r+0x1e4>)
 801842e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018432:	2206      	movs	r2, #6
 8018434:	1c7e      	adds	r6, r7, #1
 8018436:	f7e7 feeb 	bl	8000210 <memchr>
 801843a:	2800      	cmp	r0, #0
 801843c:	d038      	beq.n	80184b0 <_svfiprintf_r+0x1c8>
 801843e:	4b24      	ldr	r3, [pc, #144]	; (80184d0 <_svfiprintf_r+0x1e8>)
 8018440:	bb13      	cbnz	r3, 8018488 <_svfiprintf_r+0x1a0>
 8018442:	9b03      	ldr	r3, [sp, #12]
 8018444:	3307      	adds	r3, #7
 8018446:	f023 0307 	bic.w	r3, r3, #7
 801844a:	3308      	adds	r3, #8
 801844c:	9303      	str	r3, [sp, #12]
 801844e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018450:	444b      	add	r3, r9
 8018452:	9309      	str	r3, [sp, #36]	; 0x24
 8018454:	e76d      	b.n	8018332 <_svfiprintf_r+0x4a>
 8018456:	fb05 3202 	mla	r2, r5, r2, r3
 801845a:	2001      	movs	r0, #1
 801845c:	460f      	mov	r7, r1
 801845e:	e7a6      	b.n	80183ae <_svfiprintf_r+0xc6>
 8018460:	2300      	movs	r3, #0
 8018462:	3701      	adds	r7, #1
 8018464:	9305      	str	r3, [sp, #20]
 8018466:	4619      	mov	r1, r3
 8018468:	250a      	movs	r5, #10
 801846a:	4638      	mov	r0, r7
 801846c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018470:	3a30      	subs	r2, #48	; 0x30
 8018472:	2a09      	cmp	r2, #9
 8018474:	d903      	bls.n	801847e <_svfiprintf_r+0x196>
 8018476:	2b00      	cmp	r3, #0
 8018478:	d0c8      	beq.n	801840c <_svfiprintf_r+0x124>
 801847a:	9105      	str	r1, [sp, #20]
 801847c:	e7c6      	b.n	801840c <_svfiprintf_r+0x124>
 801847e:	fb05 2101 	mla	r1, r5, r1, r2
 8018482:	2301      	movs	r3, #1
 8018484:	4607      	mov	r7, r0
 8018486:	e7f0      	b.n	801846a <_svfiprintf_r+0x182>
 8018488:	ab03      	add	r3, sp, #12
 801848a:	9300      	str	r3, [sp, #0]
 801848c:	4622      	mov	r2, r4
 801848e:	4b11      	ldr	r3, [pc, #68]	; (80184d4 <_svfiprintf_r+0x1ec>)
 8018490:	a904      	add	r1, sp, #16
 8018492:	4640      	mov	r0, r8
 8018494:	f7fc fb5e 	bl	8014b54 <_printf_float>
 8018498:	f1b0 3fff 	cmp.w	r0, #4294967295
 801849c:	4681      	mov	r9, r0
 801849e:	d1d6      	bne.n	801844e <_svfiprintf_r+0x166>
 80184a0:	89a3      	ldrh	r3, [r4, #12]
 80184a2:	065b      	lsls	r3, r3, #25
 80184a4:	f53f af35 	bmi.w	8018312 <_svfiprintf_r+0x2a>
 80184a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184aa:	b01d      	add	sp, #116	; 0x74
 80184ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184b0:	ab03      	add	r3, sp, #12
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	4622      	mov	r2, r4
 80184b6:	4b07      	ldr	r3, [pc, #28]	; (80184d4 <_svfiprintf_r+0x1ec>)
 80184b8:	a904      	add	r1, sp, #16
 80184ba:	4640      	mov	r0, r8
 80184bc:	f7fc fe00 	bl	80150c0 <_printf_i>
 80184c0:	e7ea      	b.n	8018498 <_svfiprintf_r+0x1b0>
 80184c2:	bf00      	nop
 80184c4:	0801947c 	.word	0x0801947c
 80184c8:	08019482 	.word	0x08019482
 80184cc:	08019486 	.word	0x08019486
 80184d0:	08014b55 	.word	0x08014b55
 80184d4:	08018235 	.word	0x08018235

080184d8 <_sungetc_r>:
 80184d8:	b538      	push	{r3, r4, r5, lr}
 80184da:	1c4b      	adds	r3, r1, #1
 80184dc:	4614      	mov	r4, r2
 80184de:	d103      	bne.n	80184e8 <_sungetc_r+0x10>
 80184e0:	f04f 35ff 	mov.w	r5, #4294967295
 80184e4:	4628      	mov	r0, r5
 80184e6:	bd38      	pop	{r3, r4, r5, pc}
 80184e8:	8993      	ldrh	r3, [r2, #12]
 80184ea:	f023 0320 	bic.w	r3, r3, #32
 80184ee:	8193      	strh	r3, [r2, #12]
 80184f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184f2:	6852      	ldr	r2, [r2, #4]
 80184f4:	b2cd      	uxtb	r5, r1
 80184f6:	b18b      	cbz	r3, 801851c <_sungetc_r+0x44>
 80184f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80184fa:	4293      	cmp	r3, r2
 80184fc:	dd08      	ble.n	8018510 <_sungetc_r+0x38>
 80184fe:	6823      	ldr	r3, [r4, #0]
 8018500:	1e5a      	subs	r2, r3, #1
 8018502:	6022      	str	r2, [r4, #0]
 8018504:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018508:	6863      	ldr	r3, [r4, #4]
 801850a:	3301      	adds	r3, #1
 801850c:	6063      	str	r3, [r4, #4]
 801850e:	e7e9      	b.n	80184e4 <_sungetc_r+0xc>
 8018510:	4621      	mov	r1, r4
 8018512:	f000 fbc3 	bl	8018c9c <__submore>
 8018516:	2800      	cmp	r0, #0
 8018518:	d0f1      	beq.n	80184fe <_sungetc_r+0x26>
 801851a:	e7e1      	b.n	80184e0 <_sungetc_r+0x8>
 801851c:	6921      	ldr	r1, [r4, #16]
 801851e:	6823      	ldr	r3, [r4, #0]
 8018520:	b151      	cbz	r1, 8018538 <_sungetc_r+0x60>
 8018522:	4299      	cmp	r1, r3
 8018524:	d208      	bcs.n	8018538 <_sungetc_r+0x60>
 8018526:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801852a:	42a9      	cmp	r1, r5
 801852c:	d104      	bne.n	8018538 <_sungetc_r+0x60>
 801852e:	3b01      	subs	r3, #1
 8018530:	3201      	adds	r2, #1
 8018532:	6023      	str	r3, [r4, #0]
 8018534:	6062      	str	r2, [r4, #4]
 8018536:	e7d5      	b.n	80184e4 <_sungetc_r+0xc>
 8018538:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801853c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018540:	6363      	str	r3, [r4, #52]	; 0x34
 8018542:	2303      	movs	r3, #3
 8018544:	63a3      	str	r3, [r4, #56]	; 0x38
 8018546:	4623      	mov	r3, r4
 8018548:	f803 5f46 	strb.w	r5, [r3, #70]!
 801854c:	6023      	str	r3, [r4, #0]
 801854e:	2301      	movs	r3, #1
 8018550:	e7dc      	b.n	801850c <_sungetc_r+0x34>

08018552 <__ssrefill_r>:
 8018552:	b510      	push	{r4, lr}
 8018554:	460c      	mov	r4, r1
 8018556:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018558:	b169      	cbz	r1, 8018576 <__ssrefill_r+0x24>
 801855a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801855e:	4299      	cmp	r1, r3
 8018560:	d001      	beq.n	8018566 <__ssrefill_r+0x14>
 8018562:	f7ff fdbf 	bl	80180e4 <_free_r>
 8018566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018568:	6063      	str	r3, [r4, #4]
 801856a:	2000      	movs	r0, #0
 801856c:	6360      	str	r0, [r4, #52]	; 0x34
 801856e:	b113      	cbz	r3, 8018576 <__ssrefill_r+0x24>
 8018570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018572:	6023      	str	r3, [r4, #0]
 8018574:	bd10      	pop	{r4, pc}
 8018576:	6923      	ldr	r3, [r4, #16]
 8018578:	6023      	str	r3, [r4, #0]
 801857a:	2300      	movs	r3, #0
 801857c:	6063      	str	r3, [r4, #4]
 801857e:	89a3      	ldrh	r3, [r4, #12]
 8018580:	f043 0320 	orr.w	r3, r3, #32
 8018584:	81a3      	strh	r3, [r4, #12]
 8018586:	f04f 30ff 	mov.w	r0, #4294967295
 801858a:	e7f3      	b.n	8018574 <__ssrefill_r+0x22>

0801858c <__ssvfiscanf_r>:
 801858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018590:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018594:	460c      	mov	r4, r1
 8018596:	2100      	movs	r1, #0
 8018598:	9144      	str	r1, [sp, #272]	; 0x110
 801859a:	9145      	str	r1, [sp, #276]	; 0x114
 801859c:	499f      	ldr	r1, [pc, #636]	; (801881c <__ssvfiscanf_r+0x290>)
 801859e:	91a0      	str	r1, [sp, #640]	; 0x280
 80185a0:	f10d 0804 	add.w	r8, sp, #4
 80185a4:	499e      	ldr	r1, [pc, #632]	; (8018820 <__ssvfiscanf_r+0x294>)
 80185a6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018824 <__ssvfiscanf_r+0x298>
 80185aa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80185ae:	4606      	mov	r6, r0
 80185b0:	4692      	mov	sl, r2
 80185b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80185b4:	9300      	str	r3, [sp, #0]
 80185b6:	270a      	movs	r7, #10
 80185b8:	f89a 3000 	ldrb.w	r3, [sl]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f000 812a 	beq.w	8018816 <__ssvfiscanf_r+0x28a>
 80185c2:	4655      	mov	r5, sl
 80185c4:	f7ff f93e 	bl	8017844 <__locale_ctype_ptr>
 80185c8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80185cc:	4458      	add	r0, fp
 80185ce:	7843      	ldrb	r3, [r0, #1]
 80185d0:	f013 0308 	ands.w	r3, r3, #8
 80185d4:	d01c      	beq.n	8018610 <__ssvfiscanf_r+0x84>
 80185d6:	6863      	ldr	r3, [r4, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	dd12      	ble.n	8018602 <__ssvfiscanf_r+0x76>
 80185dc:	f7ff f932 	bl	8017844 <__locale_ctype_ptr>
 80185e0:	6823      	ldr	r3, [r4, #0]
 80185e2:	781a      	ldrb	r2, [r3, #0]
 80185e4:	4410      	add	r0, r2
 80185e6:	7842      	ldrb	r2, [r0, #1]
 80185e8:	0712      	lsls	r2, r2, #28
 80185ea:	d401      	bmi.n	80185f0 <__ssvfiscanf_r+0x64>
 80185ec:	46aa      	mov	sl, r5
 80185ee:	e7e3      	b.n	80185b8 <__ssvfiscanf_r+0x2c>
 80185f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80185f2:	3201      	adds	r2, #1
 80185f4:	9245      	str	r2, [sp, #276]	; 0x114
 80185f6:	6862      	ldr	r2, [r4, #4]
 80185f8:	3301      	adds	r3, #1
 80185fa:	3a01      	subs	r2, #1
 80185fc:	6062      	str	r2, [r4, #4]
 80185fe:	6023      	str	r3, [r4, #0]
 8018600:	e7e9      	b.n	80185d6 <__ssvfiscanf_r+0x4a>
 8018602:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018604:	4621      	mov	r1, r4
 8018606:	4630      	mov	r0, r6
 8018608:	4798      	blx	r3
 801860a:	2800      	cmp	r0, #0
 801860c:	d0e6      	beq.n	80185dc <__ssvfiscanf_r+0x50>
 801860e:	e7ed      	b.n	80185ec <__ssvfiscanf_r+0x60>
 8018610:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018614:	f040 8082 	bne.w	801871c <__ssvfiscanf_r+0x190>
 8018618:	9343      	str	r3, [sp, #268]	; 0x10c
 801861a:	9341      	str	r3, [sp, #260]	; 0x104
 801861c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018620:	2b2a      	cmp	r3, #42	; 0x2a
 8018622:	d103      	bne.n	801862c <__ssvfiscanf_r+0xa0>
 8018624:	2310      	movs	r3, #16
 8018626:	9341      	str	r3, [sp, #260]	; 0x104
 8018628:	f10a 0502 	add.w	r5, sl, #2
 801862c:	46aa      	mov	sl, r5
 801862e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018632:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018636:	2a09      	cmp	r2, #9
 8018638:	d922      	bls.n	8018680 <__ssvfiscanf_r+0xf4>
 801863a:	2203      	movs	r2, #3
 801863c:	4879      	ldr	r0, [pc, #484]	; (8018824 <__ssvfiscanf_r+0x298>)
 801863e:	f7e7 fde7 	bl	8000210 <memchr>
 8018642:	b138      	cbz	r0, 8018654 <__ssvfiscanf_r+0xc8>
 8018644:	eba0 0309 	sub.w	r3, r0, r9
 8018648:	2001      	movs	r0, #1
 801864a:	4098      	lsls	r0, r3
 801864c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801864e:	4318      	orrs	r0, r3
 8018650:	9041      	str	r0, [sp, #260]	; 0x104
 8018652:	46aa      	mov	sl, r5
 8018654:	f89a 3000 	ldrb.w	r3, [sl]
 8018658:	2b67      	cmp	r3, #103	; 0x67
 801865a:	f10a 0501 	add.w	r5, sl, #1
 801865e:	d82b      	bhi.n	80186b8 <__ssvfiscanf_r+0x12c>
 8018660:	2b65      	cmp	r3, #101	; 0x65
 8018662:	f080 809f 	bcs.w	80187a4 <__ssvfiscanf_r+0x218>
 8018666:	2b47      	cmp	r3, #71	; 0x47
 8018668:	d810      	bhi.n	801868c <__ssvfiscanf_r+0x100>
 801866a:	2b45      	cmp	r3, #69	; 0x45
 801866c:	f080 809a 	bcs.w	80187a4 <__ssvfiscanf_r+0x218>
 8018670:	2b00      	cmp	r3, #0
 8018672:	d06c      	beq.n	801874e <__ssvfiscanf_r+0x1c2>
 8018674:	2b25      	cmp	r3, #37	; 0x25
 8018676:	d051      	beq.n	801871c <__ssvfiscanf_r+0x190>
 8018678:	2303      	movs	r3, #3
 801867a:	9347      	str	r3, [sp, #284]	; 0x11c
 801867c:	9742      	str	r7, [sp, #264]	; 0x108
 801867e:	e027      	b.n	80186d0 <__ssvfiscanf_r+0x144>
 8018680:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018682:	fb07 1303 	mla	r3, r7, r3, r1
 8018686:	3b30      	subs	r3, #48	; 0x30
 8018688:	9343      	str	r3, [sp, #268]	; 0x10c
 801868a:	e7cf      	b.n	801862c <__ssvfiscanf_r+0xa0>
 801868c:	2b5b      	cmp	r3, #91	; 0x5b
 801868e:	d06a      	beq.n	8018766 <__ssvfiscanf_r+0x1da>
 8018690:	d80c      	bhi.n	80186ac <__ssvfiscanf_r+0x120>
 8018692:	2b58      	cmp	r3, #88	; 0x58
 8018694:	d1f0      	bne.n	8018678 <__ssvfiscanf_r+0xec>
 8018696:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801869c:	9241      	str	r2, [sp, #260]	; 0x104
 801869e:	2210      	movs	r2, #16
 80186a0:	9242      	str	r2, [sp, #264]	; 0x108
 80186a2:	2b6e      	cmp	r3, #110	; 0x6e
 80186a4:	bf8c      	ite	hi
 80186a6:	2304      	movhi	r3, #4
 80186a8:	2303      	movls	r3, #3
 80186aa:	e010      	b.n	80186ce <__ssvfiscanf_r+0x142>
 80186ac:	2b63      	cmp	r3, #99	; 0x63
 80186ae:	d065      	beq.n	801877c <__ssvfiscanf_r+0x1f0>
 80186b0:	2b64      	cmp	r3, #100	; 0x64
 80186b2:	d1e1      	bne.n	8018678 <__ssvfiscanf_r+0xec>
 80186b4:	9742      	str	r7, [sp, #264]	; 0x108
 80186b6:	e7f4      	b.n	80186a2 <__ssvfiscanf_r+0x116>
 80186b8:	2b70      	cmp	r3, #112	; 0x70
 80186ba:	d04b      	beq.n	8018754 <__ssvfiscanf_r+0x1c8>
 80186bc:	d826      	bhi.n	801870c <__ssvfiscanf_r+0x180>
 80186be:	2b6e      	cmp	r3, #110	; 0x6e
 80186c0:	d062      	beq.n	8018788 <__ssvfiscanf_r+0x1fc>
 80186c2:	d84c      	bhi.n	801875e <__ssvfiscanf_r+0x1d2>
 80186c4:	2b69      	cmp	r3, #105	; 0x69
 80186c6:	d1d7      	bne.n	8018678 <__ssvfiscanf_r+0xec>
 80186c8:	2300      	movs	r3, #0
 80186ca:	9342      	str	r3, [sp, #264]	; 0x108
 80186cc:	2303      	movs	r3, #3
 80186ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80186d0:	6863      	ldr	r3, [r4, #4]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	dd68      	ble.n	80187a8 <__ssvfiscanf_r+0x21c>
 80186d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186d8:	0659      	lsls	r1, r3, #25
 80186da:	d407      	bmi.n	80186ec <__ssvfiscanf_r+0x160>
 80186dc:	f7ff f8b2 	bl	8017844 <__locale_ctype_ptr>
 80186e0:	6823      	ldr	r3, [r4, #0]
 80186e2:	781a      	ldrb	r2, [r3, #0]
 80186e4:	4410      	add	r0, r2
 80186e6:	7842      	ldrb	r2, [r0, #1]
 80186e8:	0712      	lsls	r2, r2, #28
 80186ea:	d464      	bmi.n	80187b6 <__ssvfiscanf_r+0x22a>
 80186ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80186ee:	2b02      	cmp	r3, #2
 80186f0:	dc73      	bgt.n	80187da <__ssvfiscanf_r+0x24e>
 80186f2:	466b      	mov	r3, sp
 80186f4:	4622      	mov	r2, r4
 80186f6:	a941      	add	r1, sp, #260	; 0x104
 80186f8:	4630      	mov	r0, r6
 80186fa:	f000 f897 	bl	801882c <_scanf_chars>
 80186fe:	2801      	cmp	r0, #1
 8018700:	f000 8089 	beq.w	8018816 <__ssvfiscanf_r+0x28a>
 8018704:	2802      	cmp	r0, #2
 8018706:	f47f af71 	bne.w	80185ec <__ssvfiscanf_r+0x60>
 801870a:	e01d      	b.n	8018748 <__ssvfiscanf_r+0x1bc>
 801870c:	2b75      	cmp	r3, #117	; 0x75
 801870e:	d0d1      	beq.n	80186b4 <__ssvfiscanf_r+0x128>
 8018710:	2b78      	cmp	r3, #120	; 0x78
 8018712:	d0c0      	beq.n	8018696 <__ssvfiscanf_r+0x10a>
 8018714:	2b73      	cmp	r3, #115	; 0x73
 8018716:	d1af      	bne.n	8018678 <__ssvfiscanf_r+0xec>
 8018718:	2302      	movs	r3, #2
 801871a:	e7d8      	b.n	80186ce <__ssvfiscanf_r+0x142>
 801871c:	6863      	ldr	r3, [r4, #4]
 801871e:	2b00      	cmp	r3, #0
 8018720:	dd0c      	ble.n	801873c <__ssvfiscanf_r+0x1b0>
 8018722:	6823      	ldr	r3, [r4, #0]
 8018724:	781a      	ldrb	r2, [r3, #0]
 8018726:	455a      	cmp	r2, fp
 8018728:	d175      	bne.n	8018816 <__ssvfiscanf_r+0x28a>
 801872a:	3301      	adds	r3, #1
 801872c:	6862      	ldr	r2, [r4, #4]
 801872e:	6023      	str	r3, [r4, #0]
 8018730:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018732:	3a01      	subs	r2, #1
 8018734:	3301      	adds	r3, #1
 8018736:	6062      	str	r2, [r4, #4]
 8018738:	9345      	str	r3, [sp, #276]	; 0x114
 801873a:	e757      	b.n	80185ec <__ssvfiscanf_r+0x60>
 801873c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801873e:	4621      	mov	r1, r4
 8018740:	4630      	mov	r0, r6
 8018742:	4798      	blx	r3
 8018744:	2800      	cmp	r0, #0
 8018746:	d0ec      	beq.n	8018722 <__ssvfiscanf_r+0x196>
 8018748:	9844      	ldr	r0, [sp, #272]	; 0x110
 801874a:	2800      	cmp	r0, #0
 801874c:	d159      	bne.n	8018802 <__ssvfiscanf_r+0x276>
 801874e:	f04f 30ff 	mov.w	r0, #4294967295
 8018752:	e05c      	b.n	801880e <__ssvfiscanf_r+0x282>
 8018754:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018756:	f042 0220 	orr.w	r2, r2, #32
 801875a:	9241      	str	r2, [sp, #260]	; 0x104
 801875c:	e79b      	b.n	8018696 <__ssvfiscanf_r+0x10a>
 801875e:	2308      	movs	r3, #8
 8018760:	9342      	str	r3, [sp, #264]	; 0x108
 8018762:	2304      	movs	r3, #4
 8018764:	e7b3      	b.n	80186ce <__ssvfiscanf_r+0x142>
 8018766:	4629      	mov	r1, r5
 8018768:	4640      	mov	r0, r8
 801876a:	f000 f9c7 	bl	8018afc <__sccl>
 801876e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018774:	9341      	str	r3, [sp, #260]	; 0x104
 8018776:	4605      	mov	r5, r0
 8018778:	2301      	movs	r3, #1
 801877a:	e7a8      	b.n	80186ce <__ssvfiscanf_r+0x142>
 801877c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801877e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018782:	9341      	str	r3, [sp, #260]	; 0x104
 8018784:	2300      	movs	r3, #0
 8018786:	e7a2      	b.n	80186ce <__ssvfiscanf_r+0x142>
 8018788:	9841      	ldr	r0, [sp, #260]	; 0x104
 801878a:	06c3      	lsls	r3, r0, #27
 801878c:	f53f af2e 	bmi.w	80185ec <__ssvfiscanf_r+0x60>
 8018790:	9b00      	ldr	r3, [sp, #0]
 8018792:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018794:	1d19      	adds	r1, r3, #4
 8018796:	9100      	str	r1, [sp, #0]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	07c0      	lsls	r0, r0, #31
 801879c:	bf4c      	ite	mi
 801879e:	801a      	strhmi	r2, [r3, #0]
 80187a0:	601a      	strpl	r2, [r3, #0]
 80187a2:	e723      	b.n	80185ec <__ssvfiscanf_r+0x60>
 80187a4:	2305      	movs	r3, #5
 80187a6:	e792      	b.n	80186ce <__ssvfiscanf_r+0x142>
 80187a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80187aa:	4621      	mov	r1, r4
 80187ac:	4630      	mov	r0, r6
 80187ae:	4798      	blx	r3
 80187b0:	2800      	cmp	r0, #0
 80187b2:	d090      	beq.n	80186d6 <__ssvfiscanf_r+0x14a>
 80187b4:	e7c8      	b.n	8018748 <__ssvfiscanf_r+0x1bc>
 80187b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80187b8:	3201      	adds	r2, #1
 80187ba:	9245      	str	r2, [sp, #276]	; 0x114
 80187bc:	6862      	ldr	r2, [r4, #4]
 80187be:	3a01      	subs	r2, #1
 80187c0:	2a00      	cmp	r2, #0
 80187c2:	6062      	str	r2, [r4, #4]
 80187c4:	dd02      	ble.n	80187cc <__ssvfiscanf_r+0x240>
 80187c6:	3301      	adds	r3, #1
 80187c8:	6023      	str	r3, [r4, #0]
 80187ca:	e787      	b.n	80186dc <__ssvfiscanf_r+0x150>
 80187cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80187ce:	4621      	mov	r1, r4
 80187d0:	4630      	mov	r0, r6
 80187d2:	4798      	blx	r3
 80187d4:	2800      	cmp	r0, #0
 80187d6:	d081      	beq.n	80186dc <__ssvfiscanf_r+0x150>
 80187d8:	e7b6      	b.n	8018748 <__ssvfiscanf_r+0x1bc>
 80187da:	2b04      	cmp	r3, #4
 80187dc:	dc06      	bgt.n	80187ec <__ssvfiscanf_r+0x260>
 80187de:	466b      	mov	r3, sp
 80187e0:	4622      	mov	r2, r4
 80187e2:	a941      	add	r1, sp, #260	; 0x104
 80187e4:	4630      	mov	r0, r6
 80187e6:	f000 f885 	bl	80188f4 <_scanf_i>
 80187ea:	e788      	b.n	80186fe <__ssvfiscanf_r+0x172>
 80187ec:	4b0e      	ldr	r3, [pc, #56]	; (8018828 <__ssvfiscanf_r+0x29c>)
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	f43f aefc 	beq.w	80185ec <__ssvfiscanf_r+0x60>
 80187f4:	466b      	mov	r3, sp
 80187f6:	4622      	mov	r2, r4
 80187f8:	a941      	add	r1, sp, #260	; 0x104
 80187fa:	4630      	mov	r0, r6
 80187fc:	f7fc fd72 	bl	80152e4 <_scanf_float>
 8018800:	e77d      	b.n	80186fe <__ssvfiscanf_r+0x172>
 8018802:	89a3      	ldrh	r3, [r4, #12]
 8018804:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018808:	bf18      	it	ne
 801880a:	f04f 30ff 	movne.w	r0, #4294967295
 801880e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018816:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018818:	e7f9      	b.n	801880e <__ssvfiscanf_r+0x282>
 801881a:	bf00      	nop
 801881c:	080184d9 	.word	0x080184d9
 8018820:	08018553 	.word	0x08018553
 8018824:	08019482 	.word	0x08019482
 8018828:	080152e5 	.word	0x080152e5

0801882c <_scanf_chars>:
 801882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018830:	4615      	mov	r5, r2
 8018832:	688a      	ldr	r2, [r1, #8]
 8018834:	4680      	mov	r8, r0
 8018836:	460c      	mov	r4, r1
 8018838:	b932      	cbnz	r2, 8018848 <_scanf_chars+0x1c>
 801883a:	698a      	ldr	r2, [r1, #24]
 801883c:	2a00      	cmp	r2, #0
 801883e:	bf14      	ite	ne
 8018840:	f04f 32ff 	movne.w	r2, #4294967295
 8018844:	2201      	moveq	r2, #1
 8018846:	608a      	str	r2, [r1, #8]
 8018848:	6822      	ldr	r2, [r4, #0]
 801884a:	06d1      	lsls	r1, r2, #27
 801884c:	bf5f      	itttt	pl
 801884e:	681a      	ldrpl	r2, [r3, #0]
 8018850:	1d11      	addpl	r1, r2, #4
 8018852:	6019      	strpl	r1, [r3, #0]
 8018854:	6817      	ldrpl	r7, [r2, #0]
 8018856:	2600      	movs	r6, #0
 8018858:	69a3      	ldr	r3, [r4, #24]
 801885a:	b1db      	cbz	r3, 8018894 <_scanf_chars+0x68>
 801885c:	2b01      	cmp	r3, #1
 801885e:	d107      	bne.n	8018870 <_scanf_chars+0x44>
 8018860:	682b      	ldr	r3, [r5, #0]
 8018862:	6962      	ldr	r2, [r4, #20]
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	5cd3      	ldrb	r3, [r2, r3]
 8018868:	b9a3      	cbnz	r3, 8018894 <_scanf_chars+0x68>
 801886a:	2e00      	cmp	r6, #0
 801886c:	d132      	bne.n	80188d4 <_scanf_chars+0xa8>
 801886e:	e006      	b.n	801887e <_scanf_chars+0x52>
 8018870:	2b02      	cmp	r3, #2
 8018872:	d007      	beq.n	8018884 <_scanf_chars+0x58>
 8018874:	2e00      	cmp	r6, #0
 8018876:	d12d      	bne.n	80188d4 <_scanf_chars+0xa8>
 8018878:	69a3      	ldr	r3, [r4, #24]
 801887a:	2b01      	cmp	r3, #1
 801887c:	d12a      	bne.n	80188d4 <_scanf_chars+0xa8>
 801887e:	2001      	movs	r0, #1
 8018880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018884:	f7fe ffde 	bl	8017844 <__locale_ctype_ptr>
 8018888:	682b      	ldr	r3, [r5, #0]
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	4418      	add	r0, r3
 801888e:	7843      	ldrb	r3, [r0, #1]
 8018890:	071b      	lsls	r3, r3, #28
 8018892:	d4ef      	bmi.n	8018874 <_scanf_chars+0x48>
 8018894:	6823      	ldr	r3, [r4, #0]
 8018896:	06da      	lsls	r2, r3, #27
 8018898:	bf5e      	ittt	pl
 801889a:	682b      	ldrpl	r3, [r5, #0]
 801889c:	781b      	ldrbpl	r3, [r3, #0]
 801889e:	703b      	strbpl	r3, [r7, #0]
 80188a0:	682a      	ldr	r2, [r5, #0]
 80188a2:	686b      	ldr	r3, [r5, #4]
 80188a4:	f102 0201 	add.w	r2, r2, #1
 80188a8:	602a      	str	r2, [r5, #0]
 80188aa:	68a2      	ldr	r2, [r4, #8]
 80188ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80188b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80188b4:	606b      	str	r3, [r5, #4]
 80188b6:	f106 0601 	add.w	r6, r6, #1
 80188ba:	bf58      	it	pl
 80188bc:	3701      	addpl	r7, #1
 80188be:	60a2      	str	r2, [r4, #8]
 80188c0:	b142      	cbz	r2, 80188d4 <_scanf_chars+0xa8>
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	dcc8      	bgt.n	8018858 <_scanf_chars+0x2c>
 80188c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80188ca:	4629      	mov	r1, r5
 80188cc:	4640      	mov	r0, r8
 80188ce:	4798      	blx	r3
 80188d0:	2800      	cmp	r0, #0
 80188d2:	d0c1      	beq.n	8018858 <_scanf_chars+0x2c>
 80188d4:	6823      	ldr	r3, [r4, #0]
 80188d6:	f013 0310 	ands.w	r3, r3, #16
 80188da:	d105      	bne.n	80188e8 <_scanf_chars+0xbc>
 80188dc:	68e2      	ldr	r2, [r4, #12]
 80188de:	3201      	adds	r2, #1
 80188e0:	60e2      	str	r2, [r4, #12]
 80188e2:	69a2      	ldr	r2, [r4, #24]
 80188e4:	b102      	cbz	r2, 80188e8 <_scanf_chars+0xbc>
 80188e6:	703b      	strb	r3, [r7, #0]
 80188e8:	6923      	ldr	r3, [r4, #16]
 80188ea:	441e      	add	r6, r3
 80188ec:	6126      	str	r6, [r4, #16]
 80188ee:	2000      	movs	r0, #0
 80188f0:	e7c6      	b.n	8018880 <_scanf_chars+0x54>
	...

080188f4 <_scanf_i>:
 80188f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f8:	469a      	mov	sl, r3
 80188fa:	4b74      	ldr	r3, [pc, #464]	; (8018acc <_scanf_i+0x1d8>)
 80188fc:	460c      	mov	r4, r1
 80188fe:	4683      	mov	fp, r0
 8018900:	4616      	mov	r6, r2
 8018902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018906:	b087      	sub	sp, #28
 8018908:	ab03      	add	r3, sp, #12
 801890a:	68a7      	ldr	r7, [r4, #8]
 801890c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018910:	4b6f      	ldr	r3, [pc, #444]	; (8018ad0 <_scanf_i+0x1dc>)
 8018912:	69a1      	ldr	r1, [r4, #24]
 8018914:	4a6f      	ldr	r2, [pc, #444]	; (8018ad4 <_scanf_i+0x1e0>)
 8018916:	2903      	cmp	r1, #3
 8018918:	bf08      	it	eq
 801891a:	461a      	moveq	r2, r3
 801891c:	1e7b      	subs	r3, r7, #1
 801891e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018922:	bf84      	itt	hi
 8018924:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018928:	60a3      	strhi	r3, [r4, #8]
 801892a:	6823      	ldr	r3, [r4, #0]
 801892c:	9200      	str	r2, [sp, #0]
 801892e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018932:	bf88      	it	hi
 8018934:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018938:	f104 091c 	add.w	r9, r4, #28
 801893c:	6023      	str	r3, [r4, #0]
 801893e:	bf8c      	ite	hi
 8018940:	197f      	addhi	r7, r7, r5
 8018942:	2700      	movls	r7, #0
 8018944:	464b      	mov	r3, r9
 8018946:	f04f 0800 	mov.w	r8, #0
 801894a:	9301      	str	r3, [sp, #4]
 801894c:	6831      	ldr	r1, [r6, #0]
 801894e:	ab03      	add	r3, sp, #12
 8018950:	2202      	movs	r2, #2
 8018952:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018956:	7809      	ldrb	r1, [r1, #0]
 8018958:	f7e7 fc5a 	bl	8000210 <memchr>
 801895c:	9b01      	ldr	r3, [sp, #4]
 801895e:	b330      	cbz	r0, 80189ae <_scanf_i+0xba>
 8018960:	f1b8 0f01 	cmp.w	r8, #1
 8018964:	d15a      	bne.n	8018a1c <_scanf_i+0x128>
 8018966:	6862      	ldr	r2, [r4, #4]
 8018968:	b92a      	cbnz	r2, 8018976 <_scanf_i+0x82>
 801896a:	6822      	ldr	r2, [r4, #0]
 801896c:	2108      	movs	r1, #8
 801896e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018972:	6061      	str	r1, [r4, #4]
 8018974:	6022      	str	r2, [r4, #0]
 8018976:	6822      	ldr	r2, [r4, #0]
 8018978:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801897c:	6022      	str	r2, [r4, #0]
 801897e:	68a2      	ldr	r2, [r4, #8]
 8018980:	1e51      	subs	r1, r2, #1
 8018982:	60a1      	str	r1, [r4, #8]
 8018984:	b19a      	cbz	r2, 80189ae <_scanf_i+0xba>
 8018986:	6832      	ldr	r2, [r6, #0]
 8018988:	1c51      	adds	r1, r2, #1
 801898a:	6031      	str	r1, [r6, #0]
 801898c:	7812      	ldrb	r2, [r2, #0]
 801898e:	701a      	strb	r2, [r3, #0]
 8018990:	1c5d      	adds	r5, r3, #1
 8018992:	6873      	ldr	r3, [r6, #4]
 8018994:	3b01      	subs	r3, #1
 8018996:	2b00      	cmp	r3, #0
 8018998:	6073      	str	r3, [r6, #4]
 801899a:	dc07      	bgt.n	80189ac <_scanf_i+0xb8>
 801899c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80189a0:	4631      	mov	r1, r6
 80189a2:	4658      	mov	r0, fp
 80189a4:	4798      	blx	r3
 80189a6:	2800      	cmp	r0, #0
 80189a8:	f040 8086 	bne.w	8018ab8 <_scanf_i+0x1c4>
 80189ac:	462b      	mov	r3, r5
 80189ae:	f108 0801 	add.w	r8, r8, #1
 80189b2:	f1b8 0f03 	cmp.w	r8, #3
 80189b6:	d1c8      	bne.n	801894a <_scanf_i+0x56>
 80189b8:	6862      	ldr	r2, [r4, #4]
 80189ba:	b90a      	cbnz	r2, 80189c0 <_scanf_i+0xcc>
 80189bc:	220a      	movs	r2, #10
 80189be:	6062      	str	r2, [r4, #4]
 80189c0:	6862      	ldr	r2, [r4, #4]
 80189c2:	4945      	ldr	r1, [pc, #276]	; (8018ad8 <_scanf_i+0x1e4>)
 80189c4:	6960      	ldr	r0, [r4, #20]
 80189c6:	9301      	str	r3, [sp, #4]
 80189c8:	1a89      	subs	r1, r1, r2
 80189ca:	f000 f897 	bl	8018afc <__sccl>
 80189ce:	9b01      	ldr	r3, [sp, #4]
 80189d0:	f04f 0800 	mov.w	r8, #0
 80189d4:	461d      	mov	r5, r3
 80189d6:	68a3      	ldr	r3, [r4, #8]
 80189d8:	6822      	ldr	r2, [r4, #0]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d03a      	beq.n	8018a54 <_scanf_i+0x160>
 80189de:	6831      	ldr	r1, [r6, #0]
 80189e0:	6960      	ldr	r0, [r4, #20]
 80189e2:	f891 c000 	ldrb.w	ip, [r1]
 80189e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d032      	beq.n	8018a54 <_scanf_i+0x160>
 80189ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80189f2:	d121      	bne.n	8018a38 <_scanf_i+0x144>
 80189f4:	0510      	lsls	r0, r2, #20
 80189f6:	d51f      	bpl.n	8018a38 <_scanf_i+0x144>
 80189f8:	f108 0801 	add.w	r8, r8, #1
 80189fc:	b117      	cbz	r7, 8018a04 <_scanf_i+0x110>
 80189fe:	3301      	adds	r3, #1
 8018a00:	3f01      	subs	r7, #1
 8018a02:	60a3      	str	r3, [r4, #8]
 8018a04:	6873      	ldr	r3, [r6, #4]
 8018a06:	3b01      	subs	r3, #1
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	6073      	str	r3, [r6, #4]
 8018a0c:	dd1b      	ble.n	8018a46 <_scanf_i+0x152>
 8018a0e:	6833      	ldr	r3, [r6, #0]
 8018a10:	3301      	adds	r3, #1
 8018a12:	6033      	str	r3, [r6, #0]
 8018a14:	68a3      	ldr	r3, [r4, #8]
 8018a16:	3b01      	subs	r3, #1
 8018a18:	60a3      	str	r3, [r4, #8]
 8018a1a:	e7dc      	b.n	80189d6 <_scanf_i+0xe2>
 8018a1c:	f1b8 0f02 	cmp.w	r8, #2
 8018a20:	d1ad      	bne.n	801897e <_scanf_i+0x8a>
 8018a22:	6822      	ldr	r2, [r4, #0]
 8018a24:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018a28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018a2c:	d1bf      	bne.n	80189ae <_scanf_i+0xba>
 8018a2e:	2110      	movs	r1, #16
 8018a30:	6061      	str	r1, [r4, #4]
 8018a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018a36:	e7a1      	b.n	801897c <_scanf_i+0x88>
 8018a38:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018a3c:	6022      	str	r2, [r4, #0]
 8018a3e:	780b      	ldrb	r3, [r1, #0]
 8018a40:	702b      	strb	r3, [r5, #0]
 8018a42:	3501      	adds	r5, #1
 8018a44:	e7de      	b.n	8018a04 <_scanf_i+0x110>
 8018a46:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018a4a:	4631      	mov	r1, r6
 8018a4c:	4658      	mov	r0, fp
 8018a4e:	4798      	blx	r3
 8018a50:	2800      	cmp	r0, #0
 8018a52:	d0df      	beq.n	8018a14 <_scanf_i+0x120>
 8018a54:	6823      	ldr	r3, [r4, #0]
 8018a56:	05d9      	lsls	r1, r3, #23
 8018a58:	d50c      	bpl.n	8018a74 <_scanf_i+0x180>
 8018a5a:	454d      	cmp	r5, r9
 8018a5c:	d908      	bls.n	8018a70 <_scanf_i+0x17c>
 8018a5e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018a66:	4632      	mov	r2, r6
 8018a68:	4658      	mov	r0, fp
 8018a6a:	4798      	blx	r3
 8018a6c:	1e6f      	subs	r7, r5, #1
 8018a6e:	463d      	mov	r5, r7
 8018a70:	454d      	cmp	r5, r9
 8018a72:	d029      	beq.n	8018ac8 <_scanf_i+0x1d4>
 8018a74:	6822      	ldr	r2, [r4, #0]
 8018a76:	f012 0210 	ands.w	r2, r2, #16
 8018a7a:	d113      	bne.n	8018aa4 <_scanf_i+0x1b0>
 8018a7c:	702a      	strb	r2, [r5, #0]
 8018a7e:	6863      	ldr	r3, [r4, #4]
 8018a80:	9e00      	ldr	r6, [sp, #0]
 8018a82:	4649      	mov	r1, r9
 8018a84:	4658      	mov	r0, fp
 8018a86:	47b0      	blx	r6
 8018a88:	f8da 3000 	ldr.w	r3, [sl]
 8018a8c:	6821      	ldr	r1, [r4, #0]
 8018a8e:	1d1a      	adds	r2, r3, #4
 8018a90:	f8ca 2000 	str.w	r2, [sl]
 8018a94:	f011 0f20 	tst.w	r1, #32
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	d010      	beq.n	8018abe <_scanf_i+0x1ca>
 8018a9c:	6018      	str	r0, [r3, #0]
 8018a9e:	68e3      	ldr	r3, [r4, #12]
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	60e3      	str	r3, [r4, #12]
 8018aa4:	eba5 0509 	sub.w	r5, r5, r9
 8018aa8:	44a8      	add	r8, r5
 8018aaa:	6925      	ldr	r5, [r4, #16]
 8018aac:	4445      	add	r5, r8
 8018aae:	6125      	str	r5, [r4, #16]
 8018ab0:	2000      	movs	r0, #0
 8018ab2:	b007      	add	sp, #28
 8018ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab8:	f04f 0800 	mov.w	r8, #0
 8018abc:	e7ca      	b.n	8018a54 <_scanf_i+0x160>
 8018abe:	07ca      	lsls	r2, r1, #31
 8018ac0:	bf4c      	ite	mi
 8018ac2:	8018      	strhmi	r0, [r3, #0]
 8018ac4:	6018      	strpl	r0, [r3, #0]
 8018ac6:	e7ea      	b.n	8018a9e <_scanf_i+0x1aa>
 8018ac8:	2001      	movs	r0, #1
 8018aca:	e7f2      	b.n	8018ab2 <_scanf_i+0x1be>
 8018acc:	0801921c 	.word	0x0801921c
 8018ad0:	08016501 	.word	0x08016501
 8018ad4:	08018c79 	.word	0x08018c79
 8018ad8:	0801949d 	.word	0x0801949d

08018adc <_sbrk_r>:
 8018adc:	b538      	push	{r3, r4, r5, lr}
 8018ade:	4c06      	ldr	r4, [pc, #24]	; (8018af8 <_sbrk_r+0x1c>)
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	4605      	mov	r5, r0
 8018ae4:	4608      	mov	r0, r1
 8018ae6:	6023      	str	r3, [r4, #0]
 8018ae8:	f7ee ff4c 	bl	8007984 <_sbrk>
 8018aec:	1c43      	adds	r3, r0, #1
 8018aee:	d102      	bne.n	8018af6 <_sbrk_r+0x1a>
 8018af0:	6823      	ldr	r3, [r4, #0]
 8018af2:	b103      	cbz	r3, 8018af6 <_sbrk_r+0x1a>
 8018af4:	602b      	str	r3, [r5, #0]
 8018af6:	bd38      	pop	{r3, r4, r5, pc}
 8018af8:	20049ca4 	.word	0x20049ca4

08018afc <__sccl>:
 8018afc:	b570      	push	{r4, r5, r6, lr}
 8018afe:	780b      	ldrb	r3, [r1, #0]
 8018b00:	2b5e      	cmp	r3, #94	; 0x5e
 8018b02:	bf13      	iteet	ne
 8018b04:	1c4a      	addne	r2, r1, #1
 8018b06:	1c8a      	addeq	r2, r1, #2
 8018b08:	784b      	ldrbeq	r3, [r1, #1]
 8018b0a:	2100      	movne	r1, #0
 8018b0c:	bf08      	it	eq
 8018b0e:	2101      	moveq	r1, #1
 8018b10:	1e44      	subs	r4, r0, #1
 8018b12:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018b16:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018b1a:	42ac      	cmp	r4, r5
 8018b1c:	d1fb      	bne.n	8018b16 <__sccl+0x1a>
 8018b1e:	b913      	cbnz	r3, 8018b26 <__sccl+0x2a>
 8018b20:	3a01      	subs	r2, #1
 8018b22:	4610      	mov	r0, r2
 8018b24:	bd70      	pop	{r4, r5, r6, pc}
 8018b26:	f081 0401 	eor.w	r4, r1, #1
 8018b2a:	54c4      	strb	r4, [r0, r3]
 8018b2c:	1c51      	adds	r1, r2, #1
 8018b2e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018b32:	2d2d      	cmp	r5, #45	; 0x2d
 8018b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8018b38:	460a      	mov	r2, r1
 8018b3a:	d006      	beq.n	8018b4a <__sccl+0x4e>
 8018b3c:	2d5d      	cmp	r5, #93	; 0x5d
 8018b3e:	d0f0      	beq.n	8018b22 <__sccl+0x26>
 8018b40:	b90d      	cbnz	r5, 8018b46 <__sccl+0x4a>
 8018b42:	4632      	mov	r2, r6
 8018b44:	e7ed      	b.n	8018b22 <__sccl+0x26>
 8018b46:	462b      	mov	r3, r5
 8018b48:	e7ef      	b.n	8018b2a <__sccl+0x2e>
 8018b4a:	780e      	ldrb	r6, [r1, #0]
 8018b4c:	2e5d      	cmp	r6, #93	; 0x5d
 8018b4e:	d0fa      	beq.n	8018b46 <__sccl+0x4a>
 8018b50:	42b3      	cmp	r3, r6
 8018b52:	dcf8      	bgt.n	8018b46 <__sccl+0x4a>
 8018b54:	3301      	adds	r3, #1
 8018b56:	429e      	cmp	r6, r3
 8018b58:	54c4      	strb	r4, [r0, r3]
 8018b5a:	dcfb      	bgt.n	8018b54 <__sccl+0x58>
 8018b5c:	3102      	adds	r1, #2
 8018b5e:	e7e6      	b.n	8018b2e <__sccl+0x32>

08018b60 <strncmp>:
 8018b60:	b510      	push	{r4, lr}
 8018b62:	b16a      	cbz	r2, 8018b80 <strncmp+0x20>
 8018b64:	3901      	subs	r1, #1
 8018b66:	1884      	adds	r4, r0, r2
 8018b68:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018b6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018b70:	4293      	cmp	r3, r2
 8018b72:	d103      	bne.n	8018b7c <strncmp+0x1c>
 8018b74:	42a0      	cmp	r0, r4
 8018b76:	d001      	beq.n	8018b7c <strncmp+0x1c>
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d1f5      	bne.n	8018b68 <strncmp+0x8>
 8018b7c:	1a98      	subs	r0, r3, r2
 8018b7e:	bd10      	pop	{r4, pc}
 8018b80:	4610      	mov	r0, r2
 8018b82:	e7fc      	b.n	8018b7e <strncmp+0x1e>

08018b84 <_strtoul_l.isra.0>:
 8018b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b88:	4680      	mov	r8, r0
 8018b8a:	4689      	mov	r9, r1
 8018b8c:	4692      	mov	sl, r2
 8018b8e:	461e      	mov	r6, r3
 8018b90:	460f      	mov	r7, r1
 8018b92:	463d      	mov	r5, r7
 8018b94:	9808      	ldr	r0, [sp, #32]
 8018b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b9a:	f7fe fe4f 	bl	801783c <__locale_ctype_ptr_l>
 8018b9e:	4420      	add	r0, r4
 8018ba0:	7843      	ldrb	r3, [r0, #1]
 8018ba2:	f013 0308 	ands.w	r3, r3, #8
 8018ba6:	d130      	bne.n	8018c0a <_strtoul_l.isra.0+0x86>
 8018ba8:	2c2d      	cmp	r4, #45	; 0x2d
 8018baa:	d130      	bne.n	8018c0e <_strtoul_l.isra.0+0x8a>
 8018bac:	787c      	ldrb	r4, [r7, #1]
 8018bae:	1cbd      	adds	r5, r7, #2
 8018bb0:	2101      	movs	r1, #1
 8018bb2:	2e00      	cmp	r6, #0
 8018bb4:	d05c      	beq.n	8018c70 <_strtoul_l.isra.0+0xec>
 8018bb6:	2e10      	cmp	r6, #16
 8018bb8:	d109      	bne.n	8018bce <_strtoul_l.isra.0+0x4a>
 8018bba:	2c30      	cmp	r4, #48	; 0x30
 8018bbc:	d107      	bne.n	8018bce <_strtoul_l.isra.0+0x4a>
 8018bbe:	782b      	ldrb	r3, [r5, #0]
 8018bc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018bc4:	2b58      	cmp	r3, #88	; 0x58
 8018bc6:	d14e      	bne.n	8018c66 <_strtoul_l.isra.0+0xe2>
 8018bc8:	786c      	ldrb	r4, [r5, #1]
 8018bca:	2610      	movs	r6, #16
 8018bcc:	3502      	adds	r5, #2
 8018bce:	f04f 32ff 	mov.w	r2, #4294967295
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	fbb2 f2f6 	udiv	r2, r2, r6
 8018bd8:	fb06 fc02 	mul.w	ip, r6, r2
 8018bdc:	ea6f 0c0c 	mvn.w	ip, ip
 8018be0:	4618      	mov	r0, r3
 8018be2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018be6:	2f09      	cmp	r7, #9
 8018be8:	d817      	bhi.n	8018c1a <_strtoul_l.isra.0+0x96>
 8018bea:	463c      	mov	r4, r7
 8018bec:	42a6      	cmp	r6, r4
 8018bee:	dd23      	ble.n	8018c38 <_strtoul_l.isra.0+0xb4>
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	db1e      	blt.n	8018c32 <_strtoul_l.isra.0+0xae>
 8018bf4:	4282      	cmp	r2, r0
 8018bf6:	d31c      	bcc.n	8018c32 <_strtoul_l.isra.0+0xae>
 8018bf8:	d101      	bne.n	8018bfe <_strtoul_l.isra.0+0x7a>
 8018bfa:	45a4      	cmp	ip, r4
 8018bfc:	db19      	blt.n	8018c32 <_strtoul_l.isra.0+0xae>
 8018bfe:	fb00 4006 	mla	r0, r0, r6, r4
 8018c02:	2301      	movs	r3, #1
 8018c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018c08:	e7eb      	b.n	8018be2 <_strtoul_l.isra.0+0x5e>
 8018c0a:	462f      	mov	r7, r5
 8018c0c:	e7c1      	b.n	8018b92 <_strtoul_l.isra.0+0xe>
 8018c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8018c10:	bf04      	itt	eq
 8018c12:	1cbd      	addeq	r5, r7, #2
 8018c14:	787c      	ldrbeq	r4, [r7, #1]
 8018c16:	4619      	mov	r1, r3
 8018c18:	e7cb      	b.n	8018bb2 <_strtoul_l.isra.0+0x2e>
 8018c1a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018c1e:	2f19      	cmp	r7, #25
 8018c20:	d801      	bhi.n	8018c26 <_strtoul_l.isra.0+0xa2>
 8018c22:	3c37      	subs	r4, #55	; 0x37
 8018c24:	e7e2      	b.n	8018bec <_strtoul_l.isra.0+0x68>
 8018c26:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018c2a:	2f19      	cmp	r7, #25
 8018c2c:	d804      	bhi.n	8018c38 <_strtoul_l.isra.0+0xb4>
 8018c2e:	3c57      	subs	r4, #87	; 0x57
 8018c30:	e7dc      	b.n	8018bec <_strtoul_l.isra.0+0x68>
 8018c32:	f04f 33ff 	mov.w	r3, #4294967295
 8018c36:	e7e5      	b.n	8018c04 <_strtoul_l.isra.0+0x80>
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	da09      	bge.n	8018c50 <_strtoul_l.isra.0+0xcc>
 8018c3c:	2322      	movs	r3, #34	; 0x22
 8018c3e:	f8c8 3000 	str.w	r3, [r8]
 8018c42:	f04f 30ff 	mov.w	r0, #4294967295
 8018c46:	f1ba 0f00 	cmp.w	sl, #0
 8018c4a:	d107      	bne.n	8018c5c <_strtoul_l.isra.0+0xd8>
 8018c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c50:	b101      	cbz	r1, 8018c54 <_strtoul_l.isra.0+0xd0>
 8018c52:	4240      	negs	r0, r0
 8018c54:	f1ba 0f00 	cmp.w	sl, #0
 8018c58:	d0f8      	beq.n	8018c4c <_strtoul_l.isra.0+0xc8>
 8018c5a:	b10b      	cbz	r3, 8018c60 <_strtoul_l.isra.0+0xdc>
 8018c5c:	f105 39ff 	add.w	r9, r5, #4294967295
 8018c60:	f8ca 9000 	str.w	r9, [sl]
 8018c64:	e7f2      	b.n	8018c4c <_strtoul_l.isra.0+0xc8>
 8018c66:	2430      	movs	r4, #48	; 0x30
 8018c68:	2e00      	cmp	r6, #0
 8018c6a:	d1b0      	bne.n	8018bce <_strtoul_l.isra.0+0x4a>
 8018c6c:	2608      	movs	r6, #8
 8018c6e:	e7ae      	b.n	8018bce <_strtoul_l.isra.0+0x4a>
 8018c70:	2c30      	cmp	r4, #48	; 0x30
 8018c72:	d0a4      	beq.n	8018bbe <_strtoul_l.isra.0+0x3a>
 8018c74:	260a      	movs	r6, #10
 8018c76:	e7aa      	b.n	8018bce <_strtoul_l.isra.0+0x4a>

08018c78 <_strtoul_r>:
 8018c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c7a:	4c06      	ldr	r4, [pc, #24]	; (8018c94 <_strtoul_r+0x1c>)
 8018c7c:	4d06      	ldr	r5, [pc, #24]	; (8018c98 <_strtoul_r+0x20>)
 8018c7e:	6824      	ldr	r4, [r4, #0]
 8018c80:	6a24      	ldr	r4, [r4, #32]
 8018c82:	2c00      	cmp	r4, #0
 8018c84:	bf08      	it	eq
 8018c86:	462c      	moveq	r4, r5
 8018c88:	9400      	str	r4, [sp, #0]
 8018c8a:	f7ff ff7b 	bl	8018b84 <_strtoul_l.isra.0>
 8018c8e:	b003      	add	sp, #12
 8018c90:	bd30      	pop	{r4, r5, pc}
 8018c92:	bf00      	nop
 8018c94:	2000000c 	.word	0x2000000c
 8018c98:	20000070 	.word	0x20000070

08018c9c <__submore>:
 8018c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ca0:	460c      	mov	r4, r1
 8018ca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ca8:	4299      	cmp	r1, r3
 8018caa:	d11d      	bne.n	8018ce8 <__submore+0x4c>
 8018cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018cb0:	f7ff fa66 	bl	8018180 <_malloc_r>
 8018cb4:	b918      	cbnz	r0, 8018cbe <__submore+0x22>
 8018cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8018cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018cc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8018cc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8018cca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018cce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018cd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018cd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018cda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018cde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018ce2:	6020      	str	r0, [r4, #0]
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	e7e8      	b.n	8018cba <__submore+0x1e>
 8018ce8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018cea:	0077      	lsls	r7, r6, #1
 8018cec:	463a      	mov	r2, r7
 8018cee:	f000 f837 	bl	8018d60 <_realloc_r>
 8018cf2:	4605      	mov	r5, r0
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	d0de      	beq.n	8018cb6 <__submore+0x1a>
 8018cf8:	eb00 0806 	add.w	r8, r0, r6
 8018cfc:	4601      	mov	r1, r0
 8018cfe:	4632      	mov	r2, r6
 8018d00:	4640      	mov	r0, r8
 8018d02:	f7fe fdd7 	bl	80178b4 <memcpy>
 8018d06:	f8c4 8000 	str.w	r8, [r4]
 8018d0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018d0e:	e7e9      	b.n	8018ce4 <__submore+0x48>

08018d10 <__ascii_wctomb>:
 8018d10:	b149      	cbz	r1, 8018d26 <__ascii_wctomb+0x16>
 8018d12:	2aff      	cmp	r2, #255	; 0xff
 8018d14:	bf85      	ittet	hi
 8018d16:	238a      	movhi	r3, #138	; 0x8a
 8018d18:	6003      	strhi	r3, [r0, #0]
 8018d1a:	700a      	strbls	r2, [r1, #0]
 8018d1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018d20:	bf98      	it	ls
 8018d22:	2001      	movls	r0, #1
 8018d24:	4770      	bx	lr
 8018d26:	4608      	mov	r0, r1
 8018d28:	4770      	bx	lr

08018d2a <memmove>:
 8018d2a:	4288      	cmp	r0, r1
 8018d2c:	b510      	push	{r4, lr}
 8018d2e:	eb01 0302 	add.w	r3, r1, r2
 8018d32:	d807      	bhi.n	8018d44 <memmove+0x1a>
 8018d34:	1e42      	subs	r2, r0, #1
 8018d36:	4299      	cmp	r1, r3
 8018d38:	d00a      	beq.n	8018d50 <memmove+0x26>
 8018d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018d42:	e7f8      	b.n	8018d36 <memmove+0xc>
 8018d44:	4283      	cmp	r3, r0
 8018d46:	d9f5      	bls.n	8018d34 <memmove+0xa>
 8018d48:	1881      	adds	r1, r0, r2
 8018d4a:	1ad2      	subs	r2, r2, r3
 8018d4c:	42d3      	cmn	r3, r2
 8018d4e:	d100      	bne.n	8018d52 <memmove+0x28>
 8018d50:	bd10      	pop	{r4, pc}
 8018d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018d5a:	e7f7      	b.n	8018d4c <memmove+0x22>

08018d5c <__malloc_lock>:
 8018d5c:	4770      	bx	lr

08018d5e <__malloc_unlock>:
 8018d5e:	4770      	bx	lr

08018d60 <_realloc_r>:
 8018d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d62:	4607      	mov	r7, r0
 8018d64:	4614      	mov	r4, r2
 8018d66:	460e      	mov	r6, r1
 8018d68:	b921      	cbnz	r1, 8018d74 <_realloc_r+0x14>
 8018d6a:	4611      	mov	r1, r2
 8018d6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d70:	f7ff ba06 	b.w	8018180 <_malloc_r>
 8018d74:	b922      	cbnz	r2, 8018d80 <_realloc_r+0x20>
 8018d76:	f7ff f9b5 	bl	80180e4 <_free_r>
 8018d7a:	4625      	mov	r5, r4
 8018d7c:	4628      	mov	r0, r5
 8018d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d80:	f000 f814 	bl	8018dac <_malloc_usable_size_r>
 8018d84:	42a0      	cmp	r0, r4
 8018d86:	d20f      	bcs.n	8018da8 <_realloc_r+0x48>
 8018d88:	4621      	mov	r1, r4
 8018d8a:	4638      	mov	r0, r7
 8018d8c:	f7ff f9f8 	bl	8018180 <_malloc_r>
 8018d90:	4605      	mov	r5, r0
 8018d92:	2800      	cmp	r0, #0
 8018d94:	d0f2      	beq.n	8018d7c <_realloc_r+0x1c>
 8018d96:	4631      	mov	r1, r6
 8018d98:	4622      	mov	r2, r4
 8018d9a:	f7fe fd8b 	bl	80178b4 <memcpy>
 8018d9e:	4631      	mov	r1, r6
 8018da0:	4638      	mov	r0, r7
 8018da2:	f7ff f99f 	bl	80180e4 <_free_r>
 8018da6:	e7e9      	b.n	8018d7c <_realloc_r+0x1c>
 8018da8:	4635      	mov	r5, r6
 8018daa:	e7e7      	b.n	8018d7c <_realloc_r+0x1c>

08018dac <_malloc_usable_size_r>:
 8018dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018db0:	1f18      	subs	r0, r3, #4
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	bfbc      	itt	lt
 8018db6:	580b      	ldrlt	r3, [r1, r0]
 8018db8:	18c0      	addlt	r0, r0, r3
 8018dba:	4770      	bx	lr

08018dbc <_init>:
 8018dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dbe:	bf00      	nop
 8018dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dc2:	bc08      	pop	{r3}
 8018dc4:	469e      	mov	lr, r3
 8018dc6:	4770      	bx	lr

08018dc8 <_fini>:
 8018dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dca:	bf00      	nop
 8018dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dce:	bc08      	pop	{r3}
 8018dd0:	469e      	mov	lr, r3
 8018dd2:	4770      	bx	lr
