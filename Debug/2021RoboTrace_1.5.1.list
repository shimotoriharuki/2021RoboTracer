
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017458  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08017618  08017618  00027618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017dfc  08017dfc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017dfc  08017dfc  00027dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017e04  08017e04  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017e04  08017e04  00027e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017e0c  08017e0c  00027e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b258  200001e0  08017fec  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003b438  08017fec  0003b438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000356e4  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007602  00000000  00000000  000658f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f8  00000000  00000000  0006cef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e38  00000000  00000000  0006eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036dcd  00000000  00000000  00070e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000247f4  00000000  00000000  000a7bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011025b  00000000  00000000  000cc3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0f4  00000000  00000000  001dc6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017600 	.word	0x08017600

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017600 	.word	0x08017600

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 f9a0 	bl	800831c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20038f2c 	.word	0x20038f2c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 f988 	bl	800831c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20038f2c 	.word	0x20038f2c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 f811 	bl	8008048 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fd78 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fd72 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fd6c 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fd66 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fd60 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fd5a 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 fd54 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fd4e 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fd48 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fd42 	bl	8006b1c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fd36 	bl	8006b1c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fd30 	bl	8006b1c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f9ed 	bl	8014508 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a ff40 	bl	800c04c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a ff3c 	bl	800c04c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20039180 	.word	0x20039180
 80011f0:	20038e64 	.word	0x20038e64
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fa37 	bl	80018cc <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa4b 	bl	80018f8 <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fb42 	bl	8010b00 <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20037d70 	.word	0x20037d70

0800148c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write_float+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write_float+0x98>)
 80014c6:	f012 f88f 	bl	80135e8 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write_float+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write_float+0x9c>)
 80014d8:	f00f fb86 	bl	8010be8 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write_float+0x9c>)
 80014e2:	f00f fb81 	bl	8010be8 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write_float+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write_float+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write_float+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write_float+0x9c>)
 80014f4:	f00f f8ef 	bl	80106d6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 fa18 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write_float+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017618 	.word	0x08017618
 8001524:	20037ce0 	.word	0x20037ce0
 8001528:	20037d70 	.word	0x20037d70
 800152c:	20037d60 	.word	0x20037d60

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9c0 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fafd 	bl	8010b54 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fd68 	bl	8011030 <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f faf7 	bl	8010b54 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f9c7 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f012 f82a 	bl	80135e8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fb24 	bl	8010be8 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f f892 	bl	80106d6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f9bb 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fa96 	bl	8010b00 <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20037be0 	.word	0x20037be0
 80015e4:	20036aa0 	.word	0x20036aa0
 80015e8:	08017634 	.word	0x08017634
 80015ec:	08017618 	.word	0x08017618
 80015f0:	20037ce0 	.word	0x20037ce0
 80015f4:	20037d70 	.word	0x20037d70
 80015f8:	20037d60 	.word	0x20037d60

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f95a 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fa97 	bl	8010b54 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fd02 	bl	8011030 <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fa91 	bl	8010b54 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f961 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f011 ffc8 	bl	80135e8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f fac2 	bl	8010be8 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f f830 	bl	80106d6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f959 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fa34 	bl	8010b00 <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20037be0 	.word	0x20037be0
 80016a8:	20036aa0 	.word	0x20036aa0
 80016ac:	08017634 	.word	0x08017634
 80016b0:	08017638 	.word	0x08017638
 80016b4:	20037ce0 	.word	0x20037ce0
 80016b8:	20037d70 	.word	0x20037d70
 80016bc:	20037d60 	.word	0x20037d60

080016c0 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f8f6 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e0:	f000 f90a 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016e4:	e019      	b.n	800171a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <sd_read_array_double+0x80>)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <sd_read_array_double+0x84>)
 80016f6:	f011 ffcb 	bl	8013690 <siscanf>
		i++;
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	db03      	blt.n	800171a <sd_read_array_double+0x5a>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <sd_read_array_double+0x88>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <sd_read_array_double+0x84>)
 8001720:	f00f fe64 	bl	80113ec <f_gets>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1dd      	bne.n	80016e6 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800172a:	f000 f8ff 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <sd_read_array_double+0x88>)
 8001730:	f00f f9e6 	bl	8010b00 <f_close>

	return ret;
 8001734:	7d7b      	ldrb	r3, [r7, #21]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08017630 	.word	0x08017630
 8001744:	20037ce0 	.word	0x20037ce0
 8001748:	20037d70 	.word	0x20037d70

0800174c <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f8b2 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <sd_write_array_int+0xa0>)
 8001772:	f00f f9ef 	bl	8010b54 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <sd_write_array_int+0xa4>)
 8001778:	f00f fc5a 	bl	8011030 <f_unlink>
		f_chdir("..");
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <sd_write_array_int+0xa8>)
 800177e:	f00f f9e9 	bl	8010b54 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001782:	f000 f8b9 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001786:	2300      	movs	r3, #0
 8001788:	82fb      	strh	r3, [r7, #22]
 800178a:	e021      	b.n	80017d0 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 800178c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <sd_write_array_int+0xac>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <sd_write_array_int+0xb0>)
 800179e:	f011 ff23 	bl	80135e8 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <sd_write_array_int+0xb4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <sd_write_array_int+0xb4>)
 80017aa:	f00f fa1d 	bl	8010be8 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <sd_write_array_int+0xb0>)
 80017b0:	f7fe fd26 	bl	8000200 <strlen>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <sd_write_array_int+0xb8>)
 80017b8:	4910      	ldr	r1, [pc, #64]	; (80017fc <sd_write_array_int+0xb0>)
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <sd_write_array_int+0xb4>)
 80017bc:	f00e ff8b 	bl	80106d6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c0:	f000 f8b4 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	82fb      	strh	r3, [r7, #22]
 80017d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbd7      	blt.n	800178c <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <sd_write_array_int+0xb4>)
 80017de:	f00f f98f 	bl	8010b00 <f_close>

	return ret;
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20037be0 	.word	0x20037be0
 80017f0:	20036aa0 	.word	0x20036aa0
 80017f4:	08017634 	.word	0x08017634
 80017f8:	08017644 	.word	0x08017644
 80017fc:	20037ce0 	.word	0x20037ce0
 8001800:	20037d70 	.word	0x20037d70
 8001804:	20037d60 	.word	0x20037d60

08001808 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f852 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001828:	f000 f866 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800182c:	e019      	b.n	8001862 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <sd_read_array_int+0x80>)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <sd_read_array_int+0x84>)
 800183e:	f011 ff27 	bl	8013690 <siscanf>
		i++;
 8001842:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800184e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	429a      	cmp	r2, r3
 8001858:	db03      	blt.n	8001862 <sd_read_array_int+0x5a>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3b01      	subs	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <sd_read_array_int+0x88>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <sd_read_array_int+0x84>)
 8001868:	f00f fdc0 	bl	80113ec <f_gets>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1dd      	bne.n	800182e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001872:	f000 f85b 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <sd_read_array_int+0x88>)
 8001878:	f00f f942 	bl	8010b00 <f_close>

	return ret;
 800187c:	7d7b      	ldrb	r3, [r7, #21]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	08017648 	.word	0x08017648
 800188c:	20037ce0 	.word	0x20037ce0
 8001890:	20037d70 	.word	0x20037d70

08001894 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800189e:	2201      	movs	r2, #1
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <sd_mount+0x30>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <sd_mount+0x34>)
 80018a4:	f00e fba4 	bl	800fff0 <f_mount>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <sd_mount+0x20>
 80018ae:	2301      	movs	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e001      	b.n	80018b8 <sd_mount+0x24>
	else ret = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	0801764c 	.word	0x0801764c
 80018c8:	20036ba0 	.word	0x20036ba0

080018cc <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <create_path+0x24>)
 80018da:	f011 ff48 	bl	801376e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <create_path+0x28>)
 80018e2:	f011 ff44 	bl	801376e <strcpy>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20037be0 	.word	0x20037be0
 80018f4:	20036aa0 	.word	0x20036aa0

080018f8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <fopen_folder_and_file+0x24>)
 80018fe:	f00f fc59 	bl	80111b4 <f_mkdir>

	f_chdir(dirpath);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <fopen_folder_and_file+0x24>)
 8001904:	f00f f926 	bl	8010b54 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001908:	2213      	movs	r2, #19
 800190a:	4905      	ldr	r1, [pc, #20]	; (8001920 <fopen_folder_and_file+0x28>)
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <fopen_folder_and_file+0x2c>)
 800190e:	f00e fbb5 	bl	801007c <f_open>

	f_chdir("..");
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <fopen_folder_and_file+0x30>)
 8001914:	f00f f91e 	bl	8010b54 <f_chdir>


}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20037be0 	.word	0x20037be0
 8001920:	20036aa0 	.word	0x20036aa0
 8001924:	20037d70 	.word	0x20037d70
 8001928:	08017634 	.word	0x08017634

0800192c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e007      	b.n	8001948 <bufclear+0x1c>
		buffer[i] = '\0';
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <bufclear+0x30>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	ddf4      	ble.n	8001938 <bufclear+0xc>
	}
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20037ce0 	.word	0x20037ce0

08001960 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <read_byte+0x54>)
 800197c:	f006 fb64 	bl	8008048 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001980:	f107 010f 	add.w	r1, r7, #15
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2201      	movs	r2, #1
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <read_byte+0x58>)
 800198a:	f009 fd25 	bl	800b3d8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800198e:	f107 010e 	add.w	r1, r7, #14
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2201      	movs	r2, #1
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <read_byte+0x58>)
 8001998:	f009 fe52 	bl	800b640 <HAL_SPI_Receive>
	CS_SET;
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <read_byte+0x54>)
 80019a4:	f006 fb50 	bl	8008048 <HAL_GPIO_WritePin>

	return val;
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020400 	.word	0x40020400
 80019b8:	20038e0c 	.word	0x20038e0c

080019bc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <write_byte+0x54>)
 80019de:	f006 fb33 	bl	8008048 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2201      	movs	r2, #1
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <write_byte+0x58>)
 80019ec:	f009 fcf4 	bl	800b3d8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80019f0:	1db9      	adds	r1, r7, #6
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	2201      	movs	r2, #1
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <write_byte+0x58>)
 80019f8:	f009 fcee 	bl	800b3d8 <HAL_SPI_Transmit>
	CS_SET;
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <write_byte+0x54>)
 8001a04:	f006 fb20 	bl	8008048 <HAL_GPIO_WritePin>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020400 	.word	0x40020400
 8001a14:	20038e0c 	.word	0x20038e0c

08001a18 <IMU_init>:

uint16_t IMU_init() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff9c 	bl	8001960 <read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	2be0      	cmp	r3, #224	; 0xe0
 8001a30:	d119      	bne.n	8001a66 <IMU_init+0x4e>
		ret = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001a36:	2101      	movs	r1, #1
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffbf 	bl	80019bc <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001a3e:	2110      	movs	r1, #16
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7ff ffbb 	bl	80019bc <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001a46:	2120      	movs	r1, #32
 8001a48:	207f      	movs	r0, #127	; 0x7f
 8001a4a:	f7ff ffb7 	bl	80019bc <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001a4e:	2106      	movs	r1, #6
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffb3 	bl	80019bc <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001a56:	2106      	movs	r1, #6
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff ffaf 	bl	80019bc <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	207f      	movs	r0, #127	; 0x7f
 8001a62:	f7ff ffab 	bl	80019bc <write_byte>
	}
	return ret;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <read_gyro_data>:

void read_gyro_data() {
 8001a70:	b598      	push	{r3, r4, r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a74:	2033      	movs	r0, #51	; 0x33
 8001a76:	f7ff ff73 	bl	8001960 <read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	2034      	movs	r0, #52	; 0x34
 8001a82:	f7ff ff6d 	bl	8001960 <read_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <read_gyro_data+0x64>)
 8001a90:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a92:	2035      	movs	r0, #53	; 0x35
 8001a94:	f7ff ff64 	bl	8001960 <read_byte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21c      	sxth	r4, r3
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f7ff ff5e 	bl	8001960 <read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <read_gyro_data+0x68>)
 8001aae:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001ab0:	2037      	movs	r0, #55	; 0x37
 8001ab2:	f7ff ff55 	bl	8001960 <read_byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21c      	sxth	r4, r3
 8001abc:	2038      	movs	r0, #56	; 0x38
 8001abe:	f7ff ff4f 	bl	8001960 <read_byte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <read_gyro_data+0x6c>)
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	bd98      	pop	{r3, r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20038da8 	.word	0x20038da8
 8001ad8:	20038da6 	.word	0x20038da6
 8001adc:	20038da0 	.word	0x20038da0

08001ae0 <read_accel_data>:

void read_accel_data() {
 8001ae0:	b598      	push	{r3, r4, r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001ae4:	202d      	movs	r0, #45	; 0x2d
 8001ae6:	f7ff ff3b 	bl	8001960 <read_byte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21c      	sxth	r4, r3
 8001af0:	202e      	movs	r0, #46	; 0x2e
 8001af2:	f7ff ff35 	bl	8001960 <read_byte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4323      	orrs	r3, r4
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <read_accel_data+0x64>)
 8001b00:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001b02:	202f      	movs	r0, #47	; 0x2f
 8001b04:	f7ff ff2c 	bl	8001960 <read_byte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21c      	sxth	r4, r3
 8001b0e:	2030      	movs	r0, #48	; 0x30
 8001b10:	f7ff ff26 	bl	8001960 <read_byte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <read_accel_data+0x68>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001b20:	2031      	movs	r0, #49	; 0x31
 8001b22:	f7ff ff1d 	bl	8001960 <read_byte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	2032      	movs	r0, #50	; 0x32
 8001b2e:	f7ff ff17 	bl	8001960 <read_byte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4323      	orrs	r3, r4
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <read_accel_data+0x6c>)
 8001b3c:	801a      	strh	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	bd98      	pop	{r3, r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20038da4 	.word	0x20038da4
 8001b48:	20038daa 	.word	0x20038daa
 8001b4c:	20038da2 	.word	0x20038da2

08001b50 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001b50:	b490      	push	{r4, r7}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	805a      	strh	r2, [r3, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	809a      	strh	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	80da      	strh	r2, [r3, #6]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	811a      	strh	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	815a      	strh	r2, [r3, #10]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc90      	pop	{r4, r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001ba0:	f7ff ff3a 	bl	8001a18 <IMU_init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <_ZN3IMU4initEv+0x24>)
 8001bae:	f011 fc99 	bl	80134e4 <iprintf>

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08017650 	.word	0x08017650

08001bc0 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001bc8:	f7ff ff52 	bl	8001a70 <read_gyro_data>
	read_accel_data();
 8001bcc:	f7ff ff88 	bl	8001ae0 <read_accel_data>

	xa_ = xa;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_ZN3IMU12updateValuesEv+0x54>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_ZN3IMU12updateValuesEv+0x58>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <_ZN3IMU12updateValuesEv+0x5c>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <_ZN3IMU12updateValuesEv+0x60>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <_ZN3IMU12updateValuesEv+0x64>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <_ZN3IMU12updateValuesEv+0x68>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	815a      	strh	r2, [r3, #10]

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20038da4 	.word	0x20038da4
 8001c18:	20038daa 	.word	0x20038daa
 8001c1c:	20038da2 	.word	0x20038da2
 8001c20:	20038da8 	.word	0x20038da8
 8001c24:	20038da6 	.word	0x20038da6
 8001c28:	20038da0 	.word	0x20038da0
 8001c2c:	00000000 	.word	0x00000000

08001c30 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc88 	bl	8000554 <__aeabi_i2d>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001c56:	a315      	add	r3, pc, #84	; (adr r3, 8001cac <_ZN3IMU8getOmegaEv+0x7c>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c60:	f7fe fe0c 	bl	800087c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c6e:	a311      	add	r3, pc, #68	; (adr r3, 8001cb4 <_ZN3IMU8getOmegaEv+0x84>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fcd6 	bl	8000628 <__aeabi_dmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4618      	mov	r0, r3
 8001c82:	4621      	mov	r1, r4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_ZN3IMU8getOmegaEv+0x78>)
 8001c8a:	f7fe fdf7 	bl	800087c <__aeabi_ddiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c96:	eeb0 0a47 	vmov.f32	s0, s14
 8001c9a:	eef0 0a67 	vmov.f32	s1, s15
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	40668000 	.word	0x40668000
 8001cac:	66666666 	.word	0x66666666
 8001cb0:	40306666 	.word	0x40306666
 8001cb4:	54411744 	.word	0x54411744
 8001cb8:	400921fb 	.word	0x400921fb

08001cbc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc0:	b08a      	sub	sp, #40	; 0x28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001cc6:	466b      	mov	r3, sp
 8001cc8:	4698      	mov	r8, r3
	HAL_Delay(1000);
 8001cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cce:	f004 ff25 	bl	8006b1c <HAL_Delay>
	int16_t num = 2000;
 8001cd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cd6:	83bb      	strh	r3, [r7, #28]
	double zg_vals[num];
 8001cd8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cdc:	1e5d      	subs	r5, r3, #1
 8001cde:	61bd      	str	r5, [r7, #24]
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f04f 0400 	mov.w	r4, #0
 8001cf2:	0194      	lsls	r4, r2, #6
 8001cf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cf8:	018b      	lsls	r3, r1, #6
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f04f 0400 	mov.w	r4, #0
 8001d0c:	0194      	lsls	r4, r2, #6
 8001d0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d12:	018b      	lsls	r3, r1, #6
 8001d14:	462b      	mov	r3, r5
 8001d16:	3301      	adds	r3, #1
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	3307      	adds	r3, #7
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	ebad 0d03 	sub.w	sp, sp, r3
 8001d26:	466b      	mov	r3, sp
 8001d28:	3307      	adds	r3, #7
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	83fb      	strh	r3, [r7, #30]
 8001d34:	8bfa      	ldrh	r2, [r7, #30]
 8001d36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	da14      	bge.n	8001d68 <_ZN3IMU11calibrationEv+0xac>
		zg_vals[i] = double(zg_);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d44:	8bfe      	ldrh	r6, [r7, #30]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc04 	bl	8000554 <__aeabi_i2d>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	00f2      	lsls	r2, r6, #3
 8001d54:	440a      	add	r2, r1
 8001d56:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f004 fede 	bl	8006b1c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001d60:	8bfb      	ldrh	r3, [r7, #30]
 8001d62:	3301      	adds	r3, #1
 8001d64:	83fb      	strh	r3, [r7, #30]
 8001d66:	e7e5      	b.n	8001d34 <_ZN3IMU11calibrationEv+0x78>
	for(const auto &v : zg_vals){
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	462b      	mov	r3, r5
 8001d70:	3301      	adds	r3, #1
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d017      	beq.n	8001db0 <_ZN3IMU11calibrationEv+0xf4>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f7fe fbf7 	bl	8000578 <__aeabi_f2d>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	f7fe fa92 	bl	80002bc <__adddf3>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4621      	mov	r1, r4
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	623b      	str	r3, [r7, #32]
	for(const auto &v : zg_vals){
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	3308      	adds	r3, #8
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	e7e3      	b.n	8001d78 <_ZN3IMU11calibrationEv+0xbc>
	offset_ = sum / num;
 8001db0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dc4:	ee16 0a90 	vmov	r0, s13
 8001dc8:	f7fe fbd6 	bl	8000578 <__aeabi_f2d>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001dd6:	46c5      	mov	sp, r8
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001de4 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4603      	mov	r3, r0
 8001dec:	460a      	mov	r2, r1
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	b299      	uxth	r1, r3
 8001df8:	1dfa      	adds	r2, r7, #7
 8001dfa:	2364      	movs	r3, #100	; 0x64
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <INA260_read+0x50>)
 8001e02:	f006 fa8b 	bl	800831c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	f107 020c 	add.w	r2, r7, #12
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2302      	movs	r3, #2
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <INA260_read+0x50>)
 8001e16:	f006 fb7f 	bl	8008518 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001e1a:	7b3b      	ldrb	r3, [r7, #12]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	7b7b      	ldrb	r3, [r7, #13]
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	81fb      	strh	r3, [r7, #14]
	return val;
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20038fc0 	.word	0x20038fc0

08001e38 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71bb      	strb	r3, [r7, #6]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	717b      	strb	r3, [r7, #5]
 8001e52:	4613      	mov	r3, r2
 8001e54:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	733b      	strb	r3, [r7, #12]
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	737b      	strb	r3, [r7, #13]
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001e62:	793b      	ldrb	r3, [r7, #4]
 8001e64:	b299      	uxth	r1, r3
 8001e66:	f107 020c 	add.w	r2, r7, #12
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2303      	movs	r3, #3
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <INA260_write+0x48>)
 8001e72:	f006 fa53 	bl	800831c <HAL_I2C_Master_Transmit>
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20038fc0 	.word	0x20038fc0

08001e84 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	71bb      	strb	r3, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e96:	797b      	ldrb	r3, [r7, #5]
 8001e98:	79ba      	ldrb	r2, [r7, #6]
 8001e9a:	79f9      	ldrb	r1, [r7, #7]
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff ffcb 	bl	8001e38 <INA260_write>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	21df      	movs	r1, #223	; 0xdf
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff ffe2 	bl	8001e84 <setConfig>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
{

}
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	482a      	ldr	r0, [pc, #168]	; (8001f9c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ef2:	f006 f891 	bl	8008018 <HAL_GPIO_ReadPin>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <_ZN8JoyStick8getValueEv+0x2e>
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <_ZN8JoyStick8getValueEv+0xc0>)
 8001f12:	f006 f881 	bl	8008018 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <_ZN8JoyStick8getValueEv+0x4e>
 8001f26:	89fb      	ldrh	r3, [r7, #14]
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	481a      	ldr	r0, [pc, #104]	; (8001f9c <_ZN8JoyStick8getValueEv+0xbc>)
 8001f34:	f006 f870 	bl	8008018 <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <_ZN8JoyStick8getValueEv+0x70>
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001f50:	2104      	movs	r1, #4
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <_ZN8JoyStick8getValueEv+0xc4>)
 8001f54:	f006 f860 	bl	8008018 <HAL_GPIO_ReadPin>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <_ZN8JoyStick8getValueEv+0x90>
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <_ZN8JoyStick8getValueEv+0xbc>)
 8001f74:	f006 f850 	bl	8008018 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <_ZN8JoyStick8getValueEv+0xb0>
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f90:	89fb      	ldrh	r3, [r7, #14]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b52      	cmp	r3, #82	; 0x52
 8001fb8:	d112      	bne.n	8001fe0 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc0:	4856      	ldr	r0, [pc, #344]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 f841 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fcc:	4853      	ldr	r0, [pc, #332]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 f83b 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	4850      	ldr	r0, [pc, #320]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f006 f835 	bl	8008048 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001fde:	e098      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b47      	cmp	r3, #71	; 0x47
 8001fe4:	d112      	bne.n	800200c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fec:	484b      	ldr	r0, [pc, #300]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 f82b 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff8:	4848      	ldr	r0, [pc, #288]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 f825 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002004:	4845      	ldr	r0, [pc, #276]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002006:	f006 f81f 	bl	8008048 <HAL_GPIO_WritePin>
}
 800200a:	e082      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	2b42      	cmp	r3, #66	; 0x42
 8002010:	d112      	bne.n	8002038 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002018:	4840      	ldr	r0, [pc, #256]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800201a:	f006 f815 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002024:	483d      	ldr	r0, [pc, #244]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002026:	f006 f80f 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002030:	483a      	ldr	r0, [pc, #232]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002032:	f006 f809 	bl	8008048 <HAL_GPIO_WritePin>
}
 8002036:	e06c      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	2b43      	cmp	r3, #67	; 0x43
 800203c:	d112      	bne.n	8002064 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002044:	4835      	ldr	r0, [pc, #212]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002046:	f005 ffff 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002050:	4832      	ldr	r0, [pc, #200]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002052:	f005 fff9 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205c:	482f      	ldr	r0, [pc, #188]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800205e:	f005 fff3 	bl	8008048 <HAL_GPIO_WritePin>
}
 8002062:	e056      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	2b4d      	cmp	r3, #77	; 0x4d
 8002068:	d112      	bne.n	8002090 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002070:	482a      	ldr	r0, [pc, #168]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002072:	f005 ffe9 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800207c:	4827      	ldr	r0, [pc, #156]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800207e:	f005 ffe3 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4824      	ldr	r0, [pc, #144]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800208a:	f005 ffdd 	bl	8008048 <HAL_GPIO_WritePin>
}
 800208e:	e040      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b59      	cmp	r3, #89	; 0x59
 8002094:	d112      	bne.n	80020bc <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209c:	481f      	ldr	r0, [pc, #124]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800209e:	f005 ffd3 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a8:	481c      	ldr	r0, [pc, #112]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020aa:	f005 ffcd 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b4:	4819      	ldr	r0, [pc, #100]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020b6:	f005 ffc7 	bl	8008048 <HAL_GPIO_WritePin>
}
 80020ba:	e02a      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	2b57      	cmp	r3, #87	; 0x57
 80020c0:	d112      	bne.n	80020e8 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c8:	4814      	ldr	r0, [pc, #80]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020ca:	f005 ffbd 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020d4:	4811      	ldr	r0, [pc, #68]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020d6:	f005 ffb7 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e0:	480e      	ldr	r0, [pc, #56]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020e2:	f005 ffb1 	bl	8008048 <HAL_GPIO_WritePin>
}
 80020e6:	e014      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b7e      	cmp	r3, #126	; 0x7e
 80020ec:	d111      	bne.n	8002112 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f4:	4809      	ldr	r0, [pc, #36]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020f6:	f005 ffa7 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002102:	f005 ffa1 	bl	8008048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800210e:	f005 ff9b 	bl	8008048 <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020000 	.word	0x40020000

08002120 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
 800212c:	4613      	mov	r3, r2
 800212e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213e:	4813      	ldr	r0, [pc, #76]	; (800218c <_ZN3LED2LREaa+0x6c>)
 8002140:	f005 ff82 	bl	8008048 <HAL_GPIO_WritePin>
 8002144:	e009      	b.n	800215a <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <_ZN3LED2LREaa+0x6c>)
 8002156:	f005 ff77 	bl	8008048 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800215a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d106      	bne.n	8002170 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002168:	4808      	ldr	r0, [pc, #32]	; (800218c <_ZN3LED2LREaa+0x6c>)
 800216a:	f005 ff6d 	bl	8008048 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800216e:	e009      	b.n	8002184 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002170:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <_ZN3LED2LREaa+0x6c>)
 8002180:	f005 ff62 	bl	8008048 <HAL_GPIO_WritePin>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40020000 	.word	0x40020000

08002190 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	; 0x48
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe92 	bl	8001ec8 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	331c      	adds	r3, #28
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d008      	beq.n	80021cc <_ZN10LineSensorC1Ev+0x3c>
 80021ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80021c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c6:	3302      	adds	r3, #2
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ca:	e7f2      	b.n	80021b2 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d009      	beq.n	80021fa <_ZN10LineSensorC1Ev+0x6a>
 80021e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e8:	623b      	str	r3, [r7, #32]
		s = 0;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80021f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f4:	3304      	adds	r3, #4
 80021f6:	643b      	str	r3, [r7, #64]	; 0x40
 80021f8:	e7f1      	b.n	80021de <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3338      	adds	r3, #56	; 0x38
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	429a      	cmp	r2, r3
 8002212:	d009      	beq.n	8002228 <_ZN10LineSensorC1Ev+0x98>
 8002214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002216:	617b      	str	r3, [r7, #20]
		m = 0;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	3304      	adds	r3, #4
 8002224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002226:	e7f1      	b.n	800220c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	3338      	adds	r3, #56	; 0x38
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	429a      	cmp	r2, r3
 8002240:	d009      	beq.n	8002256 <_ZN10LineSensorC1Ev+0xc6>
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800224c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	3304      	adds	r3, #4
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
 8002254:	e7f1      	b.n	800223a <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3748      	adds	r7, #72	; 0x48
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	220e      	movs	r2, #14
 800226c:	4619      	mov	r1, r3
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002270:	f004 fcba 	bl	8006be8 <HAL_ADC_Start_DMA>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20038ee4 	.word	0x20038ee4

08002280 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b0d      	cmp	r3, #13
 8002290:	dc2f      	bgt.n	80022f2 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3392      	adds	r3, #146	; 0x92
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	33a0      	adds	r3, #160	; 0xa0
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	68f9      	ldr	r1, [r7, #12]
 80022dc:	440b      	add	r3, r1
 80022de:	3306      	adds	r3, #6
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e7cc      	b.n	800228c <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022fc:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d902      	bls.n	800230c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]


}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000200 	.word	0x20000200

0800231c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 800231c:	b490      	push	{r4, r7}
 800231e:	b08e      	sub	sp, #56	; 0x38
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800232a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800232e:	2b0d      	cmp	r3, #13
 8002330:	f200 8087 	bhi.w	8002442 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800233a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800233e:	2b09      	cmp	r3, #9
 8002340:	d81c      	bhi.n	800237c <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002342:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002346:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800234a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4423      	add	r3, r4
 800235a:	3306      	adds	r3, #6
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4403      	add	r3, r0
 8002360:	3304      	adds	r3, #4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	008b      	lsls	r3, r1, #2
 8002366:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800236a:	440b      	add	r3, r1
 800236c:	3b30      	subs	r3, #48	; 0x30
 800236e:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002370:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002374:	3301      	adds	r3, #1
 8002376:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800237a:	e7de      	b.n	800233a <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002382:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002386:	2b09      	cmp	r3, #9
 8002388:	d84d      	bhi.n	8002426 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800238a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800238e:	3301      	adds	r3, #1
 8002390:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002394:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002398:	2b09      	cmp	r3, #9
 800239a:	d83e      	bhi.n	800241a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800239c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023a6:	4413      	add	r3, r2
 80023a8:	3b30      	subs	r3, #48	; 0x30
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b8:	4413      	add	r3, r2
 80023ba:	3b30      	subs	r3, #48	; 0x30
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	d521      	bpl.n	800240e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80023ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023d4:	4413      	add	r3, r2
 80023d6:	3b30      	subs	r3, #48	; 0x30
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80023dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80023e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023ea:	440a      	add	r2, r1
 80023ec:	3a30      	subs	r2, #48	; 0x30
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023f6:	440b      	add	r3, r1
 80023f8:	3b30      	subs	r3, #48	; 0x30
 80023fa:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80023fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002406:	4413      	add	r3, r2
 8002408:	3b30      	subs	r3, #48	; 0x30
 800240a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800240e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002412:	3301      	adds	r3, #1
 8002414:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002418:	e7bc      	b.n	8002394 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800241a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800241e:	3301      	adds	r3, #1
 8002420:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002424:	e7ad      	b.n	8002382 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	33b0      	adds	r3, #176	; 0xb0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800243a:	3301      	adds	r3, #1
 800243c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002440:	e773      	b.n	800232a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8002442:	bf00      	nop
 8002444:	3738      	adds	r7, #56	; 0x38
 8002446:	46bd      	mov	sp, r7
 8002448:	bc90      	pop	{r4, r7}
 800244a:	4770      	bx	lr

0800244c <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	429a      	cmp	r2, r3
 8002470:	d012      	beq.n	8002498 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024b8 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	db02      	blt.n	8002490 <_ZN10LineSensor13emergencyStopEv+0x44>
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	3301      	adds	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3304      	adds	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e7e8      	b.n	800246a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002498:	7ffb      	ldrb	r3, [r7, #31]
 800249a:	2b0d      	cmp	r3, #13
 800249c:	d902      	bls.n	80024a4 <_ZN10LineSensor13emergencyStopEv+0x58>
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
 80024a2:	e001      	b.n	80024a8 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]

	return flag;
 80024a8:	7dfb      	ldrb	r3, [r7, #23]

}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	44160000 	.word	0x44160000

080024bc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	609a      	str	r2, [r3, #8]
}
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002564:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002578:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002584:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002590:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800259c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80025a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80025b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	ee07 3a90 	vmov	s15, r3

}
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	0000      	movs	r0, r0
	...

080025d8 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff95 	bl	8002510 <_ZN9LineTrace9calcErrorEv>
 80025e6:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f8:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <_ZN9LineTrace3pidEv+0x130>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	edd7 6a07 	vldr	s13, [r7, #28]
 800260c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ffae 	bl	8000578 <__aeabi_f2d>
 800261c:	a338      	add	r3, pc, #224	; (adr r3, 8002700 <_ZN9LineTrace3pidEv+0x128>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe f92b 	bl	800087c <__aeabi_ddiv>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	4618      	mov	r0, r3
 800262c:	4621      	mov	r1, r4
 800262e:	f7fe faf3 	bl	8000c18 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8002636:	4b35      	ldr	r3, [pc, #212]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff9c 	bl	8000578 <__aeabi_f2d>
 8002640:	4604      	mov	r4, r0
 8002642:	460d      	mov	r5, r1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	ed93 7a06 	vldr	s14, [r3, #24]
 800264a:	edd7 7a07 	vldr	s15, [r7, #28]
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	ee17 0a90 	vmov	r0, s15
 8002656:	f7fd ff8f 	bl	8000578 <__aeabi_f2d>
 800265a:	a329      	add	r3, pc, #164	; (adr r3, 8002700 <_ZN9LineTrace3pidEv+0x128>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd ffe2 	bl	8000628 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd fe26 	bl	80002bc <__adddf3>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	4618      	mov	r0, r3
 8002676:	4621      	mov	r1, r4
 8002678:	f7fe face 	bl	8000c18 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 8002680:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	ed93 7a08 	vldr	s14, [r3, #32]
 8002688:	edd7 6a06 	vldr	s13, [r7, #24]
 800268c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002690:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80026ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80026b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c6:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681c      	ldr	r4, [r3, #0]
 80026ce:	6938      	ldr	r0, [r7, #16]
 80026d0:	f7fd ff52 	bl	8000578 <__aeabi_f2d>
 80026d4:	4605      	mov	r5, r0
 80026d6:	460e      	mov	r6, r1
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7fd ff4d 	bl	8000578 <__aeabi_f2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	ec43 2b11 	vmov	d1, r2, r3
 80026e6:	ec46 5b10 	vmov	d0, r5, r6
 80026ea:	4620      	mov	r0, r4
 80026ec:	f000 fa10 	bl	8002b10 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_ZN9LineTrace3pidEv+0x130>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	6013      	str	r3, [r2, #0]

}
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fe:	bf00      	nop
 8002700:	d2f1a9fc 	.word	0xd2f1a9fc
 8002704:	3f50624d 	.word	0x3f50624d
 8002708:	20000204 	.word	0x20000204
 800270c:	20000208 	.word	0x20000208

08002710 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	ed87 0a02 	vstr	s0, [r7, #8]
 800271c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002720:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7f1b      	ldrb	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff21 	bl	80025d8 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe56 	bl	800244c <_ZN10LineSensor13emergencyStopEv>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d011      	beq.n	80027ca <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80027e8 <_ZN9LineTrace4flipEv+0x68>
 80027ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80027e8 <_ZN9LineTrace4flipEv+0x68>
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f9ac 	bl	8002b10 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	330c      	adds	r3, #12
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fcac 	bl	8002120 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 80027c8:	e007      	b.n	80027da <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	330c      	adds	r3, #12
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fca3 	bl	8002120 <_ZN3LED2LREaa>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
	...

080027f0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	771a      	strb	r2, [r3, #28]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	0000      	movs	r0, r0
 800280c:	0000      	movs	r0, r0
	...

08002810 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002838 <_ZN9LineTrace4stopEv+0x28>
 8002826:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002838 <_ZN9LineTrace4stopEv+0x28>
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f970 	bl	8002b10 <_ZN5Motor8setRatioEdd>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
	...

08002840 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800284e:	3330      	adds	r3, #48	; 0x30
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002866:	3334      	adds	r3, #52	; 0x34
 8002868:	2200      	movs	r2, #0
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002888:	f7ff f804 	bl	8001894 <sd_mount>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 800289c:	4816      	ldr	r0, [pc, #88]	; (80028f8 <_ZN6Logger10sdCardInitEv+0x7c>)
 800289e:	f010 fe95 	bl	80135cc <puts>
	  ret = true;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
 80028a6:	e004      	b.n	80028b2 <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 80028a8:	4814      	ldr	r0, [pc, #80]	; (80028fc <_ZN6Logger10sdCardInitEv+0x80>)
 80028aa:	f010 fe8f 	bl	80135cc <puts>
	  ret = false;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 80028b2:	2364      	movs	r3, #100	; 0x64
 80028b4:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80028b6:	f107 0210 	add.w	r2, r7, #16
 80028ba:	2301      	movs	r3, #1
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	2201      	movs	r2, #1
 80028c2:	490f      	ldr	r1, [pc, #60]	; (8002900 <_ZN6Logger10sdCardInitEv+0x84>)
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <_ZN6Logger10sdCardInitEv+0x88>)
 80028c6:	f7fe ff41 	bl	800174c <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2201      	movs	r2, #1
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <_ZN6Logger10sdCardInitEv+0x84>)
 80028d2:	480c      	ldr	r0, [pc, #48]	; (8002904 <_ZN6Logger10sdCardInitEv+0x88>)
 80028d4:	f7fe ff98 	bl	8001808 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80028d8:	f107 020c 	add.w	r2, r7, #12
 80028dc:	2301      	movs	r3, #1
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	2201      	movs	r2, #1
 80028e4:	4908      	ldr	r1, [pc, #32]	; (8002908 <_ZN6Logger10sdCardInitEv+0x8c>)
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <_ZN6Logger10sdCardInitEv+0x88>)
 80028e8:	f7fe ff30 	bl	800174c <sd_write_array_int>

	return ret;
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08017660 	.word	0x08017660
 80028fc:	08017670 	.word	0x08017670
 8002900:	08017680 	.word	0x08017680
 8002904:	0801768c 	.word	0x0801768c
 8002908:	08017694 	.word	0x08017694

0800290c <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800291e:	3330      	adds	r3, #48	; 0x30
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d024      	beq.n	8002970 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800292c:	3332      	adds	r3, #50	; 0x32
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002940:	3332      	adds	r3, #50	; 0x32
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800294e:	3332      	adds	r3, #50	; 0x32
 8002950:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002958:	3332      	adds	r3, #50	; 0x32
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002960:	4293      	cmp	r3, r2
 8002962:	d905      	bls.n	8002970 <_ZN6Logger8storeLogEf+0x64>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800296a:	3332      	adds	r3, #50	; 0x32
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]
	}
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	2300      	movs	r3, #0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68b8      	ldr	r0, [r7, #8]
 8002998:	f7fe fdca 	bl	8001530 <sd_write_array_float>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80029b8:	3330      	adds	r3, #48	; 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	f241 7270 	movw	r2, #6000	; 0x1770
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68b8      	ldr	r0, [r7, #8]
 80029c6:	f7fe fe19 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80029d0:	33b0      	adds	r3, #176	; 0xb0
 80029d2:	2200      	movs	r2, #0
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	f241 7270 	movw	r2, #6000	; 0x1770
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f7fe fe0d 	bl	80015fc <sd_write_array_double>
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80029f8:	3330      	adds	r3, #48	; 0x30
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a18:	3330      	adds	r3, #48	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	805a      	strh	r2, [r3, #2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_ZN5Motor4initEv>:

void Motor::init()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a54:	2108      	movs	r1, #8
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <_ZN5Motor4initEv+0x20>)
 8002a58:	f009 fa28 	bl	800beac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a5c:	210c      	movs	r1, #12
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <_ZN5Motor4initEv+0x20>)
 8002a60:	f009 fa24 	bl	800beac <HAL_TIM_PWM_Start>

}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20038ea4 	.word	0x20038ea4

08002a70 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da0d      	bge.n	8002a9e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a88:	481f      	ldr	r0, [pc, #124]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a8a:	f005 fadd 	bl	8008048 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	425b      	negs	r3, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	81fb      	strh	r3, [r7, #14]
 8002a9c:	e00a      	b.n	8002ab4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aa4:	4818      	ldr	r0, [pc, #96]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002aa6:	f005 facf 	bl	8008048 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da0d      	bge.n	8002ada <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ac4:	4810      	ldr	r0, [pc, #64]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002ac6:	f005 fabf 	bl	8008048 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	81bb      	strh	r3, [r7, #12]
 8002ad8:	e00a      	b.n	8002af0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002ae2:	f005 fab1 	bl	8008048 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002af0:	89fa      	ldrh	r2, [r7, #14]
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002af8:	89ba      	ldrh	r2, [r7, #12]
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	20038ea4 	.word	0x20038ea4

08002b10 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6178      	str	r0, [r7, #20]
 8002b18:	ed87 0b02 	vstr	d0, [r7, #8]
 8002b1c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b2a:	f7fe f80d 	bl	8000b48 <__aeabi_dcmpgt>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <_ZN5Motor8setRatioEdd+0x30>
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	4c2b      	ldr	r4, [pc, #172]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b3a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002b3e:	e00e      	b.n	8002b5e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b4a:	f7fd ffdf 	bl	8000b0c <__aeabi_dcmplt>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <_ZN5Motor8setRatioEdd+0x4e>
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	4c24      	ldr	r4, [pc, #144]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b68:	f7fd ffee 	bl	8000b48 <__aeabi_dcmpgt>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <_ZN5Motor8setRatioEdd+0x6e>
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	4c1c      	ldr	r4, [pc, #112]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b78:	e9c7 3400 	strd	r3, r4, [r7]
 8002b7c:	e00e      	b.n	8002b9c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b88:	f7fd ffc0 	bl	8000b0c <__aeabi_dcmplt>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <_ZN5Motor8setRatioEdd+0x8c>
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	4c15      	ldr	r4, [pc, #84]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b98:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <_ZN5Motor8setRatioEdd+0xe0>)
 8002ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba6:	f7fd fd3f 	bl	8000628 <__aeabi_dmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	f7fd ffe9 	bl	8000b88 <__aeabi_d2iz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <_ZN5Motor8setRatioEdd+0xe0>)
 8002bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc8:	f7fd fd2e 	bl	8000628 <__aeabi_dmul>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	f7fd ffd8 	bl	8000b88 <__aeabi_d2iz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b21a      	sxth	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	805a      	strh	r2, [r3, #2]

}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	3ff00000 	.word	0x3ff00000
 8002bec:	bff00000 	.word	0xbff00000
 8002bf0:	409c2000 	.word	0x409c2000

08002bf4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002bf4:	b490      	push	{r4, r7}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f04f 0400 	mov.w	r4, #0
 8002c0c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	f04f 0400 	mov.w	r4, #0
 8002c28:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	609a      	str	r2, [r3, #8]
}
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc90      	pop	{r4, r7}
 8002c48:	4770      	bx	lr
 8002c4a:	0000      	movs	r0, r0
 8002c4c:	0000      	movs	r0, r0
	...

08002c50 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe ffe6 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8002c64:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fb82 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002c72:	ec54 3b10 	vmov	r3, r4, d0
 8002c76:	4618      	mov	r0, r3
 8002c78:	4621      	mov	r1, r4
 8002c7a:	f7fd ffcd 	bl	8000c18 <__aeabi_d2f>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002c82:	a358      	add	r3, pc, #352	; (adr r3, 8002de4 <_ZN8Odometry12calcPotitionEv+0x194>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c8c:	f7fd fccc 	bl	8000628 <__aeabi_dmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	460c      	mov	r4, r1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7fd fc69 	bl	8000578 <__aeabi_f2d>
 8002ca6:	4682      	mov	sl, r0
 8002ca8:	468b      	mov	fp, r1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cbe:	f7fd fddd 	bl	800087c <__aeabi_ddiv>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	4649      	mov	r1, r9
 8002cca:	f7fd faf7 	bl	80002bc <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ec43 2b17 	vmov	d7, r2, r3
 8002cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cda:	eef0 0a67 	vmov.f32	s1, s15
 8002cde:	f00e fc2b 	bl	8011538 <cos>
 8002ce2:	ec53 2b10 	vmov	r2, r3, d0
 8002ce6:	4650      	mov	r0, sl
 8002ce8:	4659      	mov	r1, fp
 8002cea:	f7fd fc9d 	bl	8000628 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fae1 	bl	80002bc <__adddf3>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7fd fc34 	bl	8000578 <__aeabi_f2d>
 8002d10:	4682      	mov	sl, r0
 8002d12:	468b      	mov	fp, r1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d28:	f7fd fda8 	bl	800087c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fac2 	bl	80002bc <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	ec43 2b17 	vmov	d7, r2, r3
 8002d40:	eeb0 0a47 	vmov.f32	s0, s14
 8002d44:	eef0 0a67 	vmov.f32	s1, s15
 8002d48:	f00e fc3a 	bl	80115c0 <sin>
 8002d4c:	ec53 2b10 	vmov	r2, r3, d0
 8002d50:	4650      	mov	r0, sl
 8002d52:	4659      	mov	r1, fp
 8002d54:	f7fd fc68 	bl	8000628 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7fd faac 	bl	80002bc <__adddf3>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	f7fd fa9d 	bl	80002bc <__adddf3>
 8002d82:	4603      	mov	r3, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002d92:	4618      	mov	r0, r3
 8002d94:	4621      	mov	r1, r4
 8002d96:	f7fd ff3f 	bl	8000c18 <__aeabi_d2f>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002d9e:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002da6:	4618      	mov	r0, r3
 8002da8:	4621      	mov	r1, r4
 8002daa:	f7fd ff35 	bl	8000c18 <__aeabi_d2f>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002db2:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	f7fd ff2b 	bl	8000c18 <__aeabi_d2f>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	2000020c 	.word	0x2000020c
 8002ddc:	20000210 	.word	0x20000210
 8002de0:	20000214 	.word	0x20000214
 8002de4:	d2f1a9fc 	.word	0xd2f1a9fc
 8002de8:	3f50624d 	.word	0x3f50624d

08002dec <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff2b 	bl	8002c50 <_ZN8Odometry12calcPotitionEv>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 8002e02:	b490      	push	{r4, r7}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	return x_;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002e10:	ec44 3b17 	vmov	d7, r3, r4
}
 8002e14:	eeb0 0a47 	vmov.f32	s0, s14
 8002e18:	eef0 0a67 	vmov.f32	s1, s15
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc90      	pop	{r4, r7}
 8002e22:	4770      	bx	lr

08002e24 <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 8002e24:	b490      	push	{r4, r7}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	return y_;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002e32:	ec44 3b17 	vmov	d7, r3, r4
}
 8002e36:	eeb0 0a47 	vmov.f32	s0, s14
 8002e3a:	eef0 0a67 	vmov.f32	s1, s15
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc90      	pop	{r4, r7}
 8002e44:	4770      	bx	lr

08002e46 <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 8002e46:	b490      	push	{r4, r7}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
	return theta_;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002e54:	ec44 3b17 	vmov	d7, r3, r4
}
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	eef0 0a67 	vmov.f32	s1, s15
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc90      	pop	{r4, r7}
 8002e66:	4770      	bx	lr

08002e68 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002e68:	b490      	push	{r4, r7}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f04f 0400 	mov.w	r4, #0
 8002e7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	f04f 0400 	mov.w	r4, #0
 8002e88:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc90      	pop	{r4, r7}
 8002ea2:	4770      	bx	lr

08002ea4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002ea4:	b490      	push	{r4, r7}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	f04f 0400 	mov.w	r4, #0
 8002ed8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002ee2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002eea:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <_ZN13PathFollowingC1Ev+0xec>)
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002ef8:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <_ZN13PathFollowingC1Ev+0xec>)
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002f06:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <_ZN13PathFollowingC1Ev+0xec>)
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	f04f 0400 	mov.w	r4, #0
 8002f1e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002f30:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <_ZN13PathFollowingC1Ev+0xf4>)
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	f04f 0400 	mov.w	r4, #0
 8002f72:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <_ZN13PathFollowingC1Ev+0xf4>)
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	f04f 0400 	mov.w	r4, #0
 8002f80:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc90      	pop	{r4, r7}
 8002f8e:	4770      	bx	lr
 8002f90:	200393a8 	.word	0x200393a8
 8002f94:	20039338 	.word	0x20039338
 8002f98:	20039398 	.word	0x20039398

08002f9c <_ZN13PathFollowing6isNearEddd>:
	y = y + distance * sin(theta);

}

bool PathFollowing::isNear(const double src_data, const double target_data, const double margin)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	61f8      	str	r0, [r7, #28]
 8002fa4:	ed87 0b04 	vstr	d0, [r7, #16]
 8002fa8:	ed87 1b02 	vstr	d1, [r7, #8]
 8002fac:	ed87 2b00 	vstr	d2, [r7]

	if(target_data - margin < src_data && src_data < target_data + margin){
 8002fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb8:	f7fd f97e 	bl	80002b8 <__aeabi_dsub>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fc8:	f7fd fdbe 	bl	8000b48 <__aeabi_dcmpgt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d012      	beq.n	8002ff8 <_ZN13PathFollowing6isNearEddd+0x5c>
 8002fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fda:	f7fd f96f 	bl	80002bc <__adddf3>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fea:	f7fd fd8f 	bl	8000b0c <__aeabi_dcmplt>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <_ZN13PathFollowing6isNearEddd+0x5c>
		return true;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <_ZN13PathFollowing6isNearEddd+0x5e>
	}
	else{
		return false;
 8002ff8:	2300      	movs	r3, #0
	}

}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
	...

08003004 <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800300c:	f001 ff6a 	bl	8004ee4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	2201      	movs	r2, #1
 8003016:	4915      	ldr	r1, [pc, #84]	; (800306c <_ZN13PathFollowing4initEv+0x68>)
 8003018:	4815      	ldr	r0, [pc, #84]	; (8003070 <_ZN13PathFollowing4initEv+0x6c>)
 800301a:	f7fe fb51 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	2201      	movs	r2, #1
 8003024:	4913      	ldr	r1, [pc, #76]	; (8003074 <_ZN13PathFollowing4initEv+0x70>)
 8003026:	4812      	ldr	r0, [pc, #72]	; (8003070 <_ZN13PathFollowing4initEv+0x6c>)
 8003028:	f7fe fb4a 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	2201      	movs	r2, #1
 8003032:	4911      	ldr	r1, [pc, #68]	; (8003078 <_ZN13PathFollowing4initEv+0x74>)
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <_ZN13PathFollowing4initEv+0x6c>)
 8003036:	f7fe fb43 	bl	80016c0 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800303a:	ed97 7b06 	vldr	d7, [r7, #24]
 800303e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003042:	ed97 5b02 	vldr	d5, [r7, #8]
 8003046:	eeb0 2a45 	vmov.f32	s4, s10
 800304a:	eef0 2a65 	vmov.f32	s5, s11
 800304e:	eeb0 1a46 	vmov.f32	s2, s12
 8003052:	eef0 1a66 	vmov.f32	s3, s13
 8003056:	eeb0 0a47 	vmov.f32	s0, s14
 800305a:	eef0 0a67 	vmov.f32	s1, s15
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f80c 	bl	800307c <_ZN13PathFollowing7setGainEddd>
}
 8003064:	bf00      	nop
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	080176a0 	.word	0x080176a0
 8003070:	080176a8 	.word	0x080176a8
 8003074:	080176b0 	.word	0x080176b0
 8003078:	080176b8 	.word	0x080176b8

0800307c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800307c:	b490      	push	{r4, r7}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	61f8      	str	r0, [r7, #28]
 8003084:	ed87 0b04 	vstr	d0, [r7, #16]
 8003088:	ed87 1b02 	vstr	d1, [r7, #8]
 800308c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003092:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003096:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800309c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80030a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80030aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80030ae:	bf00      	nop
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc90      	pop	{r4, r7}
 80030b6:	4770      	bx	lr
 80030b8:	200393a8 	.word	0x200393a8

080030bc <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 80030bc:	b490      	push	{r4, r7}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <_ZN13PathFollowing8getKxValEv+0x24>)
 80030c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030ca:	ec44 3b17 	vmov	d7, r3, r4
}
 80030ce:	eeb0 0a47 	vmov.f32	s0, s14
 80030d2:	eef0 0a67 	vmov.f32	s1, s15
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc90      	pop	{r4, r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200393a8 	.word	0x200393a8

080030e4 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 80030e4:	b490      	push	{r4, r7}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <_ZN13PathFollowing8getKyValEv+0x24>)
 80030ee:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80030f2:	ec44 3b17 	vmov	d7, r3, r4
}
 80030f6:	eeb0 0a47 	vmov.f32	s0, s14
 80030fa:	eef0 0a67 	vmov.f32	s1, s15
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bc90      	pop	{r4, r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200393a8 	.word	0x200393a8

0800310c <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 800310c:	b490      	push	{r4, r7}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003116:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800311a:	ec44 3b17 	vmov	d7, r3, r4
}
 800311e:	eeb0 0a47 	vmov.f32	s0, s14
 8003122:	eef0 0a67 	vmov.f32	s1, s15
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bc90      	pop	{r4, r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	200393a8 	.word	0x200393a8

08003134 <_ZN13PathFollowing18setTargetPathMultiEv>:
	rtU.target_y = y;
	rtU.th = th;
}

void PathFollowing::setTargetPathMulti()
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	sd_read_array_double("Pos", "TH_S2.txt", LOG_DATA_SIZE_DIS, log_delta_thetas_);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003142:	33a0      	adds	r3, #160	; 0xa0
 8003144:	f241 7270 	movw	r2, #6000	; 0x1770
 8003148:	490f      	ldr	r1, [pc, #60]	; (8003188 <_ZN13PathFollowing18setTargetPathMultiEv+0x54>)
 800314a:	4810      	ldr	r0, [pc, #64]	; (800318c <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 800314c:	f7fe fab8 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Pos", "DIS_S2.txt", LOG_DATA_SIZE_DIS, log_distances_);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3320      	adds	r3, #32
 8003154:	f241 7270 	movw	r2, #6000	; 0x1770
 8003158:	490d      	ldr	r1, [pc, #52]	; (8003190 <_ZN13PathFollowing18setTargetPathMultiEv+0x5c>)
 800315a:	480c      	ldr	r0, [pc, #48]	; (800318c <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 800315c:	f7fe fab0 	bl	80016c0 <sd_read_array_double>

	mon_log_dis = log_distances_[1];
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <_ZN13PathFollowing18setTargetPathMultiEv+0x60>)
 8003168:	e9c2 3400 	strd	r3, r4, [r2]
	mon_log_th = log_delta_thetas_[1];
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003172:	33a8      	adds	r3, #168	; 0xa8
 8003174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <_ZN13PathFollowing18setTargetPathMultiEv+0x64>)
 800317a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	bf00      	nop
 8003188:	080176c0 	.word	0x080176c0
 800318c:	080176cc 	.word	0x080176cc
 8003190:	080176d0 	.word	0x080176d0
 8003194:	20000238 	.word	0x20000238
 8003198:	20000240 	.word	0x20000240
 800319c:	00000000 	.word	0x00000000

080031a0 <_ZN13PathFollowing12targetUpdateERdS0_>:

bool PathFollowing::targetUpdate(double &v, double &w)
{
 80031a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
	bool update_flag = false;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]

	if(execute_flag_ == true){
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8136 	beq.w	8003428 <_ZN13PathFollowing12targetUpdateERdS0_+0x288>
		//if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 30) == true && isNear(rtU.th_cur, th_tar_, 1.100) == true){
		if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 10) == true && isNear(rtU.th_cur, th_tar_, 3) == true){
 80031bc:	4bae      	ldr	r3, [pc, #696]	; (8003478 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d8>)
 80031be:	ed93 7b06 	vldr	d7, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80031c8:	ed9f 2ba7 	vldr	d2, [pc, #668]	; 8003468 <_ZN13PathFollowing12targetUpdateERdS0_+0x2c8>
 80031cc:	eeb0 1a46 	vmov.f32	s2, s12
 80031d0:	eef0 1a66 	vmov.f32	s3, s13
 80031d4:	eeb0 0a47 	vmov.f32	s0, s14
 80031d8:	eef0 0a67 	vmov.f32	s1, s15
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff fedd 	bl	8002f9c <_ZN13PathFollowing6isNearEddd>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d02d      	beq.n	8003244 <_ZN13PathFollowing12targetUpdateERdS0_+0xa4>
 80031e8:	4ba3      	ldr	r3, [pc, #652]	; (8003478 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d8>)
 80031ea:	ed93 7b08 	vldr	d7, [r3, #32]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	ed93 6b04 	vldr	d6, [r3, #16]
 80031f4:	ed9f 2b9c 	vldr	d2, [pc, #624]	; 8003468 <_ZN13PathFollowing12targetUpdateERdS0_+0x2c8>
 80031f8:	eeb0 1a46 	vmov.f32	s2, s12
 80031fc:	eef0 1a66 	vmov.f32	s3, s13
 8003200:	eeb0 0a47 	vmov.f32	s0, s14
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fec7 	bl	8002f9c <_ZN13PathFollowing6isNearEddd>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <_ZN13PathFollowing12targetUpdateERdS0_+0xa4>
 8003214:	4b98      	ldr	r3, [pc, #608]	; (8003478 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d8>)
 8003216:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	ed93 6b06 	vldr	d6, [r3, #24]
 8003220:	ed9f 2b93 	vldr	d2, [pc, #588]	; 8003470 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d0>
 8003224:	eeb0 1a46 	vmov.f32	s2, s12
 8003228:	eef0 1a66 	vmov.f32	s3, s13
 800322c:	eeb0 0a47 	vmov.f32	s0, s14
 8003230:	eef0 0a67 	vmov.f32	s1, s15
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff feb1 	bl	8002f9c <_ZN13PathFollowing6isNearEddd>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <_ZN13PathFollowing12targetUpdateERdS0_+0xa4>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <_ZN13PathFollowing12targetUpdateERdS0_+0xa6>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80da 	beq.w	8003400 <_ZN13PathFollowing12targetUpdateERdS0_+0x260>
			update_flag = true;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
			ref_num++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003256:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003266:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800326a:	801a      	strh	r2, [r3, #0]
			x_tar_ = x_tar_ + log_distances_[ref_num] * cos(th_tar_ + log_delta_thetas_[ref_num] / 2);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003278:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	3304      	adds	r3, #4
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003296:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80032a2:	3314      	adds	r3, #20
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b4:	f7fd fae2 	bl	800087c <__aeabi_ddiv>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4650      	mov	r0, sl
 80032be:	4659      	mov	r1, fp
 80032c0:	f7fc fffc 	bl	80002bc <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	ec43 2b17 	vmov	d7, r2, r3
 80032cc:	eeb0 0a47 	vmov.f32	s0, s14
 80032d0:	eef0 0a67 	vmov.f32	s1, s15
 80032d4:	f00e f930 	bl	8011538 <cos>
 80032d8:	ec53 2b10 	vmov	r2, r3, d0
 80032dc:	4640      	mov	r0, r8
 80032de:	4649      	mov	r1, r9
 80032e0:	f7fd f9a2 	bl	8000628 <__aeabi_dmul>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4620      	mov	r0, r4
 80032ea:	4629      	mov	r1, r5
 80032ec:	f7fc ffe6 	bl	80002bc <__adddf3>
 80032f0:	4603      	mov	r3, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
			y_tar_ = y_tar_ + log_distances_[ref_num] * sin(th_tar_ + log_delta_thetas_[ref_num] / 2);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003306:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	3304      	adds	r3, #4
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003324:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003330:	3314      	adds	r3, #20
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003342:	f7fd fa9b 	bl	800087c <__aeabi_ddiv>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4650      	mov	r0, sl
 800334c:	4659      	mov	r1, fp
 800334e:	f7fc ffb5 	bl	80002bc <__adddf3>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	ec43 2b17 	vmov	d7, r2, r3
 800335a:	eeb0 0a47 	vmov.f32	s0, s14
 800335e:	eef0 0a67 	vmov.f32	s1, s15
 8003362:	f00e f92d 	bl	80115c0 <sin>
 8003366:	ec53 2b10 	vmov	r2, r3, d0
 800336a:	4640      	mov	r0, r8
 800336c:	4649      	mov	r1, r9
 800336e:	f7fd f95b 	bl	8000628 <__aeabi_dmul>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	f7fc ff9f 	bl	80002bc <__adddf3>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	e9c2 3404 	strd	r3, r4, [r2, #16]
			th_tar_ = th_tar_ + log_delta_thetas_[ref_num];
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003394:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80033a0:	3314      	adds	r3, #20
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4623      	mov	r3, r4
 80033ae:	f7fc ff85 	bl	80002bc <__adddf3>
 80033b2:	4603      	mov	r3, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	e9c2 3406 	strd	r3, r4, [r2, #24]

			rtU.target_x = x_tar_;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80033c2:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d8>)
 80033c4:	e9c2 3400 	strd	r3, r4, [r2]
			rtU.target_y = y_tar_;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80033ce:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d8>)
 80033d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
			rtU.th = th_tar_;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80033da:	4a27      	ldr	r2, [pc, #156]	; (8003478 <_ZN13PathFollowing12targetUpdateERdS0_+0x2d8>)
 80033dc:	e9c2 3404 	strd	r3, r4, [r2, #16]

			flip();
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f875 	bl	80034d0 <_ZN13PathFollowing4flipEv>

			v = rtY.V_tar;
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <_ZN13PathFollowing12targetUpdateERdS0_+0x2dc>)
 80033e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	e9c2 3400 	strd	r3, r4, [r2]
			w = rtY.tar;
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <_ZN13PathFollowing12targetUpdateERdS0_+0x2dc>)
 80033f4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	e9c2 3400 	strd	r3, r4, [r2]
 80033fe:	e001      	b.n	8003404 <_ZN13PathFollowing12targetUpdateERdS0_+0x264>
		}
		else{
			update_flag = false;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
		}
		if(ref_num >= LOG_DATA_SIZE_DIS) ref_num = LOG_DATA_SIZE_DIS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800340a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	f241 726f 	movw	r2, #5999	; 0x176f
 8003414:	4293      	cmp	r3, r2
 8003416:	d907      	bls.n	8003428 <_ZN13PathFollowing12targetUpdateERdS0_+0x288>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800341e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003422:	f241 7270 	movw	r2, #6000	; 0x1770
 8003426:	801a      	strh	r2, [r3, #0]



	}

	mon_ref_num = ref_num;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800342e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <_ZN13PathFollowing12targetUpdateERdS0_+0x2e0>)
 8003436:	801a      	strh	r2, [r3, #0]
	mon_x = x_tar_;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800343e:	4a11      	ldr	r2, [pc, #68]	; (8003484 <_ZN13PathFollowing12targetUpdateERdS0_+0x2e4>)
 8003440:	e9c2 3400 	strd	r3, r4, [r2]
	mon_y = y_tar_;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800344a:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <_ZN13PathFollowing12targetUpdateERdS0_+0x2e8>)
 800344c:	e9c2 3400 	strd	r3, r4, [r2]
	mon_th = th_tar_;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003456:	4a0d      	ldr	r2, [pc, #52]	; (800348c <_ZN13PathFollowing12targetUpdateERdS0_+0x2ec>)
 8003458:	e9c2 3400 	strd	r3, r4, [r2]

	return update_flag;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003468:	00000000 	.word	0x00000000
 800346c:	40240000 	.word	0x40240000
 8003470:	00000000 	.word	0x00000000
 8003474:	40080000 	.word	0x40080000
 8003478:	20039338 	.word	0x20039338
 800347c:	20039398 	.word	0x20039398
 8003480:	20000218 	.word	0x20000218
 8003484:	20000220 	.word	0x20000220
 8003488:	20000228 	.word	0x20000228
 800348c:	20000230 	.word	0x20000230

08003490 <_ZN13PathFollowing14setCurrentPathEddd>:


void PathFollowing::setCurrentPath(double x, double y, double th)
{
 8003490:	b490      	push	{r4, r7}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	61f8      	str	r0, [r7, #28]
 8003498:	ed87 0b04 	vstr	d0, [r7, #16]
 800349c:	ed87 1b02 	vstr	d1, [r7, #8]
 80034a0:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 80034a4:	4a09      	ldr	r2, [pc, #36]	; (80034cc <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80034a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034aa:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80034b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80034ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034be:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 80034c2:	bf00      	nop
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc90      	pop	{r4, r7}
 80034ca:	4770      	bx	lr
 80034cc:	20039338 	.word	0x20039338

080034d0 <_ZN13PathFollowing4flipEv>:
	v = rtY.V_tar;
	omega = rtY.tar;

}
void PathFollowing::flip()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <_ZN13PathFollowing4flipEv+0x14>
		path_following_step();
 80034e0:	f001 fbf8 	bl	8004cd4 <path_following_step>
	}
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZN13PathFollowing5startEv>:

void PathFollowing::start()
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	execute_flag_ = true;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_ZN13PathFollowing4stopEv>:

void PathFollowing::stop()
{
 8003506:	b490      	push	{r4, r7}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
	execute_flag_ = false;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
	ref_num = 0;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800351a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800351e:	2200      	movs	r2, #0
 8003520:	801a      	strh	r2, [r3, #0]
	x_tar_ = 0;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	y_tar_ = 0;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f04f 0400 	mov.w	r4, #0
 800353a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	th_tar_ = 0;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	f04f 0400 	mov.w	r4, #0
 8003548:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bc90      	pop	{r4, r7}
 8003554:	4770      	bx	lr

08003556 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800355e:	2088      	movs	r0, #136	; 0x88
 8003560:	f7fe fca3 	bl	8001eaa <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003564:	2080      	movs	r0, #128	; 0x80
 8003566:	f7fe fca0 	bl	8001eaa <INA260_init>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	0000      	movs	r0, r0
 8003574:	0000      	movs	r0, r0
	...

08003578 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003580:	2188      	movs	r1, #136	; 0x88
 8003582:	2002      	movs	r0, #2
 8003584:	f7fe fc2e 	bl	8001de4 <INA260_read>
 8003588:	4603      	mov	r3, r0
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ffe2 	bl	8000554 <__aeabi_i2d>
 8003590:	a30c      	add	r3, pc, #48	; (adr r3, 80035c4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f847 	bl	8000628 <__aeabi_dmul>
 800359a:	4603      	mov	r3, r0
 800359c:	460c      	mov	r4, r1
 800359e:	4618      	mov	r0, r3
 80035a0:	4621      	mov	r1, r4
 80035a2:	f7fd fb39 	bl	8000c18 <__aeabi_d2f>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}
 80035bc:	f3af 8000 	nop.w
 80035c0:	20000248 	.word	0x20000248
 80035c4:	47ae147b 	.word	0x47ae147b
 80035c8:	3f547ae1 	.word	0x3f547ae1
 80035cc:	00000000 	.word	0x00000000

080035d0 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc ffc9 	bl	8000578 <__aeabi_f2d>
 80035e6:	a311      	add	r3, pc, #68	; (adr r3, 800362c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fd fa8e 	bl	8000b0c <__aeabi_dcmplt>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <_ZN11PowerSensor12butteryCheckEv+0x34>
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	3301      	adds	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	e002      	b.n	800360a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003606:	2200      	movs	r2, #0
 8003608:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003618:	2201      	movs	r2, #1
 800361a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	2000024c 	.word	0x2000024c
 800362c:	9999999a 	.word	0x9999999a
 8003630:	401d9999 	.word	0x401d9999

08003634 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003640:	2102      	movs	r1, #2
 8003642:	4822      	ldr	r0, [pc, #136]	; (80036cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003644:	f004 fce8 	bl	8008018 <HAL_GPIO_ReadPin>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003658:	89fb      	ldrh	r3, [r7, #14]
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003660:	2108      	movs	r1, #8
 8003662:	481a      	ldr	r0, [pc, #104]	; (80036cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003664:	f004 fcd8 	bl	8008018 <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003678:	89fb      	ldrh	r3, [r7, #14]
 800367a:	f043 0302 	orr.w	r3, r3, #2
 800367e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003680:	2110      	movs	r1, #16
 8003682:	4812      	ldr	r0, [pc, #72]	; (80036cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003684:	f004 fcc8 	bl	8008018 <HAL_GPIO_ReadPin>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003698:	89fb      	ldrh	r3, [r7, #14]
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	480a      	ldr	r0, [pc, #40]	; (80036cc <_ZN12RotarySwitch8getValueEv+0x98>)
 80036a4:	f004 fcb8 	bl	8008018 <HAL_GPIO_ReadPin>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80036b8:	89fb      	ldrh	r3, [r7, #14]
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80036c0:	89fb      	ldrh	r3, [r7, #14]

}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40020c00 	.word	0x40020c00

080036d0 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
{

}
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d111      	bne.n	800371e <_ZN10SideSensor12updateStatusEt+0x36>
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e010      	b.n	8003740 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d10d      	bne.n	8003740 <_ZN10SideSensor12updateStatusEt+0x58>
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	f083 0301 	eor.w	r3, r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003746:	d111      	bne.n	800376c <_ZN10SideSensor12updateStatusEt+0x84>
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	f083 0301 	eor.w	r3, r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f043 0302 	orr.w	r3, r3, #2
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 800376a:	e011      	b.n	8003790 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d10d      	bne.n	8003790 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f083 0302 	eor.w	r3, r3, #2
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	2000024e 	.word	0x2000024e
 80037a0:	2000024f 	.word	0x2000024f

080037a4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80037a4:	b490      	push	{r4, r7}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	f04f 0400 	mov.w	r4, #0
 80037d4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	619a      	str	r2, [r3, #24]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	61da      	str	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bc90      	pop	{r4, r7}
 800382c:	4770      	bx	lr
	...

08003830 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	f107 0208 	add.w	r2, r7, #8
 8003840:	f107 0110 	add.w	r1, r7, #16
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fd7f 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 800384a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800384e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	f7fc fd31 	bl	80002bc <__adddf3>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	4618      	mov	r0, r3
 8003860:	4621      	mov	r1, r4
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800386a:	f7fd f807 	bl	800087c <__aeabi_ddiv>
 800386e:	4603      	mov	r3, r0
 8003870:	460c      	mov	r4, r1
 8003872:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003876:	a310      	add	r3, pc, #64	; (adr r3, 80038b8 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003880:	f7fc fed2 	bl	8000628 <__aeabi_dmul>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	4618      	mov	r0, r3
 800388a:	4621      	mov	r1, r4
 800388c:	f7fd f9c4 	bl	8000c18 <__aeabi_d2f>
 8003890:	4602      	mov	r2, r0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fe6c 	bl	8000578 <__aeabi_f2d>
 80038a0:	4603      	mov	r3, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	ec44 3b17 	vmov	d7, r3, r4
}
 80038a8:	eeb0 0a47 	vmov.f32	s0, s14
 80038ac:	eef0 0a67 	vmov.f32	s1, s15
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	1ab1d998 	.word	0x1ab1d998
 80038bc:	3f7830b5 	.word	0x3f7830b5

080038c0 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b08d      	sub	sp, #52	; 0x34
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	ed93 7a00 	vldr	s14, [r3]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80038d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fe49 	bl	8000578 <__aeabi_f2d>
 80038e6:	4604      	mov	r4, r0
 80038e8:	460d      	mov	r5, r1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe f99e 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 80038f4:	ec53 2b10 	vmov	r2, r3, d0
 80038f8:	4620      	mov	r0, r4
 80038fa:	4629      	mov	r1, r5
 80038fc:	f7fc fcdc 	bl	80002b8 <__aeabi_dsub>
 8003900:	4603      	mov	r3, r0
 8003902:	460c      	mov	r4, r1
 8003904:	4618      	mov	r0, r3
 8003906:	4621      	mov	r1, r4
 8003908:	f7fd f986 	bl	8000c18 <__aeabi_d2f>
 800390c:	4603      	mov	r3, r0
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	edd3 7a06 	vldr	s15, [r3, #24]
 8003916:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	ed93 7a07 	vldr	s14, [r3, #28]
 8003928:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <_ZN12VelocityCtrl3pidEv+0x238>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003932:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	ee17 0a90 	vmov	r0, s15
 800393e:	f7fc fe1b 	bl	8000578 <__aeabi_f2d>
 8003942:	a36b      	add	r3, pc, #428	; (adr r3, 8003af0 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fe6e 	bl	8000628 <__aeabi_dmul>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	4618      	mov	r0, r3
 8003952:	4621      	mov	r1, r4
 8003954:	f7fd f960 	bl	8000c18 <__aeabi_d2f>
 8003958:	4603      	mov	r3, r0
 800395a:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 800395c:	4b67      	ldr	r3, [pc, #412]	; (8003afc <_ZN12VelocityCtrl3pidEv+0x23c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fe09 	bl	8000578 <__aeabi_f2d>
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003970:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003978:	ee17 0a90 	vmov	r0, s15
 800397c:	f7fc fdfc 	bl	8000578 <__aeabi_f2d>
 8003980:	a35b      	add	r3, pc, #364	; (adr r3, 8003af0 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fe4f 	bl	8000628 <__aeabi_dmul>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4620      	mov	r0, r4
 8003990:	4629      	mov	r1, r5
 8003992:	f7fc fc93 	bl	80002bc <__adddf3>
 8003996:	4603      	mov	r3, r0
 8003998:	460c      	mov	r4, r1
 800399a:	4618      	mov	r0, r3
 800399c:	4621      	mov	r1, r4
 800399e:	f7fd f93b 	bl	8000c18 <__aeabi_d2f>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b55      	ldr	r3, [pc, #340]	; (8003afc <_ZN12VelocityCtrl3pidEv+0x23c>)
 80039a6:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80039ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80039c0:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <_ZN12VelocityCtrl3pidEv+0x240>)
 80039c2:	edd3 7a00 	vldr	s15, [r3]
 80039c6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80039ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	ee17 0a90 	vmov	r0, s15
 80039d6:	f7fc fdcf 	bl	8000578 <__aeabi_f2d>
 80039da:	a345      	add	r3, pc, #276	; (adr r3, 8003af0 <_ZN12VelocityCtrl3pidEv+0x230>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc fe22 	bl	8000628 <__aeabi_dmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	4618      	mov	r0, r3
 80039ea:	4621      	mov	r1, r4
 80039ec:	f7fd f914 	bl	8000c18 <__aeabi_d2f>
 80039f0:	4603      	mov	r3, r0
 80039f2:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <_ZN12VelocityCtrl3pidEv+0x244>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fdbd 	bl	8000578 <__aeabi_f2d>
 80039fe:	4604      	mov	r4, r0
 8003a00:	460d      	mov	r5, r1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003a08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a10:	ee17 0a90 	vmov	r0, s15
 8003a14:	f7fc fdb0 	bl	8000578 <__aeabi_f2d>
 8003a18:	a335      	add	r3, pc, #212	; (adr r3, 8003af0 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fe03 	bl	8000628 <__aeabi_dmul>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4620      	mov	r0, r4
 8003a28:	4629      	mov	r1, r5
 8003a2a:	f7fc fc47 	bl	80002bc <__adddf3>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	4618      	mov	r0, r3
 8003a34:	4621      	mov	r1, r4
 8003a36:	f7fd f8ef 	bl	8000c18 <__aeabi_d2f>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003a3e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003a40:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a44:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <_ZN12VelocityCtrl3pidEv+0x23c>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a56:	edc7 7a05 	vstr	s15, [r7, #20]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 8003a5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a6a:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a74:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003a78:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003a86:	edd3 7a00 	vldr	s15, [r3]
 8003a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a8e:	eef1 7a67 	vneg.f32	s15, s15
 8003a92:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa6:	ee17 0a90 	vmov	r0, s15
 8003aaa:	f7fc fd65 	bl	8000578 <__aeabi_f2d>
 8003aae:	4605      	mov	r5, r0
 8003ab0:	460e      	mov	r6, r1
 8003ab2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ab6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	ee17 0a90 	vmov	r0, s15
 8003ac2:	f7fc fd59 	bl	8000578 <__aeabi_f2d>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	ec43 2b11 	vmov	d1, r2, r3
 8003ace:	ec46 5b10 	vmov	d0, r5, r6
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7ff f81c 	bl	8002b10 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003ad8:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <_ZN12VelocityCtrl3pidEv+0x238>)
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	3734      	adds	r7, #52	; 0x34
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aec:	f3af 8000 	nop.w
 8003af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003af4:	3f50624d 	.word	0x3f50624d
 8003af8:	20000250 	.word	0x20000250
 8003afc:	20000258 	.word	0x20000258
 8003b00:	20000254 	.word	0x20000254
 8003b04:	2000025c 	.word	0x2000025c

08003b08 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b14:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b40:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b6e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b72:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fe47 	bl	8003830 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff fe87 	bl	80038c0 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003c08 <_ZN12VelocityCtrl4stopEv+0x30>
 8003bf0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003c08 <_ZN12VelocityCtrl4stopEv+0x30>
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe ff8b 	bl	8002b10 <_ZN5Motor8setRatioEdd>

}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	f3af 8000 	nop.w
	...

08003c10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c38:	e000      	b.n	8003c3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f9      	beq.n	8003c3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c50:	687b      	ldr	r3, [r7, #4]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e009      	b.n	8003c84 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	60ba      	str	r2, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ffc9 	bl	8003c10 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dbf1      	blt.n	8003c70 <_write+0x12>
  }
  return len;
 8003c8c:	687b      	ldr	r3, [r7, #4]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 f8ce 	bl	8005e44 <cppExit>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1e      	ldr	r2, [pc, #120]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003cc2:	f001 ffff 	bl	8005cc4 <cppFlip1ms>

		tim6_timer++;
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003cce:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d902      	bls.n	8003ce0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003cea:	f002 f815 	bl	8005d18 <cppFlip100ns>

		tim7_timer++;
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003cf6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d902      	bls.n	8003d08 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003d12:	f002 f80b 	bl	8005d2c <cppFlip10ms>

		tim13_timer++;
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d1e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d902      	bls.n	8003d30 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
	}

}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40001000 	.word	0x40001000
 8003d3c:	20039014 	.word	0x20039014
 8003d40:	0001869f 	.word	0x0001869f
 8003d44:	40001400 	.word	0x40001400
 8003d48:	20039058 	.word	0x20039058
 8003d4c:	40001c00 	.word	0x40001c00
 8003d50:	2003905c 	.word	0x2003905c

08003d54 <init>:

void init()
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d5e:	4808      	ldr	r0, [pc, #32]	; (8003d80 <init+0x2c>)
 8003d60:	f004 f972 	bl	8008048 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003d64:	4807      	ldr	r0, [pc, #28]	; (8003d84 <init+0x30>)
 8003d66:	f008 f852 	bl	800be0e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003d6a:	4807      	ldr	r0, [pc, #28]	; (8003d88 <init+0x34>)
 8003d6c:	f008 f84f 	bl	800be0e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003d70:	4806      	ldr	r0, [pc, #24]	; (8003d8c <init+0x38>)
 8003d72:	f008 f84c 	bl	800be0e <HAL_TIM_Base_Start_IT>

	cppInit();
 8003d76:	f001 ff1f 	bl	8005bb8 <cppInit>

	//path_following_initialize();

}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	20039140 	.word	0x20039140
 8003d88:	200392e4 	.word	0x200392e4
 8003d8c:	20039060 	.word	0x20039060

08003d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d94:	f002 fe50 	bl	8006a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d98:	f000 f82a 	bl	8003df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d9c:	f000 fdbc 	bl	8004918 <MX_GPIO_Init>
  MX_DMA_Init();
 8003da0:	f000 fd8a 	bl	80048b8 <MX_DMA_Init>
  MX_I2C2_Init();
 8003da4:	f000 f9e8 	bl	8004178 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003da8:	f000 fa14 	bl	80041d4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003dac:	f000 fa32 	bl	8004214 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003db0:	f000 fa66 	bl	8004280 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003db4:	f000 fb70 	bl	8004498 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003db8:	f000 fc3c 	bl	8004634 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003dbc:	f000 fd52 	bl	8004864 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003dc0:	f009 fff8 	bl	800ddb4 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003dc4:	f000 fbcc 	bl	8004560 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003dc8:	f000 f9a8 	bl	800411c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003dcc:	f000 fb00 	bl	80043d0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003dd0:	f000 fc88 	bl	80046e4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003dd4:	f000 fcd4 	bl	8004780 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003dd8:	f000 f898 	bl	8003f0c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003ddc:	f000 fbf6 	bl	80045cc <MX_TIM7_Init>
  MX_TIM13_Init();
 8003de0:	f000 fd1c 	bl	800481c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003de4:	f7ff ffb6 	bl	8003d54 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003de8:	f002 f83e 	bl	8005e68 <cppLoop>
 8003dec:	e7fc      	b.n	8003de8 <main+0x58>
	...

08003df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b0a4      	sub	sp, #144	; 0x90
 8003df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003df6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003dfa:	2234      	movs	r2, #52	; 0x34
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00e fd2a 	bl	8012858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	223c      	movs	r2, #60	; 0x3c
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00e fd1b 	bl	8012858 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <SystemClock_Config+0x114>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a36      	ldr	r2, [pc, #216]	; (8003f04 <SystemClock_Config+0x114>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <SystemClock_Config+0x114>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <SystemClock_Config+0x118>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <SystemClock_Config+0x118>)
 8003e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <SystemClock_Config+0x118>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e64:	2302      	movs	r3, #2
 8003e66:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e6c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e6e:	2308      	movs	r3, #8
 8003e70:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003e72:	23b4      	movs	r3, #180	; 0xb4
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e84:	2302      	movs	r3, #2
 8003e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f005 fd14 	bl	80098bc <HAL_RCC_OscConfig>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003e9a:	f000 fe93 	bl	8004bc4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003e9e:	f005 f88f 	bl	8008fc0 <HAL_PWREx_EnableOverDrive>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003ea8:	f000 fe8c 	bl	8004bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eac:	230f      	movs	r3, #15
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003eb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ebc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ec4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec8:	2105      	movs	r1, #5
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 f8c8 	bl	8009060 <HAL_RCC_ClockConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003ed6:	f000 fe75 	bl	8004bc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003eda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003ede:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	4618      	mov	r0, r3
 8003eee:	f005 faa7 	bl	8009440 <HAL_RCCEx_PeriphCLKConfig>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003ef8:	f000 fe64 	bl	8004bc4 <Error_Handler>
  }
}
 8003efc:	bf00      	nop
 8003efe:	3790      	adds	r7, #144	; 0x90
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40007000 	.word	0x40007000

08003f0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f12:	463b      	mov	r3, r7
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003f1e:	4b7c      	ldr	r3, [pc, #496]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f20:	4a7c      	ldr	r2, [pc, #496]	; (8004114 <MX_ADC2_Init+0x208>)
 8003f22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f24:	4b7a      	ldr	r3, [pc, #488]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f2c:	4b78      	ldr	r3, [pc, #480]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003f32:	4b77      	ldr	r3, [pc, #476]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003f38:	4b75      	ldr	r3, [pc, #468]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f3e:	4b74      	ldr	r3, [pc, #464]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f46:	4b72      	ldr	r3, [pc, #456]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f4c:	4b70      	ldr	r3, [pc, #448]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f4e:	4a72      	ldr	r2, [pc, #456]	; (8004118 <MX_ADC2_Init+0x20c>)
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f52:	4b6f      	ldr	r3, [pc, #444]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003f58:	4b6d      	ldr	r3, [pc, #436]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f5a:	220e      	movs	r2, #14
 8003f5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f66:	4b6a      	ldr	r3, [pc, #424]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f6c:	4868      	ldr	r0, [pc, #416]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f6e:	f002 fdf7 	bl	8006b60 <HAL_ADC_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003f78:	f000 fe24 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003f7c:	230a      	movs	r3, #10
 8003f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f80:	2301      	movs	r3, #1
 8003f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003f84:	2306      	movs	r3, #6
 8003f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f88:	463b      	mov	r3, r7
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4860      	ldr	r0, [pc, #384]	; (8004110 <MX_ADC2_Init+0x204>)
 8003f8e:	f002 ff3b 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003f98:	f000 fe14 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003f9c:	230b      	movs	r3, #11
 8003f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4859      	ldr	r0, [pc, #356]	; (8004110 <MX_ADC2_Init+0x204>)
 8003faa:	f002 ff2d 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003fb4:	f000 fe06 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003fb8:	230c      	movs	r3, #12
 8003fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4852      	ldr	r0, [pc, #328]	; (8004110 <MX_ADC2_Init+0x204>)
 8003fc6:	f002 ff1f 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003fd0:	f000 fdf8 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003fd4:	230d      	movs	r3, #13
 8003fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003fd8:	2304      	movs	r3, #4
 8003fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	4619      	mov	r1, r3
 8003fe0:	484b      	ldr	r0, [pc, #300]	; (8004110 <MX_ADC2_Init+0x204>)
 8003fe2:	f002 ff11 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003fec:	f000 fdea 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003ff4:	2305      	movs	r3, #5
 8003ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4844      	ldr	r0, [pc, #272]	; (8004110 <MX_ADC2_Init+0x204>)
 8003ffe:	f002 ff03 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004008:	f000 fddc 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800400c:	2301      	movs	r3, #1
 800400e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004010:	2306      	movs	r3, #6
 8004012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004014:	463b      	mov	r3, r7
 8004016:	4619      	mov	r1, r3
 8004018:	483d      	ldr	r0, [pc, #244]	; (8004110 <MX_ADC2_Init+0x204>)
 800401a:	f002 fef5 	bl	8006e08 <HAL_ADC_ConfigChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004024:	f000 fdce 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004028:	2302      	movs	r3, #2
 800402a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800402c:	2307      	movs	r3, #7
 800402e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004030:	463b      	mov	r3, r7
 8004032:	4619      	mov	r1, r3
 8004034:	4836      	ldr	r0, [pc, #216]	; (8004110 <MX_ADC2_Init+0x204>)
 8004036:	f002 fee7 	bl	8006e08 <HAL_ADC_ConfigChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004040:	f000 fdc0 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004044:	2303      	movs	r3, #3
 8004046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004048:	2308      	movs	r3, #8
 800404a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800404c:	463b      	mov	r3, r7
 800404e:	4619      	mov	r1, r3
 8004050:	482f      	ldr	r0, [pc, #188]	; (8004110 <MX_ADC2_Init+0x204>)
 8004052:	f002 fed9 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800405c:	f000 fdb2 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004060:	2304      	movs	r3, #4
 8004062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004064:	2309      	movs	r3, #9
 8004066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004068:	463b      	mov	r3, r7
 800406a:	4619      	mov	r1, r3
 800406c:	4828      	ldr	r0, [pc, #160]	; (8004110 <MX_ADC2_Init+0x204>)
 800406e:	f002 fecb 	bl	8006e08 <HAL_ADC_ConfigChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004078:	f000 fda4 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800407c:	2305      	movs	r3, #5
 800407e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004080:	230a      	movs	r3, #10
 8004082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004084:	463b      	mov	r3, r7
 8004086:	4619      	mov	r1, r3
 8004088:	4821      	ldr	r0, [pc, #132]	; (8004110 <MX_ADC2_Init+0x204>)
 800408a:	f002 febd 	bl	8006e08 <HAL_ADC_ConfigChannel>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004094:	f000 fd96 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004098:	2306      	movs	r3, #6
 800409a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800409c:	230b      	movs	r3, #11
 800409e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040a0:	463b      	mov	r3, r7
 80040a2:	4619      	mov	r1, r3
 80040a4:	481a      	ldr	r0, [pc, #104]	; (8004110 <MX_ADC2_Init+0x204>)
 80040a6:	f002 feaf 	bl	8006e08 <HAL_ADC_ConfigChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80040b0:	f000 fd88 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80040b4:	2307      	movs	r3, #7
 80040b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80040b8:	230c      	movs	r3, #12
 80040ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040bc:	463b      	mov	r3, r7
 80040be:	4619      	mov	r1, r3
 80040c0:	4813      	ldr	r0, [pc, #76]	; (8004110 <MX_ADC2_Init+0x204>)
 80040c2:	f002 fea1 	bl	8006e08 <HAL_ADC_ConfigChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80040cc:	f000 fd7a 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80040d0:	2308      	movs	r3, #8
 80040d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80040d4:	230d      	movs	r3, #13
 80040d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040d8:	463b      	mov	r3, r7
 80040da:	4619      	mov	r1, r3
 80040dc:	480c      	ldr	r0, [pc, #48]	; (8004110 <MX_ADC2_Init+0x204>)
 80040de:	f002 fe93 	bl	8006e08 <HAL_ADC_ConfigChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80040e8:	f000 fd6c 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80040ec:	2309      	movs	r3, #9
 80040ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80040f0:	230e      	movs	r3, #14
 80040f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040f4:	463b      	mov	r3, r7
 80040f6:	4619      	mov	r1, r3
 80040f8:	4805      	ldr	r0, [pc, #20]	; (8004110 <MX_ADC2_Init+0x204>)
 80040fa:	f002 fe85 	bl	8006e08 <HAL_ADC_ConfigChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004104:	f000 fd5e 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20038ee4 	.word	0x20038ee4
 8004114:	40012100 	.word	0x40012100
 8004118:	0f000001 	.word	0x0f000001

0800411c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <MX_I2C1_Init+0x50>)
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <MX_I2C1_Init+0x54>)
 8004124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <MX_I2C1_Init+0x50>)
 8004128:	4a12      	ldr	r2, [pc, #72]	; (8004174 <MX_I2C1_Init+0x58>)
 800412a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <MX_I2C1_Init+0x50>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <MX_I2C1_Init+0x50>)
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <MX_I2C1_Init+0x50>)
 800413a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800413e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <MX_I2C1_Init+0x50>)
 8004142:	2200      	movs	r2, #0
 8004144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <MX_I2C1_Init+0x50>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <MX_I2C1_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <MX_I2C1_Init+0x50>)
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <MX_I2C1_Init+0x50>)
 800415a:	f003 ffa7 	bl	80080ac <HAL_I2C_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004164:	f000 fd2e 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20038f2c 	.word	0x20038f2c
 8004170:	40005400 	.word	0x40005400
 8004174:	000186a0 	.word	0x000186a0

08004178 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <MX_I2C2_Init+0x50>)
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <MX_I2C2_Init+0x54>)
 8004180:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_I2C2_Init+0x50>)
 8004184:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <MX_I2C2_Init+0x58>)
 8004186:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <MX_I2C2_Init+0x50>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_I2C2_Init+0x50>)
 8004190:	2200      	movs	r2, #0
 8004192:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_I2C2_Init+0x50>)
 8004196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800419a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <MX_I2C2_Init+0x50>)
 800419e:	2200      	movs	r2, #0
 80041a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <MX_I2C2_Init+0x50>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <MX_I2C2_Init+0x50>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_I2C2_Init+0x50>)
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80041b4:	4804      	ldr	r0, [pc, #16]	; (80041c8 <MX_I2C2_Init+0x50>)
 80041b6:	f003 ff79 	bl	80080ac <HAL_I2C_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80041c0:	f000 fd00 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20038fc0 	.word	0x20038fc0
 80041cc:	40005800 	.word	0x40005800
 80041d0:	000186a0 	.word	0x000186a0

080041d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041da:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <MX_SDIO_SD_Init+0x3c>)
 80041dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <MX_SDIO_SD_Init+0x38>)
 80041fe:	2200      	movs	r2, #0
 8004200:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	200391c0 	.word	0x200391c0
 8004210:	40012c00 	.word	0x40012c00

08004214 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <MX_SPI2_Init+0x64>)
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <MX_SPI2_Init+0x68>)
 800421c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <MX_SPI2_Init+0x64>)
 8004220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004224:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <MX_SPI2_Init+0x64>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <MX_SPI2_Init+0x64>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <MX_SPI2_Init+0x64>)
 8004234:	2202      	movs	r2, #2
 8004236:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <MX_SPI2_Init+0x64>)
 800423a:	2201      	movs	r2, #1
 800423c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <MX_SPI2_Init+0x64>)
 8004240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004244:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <MX_SPI2_Init+0x64>)
 8004248:	2228      	movs	r2, #40	; 0x28
 800424a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <MX_SPI2_Init+0x64>)
 800424e:	2200      	movs	r2, #0
 8004250:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <MX_SPI2_Init+0x64>)
 8004254:	2200      	movs	r2, #0
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <MX_SPI2_Init+0x64>)
 800425a:	2200      	movs	r2, #0
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <MX_SPI2_Init+0x64>)
 8004260:	220a      	movs	r2, #10
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004264:	4804      	ldr	r0, [pc, #16]	; (8004278 <MX_SPI2_Init+0x64>)
 8004266:	f007 f853 	bl	800b310 <HAL_SPI_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004270:	f000 fca8 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004274:	bf00      	nop
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20038e0c 	.word	0x20038e0c
 800427c:	40003800 	.word	0x40003800

08004280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b09a      	sub	sp, #104	; 0x68
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f00e fae2 	bl	8012858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800429e:	f107 0320 	add.w	r3, r7, #32
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	615a      	str	r2, [r3, #20]
 80042b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042b2:	463b      	mov	r3, r7
 80042b4:	2220      	movs	r2, #32
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00e facd 	bl	8012858 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042be:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042c0:	4a42      	ldr	r2, [pc, #264]	; (80043cc <MX_TIM1_Init+0x14c>)
 80042c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042c4:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80042d0:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d8:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042de:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e4:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042ea:	4837      	ldr	r0, [pc, #220]	; (80043c8 <MX_TIM1_Init+0x148>)
 80042ec:	f007 fdb3 	bl	800be56 <HAL_TIM_PWM_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80042f6:	f000 fc65 	bl	8004bc4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80042fa:	2303      	movs	r3, #3
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042fe:	2300      	movs	r3, #0
 8004300:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004302:	2301      	movs	r3, #1
 8004304:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004306:	2300      	movs	r3, #0
 8004308:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800430e:	2300      	movs	r3, #0
 8004310:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004312:	2301      	movs	r3, #1
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004316:	2300      	movs	r3, #0
 8004318:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800431e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004322:	4619      	mov	r1, r3
 8004324:	4828      	ldr	r0, [pc, #160]	; (80043c8 <MX_TIM1_Init+0x148>)
 8004326:	f007 fdff 	bl	800bf28 <HAL_TIM_Encoder_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004330:	f000 fc48 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004334:	2300      	movs	r3, #0
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800433c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004340:	4619      	mov	r1, r3
 8004342:	4821      	ldr	r0, [pc, #132]	; (80043c8 <MX_TIM1_Init+0x148>)
 8004344:	f008 fb26 	bl	800c994 <HAL_TIMEx_MasterConfigSynchronization>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800434e:	f000 fc39 	bl	8004bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004352:	2360      	movs	r3, #96	; 0x60
 8004354:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800435a:	2300      	movs	r3, #0
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800435e:	2300      	movs	r3, #0
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004362:	2300      	movs	r3, #0
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800436a:	2300      	movs	r3, #0
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	2208      	movs	r2, #8
 8004374:	4619      	mov	r1, r3
 8004376:	4814      	ldr	r0, [pc, #80]	; (80043c8 <MX_TIM1_Init+0x148>)
 8004378:	f007 ffa8 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004382:	f000 fc1f 	bl	8004bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800439a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800439e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80043a4:	463b      	mov	r3, r7
 80043a6:	4619      	mov	r1, r3
 80043a8:	4807      	ldr	r0, [pc, #28]	; (80043c8 <MX_TIM1_Init+0x148>)
 80043aa:	f008 fb6f 	bl	800ca8c <HAL_TIMEx_ConfigBreakDeadTime>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80043b4:	f000 fc06 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80043b8:	4803      	ldr	r0, [pc, #12]	; (80043c8 <MX_TIM1_Init+0x148>)
 80043ba:	f001 f97f 	bl	80056bc <HAL_TIM_MspPostInit>

}
 80043be:	bf00      	nop
 80043c0:	3768      	adds	r7, #104	; 0x68
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20039180 	.word	0x20039180
 80043cc:	40010000 	.word	0x40010000

080043d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d6:	f107 0320 	add.w	r3, r7, #32
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	60da      	str	r2, [r3, #12]
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	615a      	str	r2, [r3, #20]
 80043f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043f2:	4b27      	ldr	r3, [pc, #156]	; (8004490 <MX_TIM3_Init+0xc0>)
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <MX_TIM3_Init+0xc4>)
 80043f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <MX_TIM3_Init+0xc0>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <MX_TIM3_Init+0xc0>)
 8004400:	2200      	movs	r2, #0
 8004402:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004404:	4b22      	ldr	r3, [pc, #136]	; (8004490 <MX_TIM3_Init+0xc0>)
 8004406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800440a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <MX_TIM3_Init+0xc0>)
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <MX_TIM3_Init+0xc0>)
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004418:	481d      	ldr	r0, [pc, #116]	; (8004490 <MX_TIM3_Init+0xc0>)
 800441a:	f007 fd1c 	bl	800be56 <HAL_TIM_PWM_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004424:	f000 fbce 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004430:	f107 0320 	add.w	r3, r7, #32
 8004434:	4619      	mov	r1, r3
 8004436:	4816      	ldr	r0, [pc, #88]	; (8004490 <MX_TIM3_Init+0xc0>)
 8004438:	f008 faac 	bl	800c994 <HAL_TIMEx_MasterConfigSynchronization>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004442:	f000 fbbf 	bl	8004bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004446:	2360      	movs	r3, #96	; 0x60
 8004448:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	2200      	movs	r2, #0
 800445a:	4619      	mov	r1, r3
 800445c:	480c      	ldr	r0, [pc, #48]	; (8004490 <MX_TIM3_Init+0xc0>)
 800445e:	f007 ff35 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004468:	f000 fbac 	bl	8004bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	2204      	movs	r2, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4807      	ldr	r0, [pc, #28]	; (8004490 <MX_TIM3_Init+0xc0>)
 8004474:	f007 ff2a 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800447e:	f000 fba1 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004482:	4803      	ldr	r0, [pc, #12]	; (8004490 <MX_TIM3_Init+0xc0>)
 8004484:	f001 f91a 	bl	80056bc <HAL_TIM_MspPostInit>

}
 8004488:	bf00      	nop
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20039018 	.word	0x20039018
 8004494:	40000400 	.word	0x40000400

08004498 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800449e:	f107 0320 	add.w	r3, r7, #32
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	615a      	str	r2, [r3, #20]
 80044b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044bc:	4a27      	ldr	r2, [pc, #156]	; (800455c <MX_TIM4_Init+0xc4>)
 80044be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044ce:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80044d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d4:	4b20      	ldr	r3, [pc, #128]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80044e0:	481d      	ldr	r0, [pc, #116]	; (8004558 <MX_TIM4_Init+0xc0>)
 80044e2:	f007 fcb8 	bl	800be56 <HAL_TIM_PWM_Init>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80044ec:	f000 fb6a 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044f0:	2300      	movs	r3, #0
 80044f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044f8:	f107 0320 	add.w	r3, r7, #32
 80044fc:	4619      	mov	r1, r3
 80044fe:	4816      	ldr	r0, [pc, #88]	; (8004558 <MX_TIM4_Init+0xc0>)
 8004500:	f008 fa48 	bl	800c994 <HAL_TIMEx_MasterConfigSynchronization>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800450a:	f000 fb5b 	bl	8004bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800450e:	2360      	movs	r3, #96	; 0x60
 8004510:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	2208      	movs	r2, #8
 8004522:	4619      	mov	r1, r3
 8004524:	480c      	ldr	r0, [pc, #48]	; (8004558 <MX_TIM4_Init+0xc0>)
 8004526:	f007 fed1 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004530:	f000 fb48 	bl	8004bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004534:	1d3b      	adds	r3, r7, #4
 8004536:	220c      	movs	r2, #12
 8004538:	4619      	mov	r1, r3
 800453a:	4807      	ldr	r0, [pc, #28]	; (8004558 <MX_TIM4_Init+0xc0>)
 800453c:	f007 fec6 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004546:	f000 fb3d 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800454a:	4803      	ldr	r0, [pc, #12]	; (8004558 <MX_TIM4_Init+0xc0>)
 800454c:	f001 f8b6 	bl	80056bc <HAL_TIM_MspPostInit>

}
 8004550:	bf00      	nop
 8004552:	3728      	adds	r7, #40	; 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20038ea4 	.word	0x20038ea4
 800455c:	40000800 	.word	0x40000800

08004560 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004566:	463b      	mov	r3, r7
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <MX_TIM6_Init+0x64>)
 8004570:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <MX_TIM6_Init+0x68>)
 8004572:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <MX_TIM6_Init+0x64>)
 8004576:	2259      	movs	r2, #89	; 0x59
 8004578:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <MX_TIM6_Init+0x64>)
 800457c:	2200      	movs	r2, #0
 800457e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <MX_TIM6_Init+0x64>)
 8004582:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004586:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <MX_TIM6_Init+0x64>)
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800458e:	480d      	ldr	r0, [pc, #52]	; (80045c4 <MX_TIM6_Init+0x64>)
 8004590:	f007 fc12 	bl	800bdb8 <HAL_TIM_Base_Init>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800459a:	f000 fb13 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80045a6:	463b      	mov	r3, r7
 80045a8:	4619      	mov	r1, r3
 80045aa:	4806      	ldr	r0, [pc, #24]	; (80045c4 <MX_TIM6_Init+0x64>)
 80045ac:	f008 f9f2 	bl	800c994 <HAL_TIMEx_MasterConfigSynchronization>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80045b6:	f000 fb05 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20039140 	.word	0x20039140
 80045c8:	40001000 	.word	0x40001000

080045cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045d2:	463b      	mov	r3, r7
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <MX_TIM7_Init+0x60>)
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <MX_TIM7_Init+0x64>)
 80045de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <MX_TIM7_Init+0x60>)
 80045e2:	22b3      	movs	r2, #179	; 0xb3
 80045e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <MX_TIM7_Init+0x60>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <MX_TIM7_Init+0x60>)
 80045ee:	2231      	movs	r2, #49	; 0x31
 80045f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <MX_TIM7_Init+0x60>)
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80045f8:	480c      	ldr	r0, [pc, #48]	; (800462c <MX_TIM7_Init+0x60>)
 80045fa:	f007 fbdd 	bl	800bdb8 <HAL_TIM_Base_Init>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004604:	f000 fade 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004608:	2300      	movs	r3, #0
 800460a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460c:	2300      	movs	r3, #0
 800460e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004610:	463b      	mov	r3, r7
 8004612:	4619      	mov	r1, r3
 8004614:	4805      	ldr	r0, [pc, #20]	; (800462c <MX_TIM7_Init+0x60>)
 8004616:	f008 f9bd 	bl	800c994 <HAL_TIMEx_MasterConfigSynchronization>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004620:	f000 fad0 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	200392e4 	.word	0x200392e4
 8004630:	40001400 	.word	0x40001400

08004634 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f00e f908 	bl	8012858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004650:	4b22      	ldr	r3, [pc, #136]	; (80046dc <MX_TIM8_Init+0xa8>)
 8004652:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <MX_TIM8_Init+0xac>)
 8004654:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <MX_TIM8_Init+0xa8>)
 8004658:	2200      	movs	r2, #0
 800465a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800465c:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <MX_TIM8_Init+0xa8>)
 800465e:	2210      	movs	r2, #16
 8004660:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <MX_TIM8_Init+0xa8>)
 8004664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004668:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <MX_TIM8_Init+0xa8>)
 800466c:	2200      	movs	r2, #0
 800466e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <MX_TIM8_Init+0xa8>)
 8004672:	2200      	movs	r2, #0
 8004674:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <MX_TIM8_Init+0xa8>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800467c:	2303      	movs	r3, #3
 800467e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004684:	2301      	movs	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004698:	2300      	movs	r3, #0
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	4619      	mov	r1, r3
 80046a6:	480d      	ldr	r0, [pc, #52]	; (80046dc <MX_TIM8_Init+0xa8>)
 80046a8:	f007 fc3e 	bl	800bf28 <HAL_TIM_Encoder_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80046b2:	f000 fa87 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4806      	ldr	r0, [pc, #24]	; (80046dc <MX_TIM8_Init+0xa8>)
 80046c4:	f008 f966 	bl	800c994 <HAL_TIMEx_MasterConfigSynchronization>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80046ce:	f000 fa79 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80046d2:	bf00      	nop
 80046d4:	3730      	adds	r7, #48	; 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20038e64 	.word	0x20038e64
 80046e0:	40010400 	.word	0x40010400

080046e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
 80046f8:	615a      	str	r2, [r3, #20]
 80046fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <MX_TIM10_Init+0x94>)
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <MX_TIM10_Init+0x98>)
 8004700:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <MX_TIM10_Init+0x94>)
 8004704:	2200      	movs	r2, #0
 8004706:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <MX_TIM10_Init+0x94>)
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <MX_TIM10_Init+0x94>)
 8004710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004714:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <MX_TIM10_Init+0x94>)
 8004718:	2200      	movs	r2, #0
 800471a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <MX_TIM10_Init+0x94>)
 800471e:	2200      	movs	r2, #0
 8004720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004722:	4815      	ldr	r0, [pc, #84]	; (8004778 <MX_TIM10_Init+0x94>)
 8004724:	f007 fb48 	bl	800bdb8 <HAL_TIM_Base_Init>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800472e:	f000 fa49 	bl	8004bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004732:	4811      	ldr	r0, [pc, #68]	; (8004778 <MX_TIM10_Init+0x94>)
 8004734:	f007 fb8f 	bl	800be56 <HAL_TIM_PWM_Init>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800473e:	f000 fa41 	bl	8004bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004742:	2360      	movs	r3, #96	; 0x60
 8004744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	2200      	movs	r2, #0
 8004756:	4619      	mov	r1, r3
 8004758:	4807      	ldr	r0, [pc, #28]	; (8004778 <MX_TIM10_Init+0x94>)
 800475a:	f007 fdb7 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004764:	f000 fa2e 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <MX_TIM10_Init+0x94>)
 800476a:	f000 ffa7 	bl	80056bc <HAL_TIM_MspPostInit>

}
 800476e:	bf00      	nop
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20038f80 	.word	0x20038f80
 800477c:	40014400 	.word	0x40014400

08004780 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
 8004794:	615a      	str	r2, [r3, #20]
 8004796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <MX_TIM11_Init+0x94>)
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <MX_TIM11_Init+0x98>)
 800479c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <MX_TIM11_Init+0x94>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <MX_TIM11_Init+0x94>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80047aa:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <MX_TIM11_Init+0x94>)
 80047ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047b0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047b2:	4b18      	ldr	r3, [pc, #96]	; (8004814 <MX_TIM11_Init+0x94>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <MX_TIM11_Init+0x94>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80047be:	4815      	ldr	r0, [pc, #84]	; (8004814 <MX_TIM11_Init+0x94>)
 80047c0:	f007 fafa 	bl	800bdb8 <HAL_TIM_Base_Init>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80047ca:	f000 f9fb 	bl	8004bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80047ce:	4811      	ldr	r0, [pc, #68]	; (8004814 <MX_TIM11_Init+0x94>)
 80047d0:	f007 fb41 	bl	800be56 <HAL_TIM_PWM_Init>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80047da:	f000 f9f3 	bl	8004bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047de:	2360      	movs	r3, #96	; 0x60
 80047e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	2200      	movs	r2, #0
 80047f2:	4619      	mov	r1, r3
 80047f4:	4807      	ldr	r0, [pc, #28]	; (8004814 <MX_TIM11_Init+0x94>)
 80047f6:	f007 fd69 	bl	800c2cc <HAL_TIM_PWM_ConfigChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004800:	f000 f9e0 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004804:	4803      	ldr	r0, [pc, #12]	; (8004814 <MX_TIM11_Init+0x94>)
 8004806:	f000 ff59 	bl	80056bc <HAL_TIM_MspPostInit>

}
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200390a0 	.word	0x200390a0
 8004818:	40014800 	.word	0x40014800

0800481c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <MX_TIM13_Init+0x40>)
 8004822:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <MX_TIM13_Init+0x44>)
 8004824:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <MX_TIM13_Init+0x40>)
 8004828:	2259      	movs	r2, #89	; 0x59
 800482a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <MX_TIM13_Init+0x40>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <MX_TIM13_Init+0x40>)
 8004834:	f242 720f 	movw	r2, #9999	; 0x270f
 8004838:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <MX_TIM13_Init+0x40>)
 800483c:	2200      	movs	r2, #0
 800483e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <MX_TIM13_Init+0x40>)
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004846:	4805      	ldr	r0, [pc, #20]	; (800485c <MX_TIM13_Init+0x40>)
 8004848:	f007 fab6 	bl	800bdb8 <HAL_TIM_Base_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004852:	f000 f9b7 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20039060 	.word	0x20039060
 8004860:	40001c00 	.word	0x40001c00

08004864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <MX_USART2_UART_Init+0x50>)
 800486c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 8004870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 800487e:	2200      	movs	r2, #0
 8004880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 8004884:	2200      	movs	r2, #0
 8004886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 800488a:	220c      	movs	r2, #12
 800488c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 8004890:	2200      	movs	r2, #0
 8004892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800489a:	4805      	ldr	r0, [pc, #20]	; (80048b0 <MX_USART2_UART_Init+0x4c>)
 800489c:	f008 f95c 	bl	800cb58 <HAL_UART_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048a6:	f000 f98d 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20039244 	.word	0x20039244
 80048b4:	40004400 	.word	0x40004400

080048b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	4b14      	ldr	r3, [pc, #80]	; (8004914 <MX_DMA_Init+0x5c>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <MX_DMA_Init+0x5c>)
 80048c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <MX_DMA_Init+0x5c>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	203a      	movs	r0, #58	; 0x3a
 80048e0:	f002 fe1d 	bl	800751e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80048e4:	203a      	movs	r0, #58	; 0x3a
 80048e6:	f002 fe36 	bl	8007556 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	203b      	movs	r0, #59	; 0x3b
 80048f0:	f002 fe15 	bl	800751e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80048f4:	203b      	movs	r0, #59	; 0x3b
 80048f6:	f002 fe2e 	bl	8007556 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2100      	movs	r1, #0
 80048fe:	2045      	movs	r0, #69	; 0x45
 8004900:	f002 fe0d 	bl	800751e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004904:	2045      	movs	r0, #69	; 0x45
 8004906:	f002 fe26 	bl	8007556 <HAL_NVIC_EnableIRQ>

}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800

08004918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800491e:	f107 031c 	add.w	r3, r7, #28
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	4b9c      	ldr	r3, [pc, #624]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a9b      	ldr	r2, [pc, #620]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004938:	f043 0310 	orr.w	r3, r3, #16
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b99      	ldr	r3, [pc, #612]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	4b95      	ldr	r3, [pc, #596]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a94      	ldr	r2, [pc, #592]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
 800495a:	4b92      	ldr	r3, [pc, #584]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	4b8e      	ldr	r3, [pc, #568]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4a8d      	ldr	r2, [pc, #564]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6313      	str	r3, [r2, #48]	; 0x30
 8004976:	4b8b      	ldr	r3, [pc, #556]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b87      	ldr	r3, [pc, #540]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a86      	ldr	r2, [pc, #536]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b84      	ldr	r3, [pc, #528]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	4b80      	ldr	r3, [pc, #512]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	4a7f      	ldr	r2, [pc, #508]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	6313      	str	r3, [r2, #48]	; 0x30
 80049ae:	4b7d      	ldr	r3, [pc, #500]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	4b79      	ldr	r3, [pc, #484]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4a78      	ldr	r2, [pc, #480]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 80049c4:	f043 0308 	orr.w	r3, r3, #8
 80049c8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ca:	4b76      	ldr	r3, [pc, #472]	; (8004ba4 <MX_GPIO_Init+0x28c>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80049d6:	2200      	movs	r2, #0
 80049d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049dc:	4872      	ldr	r0, [pc, #456]	; (8004ba8 <MX_GPIO_Init+0x290>)
 80049de:	f003 fb33 	bl	8008048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80049e2:	2200      	movs	r2, #0
 80049e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049e8:	4870      	ldr	r0, [pc, #448]	; (8004bac <MX_GPIO_Init+0x294>)
 80049ea:	f003 fb2d 	bl	8008048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80049ee:	2200      	movs	r2, #0
 80049f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049f4:	486e      	ldr	r0, [pc, #440]	; (8004bb0 <MX_GPIO_Init+0x298>)
 80049f6:	f003 fb27 	bl	8008048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80049fa:	2200      	movs	r2, #0
 80049fc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004a00:	486c      	ldr	r0, [pc, #432]	; (8004bb4 <MX_GPIO_Init+0x29c>)
 8004a02:	f003 fb21 	bl	8008048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a06:	2304      	movs	r3, #4
 8004a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004a0a:	4b6b      	ldr	r3, [pc, #428]	; (8004bb8 <MX_GPIO_Init+0x2a0>)
 8004a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a12:	f107 031c 	add.w	r3, r7, #28
 8004a16:	4619      	mov	r1, r3
 8004a18:	4863      	ldr	r0, [pc, #396]	; (8004ba8 <MX_GPIO_Init+0x290>)
 8004a1a:	f003 f953 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004a1e:	230f      	movs	r3, #15
 8004a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a22:	2303      	movs	r3, #3
 8004a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a2a:	f107 031c 	add.w	r3, r7, #28
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4862      	ldr	r0, [pc, #392]	; (8004bbc <MX_GPIO_Init+0x2a4>)
 8004a32:	f003 f947 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004a36:	23e1      	movs	r3, #225	; 0xe1
 8004a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a42:	f107 031c 	add.w	r3, r7, #28
 8004a46:	4619      	mov	r1, r3
 8004a48:	485a      	ldr	r0, [pc, #360]	; (8004bb4 <MX_GPIO_Init+0x29c>)
 8004a4a:	f003 f93b 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a52:	2303      	movs	r3, #3
 8004a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a5a:	f107 031c 	add.w	r3, r7, #28
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4852      	ldr	r0, [pc, #328]	; (8004bac <MX_GPIO_Init+0x294>)
 8004a62:	f003 f92f 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a66:	2304      	movs	r3, #4
 8004a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a72:	f107 031c 	add.w	r3, r7, #28
 8004a76:	4619      	mov	r1, r3
 8004a78:	484c      	ldr	r0, [pc, #304]	; (8004bac <MX_GPIO_Init+0x294>)
 8004a7a:	f003 f923 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004a7e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a84:	2300      	movs	r3, #0
 8004a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a8c:	f107 031c 	add.w	r3, r7, #28
 8004a90:	4619      	mov	r1, r3
 8004a92:	4845      	ldr	r0, [pc, #276]	; (8004ba8 <MX_GPIO_Init+0x290>)
 8004a94:	f003 f916 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	4619      	mov	r1, r3
 8004ab0:	483d      	ldr	r0, [pc, #244]	; (8004ba8 <MX_GPIO_Init+0x290>)
 8004ab2:	f003 f907 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abc:	2301      	movs	r3, #1
 8004abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac8:	f107 031c 	add.w	r3, r7, #28
 8004acc:	4619      	mov	r1, r3
 8004ace:	4837      	ldr	r0, [pc, #220]	; (8004bac <MX_GPIO_Init+0x294>)
 8004ad0:	f003 f8f8 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ada:	4b39      	ldr	r3, [pc, #228]	; (8004bc0 <MX_GPIO_Init+0x2a8>)
 8004adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ae2:	f107 031c 	add.w	r3, r7, #28
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4831      	ldr	r0, [pc, #196]	; (8004bb0 <MX_GPIO_Init+0x298>)
 8004aea:	f003 f8eb 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af4:	2301      	movs	r3, #1
 8004af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b00:	f107 031c 	add.w	r3, r7, #28
 8004b04:	4619      	mov	r1, r3
 8004b06:	482a      	ldr	r0, [pc, #168]	; (8004bb0 <MX_GPIO_Init+0x298>)
 8004b08:	f003 f8dc 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b12:	2301      	movs	r3, #1
 8004b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b16:	2301      	movs	r3, #1
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b1e:	f107 031c 	add.w	r3, r7, #28
 8004b22:	4619      	mov	r1, r3
 8004b24:	4822      	ldr	r0, [pc, #136]	; (8004bb0 <MX_GPIO_Init+0x298>)
 8004b26:	f003 f8cd 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b2a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004b2e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b30:	2301      	movs	r3, #1
 8004b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3c:	f107 031c 	add.w	r3, r7, #28
 8004b40:	4619      	mov	r1, r3
 8004b42:	481c      	ldr	r0, [pc, #112]	; (8004bb4 <MX_GPIO_Init+0x29c>)
 8004b44:	f003 f8be 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b56:	f107 031c 	add.w	r3, r7, #28
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4815      	ldr	r0, [pc, #84]	; (8004bb4 <MX_GPIO_Init+0x29c>)
 8004b5e:	f003 f8b1 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004b62:	239b      	movs	r3, #155	; 0x9b
 8004b64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b6e:	f107 031c 	add.w	r3, r7, #28
 8004b72:	4619      	mov	r1, r3
 8004b74:	480e      	ldr	r0, [pc, #56]	; (8004bb0 <MX_GPIO_Init+0x298>)
 8004b76:	f003 f8a5 	bl	8007cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2008      	movs	r0, #8
 8004b80:	f002 fccd 	bl	800751e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004b84:	2008      	movs	r0, #8
 8004b86:	f002 fce6 	bl	8007556 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2017      	movs	r0, #23
 8004b90:	f002 fcc5 	bl	800751e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b94:	2017      	movs	r0, #23
 8004b96:	f002 fcde 	bl	8007556 <HAL_NVIC_EnableIRQ>

}
 8004b9a:	bf00      	nop
 8004b9c:	3730      	adds	r7, #48	; 0x30
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40020400 	.word	0x40020400
 8004bb0:	40020c00 	.word	0x40020c00
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	10310000 	.word	0x10310000
 8004bbc:	40020800 	.word	0x40020800
 8004bc0:	10110000 	.word	0x10110000

08004bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bca:	e7fe      	b.n	8004bca <Error_Handler+0x6>

08004bcc <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 8004bd4:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <CalcError1+0x100>)
 8004bd6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004bda:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <CalcError1+0x100>)
 8004bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004be0:	f7fb fb6a 	bl	80002b8 <__aeabi_dsub>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004bec:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <CalcError1+0x100>)
 8004bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <CalcError1+0x100>)
 8004bf4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004bf8:	f7fb fb5e 	bl	80002b8 <__aeabi_dsub>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 8004c04:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <CalcError1+0x100>)
 8004c06:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c0e:	eef0 0a67 	vmov.f32	s1, s15
 8004c12:	f00c fcd5 	bl	80115c0 <sin>
 8004c16:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <CalcError1+0x100>)
 8004c1c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004c20:	eeb0 0a47 	vmov.f32	s0, s14
 8004c24:	eef0 0a67 	vmov.f32	s1, s15
 8004c28:	f00c fc86 	bl	8011538 <cos>
 8004c2c:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 8004c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c38:	f7fb fcf6 	bl	8000628 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4690      	mov	r8, r2
 8004c42:	4699      	mov	r9, r3
 8004c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c4c:	f7fb fcec 	bl	8000628 <__aeabi_dmul>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4640      	mov	r0, r8
 8004c56:	4649      	mov	r1, r9
 8004c58:	f7fb fb30 	bl	80002bc <__adddf3>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	491b      	ldr	r1, [pc, #108]	; (8004cd0 <CalcError1+0x104>)
 8004c62:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 8004c66:	68bc      	ldr	r4, [r7, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c72:	4620      	mov	r0, r4
 8004c74:	4629      	mov	r1, r5
 8004c76:	f7fb fcd7 	bl	8000628 <__aeabi_dmul>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	4625      	mov	r5, r4
 8004c80:	461c      	mov	r4, r3
 8004c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c8a:	f7fb fccd 	bl	8000628 <__aeabi_dmul>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4620      	mov	r0, r4
 8004c94:	4629      	mov	r1, r5
 8004c96:	f7fb fb11 	bl	80002bc <__adddf3>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <CalcError1+0x104>)
 8004ca0:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <CalcError1+0x100>)
 8004ca6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004caa:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <CalcError1+0x100>)
 8004cac:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	f7fb fb00 	bl	80002b8 <__aeabi_dsub>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <CalcError1+0x104>)
 8004cbe:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ccc:	20039338 	.word	0x20039338
 8004cd0:	20039368 	.word	0x20039368

08004cd4 <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004cdc:	4b7a      	ldr	r3, [pc, #488]	; (8004ec8 <path_following_step+0x1f4>)
 8004cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	4b79      	ldr	r3, [pc, #484]	; (8004ecc <path_following_step+0x1f8>)
 8004ce8:	f7fb fc9e 	bl	8000628 <__aeabi_dmul>
 8004cec:	4603      	mov	r3, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004cf4:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <path_following_step+0x1fc>)
 8004cf6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d02:	f7fb fad9 	bl	80002b8 <__aeabi_dsub>
 8004d06:	4603      	mov	r3, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	e9c7 3406 	strd	r3, r4, [r7, #24]
  //mon2 = rtb_Uk1;
  mon1 = rtb_TSamp;
 8004d0e:	4a71      	ldr	r2, [pc, #452]	; (8004ed4 <path_following_step+0x200>)
 8004d10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d14:	e9c2 3400 	strd	r3, r4, [r2]
  mon2 = rtDW.UD_DSTATE;
 8004d18:	4b6d      	ldr	r3, [pc, #436]	; (8004ed0 <path_following_step+0x1fc>)
 8004d1a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004d1e:	4a6e      	ldr	r2, [pc, #440]	; (8004ed8 <path_following_step+0x204>)
 8004d20:	e9c2 3400 	strd	r3, r4, [r2]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d2c:	f7fb fc7c 	bl	8000628 <__aeabi_dmul>
 8004d30:	4603      	mov	r3, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004d38:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <path_following_step+0x1f4>)
 8004d3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <path_following_step+0x1f8>)
 8004d44:	f7fb fc70 	bl	8000628 <__aeabi_dmul>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004d50:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <path_following_step+0x1fc>)
 8004d52:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004d56:	461a      	mov	r2, r3
 8004d58:	4623      	mov	r3, r4
 8004d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d5e:	f7fb faab 	bl	80002b8 <__aeabi_dsub>
 8004d62:	4603      	mov	r3, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d72:	f7fb fc59 	bl	8000628 <__aeabi_dmul>
 8004d76:	4603      	mov	r3, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d82:	f7fb fa9b 	bl	80002bc <__adddf3>
 8004d86:	4603      	mov	r3, r0
 8004d88:	460c      	mov	r4, r1
 8004d8a:	ec44 3b17 	vmov	d7, r3, r4
 8004d8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004d92:	eef0 0a67 	vmov.f32	s1, s15
 8004d96:	f00c fc5b 	bl	8011650 <sqrt>
 8004d9a:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004d9e:	f7ff ff15 	bl	8004bcc <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004da2:	4b49      	ldr	r3, [pc, #292]	; (8004ec8 <path_following_step+0x1f4>)
 8004da4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <path_following_step+0x1f8>)
 8004dae:	f7fb fc3b 	bl	8000628 <__aeabi_dmul>
 8004db2:	4603      	mov	r3, r0
 8004db4:	460c      	mov	r4, r1
 8004db6:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004dba:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <path_following_step+0x1fc>)
 8004dbc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dc8:	f7fb fa76 	bl	80002b8 <__aeabi_dsub>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004dd4:	4a3e      	ldr	r2, [pc, #248]	; (8004ed0 <path_following_step+0x1fc>)
 8004dd6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004dda:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004dde:	4a3c      	ldr	r2, [pc, #240]	; (8004ed0 <path_following_step+0x1fc>)
 8004de0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004de4:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004de8:	4a39      	ldr	r2, [pc, #228]	; (8004ed0 <path_following_step+0x1fc>)
 8004dea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004dee:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004df2:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <path_following_step+0x208>)
 8004df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <path_following_step+0x1fc>)
 8004dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4623      	mov	r3, r4
 8004e02:	f7fb fc11 	bl	8000628 <__aeabi_dmul>
 8004e06:	4603      	mov	r3, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	4625      	mov	r5, r4
 8004e0c:	461c      	mov	r4, r3
 8004e0e:	4b30      	ldr	r3, [pc, #192]	; (8004ed0 <path_following_step+0x1fc>)
 8004e10:	ed93 7b04 	vldr	d7, [r3, #16]
 8004e14:	eeb0 0a47 	vmov.f32	s0, s14
 8004e18:	eef0 0a67 	vmov.f32	s1, s15
 8004e1c:	f00c fb8c 	bl	8011538 <cos>
 8004e20:	ec51 0b10 	vmov	r0, r1, d0
 8004e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e28:	f7fb fbfe 	bl	8000628 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4620      	mov	r0, r4
 8004e32:	4629      	mov	r1, r5
 8004e34:	f7fb fa42 	bl	80002bc <__adddf3>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <path_following_step+0x20c>)
 8004e3e:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <path_following_step+0x208>)
 8004e44:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e48:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <path_following_step+0x1fc>)
 8004e4a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4623      	mov	r3, r4
 8004e52:	f7fb fbe9 	bl	8000628 <__aeabi_dmul>
 8004e56:	4603      	mov	r3, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	4698      	mov	r8, r3
 8004e5c:	46a1      	mov	r9, r4
 8004e5e:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <path_following_step+0x208>)
 8004e60:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <path_following_step+0x1fc>)
 8004e66:	ed93 7b04 	vldr	d7, [r3, #16]
 8004e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6e:	eef0 0a67 	vmov.f32	s1, s15
 8004e72:	f00c fba5 	bl	80115c0 <sin>
 8004e76:	ec53 2b10 	vmov	r2, r3, d0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fbd3 	bl	8000628 <__aeabi_dmul>
 8004e82:	4603      	mov	r3, r0
 8004e84:	460c      	mov	r4, r1
 8004e86:	461a      	mov	r2, r3
 8004e88:	4623      	mov	r3, r4
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb fa15 	bl	80002bc <__adddf3>
 8004e92:	4603      	mov	r3, r0
 8004e94:	460c      	mov	r4, r1
 8004e96:	4618      	mov	r0, r3
 8004e98:	4621      	mov	r1, r4
 8004e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9e:	f7fb fbc3 	bl	8000628 <__aeabi_dmul>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eae:	f7fb fa05 	bl	80002bc <__adddf3>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <path_following_step+0x20c>)
 8004eb8:	e9c2 3402 	strd	r3, r4, [r2, #8]


  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004ebc:	bf00      	nop
 8004ebe:	3728      	adds	r7, #40	; 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20039338 	.word	0x20039338
 8004ecc:	408f4000 	.word	0x408f4000
 8004ed0:	20039368 	.word	0x20039368
 8004ed4:	20039328 	.word	0x20039328
 8004ed8:	20039330 	.word	0x20039330
 8004edc:	200393a8 	.word	0x200393a8
 8004ee0:	20039398 	.word	0x20039398

08004ee4 <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f08:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6413      	str	r3, [r2, #64]	; 0x40
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800

08004f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 031c 	add.w	r3, r7, #28
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a4a      	ldr	r2, [pc, #296]	; (800508c <HAL_ADC_MspInit+0x148>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	f040 808e 	bne.w	8005084 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	4b48      	ldr	r3, [pc, #288]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	4a47      	ldr	r2, [pc, #284]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f76:	6453      	str	r3, [r2, #68]	; 0x44
 8004f78:	4b45      	ldr	r3, [pc, #276]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	4b41      	ldr	r3, [pc, #260]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	4a40      	ldr	r2, [pc, #256]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004f8e:	f043 0304 	orr.w	r3, r3, #4
 8004f92:	6313      	str	r3, [r2, #48]	; 0x30
 8004f94:	4b3e      	ldr	r3, [pc, #248]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb0:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	4b33      	ldr	r3, [pc, #204]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4a32      	ldr	r2, [pc, #200]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	6313      	str	r3, [r2, #48]	; 0x30
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <HAL_ADC_MspInit+0x14c>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004fd8:	230f      	movs	r3, #15
 8004fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe4:	f107 031c 	add.w	r3, r7, #28
 8004fe8:	4619      	mov	r1, r3
 8004fea:	482a      	ldr	r0, [pc, #168]	; (8005094 <HAL_ADC_MspInit+0x150>)
 8004fec:	f002 fe6a 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004ff0:	23ff      	movs	r3, #255	; 0xff
 8004ff2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffc:	f107 031c 	add.w	r3, r7, #28
 8005000:	4619      	mov	r1, r3
 8005002:	4825      	ldr	r0, [pc, #148]	; (8005098 <HAL_ADC_MspInit+0x154>)
 8005004:	f002 fe5e 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005008:	2303      	movs	r3, #3
 800500a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800500c:	2303      	movs	r3, #3
 800500e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005014:	f107 031c 	add.w	r3, r7, #28
 8005018:	4619      	mov	r1, r3
 800501a:	4820      	ldr	r0, [pc, #128]	; (800509c <HAL_ADC_MspInit+0x158>)
 800501c:	f002 fe52 	bl	8007cc4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005020:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005022:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <HAL_ADC_MspInit+0x160>)
 8005024:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800502c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005030:	2200      	movs	r2, #0
 8005032:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005036:	2200      	movs	r2, #0
 8005038:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 800503c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005040:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005042:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005048:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 800504c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005050:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005058:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 800505c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005060:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005064:	2200      	movs	r2, #0
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005068:	480d      	ldr	r0, [pc, #52]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 800506a:	f002 fa8f 	bl	800758c <HAL_DMA_Init>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005074:	f7ff fda6 	bl	8004bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
 800507e:	4a08      	ldr	r2, [pc, #32]	; (80050a0 <HAL_ADC_MspInit+0x15c>)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005084:	bf00      	nop
 8005086:	3730      	adds	r7, #48	; 0x30
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40012100 	.word	0x40012100
 8005090:	40023800 	.word	0x40023800
 8005094:	40020800 	.word	0x40020800
 8005098:	40020000 	.word	0x40020000
 800509c:	40020400 	.word	0x40020400
 80050a0:	20039284 	.word	0x20039284
 80050a4:	40026440 	.word	0x40026440

080050a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08c      	sub	sp, #48	; 0x30
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a32      	ldr	r2, [pc, #200]	; (8005190 <HAL_I2C_MspInit+0xe8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d12c      	bne.n	8005124 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	4b31      	ldr	r3, [pc, #196]	; (8005194 <HAL_I2C_MspInit+0xec>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	4a30      	ldr	r2, [pc, #192]	; (8005194 <HAL_I2C_MspInit+0xec>)
 80050d4:	f043 0302 	orr.w	r3, r3, #2
 80050d8:	6313      	str	r3, [r2, #48]	; 0x30
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <HAL_I2C_MspInit+0xec>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050e6:	23c0      	movs	r3, #192	; 0xc0
 80050e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ea:	2312      	movs	r3, #18
 80050ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f2:	2303      	movs	r3, #3
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050f6:	2304      	movs	r3, #4
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050fa:	f107 031c 	add.w	r3, r7, #28
 80050fe:	4619      	mov	r1, r3
 8005100:	4825      	ldr	r0, [pc, #148]	; (8005198 <HAL_I2C_MspInit+0xf0>)
 8005102:	f002 fddf 	bl	8007cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_I2C_MspInit+0xec>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4a21      	ldr	r2, [pc, #132]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005114:	6413      	str	r3, [r2, #64]	; 0x40
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005122:	e031      	b.n	8005188 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_I2C_MspInit+0xf4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d12c      	bne.n	8005188 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	4b18      	ldr	r3, [pc, #96]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a17      	ldr	r2, [pc, #92]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005138:	f043 0302 	orr.w	r3, r3, #2
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800514a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005150:	2312      	movs	r3, #18
 8005152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005154:	2301      	movs	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	2303      	movs	r3, #3
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800515c:	2304      	movs	r3, #4
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005160:	f107 031c 	add.w	r3, r7, #28
 8005164:	4619      	mov	r1, r3
 8005166:	480c      	ldr	r0, [pc, #48]	; (8005198 <HAL_I2C_MspInit+0xf0>)
 8005168:	f002 fdac 	bl	8007cc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	4a07      	ldr	r2, [pc, #28]	; (8005194 <HAL_I2C_MspInit+0xec>)
 8005176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800517a:	6413      	str	r3, [r2, #64]	; 0x40
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HAL_I2C_MspInit+0xec>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	bf00      	nop
 800518a:	3730      	adds	r7, #48	; 0x30
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40005400 	.word	0x40005400
 8005194:	40023800 	.word	0x40023800
 8005198:	40020400 	.word	0x40020400
 800519c:	40005800 	.word	0x40005800

080051a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a8:	f107 0314 	add.w	r3, r7, #20
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a69      	ldr	r2, [pc, #420]	; (8005364 <HAL_SD_MspInit+0x1c4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	f040 80cb 	bne.w	800535a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	4b67      	ldr	r3, [pc, #412]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	4a66      	ldr	r2, [pc, #408]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 80051ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051d2:	6453      	str	r3, [r2, #68]	; 0x44
 80051d4:	4b64      	ldr	r3, [pc, #400]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 80051d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	4b60      	ldr	r3, [pc, #384]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	4a5f      	ldr	r2, [pc, #380]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 80051ea:	f043 0304 	orr.w	r3, r3, #4
 80051ee:	6313      	str	r3, [r2, #48]	; 0x30
 80051f0:	4b5d      	ldr	r3, [pc, #372]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051fc:	2300      	movs	r3, #0
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	4b59      	ldr	r3, [pc, #356]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	4a58      	ldr	r2, [pc, #352]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 8005206:	f043 0308 	orr.w	r3, r3, #8
 800520a:	6313      	str	r3, [r2, #48]	; 0x30
 800520c:	4b56      	ldr	r3, [pc, #344]	; (8005368 <HAL_SD_MspInit+0x1c8>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005218:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800521c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521e:	2302      	movs	r3, #2
 8005220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005226:	2303      	movs	r3, #3
 8005228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800522a:	230c      	movs	r3, #12
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800522e:	f107 0314 	add.w	r3, r7, #20
 8005232:	4619      	mov	r1, r3
 8005234:	484d      	ldr	r0, [pc, #308]	; (800536c <HAL_SD_MspInit+0x1cc>)
 8005236:	f002 fd45 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800523a:	2304      	movs	r3, #4
 800523c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523e:	2302      	movs	r3, #2
 8005240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005246:	2303      	movs	r3, #3
 8005248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800524a:	230c      	movs	r3, #12
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800524e:	f107 0314 	add.w	r3, r7, #20
 8005252:	4619      	mov	r1, r3
 8005254:	4846      	ldr	r0, [pc, #280]	; (8005370 <HAL_SD_MspInit+0x1d0>)
 8005256:	f002 fd35 	bl	8007cc4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800525a:	4b46      	ldr	r3, [pc, #280]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 800525c:	4a46      	ldr	r2, [pc, #280]	; (8005378 <HAL_SD_MspInit+0x1d8>)
 800525e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005260:	4b44      	ldr	r3, [pc, #272]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 8005262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005266:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005268:	4b42      	ldr	r3, [pc, #264]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 8005270:	2200      	movs	r2, #0
 8005272:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005274:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 8005276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800527a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800527c:	4b3d      	ldr	r3, [pc, #244]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 800527e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005282:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005284:	4b3b      	ldr	r3, [pc, #236]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 8005286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800528a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800528c:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 800528e:	2220      	movs	r2, #32
 8005290:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 8005294:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005298:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 800529c:	2204      	movs	r2, #4
 800529e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80052a0:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 80052a2:	2203      	movs	r2, #3
 80052a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80052a6:	4b33      	ldr	r3, [pc, #204]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 80052a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 80052b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80052b6:	482f      	ldr	r0, [pc, #188]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 80052b8:	f002 f968 	bl	800758c <HAL_DMA_Init>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80052c2:	f7ff fc7f 	bl	8004bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2a      	ldr	r2, [pc, #168]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <HAL_SD_MspInit+0x1d4>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80052d2:	4b2a      	ldr	r3, [pc, #168]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052d4:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <HAL_SD_MspInit+0x1e0>)
 80052d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052de:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052e0:	4b26      	ldr	r3, [pc, #152]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052e6:	4b25      	ldr	r3, [pc, #148]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80052f4:	4b21      	ldr	r3, [pc, #132]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <HAL_SD_MspInit+0x1dc>)
 80052fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005302:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005304:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005306:	2220      	movs	r2, #32
 8005308:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_SD_MspInit+0x1dc>)
 800530c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005310:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005314:	2204      	movs	r2, #4
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005318:	4b18      	ldr	r3, [pc, #96]	; (800537c <HAL_SD_MspInit+0x1dc>)
 800531a:	2203      	movs	r2, #3
 800531c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800531e:	4b17      	ldr	r3, [pc, #92]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005320:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005328:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800532e:	4813      	ldr	r0, [pc, #76]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005330:	f002 f92c 	bl	800758c <HAL_DMA_Init>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800533a:	f7ff fc43 	bl	8004bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <HAL_SD_MspInit+0x1dc>)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	2031      	movs	r0, #49	; 0x31
 8005350:	f002 f8e5 	bl	800751e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005354:	2031      	movs	r0, #49	; 0x31
 8005356:	f002 f8fe 	bl	8007556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800535a:	bf00      	nop
 800535c:	3728      	adds	r7, #40	; 0x28
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40023800 	.word	0x40023800
 800536c:	40020800 	.word	0x40020800
 8005370:	40020c00 	.word	0x40020c00
 8005374:	20038dac 	.word	0x20038dac
 8005378:	40026458 	.word	0x40026458
 800537c:	200390e0 	.word	0x200390e0
 8005380:	400264a0 	.word	0x400264a0

08005384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <HAL_SPI_MspInit+0x84>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d12c      	bne.n	8005400 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <HAL_SPI_MspInit+0x88>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <HAL_SPI_MspInit+0x88>)
 80053b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053b4:	6413      	str	r3, [r2, #64]	; 0x40
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <HAL_SPI_MspInit+0x88>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4b11      	ldr	r3, [pc, #68]	; (800540c <HAL_SPI_MspInit+0x88>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	4a10      	ldr	r2, [pc, #64]	; (800540c <HAL_SPI_MspInit+0x88>)
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	6313      	str	r3, [r2, #48]	; 0x30
 80053d2:	4b0e      	ldr	r3, [pc, #56]	; (800540c <HAL_SPI_MspInit+0x88>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80053de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80053e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e4:	2302      	movs	r3, #2
 80053e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ec:	2303      	movs	r3, #3
 80053ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053f0:	2305      	movs	r3, #5
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	4619      	mov	r1, r3
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <HAL_SPI_MspInit+0x8c>)
 80053fc:	f002 fc62 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005400:	bf00      	nop
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40003800 	.word	0x40003800
 800540c:	40023800 	.word	0x40023800
 8005410:	40020400 	.word	0x40020400

08005414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2d      	ldr	r2, [pc, #180]	; (80054e8 <HAL_TIM_PWM_MspInit+0xd4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d12d      	bne.n	8005492 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6453      	str	r3, [r2, #68]	; 0x44
 8005446:	4b29      	ldr	r3, [pc, #164]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	4b25      	ldr	r3, [pc, #148]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 800545c:	f043 0310 	orr.w	r3, r3, #16
 8005460:	6313      	str	r3, [r2, #48]	; 0x30
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800546e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005480:	2301      	movs	r3, #1
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005484:	f107 031c 	add.w	r3, r7, #28
 8005488:	4619      	mov	r1, r3
 800548a:	4819      	ldr	r0, [pc, #100]	; (80054f0 <HAL_TIM_PWM_MspInit+0xdc>)
 800548c:	f002 fc1a 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005490:	e026      	b.n	80054e0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <HAL_TIM_PWM_MspInit+0xe0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10e      	bne.n	80054ba <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	6413      	str	r3, [r2, #64]	; 0x40
 80054ac:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	693b      	ldr	r3, [r7, #16]
}
 80054b8:	e012      	b.n	80054e0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_TIM_PWM_MspInit+0xe4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10d      	bne.n	80054e0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	4a07      	ldr	r2, [pc, #28]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	6413      	str	r3, [r2, #64]	; 0x40
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_TIM_PWM_MspInit+0xd8>)
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	bf00      	nop
 80054e2:	3730      	adds	r7, #48	; 0x30
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a3e      	ldr	r2, [pc, #248]	; (8005604 <HAL_TIM_Base_MspInit+0x108>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d116      	bne.n	800553c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005518:	f043 0310 	orr.w	r3, r3, #16
 800551c:	6413      	str	r3, [r2, #64]	; 0x40
 800551e:	4b3a      	ldr	r3, [pc, #232]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800552a:	2200      	movs	r2, #0
 800552c:	2101      	movs	r1, #1
 800552e:	2036      	movs	r0, #54	; 0x36
 8005530:	f001 fff5 	bl	800751e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005534:	2036      	movs	r0, #54	; 0x36
 8005536:	f002 f80e 	bl	8007556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800553a:	e05e      	b.n	80055fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a32      	ldr	r2, [pc, #200]	; (800560c <HAL_TIM_Base_MspInit+0x110>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d116      	bne.n	8005574 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	4a2e      	ldr	r2, [pc, #184]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	6413      	str	r3, [r2, #64]	; 0x40
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	2037      	movs	r0, #55	; 0x37
 8005568:	f001 ffd9 	bl	800751e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800556c:	2037      	movs	r0, #55	; 0x37
 800556e:	f001 fff2 	bl	8007556 <HAL_NVIC_EnableIRQ>
}
 8005572:	e042      	b.n	80055fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <HAL_TIM_Base_MspInit+0x114>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10e      	bne.n	800559c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	4a20      	ldr	r2, [pc, #128]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558c:	6453      	str	r3, [r2, #68]	; 0x44
 800558e:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	697b      	ldr	r3, [r7, #20]
}
 800559a:	e02e      	b.n	80055fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <HAL_TIM_Base_MspInit+0x118>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	4a16      	ldr	r2, [pc, #88]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 80055b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b4:	6453      	str	r3, [r2, #68]	; 0x44
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	693b      	ldr	r3, [r7, #16]
}
 80055c2:	e01a      	b.n	80055fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <HAL_TIM_Base_MspInit+0x11c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d115      	bne.n	80055fa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	6413      	str	r3, [r2, #64]	; 0x40
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_TIM_Base_MspInit+0x10c>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80055ea:	2200      	movs	r2, #0
 80055ec:	2100      	movs	r1, #0
 80055ee:	202c      	movs	r0, #44	; 0x2c
 80055f0:	f001 ff95 	bl	800751e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80055f4:	202c      	movs	r0, #44	; 0x2c
 80055f6:	f001 ffae 	bl	8007556 <HAL_NVIC_EnableIRQ>
}
 80055fa:	bf00      	nop
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40001000 	.word	0x40001000
 8005608:	40023800 	.word	0x40023800
 800560c:	40001400 	.word	0x40001400
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001c00 	.word	0x40001c00

0800561c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	; 0x28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005624:	f107 0314 	add.w	r3, r7, #20
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	605a      	str	r2, [r3, #4]
 800562e:	609a      	str	r2, [r3, #8]
 8005630:	60da      	str	r2, [r3, #12]
 8005632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_TIM_Encoder_MspInit+0x94>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d133      	bne.n	80056a6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6453      	str	r3, [r2, #68]	; 0x44
 800564e:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8005664:	f043 0304 	orr.w	r3, r3, #4
 8005668:	6313      	str	r3, [r2, #48]	; 0x30
 800566a:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005676:	23c0      	movs	r3, #192	; 0xc0
 8005678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	2302      	movs	r3, #2
 800567c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005682:	2300      	movs	r3, #0
 8005684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005686:	2303      	movs	r3, #3
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800568a:	f107 0314 	add.w	r3, r7, #20
 800568e:	4619      	mov	r1, r3
 8005690:	4809      	ldr	r0, [pc, #36]	; (80056b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005692:	f002 fb17 	bl	8007cc4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005696:	2200      	movs	r2, #0
 8005698:	2100      	movs	r1, #0
 800569a:	202c      	movs	r0, #44	; 0x2c
 800569c:	f001 ff3f 	bl	800751e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80056a0:	202c      	movs	r0, #44	; 0x2c
 80056a2:	f001 ff58 	bl	8007556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80056a6:	bf00      	nop
 80056a8:	3728      	adds	r7, #40	; 0x28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40020800 	.word	0x40020800

080056bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	; 0x30
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	f107 031c 	add.w	r3, r7, #28
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a5c      	ldr	r2, [pc, #368]	; (800584c <HAL_TIM_MspPostInit+0x190>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d11f      	bne.n	800571e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	4b5b      	ldr	r3, [pc, #364]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	4a5a      	ldr	r2, [pc, #360]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 80056e8:	f043 0310 	orr.w	r3, r3, #16
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
 80056ee:	4b58      	ldr	r3, [pc, #352]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80056fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	2302      	movs	r3, #2
 8005702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005708:	2300      	movs	r3, #0
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800570c:	2301      	movs	r3, #1
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005710:	f107 031c 	add.w	r3, r7, #28
 8005714:	4619      	mov	r1, r3
 8005716:	484f      	ldr	r0, [pc, #316]	; (8005854 <HAL_TIM_MspPostInit+0x198>)
 8005718:	f002 fad4 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800571c:	e091      	b.n	8005842 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a4d      	ldr	r2, [pc, #308]	; (8005858 <HAL_TIM_MspPostInit+0x19c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d11e      	bne.n	8005766 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	4b48      	ldr	r3, [pc, #288]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	4a47      	ldr	r2, [pc, #284]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 8005732:	f043 0302 	orr.w	r3, r3, #2
 8005736:	6313      	str	r3, [r2, #48]	; 0x30
 8005738:	4b45      	ldr	r3, [pc, #276]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005748:	2302      	movs	r3, #2
 800574a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005750:	2300      	movs	r3, #0
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005754:	2302      	movs	r3, #2
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005758:	f107 031c 	add.w	r3, r7, #28
 800575c:	4619      	mov	r1, r3
 800575e:	483f      	ldr	r0, [pc, #252]	; (800585c <HAL_TIM_MspPostInit+0x1a0>)
 8005760:	f002 fab0 	bl	8007cc4 <HAL_GPIO_Init>
}
 8005764:	e06d      	b.n	8005842 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3d      	ldr	r2, [pc, #244]	; (8005860 <HAL_TIM_MspPostInit+0x1a4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d11f      	bne.n	80057b0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	4a35      	ldr	r2, [pc, #212]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 800577a:	f043 0308 	orr.w	r3, r3, #8
 800577e:	6313      	str	r3, [r2, #48]	; 0x30
 8005780:	4b33      	ldr	r3, [pc, #204]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800578c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005792:	2302      	movs	r3, #2
 8005794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579a:	2300      	movs	r3, #0
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800579e:	2302      	movs	r3, #2
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057a2:	f107 031c 	add.w	r3, r7, #28
 80057a6:	4619      	mov	r1, r3
 80057a8:	482e      	ldr	r0, [pc, #184]	; (8005864 <HAL_TIM_MspPostInit+0x1a8>)
 80057aa:	f002 fa8b 	bl	8007cc4 <HAL_GPIO_Init>
}
 80057ae:	e048      	b.n	8005842 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <HAL_TIM_MspPostInit+0x1ac>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d11f      	bne.n	80057fa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	4a23      	ldr	r2, [pc, #140]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ca:	4b21      	ldr	r3, [pc, #132]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057dc:	2302      	movs	r3, #2
 80057de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e4:	2300      	movs	r3, #0
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80057e8:	2303      	movs	r3, #3
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ec:	f107 031c 	add.w	r3, r7, #28
 80057f0:	4619      	mov	r1, r3
 80057f2:	481a      	ldr	r0, [pc, #104]	; (800585c <HAL_TIM_MspPostInit+0x1a0>)
 80057f4:	f002 fa66 	bl	8007cc4 <HAL_GPIO_Init>
}
 80057f8:	e023      	b.n	8005842 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIM_MspPostInit+0x1b0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d11e      	bne.n	8005842 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005804:	2300      	movs	r3, #0
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4a10      	ldr	r2, [pc, #64]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 800580e:	f043 0302 	orr.w	r3, r3, #2
 8005812:	6313      	str	r3, [r2, #48]	; 0x30
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_TIM_MspPostInit+0x194>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005826:	2302      	movs	r3, #2
 8005828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582a:	2300      	movs	r3, #0
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800582e:	2300      	movs	r3, #0
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005832:	2303      	movs	r3, #3
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005836:	f107 031c 	add.w	r3, r7, #28
 800583a:	4619      	mov	r1, r3
 800583c:	4807      	ldr	r0, [pc, #28]	; (800585c <HAL_TIM_MspPostInit+0x1a0>)
 800583e:	f002 fa41 	bl	8007cc4 <HAL_GPIO_Init>
}
 8005842:	bf00      	nop
 8005844:	3730      	adds	r7, #48	; 0x30
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40023800 	.word	0x40023800
 8005854:	40021000 	.word	0x40021000
 8005858:	40000400 	.word	0x40000400
 800585c:	40020400 	.word	0x40020400
 8005860:	40000800 	.word	0x40000800
 8005864:	40020c00 	.word	0x40020c00
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800

08005870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_UART_MspInit+0x84>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d12b      	bne.n	80058ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <HAL_UART_MspInit+0x88>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <HAL_UART_MspInit+0x88>)
 800589c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_UART_MspInit+0x88>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_UART_MspInit+0x88>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <HAL_UART_MspInit+0x88>)
 80058b8:	f043 0308 	orr.w	r3, r3, #8
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <HAL_UART_MspInit+0x88>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80058ca:	2360      	movs	r3, #96	; 0x60
 80058cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ce:	2302      	movs	r3, #2
 80058d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d6:	2303      	movs	r3, #3
 80058d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80058da:	2307      	movs	r3, #7
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058de:	f107 0314 	add.w	r3, r7, #20
 80058e2:	4619      	mov	r1, r3
 80058e4:	4805      	ldr	r0, [pc, #20]	; (80058fc <HAL_UART_MspInit+0x8c>)
 80058e6:	f002 f9ed 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80058ea:	bf00      	nop
 80058ec:	3728      	adds	r7, #40	; 0x28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40020c00 	.word	0x40020c00

08005900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005904:	e7fe      	b.n	8005904 <NMI_Handler+0x4>

08005906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005906:	b480      	push	{r7}
 8005908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800590a:	e7fe      	b.n	800590a <HardFault_Handler+0x4>

0800590c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005910:	e7fe      	b.n	8005910 <MemManage_Handler+0x4>

08005912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005912:	b480      	push	{r7}
 8005914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005916:	e7fe      	b.n	8005916 <BusFault_Handler+0x4>

08005918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800591c:	e7fe      	b.n	800591c <UsageFault_Handler+0x4>

0800591e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005922:	bf00      	nop
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800593a:	b480      	push	{r7}
 800593c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800594c:	f001 f8c6 	bl	8006adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}

08005954 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005958:	2004      	movs	r0, #4
 800595a:	f002 fb8f 	bl	800807c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800595e:	bf00      	nop
 8005960:	bd80      	pop	{r7, pc}

08005962 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005966:	f44f 7080 	mov.w	r0, #256	; 0x100
 800596a:	f002 fb87 	bl	800807c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005978:	4803      	ldr	r0, [pc, #12]	; (8005988 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800597a:	f006 fb9e 	bl	800c0ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800597e:	4803      	ldr	r0, [pc, #12]	; (800598c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005980:	f006 fb9b 	bl	800c0ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005984:	bf00      	nop
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20038e64 	.word	0x20038e64
 800598c:	20039060 	.word	0x20039060

08005990 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005994:	4802      	ldr	r0, [pc, #8]	; (80059a0 <SDIO_IRQHandler+0x10>)
 8005996:	f004 fc37 	bl	800a208 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800599a:	bf00      	nop
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200391c0 	.word	0x200391c0

080059a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80059a8:	4802      	ldr	r0, [pc, #8]	; (80059b4 <TIM6_DAC_IRQHandler+0x10>)
 80059aa:	f006 fb86 	bl	800c0ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20039140 	.word	0x20039140

080059b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80059bc:	4802      	ldr	r0, [pc, #8]	; (80059c8 <TIM7_IRQHandler+0x10>)
 80059be:	f006 fb7c 	bl	800c0ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80059c2:	bf00      	nop
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200392e4 	.word	0x200392e4

080059cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80059d0:	4802      	ldr	r0, [pc, #8]	; (80059dc <DMA2_Stream2_IRQHandler+0x10>)
 80059d2:	f001 ff03 	bl	80077dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80059d6:	bf00      	nop
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20039284 	.word	0x20039284

080059e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80059e4:	4802      	ldr	r0, [pc, #8]	; (80059f0 <DMA2_Stream3_IRQHandler+0x10>)
 80059e6:	f001 fef9 	bl	80077dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80059ea:	bf00      	nop
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20038dac 	.word	0x20038dac

080059f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80059f8:	4802      	ldr	r0, [pc, #8]	; (8005a04 <DMA2_Stream6_IRQHandler+0x10>)
 80059fa:	f001 feef 	bl	80077dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200390e0 	.word	0x200390e0

08005a08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e00a      	b.n	8005a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a1a:	f3af 8000 	nop.w
 8005a1e:	4601      	mov	r1, r0
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	60ba      	str	r2, [r7, #8]
 8005a26:	b2ca      	uxtb	r2, r1
 8005a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	dbf0      	blt.n	8005a1a <_read+0x12>
	}

return len;
 8005a38:	687b      	ldr	r3, [r7, #4]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
	return -1;
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <_isatty>:

int _isatty(int file)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
	return 1;
 8005a82:	2301      	movs	r3, #1
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	return 0;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <_sbrk+0x5c>)
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <_sbrk+0x60>)
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <_sbrk+0x64>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <_sbrk+0x64>)
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <_sbrk+0x68>)
 8005acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <_sbrk+0x64>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d207      	bcs.n	8005aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005adc:	f00c fe92 	bl	8012804 <__errno>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aea:	e009      	b.n	8005b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <_sbrk+0x64>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <_sbrk+0x64>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <_sbrk+0x64>)
 8005afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20050000 	.word	0x20050000
 8005b0c:	00000800 	.word	0x00000800
 8005b10:	20000260 	.word	0x20000260
 8005b14:	2003b438 	.word	0x2003b438

08005b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b1c:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <SystemInit+0x28>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <SystemInit+0x28>)
 8005b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <SystemInit+0x28>)
 8005b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b32:	609a      	str	r2, [r3, #8]
#endif
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <batteryLowMode>:

double mon_f, mon_d;
float mon_v, mon_w;

void batteryLowMode()
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
	lcd_clear();
 8005b48:	f7fb faaa 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f7fb fab6 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005b54:	4814      	ldr	r0, [pc, #80]	; (8005ba8 <batteryLowMode+0x64>)
 8005b56:	f7fb fadd 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f7fb faaf 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005b62:	4812      	ldr	r0, [pc, #72]	; (8005bac <batteryLowMode+0x68>)
 8005b64:	f7fb fad6 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005b68:	2152      	movs	r1, #82	; 0x52
 8005b6a:	4811      	ldr	r0, [pc, #68]	; (8005bb0 <batteryLowMode+0x6c>)
 8005b6c:	f7fc fa1c 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005b70:	2064      	movs	r0, #100	; 0x64
 8005b72:	f000 ffd3 	bl	8006b1c <HAL_Delay>
		led.fullColor('Y');
 8005b76:	2159      	movs	r1, #89	; 0x59
 8005b78:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <batteryLowMode+0x6c>)
 8005b7a:	f7fc fa15 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005b7e:	2064      	movs	r0, #100	; 0x64
 8005b80:	f000 ffcc 	bl	8006b1c <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005b84:	480b      	ldr	r0, [pc, #44]	; (8005bb4 <batteryLowMode+0x70>)
 8005b86:	f7fc f9ab 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0e6      	beq.n	8005b68 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b9e:	f000 ffbd 	bl	8006b1c <HAL_Delay>
			break;
 8005ba2:	bf00      	nop
		}
	}
}
 8005ba4:	bf00      	nop
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	080176dc 	.word	0x080176dc
 8005bac:	080176e4 	.word	0x080176e4
 8005bb0:	2000056c 	.word	0x2000056c
 8005bb4:	20000560 	.word	0x20000560

08005bb8 <cppInit>:

void cppInit(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
	lcd_init();
 8005bbc:	f7fb fa2c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005bc0:	4831      	ldr	r0, [pc, #196]	; (8005c88 <cppInit+0xd0>)
 8005bc2:	f7fd fcc8 	bl	8003556 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005bc6:	2064      	movs	r0, #100	; 0x64
 8005bc8:	f000 ffa8 	bl	8006b1c <HAL_Delay>
	power_sensor.updateValues();
 8005bcc:	482e      	ldr	r0, [pc, #184]	; (8005c88 <cppInit+0xd0>)
 8005bce:	f7fd fcd3 	bl	8003578 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005bd2:	482d      	ldr	r0, [pc, #180]	; (8005c88 <cppInit+0xd0>)
 8005bd4:	f7fd fcfc 	bl	80035d0 <_ZN11PowerSensor12butteryCheckEv>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <cppInit+0x2a>
 8005bde:	f7ff ffb1 	bl	8005b44 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005be2:	482a      	ldr	r0, [pc, #168]	; (8005c8c <cppInit+0xd4>)
 8005be4:	f7fc fe4a 	bl	800287c <_ZN6Logger10sdCardInitEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <cppInit+0x46>
		led.fullColor('G');
 8005bee:	2147      	movs	r1, #71	; 0x47
 8005bf0:	4827      	ldr	r0, [pc, #156]	; (8005c90 <cppInit+0xd8>)
 8005bf2:	f7fc f9d9 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005bf6:	2064      	movs	r0, #100	; 0x64
 8005bf8:	f000 ff90 	bl	8006b1c <HAL_Delay>
 8005bfc:	e006      	b.n	8005c0c <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005bfe:	2152      	movs	r1, #82	; 0x52
 8005c00:	4823      	ldr	r0, [pc, #140]	; (8005c90 <cppInit+0xd8>)
 8005c02:	f7fc f9d1 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005c06:	2064      	movs	r0, #100	; 0x64
 8005c08:	f000 ff88 	bl	8006b1c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005c0c:	4821      	ldr	r0, [pc, #132]	; (8005c94 <cppInit+0xdc>)
 8005c0e:	f7fc fb27 	bl	8002260 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005c12:	4821      	ldr	r0, [pc, #132]	; (8005c98 <cppInit+0xe0>)
 8005c14:	f7fc ff1a 	bl	8002a4c <_ZN5Motor4initEv>
	encoder.init();
 8005c18:	4820      	ldr	r0, [pc, #128]	; (8005c9c <cppInit+0xe4>)
 8005c1a:	f7fb facf 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 8005c1e:	4820      	ldr	r0, [pc, #128]	; (8005ca0 <cppInit+0xe8>)
 8005c20:	f7fb ffba 	bl	8001b98 <_ZN3IMU4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 8005c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c28:	f000 ff78 	bl	8006b1c <HAL_Delay>

	led.fullColor('M');
 8005c2c:	214d      	movs	r1, #77	; 0x4d
 8005c2e:	4818      	ldr	r0, [pc, #96]	; (8005c90 <cppInit+0xd8>)
 8005c30:	f7fc f9ba 	bl	8001fa8 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005c34:	481a      	ldr	r0, [pc, #104]	; (8005ca0 <cppInit+0xe8>)
 8005c36:	f7fc f841 	bl	8001cbc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005c3a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005ca4 <cppInit+0xec>
 8005c3e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005ca8 <cppInit+0xf0>
 8005c42:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8005cac <cppInit+0xf4>
 8005c46:	481a      	ldr	r0, [pc, #104]	; (8005cb0 <cppInit+0xf8>)
 8005c48:	f7fc fd62 	bl	8002710 <_ZN9LineTrace7setGainEfff>

	velocity_ctrl.setVelocityGain(1.5, 0, 20);
 8005c4c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005c50:	eddf 0a14 	vldr	s1, [pc, #80]	; 8005ca4 <cppInit+0xec>
 8005c54:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8005c58:	4816      	ldr	r0, [pc, #88]	; (8005cb4 <cppInit+0xfc>)
 8005c5a:	f7fd ff69 	bl	8003b30 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(0, 0, 0);
	velocity_ctrl.setOmegaGain(0.05, 0, 7);
 8005c5e:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8005c62:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005ca4 <cppInit+0xec>
 8005c66:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005cb8 <cppInit+0x100>
 8005c6a:	4812      	ldr	r0, [pc, #72]	; (8005cb4 <cppInit+0xfc>)
 8005c6c:	f7fd ff79 	bl	8003b62 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005c70:	480a      	ldr	r0, [pc, #40]	; (8005c9c <cppInit+0xe4>)
 8005c72:	f7fb fb91 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005c76:	4811      	ldr	r0, [pc, #68]	; (8005cbc <cppInit+0x104>)
 8005c78:	f7fd f8f6 	bl	8002e68 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005c7c:	4810      	ldr	r0, [pc, #64]	; (8005cc0 <cppInit+0x108>)
 8005c7e:	f7fd f9c1 	bl	8003004 <_ZN13PathFollowing4initEv>

}
 8005c82:	bf00      	nop
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000570 	.word	0x20000570
 8005c8c:	200005a0 	.word	0x200005a0
 8005c90:	2000056c 	.word	0x2000056c
 8005c94:	20000264 	.word	0x20000264
 8005c98:	20000568 	.word	0x20000568
 8005c9c:	2001f1d8 	.word	0x2001f1d8
 8005ca0:	20000580 	.word	0x20000580
 8005ca4:	00000000 	.word	0x00000000
 8005ca8:	360637bd 	.word	0x360637bd
 8005cac:	3a03126f 	.word	0x3a03126f
 8005cb0:	2001f248 	.word	0x2001f248
 8005cb4:	2001f208 	.word	0x2001f208
 8005cb8:	3d4ccccd 	.word	0x3d4ccccd
 8005cbc:	2001f2a8 	.word	0x2001f2a8
 8005cc0:	2001f2d8 	.word	0x2001f2d8

08005cc4 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005cc8:	480c      	ldr	r0, [pc, #48]	; (8005cfc <cppFlip1ms+0x38>)
 8005cca:	f7fc fb27 	bl	800231c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005cce:	480c      	ldr	r0, [pc, #48]	; (8005d00 <cppFlip1ms+0x3c>)
 8005cd0:	f7fb ff76 	bl	8001bc0 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005cd4:	480b      	ldr	r0, [pc, #44]	; (8005d04 <cppFlip1ms+0x40>)
 8005cd6:	f7fb fa93 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005cda:	480b      	ldr	r0, [pc, #44]	; (8005d08 <cppFlip1ms+0x44>)
 8005cdc:	f7fc fd50 	bl	8002780 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005ce0:	480a      	ldr	r0, [pc, #40]	; (8005d0c <cppFlip1ms+0x48>)
 8005ce2:	f7fd ff57 	bl	8003b94 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005ce6:	480a      	ldr	r0, [pc, #40]	; (8005d10 <cppFlip1ms+0x4c>)
 8005ce8:	f7fd f880 	bl	8002dec <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005cec:	4809      	ldr	r0, [pc, #36]	; (8005d14 <cppFlip1ms+0x50>)
 8005cee:	f7fc febf 	bl	8002a70 <_ZN5Motor9motorCtrlEv>
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005cf2:	4804      	ldr	r0, [pc, #16]	; (8005d04 <cppFlip1ms+0x40>)
 8005cf4:	f7fb fb60 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005cf8:	bf00      	nop
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20000264 	.word	0x20000264
 8005d00:	20000580 	.word	0x20000580
 8005d04:	2001f1d8 	.word	0x2001f1d8
 8005d08:	2001f248 	.word	0x2001f248
 8005d0c:	2001f208 	.word	0x2001f208
 8005d10:	2001f2a8 	.word	0x2001f2a8
 8005d14:	20000568 	.word	0x20000568

08005d18 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005d1c:	4802      	ldr	r0, [pc, #8]	; (8005d28 <cppFlip100ns+0x10>)
 8005d1e:	f7fc faaf 	bl	8002280 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000264 	.word	0x20000264

08005d2c <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	ed2d 8b04 	vpush	{d8-d9}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005d36:	4b3a      	ldr	r3, [pc, #232]	; (8005e20 <cppFlip10ms+0xf4>)
 8005d38:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d40:	4838      	ldr	r0, [pc, #224]	; (8005e24 <cppFlip10ms+0xf8>)
 8005d42:	f7fc fde3 	bl	800290c <_ZN6Logger8storeLogEf>

	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005d46:	4838      	ldr	r0, [pc, #224]	; (8005e28 <cppFlip10ms+0xfc>)
 8005d48:	f7fd f85b 	bl	8002e02 <_ZN8Odometry4getXEv>
 8005d4c:	eeb0 8a40 	vmov.f32	s16, s0
 8005d50:	eef0 8a60 	vmov.f32	s17, s1
 8005d54:	4834      	ldr	r0, [pc, #208]	; (8005e28 <cppFlip10ms+0xfc>)
 8005d56:	f7fd f865 	bl	8002e24 <_ZN8Odometry4getYEv>
 8005d5a:	eeb0 9a40 	vmov.f32	s18, s0
 8005d5e:	eef0 9a60 	vmov.f32	s19, s1
 8005d62:	4831      	ldr	r0, [pc, #196]	; (8005e28 <cppFlip10ms+0xfc>)
 8005d64:	f7fd f86f 	bl	8002e46 <_ZN8Odometry8getThetaEv>
 8005d68:	eeb0 7a40 	vmov.f32	s14, s0
 8005d6c:	eef0 7a60 	vmov.f32	s15, s1
 8005d70:	eeb0 2a47 	vmov.f32	s4, s14
 8005d74:	eef0 2a67 	vmov.f32	s5, s15
 8005d78:	eeb0 1a49 	vmov.f32	s2, s18
 8005d7c:	eef0 1a69 	vmov.f32	s3, s19
 8005d80:	eeb0 0a48 	vmov.f32	s0, s16
 8005d84:	eef0 0a68 	vmov.f32	s1, s17
 8005d88:	4828      	ldr	r0, [pc, #160]	; (8005e2c <cppFlip10ms+0x100>)
 8005d8a:	f7fd fb81 	bl	8003490 <_ZN13PathFollowing14setCurrentPathEddd>
	double temp_v, temp_w;
	static double tar_v, tar_w;
	if(path_following.targetUpdate(temp_v, temp_w) == true){
 8005d8e:	463a      	mov	r2, r7
 8005d90:	f107 0308 	add.w	r3, r7, #8
 8005d94:	4619      	mov	r1, r3
 8005d96:	4825      	ldr	r0, [pc, #148]	; (8005e2c <cppFlip10ms+0x100>)
 8005d98:	f7fd fa02 	bl	80031a0 <_ZN13PathFollowing12targetUpdateERdS0_>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <cppFlip10ms+0x8a>
		tar_v = temp_v;
 8005da2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <cppFlip10ms+0x104>)
 8005da8:	e9c2 3400 	strd	r3, r4, [r2]
		tar_w = temp_w;
 8005dac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005db0:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <cppFlip10ms+0x108>)
 8005db2:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mon_v = tar_v;
 8005db6:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <cppFlip10ms+0x104>)
 8005db8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	f7fa ff2a 	bl	8000c18 <__aeabi_d2f>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <cppFlip10ms+0x10c>)
 8005dc8:	601a      	str	r2, [r3, #0]
	mon_w = tar_w;
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <cppFlip10ms+0x108>)
 8005dcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	f7fa ff20 	bl	8000c18 <__aeabi_d2f>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <cppFlip10ms+0x110>)
 8005ddc:	601a      	str	r2, [r3, #0]

	velocity_ctrl.setVelocity(-tar_v, tar_w);
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <cppFlip10ms+0x104>)
 8005de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de4:	4618      	mov	r0, r3
 8005de6:	4621      	mov	r1, r4
 8005de8:	f7fa ff16 	bl	8000c18 <__aeabi_d2f>
 8005dec:	4603      	mov	r3, r0
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eeb1 8a67 	vneg.f32	s16, s15
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <cppFlip10ms+0x108>)
 8005df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f7fa ff0a 	bl	8000c18 <__aeabi_d2f>
 8005e04:	4603      	mov	r3, r0
 8005e06:	ee00 3a90 	vmov	s1, r3
 8005e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8005e0e:	480c      	ldr	r0, [pc, #48]	; (8005e40 <cppFlip10ms+0x114>)
 8005e10:	f7fd fe7a 	bl	8003b08 <_ZN12VelocityCtrl11setVelocityEff>
	mon_v = v;
	mon_w = w;

	velocity_ctrl.setVelocity(-mon_v, mon_w);
	*/
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	ecbd 8b04 	vpop	{d8-d9}
 8005e1e:	bd90      	pop	{r4, r7, pc}
 8005e20:	20000264 	.word	0x20000264
 8005e24:	200005a0 	.word	0x200005a0
 8005e28:	2001f2a8 	.word	0x2001f2a8
 8005e2c:	2001f2d8 	.word	0x2001f2d8
 8005e30:	20036a18 	.word	0x20036a18
 8005e34:	20036a20 	.word	0x20036a20
 8005e38:	20036a10 	.word	0x20036a10
 8005e3c:	20036a14 	.word	0x20036a14
 8005e40:	2001f208 	.word	0x2001f208

08005e44 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	4619      	mov	r1, r3
 8005e52:	4803      	ldr	r0, [pc, #12]	; (8005e60 <cppExit+0x1c>)
 8005e54:	f7fd fc48 	bl	80036e8 <_ZN10SideSensor12updateStatusEt>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000055c 	.word	0x2000055c
 8005e64:	00000000 	.word	0x00000000

08005e68 <cppLoop>:

void cppLoop(void)
{
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005e6e:	48c0      	ldr	r0, [pc, #768]	; (8006170 <cppLoop+0x308>)
 8005e70:	f7fd fbe0 	bl	8003634 <_ZN12RotarySwitch8getValueEv>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	f200 852a 	bhi.w	80068d0 <cppLoop+0xa68>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <cppLoop+0x1c>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ee9 	.word	0x08005ee9
 8005e8c:	08005f73 	.word	0x08005f73
 8005e90:	08006021 	.word	0x08006021
 8005e94:	080060db 	.word	0x080060db
 8005e98:	080061d5 	.word	0x080061d5
 8005e9c:	080062a1 	.word	0x080062a1
 8005ea0:	0800635b 	.word	0x0800635b
 8005ea4:	08006479 	.word	0x08006479
 8005ea8:	080068d1 	.word	0x080068d1
 8005eac:	080068d1 	.word	0x080068d1
 8005eb0:	080068d1 	.word	0x080068d1
 8005eb4:	080068d1 	.word	0x080068d1
 8005eb8:	080068d1 	.word	0x080068d1
 8005ebc:	080068d1 	.word	0x080068d1
 8005ec0:	080068d1 	.word	0x080068d1

	case 0:
		lcd_clear();
 8005ec4:	f7fb f8ec 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005ec8:	2100      	movs	r1, #0
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7fb f8f8 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005ed0:	48a8      	ldr	r0, [pc, #672]	; (8006174 <cppLoop+0x30c>)
 8005ed2:	f7fb f91f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f7fb f8f1 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005ede:	48a6      	ldr	r0, [pc, #664]	; (8006178 <cppLoop+0x310>)
 8005ee0:	f7fb f918 	bl	8001114 <lcd_printf>
		break;
 8005ee4:	f000 bd05 	b.w	80068f2 <cppLoop+0xa8a>

	case 1:
		lcd_clear();
 8005ee8:	f7fb f8da 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005eec:	2100      	movs	r1, #0
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f7fb f8e6 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005ef4:	48a1      	ldr	r0, [pc, #644]	; (800617c <cppLoop+0x314>)
 8005ef6:	f7fb f90d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005efa:	2101      	movs	r1, #1
 8005efc:	2000      	movs	r0, #0
 8005efe:	f7fb f8df 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005f02:	489f      	ldr	r0, [pc, #636]	; (8006180 <cppLoop+0x318>)
 8005f04:	f7fb f906 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f08:	489e      	ldr	r0, [pc, #632]	; (8006184 <cppLoop+0x31c>)
 8005f0a:	f7fb ffe9 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	bf0c      	ite	eq
 8005f14:	2301      	moveq	r3, #1
 8005f16:	2300      	movne	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 84da 	beq.w	80068d4 <cppLoop+0xa6c>
			HAL_Delay(500);
 8005f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f24:	f000 fdfa 	bl	8006b1c <HAL_Delay>

			logger.start();
 8005f28:	4897      	ldr	r0, [pc, #604]	; (8006188 <cppLoop+0x320>)
 8005f2a:	f7fc fd5e 	bl	80029ea <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005f2e:	4897      	ldr	r0, [pc, #604]	; (800618c <cppLoop+0x324>)
 8005f30:	f7fd fe43 	bl	8003bba <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005f34:	eddf 0a96 	vldr	s1, [pc, #600]	; 8006190 <cppLoop+0x328>
 8005f38:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8006190 <cppLoop+0x328>
 8005f3c:	4893      	ldr	r0, [pc, #588]	; (800618c <cppLoop+0x324>)
 8005f3e:	f7fd fde3 	bl	8003b08 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295
 8005f46:	2101      	movs	r1, #1
 8005f48:	4892      	ldr	r0, [pc, #584]	; (8006194 <cppLoop+0x32c>)
 8005f4a:	f7fc f8e9 	bl	8002120 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005f4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005f52:	f000 fde3 	bl	8006b1c <HAL_Delay>

			velocity_ctrl.stop();
 8005f56:	488d      	ldr	r0, [pc, #564]	; (800618c <cppLoop+0x324>)
 8005f58:	f7fd fe3e 	bl	8003bd8 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f60:	2100      	movs	r1, #0
 8005f62:	488c      	ldr	r0, [pc, #560]	; (8006194 <cppLoop+0x32c>)
 8005f64:	f7fc f8dc 	bl	8002120 <_ZN3LED2LREaa>

			logger.stop();
 8005f68:	4887      	ldr	r0, [pc, #540]	; (8006188 <cppLoop+0x320>)
 8005f6a:	f7fc fd4e 	bl	8002a0a <_ZN6Logger4stopEv>
		}

		break;
 8005f6e:	f000 bcb1 	b.w	80068d4 <cppLoop+0xa6c>

	case 2:
		lcd_clear();
 8005f72:	f7fb f895 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f76:	2100      	movs	r1, #0
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f7fb f8a1 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005f7e:	4886      	ldr	r0, [pc, #536]	; (8006198 <cppLoop+0x330>)
 8005f80:	f7fb f8c8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f84:	2101      	movs	r1, #1
 8005f86:	2000      	movs	r0, #0
 8005f88:	f7fb f89a 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005f8c:	4883      	ldr	r0, [pc, #524]	; (800619c <cppLoop+0x334>)
 8005f8e:	f7fb f8c1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f92:	487c      	ldr	r0, [pc, #496]	; (8006184 <cppLoop+0x31c>)
 8005f94:	f7fb ffa4 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8497 	beq.w	80068d8 <cppLoop+0xa70>
			led.LR(-1, 1);
 8005faa:	2201      	movs	r2, #1
 8005fac:	f04f 31ff 	mov.w	r1, #4294967295
 8005fb0:	4878      	ldr	r0, [pc, #480]	; (8006194 <cppLoop+0x32c>)
 8005fb2:	f7fc f8b5 	bl	8002120 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fba:	f000 fdaf 	bl	8006b1c <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005fbe:	4b78      	ldr	r3, [pc, #480]	; (80061a0 <cppLoop+0x338>)
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
			double d = 0.123456789123456789123456789;
 8005fc2:	a469      	add	r4, pc, #420	; (adr r4, 8006168 <cppLoop+0x300>)
 8005fc4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fc8:	e9c7 3408 	strd	r3, r4, [r7, #32]
			mon_f = f;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fa fad2 	bl	8000578 <__aeabi_f2d>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4a72      	ldr	r2, [pc, #456]	; (80061a4 <cppLoop+0x33c>)
 8005fda:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005fde:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005fe2:	4a71      	ldr	r2, [pc, #452]	; (80061a8 <cppLoop+0x340>)
 8005fe4:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005fe8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	496d      	ldr	r1, [pc, #436]	; (80061ac <cppLoop+0x344>)
 8005ff6:	486e      	ldr	r0, [pc, #440]	; (80061b0 <cppLoop+0x348>)
 8005ff8:	f7fb fa9a 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005ffc:	f107 0220 	add.w	r2, r7, #32
 8006000:	2300      	movs	r3, #0
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	2201      	movs	r2, #1
 8006008:	496a      	ldr	r1, [pc, #424]	; (80061b4 <cppLoop+0x34c>)
 800600a:	4869      	ldr	r0, [pc, #420]	; (80061b0 <cppLoop+0x348>)
 800600c:	f7fb faf6 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8006010:	2200      	movs	r2, #0
 8006012:	f04f 31ff 	mov.w	r1, #4294967295
 8006016:	485f      	ldr	r0, [pc, #380]	; (8006194 <cppLoop+0x32c>)
 8006018:	f7fc f882 	bl	8002120 <_ZN3LED2LREaa>
		}
		break;
 800601c:	f000 bc5c 	b.w	80068d8 <cppLoop+0xa70>

	case 3:
		led.fullColor('C');
 8006020:	2143      	movs	r1, #67	; 0x43
 8006022:	485c      	ldr	r0, [pc, #368]	; (8006194 <cppLoop+0x32c>)
 8006024:	f7fb ffc0 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006028:	f7fb f83a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800602c:	2100      	movs	r1, #0
 800602e:	2000      	movs	r0, #0
 8006030:	f7fb f846 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006034:	4860      	ldr	r0, [pc, #384]	; (80061b8 <cppLoop+0x350>)
 8006036:	f7fb f86d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800603a:	2101      	movs	r1, #1
 800603c:	2000      	movs	r0, #0
 800603e:	f7fb f83f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006042:	485e      	ldr	r0, [pc, #376]	; (80061bc <cppLoop+0x354>)
 8006044:	f7fb f866 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006048:	484e      	ldr	r0, [pc, #312]	; (8006184 <cppLoop+0x31c>)
 800604a:	f7fb ff49 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 800604e:	4603      	mov	r3, r0
 8006050:	2b02      	cmp	r3, #2
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 843e 	beq.w	80068dc <cppLoop+0xa74>
			led.LR(-1, 1);
 8006060:	2201      	movs	r2, #1
 8006062:	f04f 31ff 	mov.w	r1, #4294967295
 8006066:	484b      	ldr	r0, [pc, #300]	; (8006194 <cppLoop+0x32c>)
 8006068:	f7fc f85a 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800606c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006070:	f000 fd54 	bl	8006b1c <HAL_Delay>

			logger.start();
 8006074:	4844      	ldr	r0, [pc, #272]	; (8006188 <cppLoop+0x320>)
 8006076:	f7fc fcb8 	bl	80029ea <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 800607a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80061c0 <cppLoop+0x358>
 800607e:	4851      	ldr	r0, [pc, #324]	; (80061c4 <cppLoop+0x35c>)
 8006080:	f7fc fb5f 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006084:	484f      	ldr	r0, [pc, #316]	; (80061c4 <cppLoop+0x35c>)
 8006086:	f7fc fbb3 	bl	80027f0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 800608a:	f241 3088 	movw	r0, #5000	; 0x1388
 800608e:	f000 fd45 	bl	8006b1c <HAL_Delay>

			logger.stop();
 8006092:	483d      	ldr	r0, [pc, #244]	; (8006188 <cppLoop+0x320>)
 8006094:	f7fc fcb9 	bl	8002a0a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006098:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80061c0 <cppLoop+0x358>
 800609c:	4849      	ldr	r0, [pc, #292]	; (80061c4 <cppLoop+0x35c>)
 800609e:	f7fc fb50 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80060a2:	4848      	ldr	r0, [pc, #288]	; (80061c4 <cppLoop+0x35c>)
 80060a4:	f7fc fbb4 	bl	8002810 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	2101      	movs	r1, #1
 80060ae:	4839      	ldr	r0, [pc, #228]	; (8006194 <cppLoop+0x32c>)
 80060b0:	f7fc f836 	bl	8002120 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 80060b4:	4a44      	ldr	r2, [pc, #272]	; (80061c8 <cppLoop+0x360>)
 80060b6:	4945      	ldr	r1, [pc, #276]	; (80061cc <cppLoop+0x364>)
 80060b8:	4833      	ldr	r0, [pc, #204]	; (8006188 <cppLoop+0x320>)
 80060ba:	f7fc fc5f 	bl	800297c <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 80060be:	f04f 32ff 	mov.w	r2, #4294967295
 80060c2:	2100      	movs	r1, #0
 80060c4:	4833      	ldr	r0, [pc, #204]	; (8006194 <cppLoop+0x32c>)
 80060c6:	f7fc f82b 	bl	8002120 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	f04f 31ff 	mov.w	r1, #4294967295
 80060d0:	4830      	ldr	r0, [pc, #192]	; (8006194 <cppLoop+0x32c>)
 80060d2:	f7fc f825 	bl	8002120 <_ZN3LED2LREaa>
		}

		break;
 80060d6:	f000 bc01 	b.w	80068dc <cppLoop+0xa74>

	case 4:
		led.fullColor('M');
 80060da:	214d      	movs	r1, #77	; 0x4d
 80060dc:	482d      	ldr	r0, [pc, #180]	; (8006194 <cppLoop+0x32c>)
 80060de:	f7fb ff63 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 80060e2:	f7fa ffdd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80060e6:	2100      	movs	r1, #0
 80060e8:	2000      	movs	r0, #0
 80060ea:	f7fa ffe9 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80060ee:	4838      	ldr	r0, [pc, #224]	; (80061d0 <cppLoop+0x368>)
 80060f0:	f7fb f810 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80060f4:	2101      	movs	r1, #1
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7fa ffe2 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80060fc:	482f      	ldr	r0, [pc, #188]	; (80061bc <cppLoop+0x354>)
 80060fe:	f7fb f809 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006102:	4820      	ldr	r0, [pc, #128]	; (8006184 <cppLoop+0x31c>)
 8006104:	f7fb feec 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006108:	4603      	mov	r3, r0
 800610a:	2b02      	cmp	r3, #2
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 83e3 	beq.w	80068e0 <cppLoop+0xa78>
			led.LR(-1, 1);
 800611a:	2201      	movs	r2, #1
 800611c:	f04f 31ff 	mov.w	r1, #4294967295
 8006120:	481c      	ldr	r0, [pc, #112]	; (8006194 <cppLoop+0x32c>)
 8006122:	f7fb fffd 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800612a:	f000 fcf7 	bl	8006b1c <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 800612e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80061c0 <cppLoop+0x358>
 8006132:	4824      	ldr	r0, [pc, #144]	; (80061c4 <cppLoop+0x35c>)
 8006134:	f7fc fb14 	bl	8002760 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006138:	4814      	ldr	r0, [pc, #80]	; (800618c <cppLoop+0x324>)
 800613a:	f7fd fd3e 	bl	8003bba <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 800613e:	4821      	ldr	r0, [pc, #132]	; (80061c4 <cppLoop+0x35c>)
 8006140:	f7fc fb56 	bl	80027f0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006144:	f242 7010 	movw	r0, #10000	; 0x2710
 8006148:	f000 fce8 	bl	8006b1c <HAL_Delay>

			line_trace.stop();
 800614c:	481d      	ldr	r0, [pc, #116]	; (80061c4 <cppLoop+0x35c>)
 800614e:	f7fc fb5f 	bl	8002810 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006152:	480e      	ldr	r0, [pc, #56]	; (800618c <cppLoop+0x324>)
 8006154:	f7fd fd40 	bl	8003bd8 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006158:	2200      	movs	r2, #0
 800615a:	f04f 31ff 	mov.w	r1, #4294967295
 800615e:	480d      	ldr	r0, [pc, #52]	; (8006194 <cppLoop+0x32c>)
 8006160:	f7fb ffde 	bl	8002120 <_ZN3LED2LREaa>
		}
		break;
 8006164:	e3bc      	b.n	80068e0 <cppLoop+0xa78>
 8006166:	bf00      	nop
 8006168:	37c1215e 	.word	0x37c1215e
 800616c:	3fbf9add 	.word	0x3fbf9add
 8006170:	20000564 	.word	0x20000564
 8006174:	080176e8 	.word	0x080176e8
 8006178:	080176ec 	.word	0x080176ec
 800617c:	080176f4 	.word	0x080176f4
 8006180:	08017700 	.word	0x08017700
 8006184:	20000560 	.word	0x20000560
 8006188:	200005a0 	.word	0x200005a0
 800618c:	2001f208 	.word	0x2001f208
 8006190:	00000000 	.word	0x00000000
 8006194:	2000056c 	.word	0x2000056c
 8006198:	08017708 	.word	0x08017708
 800619c:	0801770c 	.word	0x0801770c
 80061a0:	3dfcd6ea 	.word	0x3dfcd6ea
 80061a4:	20036a00 	.word	0x20036a00
 80061a8:	20036a08 	.word	0x20036a08
 80061ac:	08017714 	.word	0x08017714
 80061b0:	08017720 	.word	0x08017720
 80061b4:	0801772c 	.word	0x0801772c
 80061b8:	08017738 	.word	0x08017738
 80061bc:	08017740 	.word	0x08017740
 80061c0:	3dcccccd 	.word	0x3dcccccd
 80061c4:	2001f248 	.word	0x2001f248
 80061c8:	08017748 	.word	0x08017748
 80061cc:	08017754 	.word	0x08017754
 80061d0:	08017764 	.word	0x08017764

	case 5:
		led.fullColor('Y');
 80061d4:	2159      	movs	r1, #89	; 0x59
 80061d6:	4894      	ldr	r0, [pc, #592]	; (8006428 <cppLoop+0x5c0>)
 80061d8:	f7fb fee6 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 80061dc:	f7fa ff60 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80061e0:	2100      	movs	r1, #0
 80061e2:	2000      	movs	r0, #0
 80061e4:	f7fa ff6c 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80061e8:	4890      	ldr	r0, [pc, #576]	; (800642c <cppLoop+0x5c4>)
 80061ea:	f7fa ff93 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061ee:	2101      	movs	r1, #1
 80061f0:	2000      	movs	r0, #0
 80061f2:	f7fa ff65 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80061f6:	488e      	ldr	r0, [pc, #568]	; (8006430 <cppLoop+0x5c8>)
 80061f8:	f7fa ff8c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80061fc:	488d      	ldr	r0, [pc, #564]	; (8006434 <cppLoop+0x5cc>)
 80061fe:	f7fb fe6f 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006202:	4603      	mov	r3, r0
 8006204:	2b02      	cmp	r3, #2
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8368 	beq.w	80068e4 <cppLoop+0xa7c>
			led.LR(-1, 1);
 8006214:	2201      	movs	r2, #1
 8006216:	f04f 31ff 	mov.w	r1, #4294967295
 800621a:	4883      	ldr	r0, [pc, #524]	; (8006428 <cppLoop+0x5c0>)
 800621c:	f7fb ff80 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006224:	f000 fc7a 	bl	8006b1c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006228:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8006438 <cppLoop+0x5d0>
 800622c:	4883      	ldr	r0, [pc, #524]	; (800643c <cppLoop+0x5d4>)
 800622e:	f7fc fa88 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006232:	4882      	ldr	r0, [pc, #520]	; (800643c <cppLoop+0x5d4>)
 8006234:	f7fc fadc 	bl	80027f0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800623c:	f000 fc6e 	bl	8006b1c <HAL_Delay>

			led.fullColor('R');
 8006240:	2152      	movs	r1, #82	; 0x52
 8006242:	4879      	ldr	r0, [pc, #484]	; (8006428 <cppLoop+0x5c0>)
 8006244:	f7fb feb0 	bl	8001fa8 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006248:	487d      	ldr	r0, [pc, #500]	; (8006440 <cppLoop+0x5d8>)
 800624a:	f7fb f8df 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800624e:	487c      	ldr	r0, [pc, #496]	; (8006440 <cppLoop+0x5d8>)
 8006250:	f7fb f8a2 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006254:	f242 7010 	movw	r0, #10000	; 0x2710
 8006258:	f000 fc60 	bl	8006b1c <HAL_Delay>

			line_trace.stop();
 800625c:	4877      	ldr	r0, [pc, #476]	; (800643c <cppLoop+0x5d4>)
 800625e:	f7fc fad7 	bl	8002810 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006262:	4978      	ldr	r1, [pc, #480]	; (8006444 <cppLoop+0x5dc>)
 8006264:	4878      	ldr	r0, [pc, #480]	; (8006448 <cppLoop+0x5e0>)
 8006266:	f7fb f8ef 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 800626a:	4875      	ldr	r0, [pc, #468]	; (8006440 <cppLoop+0x5d8>)
 800626c:	f7fb f883 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8006270:	ec54 3b10 	vmov	r3, r4, d0
 8006274:	4618      	mov	r0, r3
 8006276:	4621      	mov	r1, r4
 8006278:	f7fa fcce 	bl	8000c18 <__aeabi_d2f>
 800627c:	4603      	mov	r3, r0
 800627e:	61fb      	str	r3, [r7, #28]
			sd_write_float(1, &d, ADD_WRITE);
 8006280:	f107 031c 	add.w	r3, r7, #28
 8006284:	2201      	movs	r2, #1
 8006286:	4619      	mov	r1, r3
 8006288:	2001      	movs	r0, #1
 800628a:	f7fb f8ff 	bl	800148c <sd_write_float>
			user_fclose();
 800628e:	f7fb f8ed 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 8006292:	2200      	movs	r2, #0
 8006294:	f04f 31ff 	mov.w	r1, #4294967295
 8006298:	4863      	ldr	r0, [pc, #396]	; (8006428 <cppLoop+0x5c0>)
 800629a:	f7fb ff41 	bl	8002120 <_ZN3LED2LREaa>
		}

		break;
 800629e:	e321      	b.n	80068e4 <cppLoop+0xa7c>

	case 6:
		led.fullColor('C');
 80062a0:	2143      	movs	r1, #67	; 0x43
 80062a2:	4861      	ldr	r0, [pc, #388]	; (8006428 <cppLoop+0x5c0>)
 80062a4:	f7fb fe80 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062a8:	f7fa fefa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062ac:	2100      	movs	r1, #0
 80062ae:	2000      	movs	r0, #0
 80062b0:	f7fa ff06 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 80062b4:	4865      	ldr	r0, [pc, #404]	; (800644c <cppLoop+0x5e4>)
 80062b6:	f7fa ff2d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062ba:	2101      	movs	r1, #1
 80062bc:	2000      	movs	r0, #0
 80062be:	f7fa feff 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80062c2:	4863      	ldr	r0, [pc, #396]	; (8006450 <cppLoop+0x5e8>)
 80062c4:	f7fa ff26 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80062c8:	485a      	ldr	r0, [pc, #360]	; (8006434 <cppLoop+0x5cc>)
 80062ca:	f7fb fe09 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8304 	beq.w	80068e8 <cppLoop+0xa80>
			HAL_Delay(500);
 80062e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062e4:	f000 fc1a 	bl	8006b1c <HAL_Delay>
			led.LR(-1, 1);
 80062e8:	2201      	movs	r2, #1
 80062ea:	f04f 31ff 	mov.w	r1, #4294967295
 80062ee:	484e      	ldr	r0, [pc, #312]	; (8006428 <cppLoop+0x5c0>)
 80062f0:	f7fb ff16 	bl	8002120 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 80062f4:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8006454 <cppLoop+0x5ec>
 80062f8:	4850      	ldr	r0, [pc, #320]	; (800643c <cppLoop+0x5d4>)
 80062fa:	f7fc fa22 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80062fe:	484f      	ldr	r0, [pc, #316]	; (800643c <cppLoop+0x5d4>)
 8006300:	f7fc fa76 	bl	80027f0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006308:	f000 fc08 	bl	8006b1c <HAL_Delay>

			led.fullColor('R');
 800630c:	2152      	movs	r1, #82	; 0x52
 800630e:	4846      	ldr	r0, [pc, #280]	; (8006428 <cppLoop+0x5c0>)
 8006310:	f7fb fe4a 	bl	8001fa8 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006314:	484a      	ldr	r0, [pc, #296]	; (8006440 <cppLoop+0x5d8>)
 8006316:	f7fb f879 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800631a:	4849      	ldr	r0, [pc, #292]	; (8006440 <cppLoop+0x5d8>)
 800631c:	f7fb f83c 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006320:	484d      	ldr	r0, [pc, #308]	; (8006458 <cppLoop+0x5f0>)
 8006322:	f7fc fda1 	bl	8002e68 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006326:	484d      	ldr	r0, [pc, #308]	; (800645c <cppLoop+0x5f4>)
 8006328:	f7fc fb5f 	bl	80029ea <_ZN6Logger5startEv>

			HAL_Delay(3000);
 800632c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006330:	f000 fbf4 	bl	8006b1c <HAL_Delay>

			line_trace.stop();
 8006334:	4841      	ldr	r0, [pc, #260]	; (800643c <cppLoop+0x5d4>)
 8006336:	f7fc fa6b 	bl	8002810 <_ZN9LineTrace4stopEv>
			logger.stop();
 800633a:	4848      	ldr	r0, [pc, #288]	; (800645c <cppLoop+0x5f4>)
 800633c:	f7fc fb65 	bl	8002a0a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006340:	4b47      	ldr	r3, [pc, #284]	; (8006460 <cppLoop+0x5f8>)
 8006342:	4a48      	ldr	r2, [pc, #288]	; (8006464 <cppLoop+0x5fc>)
 8006344:	4948      	ldr	r1, [pc, #288]	; (8006468 <cppLoop+0x600>)
 8006346:	4845      	ldr	r0, [pc, #276]	; (800645c <cppLoop+0x5f4>)
 8006348:	f7fc fb2c 	bl	80029a4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 800634c:	2200      	movs	r2, #0
 800634e:	f04f 31ff 	mov.w	r1, #4294967295
 8006352:	4835      	ldr	r0, [pc, #212]	; (8006428 <cppLoop+0x5c0>)
 8006354:	f7fb fee4 	bl	8002120 <_ZN3LED2LREaa>
		}

		break;
 8006358:	e2c6      	b.n	80068e8 <cppLoop+0xa80>

	case 7:
		led.fullColor('M');
 800635a:	214d      	movs	r1, #77	; 0x4d
 800635c:	4832      	ldr	r0, [pc, #200]	; (8006428 <cppLoop+0x5c0>)
 800635e:	f7fb fe23 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006362:	f7fa fe9d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006366:	2100      	movs	r1, #0
 8006368:	2000      	movs	r0, #0
 800636a:	f7fa fea9 	bl	80010c0 <lcd_locate>
		lcd_printf("Path");
 800636e:	483f      	ldr	r0, [pc, #252]	; (800646c <cppLoop+0x604>)
 8006370:	f7fa fed0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006374:	2101      	movs	r1, #1
 8006376:	2000      	movs	r0, #0
 8006378:	f7fa fea2 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800637c:	482c      	ldr	r0, [pc, #176]	; (8006430 <cppLoop+0x5c8>)
 800637e:	f7fa fec9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8006382:	482c      	ldr	r0, [pc, #176]	; (8006434 <cppLoop+0x5cc>)
 8006384:	f7fb fdac 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006388:	4603      	mov	r3, r0
 800638a:	2b04      	cmp	r3, #4
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00f      	beq.n	80063b8 <cppLoop+0x550>
			led.LR(-1, 1);
 8006398:	2201      	movs	r2, #1
 800639a:	f04f 31ff 	mov.w	r1, #4294967295
 800639e:	4822      	ldr	r0, [pc, #136]	; (8006428 <cppLoop+0x5c0>)
 80063a0:	f7fb febe 	bl	8002120 <_ZN3LED2LREaa>
			path_following.setTargetPathMulti();
 80063a4:	4832      	ldr	r0, [pc, #200]	; (8006470 <cppLoop+0x608>)
 80063a6:	f7fc fec5 	bl	8003134 <_ZN13PathFollowing18setTargetPathMultiEv>
			led.LR(-1, 0);
 80063aa:	2200      	movs	r2, #0
 80063ac:	f04f 31ff 	mov.w	r1, #4294967295
 80063b0:	481d      	ldr	r0, [pc, #116]	; (8006428 <cppLoop+0x5c0>)
 80063b2:	f7fb feb5 	bl	8002120 <_ZN3LED2LREaa>
			path_following.stop();
			velocity_ctrl.stop();

			led.LR(-1, 0);
		}
		break;
 80063b6:	e299      	b.n	80068ec <cppLoop+0xa84>
		else if(joy_stick.getValue() == JOY_C){
 80063b8:	481e      	ldr	r0, [pc, #120]	; (8006434 <cppLoop+0x5cc>)
 80063ba:	f7fb fd91 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 828e 	beq.w	80068ec <cppLoop+0xa84>
			led.LR(-1, 1);
 80063d0:	2201      	movs	r2, #1
 80063d2:	f04f 31ff 	mov.w	r1, #4294967295
 80063d6:	4814      	ldr	r0, [pc, #80]	; (8006428 <cppLoop+0x5c0>)
 80063d8:	f7fb fea2 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063e0:	f000 fb9c 	bl	8006b1c <HAL_Delay>
			led.fullColor('R');
 80063e4:	2152      	movs	r1, #82	; 0x52
 80063e6:	4810      	ldr	r0, [pc, #64]	; (8006428 <cppLoop+0x5c0>)
 80063e8:	f7fb fdde 	bl	8001fa8 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80063ec:	4814      	ldr	r0, [pc, #80]	; (8006440 <cppLoop+0x5d8>)
 80063ee:	f7fb f80d 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80063f2:	4813      	ldr	r0, [pc, #76]	; (8006440 <cppLoop+0x5d8>)
 80063f4:	f7fa ffd0 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80063f8:	4817      	ldr	r0, [pc, #92]	; (8006458 <cppLoop+0x5f0>)
 80063fa:	f7fc fd35 	bl	8002e68 <_ZN8Odometry13clearPotitionEv>
			path_following.start();
 80063fe:	481c      	ldr	r0, [pc, #112]	; (8006470 <cppLoop+0x608>)
 8006400:	f7fd f874 	bl	80034ec <_ZN13PathFollowing5startEv>
			HAL_Delay(4000);
 8006404:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006408:	f000 fb88 	bl	8006b1c <HAL_Delay>
			path_following.stop();
 800640c:	4818      	ldr	r0, [pc, #96]	; (8006470 <cppLoop+0x608>)
 800640e:	f7fd f87a 	bl	8003506 <_ZN13PathFollowing4stopEv>
			velocity_ctrl.stop();
 8006412:	4818      	ldr	r0, [pc, #96]	; (8006474 <cppLoop+0x60c>)
 8006414:	f7fd fbe0 	bl	8003bd8 <_ZN12VelocityCtrl4stopEv>
			led.LR(-1, 0);
 8006418:	2200      	movs	r2, #0
 800641a:	f04f 31ff 	mov.w	r1, #4294967295
 800641e:	4802      	ldr	r0, [pc, #8]	; (8006428 <cppLoop+0x5c0>)
 8006420:	f7fb fe7e 	bl	8002120 <_ZN3LED2LREaa>
		break;
 8006424:	e262      	b.n	80068ec <cppLoop+0xa84>
 8006426:	bf00      	nop
 8006428:	2000056c 	.word	0x2000056c
 800642c:	08017770 	.word	0x08017770
 8006430:	08017778 	.word	0x08017778
 8006434:	20000560 	.word	0x20000560
 8006438:	00000000 	.word	0x00000000
 800643c:	2001f248 	.word	0x2001f248
 8006440:	2001f1d8 	.word	0x2001f1d8
 8006444:	08017784 	.word	0x08017784
 8006448:	0801778c 	.word	0x0801778c
 800644c:	08017798 	.word	0x08017798
 8006450:	080177a4 	.word	0x080177a4
 8006454:	3d8f5c29 	.word	0x3d8f5c29
 8006458:	2001f2a8 	.word	0x2001f2a8
 800645c:	200005a0 	.word	0x200005a0
 8006460:	080177ac 	.word	0x080177ac
 8006464:	080177b8 	.word	0x080177b8
 8006468:	080177c4 	.word	0x080177c4
 800646c:	080177c8 	.word	0x080177c8
 8006470:	2001f2d8 	.word	0x2001f2d8
 8006474:	2001f208 	.word	0x2001f208

	case 8:
		led.fullColor('M');
 8006478:	214d      	movs	r1, #77	; 0x4d
 800647a:	48ad      	ldr	r0, [pc, #692]	; (8006730 <cppLoop+0x8c8>)
 800647c:	f7fb fd94 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006480:	f7fa fe0e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006484:	2100      	movs	r1, #0
 8006486:	2000      	movs	r0, #0
 8006488:	f7fa fe1a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal());
 800648c:	48a9      	ldr	r0, [pc, #676]	; (8006734 <cppLoop+0x8cc>)
 800648e:	f7fc fe15 	bl	80030bc <_ZN13PathFollowing8getKxValEv>
 8006492:	ec54 3b10 	vmov	r3, r4, d0
 8006496:	461a      	mov	r2, r3
 8006498:	4623      	mov	r3, r4
 800649a:	48a7      	ldr	r0, [pc, #668]	; (8006738 <cppLoop+0x8d0>)
 800649c:	f7fa fe3a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80064a0:	2101      	movs	r1, #1
 80064a2:	2000      	movs	r0, #0
 80064a4:	f7fa fe0c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal(), path_following.getKtVal());
 80064a8:	48a2      	ldr	r0, [pc, #648]	; (8006734 <cppLoop+0x8cc>)
 80064aa:	f7fc fe1b 	bl	80030e4 <_ZN13PathFollowing8getKyValEv>
 80064ae:	ec55 4b10 	vmov	r4, r5, d0
 80064b2:	48a0      	ldr	r0, [pc, #640]	; (8006734 <cppLoop+0x8cc>)
 80064b4:	f7fc fe2a 	bl	800310c <_ZN13PathFollowing8getKtValEv>
 80064b8:	eeb0 7a40 	vmov.f32	s14, s0
 80064bc:	eef0 7a60 	vmov.f32	s15, s1
 80064c0:	ed8d 7b00 	vstr	d7, [sp]
 80064c4:	4622      	mov	r2, r4
 80064c6:	462b      	mov	r3, r5
 80064c8:	489c      	ldr	r0, [pc, #624]	; (800673c <cppLoop+0x8d4>)
 80064ca:	f7fa fe23 	bl	8001114 <lcd_printf>

		static double adj_kx = path_following.getKxVal();
 80064ce:	4b9c      	ldr	r3, [pc, #624]	; (8006740 <cppLoop+0x8d8>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f3bf 8f5b 	dmb	ish
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d017      	beq.n	800651a <cppLoop+0x6b2>
 80064ea:	4895      	ldr	r0, [pc, #596]	; (8006740 <cppLoop+0x8d8>)
 80064ec:	f00b f813 	bl	8011516 <__cxa_guard_acquire>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf14      	ite	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	2300      	moveq	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00c      	beq.n	800651a <cppLoop+0x6b2>
 8006500:	488c      	ldr	r0, [pc, #560]	; (8006734 <cppLoop+0x8cc>)
 8006502:	f7fc fddb 	bl	80030bc <_ZN13PathFollowing8getKxValEv>
 8006506:	eeb0 7a40 	vmov.f32	s14, s0
 800650a:	eef0 7a60 	vmov.f32	s15, s1
 800650e:	4b8d      	ldr	r3, [pc, #564]	; (8006744 <cppLoop+0x8dc>)
 8006510:	ed83 7b00 	vstr	d7, [r3]
 8006514:	488a      	ldr	r0, [pc, #552]	; (8006740 <cppLoop+0x8d8>)
 8006516:	f00b f80a 	bl	801152e <__cxa_guard_release>
		static double adj_ky = path_following.getKyVal();
 800651a:	4b8b      	ldr	r3, [pc, #556]	; (8006748 <cppLoop+0x8e0>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f3bf 8f5b 	dmb	ish
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <cppLoop+0x6fe>
 8006536:	4884      	ldr	r0, [pc, #528]	; (8006748 <cppLoop+0x8e0>)
 8006538:	f00a ffed 	bl	8011516 <__cxa_guard_acquire>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00c      	beq.n	8006566 <cppLoop+0x6fe>
 800654c:	4879      	ldr	r0, [pc, #484]	; (8006734 <cppLoop+0x8cc>)
 800654e:	f7fc fdc9 	bl	80030e4 <_ZN13PathFollowing8getKyValEv>
 8006552:	eeb0 7a40 	vmov.f32	s14, s0
 8006556:	eef0 7a60 	vmov.f32	s15, s1
 800655a:	4b7c      	ldr	r3, [pc, #496]	; (800674c <cppLoop+0x8e4>)
 800655c:	ed83 7b00 	vstr	d7, [r3]
 8006560:	4879      	ldr	r0, [pc, #484]	; (8006748 <cppLoop+0x8e0>)
 8006562:	f00a ffe4 	bl	801152e <__cxa_guard_release>
		static double adj_kt = path_following.getKtVal();
 8006566:	4b7a      	ldr	r3, [pc, #488]	; (8006750 <cppLoop+0x8e8>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f3bf 8f5b 	dmb	ish
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	bf0c      	ite	eq
 8006578:	2301      	moveq	r3, #1
 800657a:	2300      	movne	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d017      	beq.n	80065b2 <cppLoop+0x74a>
 8006582:	4873      	ldr	r0, [pc, #460]	; (8006750 <cppLoop+0x8e8>)
 8006584:	f00a ffc7 	bl	8011516 <__cxa_guard_acquire>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <cppLoop+0x74a>
 8006598:	4866      	ldr	r0, [pc, #408]	; (8006734 <cppLoop+0x8cc>)
 800659a:	f7fc fdb7 	bl	800310c <_ZN13PathFollowing8getKtValEv>
 800659e:	eeb0 7a40 	vmov.f32	s14, s0
 80065a2:	eef0 7a60 	vmov.f32	s15, s1
 80065a6:	4b6b      	ldr	r3, [pc, #428]	; (8006754 <cppLoop+0x8ec>)
 80065a8:	ed83 7b00 	vstr	d7, [r3]
 80065ac:	4868      	ldr	r0, [pc, #416]	; (8006750 <cppLoop+0x8e8>)
 80065ae:	f00a ffbe 	bl	801152e <__cxa_guard_release>
		static int16_t pf_gain_selector;

		if(joy_stick.getValue() == JOY_U){
 80065b2:	4869      	ldr	r0, [pc, #420]	; (8006758 <cppLoop+0x8f0>)
 80065b4:	f7fb fc94 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d021      	beq.n	800660c <cppLoop+0x7a4>
			led.LR(-1, 1);
 80065c8:	2201      	movs	r2, #1
 80065ca:	f04f 31ff 	mov.w	r1, #4294967295
 80065ce:	4858      	ldr	r0, [pc, #352]	; (8006730 <cppLoop+0x8c8>)
 80065d0:	f7fb fda6 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80065d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80065d8:	f000 faa0 	bl	8006b1c <HAL_Delay>

			pf_gain_selector++;
 80065dc:	4b5f      	ldr	r3, [pc, #380]	; (800675c <cppLoop+0x8f4>)
 80065de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	b21a      	sxth	r2, r3
 80065ea:	4b5c      	ldr	r3, [pc, #368]	; (800675c <cppLoop+0x8f4>)
 80065ec:	801a      	strh	r2, [r3, #0]
			if(pf_gain_selector >= 3) pf_gain_selector = 0;
 80065ee:	4b5b      	ldr	r3, [pc, #364]	; (800675c <cppLoop+0x8f4>)
 80065f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	dd02      	ble.n	80065fe <cppLoop+0x796>
 80065f8:	4b58      	ldr	r3, [pc, #352]	; (800675c <cppLoop+0x8f4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80065fe:	2200      	movs	r2, #0
 8006600:	f04f 31ff 	mov.w	r1, #4294967295
 8006604:	484a      	ldr	r0, [pc, #296]	; (8006730 <cppLoop+0x8c8>)
 8006606:	f7fb fd8b 	bl	8002120 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 800660a:	e171      	b.n	80068f0 <cppLoop+0xa88>
		else if(joy_stick.getValue() == JOY_R){
 800660c:	4852      	ldr	r0, [pc, #328]	; (8006758 <cppLoop+0x8f0>)
 800660e:	f7fb fc67 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006612:	4603      	mov	r3, r0
 8006614:	2b10      	cmp	r3, #16
 8006616:	bf0c      	ite	eq
 8006618:	2301      	moveq	r3, #1
 800661a:	2300      	movne	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d047      	beq.n	80066b2 <cppLoop+0x84a>
			led.LR(-1, 1);
 8006622:	2201      	movs	r2, #1
 8006624:	f04f 31ff 	mov.w	r1, #4294967295
 8006628:	4841      	ldr	r0, [pc, #260]	; (8006730 <cppLoop+0x8c8>)
 800662a:	f7fb fd79 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800662e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006632:	f000 fa73 	bl	8006b1c <HAL_Delay>
			if(pf_gain_selector == 0){
 8006636:	4b49      	ldr	r3, [pc, #292]	; (800675c <cppLoop+0x8f4>)
 8006638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <cppLoop+0x7f4>
				adj_kx = adj_kx + 0.01;
 8006640:	4b40      	ldr	r3, [pc, #256]	; (8006744 <cppLoop+0x8dc>)
 8006642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006646:	a338      	add	r3, pc, #224	; (adr r3, 8006728 <cppLoop+0x8c0>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7f9 fe36 	bl	80002bc <__adddf3>
 8006650:	4603      	mov	r3, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4a3b      	ldr	r2, [pc, #236]	; (8006744 <cppLoop+0x8dc>)
 8006656:	e9c2 3400 	strd	r3, r4, [r2]
 800665a:	e01f      	b.n	800669c <cppLoop+0x834>
			else if(pf_gain_selector == 1){
 800665c:	4b3f      	ldr	r3, [pc, #252]	; (800675c <cppLoop+0x8f4>)
 800665e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10d      	bne.n	8006682 <cppLoop+0x81a>
				adj_ky = adj_ky + 0.01;
 8006666:	4b39      	ldr	r3, [pc, #228]	; (800674c <cppLoop+0x8e4>)
 8006668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800666c:	a32e      	add	r3, pc, #184	; (adr r3, 8006728 <cppLoop+0x8c0>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 fe23 	bl	80002bc <__adddf3>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	4a34      	ldr	r2, [pc, #208]	; (800674c <cppLoop+0x8e4>)
 800667c:	e9c2 3400 	strd	r3, r4, [r2]
 8006680:	e00c      	b.n	800669c <cppLoop+0x834>
				adj_kt = adj_kt + 0.01;
 8006682:	4b34      	ldr	r3, [pc, #208]	; (8006754 <cppLoop+0x8ec>)
 8006684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006688:	a327      	add	r3, pc, #156	; (adr r3, 8006728 <cppLoop+0x8c0>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 fe15 	bl	80002bc <__adddf3>
 8006692:	4603      	mov	r3, r0
 8006694:	460c      	mov	r4, r1
 8006696:	4a2f      	ldr	r2, [pc, #188]	; (8006754 <cppLoop+0x8ec>)
 8006698:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 800669c:	2152      	movs	r1, #82	; 0x52
 800669e:	4824      	ldr	r0, [pc, #144]	; (8006730 <cppLoop+0x8c8>)
 80066a0:	f7fb fc82 	bl	8001fa8 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80066a4:	2200      	movs	r2, #0
 80066a6:	f04f 31ff 	mov.w	r1, #4294967295
 80066aa:	4821      	ldr	r0, [pc, #132]	; (8006730 <cppLoop+0x8c8>)
 80066ac:	f7fb fd38 	bl	8002120 <_ZN3LED2LREaa>
		break;
 80066b0:	e11e      	b.n	80068f0 <cppLoop+0xa88>
		else if(joy_stick.getValue() == JOY_L){
 80066b2:	4829      	ldr	r0, [pc, #164]	; (8006758 <cppLoop+0x8f0>)
 80066b4:	f7fb fc14 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d063      	beq.n	8006790 <cppLoop+0x928>
			led.LR(-1, 1);
 80066c8:	2201      	movs	r2, #1
 80066ca:	f04f 31ff 	mov.w	r1, #4294967295
 80066ce:	4818      	ldr	r0, [pc, #96]	; (8006730 <cppLoop+0x8c8>)
 80066d0:	f7fb fd26 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80066d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066d8:	f000 fa20 	bl	8006b1c <HAL_Delay>
			if(pf_gain_selector == 0){
 80066dc:	4b1f      	ldr	r3, [pc, #124]	; (800675c <cppLoop+0x8f4>)
 80066de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <cppLoop+0x89a>
				adj_kx = adj_kx - 0.01;
 80066e6:	4b17      	ldr	r3, [pc, #92]	; (8006744 <cppLoop+0x8dc>)
 80066e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ec:	a30e      	add	r3, pc, #56	; (adr r3, 8006728 <cppLoop+0x8c0>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f7f9 fde1 	bl	80002b8 <__aeabi_dsub>
 80066f6:	4603      	mov	r3, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	4a12      	ldr	r2, [pc, #72]	; (8006744 <cppLoop+0x8dc>)
 80066fc:	e9c2 3400 	strd	r3, r4, [r2]
 8006700:	e03b      	b.n	800677a <cppLoop+0x912>
			else if(pf_gain_selector == 1){
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <cppLoop+0x8f4>)
 8006704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d129      	bne.n	8006760 <cppLoop+0x8f8>
				adj_ky = adj_ky - 0.01;
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <cppLoop+0x8e4>)
 800670e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006712:	a305      	add	r3, pc, #20	; (adr r3, 8006728 <cppLoop+0x8c0>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fdce 	bl	80002b8 <__aeabi_dsub>
 800671c:	4603      	mov	r3, r0
 800671e:	460c      	mov	r4, r1
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <cppLoop+0x8e4>)
 8006722:	e9c2 3400 	strd	r3, r4, [r2]
 8006726:	e028      	b.n	800677a <cppLoop+0x912>
 8006728:	47ae147b 	.word	0x47ae147b
 800672c:	3f847ae1 	.word	0x3f847ae1
 8006730:	2000056c 	.word	0x2000056c
 8006734:	2001f2d8 	.word	0x2001f2d8
 8006738:	080177d0 	.word	0x080177d0
 800673c:	080177dc 	.word	0x080177dc
 8006740:	20036a30 	.word	0x20036a30
 8006744:	20036a28 	.word	0x20036a28
 8006748:	20036a40 	.word	0x20036a40
 800674c:	20036a38 	.word	0x20036a38
 8006750:	20036a50 	.word	0x20036a50
 8006754:	20036a48 	.word	0x20036a48
 8006758:	20000560 	.word	0x20000560
 800675c:	20036a54 	.word	0x20036a54
				adj_kt = adj_kt - 0.01;
 8006760:	4b69      	ldr	r3, [pc, #420]	; (8006908 <cppLoop+0xaa0>)
 8006762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006766:	a366      	add	r3, pc, #408	; (adr r3, 8006900 <cppLoop+0xa98>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7f9 fda4 	bl	80002b8 <__aeabi_dsub>
 8006770:	4603      	mov	r3, r0
 8006772:	460c      	mov	r4, r1
 8006774:	4a64      	ldr	r2, [pc, #400]	; (8006908 <cppLoop+0xaa0>)
 8006776:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 800677a:	2152      	movs	r1, #82	; 0x52
 800677c:	4863      	ldr	r0, [pc, #396]	; (800690c <cppLoop+0xaa4>)
 800677e:	f7fb fc13 	bl	8001fa8 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006782:	2200      	movs	r2, #0
 8006784:	f04f 31ff 	mov.w	r1, #4294967295
 8006788:	4860      	ldr	r0, [pc, #384]	; (800690c <cppLoop+0xaa4>)
 800678a:	f7fb fcc9 	bl	8002120 <_ZN3LED2LREaa>
		break;
 800678e:	e0af      	b.n	80068f0 <cppLoop+0xa88>
		else if(joy_stick.getValue() == JOY_D){
 8006790:	485f      	ldr	r0, [pc, #380]	; (8006910 <cppLoop+0xaa8>)
 8006792:	f7fb fba5 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006796:	4603      	mov	r3, r0
 8006798:	2b04      	cmp	r3, #4
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d048      	beq.n	8006838 <cppLoop+0x9d0>
			led.LR(-1, 1);
 80067a6:	2201      	movs	r2, #1
 80067a8:	f04f 31ff 	mov.w	r1, #4294967295
 80067ac:	4857      	ldr	r0, [pc, #348]	; (800690c <cppLoop+0xaa4>)
 80067ae:	f7fb fcb7 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80067b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067b6:	f000 f9b1 	bl	8006b1c <HAL_Delay>
			sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 80067ba:	f107 0310 	add.w	r3, r7, #16
 80067be:	2201      	movs	r2, #1
 80067c0:	4954      	ldr	r1, [pc, #336]	; (8006914 <cppLoop+0xaac>)
 80067c2:	4855      	ldr	r0, [pc, #340]	; (8006918 <cppLoop+0xab0>)
 80067c4:	f7fa ff7c 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	2201      	movs	r2, #1
 80067ce:	4953      	ldr	r1, [pc, #332]	; (800691c <cppLoop+0xab4>)
 80067d0:	4851      	ldr	r0, [pc, #324]	; (8006918 <cppLoop+0xab0>)
 80067d2:	f7fa ff75 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 80067d6:	463b      	mov	r3, r7
 80067d8:	2201      	movs	r2, #1
 80067da:	4951      	ldr	r1, [pc, #324]	; (8006920 <cppLoop+0xab8>)
 80067dc:	484e      	ldr	r0, [pc, #312]	; (8006918 <cppLoop+0xab0>)
 80067de:	f7fa ff6f 	bl	80016c0 <sd_read_array_double>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 80067e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80067e6:	ed97 6b02 	vldr	d6, [r7, #8]
 80067ea:	ed97 5b00 	vldr	d5, [r7]
 80067ee:	eeb0 2a45 	vmov.f32	s4, s10
 80067f2:	eef0 2a65 	vmov.f32	s5, s11
 80067f6:	eeb0 1a46 	vmov.f32	s2, s12
 80067fa:	eef0 1a66 	vmov.f32	s3, s13
 80067fe:	eeb0 0a47 	vmov.f32	s0, s14
 8006802:	eef0 0a67 	vmov.f32	s1, s15
 8006806:	4847      	ldr	r0, [pc, #284]	; (8006924 <cppLoop+0xabc>)
 8006808:	f7fc fc38 	bl	800307c <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800680c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006810:	4a45      	ldr	r2, [pc, #276]	; (8006928 <cppLoop+0xac0>)
 8006812:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ky = temp_ky;
 8006816:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800681a:	4a44      	ldr	r2, [pc, #272]	; (800692c <cppLoop+0xac4>)
 800681c:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kt = temp_kt;
 8006820:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006824:	4a38      	ldr	r2, [pc, #224]	; (8006908 <cppLoop+0xaa0>)
 8006826:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 800682a:	2200      	movs	r2, #0
 800682c:	f04f 31ff 	mov.w	r1, #4294967295
 8006830:	4836      	ldr	r0, [pc, #216]	; (800690c <cppLoop+0xaa4>)
 8006832:	f7fb fc75 	bl	8002120 <_ZN3LED2LREaa>
		break;
 8006836:	e05b      	b.n	80068f0 <cppLoop+0xa88>
		else if(joy_stick.getValue() == JOY_C){
 8006838:	4835      	ldr	r0, [pc, #212]	; (8006910 <cppLoop+0xaa8>)
 800683a:	f7fb fb51 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 800683e:	4603      	mov	r3, r0
 8006840:	2b02      	cmp	r3, #2
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d050      	beq.n	80068f0 <cppLoop+0xa88>
			led.LR(-1, 1);
 800684e:	2201      	movs	r2, #1
 8006850:	f04f 31ff 	mov.w	r1, #4294967295
 8006854:	482d      	ldr	r0, [pc, #180]	; (800690c <cppLoop+0xaa4>)
 8006856:	f7fb fc63 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800685a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800685e:	f000 f95d 	bl	8006b1c <HAL_Delay>
			sd_write_array_double("Params", "kx.txt", 1, &adj_kx, OVER_WRITE);
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4b30      	ldr	r3, [pc, #192]	; (8006928 <cppLoop+0xac0>)
 8006868:	2201      	movs	r2, #1
 800686a:	492a      	ldr	r1, [pc, #168]	; (8006914 <cppLoop+0xaac>)
 800686c:	482a      	ldr	r0, [pc, #168]	; (8006918 <cppLoop+0xab0>)
 800686e:	f7fa fec5 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "ky.txt", 1, &adj_ky, OVER_WRITE);
 8006872:	2300      	movs	r3, #0
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <cppLoop+0xac4>)
 8006878:	2201      	movs	r2, #1
 800687a:	4928      	ldr	r1, [pc, #160]	; (800691c <cppLoop+0xab4>)
 800687c:	4826      	ldr	r0, [pc, #152]	; (8006918 <cppLoop+0xab0>)
 800687e:	f7fa febd 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "kt.txt", 1, &adj_kt, OVER_WRITE);
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4b20      	ldr	r3, [pc, #128]	; (8006908 <cppLoop+0xaa0>)
 8006888:	2201      	movs	r2, #1
 800688a:	4925      	ldr	r1, [pc, #148]	; (8006920 <cppLoop+0xab8>)
 800688c:	4822      	ldr	r0, [pc, #136]	; (8006918 <cppLoop+0xab0>)
 800688e:	f7fa feb5 	bl	80015fc <sd_write_array_double>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006892:	4b25      	ldr	r3, [pc, #148]	; (8006928 <cppLoop+0xac0>)
 8006894:	ed93 7b00 	vldr	d7, [r3]
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <cppLoop+0xac4>)
 800689a:	ed93 6b00 	vldr	d6, [r3]
 800689e:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <cppLoop+0xaa0>)
 80068a0:	ed93 5b00 	vldr	d5, [r3]
 80068a4:	eeb0 2a45 	vmov.f32	s4, s10
 80068a8:	eef0 2a65 	vmov.f32	s5, s11
 80068ac:	eeb0 1a46 	vmov.f32	s2, s12
 80068b0:	eef0 1a66 	vmov.f32	s3, s13
 80068b4:	eeb0 0a47 	vmov.f32	s0, s14
 80068b8:	eef0 0a67 	vmov.f32	s1, s15
 80068bc:	4819      	ldr	r0, [pc, #100]	; (8006924 <cppLoop+0xabc>)
 80068be:	f7fc fbdd 	bl	800307c <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 80068c2:	2200      	movs	r2, #0
 80068c4:	f04f 31ff 	mov.w	r1, #4294967295
 80068c8:	4810      	ldr	r0, [pc, #64]	; (800690c <cppLoop+0xaa4>)
 80068ca:	f7fb fc29 	bl	8002120 <_ZN3LED2LREaa>
		break;
 80068ce:	e00f      	b.n	80068f0 <cppLoop+0xa88>
	case 15:

		break;

	default:
		break;
 80068d0:	bf00      	nop
 80068d2:	e00e      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068d4:	bf00      	nop
 80068d6:	e00c      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068d8:	bf00      	nop
 80068da:	e00a      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068dc:	bf00      	nop
 80068de:	e008      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068e0:	bf00      	nop
 80068e2:	e006      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068e4:	bf00      	nop
 80068e6:	e004      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <cppLoop+0xa8a>
		break;
 80068f0:	bf00      	nop

	}

	HAL_Delay(10);
 80068f2:	200a      	movs	r0, #10
 80068f4:	f000 f912 	bl	8006b1c <HAL_Delay>

}
 80068f8:	bf00      	nop
 80068fa:	3730      	adds	r7, #48	; 0x30
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006900:	47ae147b 	.word	0x47ae147b
 8006904:	3f847ae1 	.word	0x3f847ae1
 8006908:	20036a48 	.word	0x20036a48
 800690c:	2000056c 	.word	0x2000056c
 8006910:	20000560 	.word	0x20000560
 8006914:	080177ec 	.word	0x080177ec
 8006918:	080177f4 	.word	0x080177f4
 800691c:	080177fc 	.word	0x080177fc
 8006920:	08017804 	.word	0x08017804
 8006924:	2001f2d8 	.word	0x2001f2d8
 8006928:	20036a28 	.word	0x20036a28
 800692c:	20036a38 	.word	0x20036a38

08006930 <_Z41__static_initialization_and_destruction_0ii>:
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d12e      	bne.n	800699e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006946:	4293      	cmp	r3, r2
 8006948:	d129      	bne.n	800699e <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 800694a:	4817      	ldr	r0, [pc, #92]	; (80069a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800694c:	f7fb fc20 	bl	8002190 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006950:	4816      	ldr	r0, [pc, #88]	; (80069ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006952:	f7fc febd 	bl	80036d0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006956:	4816      	ldr	r0, [pc, #88]	; (80069b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006958:	f7fb fab6 	bl	8001ec8 <_ZN8JoyStickC1Ev>
Motor motor;
 800695c:	4815      	ldr	r0, [pc, #84]	; (80069b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800695e:	f7fc f864 	bl	8002a2a <_ZN5MotorC1Ev>
IMU imu;
 8006962:	4815      	ldr	r0, [pc, #84]	; (80069b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006964:	f7fb f8f4 	bl	8001b50 <_ZN3IMUC1Ev>
Logger logger;
 8006968:	4814      	ldr	r0, [pc, #80]	; (80069bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800696a:	f7fb ff69 	bl	8002840 <_ZN6LoggerC1Ev>
Encoder encoder;
 800696e:	4814      	ldr	r0, [pc, #80]	; (80069c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006970:	f7fa fbf0 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006974:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006976:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006978:	490e      	ldr	r1, [pc, #56]	; (80069b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800697a:	4812      	ldr	r0, [pc, #72]	; (80069c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800697c:	f7fc ff12 	bl	80037a4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8006980:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006982:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006984:	490b      	ldr	r1, [pc, #44]	; (80069b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006986:	4810      	ldr	r0, [pc, #64]	; (80069c8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006988:	f7fb fd98 	bl	80024bc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800698e:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006990:	490b      	ldr	r1, [pc, #44]	; (80069c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006992:	480e      	ldr	r0, [pc, #56]	; (80069cc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006994:	f7fc f92e 	bl	8002bf4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 8006998:	480d      	ldr	r0, [pc, #52]	; (80069d0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800699a:	f7fc fa83 	bl	8002ea4 <_ZN13PathFollowingC1Ev>
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000264 	.word	0x20000264
 80069ac:	2000055c 	.word	0x2000055c
 80069b0:	20000560 	.word	0x20000560
 80069b4:	20000568 	.word	0x20000568
 80069b8:	20000580 	.word	0x20000580
 80069bc:	200005a0 	.word	0x200005a0
 80069c0:	2001f1d8 	.word	0x2001f1d8
 80069c4:	2001f208 	.word	0x2001f208
 80069c8:	2001f248 	.word	0x2001f248
 80069cc:	2001f2a8 	.word	0x2001f2a8
 80069d0:	2001f2d8 	.word	0x2001f2d8

080069d4 <_GLOBAL__sub_I_line_sensor>:
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069dc:	2001      	movs	r0, #1
 80069de:	f7ff ffa7 	bl	8006930 <_Z41__static_initialization_and_destruction_0ii>
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80069e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80069e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80069ea:	e003      	b.n	80069f4 <LoopCopyDataInit>

080069ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80069ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80069f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80069f2:	3104      	adds	r1, #4

080069f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80069f4:	480b      	ldr	r0, [pc, #44]	; (8006a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80069f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80069fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80069fc:	d3f6      	bcc.n	80069ec <CopyDataInit>
  ldr  r2, =_sbss
 80069fe:	4a0b      	ldr	r2, [pc, #44]	; (8006a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006a00:	e002      	b.n	8006a08 <LoopFillZerobss>

08006a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a04:	f842 3b04 	str.w	r3, [r2], #4

08006a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a0c:	d3f9      	bcc.n	8006a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a0e:	f7ff f883 	bl	8005b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a12:	f00b fefd 	bl	8012810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a16:	f7fd f9bb 	bl	8003d90 <main>
  bx  lr    
 8006a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006a1c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006a20:	08017e10 	.word	0x08017e10
  ldr  r0, =_sdata
 8006a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006a28:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006a2c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006a30:	2003b438 	.word	0x2003b438

08006a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a34:	e7fe      	b.n	8006a34 <ADC_IRQHandler>
	...

08006a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <HAL_Init+0x40>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a0d      	ldr	r2, [pc, #52]	; (8006a78 <HAL_Init+0x40>)
 8006a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a48:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <HAL_Init+0x40>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <HAL_Init+0x40>)
 8006a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a54:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <HAL_Init+0x40>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a07      	ldr	r2, [pc, #28]	; (8006a78 <HAL_Init+0x40>)
 8006a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a60:	2003      	movs	r0, #3
 8006a62:	f000 fd51 	bl	8007508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a66:	2000      	movs	r0, #0
 8006a68:	f000 f808 	bl	8006a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a6c:	f7fe fa42 	bl	8004ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40023c00 	.word	0x40023c00

08006a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a84:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <HAL_InitTick+0x54>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <HAL_InitTick+0x58>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fd69 	bl	8007572 <HAL_SYSTICK_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e00e      	b.n	8006ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d80a      	bhi.n	8006ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	f000 fd31 	bl	800751e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006abc:	4a06      	ldr	r2, [pc, #24]	; (8006ad8 <HAL_InitTick+0x5c>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e000      	b.n	8006ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000000 	.word	0x20000000
 8006ad4:	20000008 	.word	0x20000008
 8006ad8:	20000004 	.word	0x20000004

08006adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_IncTick+0x20>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_IncTick+0x24>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4413      	add	r3, r2
 8006aec:	4a04      	ldr	r2, [pc, #16]	; (8006b00 <HAL_IncTick+0x24>)
 8006aee:	6013      	str	r3, [r2, #0]
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000008 	.word	0x20000008
 8006b00:	200393c0 	.word	0x200393c0

08006b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  return uwTick;
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <HAL_GetTick+0x14>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	200393c0 	.word	0x200393c0

08006b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b24:	f7ff ffee 	bl	8006b04 <HAL_GetTick>
 8006b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d005      	beq.n	8006b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <HAL_Delay+0x40>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b42:	bf00      	nop
 8006b44:	f7ff ffde 	bl	8006b04 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d8f7      	bhi.n	8006b44 <HAL_Delay+0x28>
  {
  }
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	20000008 	.word	0x20000008

08006b60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e033      	b.n	8006bde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fe f9e0 	bl	8004f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d118      	bne.n	8006bd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ba6:	f023 0302 	bic.w	r3, r3, #2
 8006baa:	f043 0202 	orr.w	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa5a 	bl	800706c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	f043 0201 	orr.w	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8006bce:	e001      	b.n	8006bd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_ADC_Start_DMA+0x1e>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e0cc      	b.n	8006da0 <HAL_ADC_Start_DMA+0x1b8>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d018      	beq.n	8006c4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c2c:	4b5e      	ldr	r3, [pc, #376]	; (8006da8 <HAL_ADC_Start_DMA+0x1c0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5e      	ldr	r2, [pc, #376]	; (8006dac <HAL_ADC_Start_DMA+0x1c4>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	0c9a      	lsrs	r2, r3, #18
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c40:	e002      	b.n	8006c48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f9      	bne.n	8006c42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	f040 80a0 	bne.w	8006d9e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9c:	d106      	bne.n	8006cac <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	f023 0206 	bic.w	r2, r3, #6
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8006caa:	e002      	b.n	8006cb2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_ADC_Start_DMA+0x1c8>)
 8006cbc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	4a3c      	ldr	r2, [pc, #240]	; (8006db4 <HAL_ADC_Start_DMA+0x1cc>)
 8006cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	4a3b      	ldr	r2, [pc, #236]	; (8006db8 <HAL_ADC_Start_DMA+0x1d0>)
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	4a3a      	ldr	r2, [pc, #232]	; (8006dbc <HAL_ADC_Start_DMA+0x1d4>)
 8006cd4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006cde:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006cee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cfe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	334c      	adds	r3, #76	; 0x4c
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f000 fcea 	bl	80076e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d12a      	bne.n	8006d76 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <HAL_ADC_Start_DMA+0x1d8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d015      	beq.n	8006d56 <HAL_ADC_Start_DMA+0x16e>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a25      	ldr	r2, [pc, #148]	; (8006dc4 <HAL_ADC_Start_DMA+0x1dc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d105      	bne.n	8006d40 <HAL_ADC_Start_DMA+0x158>
 8006d34:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_ADC_Start_DMA+0x1c8>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <HAL_ADC_Start_DMA+0x1e0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d129      	bne.n	8006d9e <HAL_ADC_Start_DMA+0x1b6>
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <HAL_ADC_Start_DMA+0x1c8>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2b0f      	cmp	r3, #15
 8006d54:	d823      	bhi.n	8006d9e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11c      	bne.n	8006d9e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	e013      	b.n	8006d9e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <HAL_ADC_Start_DMA+0x1d8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10e      	bne.n	8006d9e <HAL_ADC_Start_DMA+0x1b6>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d9c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000000 	.word	0x20000000
 8006dac:	431bde83 	.word	0x431bde83
 8006db0:	40012300 	.word	0x40012300
 8006db4:	08007265 	.word	0x08007265
 8006db8:	0800731f 	.word	0x0800731f
 8006dbc:	0800733b 	.word	0x0800733b
 8006dc0:	40012000 	.word	0x40012000
 8006dc4:	40012100 	.word	0x40012100
 8006dc8:	40012200 	.word	0x40012200

08006dcc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_ADC_ConfigChannel+0x1c>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e113      	b.n	800704c <HAL_ADC_ConfigChannel+0x244>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b09      	cmp	r3, #9
 8006e32:	d925      	bls.n	8006e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68d9      	ldr	r1, [r3, #12]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	4613      	mov	r3, r2
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	4413      	add	r3, r2
 8006e48:	3b1e      	subs	r3, #30
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	43da      	mvns	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	400a      	ands	r2, r1
 8006e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68d9      	ldr	r1, [r3, #12]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4403      	add	r3, r0
 8006e72:	3b1e      	subs	r3, #30
 8006e74:	409a      	lsls	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	e022      	b.n	8006ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6919      	ldr	r1, [r3, #16]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	2207      	movs	r2, #7
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	400a      	ands	r2, r1
 8006ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6919      	ldr	r1, [r3, #16]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4403      	add	r3, r0
 8006ebc:	409a      	lsls	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d824      	bhi.n	8006f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	3b05      	subs	r3, #5
 8006ee0:	221f      	movs	r2, #31
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	43da      	mvns	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	400a      	ands	r2, r1
 8006eee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4618      	mov	r0, r3
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	3b05      	subs	r3, #5
 8006f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	635a      	str	r2, [r3, #52]	; 0x34
 8006f16:	e04c      	b.n	8006fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d824      	bhi.n	8006f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	3b23      	subs	r3, #35	; 0x23
 8006f32:	221f      	movs	r2, #31
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	43da      	mvns	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	400a      	ands	r2, r1
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4618      	mov	r0, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	3b23      	subs	r3, #35	; 0x23
 8006f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
 8006f68:	e023      	b.n	8006fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	3b41      	subs	r3, #65	; 0x41
 8006f7c:	221f      	movs	r2, #31
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	43da      	mvns	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	400a      	ands	r2, r1
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4618      	mov	r0, r3
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3b41      	subs	r3, #65	; 0x41
 8006fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fb2:	4b29      	ldr	r3, [pc, #164]	; (8007058 <HAL_ADC_ConfigChannel+0x250>)
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a28      	ldr	r2, [pc, #160]	; (800705c <HAL_ADC_ConfigChannel+0x254>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10f      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1d8>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b12      	cmp	r3, #18
 8006fc6:	d10b      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <HAL_ADC_ConfigChannel+0x254>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d12b      	bne.n	8007042 <HAL_ADC_ConfigChannel+0x23a>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_ADC_ConfigChannel+0x258>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d003      	beq.n	8006ffc <HAL_ADC_ConfigChannel+0x1f4>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b11      	cmp	r3, #17
 8006ffa:	d122      	bne.n	8007042 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a11      	ldr	r2, [pc, #68]	; (8007060 <HAL_ADC_ConfigChannel+0x258>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d111      	bne.n	8007042 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <HAL_ADC_ConfigChannel+0x25c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a11      	ldr	r2, [pc, #68]	; (8007068 <HAL_ADC_ConfigChannel+0x260>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	0c9a      	lsrs	r2, r3, #18
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007034:	e002      	b.n	800703c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	3b01      	subs	r3, #1
 800703a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f9      	bne.n	8007036 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40012300 	.word	0x40012300
 800705c:	40012000 	.word	0x40012000
 8007060:	10000012 	.word	0x10000012
 8007064:	20000000 	.word	0x20000000
 8007068:	431bde83 	.word	0x431bde83

0800706c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007074:	4b79      	ldr	r3, [pc, #484]	; (800725c <ADC_Init+0x1f0>)
 8007076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6859      	ldr	r1, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	021a      	lsls	r2, r3, #8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80070c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6859      	ldr	r1, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6899      	ldr	r1, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	4a58      	ldr	r2, [pc, #352]	; (8007260 <ADC_Init+0x1f4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6899      	ldr	r1, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6899      	ldr	r1, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	609a      	str	r2, [r3, #8]
 8007148:	e00f      	b.n	800716a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0202 	bic.w	r2, r2, #2
 8007178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6899      	ldr	r1, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7e1b      	ldrb	r3, [r3, #24]
 8007184:	005a      	lsls	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01b      	beq.n	80071d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	3b01      	subs	r3, #1
 80071c4:	035a      	lsls	r2, r3, #13
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
 80071ce:	e007      	b.n	80071e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80071ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	051a      	lsls	r2, r3, #20
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6899      	ldr	r1, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007222:	025a      	lsls	r2, r3, #9
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6899      	ldr	r1, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	029a      	lsls	r2, r3, #10
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	609a      	str	r2, [r3, #8]
}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	40012300 	.word	0x40012300
 8007260:	0f000001 	.word	0x0f000001

08007264 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800727a:	2b00      	cmp	r3, #0
 800727c:	d13c      	bne.n	80072f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d12b      	bne.n	80072f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800729c:	2b00      	cmp	r3, #0
 800729e:	d127      	bne.n	80072f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d006      	beq.n	80072bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d119      	bne.n	80072f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0220 	bic.w	r2, r2, #32
 80072ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f043 0201 	orr.w	r2, r3, #1
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff fd6b 	bl	8006dcc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80072f6:	e00e      	b.n	8007316 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff fd75 	bl	8006df4 <HAL_ADC_ErrorCallback>
}
 800730a:	e004      	b.n	8007316 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff fd57 	bl	8006de0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2240      	movs	r2, #64	; 0x40
 800734c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	f043 0204 	orr.w	r2, r3, #4
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fd4a 	bl	8006df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <__NVIC_SetPriorityGrouping>:
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <__NVIC_SetPriorityGrouping+0x44>)
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007384:	4013      	ands	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800739a:	4a04      	ldr	r2, [pc, #16]	; (80073ac <__NVIC_SetPriorityGrouping+0x44>)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	60d3      	str	r3, [r2, #12]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	e000ed00 	.word	0xe000ed00

080073b0 <__NVIC_GetPriorityGrouping>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <__NVIC_GetPriorityGrouping+0x18>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	f003 0307 	and.w	r3, r3, #7
}
 80073be:	4618      	mov	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <__NVIC_EnableIRQ>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	db0b      	blt.n	80073f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	f003 021f 	and.w	r2, r3, #31
 80073e4:	4907      	ldr	r1, [pc, #28]	; (8007404 <__NVIC_EnableIRQ+0x38>)
 80073e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	2001      	movs	r0, #1
 80073ee:	fa00 f202 	lsl.w	r2, r0, r2
 80073f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	e000e100 	.word	0xe000e100

08007408 <__NVIC_SetPriority>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	6039      	str	r1, [r7, #0]
 8007412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db0a      	blt.n	8007432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	490c      	ldr	r1, [pc, #48]	; (8007454 <__NVIC_SetPriority+0x4c>)
 8007422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007426:	0112      	lsls	r2, r2, #4
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	440b      	add	r3, r1
 800742c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007430:	e00a      	b.n	8007448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	4908      	ldr	r1, [pc, #32]	; (8007458 <__NVIC_SetPriority+0x50>)
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	3b04      	subs	r3, #4
 8007440:	0112      	lsls	r2, r2, #4
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	440b      	add	r3, r1
 8007446:	761a      	strb	r2, [r3, #24]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	e000e100 	.word	0xe000e100
 8007458:	e000ed00 	.word	0xe000ed00

0800745c <NVIC_EncodePriority>:
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f1c3 0307 	rsb	r3, r3, #7
 8007476:	2b04      	cmp	r3, #4
 8007478:	bf28      	it	cs
 800747a:	2304      	movcs	r3, #4
 800747c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3304      	adds	r3, #4
 8007482:	2b06      	cmp	r3, #6
 8007484:	d902      	bls.n	800748c <NVIC_EncodePriority+0x30>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3b03      	subs	r3, #3
 800748a:	e000      	b.n	800748e <NVIC_EncodePriority+0x32>
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43da      	mvns	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	401a      	ands	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074a4:	f04f 31ff 	mov.w	r1, #4294967295
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	43d9      	mvns	r1, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b4:	4313      	orrs	r3, r2
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3724      	adds	r7, #36	; 0x24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <SysTick_Config>:
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074d4:	d301      	bcc.n	80074da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80074d6:	2301      	movs	r3, #1
 80074d8:	e00f      	b.n	80074fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074da:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <SysTick_Config+0x40>)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3b01      	subs	r3, #1
 80074e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074e2:	210f      	movs	r1, #15
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	f7ff ff8e 	bl	8007408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <SysTick_Config+0x40>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074f2:	4b04      	ldr	r3, [pc, #16]	; (8007504 <SysTick_Config+0x40>)
 80074f4:	2207      	movs	r2, #7
 80074f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	e000e010 	.word	0xe000e010

08007508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff ff29 	bl	8007368 <__NVIC_SetPriorityGrouping>
}
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007530:	f7ff ff3e 	bl	80073b0 <__NVIC_GetPriorityGrouping>
 8007534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	6978      	ldr	r0, [r7, #20]
 800753c:	f7ff ff8e 	bl	800745c <NVIC_EncodePriority>
 8007540:	4602      	mov	r2, r0
 8007542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff ff5d 	bl	8007408 <__NVIC_SetPriority>
}
 800754e:	bf00      	nop
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	4603      	mov	r3, r0
 800755e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff ff31 	bl	80073cc <__NVIC_EnableIRQ>
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff ffa2 	bl	80074c4 <SysTick_Config>
 8007580:	4603      	mov	r3, r0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007598:	f7ff fab4 	bl	8006b04 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e099      	b.n	80076dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075c8:	e00f      	b.n	80075ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075ca:	f7ff fa9b 	bl	8006b04 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d908      	bls.n	80075ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2203      	movs	r2, #3
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e078      	b.n	80076dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e8      	bne.n	80075ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4b38      	ldr	r3, [pc, #224]	; (80076e4 <HAL_DMA_Init+0x158>)
 8007604:	4013      	ands	r3, r2
 8007606:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800762e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b04      	cmp	r3, #4
 8007642:	d107      	bne.n	8007654 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	4313      	orrs	r3, r2
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b04      	cmp	r3, #4
 800767c:	d117      	bne.n	80076ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00e      	beq.n	80076ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa9d 	bl	8007bd0 <DMA_CheckFifoParam>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2240      	movs	r2, #64	; 0x40
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80076aa:	2301      	movs	r3, #1
 80076ac:	e016      	b.n	80076dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa54 	bl	8007b64 <DMA_CalcBaseAndBitshift>
 80076bc:	4603      	mov	r3, r0
 80076be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c4:	223f      	movs	r2, #63	; 0x3f
 80076c6:	409a      	lsls	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	f010803f 	.word	0xf010803f

080076e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_DMA_Start_IT+0x26>
 800770a:	2302      	movs	r3, #2
 800770c:	e040      	b.n	8007790 <HAL_DMA_Start_IT+0xa8>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	d12f      	bne.n	8007782 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2202      	movs	r2, #2
 8007726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f9e6 	bl	8007b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007740:	223f      	movs	r2, #63	; 0x3f
 8007742:	409a      	lsls	r2, r3
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0216 	orr.w	r2, r2, #22
 8007756:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0208 	orr.w	r2, r2, #8
 800776e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e005      	b.n	800778e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800778a:	2302      	movs	r3, #2
 800778c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d004      	beq.n	80077b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2280      	movs	r2, #128	; 0x80
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e00c      	b.n	80077d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2205      	movs	r2, #5
 80077ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80077e8:	4b92      	ldr	r3, [pc, #584]	; (8007a34 <HAL_DMA_IRQHandler+0x258>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a92      	ldr	r2, [pc, #584]	; (8007a38 <HAL_DMA_IRQHandler+0x25c>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	0a9b      	lsrs	r3, r3, #10
 80077f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	2208      	movs	r2, #8
 8007808:	409a      	lsls	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4013      	ands	r3, r2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01a      	beq.n	8007848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d013      	beq.n	8007848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0204 	bic.w	r2, r2, #4
 800782e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007834:	2208      	movs	r2, #8
 8007836:	409a      	lsls	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	f043 0201 	orr.w	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784c:	2201      	movs	r2, #1
 800784e:	409a      	lsls	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d012      	beq.n	800787e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	2201      	movs	r2, #1
 800786c:	409a      	lsls	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f043 0202 	orr.w	r2, r3, #2
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007882:	2204      	movs	r2, #4
 8007884:	409a      	lsls	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d012      	beq.n	80078b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a0:	2204      	movs	r2, #4
 80078a2:	409a      	lsls	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f043 0204 	orr.w	r2, r3, #4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	2210      	movs	r2, #16
 80078ba:	409a      	lsls	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4013      	ands	r3, r2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d043      	beq.n	800794c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d03c      	beq.n	800794c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d6:	2210      	movs	r2, #16
 80078d8:	409a      	lsls	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d018      	beq.n	800791e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d108      	bne.n	800790c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d024      	beq.n	800794c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
 800790a:	e01f      	b.n	800794c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01b      	beq.n	800794c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
 800791c:	e016      	b.n	800794c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	2b00      	cmp	r3, #0
 800792a:	d107      	bne.n	800793c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0208 	bic.w	r2, r2, #8
 800793a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007950:	2220      	movs	r2, #32
 8007952:	409a      	lsls	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4013      	ands	r3, r2
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 808e 	beq.w	8007a7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8086 	beq.w	8007a7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007972:	2220      	movs	r2, #32
 8007974:	409a      	lsls	r2, r3
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b05      	cmp	r3, #5
 8007984:	d136      	bne.n	80079f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0216 	bic.w	r2, r2, #22
 8007994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_DMA_IRQHandler+0x1da>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0208 	bic.w	r2, r2, #8
 80079c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ca:	223f      	movs	r2, #63	; 0x3f
 80079cc:	409a      	lsls	r2, r3
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d07d      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
        }
        return;
 80079f2:	e078      	b.n	8007ae6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01c      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d030      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
 8007a20:	e02b      	b.n	8007a7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d027      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
 8007a32:	e022      	b.n	8007a7a <HAL_DMA_IRQHandler+0x29e>
 8007a34:	20000000 	.word	0x20000000
 8007a38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0210 	bic.w	r2, r2, #16
 8007a58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d032      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d022      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2205      	movs	r2, #5
 8007a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0201 	bic.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60bb      	str	r3, [r7, #8]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d307      	bcc.n	8007ac2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f2      	bne.n	8007aa6 <HAL_DMA_IRQHandler+0x2ca>
 8007ac0:	e000      	b.n	8007ac4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007ac2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	e000      	b.n	8007ae8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007ae6:	bf00      	nop
    }
  }
}
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop

08007af0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d108      	bne.n	8007b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007b46:	e007      	b.n	8007b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	60da      	str	r2, [r3, #12]
}
 8007b58:	bf00      	nop
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	3b10      	subs	r3, #16
 8007b74:	4a14      	ldr	r2, [pc, #80]	; (8007bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8007b76:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7a:	091b      	lsrs	r3, r3, #4
 8007b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b7e:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <DMA_CalcBaseAndBitshift+0x68>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d909      	bls.n	8007ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b9a:	f023 0303 	bic.w	r3, r3, #3
 8007b9e:	1d1a      	adds	r2, r3, #4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8007ba4:	e007      	b.n	8007bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	aaaaaaab 	.word	0xaaaaaaab
 8007bcc:	08017840 	.word	0x08017840

08007bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d11f      	bne.n	8007c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d855      	bhi.n	8007c9c <DMA_CheckFifoParam+0xcc>
 8007bf0:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <DMA_CheckFifoParam+0x28>)
 8007bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c1b 	.word	0x08007c1b
 8007c00:	08007c09 	.word	0x08007c09
 8007c04:	08007c9d 	.word	0x08007c9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d045      	beq.n	8007ca0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c18:	e042      	b.n	8007ca0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c22:	d13f      	bne.n	8007ca4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c28:	e03c      	b.n	8007ca4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c32:	d121      	bne.n	8007c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d836      	bhi.n	8007ca8 <DMA_CheckFifoParam+0xd8>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <DMA_CheckFifoParam+0x70>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c57 	.word	0x08007c57
 8007c48:	08007c51 	.word	0x08007c51
 8007c4c:	08007c69 	.word	0x08007c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	e02f      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d024      	beq.n	8007cac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c66:	e021      	b.n	8007cac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c70:	d11e      	bne.n	8007cb0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c76:	e01b      	b.n	8007cb0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d902      	bls.n	8007c84 <DMA_CheckFifoParam+0xb4>
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d003      	beq.n	8007c8a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c82:	e018      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
      break;
 8007c88:	e015      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00e      	beq.n	8007cb4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9a:	e00b      	b.n	8007cb4 <DMA_CheckFifoParam+0xe4>
      break;
 8007c9c:	bf00      	nop
 8007c9e:	e00a      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8007ca0:	bf00      	nop
 8007ca2:	e008      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e006      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e004      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      break;   
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8007cb4:	bf00      	nop
    }
  } 
  
  return status; 
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b089      	sub	sp, #36	; 0x24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	e177      	b.n	8007fd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	f040 8166 	bne.w	8007fca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d00b      	beq.n	8007d1e <HAL_GPIO_Init+0x5a>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d007      	beq.n	8007d1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d12:	2b11      	cmp	r3, #17
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b12      	cmp	r3, #18
 8007d1c:	d130      	bne.n	8007d80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2203      	movs	r2, #3
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d54:	2201      	movs	r2, #1
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 0201 	and.w	r2, r3, #1
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43db      	mvns	r3, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4013      	ands	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d003      	beq.n	8007dc0 <HAL_GPIO_Init+0xfc>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b12      	cmp	r3, #18
 8007dbe:	d123      	bne.n	8007e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	08da      	lsrs	r2, r3, #3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3208      	adds	r2, #8
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	220f      	movs	r2, #15
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4013      	ands	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	08da      	lsrs	r2, r3, #3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3208      	adds	r2, #8
 8007e02:	69b9      	ldr	r1, [r7, #24]
 8007e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	2203      	movs	r2, #3
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f003 0203 	and.w	r2, r3, #3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80c0 	beq.w	8007fca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	4b65      	ldr	r3, [pc, #404]	; (8007fe4 <HAL_GPIO_Init+0x320>)
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	4a64      	ldr	r2, [pc, #400]	; (8007fe4 <HAL_GPIO_Init+0x320>)
 8007e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e58:	6453      	str	r3, [r2, #68]	; 0x44
 8007e5a:	4b62      	ldr	r3, [pc, #392]	; (8007fe4 <HAL_GPIO_Init+0x320>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e66:	4a60      	ldr	r2, [pc, #384]	; (8007fe8 <HAL_GPIO_Init+0x324>)
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	089b      	lsrs	r3, r3, #2
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a57      	ldr	r2, [pc, #348]	; (8007fec <HAL_GPIO_Init+0x328>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d037      	beq.n	8007f02 <HAL_GPIO_Init+0x23e>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a56      	ldr	r2, [pc, #344]	; (8007ff0 <HAL_GPIO_Init+0x32c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d031      	beq.n	8007efe <HAL_GPIO_Init+0x23a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a55      	ldr	r2, [pc, #340]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d02b      	beq.n	8007efa <HAL_GPIO_Init+0x236>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a54      	ldr	r2, [pc, #336]	; (8007ff8 <HAL_GPIO_Init+0x334>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d025      	beq.n	8007ef6 <HAL_GPIO_Init+0x232>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a53      	ldr	r2, [pc, #332]	; (8007ffc <HAL_GPIO_Init+0x338>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d01f      	beq.n	8007ef2 <HAL_GPIO_Init+0x22e>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a52      	ldr	r2, [pc, #328]	; (8008000 <HAL_GPIO_Init+0x33c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d019      	beq.n	8007eee <HAL_GPIO_Init+0x22a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a51      	ldr	r2, [pc, #324]	; (8008004 <HAL_GPIO_Init+0x340>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_GPIO_Init+0x226>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a50      	ldr	r2, [pc, #320]	; (8008008 <HAL_GPIO_Init+0x344>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00d      	beq.n	8007ee6 <HAL_GPIO_Init+0x222>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a4f      	ldr	r2, [pc, #316]	; (800800c <HAL_GPIO_Init+0x348>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d007      	beq.n	8007ee2 <HAL_GPIO_Init+0x21e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a4e      	ldr	r2, [pc, #312]	; (8008010 <HAL_GPIO_Init+0x34c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d101      	bne.n	8007ede <HAL_GPIO_Init+0x21a>
 8007eda:	2309      	movs	r3, #9
 8007edc:	e012      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007ede:	230a      	movs	r3, #10
 8007ee0:	e010      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	e00e      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007ee6:	2307      	movs	r3, #7
 8007ee8:	e00c      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007eea:	2306      	movs	r3, #6
 8007eec:	e00a      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007eee:	2305      	movs	r3, #5
 8007ef0:	e008      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	e006      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e004      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e002      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <HAL_GPIO_Init+0x240>
 8007f02:	2300      	movs	r3, #0
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	f002 0203 	and.w	r2, r2, #3
 8007f0a:	0092      	lsls	r2, r2, #2
 8007f0c:	4093      	lsls	r3, r2
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f14:	4934      	ldr	r1, [pc, #208]	; (8007fe8 <HAL_GPIO_Init+0x324>)
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	089b      	lsrs	r3, r3, #2
 8007f1a:	3302      	adds	r3, #2
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f22:	4b3c      	ldr	r3, [pc, #240]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	43db      	mvns	r3, r3
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f46:	4a33      	ldr	r2, [pc, #204]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f4c:	4b31      	ldr	r3, [pc, #196]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	43db      	mvns	r3, r3
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f70:	4a28      	ldr	r2, [pc, #160]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f76:	4b27      	ldr	r3, [pc, #156]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	43db      	mvns	r3, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4013      	ands	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f9a:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fa0:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fc4:	4a13      	ldr	r2, [pc, #76]	; (8008014 <HAL_GPIO_Init+0x350>)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	61fb      	str	r3, [r7, #28]
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	f67f ae84 	bls.w	8007ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fd8:	bf00      	nop
 8007fda:	3724      	adds	r7, #36	; 0x24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	40013800 	.word	0x40013800
 8007fec:	40020000 	.word	0x40020000
 8007ff0:	40020400 	.word	0x40020400
 8007ff4:	40020800 	.word	0x40020800
 8007ff8:	40020c00 	.word	0x40020c00
 8007ffc:	40021000 	.word	0x40021000
 8008000:	40021400 	.word	0x40021400
 8008004:	40021800 	.word	0x40021800
 8008008:	40021c00 	.word	0x40021c00
 800800c:	40022000 	.word	0x40022000
 8008010:	40022400 	.word	0x40022400
 8008014:	40013c00 	.word	0x40013c00

08008018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	887b      	ldrh	r3, [r7, #2]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008030:	2301      	movs	r3, #1
 8008032:	73fb      	strb	r3, [r7, #15]
 8008034:	e001      	b.n	800803a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
 8008054:	4613      	mov	r3, r2
 8008056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008058:	787b      	ldrb	r3, [r7, #1]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800805e:	887a      	ldrh	r2, [r7, #2]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008064:	e003      	b.n	800806e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008066:	887b      	ldrh	r3, [r7, #2]
 8008068:	041a      	lsls	r2, r3, #16
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	619a      	str	r2, [r3, #24]
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008086:	4b08      	ldr	r3, [pc, #32]	; (80080a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	4013      	ands	r3, r2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d006      	beq.n	80080a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008092:	4a05      	ldr	r2, [pc, #20]	; (80080a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008094:	88fb      	ldrh	r3, [r7, #6]
 8008096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	4618      	mov	r0, r3
 800809c:	f7fb fdfb 	bl	8003c96 <HAL_GPIO_EXTI_Callback>
  }
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	40013c00 	.word	0x40013c00

080080ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e11f      	b.n	80082fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fc ffe8 	bl	80050a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2224      	movs	r2, #36	; 0x24
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800810e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008110:	f001 f96e 	bl	80093f0 <HAL_RCC_GetPCLK1Freq>
 8008114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	4a7b      	ldr	r2, [pc, #492]	; (8008308 <HAL_I2C_Init+0x25c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d807      	bhi.n	8008130 <HAL_I2C_Init+0x84>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a7a      	ldr	r2, [pc, #488]	; (800830c <HAL_I2C_Init+0x260>)
 8008124:	4293      	cmp	r3, r2
 8008126:	bf94      	ite	ls
 8008128:	2301      	movls	r3, #1
 800812a:	2300      	movhi	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e006      	b.n	800813e <HAL_I2C_Init+0x92>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4a77      	ldr	r2, [pc, #476]	; (8008310 <HAL_I2C_Init+0x264>)
 8008134:	4293      	cmp	r3, r2
 8008136:	bf94      	ite	ls
 8008138:	2301      	movls	r3, #1
 800813a:	2300      	movhi	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e0db      	b.n	80082fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a72      	ldr	r2, [pc, #456]	; (8008314 <HAL_I2C_Init+0x268>)
 800814a:	fba2 2303 	umull	r2, r3, r2, r3
 800814e:	0c9b      	lsrs	r3, r3, #18
 8008150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	4a64      	ldr	r2, [pc, #400]	; (8008308 <HAL_I2C_Init+0x25c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d802      	bhi.n	8008180 <HAL_I2C_Init+0xd4>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3301      	adds	r3, #1
 800817e:	e009      	b.n	8008194 <HAL_I2C_Init+0xe8>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008186:	fb02 f303 	mul.w	r3, r2, r3
 800818a:	4a63      	ldr	r2, [pc, #396]	; (8008318 <HAL_I2C_Init+0x26c>)
 800818c:	fba2 2303 	umull	r2, r3, r2, r3
 8008190:	099b      	lsrs	r3, r3, #6
 8008192:	3301      	adds	r3, #1
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	430b      	orrs	r3, r1
 800819a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4956      	ldr	r1, [pc, #344]	; (8008308 <HAL_I2C_Init+0x25c>)
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d80d      	bhi.n	80081d0 <HAL_I2C_Init+0x124>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	1e59      	subs	r1, r3, #1
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	fbb1 f3f3 	udiv	r3, r1, r3
 80081c2:	3301      	adds	r3, #1
 80081c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	bf38      	it	cc
 80081cc:	2304      	movcc	r3, #4
 80081ce:	e04f      	b.n	8008270 <HAL_I2C_Init+0x1c4>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d111      	bne.n	80081fc <HAL_I2C_Init+0x150>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1e58      	subs	r0, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6859      	ldr	r1, [r3, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	440b      	add	r3, r1
 80081e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80081ea:	3301      	adds	r3, #1
 80081ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	e012      	b.n	8008222 <HAL_I2C_Init+0x176>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	1e58      	subs	r0, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6859      	ldr	r1, [r3, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	0099      	lsls	r1, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008212:	3301      	adds	r3, #1
 8008214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008218:	2b00      	cmp	r3, #0
 800821a:	bf0c      	ite	eq
 800821c:	2301      	moveq	r3, #1
 800821e:	2300      	movne	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_I2C_Init+0x17e>
 8008226:	2301      	movs	r3, #1
 8008228:	e022      	b.n	8008270 <HAL_I2C_Init+0x1c4>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10e      	bne.n	8008250 <HAL_I2C_Init+0x1a4>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1e58      	subs	r0, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6859      	ldr	r1, [r3, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	440b      	add	r3, r1
 8008240:	fbb0 f3f3 	udiv	r3, r0, r3
 8008244:	3301      	adds	r3, #1
 8008246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800824a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800824e:	e00f      	b.n	8008270 <HAL_I2C_Init+0x1c4>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1e58      	subs	r0, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6859      	ldr	r1, [r3, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	0099      	lsls	r1, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	fbb0 f3f3 	udiv	r3, r0, r3
 8008266:	3301      	adds	r3, #1
 8008268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800826c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	6809      	ldr	r1, [r1, #0]
 8008274:	4313      	orrs	r3, r2
 8008276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69da      	ldr	r2, [r3, #28]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800829e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6911      	ldr	r1, [r2, #16]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	68d2      	ldr	r2, [r2, #12]
 80082aa:	4311      	orrs	r1, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6812      	ldr	r2, [r2, #0]
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	000186a0 	.word	0x000186a0
 800830c:	001e847f 	.word	0x001e847f
 8008310:	003d08ff 	.word	0x003d08ff
 8008314:	431bde83 	.word	0x431bde83
 8008318:	10624dd3 	.word	0x10624dd3

0800831c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	461a      	mov	r2, r3
 8008328:	460b      	mov	r3, r1
 800832a:	817b      	strh	r3, [r7, #10]
 800832c:	4613      	mov	r3, r2
 800832e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008330:	f7fe fbe8 	bl	8006b04 <HAL_GetTick>
 8008334:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b20      	cmp	r3, #32
 8008340:	f040 80e0 	bne.w	8008504 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	2319      	movs	r3, #25
 800834a:	2201      	movs	r2, #1
 800834c:	4970      	ldr	r1, [pc, #448]	; (8008510 <HAL_I2C_Master_Transmit+0x1f4>)
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fc58 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
 800835c:	e0d3      	b.n	8008506 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_I2C_Master_Transmit+0x50>
 8008368:	2302      	movs	r3, #2
 800836a:	e0cc      	b.n	8008506 <HAL_I2C_Master_Transmit+0x1ea>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b01      	cmp	r3, #1
 8008380:	d007      	beq.n	8008392 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0201 	orr.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2221      	movs	r2, #33	; 0x21
 80083a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2210      	movs	r2, #16
 80083ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	893a      	ldrh	r2, [r7, #8]
 80083c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4a50      	ldr	r2, [pc, #320]	; (8008514 <HAL_I2C_Master_Transmit+0x1f8>)
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80083d4:	8979      	ldrh	r1, [r7, #10]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fac2 	bl	8008964 <I2C_MasterRequestWrite>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e08d      	b.n	8008506 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ea:	2300      	movs	r3, #0
 80083ec:	613b      	str	r3, [r7, #16]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008400:	e066      	b.n	80084d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	6a39      	ldr	r1, [r7, #32]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fcd2 	bl	8008db0 <I2C_WaitOnTXEFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00d      	beq.n	800842e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	2b04      	cmp	r3, #4
 8008418:	d107      	bne.n	800842a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e06b      	b.n	8008506 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b04      	cmp	r3, #4
 800846a:	d11b      	bne.n	80084a4 <HAL_I2C_Master_Transmit+0x188>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	d017      	beq.n	80084a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	781a      	ldrb	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	6a39      	ldr	r1, [r7, #32]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fcc2 	bl	8008e32 <I2C_WaitOnBTFFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d107      	bne.n	80084cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e01a      	b.n	8008506 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d194      	bne.n	8008402 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	e000      	b.n	8008506 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008504:	2302      	movs	r3, #2
  }
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	00100002 	.word	0x00100002
 8008514:	ffff0000 	.word	0xffff0000

08008518 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08c      	sub	sp, #48	; 0x30
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	461a      	mov	r2, r3
 8008524:	460b      	mov	r3, r1
 8008526:	817b      	strh	r3, [r7, #10]
 8008528:	4613      	mov	r3, r2
 800852a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800852c:	f7fe faea 	bl	8006b04 <HAL_GetTick>
 8008530:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b20      	cmp	r3, #32
 800853c:	f040 820b 	bne.w	8008956 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	2319      	movs	r3, #25
 8008546:	2201      	movs	r2, #1
 8008548:	497c      	ldr	r1, [pc, #496]	; (800873c <HAL_I2C_Master_Receive+0x224>)
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fb5a 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008556:	2302      	movs	r3, #2
 8008558:	e1fe      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_I2C_Master_Receive+0x50>
 8008564:	2302      	movs	r3, #2
 8008566:	e1f7      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b01      	cmp	r3, #1
 800857c:	d007      	beq.n	800858e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0201 	orr.w	r2, r2, #1
 800858c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800859c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2222      	movs	r2, #34	; 0x22
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2210      	movs	r2, #16
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	893a      	ldrh	r2, [r7, #8]
 80085be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4a5c      	ldr	r2, [pc, #368]	; (8008740 <HAL_I2C_Master_Receive+0x228>)
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80085d0:	8979      	ldrh	r1, [r7, #10]
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 fa46 	bl	8008a68 <I2C_MasterRequestRead>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e1b8      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d113      	bne.n	8008616 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ee:	2300      	movs	r3, #0
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	623b      	str	r3, [r7, #32]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	623b      	str	r3, [r7, #32]
 8008602:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	e18c      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861a:	2b01      	cmp	r3, #1
 800861c:	d11b      	bne.n	8008656 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800862c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e16c      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865a:	2b02      	cmp	r3, #2
 800865c:	d11b      	bne.n	8008696 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800866c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800867e:	2300      	movs	r3, #0
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	61bb      	str	r3, [r7, #24]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	e14c      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80086bc:	e138      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	f200 80f1 	bhi.w	80088aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d123      	bne.n	8008718 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 fbed 	bl	8008eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e139      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008716:	e10b      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871c:	2b02      	cmp	r3, #2
 800871e:	d14e      	bne.n	80087be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	2200      	movs	r2, #0
 8008728:	4906      	ldr	r1, [pc, #24]	; (8008744 <HAL_I2C_Master_Receive+0x22c>)
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fa6a 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d008      	beq.n	8008748 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e10e      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
 800873a:	bf00      	nop
 800873c:	00100002 	.word	0x00100002
 8008740:	ffff0000 	.word	0xffff0000
 8008744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008774:	3b01      	subs	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087bc:	e0b8      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	2200      	movs	r2, #0
 80087c6:	4966      	ldr	r1, [pc, #408]	; (8008960 <HAL_I2C_Master_Receive+0x448>)
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 fa1b 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0bf      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691a      	ldr	r2, [r3, #16]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008804:	3b01      	subs	r3, #1
 8008806:	b29a      	uxth	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	2200      	movs	r2, #0
 8008822:	494f      	ldr	r1, [pc, #316]	; (8008960 <HAL_I2C_Master_Receive+0x448>)
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f9ed 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e091      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088a8:	e042      	b.n	8008930 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 fb00 	bl	8008eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e04c      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d118      	bne.n	8008930 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f aec2 	bne.w	80086be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	e000      	b.n	8008958 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008956:	2302      	movs	r3, #2
  }
}
 8008958:	4618      	mov	r0, r3
 800895a:	3728      	adds	r7, #40	; 0x28
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	00010004 	.word	0x00010004

08008964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	460b      	mov	r3, r1
 8008972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d006      	beq.n	800898e <I2C_MasterRequestWrite+0x2a>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d003      	beq.n	800898e <I2C_MasterRequestWrite+0x2a>
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800898c:	d108      	bne.n	80089a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	e00b      	b.n	80089b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	2b12      	cmp	r3, #18
 80089a6:	d107      	bne.n	80089b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f91d 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089de:	d103      	bne.n	80089e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e035      	b.n	8008a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f4:	d108      	bne.n	8008a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089f6:	897b      	ldrh	r3, [r7, #10]
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a04:	611a      	str	r2, [r3, #16]
 8008a06:	e01b      	b.n	8008a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a08:	897b      	ldrh	r3, [r7, #10]
 8008a0a:	11db      	asrs	r3, r3, #7
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0306 	and.w	r3, r3, #6
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f063 030f 	orn	r3, r3, #15
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	490e      	ldr	r1, [pc, #56]	; (8008a60 <I2C_MasterRequestWrite+0xfc>)
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f943 	bl	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e010      	b.n	8008a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008a36:	897b      	ldrh	r3, [r7, #10]
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4907      	ldr	r1, [pc, #28]	; (8008a64 <I2C_MasterRequestWrite+0x100>)
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f933 	bl	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	00010008 	.word	0x00010008
 8008a64:	00010002 	.word	0x00010002

08008a68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	460b      	mov	r3, r1
 8008a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d006      	beq.n	8008aa2 <I2C_MasterRequestRead+0x3a>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d003      	beq.n	8008aa2 <I2C_MasterRequestRead+0x3a>
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008aa0:	d108      	bne.n	8008ab4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e00b      	b.n	8008acc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	2b11      	cmp	r3, #17
 8008aba:	d107      	bne.n	8008acc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f893 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00d      	beq.n	8008b00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af2:	d103      	bne.n	8008afc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008afa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e079      	b.n	8008bf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b08:	d108      	bne.n	8008b1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b0a:	897b      	ldrh	r3, [r7, #10]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	611a      	str	r2, [r3, #16]
 8008b1a:	e05f      	b.n	8008bdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b1c:	897b      	ldrh	r3, [r7, #10]
 8008b1e:	11db      	asrs	r3, r3, #7
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f003 0306 	and.w	r3, r3, #6
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f063 030f 	orn	r3, r3, #15
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	4930      	ldr	r1, [pc, #192]	; (8008bfc <I2C_MasterRequestRead+0x194>)
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f8b9 	bl	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e054      	b.n	8008bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008b4a:	897b      	ldrh	r3, [r7, #10]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4929      	ldr	r1, [pc, #164]	; (8008c00 <I2C_MasterRequestRead+0x198>)
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 f8a9 	bl	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e044      	b.n	8008bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f831 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb6:	d103      	bne.n	8008bc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bbe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e017      	b.n	8008bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008bc4:	897b      	ldrh	r3, [r7, #10]
 8008bc6:	11db      	asrs	r3, r3, #7
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0306 	and.w	r3, r3, #6
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f063 030e 	orn	r3, r3, #14
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4907      	ldr	r1, [pc, #28]	; (8008c00 <I2C_MasterRequestRead+0x198>)
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f865 	bl	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	00010008 	.word	0x00010008
 8008c00:	00010002 	.word	0x00010002

08008c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c14:	e025      	b.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d021      	beq.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c1e:	f7fd ff71 	bl	8006b04 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d302      	bcc.n	8008c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d116      	bne.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	f043 0220 	orr.w	r2, r3, #32
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e023      	b.n	8008caa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d10d      	bne.n	8008c88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	43da      	mvns	r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4013      	ands	r3, r2
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bf0c      	ite	eq
 8008c7e:	2301      	moveq	r3, #1
 8008c80:	2300      	movne	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	461a      	mov	r2, r3
 8008c86:	e00c      	b.n	8008ca2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	43da      	mvns	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d0b6      	beq.n	8008c16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cc0:	e051      	b.n	8008d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cd0:	d123      	bne.n	8008d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	f043 0204 	orr.w	r2, r3, #4
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e046      	b.n	8008da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d021      	beq.n	8008d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d22:	f7fd feef 	bl	8006b04 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d302      	bcc.n	8008d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d116      	bne.n	8008d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f043 0220 	orr.w	r2, r3, #32
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e020      	b.n	8008da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	0c1b      	lsrs	r3, r3, #16
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d10c      	bne.n	8008d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	43da      	mvns	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	e00b      	b.n	8008da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	43da      	mvns	r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4013      	ands	r3, r2
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d18d      	bne.n	8008cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dbc:	e02d      	b.n	8008e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f8ce 	bl	8008f60 <I2C_IsAcknowledgeFailed>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e02d      	b.n	8008e2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd4:	d021      	beq.n	8008e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd6:	f7fd fe95 	bl	8006b04 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d302      	bcc.n	8008dec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d116      	bne.n	8008e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f043 0220 	orr.w	r2, r3, #32
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e007      	b.n	8008e2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e24:	2b80      	cmp	r3, #128	; 0x80
 8008e26:	d1ca      	bne.n	8008dbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e3e:	e02d      	b.n	8008e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f88d 	bl	8008f60 <I2C_IsAcknowledgeFailed>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e02d      	b.n	8008eac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d021      	beq.n	8008e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e58:	f7fd fe54 	bl	8006b04 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d116      	bne.n	8008e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	f043 0220 	orr.w	r2, r3, #32
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e007      	b.n	8008eac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	d1ca      	bne.n	8008e40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ec0:	e042      	b.n	8008f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	f003 0310 	and.w	r3, r3, #16
 8008ecc:	2b10      	cmp	r3, #16
 8008ece:	d119      	bne.n	8008f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0210 	mvn.w	r2, #16
 8008ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e029      	b.n	8008f58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f04:	f7fd fdfe 	bl	8006b04 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d302      	bcc.n	8008f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d116      	bne.n	8008f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	f043 0220 	orr.w	r2, r3, #32
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e007      	b.n	8008f58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d1b5      	bne.n	8008ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f76:	d11b      	bne.n	8008fb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9c:	f043 0204 	orr.w	r2, r3, #4
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008fca:	2300      	movs	r3, #0
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	4b20      	ldr	r3, [pc, #128]	; (8009050 <HAL_PWREx_EnableOverDrive+0x90>)
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	4a1f      	ldr	r2, [pc, #124]	; (8009050 <HAL_PWREx_EnableOverDrive+0x90>)
 8008fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8008fda:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <HAL_PWREx_EnableOverDrive+0x90>)
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008fe6:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <HAL_PWREx_EnableOverDrive+0x94>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fec:	f7fd fd8a 	bl	8006b04 <HAL_GetTick>
 8008ff0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ff2:	e009      	b.n	8009008 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008ff4:	f7fd fd86 	bl	8006b04 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009002:	d901      	bls.n	8009008 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e01f      	b.n	8009048 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009008:	4b13      	ldr	r3, [pc, #76]	; (8009058 <HAL_PWREx_EnableOverDrive+0x98>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009014:	d1ee      	bne.n	8008ff4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009018:	2201      	movs	r2, #1
 800901a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800901c:	f7fd fd72 	bl	8006b04 <HAL_GetTick>
 8009020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009022:	e009      	b.n	8009038 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009024:	f7fd fd6e 	bl	8006b04 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009032:	d901      	bls.n	8009038 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e007      	b.n	8009048 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <HAL_PWREx_EnableOverDrive+0x98>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009044:	d1ee      	bne.n	8009024 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40023800 	.word	0x40023800
 8009054:	420e0040 	.word	0x420e0040
 8009058:	40007000 	.word	0x40007000
 800905c:	420e0044 	.word	0x420e0044

08009060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e0cc      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009074:	4b68      	ldr	r3, [pc, #416]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d90c      	bls.n	800909c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009082:	4b65      	ldr	r3, [pc, #404]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800908a:	4b63      	ldr	r3, [pc, #396]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d001      	beq.n	800909c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0b8      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d020      	beq.n	80090ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090b4:	4b59      	ldr	r3, [pc, #356]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	4a58      	ldr	r2, [pc, #352]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090cc:	4b53      	ldr	r3, [pc, #332]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a52      	ldr	r2, [pc, #328]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d8:	4b50      	ldr	r3, [pc, #320]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	494d      	ldr	r1, [pc, #308]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d044      	beq.n	8009180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d107      	bne.n	800910e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090fe:	4b47      	ldr	r3, [pc, #284]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d119      	bne.n	800913e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e07f      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d003      	beq.n	800911e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800911a:	2b03      	cmp	r3, #3
 800911c:	d107      	bne.n	800912e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800911e:	4b3f      	ldr	r3, [pc, #252]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e06f      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800912e:	4b3b      	ldr	r3, [pc, #236]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e067      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800913e:	4b37      	ldr	r3, [pc, #220]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f023 0203 	bic.w	r2, r3, #3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	4934      	ldr	r1, [pc, #208]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 800914c:	4313      	orrs	r3, r2
 800914e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009150:	f7fd fcd8 	bl	8006b04 <HAL_GetTick>
 8009154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009156:	e00a      	b.n	800916e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009158:	f7fd fcd4 	bl	8006b04 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	f241 3288 	movw	r2, #5000	; 0x1388
 8009166:	4293      	cmp	r3, r2
 8009168:	d901      	bls.n	800916e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e04f      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800916e:	4b2b      	ldr	r3, [pc, #172]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 020c 	and.w	r2, r3, #12
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	429a      	cmp	r2, r3
 800917e:	d1eb      	bne.n	8009158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009180:	4b25      	ldr	r3, [pc, #148]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d20c      	bcs.n	80091a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800918e:	4b22      	ldr	r3, [pc, #136]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 030f 	and.w	r3, r3, #15
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d001      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e032      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091b4:	4b19      	ldr	r3, [pc, #100]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	4916      	ldr	r1, [pc, #88]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0308 	and.w	r3, r3, #8
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091d2:	4b12      	ldr	r3, [pc, #72]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	490e      	ldr	r1, [pc, #56]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091e6:	f000 f821 	bl	800922c <HAL_RCC_GetSysClockFreq>
 80091ea:	4601      	mov	r1, r0
 80091ec:	4b0b      	ldr	r3, [pc, #44]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	091b      	lsrs	r3, r3, #4
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <HAL_RCC_ClockConfig+0x1c0>)
 80091f8:	5cd3      	ldrb	r3, [r2, r3]
 80091fa:	fa21 f303 	lsr.w	r3, r1, r3
 80091fe:	4a09      	ldr	r2, [pc, #36]	; (8009224 <HAL_RCC_ClockConfig+0x1c4>)
 8009200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009202:	4b09      	ldr	r3, [pc, #36]	; (8009228 <HAL_RCC_ClockConfig+0x1c8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd fc38 	bl	8006a7c <HAL_InitTick>

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40023c00 	.word	0x40023c00
 800921c:	40023800 	.word	0x40023800
 8009220:	08017828 	.word	0x08017828
 8009224:	20000000 	.word	0x20000000
 8009228:	20000004 	.word	0x20000004

0800922c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800922c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	2300      	movs	r3, #0
 800923c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009242:	4b63      	ldr	r3, [pc, #396]	; (80093d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 030c 	and.w	r3, r3, #12
 800924a:	2b04      	cmp	r3, #4
 800924c:	d007      	beq.n	800925e <HAL_RCC_GetSysClockFreq+0x32>
 800924e:	2b08      	cmp	r3, #8
 8009250:	d008      	beq.n	8009264 <HAL_RCC_GetSysClockFreq+0x38>
 8009252:	2b00      	cmp	r3, #0
 8009254:	f040 80b4 	bne.w	80093c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009258:	4b5e      	ldr	r3, [pc, #376]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800925a:	60bb      	str	r3, [r7, #8]
       break;
 800925c:	e0b3      	b.n	80093c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800925e:	4b5d      	ldr	r3, [pc, #372]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009260:	60bb      	str	r3, [r7, #8]
      break;
 8009262:	e0b0      	b.n	80093c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009264:	4b5a      	ldr	r3, [pc, #360]	; (80093d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800926c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800926e:	4b58      	ldr	r3, [pc, #352]	; (80093d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d04a      	beq.n	8009310 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800927a:	4b55      	ldr	r3, [pc, #340]	; (80093d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	099b      	lsrs	r3, r3, #6
 8009280:	f04f 0400 	mov.w	r4, #0
 8009284:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	ea03 0501 	and.w	r5, r3, r1
 8009290:	ea04 0602 	and.w	r6, r4, r2
 8009294:	4629      	mov	r1, r5
 8009296:	4632      	mov	r2, r6
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	f04f 0400 	mov.w	r4, #0
 80092a0:	0154      	lsls	r4, r2, #5
 80092a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80092a6:	014b      	lsls	r3, r1, #5
 80092a8:	4619      	mov	r1, r3
 80092aa:	4622      	mov	r2, r4
 80092ac:	1b49      	subs	r1, r1, r5
 80092ae:	eb62 0206 	sbc.w	r2, r2, r6
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	f04f 0400 	mov.w	r4, #0
 80092ba:	0194      	lsls	r4, r2, #6
 80092bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80092c0:	018b      	lsls	r3, r1, #6
 80092c2:	1a5b      	subs	r3, r3, r1
 80092c4:	eb64 0402 	sbc.w	r4, r4, r2
 80092c8:	f04f 0100 	mov.w	r1, #0
 80092cc:	f04f 0200 	mov.w	r2, #0
 80092d0:	00e2      	lsls	r2, r4, #3
 80092d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80092d6:	00d9      	lsls	r1, r3, #3
 80092d8:	460b      	mov	r3, r1
 80092da:	4614      	mov	r4, r2
 80092dc:	195b      	adds	r3, r3, r5
 80092de:	eb44 0406 	adc.w	r4, r4, r6
 80092e2:	f04f 0100 	mov.w	r1, #0
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	02a2      	lsls	r2, r4, #10
 80092ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80092f0:	0299      	lsls	r1, r3, #10
 80092f2:	460b      	mov	r3, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	4621      	mov	r1, r4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f04f 0400 	mov.w	r4, #0
 8009300:	461a      	mov	r2, r3
 8009302:	4623      	mov	r3, r4
 8009304:	f7f7 fcd8 	bl	8000cb8 <__aeabi_uldivmod>
 8009308:	4603      	mov	r3, r0
 800930a:	460c      	mov	r4, r1
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	e049      	b.n	80093a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009310:	4b2f      	ldr	r3, [pc, #188]	; (80093d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	099b      	lsrs	r3, r3, #6
 8009316:	f04f 0400 	mov.w	r4, #0
 800931a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800931e:	f04f 0200 	mov.w	r2, #0
 8009322:	ea03 0501 	and.w	r5, r3, r1
 8009326:	ea04 0602 	and.w	r6, r4, r2
 800932a:	4629      	mov	r1, r5
 800932c:	4632      	mov	r2, r6
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	f04f 0400 	mov.w	r4, #0
 8009336:	0154      	lsls	r4, r2, #5
 8009338:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800933c:	014b      	lsls	r3, r1, #5
 800933e:	4619      	mov	r1, r3
 8009340:	4622      	mov	r2, r4
 8009342:	1b49      	subs	r1, r1, r5
 8009344:	eb62 0206 	sbc.w	r2, r2, r6
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	f04f 0400 	mov.w	r4, #0
 8009350:	0194      	lsls	r4, r2, #6
 8009352:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009356:	018b      	lsls	r3, r1, #6
 8009358:	1a5b      	subs	r3, r3, r1
 800935a:	eb64 0402 	sbc.w	r4, r4, r2
 800935e:	f04f 0100 	mov.w	r1, #0
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	00e2      	lsls	r2, r4, #3
 8009368:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800936c:	00d9      	lsls	r1, r3, #3
 800936e:	460b      	mov	r3, r1
 8009370:	4614      	mov	r4, r2
 8009372:	195b      	adds	r3, r3, r5
 8009374:	eb44 0406 	adc.w	r4, r4, r6
 8009378:	f04f 0100 	mov.w	r1, #0
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	02a2      	lsls	r2, r4, #10
 8009382:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009386:	0299      	lsls	r1, r3, #10
 8009388:	460b      	mov	r3, r1
 800938a:	4614      	mov	r4, r2
 800938c:	4618      	mov	r0, r3
 800938e:	4621      	mov	r1, r4
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f04f 0400 	mov.w	r4, #0
 8009396:	461a      	mov	r2, r3
 8009398:	4623      	mov	r3, r4
 800939a:	f7f7 fc8d 	bl	8000cb8 <__aeabi_uldivmod>
 800939e:	4603      	mov	r3, r0
 80093a0:	460c      	mov	r4, r1
 80093a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093a4:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	0c1b      	lsrs	r3, r3, #16
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	3301      	adds	r3, #1
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093bc:	60bb      	str	r3, [r7, #8]
      break;
 80093be:	e002      	b.n	80093c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80093c2:	60bb      	str	r3, [r7, #8]
      break;
 80093c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093c6:	68bb      	ldr	r3, [r7, #8]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	40023800 	.word	0x40023800
 80093d4:	00f42400 	.word	0x00f42400

080093d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093dc:	4b03      	ldr	r3, [pc, #12]	; (80093ec <HAL_RCC_GetHCLKFreq+0x14>)
 80093de:	681b      	ldr	r3, [r3, #0]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	20000000 	.word	0x20000000

080093f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093f4:	f7ff fff0 	bl	80093d8 <HAL_RCC_GetHCLKFreq>
 80093f8:	4601      	mov	r1, r0
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	0a9b      	lsrs	r3, r3, #10
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	4a03      	ldr	r2, [pc, #12]	; (8009414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009406:	5cd3      	ldrb	r3, [r2, r3]
 8009408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800940c:	4618      	mov	r0, r3
 800940e:	bd80      	pop	{r7, pc}
 8009410:	40023800 	.word	0x40023800
 8009414:	08017838 	.word	0x08017838

08009418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800941c:	f7ff ffdc 	bl	80093d8 <HAL_RCC_GetHCLKFreq>
 8009420:	4601      	mov	r1, r0
 8009422:	4b05      	ldr	r3, [pc, #20]	; (8009438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	0b5b      	lsrs	r3, r3, #13
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	4a03      	ldr	r2, [pc, #12]	; (800943c <HAL_RCC_GetPCLK2Freq+0x24>)
 800942e:	5cd3      	ldrb	r3, [r2, r3]
 8009430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009434:	4618      	mov	r0, r3
 8009436:	bd80      	pop	{r7, pc}
 8009438:	40023800 	.word	0x40023800
 800943c:	08017838 	.word	0x08017838

08009440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009468:	4b66      	ldr	r3, [pc, #408]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800946a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009476:	4963      	ldr	r1, [pc, #396]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009478:	4313      	orrs	r3, r2
 800947a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800948a:	4b5e      	ldr	r3, [pc, #376]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800948c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009490:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	495a      	ldr	r1, [pc, #360]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800949a:	4313      	orrs	r3, r2
 800949c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d075      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094c4:	4b50      	ldr	r3, [pc, #320]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094ca:	f7fd fb1b 	bl	8006b04 <HAL_GetTick>
 80094ce:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094d0:	e008      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80094d2:	f7fd fb17 	bl	8006b04 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d901      	bls.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e1dc      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094e4:	4b47      	ldr	r3, [pc, #284]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1f0      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d009      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	019a      	lsls	r2, r3, #6
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	071b      	lsls	r3, r3, #28
 8009508:	493e      	ldr	r1, [pc, #248]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800950a:	4313      	orrs	r3, r2
 800950c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0302 	and.w	r3, r3, #2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01f      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800951c:	4b39      	ldr	r3, [pc, #228]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	0f1b      	lsrs	r3, r3, #28
 8009524:	f003 0307 	and.w	r3, r3, #7
 8009528:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	019a      	lsls	r2, r3, #6
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	061b      	lsls	r3, r3, #24
 8009536:	431a      	orrs	r2, r3
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	071b      	lsls	r3, r3, #28
 800953c:	4931      	ldr	r1, [pc, #196]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800953e:	4313      	orrs	r3, r2
 8009540:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009544:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954a:	f023 021f 	bic.w	r2, r3, #31
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	3b01      	subs	r3, #1
 8009554:	492b      	ldr	r1, [pc, #172]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009556:	4313      	orrs	r3, r2
 8009558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00d      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	019a      	lsls	r2, r3, #6
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	061b      	lsls	r3, r3, #24
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	071b      	lsls	r3, r3, #28
 800957c:	4921      	ldr	r1, [pc, #132]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800957e:	4313      	orrs	r3, r2
 8009580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009584:	4b20      	ldr	r3, [pc, #128]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009586:	2201      	movs	r2, #1
 8009588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800958a:	f7fd fabb 	bl	8006b04 <HAL_GetTick>
 800958e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009590:	e008      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009592:	f7fd fab7 	bl	8006b04 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d901      	bls.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e17c      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80095a4:	4b17      	ldr	r3, [pc, #92]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0f0      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d112      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10c      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80ce 	beq.w	8009772 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80095da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095de:	f040 80c8 	bne.w	8009772 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095e8:	f7fd fa8c 	bl	8006b04 <HAL_GetTick>
 80095ec:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095ee:	e00f      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80095f0:	f7fd fa88 	bl	8006b04 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d908      	bls.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e14d      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009602:	bf00      	nop
 8009604:	40023800 	.word	0x40023800
 8009608:	42470068 	.word	0x42470068
 800960c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009610:	4ba5      	ldr	r3, [pc, #660]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961c:	d0e8      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d02e      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800962a:	4b9f      	ldr	r3, [pc, #636]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800962c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009630:	0c1b      	lsrs	r3, r3, #16
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	3301      	adds	r3, #1
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800963c:	4b9a      	ldr	r3, [pc, #616]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800963e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009642:	0f1b      	lsrs	r3, r3, #28
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	019a      	lsls	r2, r3, #6
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	085b      	lsrs	r3, r3, #1
 8009654:	3b01      	subs	r3, #1
 8009656:	041b      	lsls	r3, r3, #16
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	061b      	lsls	r3, r3, #24
 8009660:	431a      	orrs	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	071b      	lsls	r3, r3, #28
 8009666:	4990      	ldr	r1, [pc, #576]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800966e:	4b8e      	ldr	r3, [pc, #568]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	3b01      	subs	r3, #1
 800967e:	021b      	lsls	r3, r3, #8
 8009680:	4989      	ldr	r1, [pc, #548]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009682:	4313      	orrs	r3, r2
 8009684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0308 	and.w	r3, r3, #8
 8009690:	2b00      	cmp	r3, #0
 8009692:	d02c      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009694:	4b84      	ldr	r3, [pc, #528]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	0c1b      	lsrs	r3, r3, #16
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	3301      	adds	r3, #1
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80096a6:	4b80      	ldr	r3, [pc, #512]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ac:	0e1b      	lsrs	r3, r3, #24
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	019a      	lsls	r2, r3, #6
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	3b01      	subs	r3, #1
 80096c0:	041b      	lsls	r3, r3, #16
 80096c2:	431a      	orrs	r2, r3
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	061b      	lsls	r3, r3, #24
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	071b      	lsls	r3, r3, #28
 80096d0:	4975      	ldr	r1, [pc, #468]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80096d8:	4b73      	ldr	r3, [pc, #460]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	4970      	ldr	r1, [pc, #448]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d024      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80096fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009702:	d11f      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009704:	4b68      	ldr	r3, [pc, #416]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970a:	0e1b      	lsrs	r3, r3, #24
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009712:	4b65      	ldr	r3, [pc, #404]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009718:	0f1b      	lsrs	r3, r3, #28
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	019a      	lsls	r2, r3, #6
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	3b01      	subs	r3, #1
 800972e:	041b      	lsls	r3, r3, #16
 8009730:	431a      	orrs	r2, r3
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	061b      	lsls	r3, r3, #24
 8009736:	431a      	orrs	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	071b      	lsls	r3, r3, #28
 800973c:	495a      	ldr	r1, [pc, #360]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009744:	4b59      	ldr	r3, [pc, #356]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009746:	2201      	movs	r2, #1
 8009748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800974a:	f7fd f9db 	bl	8006b04 <HAL_GetTick>
 800974e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009750:	e008      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009752:	f7fd f9d7 	bl	8006b04 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e09c      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009764:	4b50      	ldr	r3, [pc, #320]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800976c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009770:	d1ef      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0320 	and.w	r3, r3, #32
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8083 	beq.w	8009886 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009780:	2300      	movs	r3, #0
 8009782:	60bb      	str	r3, [r7, #8]
 8009784:	4b48      	ldr	r3, [pc, #288]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	4a47      	ldr	r2, [pc, #284]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800978a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800978e:	6413      	str	r3, [r2, #64]	; 0x40
 8009790:	4b45      	ldr	r3, [pc, #276]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800979c:	4b44      	ldr	r3, [pc, #272]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a43      	ldr	r2, [pc, #268]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80097a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80097a8:	f7fd f9ac 	bl	8006b04 <HAL_GetTick>
 80097ac:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80097ae:	e008      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80097b0:	f7fd f9a8 	bl	8006b04 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e06d      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80097c2:	4b3b      	ldr	r3, [pc, #236]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0f0      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80097ce:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d02f      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d028      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097ec:	4b2e      	ldr	r3, [pc, #184]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097f6:	4b2f      	ldr	r3, [pc, #188]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097fc:	4b2d      	ldr	r3, [pc, #180]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009802:	4a29      	ldr	r2, [pc, #164]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009808:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b01      	cmp	r3, #1
 8009812:	d114      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009814:	f7fd f976 	bl	8006b04 <HAL_GetTick>
 8009818:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800981a:	e00a      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800981c:	f7fd f972 	bl	8006b04 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	f241 3288 	movw	r2, #5000	; 0x1388
 800982a:	4293      	cmp	r3, r2
 800982c:	d901      	bls.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e035      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009832:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0ee      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800984a:	d10d      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800984c:	4b16      	ldr	r3, [pc, #88]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800985c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009860:	4911      	ldr	r1, [pc, #68]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009862:	4313      	orrs	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
 8009866:	e005      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009868:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	4a0e      	ldr	r2, [pc, #56]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800986e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009872:	6093      	str	r3, [r2, #8]
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009880:	4909      	ldr	r1, [pc, #36]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009882:	4313      	orrs	r3, r2
 8009884:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009898:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800989a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40023800 	.word	0x40023800
 80098ac:	42470070 	.word	0x42470070
 80098b0:	40007000 	.word	0x40007000
 80098b4:	42470e40 	.word	0x42470e40
 80098b8:	424711e0 	.word	0x424711e0

080098bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d075      	beq.n	80099c0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80098d4:	4ba2      	ldr	r3, [pc, #648]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f003 030c 	and.w	r3, r3, #12
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d00c      	beq.n	80098fa <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098e0:	4b9f      	ldr	r3, [pc, #636]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d112      	bne.n	8009912 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098ec:	4b9c      	ldr	r3, [pc, #624]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098f8:	d10b      	bne.n	8009912 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098fa:	4b99      	ldr	r3, [pc, #612]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d05b      	beq.n	80099be <HAL_RCC_OscConfig+0x102>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d157      	bne.n	80099be <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e20b      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800991a:	d106      	bne.n	800992a <HAL_RCC_OscConfig+0x6e>
 800991c:	4b90      	ldr	r3, [pc, #576]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a8f      	ldr	r2, [pc, #572]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	e01d      	b.n	8009966 <HAL_RCC_OscConfig+0xaa>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009932:	d10c      	bne.n	800994e <HAL_RCC_OscConfig+0x92>
 8009934:	4b8a      	ldr	r3, [pc, #552]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a89      	ldr	r2, [pc, #548]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 800993a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	4b87      	ldr	r3, [pc, #540]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a86      	ldr	r2, [pc, #536]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	e00b      	b.n	8009966 <HAL_RCC_OscConfig+0xaa>
 800994e:	4b84      	ldr	r3, [pc, #528]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a83      	ldr	r2, [pc, #524]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	4b81      	ldr	r3, [pc, #516]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a80      	ldr	r2, [pc, #512]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009964:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d013      	beq.n	8009996 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996e:	f7fd f8c9 	bl	8006b04 <HAL_GetTick>
 8009972:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009974:	e008      	b.n	8009988 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009976:	f7fd f8c5 	bl	8006b04 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b64      	cmp	r3, #100	; 0x64
 8009982:	d901      	bls.n	8009988 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e1d0      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009988:	4b75      	ldr	r3, [pc, #468]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0f0      	beq.n	8009976 <HAL_RCC_OscConfig+0xba>
 8009994:	e014      	b.n	80099c0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009996:	f7fd f8b5 	bl	8006b04 <HAL_GetTick>
 800999a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800999c:	e008      	b.n	80099b0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800999e:	f7fd f8b1 	bl	8006b04 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	2b64      	cmp	r3, #100	; 0x64
 80099aa:	d901      	bls.n	80099b0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e1bc      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099b0:	4b6b      	ldr	r3, [pc, #428]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1f0      	bne.n	800999e <HAL_RCC_OscConfig+0xe2>
 80099bc:	e000      	b.n	80099c0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d063      	beq.n	8009a94 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80099cc:	4b64      	ldr	r3, [pc, #400]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f003 030c 	and.w	r3, r3, #12
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00b      	beq.n	80099f0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80099d8:	4b61      	ldr	r3, [pc, #388]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d11c      	bne.n	8009a1e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80099e4:	4b5e      	ldr	r3, [pc, #376]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d116      	bne.n	8009a1e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099f0:	4b5b      	ldr	r3, [pc, #364]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <HAL_RCC_OscConfig+0x14c>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d001      	beq.n	8009a08 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e190      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a08:	4b55      	ldr	r3, [pc, #340]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	4952      	ldr	r1, [pc, #328]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a1c:	e03a      	b.n	8009a94 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d020      	beq.n	8009a68 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a26:	4b4f      	ldr	r3, [pc, #316]	; (8009b64 <HAL_RCC_OscConfig+0x2a8>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2c:	f7fd f86a 	bl	8006b04 <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a34:	f7fd f866 	bl	8006b04 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e171      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a46:	4b46      	ldr	r3, [pc, #280]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f0      	beq.n	8009a34 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a52:	4b43      	ldr	r3, [pc, #268]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	493f      	ldr	r1, [pc, #252]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	600b      	str	r3, [r1, #0]
 8009a66:	e015      	b.n	8009a94 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a68:	4b3e      	ldr	r3, [pc, #248]	; (8009b64 <HAL_RCC_OscConfig+0x2a8>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a6e:	f7fd f849 	bl	8006b04 <HAL_GetTick>
 8009a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a74:	e008      	b.n	8009a88 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a76:	f7fd f845 	bl	8006b04 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e150      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a88:	4b35      	ldr	r3, [pc, #212]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f0      	bne.n	8009a76 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0308 	and.w	r3, r3, #8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d030      	beq.n	8009b02 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d016      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009aa8:	4b2f      	ldr	r3, [pc, #188]	; (8009b68 <HAL_RCC_OscConfig+0x2ac>)
 8009aaa:	2201      	movs	r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aae:	f7fd f829 	bl	8006b04 <HAL_GetTick>
 8009ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ab4:	e008      	b.n	8009ac8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ab6:	f7fd f825 	bl	8006b04 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e130      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ac8:	4b25      	ldr	r3, [pc, #148]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0f0      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x1fa>
 8009ad4:	e015      	b.n	8009b02 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ad6:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <HAL_RCC_OscConfig+0x2ac>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009adc:	f7fd f812 	bl	8006b04 <HAL_GetTick>
 8009ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ae2:	e008      	b.n	8009af6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ae4:	f7fd f80e 	bl	8006b04 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e119      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009af6:	4b1a      	ldr	r3, [pc, #104]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f0      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0304 	and.w	r3, r3, #4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 809f 	beq.w	8009c4e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b14:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10f      	bne.n	8009b40 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b28:	4a0d      	ldr	r2, [pc, #52]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <HAL_RCC_OscConfig+0x2a4>)
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <HAL_RCC_OscConfig+0x2b0>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d120      	bne.n	8009b8e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b4c:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <HAL_RCC_OscConfig+0x2b0>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a06      	ldr	r2, [pc, #24]	; (8009b6c <HAL_RCC_OscConfig+0x2b0>)
 8009b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b58:	f7fc ffd4 	bl	8006b04 <HAL_GetTick>
 8009b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b5e:	e010      	b.n	8009b82 <HAL_RCC_OscConfig+0x2c6>
 8009b60:	40023800 	.word	0x40023800
 8009b64:	42470000 	.word	0x42470000
 8009b68:	42470e80 	.word	0x42470e80
 8009b6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b70:	f7fc ffc8 	bl	8006b04 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e0d3      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b82:	4b6c      	ldr	r3, [pc, #432]	; (8009d34 <HAL_RCC_OscConfig+0x478>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f0      	beq.n	8009b70 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d106      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x2e8>
 8009b96:	4b68      	ldr	r3, [pc, #416]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9a:	4a67      	ldr	r2, [pc, #412]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009b9c:	f043 0301 	orr.w	r3, r3, #1
 8009ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ba2:	e01c      	b.n	8009bde <HAL_RCC_OscConfig+0x322>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	d10c      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x30a>
 8009bac:	4b62      	ldr	r3, [pc, #392]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb0:	4a61      	ldr	r2, [pc, #388]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bb2:	f043 0304 	orr.w	r3, r3, #4
 8009bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8009bb8:	4b5f      	ldr	r3, [pc, #380]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbc:	4a5e      	ldr	r2, [pc, #376]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bbe:	f043 0301 	orr.w	r3, r3, #1
 8009bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8009bc4:	e00b      	b.n	8009bde <HAL_RCC_OscConfig+0x322>
 8009bc6:	4b5c      	ldr	r3, [pc, #368]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bca:	4a5b      	ldr	r2, [pc, #364]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8009bd2:	4b59      	ldr	r3, [pc, #356]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd6:	4a58      	ldr	r2, [pc, #352]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009bd8:	f023 0304 	bic.w	r3, r3, #4
 8009bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d015      	beq.n	8009c12 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009be6:	f7fc ff8d 	bl	8006b04 <HAL_GetTick>
 8009bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bec:	e00a      	b.n	8009c04 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bee:	f7fc ff89 	bl	8006b04 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e092      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c04:	4b4c      	ldr	r3, [pc, #304]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0ee      	beq.n	8009bee <HAL_RCC_OscConfig+0x332>
 8009c10:	e014      	b.n	8009c3c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c12:	f7fc ff77 	bl	8006b04 <HAL_GetTick>
 8009c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c18:	e00a      	b.n	8009c30 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c1a:	f7fc ff73 	bl	8006b04 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d901      	bls.n	8009c30 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e07c      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c30:	4b41      	ldr	r3, [pc, #260]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1ee      	bne.n	8009c1a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d105      	bne.n	8009c4e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c42:	4b3d      	ldr	r3, [pc, #244]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	4a3c      	ldr	r2, [pc, #240]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d068      	beq.n	8009d28 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c56:	4b38      	ldr	r3, [pc, #224]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f003 030c 	and.w	r3, r3, #12
 8009c5e:	2b08      	cmp	r3, #8
 8009c60:	d060      	beq.n	8009d24 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d145      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c6a:	4b34      	ldr	r3, [pc, #208]	; (8009d3c <HAL_RCC_OscConfig+0x480>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c70:	f7fc ff48 	bl	8006b04 <HAL_GetTick>
 8009c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c76:	e008      	b.n	8009c8a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c78:	f7fc ff44 	bl	8006b04 <HAL_GetTick>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d901      	bls.n	8009c8a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e04f      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c8a:	4b2b      	ldr	r3, [pc, #172]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1f0      	bne.n	8009c78 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	69da      	ldr	r2, [r3, #28]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	019b      	lsls	r3, r3, #6
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	041b      	lsls	r3, r3, #16
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	061b      	lsls	r3, r3, #24
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	071b      	lsls	r3, r3, #28
 8009cc2:	491d      	ldr	r1, [pc, #116]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cc8:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <HAL_RCC_OscConfig+0x480>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cce:	f7fc ff19 	bl	8006b04 <HAL_GetTick>
 8009cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cd4:	e008      	b.n	8009ce8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cd6:	f7fc ff15 	bl	8006b04 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d901      	bls.n	8009ce8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e020      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ce8:	4b13      	ldr	r3, [pc, #76]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0f0      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x41a>
 8009cf4:	e018      	b.n	8009d28 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cf6:	4b11      	ldr	r3, [pc, #68]	; (8009d3c <HAL_RCC_OscConfig+0x480>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cfc:	f7fc ff02 	bl	8006b04 <HAL_GetTick>
 8009d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d02:	e008      	b.n	8009d16 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d04:	f7fc fefe 	bl	8006b04 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d901      	bls.n	8009d16 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e009      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d16:	4b08      	ldr	r3, [pc, #32]	; (8009d38 <HAL_RCC_OscConfig+0x47c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1f0      	bne.n	8009d04 <HAL_RCC_OscConfig+0x448>
 8009d22:	e001      	b.n	8009d28 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e000      	b.n	8009d2a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	40007000 	.word	0x40007000
 8009d38:	40023800 	.word	0x40023800
 8009d3c:	42470060 	.word	0x42470060

08009d40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e022      	b.n	8009d98 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d105      	bne.n	8009d6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fb fa1b 	bl	80051a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2203      	movs	r2, #3
 8009d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f814 	bl	8009da0 <HAL_SD_InitCard>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e00a      	b.n	8009d98 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009da0:	b5b0      	push	{r4, r5, r7, lr}
 8009da2:	b08e      	sub	sp, #56	; 0x38
 8009da4:	af04      	add	r7, sp, #16
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009db8:	2300      	movs	r3, #0
 8009dba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009dbc:	2376      	movs	r3, #118	; 0x76
 8009dbe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681d      	ldr	r5, [r3, #0]
 8009dc4:	466c      	mov	r4, sp
 8009dc6:	f107 0314 	add.w	r3, r7, #20
 8009dca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f003 fa87 	bl	800d2ec <SDIO_Init>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e031      	b.n	8009e54 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009df0:	4b1a      	ldr	r3, [pc, #104]	; (8009e5c <HAL_SD_InitCard+0xbc>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f003 fabf 	bl	800d37e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009e00:	4b16      	ldr	r3, [pc, #88]	; (8009e5c <HAL_SD_InitCard+0xbc>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 ffc6 	bl	800ad98 <SD_PowerON>
 8009e0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00b      	beq.n	8009e2c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e013      	b.n	8009e54 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fee5 	bl	800abfc <SD_InitCard>
 8009e32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00b      	beq.n	8009e52 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3728      	adds	r7, #40	; 0x28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e5c:	422580a0 	.word	0x422580a0

08009e60 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08c      	sub	sp, #48	; 0x30
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d107      	bne.n	8009e88 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e0c7      	b.n	800a018 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	f040 80c0 	bne.w	800a016 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d907      	bls.n	8009eba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e0ae      	b.n	800a018 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009ed8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	4a50      	ldr	r2, [pc, #320]	; (800a020 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	4a4f      	ldr	r2, [pc, #316]	; (800a024 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009ee8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	2200      	movs	r2, #0
 8009ef0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3380      	adds	r3, #128	; 0x80
 8009efc:	4619      	mov	r1, r3
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	025b      	lsls	r3, r3, #9
 8009f04:	089b      	lsrs	r3, r3, #2
 8009f06:	f7fd fbef 	bl	80076e8 <HAL_DMA_Start_IT>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d017      	beq.n	8009f40 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009f1e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a40      	ldr	r2, [pc, #256]	; (800a028 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e06b      	b.n	800a018 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009f40:	4b3a      	ldr	r3, [pc, #232]	; (800a02c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009f42:	2201      	movs	r2, #1
 8009f44:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d002      	beq.n	8009f54 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	025b      	lsls	r3, r3, #9
 8009f52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f003 faa1 	bl	800d4a4 <SDMMC_CmdBlockLength>
 8009f62:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00f      	beq.n	8009f8a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a2e      	ldr	r2, [pc, #184]	; (800a028 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009f70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e046      	b.n	800a018 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	025b      	lsls	r3, r3, #9
 8009f94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009f96:	2390      	movs	r3, #144	; 0x90
 8009f98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f107 0210 	add.w	r2, r7, #16
 8009fae:	4611      	mov	r1, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f003 fa4b 	bl	800d44c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d90a      	bls.n	8009fd2 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2282      	movs	r2, #130	; 0x82
 8009fc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f003 faaf 	bl	800d52c <SDMMC_CmdReadMultiBlock>
 8009fce:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009fd0:	e009      	b.n	8009fe6 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2281      	movs	r2, #129	; 0x81
 8009fd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f003 fa82 	bl	800d4e8 <SDMMC_CmdReadSingleBlock>
 8009fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d012      	beq.n	800a012 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a0d      	ldr	r2, [pc, #52]	; (800a028 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e002      	b.n	800a018 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	e000      	b.n	800a018 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a016:	2302      	movs	r3, #2
  }
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3730      	adds	r7, #48	; 0x30
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	0800aa0b 	.word	0x0800aa0b
 800a024:	0800aa7d 	.word	0x0800aa7d
 800a028:	004005ff 	.word	0x004005ff
 800a02c:	4225858c 	.word	0x4225858c

0800a030 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e0ca      	b.n	800a1ee <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b01      	cmp	r3, #1
 800a062:	f040 80c3 	bne.w	800a1ec <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	441a      	add	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a076:	429a      	cmp	r2, r3
 800a078:	d907      	bls.n	800a08a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e0b1      	b.n	800a1ee <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f042 021a 	orr.w	r2, r2, #26
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ae:	4a52      	ldr	r2, [pc, #328]	; (800a1f8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a0b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	4a51      	ldr	r2, [pc, #324]	; (800a1fc <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a0b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	2200      	movs	r2, #0
 800a0c0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d002      	beq.n	800a0d0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	025b      	lsls	r3, r3, #9
 800a0ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f003 f9e3 	bl	800d4a4 <SDMMC_CmdBlockLength>
 800a0de:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00f      	beq.n	800a106 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a45      	ldr	r2, [pc, #276]	; (800a200 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e073      	b.n	800a1ee <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d90a      	bls.n	800a122 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	22a0      	movs	r2, #160	; 0xa0
 800a110:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a118:	4618      	mov	r0, r3
 800a11a:	f003 fa4b 	bl	800d5b4 <SDMMC_CmdWriteMultiBlock>
 800a11e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a120:	e009      	b.n	800a136 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2290      	movs	r2, #144	; 0x90
 800a126:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12e:	4618      	mov	r0, r3
 800a130:	f003 fa1e 	bl	800d570 <SDMMC_CmdWriteSingleBlock>
 800a134:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d012      	beq.n	800a162 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a2f      	ldr	r2, [pc, #188]	; (800a200 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a142:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	431a      	orrs	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e045      	b.n	800a1ee <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a162:	4b28      	ldr	r3, [pc, #160]	; (800a204 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a164:	2201      	movs	r2, #1
 800a166:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3380      	adds	r3, #128	; 0x80
 800a174:	461a      	mov	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	025b      	lsls	r3, r3, #9
 800a17a:	089b      	lsrs	r3, r3, #2
 800a17c:	f7fd fab4 	bl	80076e8 <HAL_DMA_Start_IT>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01a      	beq.n	800a1bc <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 021a 	bic.w	r2, r2, #26
 800a194:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a19      	ldr	r2, [pc, #100]	; (800a200 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a19c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e018      	b.n	800a1ee <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	025b      	lsls	r3, r3, #9
 800a1c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a1c8:	2390      	movs	r3, #144	; 0x90
 800a1ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f107 0210 	add.w	r2, r7, #16
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f003 f932 	bl	800d44c <SDIO_ConfigData>

      return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e000      	b.n	800a1ee <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a1ec:	2302      	movs	r3, #2
  }
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3730      	adds	r7, #48	; 0x30
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	0800a9e1 	.word	0x0800a9e1
 800a1fc:	0800aa7d 	.word	0x0800aa7d
 800a200:	004005ff 	.word	0x004005ff
 800a204:	4225858c 	.word	0x4225858c

0800a208 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d008      	beq.n	800a236 <HAL_SD_IRQHandler+0x2e>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0308 	and.w	r3, r3, #8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 ffc8 	bl	800b1c4 <SD_Read_IT>
 800a234:	e155      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 808f 	beq.w	800a364 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a25e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a262:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0201 	bic.w	r2, r2, #1
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d039      	beq.n	800a2f2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <HAL_SD_IRQHandler+0x8a>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d011      	beq.n	800a2b6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f003 f9ae 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800a29c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d008      	beq.n	800a2b6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f91f 	bl	800a4f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800a2be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <HAL_SD_IRQHandler+0xda>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f003 fe04 	bl	800def0 <HAL_SD_RxCpltCallback>
 800a2e8:	e0fb      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f003 fdf6 	bl	800dedc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2f0:	e0f7      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 80f2 	beq.w	800a4e2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f003 0320 	and.w	r3, r3, #32
 800a304:	2b00      	cmp	r3, #0
 800a306:	d011      	beq.n	800a32c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f003 f973 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800a312:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d008      	beq.n	800a32c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f8e4 	bl	800a4f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	f040 80d5 	bne.w	800a4e2 <HAL_SD_IRQHandler+0x2da>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f003 0302 	and.w	r3, r3, #2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f040 80cf 	bne.w	800a4e2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 0208 	bic.w	r2, r2, #8
 800a352:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f003 fdbd 	bl	800dedc <HAL_SD_TxCpltCallback>
}
 800a362:	e0be      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d008      	beq.n	800a384 <HAL_SD_IRQHandler+0x17c>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f003 0308 	and.w	r3, r3, #8
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 ff72 	bl	800b266 <SD_Write_IT>
 800a382:	e0ae      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80a7 	beq.w	800a4e2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	f043 0202 	orr.w	r2, r3, #2
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d005      	beq.n	800a3c8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	f043 0208 	orr.w	r2, r3, #8
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	f043 0220 	orr.w	r2, r3, #32
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f4:	f043 0210 	orr.w	r2, r3, #16
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f240 523a 	movw	r2, #1338	; 0x53a
 800a404:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a414:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f003 f8ec 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800a420:	4602      	mov	r2, r0
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f855 	bl	800a4f4 <HAL_SD_ErrorCallback>
}
 800a44a:	e04a      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b00      	cmp	r3, #0
 800a454:	d045      	beq.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d104      	bne.n	800a46a <HAL_SD_IRQHandler+0x262>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d011      	beq.n	800a48e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	4a1f      	ldr	r2, [pc, #124]	; (800a4ec <HAL_SD_IRQHandler+0x2e4>)
 800a470:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a476:	4618      	mov	r0, r3
 800a478:	f7fd f98e 	bl	8007798 <HAL_DMA_Abort_IT>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d02f      	beq.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a486:	4618      	mov	r0, r3
 800a488:	f000 fb4a 	bl	800ab20 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a48c:	e029      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	2b00      	cmp	r3, #0
 800a496:	d104      	bne.n	800a4a2 <HAL_SD_IRQHandler+0x29a>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d011      	beq.n	800a4c6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	4a12      	ldr	r2, [pc, #72]	; (800a4f0 <HAL_SD_IRQHandler+0x2e8>)
 800a4a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fd f972 	bl	8007798 <HAL_DMA_Abort_IT>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d013      	beq.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fb65 	bl	800ab8e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a4c4:	e00d      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f003 fcf4 	bl	800dec8 <HAL_SD_AbortCallback>
}
 800a4e0:	e7ff      	b.n	800a4e2 <HAL_SD_IRQHandler+0x2da>
 800a4e2:	bf00      	nop
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	0800ab21 	.word	0x0800ab21
 800a4f0:	0800ab8f 	.word	0x0800ab8f

0800a4f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a516:	0f9b      	lsrs	r3, r3, #30
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a522:	0e9b      	lsrs	r3, r3, #26
 800a524:	b2db      	uxtb	r3, r3
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a534:	0e1b      	lsrs	r3, r3, #24
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a552:	0a1b      	lsrs	r3, r3, #8
 800a554:	b2da      	uxtb	r2, r3
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a568:	0d1b      	lsrs	r3, r3, #20
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a574:	0c1b      	lsrs	r3, r3, #16
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 030f 	and.w	r3, r3, #15
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a586:	0bdb      	lsrs	r3, r3, #15
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a598:	0b9b      	lsrs	r3, r3, #14
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5aa:	0b5b      	lsrs	r3, r3, #13
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5bc:	0b1b      	lsrs	r3, r3, #12
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d163      	bne.n	800a6a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5dc:	009a      	lsls	r2, r3, #2
 800a5de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a5e8:	0f92      	lsrs	r2, r2, #30
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5f4:	0edb      	lsrs	r3, r3, #27
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a606:	0e1b      	lsrs	r3, r3, #24
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a618:	0d5b      	lsrs	r3, r3, #21
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	f003 0307 	and.w	r3, r3, #7
 800a620:	b2da      	uxtb	r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a62a:	0c9b      	lsrs	r3, r3, #18
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	b2da      	uxtb	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63c:	0bdb      	lsrs	r3, r3, #15
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	f003 0307 	and.w	r3, r3, #7
 800a644:	b2da      	uxtb	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	7e1b      	ldrb	r3, [r3, #24]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	f003 0307 	and.w	r3, r3, #7
 800a65e:	3302      	adds	r3, #2
 800a660:	2201      	movs	r2, #1
 800a662:	fa02 f303 	lsl.w	r3, r2, r3
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a66a:	fb02 f203 	mul.w	r2, r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	7a1b      	ldrb	r3, [r3, #8]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 030f 	and.w	r3, r3, #15
 800a67c:	2201      	movs	r2, #1
 800a67e:	409a      	lsls	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a68c:	0a52      	lsrs	r2, r2, #9
 800a68e:	fb02 f203 	mul.w	r2, r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a69c:	661a      	str	r2, [r3, #96]	; 0x60
 800a69e:	e031      	b.n	800a704 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d11d      	bne.n	800a6e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ac:	041b      	lsls	r3, r3, #16
 800a6ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b6:	0c1b      	lsrs	r3, r3, #16
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	029a      	lsls	r2, r3, #10
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	661a      	str	r2, [r3, #96]	; 0x60
 800a6e2:	e00f      	b.n	800a704 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a58      	ldr	r2, [pc, #352]	; (800a84c <HAL_SD_GetCardCSD+0x344>)
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e09d      	b.n	800a840 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a708:	0b9b      	lsrs	r3, r3, #14
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	b2da      	uxtb	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71a:	09db      	lsrs	r3, r3, #7
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a722:	b2da      	uxtb	r2, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a732:	b2da      	uxtb	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73c:	0fdb      	lsrs	r3, r3, #31
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a748:	0f5b      	lsrs	r3, r3, #29
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	b2da      	uxtb	r2, r3
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75a:	0e9b      	lsrs	r3, r3, #26
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	b2da      	uxtb	r2, r3
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76c:	0d9b      	lsrs	r3, r3, #22
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	b2da      	uxtb	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77e:	0d5b      	lsrs	r3, r3, #21
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a79a:	0c1b      	lsrs	r3, r3, #16
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ae:	0bdb      	lsrs	r3, r3, #15
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c2:	0b9b      	lsrs	r3, r3, #14
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d6:	0b5b      	lsrs	r3, r3, #13
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ea:	0b1b      	lsrs	r3, r3, #12
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fe:	0a9b      	lsrs	r3, r3, #10
 800a800:	b2db      	uxtb	r3, r3
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	b2da      	uxtb	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	004005ff 	.word	0x004005ff

0800a850 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b08e      	sub	sp, #56	; 0x38
 800a8ac:	af04      	add	r7, sp, #16
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2203      	movs	r2, #3
 800a8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d02e      	beq.n	800a920 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c8:	d106      	bne.n	800a8d8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	639a      	str	r2, [r3, #56]	; 0x38
 800a8d6:	e029      	b.n	800a92c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8de:	d10a      	bne.n	800a8f6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fb0f 	bl	800af04 <SD_WideBus_Enable>
 800a8e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	639a      	str	r2, [r3, #56]	; 0x38
 800a8f4:	e01a      	b.n	800a92c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fb4c 	bl	800af9a <SD_WideBus_Disable>
 800a902:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	431a      	orrs	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	639a      	str	r2, [r3, #56]	; 0x38
 800a910:	e00c      	b.n	800a92c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a916:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38
 800a91e:	e005      	b.n	800a92c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a18      	ldr	r2, [pc, #96]	; (800a99c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a93a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e024      	b.n	800a992 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681d      	ldr	r5, [r3, #0]
 800a96e:	466c      	mov	r4, sp
 800a970:	f107 0318 	add.w	r3, r7, #24
 800a974:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a97c:	f107 030c 	add.w	r3, r7, #12
 800a980:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a982:	4628      	mov	r0, r5
 800a984:	f002 fcb2 	bl	800d2ec <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3728      	adds	r7, #40	; 0x28
 800a996:	46bd      	mov	sp, r7
 800a998:	bdb0      	pop	{r4, r5, r7, pc}
 800a99a:	bf00      	nop
 800a99c:	004005ff 	.word	0x004005ff

0800a9a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a9ac:	f107 030c 	add.w	r3, r7, #12
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa7e 	bl	800aeb4 <SD_SendStatus>
 800a9b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	431a      	orrs	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	0a5b      	lsrs	r3, r3, #9
 800a9d0:	f003 030f 	and.w	r3, r3, #15
 800a9d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a9d6:	693b      	ldr	r3, [r7, #16]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1c:	2b82      	cmp	r3, #130	; 0x82
 800aa1e:	d111      	bne.n	800aa44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f002 fde7 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800aa2a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d008      	beq.n	800aa44 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff fd58 	bl	800a4f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 0208 	bic.w	r2, r2, #8
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa5c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f003 fa3f 	bl	800def0 <HAL_SD_RxCpltCallback>
#endif
}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa88:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fd f830 	bl	8007af0 <HAL_DMA_GetError>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d03e      	beq.n	800ab14 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d002      	beq.n	800aab2 <SD_DMAError+0x36>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d12d      	bne.n	800ab0e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a19      	ldr	r2, [pc, #100]	; (800ab1c <SD_DMAError+0xa0>)
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aac8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aace:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aad6:	6978      	ldr	r0, [r7, #20]
 800aad8:	f7ff ff62 	bl	800a9a0 <HAL_SD_GetCardState>
 800aadc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b06      	cmp	r3, #6
 800aae2:	d002      	beq.n	800aaea <SD_DMAError+0x6e>
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	d10a      	bne.n	800ab00 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f002 fd82 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafa:	431a      	orrs	r2, r3
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ab0e:	6978      	ldr	r0, [r7, #20]
 800ab10:	f7ff fcf0 	bl	800a4f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ab14:	bf00      	nop
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	004005ff 	.word	0x004005ff

0800ab20 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff ff31 	bl	800a9a0 <HAL_SD_GetCardState>
 800ab3e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b06      	cmp	r3, #6
 800ab52:	d002      	beq.n	800ab5a <SD_DMATxAbort+0x3a>
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d10a      	bne.n	800ab70 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f002 fd4a 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800ab64:	4602      	mov	r2, r0
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d103      	bne.n	800ab80 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f003 f9a5 	bl	800dec8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ab7e:	e002      	b.n	800ab86 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fcb7 	bl	800a4f4 <HAL_SD_ErrorCallback>
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f240 523a 	movw	r2, #1338	; 0x53a
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7ff fefa 	bl	800a9a0 <HAL_SD_GetCardState>
 800abac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b06      	cmp	r3, #6
 800abc0:	d002      	beq.n	800abc8 <SD_DMARxAbort+0x3a>
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b05      	cmp	r3, #5
 800abc6:	d10a      	bne.n	800abde <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4618      	mov	r0, r3
 800abce:	f002 fd13 	bl	800d5f8 <SDMMC_CmdStopTransfer>
 800abd2:	4602      	mov	r2, r0
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd8:	431a      	orrs	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f003 f96e 	bl	800dec8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800abec:	e002      	b.n	800abf4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff fc80 	bl	800a4f4 <HAL_SD_ErrorCallback>
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800abfc:	b5b0      	push	{r4, r5, r7, lr}
 800abfe:	b094      	sub	sp, #80	; 0x50
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ac04:	2301      	movs	r3, #1
 800ac06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f002 fbc5 	bl	800d39c <SDIO_GetPowerState>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d102      	bne.n	800ac1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac1c:	e0b7      	b.n	800ad8e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d02f      	beq.n	800ac86 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f002 fdee 	bl	800d80c <SDMMC_CmdSendCID>
 800ac30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <SD_InitCard+0x40>
    {
      return errorstate;
 800ac38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3a:	e0a8      	b.n	800ad8e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2100      	movs	r1, #0
 800ac42:	4618      	mov	r0, r3
 800ac44:	f002 fbef 	bl	800d426 <SDIO_GetResponse>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2104      	movs	r1, #4
 800ac54:	4618      	mov	r0, r3
 800ac56:	f002 fbe6 	bl	800d426 <SDIO_GetResponse>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2108      	movs	r1, #8
 800ac66:	4618      	mov	r0, r3
 800ac68:	f002 fbdd 	bl	800d426 <SDIO_GetResponse>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	210c      	movs	r1, #12
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f002 fbd4 	bl	800d426 <SDIO_GetResponse>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d00d      	beq.n	800acaa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f107 020e 	add.w	r2, r7, #14
 800ac96:	4611      	mov	r1, r2
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f002 fdf4 	bl	800d886 <SDMMC_CmdSetRelAdd>
 800ac9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <SD_InitCard+0xae>
    {
      return errorstate;
 800aca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca8:	e071      	b.n	800ad8e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d036      	beq.n	800ad20 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800acb2:	89fb      	ldrh	r3, [r7, #14]
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc2:	041b      	lsls	r3, r3, #16
 800acc4:	4619      	mov	r1, r3
 800acc6:	4610      	mov	r0, r2
 800acc8:	f002 fdbe 	bl	800d848 <SDMMC_CmdSendCSD>
 800accc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800acd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd6:	e05a      	b.n	800ad8e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2100      	movs	r1, #0
 800acde:	4618      	mov	r0, r3
 800ace0:	f002 fba1 	bl	800d426 <SDIO_GetResponse>
 800ace4:	4602      	mov	r2, r0
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2104      	movs	r1, #4
 800acf0:	4618      	mov	r0, r3
 800acf2:	f002 fb98 	bl	800d426 <SDIO_GetResponse>
 800acf6:	4602      	mov	r2, r0
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2108      	movs	r1, #8
 800ad02:	4618      	mov	r0, r3
 800ad04:	f002 fb8f 	bl	800d426 <SDIO_GetResponse>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	210c      	movs	r1, #12
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 fb86 	bl	800d426 <SDIO_GetResponse>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2104      	movs	r1, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 fb7d 	bl	800d426 <SDIO_GetResponse>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	0d1a      	lsrs	r2, r3, #20
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad34:	f107 0310 	add.w	r3, r7, #16
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff fbe4 	bl	800a508 <HAL_SD_GetCardCSD>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad4a:	e020      	b.n	800ad8e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad54:	041b      	lsls	r3, r3, #16
 800ad56:	f04f 0400 	mov.w	r4, #0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4623      	mov	r3, r4
 800ad5e:	4608      	mov	r0, r1
 800ad60:	f002 fc6c 	bl	800d63c <SDMMC_CmdSelDesel>
 800ad64:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <SD_InitCard+0x174>
  {
    return errorstate;
 800ad6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6e:	e00e      	b.n	800ad8e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681d      	ldr	r5, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	466c      	mov	r4, sp
 800ad78:	f103 0210 	add.w	r2, r3, #16
 800ad7c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad82:	3304      	adds	r3, #4
 800ad84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad86:	4628      	mov	r0, r5
 800ad88:	f002 fab0 	bl	800d2ec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3740      	adds	r7, #64	; 0x40
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ad98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f002 fc66 	bl	800d682 <SDMMC_CmdGoIdleState>
 800adb6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	e072      	b.n	800aea8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f002 fc79 	bl	800d6be <SDMMC_CmdOperCond>
 800adcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00d      	beq.n	800adf0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f002 fc4f 	bl	800d682 <SDMMC_CmdGoIdleState>
 800ade4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	e05b      	b.n	800aea8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d137      	bne.n	800ae6e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2100      	movs	r1, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f002 fc79 	bl	800d6fc <SDMMC_CmdAppCommand>
 800ae0a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d02d      	beq.n	800ae6e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae16:	e047      	b.n	800aea8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f002 fc6c 	bl	800d6fc <SDMMC_CmdAppCommand>
 800ae24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <SD_PowerON+0x98>
    {
      return errorstate;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	e03b      	b.n	800aea8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	491e      	ldr	r1, [pc, #120]	; (800aeb0 <SD_PowerON+0x118>)
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 fc82 	bl	800d740 <SDMMC_CmdAppOperCommand>
 800ae3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae48:	e02e      	b.n	800aea8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f002 fae8 	bl	800d426 <SDIO_GetResponse>
 800ae56:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	0fdb      	lsrs	r3, r3, #31
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d101      	bne.n	800ae64 <SD_PowerON+0xcc>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <SD_PowerON+0xce>
 800ae64:	2300      	movs	r3, #0
 800ae66:	613b      	str	r3, [r7, #16]

    count++;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d802      	bhi.n	800ae7e <SD_PowerON+0xe6>
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0cc      	beq.n	800ae18 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d902      	bls.n	800ae8e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ae88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae8c:	e00c      	b.n	800aea8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d003      	beq.n	800aea0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	645a      	str	r2, [r3, #68]	; 0x44
 800ae9e:	e002      	b.n	800aea6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	c1100000 	.word	0xc1100000

0800aeb4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800aec4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aec8:	e018      	b.n	800aefc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed2:	041b      	lsls	r3, r3, #16
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f002 fcf6 	bl	800d8c8 <SDMMC_CmdSendStatus>
 800aedc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	e009      	b.n	800aefc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2100      	movs	r1, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f002 fa99 	bl	800d426 <SDIO_GetResponse>
 800aef4:	4602      	mov	r2, r0
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2100      	movs	r1, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f002 fa83 	bl	800d426 <SDIO_GetResponse>
 800af20:	4603      	mov	r3, r0
 800af22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af2a:	d102      	bne.n	800af32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af30:	e02f      	b.n	800af92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af32:	f107 030c 	add.w	r3, r7, #12
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f879 	bl	800b030 <SD_FindSCR>
 800af3e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	e023      	b.n	800af92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01c      	beq.n	800af8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	041b      	lsls	r3, r3, #16
 800af5e:	4619      	mov	r1, r3
 800af60:	4610      	mov	r0, r2
 800af62:	f002 fbcb 	bl	800d6fc <SDMMC_CmdAppCommand>
 800af66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	e00f      	b.n	800af92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2102      	movs	r1, #2
 800af78:	4618      	mov	r0, r3
 800af7a:	f002 fc04 	bl	800d786 <SDMMC_CmdBusWidth>
 800af7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	e003      	b.n	800af92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	e001      	b.n	800af92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b086      	sub	sp, #24
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	2300      	movs	r3, #0
 800afa8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f002 fa38 	bl	800d426 <SDIO_GetResponse>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc0:	d102      	bne.n	800afc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afc6:	e02f      	b.n	800b028 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afc8:	f107 030c 	add.w	r3, r7, #12
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f82e 	bl	800b030 <SD_FindSCR>
 800afd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	e023      	b.n	800b028 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01c      	beq.n	800b024 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff2:	041b      	lsls	r3, r3, #16
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f002 fb80 	bl	800d6fc <SDMMC_CmdAppCommand>
 800affc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	e00f      	b.n	800b028 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f002 fbb9 	bl	800d786 <SDMMC_CmdBusWidth>
 800b014:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	e003      	b.n	800b028 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b020:	2300      	movs	r3, #0
 800b022:	e001      	b.n	800b028 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b024:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b030:	b590      	push	{r4, r7, lr}
 800b032:	b08f      	sub	sp, #60	; 0x3c
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b03a:	f7fb fd63 	bl	8006b04 <HAL_GetTick>
 800b03e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b044:	2300      	movs	r3, #0
 800b046:	60bb      	str	r3, [r7, #8]
 800b048:	2300      	movs	r3, #0
 800b04a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2108      	movs	r1, #8
 800b056:	4618      	mov	r0, r3
 800b058:	f002 fa24 	bl	800d4a4 <SDMMC_CmdBlockLength>
 800b05c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	e0a9      	b.n	800b1bc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b070:	041b      	lsls	r3, r3, #16
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f002 fb41 	bl	800d6fc <SDMMC_CmdAppCommand>
 800b07a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	e09a      	b.n	800b1bc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b086:	f04f 33ff 	mov.w	r3, #4294967295
 800b08a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b08c:	2308      	movs	r3, #8
 800b08e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b090:	2330      	movs	r3, #48	; 0x30
 800b092:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b094:	2302      	movs	r3, #2
 800b096:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b098:	2300      	movs	r3, #0
 800b09a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f107 0210 	add.w	r2, r7, #16
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 f9ce 	bl	800d44c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 fb88 	bl	800d7ca <SDMMC_CmdSendSCR>
 800b0ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d022      	beq.n	800b108 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	e07a      	b.n	800b1bc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00e      	beq.n	800b0f2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6819      	ldr	r1, [r3, #0]
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	f107 0208 	add.w	r2, r7, #8
 800b0e0:	18d4      	adds	r4, r2, r3
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	f002 f92d 	bl	800d342 <SDIO_ReadFIFO>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	6023      	str	r3, [r4, #0]
      index++;
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b0f2:	f7fb fd07 	bl	8006b04 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b100:	d102      	bne.n	800b108 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b102:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b106:	e059      	b.n	800b1bc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b10e:	f240 432a 	movw	r3, #1066	; 0x42a
 800b112:	4013      	ands	r3, r2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0d6      	beq.n	800b0c6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11e:	f003 0308 	and.w	r3, r3, #8
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2208      	movs	r2, #8
 800b12c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b12e:	2308      	movs	r3, #8
 800b130:	e044      	b.n	800b1bc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2202      	movs	r2, #2
 800b146:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b148:	2302      	movs	r3, #2
 800b14a:	e037      	b.n	800b1bc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b152:	f003 0320 	and.w	r3, r3, #32
 800b156:	2b00      	cmp	r3, #0
 800b158:	d005      	beq.n	800b166 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2220      	movs	r2, #32
 800b160:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b162:	2320      	movs	r3, #32
 800b164:	e02a      	b.n	800b1bc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	061a      	lsls	r2, r3, #24
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b17c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	0a1b      	lsrs	r3, r3, #8
 800b182:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b186:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	0e1b      	lsrs	r3, r3, #24
 800b18c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b190:	601a      	str	r2, [r3, #0]
    scr++;
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	3304      	adds	r3, #4
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	061a      	lsls	r2, r3, #24
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	0a1b      	lsrs	r3, r3, #8
 800b1aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	0e1b      	lsrs	r3, r3, #24
 800b1b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	373c      	adds	r7, #60	; 0x3c
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd90      	pop	{r4, r7, pc}

0800b1c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d03f      	beq.n	800b25e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b1de:	2300      	movs	r3, #0
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	e033      	b.n	800b24c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f002 f8aa 	bl	800d342 <SDIO_ReadFIFO>
 800b1ee:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	3b01      	subs	r3, #1
 800b202:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	0a1b      	lsrs	r3, r3, #8
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	3b01      	subs	r3, #1
 800b218:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	0c1b      	lsrs	r3, r3, #16
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3301      	adds	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	0e1b      	lsrs	r3, r3, #24
 800b234:	b2da      	uxtb	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	3b01      	subs	r3, #1
 800b244:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	3301      	adds	r3, #1
 800b24a:	617b      	str	r3, [r7, #20]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2b07      	cmp	r3, #7
 800b250:	d9c8      	bls.n	800b1e4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b25e:	bf00      	nop
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b086      	sub	sp, #24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d043      	beq.n	800b308 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	e037      	b.n	800b2f6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3b01      	subs	r3, #1
 800b296:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	021a      	lsls	r2, r3, #8
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	041a      	lsls	r2, r3, #16
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	061a      	lsls	r2, r3, #24
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f107 0208 	add.w	r2, r7, #8
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f002 f836 	bl	800d35c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b07      	cmp	r3, #7
 800b2fa:	d9c4      	bls.n	800b286 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b308:	bf00      	nop
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e056      	b.n	800b3d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b00      	cmp	r3, #0
 800b332:	d106      	bne.n	800b342 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7fa f821 	bl	8005384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2202      	movs	r2, #2
 800b346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b358:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	431a      	orrs	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	431a      	orrs	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	431a      	orrs	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	431a      	orrs	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	ea42 0103 	orr.w	r1, r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	0c1b      	lsrs	r3, r3, #16
 800b3a0:	f003 0104 	and.w	r1, r3, #4
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69da      	ldr	r2, [r3, #28]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d101      	bne.n	800b3fa <HAL_SPI_Transmit+0x22>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e11e      	b.n	800b638 <HAL_SPI_Transmit+0x260>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b402:	f7fb fb7f 	bl	8006b04 <HAL_GetTick>
 800b406:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b408:	88fb      	ldrh	r3, [r7, #6]
 800b40a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b01      	cmp	r3, #1
 800b416:	d002      	beq.n	800b41e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b418:	2302      	movs	r3, #2
 800b41a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b41c:	e103      	b.n	800b626 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <HAL_SPI_Transmit+0x52>
 800b424:	88fb      	ldrh	r3, [r7, #6]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b42e:	e0fa      	b.n	800b626 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2203      	movs	r2, #3
 800b434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	88fa      	ldrh	r2, [r7, #6]
 800b448:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	88fa      	ldrh	r2, [r7, #6]
 800b44e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b476:	d107      	bne.n	800b488 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b492:	2b40      	cmp	r3, #64	; 0x40
 800b494:	d007      	beq.n	800b4a6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ae:	d14b      	bne.n	800b548 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <HAL_SPI_Transmit+0xe6>
 800b4b8:	8afb      	ldrh	r3, [r7, #22]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d13e      	bne.n	800b53c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c2:	881a      	ldrh	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	1c9a      	adds	r2, r3, #2
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b4e2:	e02b      	b.n	800b53c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d112      	bne.n	800b518 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	881a      	ldrh	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	1c9a      	adds	r2, r3, #2
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	3b01      	subs	r3, #1
 800b510:	b29a      	uxth	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	86da      	strh	r2, [r3, #54]	; 0x36
 800b516:	e011      	b.n	800b53c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b518:	f7fb faf4 	bl	8006b04 <HAL_GetTick>
 800b51c:	4602      	mov	r2, r0
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	429a      	cmp	r2, r3
 800b526:	d803      	bhi.n	800b530 <HAL_SPI_Transmit+0x158>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52e:	d102      	bne.n	800b536 <HAL_SPI_Transmit+0x15e>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b53a:	e074      	b.n	800b626 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b540:	b29b      	uxth	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1ce      	bne.n	800b4e4 <HAL_SPI_Transmit+0x10c>
 800b546:	e04c      	b.n	800b5e2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <HAL_SPI_Transmit+0x17e>
 800b550:	8afb      	ldrh	r3, [r7, #22]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d140      	bne.n	800b5d8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	330c      	adds	r3, #12
 800b560:	7812      	ldrb	r2, [r2, #0]
 800b562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b572:	b29b      	uxth	r3, r3
 800b574:	3b01      	subs	r3, #1
 800b576:	b29a      	uxth	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b57c:	e02c      	b.n	800b5d8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f003 0302 	and.w	r3, r3, #2
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d113      	bne.n	800b5b4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	330c      	adds	r3, #12
 800b596:	7812      	ldrb	r2, [r2, #0]
 800b598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	86da      	strh	r2, [r3, #54]	; 0x36
 800b5b2:	e011      	b.n	800b5d8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5b4:	f7fb faa6 	bl	8006b04 <HAL_GetTick>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d803      	bhi.n	800b5cc <HAL_SPI_Transmit+0x1f4>
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ca:	d102      	bne.n	800b5d2 <HAL_SPI_Transmit+0x1fa>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b5d6:	e026      	b.n	800b626 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1cd      	bne.n	800b57e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 fba4 	bl	800bd34 <SPI_EndRxTxTransaction>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	613b      	str	r3, [r7, #16]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	77fb      	strb	r3, [r7, #31]
 800b622:	e000      	b.n	800b626 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b624:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b636:	7ffb      	ldrb	r3, [r7, #31]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af02      	add	r7, sp, #8
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	4613      	mov	r3, r2
 800b64e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b650:	2300      	movs	r3, #0
 800b652:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b65c:	d112      	bne.n	800b684 <HAL_SPI_Receive+0x44>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10e      	bne.n	800b684 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2204      	movs	r2, #4
 800b66a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b66e:	88fa      	ldrh	r2, [r7, #6]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4613      	mov	r3, r2
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	68b9      	ldr	r1, [r7, #8]
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 f8e9 	bl	800b852 <HAL_SPI_TransmitReceive>
 800b680:	4603      	mov	r3, r0
 800b682:	e0e2      	b.n	800b84a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d101      	bne.n	800b692 <HAL_SPI_Receive+0x52>
 800b68e:	2302      	movs	r3, #2
 800b690:	e0db      	b.n	800b84a <HAL_SPI_Receive+0x20a>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b69a:	f7fb fa33 	bl	8006b04 <HAL_GetTick>
 800b69e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d002      	beq.n	800b6b2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6b0:	e0c2      	b.n	800b838 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <HAL_SPI_Receive+0x7e>
 800b6b8:	88fb      	ldrh	r3, [r7, #6]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6c2:	e0b9      	b.n	800b838 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2204      	movs	r2, #4
 800b6c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	88fa      	ldrh	r2, [r7, #6]
 800b6dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	88fa      	ldrh	r2, [r7, #6]
 800b6e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b70a:	d107      	bne.n	800b71c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b71a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d007      	beq.n	800b73a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b738:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d162      	bne.n	800b808 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b742:	e02e      	b.n	800b7a2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d115      	bne.n	800b77e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f103 020c 	add.w	r2, r3, #12
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	7812      	ldrb	r2, [r2, #0]
 800b760:	b2d2      	uxtb	r2, r2
 800b762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b772:	b29b      	uxth	r3, r3
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b77c:	e011      	b.n	800b7a2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b77e:	f7fb f9c1 	bl	8006b04 <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d803      	bhi.n	800b796 <HAL_SPI_Receive+0x156>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d102      	bne.n	800b79c <HAL_SPI_Receive+0x15c>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b79c:	2303      	movs	r3, #3
 800b79e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7a0:	e04a      	b.n	800b838 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1cb      	bne.n	800b744 <HAL_SPI_Receive+0x104>
 800b7ac:	e031      	b.n	800b812 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d113      	bne.n	800b7e4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c6:	b292      	uxth	r2, r2
 800b7c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	1c9a      	adds	r2, r3, #2
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7e2:	e011      	b.n	800b808 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7e4:	f7fb f98e 	bl	8006b04 <HAL_GetTick>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d803      	bhi.n	800b7fc <HAL_SPI_Receive+0x1bc>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7fa:	d102      	bne.n	800b802 <HAL_SPI_Receive+0x1c2>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d102      	bne.n	800b808 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b802:	2303      	movs	r3, #3
 800b804:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b806:	e017      	b.n	800b838 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1cd      	bne.n	800b7ae <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 fa27 	bl	800bc6a <SPI_EndRxTransaction>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2220      	movs	r2, #32
 800b826:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	75fb      	strb	r3, [r7, #23]
 800b834:	e000      	b.n	800b838 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b08c      	sub	sp, #48	; 0x30
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	607a      	str	r2, [r7, #4]
 800b85e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b860:	2301      	movs	r3, #1
 800b862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b864:	2300      	movs	r3, #0
 800b866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b870:	2b01      	cmp	r3, #1
 800b872:	d101      	bne.n	800b878 <HAL_SPI_TransmitReceive+0x26>
 800b874:	2302      	movs	r3, #2
 800b876:	e18a      	b.n	800bb8e <HAL_SPI_TransmitReceive+0x33c>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b880:	f7fb f940 	bl	8006b04 <HAL_GetTick>
 800b884:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b88c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b896:	887b      	ldrh	r3, [r7, #2]
 800b898:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b89a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d00f      	beq.n	800b8c2 <HAL_SPI_TransmitReceive+0x70>
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8a8:	d107      	bne.n	800b8ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <HAL_SPI_TransmitReceive+0x68>
 800b8b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	d003      	beq.n	800b8c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8c0:	e15b      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d005      	beq.n	800b8d4 <HAL_SPI_TransmitReceive+0x82>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <HAL_SPI_TransmitReceive+0x82>
 800b8ce:	887b      	ldrh	r3, [r7, #2]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d103      	bne.n	800b8dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8da:	e14e      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	d003      	beq.n	800b8f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2205      	movs	r2, #5
 800b8ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	887a      	ldrh	r2, [r7, #2]
 800b900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	887a      	ldrh	r2, [r7, #2]
 800b906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	887a      	ldrh	r2, [r7, #2]
 800b912:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	887a      	ldrh	r2, [r7, #2]
 800b918:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b930:	2b40      	cmp	r3, #64	; 0x40
 800b932:	d007      	beq.n	800b944 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b94c:	d178      	bne.n	800ba40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <HAL_SPI_TransmitReceive+0x10a>
 800b956:	8b7b      	ldrh	r3, [r7, #26]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d166      	bne.n	800ba2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b960:	881a      	ldrh	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96c:	1c9a      	adds	r2, r3, #2
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b976:	b29b      	uxth	r3, r3
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b980:	e053      	b.n	800ba2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f003 0302 	and.w	r3, r3, #2
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d11b      	bne.n	800b9c8 <HAL_SPI_TransmitReceive+0x176>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b994:	b29b      	uxth	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d016      	beq.n	800b9c8 <HAL_SPI_TransmitReceive+0x176>
 800b99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d113      	bne.n	800b9c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a4:	881a      	ldrh	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b0:	1c9a      	adds	r2, r3, #2
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d119      	bne.n	800ba0a <HAL_SPI_TransmitReceive+0x1b8>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d014      	beq.n	800ba0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68da      	ldr	r2, [r3, #12]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	b292      	uxth	r2, r2
 800b9ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f2:	1c9a      	adds	r2, r3, #2
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba06:	2301      	movs	r3, #1
 800ba08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba0a:	f7fb f87b 	bl	8006b04 <HAL_GetTick>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d807      	bhi.n	800ba2a <HAL_SPI_TransmitReceive+0x1d8>
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba20:	d003      	beq.n	800ba2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba28:	e0a7      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1a6      	bne.n	800b982 <HAL_SPI_TransmitReceive+0x130>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1a1      	bne.n	800b982 <HAL_SPI_TransmitReceive+0x130>
 800ba3e:	e07c      	b.n	800bb3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <HAL_SPI_TransmitReceive+0x1fc>
 800ba48:	8b7b      	ldrh	r3, [r7, #26]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d16b      	bne.n	800bb26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	330c      	adds	r3, #12
 800ba58:	7812      	ldrb	r2, [r2, #0]
 800ba5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba74:	e057      	b.n	800bb26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f003 0302 	and.w	r3, r3, #2
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d11c      	bne.n	800babe <HAL_SPI_TransmitReceive+0x26c>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d017      	beq.n	800babe <HAL_SPI_TransmitReceive+0x26c>
 800ba8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d114      	bne.n	800babe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	330c      	adds	r3, #12
 800ba9e:	7812      	ldrb	r2, [r2, #0]
 800baa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	3b01      	subs	r3, #1
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800baba:	2300      	movs	r3, #0
 800babc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d119      	bne.n	800bb00 <HAL_SPI_TransmitReceive+0x2ae>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d014      	beq.n	800bb00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae0:	b2d2      	uxtb	r2, r2
 800bae2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bafc:	2301      	movs	r3, #1
 800bafe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb00:	f7fb f800 	bl	8006b04 <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d803      	bhi.n	800bb18 <HAL_SPI_TransmitReceive+0x2c6>
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb16:	d102      	bne.n	800bb1e <HAL_SPI_TransmitReceive+0x2cc>
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d103      	bne.n	800bb26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb24:	e029      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1a2      	bne.n	800ba76 <HAL_SPI_TransmitReceive+0x224>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d19d      	bne.n	800ba76 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 f8f8 	bl	800bd34 <SPI_EndRxTxTransaction>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d006      	beq.n	800bb58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2220      	movs	r2, #32
 800bb54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bb56:	e010      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10b      	bne.n	800bb78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	e000      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3730      	adds	r7, #48	; 0x30
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	603b      	str	r3, [r7, #0]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bba6:	e04c      	b.n	800bc42 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d048      	beq.n	800bc42 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bbb0:	f7fa ffa8 	bl	8006b04 <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d902      	bls.n	800bbc6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d13d      	bne.n	800bc42 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bbd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbde:	d111      	bne.n	800bc04 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbe8:	d004      	beq.n	800bbf4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbf2:	d107      	bne.n	800bc04 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc0c:	d10f      	bne.n	800bc2e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e00f      	b.n	800bc62 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	689a      	ldr	r2, [r3, #8]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	bf0c      	ite	eq
 800bc52:	2301      	moveq	r3, #1
 800bc54:	2300      	movne	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d1a3      	bne.n	800bba8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b086      	sub	sp, #24
 800bc6e:	af02      	add	r7, sp, #8
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc7e:	d111      	bne.n	800bca4 <SPI_EndRxTransaction+0x3a>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc88:	d004      	beq.n	800bc94 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc92:	d107      	bne.n	800bca4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bca2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcac:	d12a      	bne.n	800bd04 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcb6:	d012      	beq.n	800bcde <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2180      	movs	r1, #128	; 0x80
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f7ff ff67 	bl	800bb96 <SPI_WaitFlagStateUntilTimeout>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d02d      	beq.n	800bd2a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	f043 0220 	orr.w	r2, r3, #32
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e026      	b.n	800bd2c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2200      	movs	r2, #0
 800bce6:	2101      	movs	r1, #1
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7ff ff54 	bl	800bb96 <SPI_WaitFlagStateUntilTimeout>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01a      	beq.n	800bd2a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf8:	f043 0220 	orr.w	r2, r3, #32
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e013      	b.n	800bd2c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f7ff ff41 	bl	800bb96 <SPI_WaitFlagStateUntilTimeout>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d007      	beq.n	800bd2a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1e:	f043 0220 	orr.w	r2, r3, #32
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	e000      	b.n	800bd2c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af02      	add	r7, sp, #8
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd40:	4b1b      	ldr	r3, [pc, #108]	; (800bdb0 <SPI_EndRxTxTransaction+0x7c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a1b      	ldr	r2, [pc, #108]	; (800bdb4 <SPI_EndRxTxTransaction+0x80>)
 800bd46:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4a:	0d5b      	lsrs	r3, r3, #21
 800bd4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd50:	fb02 f303 	mul.w	r3, r2, r3
 800bd54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd5e:	d112      	bne.n	800bd86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2200      	movs	r2, #0
 800bd68:	2180      	movs	r1, #128	; 0x80
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff ff13 	bl	800bb96 <SPI_WaitFlagStateUntilTimeout>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d016      	beq.n	800bda4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7a:	f043 0220 	orr.w	r2, r3, #32
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e00f      	b.n	800bda6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00a      	beq.n	800bda2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9c:	2b80      	cmp	r3, #128	; 0x80
 800bd9e:	d0f2      	beq.n	800bd86 <SPI_EndRxTxTransaction+0x52>
 800bda0:	e000      	b.n	800bda4 <SPI_EndRxTxTransaction+0x70>
        break;
 800bda2:	bf00      	nop
  }

  return HAL_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000000 	.word	0x20000000
 800bdb4:	165e9f81 	.word	0x165e9f81

0800bdb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e01d      	b.n	800be06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7f9 fb8c 	bl	80054fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2202      	movs	r2, #2
 800bde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	f000 fb56 	bl	800c4a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be0e:	b480      	push	{r7}
 800be10:	b085      	sub	sp, #20
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f003 0307 	and.w	r3, r3, #7
 800be30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b06      	cmp	r3, #6
 800be36:	d007      	beq.n	800be48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f042 0201 	orr.w	r2, r2, #1
 800be46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b082      	sub	sp, #8
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e01d      	b.n	800bea4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b00      	cmp	r3, #0
 800be72:	d106      	bne.n	800be82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7f9 fac9 	bl	8005414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2202      	movs	r2, #2
 800be86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	3304      	adds	r3, #4
 800be92:	4619      	mov	r1, r3
 800be94:	4610      	mov	r0, r2
 800be96:	f000 fb07 	bl	800c4a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2201      	movs	r2, #1
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fd42 	bl	800c948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a15      	ldr	r2, [pc, #84]	; (800bf20 <HAL_TIM_PWM_Start+0x74>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d004      	beq.n	800bed8 <HAL_TIM_PWM_Start+0x2c>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a14      	ldr	r2, [pc, #80]	; (800bf24 <HAL_TIM_PWM_Start+0x78>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d101      	bne.n	800bedc <HAL_TIM_PWM_Start+0x30>
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <HAL_TIM_PWM_Start+0x32>
 800bedc:	2300      	movs	r3, #0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d007      	beq.n	800bef2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bef0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f003 0307 	and.w	r3, r3, #7
 800befc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b06      	cmp	r3, #6
 800bf02:	d007      	beq.n	800bf14 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0201 	orr.w	r2, r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	40010000 	.word	0x40010000
 800bf24:	40010400 	.word	0x40010400

0800bf28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e083      	b.n	800c044 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d106      	bne.n	800bf56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7f9 fb63 	bl	800561c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf6c:	f023 0307 	bic.w	r3, r3, #7
 800bf70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f000 fa93 	bl	800c4a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfaa:	f023 0303 	bic.w	r3, r3, #3
 800bfae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	689a      	ldr	r2, [r3, #8]
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bfc8:	f023 030c 	bic.w	r3, r3, #12
 800bfcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bfd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	68da      	ldr	r2, [r3, #12]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	021b      	lsls	r3, r3, #8
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	693a      	ldr	r2, [r7, #16]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	011a      	lsls	r2, r3, #4
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	031b      	lsls	r3, r3, #12
 800bff8:	4313      	orrs	r3, r2
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c006:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c00e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	695b      	ldr	r3, [r3, #20]
 800c018:	011b      	lsls	r3, r3, #4
 800c01a:	4313      	orrs	r3, r2
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4313      	orrs	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3718      	adds	r7, #24
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <HAL_TIM_Encoder_Start+0x16>
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d008      	beq.n	800c072 <HAL_TIM_Encoder_Start+0x26>
 800c060:	e00f      	b.n	800c082 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2201      	movs	r2, #1
 800c068:	2100      	movs	r1, #0
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 fc6c 	bl	800c948 <TIM_CCxChannelCmd>
      break;
 800c070:	e016      	b.n	800c0a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2201      	movs	r2, #1
 800c078:	2104      	movs	r1, #4
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fc64 	bl	800c948 <TIM_CCxChannelCmd>
      break;
 800c080:	e00e      	b.n	800c0a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2201      	movs	r2, #1
 800c088:	2100      	movs	r1, #0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 fc5c 	bl	800c948 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2201      	movs	r2, #1
 800c096:	2104      	movs	r1, #4
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fc55 	bl	800c948 <TIM_CCxChannelCmd>
      break;
 800c09e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f042 0201 	orr.w	r2, r2, #1
 800c0ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	f003 0302 	and.w	r3, r3, #2
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d122      	bne.n	800c116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d11b      	bne.n	800c116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f06f 0202 	mvn.w	r2, #2
 800c0e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	f003 0303 	and.w	r3, r3, #3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f9b5 	bl	800c46c <HAL_TIM_IC_CaptureCallback>
 800c102:	e005      	b.n	800c110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f9a7 	bl	800c458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f9b8 	bl	800c480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b04      	cmp	r3, #4
 800c122:	d122      	bne.n	800c16a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f003 0304 	and.w	r3, r3, #4
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d11b      	bne.n	800c16a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f06f 0204 	mvn.w	r2, #4
 800c13a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2202      	movs	r2, #2
 800c140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f98b 	bl	800c46c <HAL_TIM_IC_CaptureCallback>
 800c156:	e005      	b.n	800c164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f97d 	bl	800c458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f98e 	bl	800c480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	f003 0308 	and.w	r3, r3, #8
 800c174:	2b08      	cmp	r3, #8
 800c176:	d122      	bne.n	800c1be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f003 0308 	and.w	r3, r3, #8
 800c182:	2b08      	cmp	r3, #8
 800c184:	d11b      	bne.n	800c1be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f06f 0208 	mvn.w	r2, #8
 800c18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2204      	movs	r2, #4
 800c194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	f003 0303 	and.w	r3, r3, #3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f961 	bl	800c46c <HAL_TIM_IC_CaptureCallback>
 800c1aa:	e005      	b.n	800c1b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f953 	bl	800c458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f964 	bl	800c480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	f003 0310 	and.w	r3, r3, #16
 800c1c8:	2b10      	cmp	r3, #16
 800c1ca:	d122      	bne.n	800c212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f003 0310 	and.w	r3, r3, #16
 800c1d6:	2b10      	cmp	r3, #16
 800c1d8:	d11b      	bne.n	800c212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f06f 0210 	mvn.w	r2, #16
 800c1e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2208      	movs	r2, #8
 800c1e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f937 	bl	800c46c <HAL_TIM_IC_CaptureCallback>
 800c1fe:	e005      	b.n	800c20c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f929 	bl	800c458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f93a 	bl	800c480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d10e      	bne.n	800c23e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d107      	bne.n	800c23e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f06f 0201 	mvn.w	r2, #1
 800c236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7f7 fd39 	bl	8003cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c248:	2b80      	cmp	r3, #128	; 0x80
 800c24a:	d10e      	bne.n	800c26a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c256:	2b80      	cmp	r3, #128	; 0x80
 800c258:	d107      	bne.n	800c26a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fc6d 	bl	800cb44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c274:	2b40      	cmp	r3, #64	; 0x40
 800c276:	d10e      	bne.n	800c296 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c282:	2b40      	cmp	r3, #64	; 0x40
 800c284:	d107      	bne.n	800c296 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f8ff 	bl	800c494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	f003 0320 	and.w	r3, r3, #32
 800c2a0:	2b20      	cmp	r3, #32
 800c2a2:	d10e      	bne.n	800c2c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b20      	cmp	r3, #32
 800c2b0:	d107      	bne.n	800c2c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f06f 0220 	mvn.w	r2, #32
 800c2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fc37 	bl	800cb30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d101      	bne.n	800c2e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	e0b4      	b.n	800c450 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b0c      	cmp	r3, #12
 800c2fa:	f200 809f 	bhi.w	800c43c <HAL_TIM_PWM_ConfigChannel+0x170>
 800c2fe:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c339 	.word	0x0800c339
 800c308:	0800c43d 	.word	0x0800c43d
 800c30c:	0800c43d 	.word	0x0800c43d
 800c310:	0800c43d 	.word	0x0800c43d
 800c314:	0800c379 	.word	0x0800c379
 800c318:	0800c43d 	.word	0x0800c43d
 800c31c:	0800c43d 	.word	0x0800c43d
 800c320:	0800c43d 	.word	0x0800c43d
 800c324:	0800c3bb 	.word	0x0800c3bb
 800c328:	0800c43d 	.word	0x0800c43d
 800c32c:	0800c43d 	.word	0x0800c43d
 800c330:	0800c43d 	.word	0x0800c43d
 800c334:	0800c3fb 	.word	0x0800c3fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f952 	bl	800c5e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0208 	orr.w	r2, r2, #8
 800c352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699a      	ldr	r2, [r3, #24]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f022 0204 	bic.w	r2, r2, #4
 800c362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6999      	ldr	r1, [r3, #24]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	691a      	ldr	r2, [r3, #16]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	430a      	orrs	r2, r1
 800c374:	619a      	str	r2, [r3, #24]
      break;
 800c376:	e062      	b.n	800c43e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 f9a2 	bl	800c6c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	699a      	ldr	r2, [r3, #24]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	699a      	ldr	r2, [r3, #24]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6999      	ldr	r1, [r3, #24]
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	021a      	lsls	r2, r3, #8
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	619a      	str	r2, [r3, #24]
      break;
 800c3b8:	e041      	b.n	800c43e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68b9      	ldr	r1, [r7, #8]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f9f7 	bl	800c7b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69da      	ldr	r2, [r3, #28]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0208 	orr.w	r2, r2, #8
 800c3d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	69da      	ldr	r2, [r3, #28]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f022 0204 	bic.w	r2, r2, #4
 800c3e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	69d9      	ldr	r1, [r3, #28]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	430a      	orrs	r2, r1
 800c3f6:	61da      	str	r2, [r3, #28]
      break;
 800c3f8:	e021      	b.n	800c43e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	4618      	mov	r0, r3
 800c402:	f000 fa4b 	bl	800c89c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	69da      	ldr	r2, [r3, #28]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	69da      	ldr	r2, [r3, #28]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	69d9      	ldr	r1, [r3, #28]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	021a      	lsls	r2, r3, #8
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	430a      	orrs	r2, r1
 800c438:	61da      	str	r2, [r3, #28]
      break;
 800c43a:	e000      	b.n	800c43e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c43c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a40      	ldr	r2, [pc, #256]	; (800c5bc <TIM_Base_SetConfig+0x114>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d013      	beq.n	800c4e8 <TIM_Base_SetConfig+0x40>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4c6:	d00f      	beq.n	800c4e8 <TIM_Base_SetConfig+0x40>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a3d      	ldr	r2, [pc, #244]	; (800c5c0 <TIM_Base_SetConfig+0x118>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d00b      	beq.n	800c4e8 <TIM_Base_SetConfig+0x40>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a3c      	ldr	r2, [pc, #240]	; (800c5c4 <TIM_Base_SetConfig+0x11c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d007      	beq.n	800c4e8 <TIM_Base_SetConfig+0x40>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a3b      	ldr	r2, [pc, #236]	; (800c5c8 <TIM_Base_SetConfig+0x120>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d003      	beq.n	800c4e8 <TIM_Base_SetConfig+0x40>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a3a      	ldr	r2, [pc, #232]	; (800c5cc <TIM_Base_SetConfig+0x124>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d108      	bne.n	800c4fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a2f      	ldr	r2, [pc, #188]	; (800c5bc <TIM_Base_SetConfig+0x114>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d02b      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c508:	d027      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a2c      	ldr	r2, [pc, #176]	; (800c5c0 <TIM_Base_SetConfig+0x118>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d023      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a2b      	ldr	r2, [pc, #172]	; (800c5c4 <TIM_Base_SetConfig+0x11c>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d01f      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a2a      	ldr	r2, [pc, #168]	; (800c5c8 <TIM_Base_SetConfig+0x120>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d01b      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a29      	ldr	r2, [pc, #164]	; (800c5cc <TIM_Base_SetConfig+0x124>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d017      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a28      	ldr	r2, [pc, #160]	; (800c5d0 <TIM_Base_SetConfig+0x128>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d013      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a27      	ldr	r2, [pc, #156]	; (800c5d4 <TIM_Base_SetConfig+0x12c>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d00f      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a26      	ldr	r2, [pc, #152]	; (800c5d8 <TIM_Base_SetConfig+0x130>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d00b      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a25      	ldr	r2, [pc, #148]	; (800c5dc <TIM_Base_SetConfig+0x134>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d007      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a24      	ldr	r2, [pc, #144]	; (800c5e0 <TIM_Base_SetConfig+0x138>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d003      	beq.n	800c55a <TIM_Base_SetConfig+0xb2>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a23      	ldr	r2, [pc, #140]	; (800c5e4 <TIM_Base_SetConfig+0x13c>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d108      	bne.n	800c56c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	689a      	ldr	r2, [r3, #8]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <TIM_Base_SetConfig+0x114>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d003      	beq.n	800c5a0 <TIM_Base_SetConfig+0xf8>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a0c      	ldr	r2, [pc, #48]	; (800c5cc <TIM_Base_SetConfig+0x124>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d103      	bne.n	800c5a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	691a      	ldr	r2, [r3, #16]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	615a      	str	r2, [r3, #20]
}
 800c5ae:	bf00      	nop
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	40010000 	.word	0x40010000
 800c5c0:	40000400 	.word	0x40000400
 800c5c4:	40000800 	.word	0x40000800
 800c5c8:	40000c00 	.word	0x40000c00
 800c5cc:	40010400 	.word	0x40010400
 800c5d0:	40014000 	.word	0x40014000
 800c5d4:	40014400 	.word	0x40014400
 800c5d8:	40014800 	.word	0x40014800
 800c5dc:	40001800 	.word	0x40001800
 800c5e0:	40001c00 	.word	0x40001c00
 800c5e4:	40002000 	.word	0x40002000

0800c5e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	f023 0201 	bic.w	r2, r3, #1
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0303 	bic.w	r3, r3, #3
 800c61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f023 0302 	bic.w	r3, r3, #2
 800c630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	4313      	orrs	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a20      	ldr	r2, [pc, #128]	; (800c6c0 <TIM_OC1_SetConfig+0xd8>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d003      	beq.n	800c64c <TIM_OC1_SetConfig+0x64>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a1f      	ldr	r2, [pc, #124]	; (800c6c4 <TIM_OC1_SetConfig+0xdc>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d10c      	bne.n	800c666 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	f023 0308 	bic.w	r3, r3, #8
 800c652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f023 0304 	bic.w	r3, r3, #4
 800c664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a15      	ldr	r2, [pc, #84]	; (800c6c0 <TIM_OC1_SetConfig+0xd8>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d003      	beq.n	800c676 <TIM_OC1_SetConfig+0x8e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a14      	ldr	r2, [pc, #80]	; (800c6c4 <TIM_OC1_SetConfig+0xdc>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d111      	bne.n	800c69a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	4313      	orrs	r3, r2
 800c698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	621a      	str	r2, [r3, #32]
}
 800c6b4:	bf00      	nop
 800c6b6:	371c      	adds	r7, #28
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	40010000 	.word	0x40010000
 800c6c4:	40010400 	.word	0x40010400

0800c6c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	f023 0210 	bic.w	r2, r3, #16
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	021b      	lsls	r3, r3, #8
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	4313      	orrs	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f023 0320 	bic.w	r3, r3, #32
 800c712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	011b      	lsls	r3, r3, #4
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a22      	ldr	r2, [pc, #136]	; (800c7ac <TIM_OC2_SetConfig+0xe4>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d003      	beq.n	800c730 <TIM_OC2_SetConfig+0x68>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a21      	ldr	r2, [pc, #132]	; (800c7b0 <TIM_OC2_SetConfig+0xe8>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d10d      	bne.n	800c74c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	4313      	orrs	r3, r2
 800c742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c74a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a17      	ldr	r2, [pc, #92]	; (800c7ac <TIM_OC2_SetConfig+0xe4>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d003      	beq.n	800c75c <TIM_OC2_SetConfig+0x94>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a16      	ldr	r2, [pc, #88]	; (800c7b0 <TIM_OC2_SetConfig+0xe8>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d113      	bne.n	800c784 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c76a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	693a      	ldr	r2, [r7, #16]
 800c774:	4313      	orrs	r3, r2
 800c776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	4313      	orrs	r3, r2
 800c782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	621a      	str	r2, [r3, #32]
}
 800c79e:	bf00      	nop
 800c7a0:	371c      	adds	r7, #28
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	40010000 	.word	0x40010000
 800c7b0:	40010400 	.word	0x40010400

0800c7b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a21      	ldr	r2, [pc, #132]	; (800c894 <TIM_OC3_SetConfig+0xe0>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d003      	beq.n	800c81a <TIM_OC3_SetConfig+0x66>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a20      	ldr	r2, [pc, #128]	; (800c898 <TIM_OC3_SetConfig+0xe4>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d10d      	bne.n	800c836 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	021b      	lsls	r3, r3, #8
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a16      	ldr	r2, [pc, #88]	; (800c894 <TIM_OC3_SetConfig+0xe0>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d003      	beq.n	800c846 <TIM_OC3_SetConfig+0x92>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a15      	ldr	r2, [pc, #84]	; (800c898 <TIM_OC3_SetConfig+0xe4>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d113      	bne.n	800c86e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c84c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	011b      	lsls	r3, r3, #4
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	4313      	orrs	r3, r2
 800c860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	011b      	lsls	r3, r3, #4
 800c868:	693a      	ldr	r2, [r7, #16]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	621a      	str	r2, [r3, #32]
}
 800c888:	bf00      	nop
 800c88a:	371c      	adds	r7, #28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr
 800c894:	40010000 	.word	0x40010000
 800c898:	40010400 	.word	0x40010400

0800c89c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	021b      	lsls	r3, r3, #8
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	031b      	lsls	r3, r3, #12
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a12      	ldr	r2, [pc, #72]	; (800c940 <TIM_OC4_SetConfig+0xa4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d003      	beq.n	800c904 <TIM_OC4_SetConfig+0x68>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a11      	ldr	r2, [pc, #68]	; (800c944 <TIM_OC4_SetConfig+0xa8>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d109      	bne.n	800c918 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c90a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	695b      	ldr	r3, [r3, #20]
 800c910:	019b      	lsls	r3, r3, #6
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	4313      	orrs	r3, r2
 800c916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	621a      	str	r2, [r3, #32]
}
 800c932:	bf00      	nop
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	40010000 	.word	0x40010000
 800c944:	40010400 	.word	0x40010400

0800c948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f003 031f 	and.w	r3, r3, #31
 800c95a:	2201      	movs	r2, #1
 800c95c:	fa02 f303 	lsl.w	r3, r2, r3
 800c960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6a1a      	ldr	r2, [r3, #32]
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	43db      	mvns	r3, r3
 800c96a:	401a      	ands	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6a1a      	ldr	r2, [r3, #32]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f003 031f 	and.w	r3, r3, #31
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	fa01 f303 	lsl.w	r3, r1, r3
 800c980:	431a      	orrs	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	621a      	str	r2, [r3, #32]
}
 800c986:	bf00      	nop
 800c988:	371c      	adds	r7, #28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
	...

0800c994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d101      	bne.n	800c9ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e05a      	b.n	800ca62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2202      	movs	r2, #2
 800c9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a21      	ldr	r2, [pc, #132]	; (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d022      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f8:	d01d      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d018      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a1b      	ldr	r2, [pc, #108]	; (800ca78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d013      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a1a      	ldr	r2, [pc, #104]	; (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d00e      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a18      	ldr	r2, [pc, #96]	; (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d009      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a17      	ldr	r2, [pc, #92]	; (800ca84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d004      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a15      	ldr	r2, [pc, #84]	; (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d10c      	bne.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40000400 	.word	0x40000400
 800ca78:	40000800 	.word	0x40000800
 800ca7c:	40000c00 	.word	0x40000c00
 800ca80:	40010400 	.word	0x40010400
 800ca84:	40014000 	.word	0x40014000
 800ca88:	40001800 	.word	0x40001800

0800ca8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca96:	2300      	movs	r3, #0
 800ca98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d101      	bne.n	800caa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800caa4:	2302      	movs	r3, #2
 800caa6:	e03d      	b.n	800cb24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e03f      	b.n	800cbea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7f8 fe76 	bl	8005870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2224      	movs	r2, #36	; 0x24
 800cb88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68da      	ldr	r2, [r3, #12]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f829 	bl	800cbf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	691a      	ldr	r2, [r3, #16]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	695a      	ldr	r2, [r3, #20]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68da      	ldr	r2, [r3, #12]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2220      	movs	r2, #32
 800cbdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	b085      	sub	sp, #20
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68da      	ldr	r2, [r3, #12]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	430a      	orrs	r2, r1
 800cc12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689a      	ldr	r2, [r3, #8]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	431a      	orrs	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cc36:	f023 030c 	bic.w	r3, r3, #12
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	6812      	ldr	r2, [r2, #0]
 800cc3e:	68f9      	ldr	r1, [r7, #12]
 800cc40:	430b      	orrs	r3, r1
 800cc42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	699a      	ldr	r2, [r3, #24]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc62:	f040 818b 	bne.w	800cf7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4ac1      	ldr	r2, [pc, #772]	; (800cf70 <UART_SetConfig+0x37c>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d005      	beq.n	800cc7c <UART_SetConfig+0x88>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4abf      	ldr	r2, [pc, #764]	; (800cf74 <UART_SetConfig+0x380>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	f040 80bd 	bne.w	800cdf6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc7c:	f7fc fbcc 	bl	8009418 <HAL_RCC_GetPCLK2Freq>
 800cc80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	461d      	mov	r5, r3
 800cc86:	f04f 0600 	mov.w	r6, #0
 800cc8a:	46a8      	mov	r8, r5
 800cc8c:	46b1      	mov	r9, r6
 800cc8e:	eb18 0308 	adds.w	r3, r8, r8
 800cc92:	eb49 0409 	adc.w	r4, r9, r9
 800cc96:	4698      	mov	r8, r3
 800cc98:	46a1      	mov	r9, r4
 800cc9a:	eb18 0805 	adds.w	r8, r8, r5
 800cc9e:	eb49 0906 	adc.w	r9, r9, r6
 800cca2:	f04f 0100 	mov.w	r1, #0
 800cca6:	f04f 0200 	mov.w	r2, #0
 800ccaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ccae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ccb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ccb6:	4688      	mov	r8, r1
 800ccb8:	4691      	mov	r9, r2
 800ccba:	eb18 0005 	adds.w	r0, r8, r5
 800ccbe:	eb49 0106 	adc.w	r1, r9, r6
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	461d      	mov	r5, r3
 800ccc8:	f04f 0600 	mov.w	r6, #0
 800cccc:	196b      	adds	r3, r5, r5
 800ccce:	eb46 0406 	adc.w	r4, r6, r6
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	4623      	mov	r3, r4
 800ccd6:	f7f3 ffef 	bl	8000cb8 <__aeabi_uldivmod>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	460c      	mov	r4, r1
 800ccde:	461a      	mov	r2, r3
 800cce0:	4ba5      	ldr	r3, [pc, #660]	; (800cf78 <UART_SetConfig+0x384>)
 800cce2:	fba3 2302 	umull	r2, r3, r3, r2
 800cce6:	095b      	lsrs	r3, r3, #5
 800cce8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	461d      	mov	r5, r3
 800ccf0:	f04f 0600 	mov.w	r6, #0
 800ccf4:	46a9      	mov	r9, r5
 800ccf6:	46b2      	mov	sl, r6
 800ccf8:	eb19 0309 	adds.w	r3, r9, r9
 800ccfc:	eb4a 040a 	adc.w	r4, sl, sl
 800cd00:	4699      	mov	r9, r3
 800cd02:	46a2      	mov	sl, r4
 800cd04:	eb19 0905 	adds.w	r9, r9, r5
 800cd08:	eb4a 0a06 	adc.w	sl, sl, r6
 800cd0c:	f04f 0100 	mov.w	r1, #0
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd20:	4689      	mov	r9, r1
 800cd22:	4692      	mov	sl, r2
 800cd24:	eb19 0005 	adds.w	r0, r9, r5
 800cd28:	eb4a 0106 	adc.w	r1, sl, r6
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	461d      	mov	r5, r3
 800cd32:	f04f 0600 	mov.w	r6, #0
 800cd36:	196b      	adds	r3, r5, r5
 800cd38:	eb46 0406 	adc.w	r4, r6, r6
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	4623      	mov	r3, r4
 800cd40:	f7f3 ffba 	bl	8000cb8 <__aeabi_uldivmod>
 800cd44:	4603      	mov	r3, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4b8b      	ldr	r3, [pc, #556]	; (800cf78 <UART_SetConfig+0x384>)
 800cd4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd50:	095b      	lsrs	r3, r3, #5
 800cd52:	2164      	movs	r1, #100	; 0x64
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	3332      	adds	r3, #50	; 0x32
 800cd5e:	4a86      	ldr	r2, [pc, #536]	; (800cf78 <UART_SetConfig+0x384>)
 800cd60:	fba2 2303 	umull	r2, r3, r2, r3
 800cd64:	095b      	lsrs	r3, r3, #5
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cd6c:	4498      	add	r8, r3
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	461d      	mov	r5, r3
 800cd72:	f04f 0600 	mov.w	r6, #0
 800cd76:	46a9      	mov	r9, r5
 800cd78:	46b2      	mov	sl, r6
 800cd7a:	eb19 0309 	adds.w	r3, r9, r9
 800cd7e:	eb4a 040a 	adc.w	r4, sl, sl
 800cd82:	4699      	mov	r9, r3
 800cd84:	46a2      	mov	sl, r4
 800cd86:	eb19 0905 	adds.w	r9, r9, r5
 800cd8a:	eb4a 0a06 	adc.w	sl, sl, r6
 800cd8e:	f04f 0100 	mov.w	r1, #0
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cda2:	4689      	mov	r9, r1
 800cda4:	4692      	mov	sl, r2
 800cda6:	eb19 0005 	adds.w	r0, r9, r5
 800cdaa:	eb4a 0106 	adc.w	r1, sl, r6
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	461d      	mov	r5, r3
 800cdb4:	f04f 0600 	mov.w	r6, #0
 800cdb8:	196b      	adds	r3, r5, r5
 800cdba:	eb46 0406 	adc.w	r4, r6, r6
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	4623      	mov	r3, r4
 800cdc2:	f7f3 ff79 	bl	8000cb8 <__aeabi_uldivmod>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	460c      	mov	r4, r1
 800cdca:	461a      	mov	r2, r3
 800cdcc:	4b6a      	ldr	r3, [pc, #424]	; (800cf78 <UART_SetConfig+0x384>)
 800cdce:	fba3 1302 	umull	r1, r3, r3, r2
 800cdd2:	095b      	lsrs	r3, r3, #5
 800cdd4:	2164      	movs	r1, #100	; 0x64
 800cdd6:	fb01 f303 	mul.w	r3, r1, r3
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	3332      	adds	r3, #50	; 0x32
 800cde0:	4a65      	ldr	r2, [pc, #404]	; (800cf78 <UART_SetConfig+0x384>)
 800cde2:	fba2 2303 	umull	r2, r3, r2, r3
 800cde6:	095b      	lsrs	r3, r3, #5
 800cde8:	f003 0207 	and.w	r2, r3, #7
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4442      	add	r2, r8
 800cdf2:	609a      	str	r2, [r3, #8]
 800cdf4:	e26f      	b.n	800d2d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cdf6:	f7fc fafb 	bl	80093f0 <HAL_RCC_GetPCLK1Freq>
 800cdfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	461d      	mov	r5, r3
 800ce00:	f04f 0600 	mov.w	r6, #0
 800ce04:	46a8      	mov	r8, r5
 800ce06:	46b1      	mov	r9, r6
 800ce08:	eb18 0308 	adds.w	r3, r8, r8
 800ce0c:	eb49 0409 	adc.w	r4, r9, r9
 800ce10:	4698      	mov	r8, r3
 800ce12:	46a1      	mov	r9, r4
 800ce14:	eb18 0805 	adds.w	r8, r8, r5
 800ce18:	eb49 0906 	adc.w	r9, r9, r6
 800ce1c:	f04f 0100 	mov.w	r1, #0
 800ce20:	f04f 0200 	mov.w	r2, #0
 800ce24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ce28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ce2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ce30:	4688      	mov	r8, r1
 800ce32:	4691      	mov	r9, r2
 800ce34:	eb18 0005 	adds.w	r0, r8, r5
 800ce38:	eb49 0106 	adc.w	r1, r9, r6
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	461d      	mov	r5, r3
 800ce42:	f04f 0600 	mov.w	r6, #0
 800ce46:	196b      	adds	r3, r5, r5
 800ce48:	eb46 0406 	adc.w	r4, r6, r6
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	4623      	mov	r3, r4
 800ce50:	f7f3 ff32 	bl	8000cb8 <__aeabi_uldivmod>
 800ce54:	4603      	mov	r3, r0
 800ce56:	460c      	mov	r4, r1
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4b47      	ldr	r3, [pc, #284]	; (800cf78 <UART_SetConfig+0x384>)
 800ce5c:	fba3 2302 	umull	r2, r3, r3, r2
 800ce60:	095b      	lsrs	r3, r3, #5
 800ce62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	461d      	mov	r5, r3
 800ce6a:	f04f 0600 	mov.w	r6, #0
 800ce6e:	46a9      	mov	r9, r5
 800ce70:	46b2      	mov	sl, r6
 800ce72:	eb19 0309 	adds.w	r3, r9, r9
 800ce76:	eb4a 040a 	adc.w	r4, sl, sl
 800ce7a:	4699      	mov	r9, r3
 800ce7c:	46a2      	mov	sl, r4
 800ce7e:	eb19 0905 	adds.w	r9, r9, r5
 800ce82:	eb4a 0a06 	adc.w	sl, sl, r6
 800ce86:	f04f 0100 	mov.w	r1, #0
 800ce8a:	f04f 0200 	mov.w	r2, #0
 800ce8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ce96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ce9a:	4689      	mov	r9, r1
 800ce9c:	4692      	mov	sl, r2
 800ce9e:	eb19 0005 	adds.w	r0, r9, r5
 800cea2:	eb4a 0106 	adc.w	r1, sl, r6
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	461d      	mov	r5, r3
 800ceac:	f04f 0600 	mov.w	r6, #0
 800ceb0:	196b      	adds	r3, r5, r5
 800ceb2:	eb46 0406 	adc.w	r4, r6, r6
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	4623      	mov	r3, r4
 800ceba:	f7f3 fefd 	bl	8000cb8 <__aeabi_uldivmod>
 800cebe:	4603      	mov	r3, r0
 800cec0:	460c      	mov	r4, r1
 800cec2:	461a      	mov	r2, r3
 800cec4:	4b2c      	ldr	r3, [pc, #176]	; (800cf78 <UART_SetConfig+0x384>)
 800cec6:	fba3 1302 	umull	r1, r3, r3, r2
 800ceca:	095b      	lsrs	r3, r3, #5
 800cecc:	2164      	movs	r1, #100	; 0x64
 800cece:	fb01 f303 	mul.w	r3, r1, r3
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	00db      	lsls	r3, r3, #3
 800ced6:	3332      	adds	r3, #50	; 0x32
 800ced8:	4a27      	ldr	r2, [pc, #156]	; (800cf78 <UART_SetConfig+0x384>)
 800ceda:	fba2 2303 	umull	r2, r3, r2, r3
 800cede:	095b      	lsrs	r3, r3, #5
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cee6:	4498      	add	r8, r3
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	461d      	mov	r5, r3
 800ceec:	f04f 0600 	mov.w	r6, #0
 800cef0:	46a9      	mov	r9, r5
 800cef2:	46b2      	mov	sl, r6
 800cef4:	eb19 0309 	adds.w	r3, r9, r9
 800cef8:	eb4a 040a 	adc.w	r4, sl, sl
 800cefc:	4699      	mov	r9, r3
 800cefe:	46a2      	mov	sl, r4
 800cf00:	eb19 0905 	adds.w	r9, r9, r5
 800cf04:	eb4a 0a06 	adc.w	sl, sl, r6
 800cf08:	f04f 0100 	mov.w	r1, #0
 800cf0c:	f04f 0200 	mov.w	r2, #0
 800cf10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf1c:	4689      	mov	r9, r1
 800cf1e:	4692      	mov	sl, r2
 800cf20:	eb19 0005 	adds.w	r0, r9, r5
 800cf24:	eb4a 0106 	adc.w	r1, sl, r6
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	461d      	mov	r5, r3
 800cf2e:	f04f 0600 	mov.w	r6, #0
 800cf32:	196b      	adds	r3, r5, r5
 800cf34:	eb46 0406 	adc.w	r4, r6, r6
 800cf38:	461a      	mov	r2, r3
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	f7f3 febc 	bl	8000cb8 <__aeabi_uldivmod>
 800cf40:	4603      	mov	r3, r0
 800cf42:	460c      	mov	r4, r1
 800cf44:	461a      	mov	r2, r3
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <UART_SetConfig+0x384>)
 800cf48:	fba3 1302 	umull	r1, r3, r3, r2
 800cf4c:	095b      	lsrs	r3, r3, #5
 800cf4e:	2164      	movs	r1, #100	; 0x64
 800cf50:	fb01 f303 	mul.w	r3, r1, r3
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	3332      	adds	r3, #50	; 0x32
 800cf5a:	4a07      	ldr	r2, [pc, #28]	; (800cf78 <UART_SetConfig+0x384>)
 800cf5c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf60:	095b      	lsrs	r3, r3, #5
 800cf62:	f003 0207 	and.w	r2, r3, #7
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4442      	add	r2, r8
 800cf6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cf6e:	e1b2      	b.n	800d2d6 <UART_SetConfig+0x6e2>
 800cf70:	40011000 	.word	0x40011000
 800cf74:	40011400 	.word	0x40011400
 800cf78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4ad7      	ldr	r2, [pc, #860]	; (800d2e0 <UART_SetConfig+0x6ec>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d005      	beq.n	800cf92 <UART_SetConfig+0x39e>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4ad6      	ldr	r2, [pc, #856]	; (800d2e4 <UART_SetConfig+0x6f0>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	f040 80d1 	bne.w	800d134 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf92:	f7fc fa41 	bl	8009418 <HAL_RCC_GetPCLK2Freq>
 800cf96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	469a      	mov	sl, r3
 800cf9c:	f04f 0b00 	mov.w	fp, #0
 800cfa0:	46d0      	mov	r8, sl
 800cfa2:	46d9      	mov	r9, fp
 800cfa4:	eb18 0308 	adds.w	r3, r8, r8
 800cfa8:	eb49 0409 	adc.w	r4, r9, r9
 800cfac:	4698      	mov	r8, r3
 800cfae:	46a1      	mov	r9, r4
 800cfb0:	eb18 080a 	adds.w	r8, r8, sl
 800cfb4:	eb49 090b 	adc.w	r9, r9, fp
 800cfb8:	f04f 0100 	mov.w	r1, #0
 800cfbc:	f04f 0200 	mov.w	r2, #0
 800cfc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cfc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cfc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cfcc:	4688      	mov	r8, r1
 800cfce:	4691      	mov	r9, r2
 800cfd0:	eb1a 0508 	adds.w	r5, sl, r8
 800cfd4:	eb4b 0609 	adc.w	r6, fp, r9
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	f04f 0300 	mov.w	r3, #0
 800cfe6:	f04f 0400 	mov.w	r4, #0
 800cfea:	0094      	lsls	r4, r2, #2
 800cfec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cff0:	008b      	lsls	r3, r1, #2
 800cff2:	461a      	mov	r2, r3
 800cff4:	4623      	mov	r3, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	4631      	mov	r1, r6
 800cffa:	f7f3 fe5d 	bl	8000cb8 <__aeabi_uldivmod>
 800cffe:	4603      	mov	r3, r0
 800d000:	460c      	mov	r4, r1
 800d002:	461a      	mov	r2, r3
 800d004:	4bb8      	ldr	r3, [pc, #736]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d006:	fba3 2302 	umull	r2, r3, r3, r2
 800d00a:	095b      	lsrs	r3, r3, #5
 800d00c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	469b      	mov	fp, r3
 800d014:	f04f 0c00 	mov.w	ip, #0
 800d018:	46d9      	mov	r9, fp
 800d01a:	46e2      	mov	sl, ip
 800d01c:	eb19 0309 	adds.w	r3, r9, r9
 800d020:	eb4a 040a 	adc.w	r4, sl, sl
 800d024:	4699      	mov	r9, r3
 800d026:	46a2      	mov	sl, r4
 800d028:	eb19 090b 	adds.w	r9, r9, fp
 800d02c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d030:	f04f 0100 	mov.w	r1, #0
 800d034:	f04f 0200 	mov.w	r2, #0
 800d038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d03c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d040:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d044:	4689      	mov	r9, r1
 800d046:	4692      	mov	sl, r2
 800d048:	eb1b 0509 	adds.w	r5, fp, r9
 800d04c:	eb4c 060a 	adc.w	r6, ip, sl
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	4619      	mov	r1, r3
 800d056:	f04f 0200 	mov.w	r2, #0
 800d05a:	f04f 0300 	mov.w	r3, #0
 800d05e:	f04f 0400 	mov.w	r4, #0
 800d062:	0094      	lsls	r4, r2, #2
 800d064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d068:	008b      	lsls	r3, r1, #2
 800d06a:	461a      	mov	r2, r3
 800d06c:	4623      	mov	r3, r4
 800d06e:	4628      	mov	r0, r5
 800d070:	4631      	mov	r1, r6
 800d072:	f7f3 fe21 	bl	8000cb8 <__aeabi_uldivmod>
 800d076:	4603      	mov	r3, r0
 800d078:	460c      	mov	r4, r1
 800d07a:	461a      	mov	r2, r3
 800d07c:	4b9a      	ldr	r3, [pc, #616]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d07e:	fba3 1302 	umull	r1, r3, r3, r2
 800d082:	095b      	lsrs	r3, r3, #5
 800d084:	2164      	movs	r1, #100	; 0x64
 800d086:	fb01 f303 	mul.w	r3, r1, r3
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	011b      	lsls	r3, r3, #4
 800d08e:	3332      	adds	r3, #50	; 0x32
 800d090:	4a95      	ldr	r2, [pc, #596]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d092:	fba2 2303 	umull	r2, r3, r2, r3
 800d096:	095b      	lsrs	r3, r3, #5
 800d098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d09c:	4498      	add	r8, r3
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	469b      	mov	fp, r3
 800d0a2:	f04f 0c00 	mov.w	ip, #0
 800d0a6:	46d9      	mov	r9, fp
 800d0a8:	46e2      	mov	sl, ip
 800d0aa:	eb19 0309 	adds.w	r3, r9, r9
 800d0ae:	eb4a 040a 	adc.w	r4, sl, sl
 800d0b2:	4699      	mov	r9, r3
 800d0b4:	46a2      	mov	sl, r4
 800d0b6:	eb19 090b 	adds.w	r9, r9, fp
 800d0ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d0be:	f04f 0100 	mov.w	r1, #0
 800d0c2:	f04f 0200 	mov.w	r2, #0
 800d0c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d0ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d0d2:	4689      	mov	r9, r1
 800d0d4:	4692      	mov	sl, r2
 800d0d6:	eb1b 0509 	adds.w	r5, fp, r9
 800d0da:	eb4c 060a 	adc.w	r6, ip, sl
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	f04f 0200 	mov.w	r2, #0
 800d0e8:	f04f 0300 	mov.w	r3, #0
 800d0ec:	f04f 0400 	mov.w	r4, #0
 800d0f0:	0094      	lsls	r4, r2, #2
 800d0f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d0f6:	008b      	lsls	r3, r1, #2
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4623      	mov	r3, r4
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	4631      	mov	r1, r6
 800d100:	f7f3 fdda 	bl	8000cb8 <__aeabi_uldivmod>
 800d104:	4603      	mov	r3, r0
 800d106:	460c      	mov	r4, r1
 800d108:	461a      	mov	r2, r3
 800d10a:	4b77      	ldr	r3, [pc, #476]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d10c:	fba3 1302 	umull	r1, r3, r3, r2
 800d110:	095b      	lsrs	r3, r3, #5
 800d112:	2164      	movs	r1, #100	; 0x64
 800d114:	fb01 f303 	mul.w	r3, r1, r3
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	3332      	adds	r3, #50	; 0x32
 800d11e:	4a72      	ldr	r2, [pc, #456]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d120:	fba2 2303 	umull	r2, r3, r2, r3
 800d124:	095b      	lsrs	r3, r3, #5
 800d126:	f003 020f 	and.w	r2, r3, #15
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4442      	add	r2, r8
 800d130:	609a      	str	r2, [r3, #8]
 800d132:	e0d0      	b.n	800d2d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d134:	f7fc f95c 	bl	80093f0 <HAL_RCC_GetPCLK1Freq>
 800d138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	469a      	mov	sl, r3
 800d13e:	f04f 0b00 	mov.w	fp, #0
 800d142:	46d0      	mov	r8, sl
 800d144:	46d9      	mov	r9, fp
 800d146:	eb18 0308 	adds.w	r3, r8, r8
 800d14a:	eb49 0409 	adc.w	r4, r9, r9
 800d14e:	4698      	mov	r8, r3
 800d150:	46a1      	mov	r9, r4
 800d152:	eb18 080a 	adds.w	r8, r8, sl
 800d156:	eb49 090b 	adc.w	r9, r9, fp
 800d15a:	f04f 0100 	mov.w	r1, #0
 800d15e:	f04f 0200 	mov.w	r2, #0
 800d162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d16a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d16e:	4688      	mov	r8, r1
 800d170:	4691      	mov	r9, r2
 800d172:	eb1a 0508 	adds.w	r5, sl, r8
 800d176:	eb4b 0609 	adc.w	r6, fp, r9
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	4619      	mov	r1, r3
 800d180:	f04f 0200 	mov.w	r2, #0
 800d184:	f04f 0300 	mov.w	r3, #0
 800d188:	f04f 0400 	mov.w	r4, #0
 800d18c:	0094      	lsls	r4, r2, #2
 800d18e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d192:	008b      	lsls	r3, r1, #2
 800d194:	461a      	mov	r2, r3
 800d196:	4623      	mov	r3, r4
 800d198:	4628      	mov	r0, r5
 800d19a:	4631      	mov	r1, r6
 800d19c:	f7f3 fd8c 	bl	8000cb8 <__aeabi_uldivmod>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	4b50      	ldr	r3, [pc, #320]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d1a8:	fba3 2302 	umull	r2, r3, r3, r2
 800d1ac:	095b      	lsrs	r3, r3, #5
 800d1ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	469b      	mov	fp, r3
 800d1b6:	f04f 0c00 	mov.w	ip, #0
 800d1ba:	46d9      	mov	r9, fp
 800d1bc:	46e2      	mov	sl, ip
 800d1be:	eb19 0309 	adds.w	r3, r9, r9
 800d1c2:	eb4a 040a 	adc.w	r4, sl, sl
 800d1c6:	4699      	mov	r9, r3
 800d1c8:	46a2      	mov	sl, r4
 800d1ca:	eb19 090b 	adds.w	r9, r9, fp
 800d1ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d1d2:	f04f 0100 	mov.w	r1, #0
 800d1d6:	f04f 0200 	mov.w	r2, #0
 800d1da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d1e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d1e6:	4689      	mov	r9, r1
 800d1e8:	4692      	mov	sl, r2
 800d1ea:	eb1b 0509 	adds.w	r5, fp, r9
 800d1ee:	eb4c 060a 	adc.w	r6, ip, sl
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	f04f 0200 	mov.w	r2, #0
 800d1fc:	f04f 0300 	mov.w	r3, #0
 800d200:	f04f 0400 	mov.w	r4, #0
 800d204:	0094      	lsls	r4, r2, #2
 800d206:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d20a:	008b      	lsls	r3, r1, #2
 800d20c:	461a      	mov	r2, r3
 800d20e:	4623      	mov	r3, r4
 800d210:	4628      	mov	r0, r5
 800d212:	4631      	mov	r1, r6
 800d214:	f7f3 fd50 	bl	8000cb8 <__aeabi_uldivmod>
 800d218:	4603      	mov	r3, r0
 800d21a:	460c      	mov	r4, r1
 800d21c:	461a      	mov	r2, r3
 800d21e:	4b32      	ldr	r3, [pc, #200]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d220:	fba3 1302 	umull	r1, r3, r3, r2
 800d224:	095b      	lsrs	r3, r3, #5
 800d226:	2164      	movs	r1, #100	; 0x64
 800d228:	fb01 f303 	mul.w	r3, r1, r3
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	3332      	adds	r3, #50	; 0x32
 800d232:	4a2d      	ldr	r2, [pc, #180]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d234:	fba2 2303 	umull	r2, r3, r2, r3
 800d238:	095b      	lsrs	r3, r3, #5
 800d23a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d23e:	4498      	add	r8, r3
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	469b      	mov	fp, r3
 800d244:	f04f 0c00 	mov.w	ip, #0
 800d248:	46d9      	mov	r9, fp
 800d24a:	46e2      	mov	sl, ip
 800d24c:	eb19 0309 	adds.w	r3, r9, r9
 800d250:	eb4a 040a 	adc.w	r4, sl, sl
 800d254:	4699      	mov	r9, r3
 800d256:	46a2      	mov	sl, r4
 800d258:	eb19 090b 	adds.w	r9, r9, fp
 800d25c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d260:	f04f 0100 	mov.w	r1, #0
 800d264:	f04f 0200 	mov.w	r2, #0
 800d268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d26c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d270:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d274:	4689      	mov	r9, r1
 800d276:	4692      	mov	sl, r2
 800d278:	eb1b 0509 	adds.w	r5, fp, r9
 800d27c:	eb4c 060a 	adc.w	r6, ip, sl
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	4619      	mov	r1, r3
 800d286:	f04f 0200 	mov.w	r2, #0
 800d28a:	f04f 0300 	mov.w	r3, #0
 800d28e:	f04f 0400 	mov.w	r4, #0
 800d292:	0094      	lsls	r4, r2, #2
 800d294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d298:	008b      	lsls	r3, r1, #2
 800d29a:	461a      	mov	r2, r3
 800d29c:	4623      	mov	r3, r4
 800d29e:	4628      	mov	r0, r5
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	f7f3 fd09 	bl	8000cb8 <__aeabi_uldivmod>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d2ae:	fba3 1302 	umull	r1, r3, r3, r2
 800d2b2:	095b      	lsrs	r3, r3, #5
 800d2b4:	2164      	movs	r1, #100	; 0x64
 800d2b6:	fb01 f303 	mul.w	r3, r1, r3
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	011b      	lsls	r3, r3, #4
 800d2be:	3332      	adds	r3, #50	; 0x32
 800d2c0:	4a09      	ldr	r2, [pc, #36]	; (800d2e8 <UART_SetConfig+0x6f4>)
 800d2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c6:	095b      	lsrs	r3, r3, #5
 800d2c8:	f003 020f 	and.w	r2, r3, #15
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4442      	add	r2, r8
 800d2d2:	609a      	str	r2, [r3, #8]
}
 800d2d4:	e7ff      	b.n	800d2d6 <UART_SetConfig+0x6e2>
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e0:	40011000 	.word	0x40011000
 800d2e4:	40011400 	.word	0x40011400
 800d2e8:	51eb851f 	.word	0x51eb851f

0800d2ec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	b480      	push	{r7}
 800d2f0:	b085      	sub	sp, #20
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	f107 001c 	add.w	r0, r7, #28
 800d2fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d302:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d304:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d306:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d30a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d30e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d312:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d316:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d326:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	431a      	orrs	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	b004      	add	sp, #16
 800d340:	4770      	bx	lr

0800d342 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d350:	4618      	mov	r0, r3
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d37e:	b580      	push	{r7, lr}
 800d380:	b082      	sub	sp, #8
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2203      	movs	r2, #3
 800d38a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d38c:	2002      	movs	r0, #2
 800d38e:	f7f9 fbc5 	bl	8006b1c <HAL_Delay>
  
  return HAL_OK;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 0303 	and.w	r3, r3, #3
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d3e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d3f2:	f023 030f 	bic.w	r3, r3, #15
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3714      	adds	r7, #20
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	b2db      	uxtb	r3, r3
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d426:	b480      	push	{r7}
 800d428:	b085      	sub	sp, #20
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	3314      	adds	r3, #20
 800d434:	461a      	mov	r2, r3
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	4413      	add	r3, r2
 800d43a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
}  
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	685a      	ldr	r2, [r3, #4]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d472:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d478:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d47e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	4313      	orrs	r3, r2
 800d484:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	431a      	orrs	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d496:	2300      	movs	r3, #0

}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d4b2:	2310      	movs	r3, #16
 800d4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4b6:	2340      	movs	r3, #64	; 0x40
 800d4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4c4:	f107 0308 	add.w	r3, r7, #8
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7ff ff74 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d4:	2110      	movs	r1, #16
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fa40 	bl	800d95c <SDMMC_GetCmdResp1>
 800d4dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4de:	69fb      	ldr	r3, [r7, #28]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3720      	adds	r7, #32
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4f6:	2311      	movs	r3, #17
 800d4f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4fa:	2340      	movs	r3, #64	; 0x40
 800d4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d506:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d508:	f107 0308 	add.w	r3, r7, #8
 800d50c:	4619      	mov	r1, r3
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff ff52 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d514:	f241 3288 	movw	r2, #5000	; 0x1388
 800d518:	2111      	movs	r1, #17
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fa1e 	bl	800d95c <SDMMC_GetCmdResp1>
 800d520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d522:	69fb      	ldr	r3, [r7, #28]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3720      	adds	r7, #32
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d53a:	2312      	movs	r3, #18
 800d53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d53e:	2340      	movs	r3, #64	; 0x40
 800d540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d542:	2300      	movs	r3, #0
 800d544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d54a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d54c:	f107 0308 	add.w	r3, r7, #8
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff ff30 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d558:	f241 3288 	movw	r2, #5000	; 0x1388
 800d55c:	2112      	movs	r1, #18
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f9fc 	bl	800d95c <SDMMC_GetCmdResp1>
 800d564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d566:	69fb      	ldr	r3, [r7, #28]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3720      	adds	r7, #32
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d57e:	2318      	movs	r3, #24
 800d580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d582:	2340      	movs	r3, #64	; 0x40
 800d584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d586:	2300      	movs	r3, #0
 800d588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d58e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d590:	f107 0308 	add.w	r3, r7, #8
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff ff0e 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d59c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5a0:	2118      	movs	r1, #24
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f9da 	bl	800d95c <SDMMC_GetCmdResp1>
 800d5a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3720      	adds	r7, #32
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b088      	sub	sp, #32
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5c2:	2319      	movs	r3, #25
 800d5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5c6:	2340      	movs	r3, #64	; 0x40
 800d5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5d4:	f107 0308 	add.w	r3, r7, #8
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff feec 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5e4:	2119      	movs	r1, #25
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f9b8 	bl	800d95c <SDMMC_GetCmdResp1>
 800d5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ee:	69fb      	ldr	r3, [r7, #28]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3720      	adds	r7, #32
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d600:	2300      	movs	r3, #0
 800d602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d604:	230c      	movs	r3, #12
 800d606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d608:	2340      	movs	r3, #64	; 0x40
 800d60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d60c:	2300      	movs	r3, #0
 800d60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d614:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d616:	f107 0308 	add.w	r3, r7, #8
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7ff fecb 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d622:	4a05      	ldr	r2, [pc, #20]	; (800d638 <SDMMC_CmdStopTransfer+0x40>)
 800d624:	210c      	movs	r1, #12
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 f998 	bl	800d95c <SDMMC_GetCmdResp1>
 800d62c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d62e:	69fb      	ldr	r3, [r7, #28]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	05f5e100 	.word	0x05f5e100

0800d63c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08a      	sub	sp, #40	; 0x28
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d64c:	2307      	movs	r3, #7
 800d64e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d650:	2340      	movs	r3, #64	; 0x40
 800d652:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d654:	2300      	movs	r3, #0
 800d656:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d65c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d65e:	f107 0310 	add.w	r3, r7, #16
 800d662:	4619      	mov	r1, r3
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7ff fea7 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d66a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d66e:	2107      	movs	r1, #7
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f000 f973 	bl	800d95c <SDMMC_GetCmdResp1>
 800d676:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3728      	adds	r7, #40	; 0x28
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b088      	sub	sp, #32
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d68e:	2300      	movs	r3, #0
 800d690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d692:	2300      	movs	r3, #0
 800d694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d696:	2300      	movs	r3, #0
 800d698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d69a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d69e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6a0:	f107 0308 	add.w	r3, r7, #8
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff fe86 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f92d 	bl	800d90c <SDMMC_GetCmdError>
 800d6b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6b4:	69fb      	ldr	r3, [r7, #28]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3720      	adds	r7, #32
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b088      	sub	sp, #32
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d6ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6cc:	2308      	movs	r3, #8
 800d6ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6d0:	2340      	movs	r3, #64	; 0x40
 800d6d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6de:	f107 0308 	add.w	r3, r7, #8
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff fe67 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fb16 	bl	800dd1c <SDMMC_GetCmdResp7>
 800d6f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b088      	sub	sp, #32
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d70a:	2337      	movs	r3, #55	; 0x37
 800d70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d71a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d71c:	f107 0308 	add.w	r3, r7, #8
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff fe48 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d728:	f241 3288 	movw	r2, #5000	; 0x1388
 800d72c:	2137      	movs	r1, #55	; 0x37
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f914 	bl	800d95c <SDMMC_GetCmdResp1>
 800d734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d736:	69fb      	ldr	r3, [r7, #28]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3720      	adds	r7, #32
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b088      	sub	sp, #32
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d756:	2329      	movs	r3, #41	; 0x29
 800d758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d75a:	2340      	movs	r3, #64	; 0x40
 800d75c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d75e:	2300      	movs	r3, #0
 800d760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d766:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d768:	f107 0308 	add.w	r3, r7, #8
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fe22 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 fa23 	bl	800dbc0 <SDMMC_GetCmdResp3>
 800d77a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d77c:	69fb      	ldr	r3, [r7, #28]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3720      	adds	r7, #32
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b088      	sub	sp, #32
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
 800d78e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d794:	2306      	movs	r3, #6
 800d796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d798:	2340      	movs	r3, #64	; 0x40
 800d79a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d79c:	2300      	movs	r3, #0
 800d79e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7a6:	f107 0308 	add.w	r3, r7, #8
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff fe03 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7b6:	2106      	movs	r1, #6
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f8cf 	bl	800d95c <SDMMC_GetCmdResp1>
 800d7be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b088      	sub	sp, #32
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d7d6:	2333      	movs	r3, #51	; 0x33
 800d7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7da:	2340      	movs	r3, #64	; 0x40
 800d7dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7e8:	f107 0308 	add.w	r3, r7, #8
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fde2 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7f8:	2133      	movs	r1, #51	; 0x33
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f8ae 	bl	800d95c <SDMMC_GetCmdResp1>
 800d800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d802:	69fb      	ldr	r3, [r7, #28]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3720      	adds	r7, #32
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b088      	sub	sp, #32
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d814:	2300      	movs	r3, #0
 800d816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d818:	2302      	movs	r3, #2
 800d81a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d81c:	23c0      	movs	r3, #192	; 0xc0
 800d81e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d820:	2300      	movs	r3, #0
 800d822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d82a:	f107 0308 	add.w	r3, r7, #8
 800d82e:	4619      	mov	r1, r3
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7ff fdc1 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f97c 	bl	800db34 <SDMMC_GetCmdResp2>
 800d83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d83e:	69fb      	ldr	r3, [r7, #28]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3720      	adds	r7, #32
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d856:	2309      	movs	r3, #9
 800d858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d85a:	23c0      	movs	r3, #192	; 0xc0
 800d85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d85e:	2300      	movs	r3, #0
 800d860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d866:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d868:	f107 0308 	add.w	r3, r7, #8
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff fda2 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f95d 	bl	800db34 <SDMMC_GetCmdResp2>
 800d87a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d87c:	69fb      	ldr	r3, [r7, #28]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3720      	adds	r7, #32
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b088      	sub	sp, #32
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d894:	2303      	movs	r3, #3
 800d896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d89c:	2300      	movs	r3, #0
 800d89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8a6:	f107 0308 	add.w	r3, r7, #8
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff fd83 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	2103      	movs	r1, #3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f9bc 	bl	800dc34 <SDMMC_GetCmdResp6>
 800d8bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8be:	69fb      	ldr	r3, [r7, #28]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d8d6:	230d      	movs	r3, #13
 800d8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8da:	2340      	movs	r3, #64	; 0x40
 800d8dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8e8:	f107 0308 	add.w	r3, r7, #8
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fd62 	bl	800d3b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f8:	210d      	movs	r1, #13
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f82e 	bl	800d95c <SDMMC_GetCmdResp1>
 800d900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d902:	69fb      	ldr	r3, [r7, #28]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d90c:	b490      	push	{r4, r7}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d914:	4b0f      	ldr	r3, [pc, #60]	; (800d954 <SDMMC_GetCmdError+0x48>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a0f      	ldr	r2, [pc, #60]	; (800d958 <SDMMC_GetCmdError+0x4c>)
 800d91a:	fba2 2303 	umull	r2, r3, r2, r3
 800d91e:	0a5b      	lsrs	r3, r3, #9
 800d920:	f241 3288 	movw	r2, #5000	; 0x1388
 800d924:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d928:	4623      	mov	r3, r4
 800d92a:	1e5c      	subs	r4, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d934:	e009      	b.n	800d94a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0f2      	beq.n	800d928 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	22c5      	movs	r2, #197	; 0xc5
 800d946:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bc90      	pop	{r4, r7}
 800d952:	4770      	bx	lr
 800d954:	20000000 	.word	0x20000000
 800d958:	10624dd3 	.word	0x10624dd3

0800d95c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d95c:	b590      	push	{r4, r7, lr}
 800d95e:	b087      	sub	sp, #28
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	460b      	mov	r3, r1
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d96a:	4b6f      	ldr	r3, [pc, #444]	; (800db28 <SDMMC_GetCmdResp1+0x1cc>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a6f      	ldr	r2, [pc, #444]	; (800db2c <SDMMC_GetCmdResp1+0x1d0>)
 800d970:	fba2 2303 	umull	r2, r3, r2, r3
 800d974:	0a5b      	lsrs	r3, r3, #9
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d97c:	4623      	mov	r3, r4
 800d97e:	1e5c      	subs	r4, r3, #1
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d988:	e0c9      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d996:	2b00      	cmp	r3, #0
 800d998:	d0f0      	beq.n	800d97c <SDMMC_GetCmdResp1+0x20>
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1eb      	bne.n	800d97c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2204      	movs	r2, #4
 800d9b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9b6:	2304      	movs	r3, #4
 800d9b8:	e0b1      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d004      	beq.n	800d9d0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e0a6      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	22c5      	movs	r2, #197	; 0xc5
 800d9d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f7ff fd18 	bl	800d40c <SDIO_GetCommandResponse>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	461a      	mov	r2, r3
 800d9e0:	7afb      	ldrb	r3, [r7, #11]
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d001      	beq.n	800d9ea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e099      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f7ff fd1a 	bl	800d426 <SDIO_GetResponse>
 800d9f2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	4b4e      	ldr	r3, [pc, #312]	; (800db30 <SDMMC_GetCmdResp1+0x1d4>)
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	e08d      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	da02      	bge.n	800da0e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da0c:	e087      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da18:	2340      	movs	r3, #64	; 0x40
 800da1a:	e080      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da26:	2380      	movs	r3, #128	; 0x80
 800da28:	e079      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da38:	e071      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da48:	e069      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da58:	e061      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da68:	e059      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da78:	e051      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da88:	e049      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800da98:	e041      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800daa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daa8:	e039      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dab8:	e031      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d002      	beq.n	800daca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dac8:	e029      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dad4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dad8:	e021      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dae8:	e019      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800daf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800daf8:	e011      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800db04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db08:	e009      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	f003 0308 	and.w	r3, r3, #8
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800db18:	e001      	b.n	800db1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db1e:	4618      	mov	r0, r3
 800db20:	371c      	adds	r7, #28
 800db22:	46bd      	mov	sp, r7
 800db24:	bd90      	pop	{r4, r7, pc}
 800db26:	bf00      	nop
 800db28:	20000000 	.word	0x20000000
 800db2c:	10624dd3 	.word	0x10624dd3
 800db30:	fdffe008 	.word	0xfdffe008

0800db34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800db34:	b490      	push	{r4, r7}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db3c:	4b1e      	ldr	r3, [pc, #120]	; (800dbb8 <SDMMC_GetCmdResp2+0x84>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a1e      	ldr	r2, [pc, #120]	; (800dbbc <SDMMC_GetCmdResp2+0x88>)
 800db42:	fba2 2303 	umull	r2, r3, r2, r3
 800db46:	0a5b      	lsrs	r3, r3, #9
 800db48:	f241 3288 	movw	r2, #5000	; 0x1388
 800db4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800db50:	4623      	mov	r3, r4
 800db52:	1e5c      	subs	r4, r3, #1
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db5c:	e026      	b.n	800dbac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0f0      	beq.n	800db50 <SDMMC_GetCmdResp2+0x1c>
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1eb      	bne.n	800db50 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7c:	f003 0304 	and.w	r3, r3, #4
 800db80:	2b00      	cmp	r3, #0
 800db82:	d004      	beq.n	800db8e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2204      	movs	r2, #4
 800db88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db8a:	2304      	movs	r3, #4
 800db8c:	e00e      	b.n	800dbac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b00      	cmp	r3, #0
 800db98:	d004      	beq.n	800dba4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e003      	b.n	800dbac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	22c5      	movs	r2, #197	; 0xc5
 800dba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bc90      	pop	{r4, r7}
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20000000 	.word	0x20000000
 800dbbc:	10624dd3 	.word	0x10624dd3

0800dbc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dbc0:	b490      	push	{r4, r7}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbc8:	4b18      	ldr	r3, [pc, #96]	; (800dc2c <SDMMC_GetCmdResp3+0x6c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a18      	ldr	r2, [pc, #96]	; (800dc30 <SDMMC_GetCmdResp3+0x70>)
 800dbce:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd2:	0a5b      	lsrs	r3, r3, #9
 800dbd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dbdc:	4623      	mov	r3, r4
 800dbde:	1e5c      	subs	r4, r3, #1
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d102      	bne.n	800dbea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbe8:	e01b      	b.n	800dc22 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d0f0      	beq.n	800dbdc <SDMMC_GetCmdResp3+0x1c>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1eb      	bne.n	800dbdc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d004      	beq.n	800dc1a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2204      	movs	r2, #4
 800dc14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc16:	2304      	movs	r3, #4
 800dc18:	e003      	b.n	800dc22 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	22c5      	movs	r2, #197	; 0xc5
 800dc1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bc90      	pop	{r4, r7}
 800dc2a:	4770      	bx	lr
 800dc2c:	20000000 	.word	0x20000000
 800dc30:	10624dd3 	.word	0x10624dd3

0800dc34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc42:	4b34      	ldr	r3, [pc, #208]	; (800dd14 <SDMMC_GetCmdResp6+0xe0>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a34      	ldr	r2, [pc, #208]	; (800dd18 <SDMMC_GetCmdResp6+0xe4>)
 800dc48:	fba2 2303 	umull	r2, r3, r2, r3
 800dc4c:	0a5b      	lsrs	r3, r3, #9
 800dc4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc52:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dc56:	4623      	mov	r3, r4
 800dc58:	1e5c      	subs	r4, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d102      	bne.n	800dc64 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc62:	e052      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc68:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d0f0      	beq.n	800dc56 <SDMMC_GetCmdResp6+0x22>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d1eb      	bne.n	800dc56 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d004      	beq.n	800dc94 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc90:	2304      	movs	r3, #4
 800dc92:	e03a      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2201      	movs	r2, #1
 800dca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e02f      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7ff fbae 	bl	800d40c <SDIO_GetCommandResponse>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	7afb      	ldrb	r3, [r7, #11]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d001      	beq.n	800dcbe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e025      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	22c5      	movs	r2, #197	; 0xc5
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff fbad 	bl	800d426 <SDIO_GetResponse>
 800dccc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	0c1b      	lsrs	r3, r3, #16
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e011      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcf4:	e009      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd04:	e001      	b.n	800dd0a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd90      	pop	{r4, r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000000 	.word	0x20000000
 800dd18:	10624dd3 	.word	0x10624dd3

0800dd1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dd1c:	b490      	push	{r4, r7}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd24:	4b21      	ldr	r3, [pc, #132]	; (800ddac <SDMMC_GetCmdResp7+0x90>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a21      	ldr	r2, [pc, #132]	; (800ddb0 <SDMMC_GetCmdResp7+0x94>)
 800dd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd2e:	0a5b      	lsrs	r3, r3, #9
 800dd30:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd38:	4623      	mov	r3, r4
 800dd3a:	1e5c      	subs	r4, r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d102      	bne.n	800dd46 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd44:	e02c      	b.n	800dda0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0f0      	beq.n	800dd38 <SDMMC_GetCmdResp7+0x1c>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1eb      	bne.n	800dd38 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd64:	f003 0304 	and.w	r3, r3, #4
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d004      	beq.n	800dd76 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2204      	movs	r2, #4
 800dd70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd72:	2304      	movs	r3, #4
 800dd74:	e014      	b.n	800dda0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7a:	f003 0301 	and.w	r3, r3, #1
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d004      	beq.n	800dd8c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2201      	movs	r2, #1
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e009      	b.n	800dda0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2240      	movs	r2, #64	; 0x40
 800dd9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dd9e:	2300      	movs	r3, #0
  
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bc90      	pop	{r4, r7}
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	20000000 	.word	0x20000000
 800ddb0:	10624dd3 	.word	0x10624dd3

0800ddb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ddb8:	4904      	ldr	r1, [pc, #16]	; (800ddcc <MX_FATFS_Init+0x18>)
 800ddba:	4805      	ldr	r0, [pc, #20]	; (800ddd0 <MX_FATFS_Init+0x1c>)
 800ddbc:	f003 fb9c 	bl	80114f8 <FATFS_LinkDriver>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	4b03      	ldr	r3, [pc, #12]	; (800ddd4 <MX_FATFS_Init+0x20>)
 800ddc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ddc8:	bf00      	nop
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	200393c8 	.word	0x200393c8
 800ddd0:	08017848 	.word	0x08017848
 800ddd4:	200393c4 	.word	0x200393c4

0800ddd8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dde2:	f000 f896 	bl	800df12 <BSP_SD_IsDetected>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d001      	beq.n	800ddf0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e012      	b.n	800de16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ddf0:	480b      	ldr	r0, [pc, #44]	; (800de20 <BSP_SD_Init+0x48>)
 800ddf2:	f7fb ffa5 	bl	8009d40 <HAL_SD_Init>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d109      	bne.n	800de14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800de00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800de04:	4806      	ldr	r0, [pc, #24]	; (800de20 <BSP_SD_Init+0x48>)
 800de06:	f7fc fd4f 	bl	800a8a8 <HAL_SD_ConfigWideBusOperation>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800de14:	79fb      	ldrb	r3, [r7, #7]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	200391c0 	.word	0x200391c0

0800de24 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	68ba      	ldr	r2, [r7, #8]
 800de38:	68f9      	ldr	r1, [r7, #12]
 800de3a:	4806      	ldr	r0, [pc, #24]	; (800de54 <BSP_SD_ReadBlocks_DMA+0x30>)
 800de3c:	f7fc f810 	bl	8009e60 <HAL_SD_ReadBlocks_DMA>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	200391c0 	.word	0x200391c0

0800de58 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	68f9      	ldr	r1, [r7, #12]
 800de6e:	4806      	ldr	r0, [pc, #24]	; (800de88 <BSP_SD_WriteBlocks_DMA+0x30>)
 800de70:	f7fc f8de 	bl	800a030 <HAL_SD_WriteBlocks_DMA>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3718      	adds	r7, #24
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	200391c0 	.word	0x200391c0

0800de8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800de90:	4805      	ldr	r0, [pc, #20]	; (800dea8 <BSP_SD_GetCardState+0x1c>)
 800de92:	f7fc fd85 	bl	800a9a0 <HAL_SD_GetCardState>
 800de96:	4603      	mov	r3, r0
 800de98:	2b04      	cmp	r3, #4
 800de9a:	bf14      	ite	ne
 800de9c:	2301      	movne	r3, #1
 800de9e:	2300      	moveq	r3, #0
 800dea0:	b2db      	uxtb	r3, r3
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	200391c0 	.word	0x200391c0

0800deac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	4803      	ldr	r0, [pc, #12]	; (800dec4 <BSP_SD_GetCardInfo+0x18>)
 800deb8:	f7fc fcca 	bl	800a850 <HAL_SD_GetCardInfo>
}
 800debc:	bf00      	nop
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	200391c0 	.word	0x200391c0

0800dec8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ded0:	f000 f818 	bl	800df04 <BSP_SD_AbortCallback>
}
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dee4:	f000 f9a8 	bl	800e238 <BSP_SD_WriteCpltCallback>
}
 800dee8:	bf00      	nop
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800def8:	f000 f9aa 	bl	800e250 <BSP_SD_ReadCpltCallback>
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800df04:	b480      	push	{r7}
 800df06:	af00      	add	r7, sp, #0

}
 800df08:	bf00      	nop
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b082      	sub	sp, #8
 800df16:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800df18:	2301      	movs	r3, #1
 800df1a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800df1c:	f000 f80c 	bl	800df38 <BSP_PlatformIsDetected>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800df26:	2300      	movs	r3, #0
 800df28:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800df2a:	79fb      	ldrb	r3, [r7, #7]
 800df2c:	b2db      	uxtb	r3, r3
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800df3e:	2301      	movs	r3, #1
 800df40:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800df42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800df46:	4806      	ldr	r0, [pc, #24]	; (800df60 <BSP_PlatformIsDetected+0x28>)
 800df48:	f7fa f866 	bl	8008018 <HAL_GPIO_ReadPin>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800df52:	2300      	movs	r3, #0
 800df54:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800df56:	79fb      	ldrb	r3, [r7, #7]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	40020000 	.word	0x40020000

0800df64 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800df6c:	f7f8 fdca 	bl	8006b04 <HAL_GetTick>
 800df70:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800df72:	e006      	b.n	800df82 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df74:	f7ff ff8a 	bl	800de8c <BSP_SD_GetCardState>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	e009      	b.n	800df96 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800df82:	f7f8 fdbf 	bl	8006b04 <HAL_GetTick>
 800df86:	4602      	mov	r2, r0
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d8f0      	bhi.n	800df74 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800df92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
	...

0800dfa0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dfaa:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <SD_CheckStatus+0x38>)
 800dfac:	2201      	movs	r2, #1
 800dfae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dfb0:	f7ff ff6c 	bl	800de8c <BSP_SD_GetCardState>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d107      	bne.n	800dfca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dfba:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <SD_CheckStatus+0x38>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	f023 0301 	bic.w	r3, r3, #1
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	4b04      	ldr	r3, [pc, #16]	; (800dfd8 <SD_CheckStatus+0x38>)
 800dfc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dfca:	4b03      	ldr	r3, [pc, #12]	; (800dfd8 <SD_CheckStatus+0x38>)
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	b2db      	uxtb	r3, r3
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	20000009 	.word	0x20000009

0800dfdc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dfe6:	f7ff fef7 	bl	800ddd8 <BSP_SD_Init>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d107      	bne.n	800e000 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff ffd4 	bl	800dfa0 <SD_CheckStatus>
 800dff8:	4603      	mov	r3, r0
 800dffa:	461a      	mov	r2, r3
 800dffc:	4b04      	ldr	r3, [pc, #16]	; (800e010 <SD_initialize+0x34>)
 800dffe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e000:	4b03      	ldr	r3, [pc, #12]	; (800e010 <SD_initialize+0x34>)
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	b2db      	uxtb	r3, r3
}
 800e006:	4618      	mov	r0, r3
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	20000009 	.word	0x20000009

0800e014 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4603      	mov	r3, r0
 800e01c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e01e:	79fb      	ldrb	r3, [r7, #7]
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff ffbd 	bl	800dfa0 <SD_CheckStatus>
 800e026:	4603      	mov	r3, r0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	607a      	str	r2, [r7, #4]
 800e03a:	603b      	str	r3, [r7, #0]
 800e03c:	4603      	mov	r3, r0
 800e03e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e044:	f247 5030 	movw	r0, #30000	; 0x7530
 800e048:	f7ff ff8c 	bl	800df64 <SD_CheckStatusWithTimeout>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	da01      	bge.n	800e056 <SD_read+0x26>
  {
    return res;
 800e052:	7dfb      	ldrb	r3, [r7, #23]
 800e054:	e03b      	b.n	800e0ce <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	68b8      	ldr	r0, [r7, #8]
 800e05c:	f7ff fee2 	bl	800de24 <BSP_SD_ReadBlocks_DMA>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d132      	bne.n	800e0cc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e066:	4b1c      	ldr	r3, [pc, #112]	; (800e0d8 <SD_read+0xa8>)
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e06c:	f7f8 fd4a 	bl	8006b04 <HAL_GetTick>
 800e070:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e072:	bf00      	nop
 800e074:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <SD_read+0xa8>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d108      	bne.n	800e08e <SD_read+0x5e>
 800e07c:	f7f8 fd42 	bl	8006b04 <HAL_GetTick>
 800e080:	4602      	mov	r2, r0
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	f247 522f 	movw	r2, #29999	; 0x752f
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d9f2      	bls.n	800e074 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e08e:	4b12      	ldr	r3, [pc, #72]	; (800e0d8 <SD_read+0xa8>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	75fb      	strb	r3, [r7, #23]
 800e09a:	e017      	b.n	800e0cc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e09c:	4b0e      	ldr	r3, [pc, #56]	; (800e0d8 <SD_read+0xa8>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e0a2:	f7f8 fd2f 	bl	8006b04 <HAL_GetTick>
 800e0a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e0a8:	e007      	b.n	800e0ba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0aa:	f7ff feef 	bl	800de8c <BSP_SD_GetCardState>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d102      	bne.n	800e0ba <SD_read+0x8a>
          {
            res = RES_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e0b8:	e008      	b.n	800e0cc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e0ba:	f7f8 fd23 	bl	8006b04 <HAL_GetTick>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	f247 522f 	movw	r2, #29999	; 0x752f
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d9ee      	bls.n	800e0aa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3718      	adds	r7, #24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20036a5c 	.word	0x20036a5c

0800e0dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b086      	sub	sp, #24
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60b9      	str	r1, [r7, #8]
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	603b      	str	r3, [r7, #0]
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e0f0:	4b24      	ldr	r3, [pc, #144]	; (800e184 <SD_write+0xa8>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e0f6:	f247 5030 	movw	r0, #30000	; 0x7530
 800e0fa:	f7ff ff33 	bl	800df64 <SD_CheckStatusWithTimeout>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	da01      	bge.n	800e108 <SD_write+0x2c>
  {
    return res;
 800e104:	7dfb      	ldrb	r3, [r7, #23]
 800e106:	e038      	b.n	800e17a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e108:	683a      	ldr	r2, [r7, #0]
 800e10a:	6879      	ldr	r1, [r7, #4]
 800e10c:	68b8      	ldr	r0, [r7, #8]
 800e10e:	f7ff fea3 	bl	800de58 <BSP_SD_WriteBlocks_DMA>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d12f      	bne.n	800e178 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e118:	f7f8 fcf4 	bl	8006b04 <HAL_GetTick>
 800e11c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e11e:	bf00      	nop
 800e120:	4b18      	ldr	r3, [pc, #96]	; (800e184 <SD_write+0xa8>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d108      	bne.n	800e13a <SD_write+0x5e>
 800e128:	f7f8 fcec 	bl	8006b04 <HAL_GetTick>
 800e12c:	4602      	mov	r2, r0
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	f247 522f 	movw	r2, #29999	; 0x752f
 800e136:	4293      	cmp	r3, r2
 800e138:	d9f2      	bls.n	800e120 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e13a:	4b12      	ldr	r3, [pc, #72]	; (800e184 <SD_write+0xa8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	75fb      	strb	r3, [r7, #23]
 800e146:	e017      	b.n	800e178 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <SD_write+0xa8>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e14e:	f7f8 fcd9 	bl	8006b04 <HAL_GetTick>
 800e152:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e154:	e007      	b.n	800e166 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e156:	f7ff fe99 	bl	800de8c <BSP_SD_GetCardState>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d102      	bne.n	800e166 <SD_write+0x8a>
          {
            res = RES_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	75fb      	strb	r3, [r7, #23]
            break;
 800e164:	e008      	b.n	800e178 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e166:	f7f8 fccd 	bl	8006b04 <HAL_GetTick>
 800e16a:	4602      	mov	r2, r0
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	f247 522f 	movw	r2, #29999	; 0x752f
 800e174:	4293      	cmp	r3, r2
 800e176:	d9ee      	bls.n	800e156 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e178:	7dfb      	ldrb	r3, [r7, #23]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	20036a58 	.word	0x20036a58

0800e188 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08c      	sub	sp, #48	; 0x30
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	603a      	str	r2, [r7, #0]
 800e192:	71fb      	strb	r3, [r7, #7]
 800e194:	460b      	mov	r3, r1
 800e196:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e19e:	4b25      	ldr	r3, [pc, #148]	; (800e234 <SD_ioctl+0xac>)
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <SD_ioctl+0x28>
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e03c      	b.n	800e22a <SD_ioctl+0xa2>

  switch (cmd)
 800e1b0:	79bb      	ldrb	r3, [r7, #6]
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d834      	bhi.n	800e220 <SD_ioctl+0x98>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <SD_ioctl+0x34>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e1cd 	.word	0x0800e1cd
 800e1c0:	0800e1d5 	.word	0x0800e1d5
 800e1c4:	0800e1ed 	.word	0x0800e1ed
 800e1c8:	0800e207 	.word	0x0800e207
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e1d2:	e028      	b.n	800e226 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e1d4:	f107 030c 	add.w	r3, r7, #12
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fe67 	bl	800deac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e1ea:	e01c      	b.n	800e226 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e1ec:	f107 030c 	add.w	r3, r7, #12
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7ff fe5b 	bl	800deac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e1fe:	2300      	movs	r3, #0
 800e200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e204:	e00f      	b.n	800e226 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e206:	f107 030c 	add.w	r3, r7, #12
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff fe4e 	bl	800deac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	0a5a      	lsrs	r2, r3, #9
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e21e:	e002      	b.n	800e226 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e220:	2304      	movs	r3, #4
 800e222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3730      	adds	r7, #48	; 0x30
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	20000009 	.word	0x20000009

0800e238 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e238:	b480      	push	{r7}
 800e23a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e23c:	4b03      	ldr	r3, [pc, #12]	; (800e24c <BSP_SD_WriteCpltCallback+0x14>)
 800e23e:	2201      	movs	r2, #1
 800e240:	601a      	str	r2, [r3, #0]
}
 800e242:	bf00      	nop
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	20036a58 	.word	0x20036a58

0800e250 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e250:	b480      	push	{r7}
 800e252:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e254:	4b03      	ldr	r3, [pc, #12]	; (800e264 <BSP_SD_ReadCpltCallback+0x14>)
 800e256:	2201      	movs	r2, #1
 800e258:	601a      	str	r2, [r3, #0]
}
 800e25a:	bf00      	nop
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	20036a5c 	.word	0x20036a5c

0800e268 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e272:	79fb      	ldrb	r3, [r7, #7]
 800e274:	4a08      	ldr	r2, [pc, #32]	; (800e298 <disk_status+0x30>)
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	79fa      	ldrb	r2, [r7, #7]
 800e280:	4905      	ldr	r1, [pc, #20]	; (800e298 <disk_status+0x30>)
 800e282:	440a      	add	r2, r1
 800e284:	7a12      	ldrb	r2, [r2, #8]
 800e286:	4610      	mov	r0, r2
 800e288:	4798      	blx	r3
 800e28a:	4603      	mov	r3, r0
 800e28c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20036a88 	.word	0x20036a88

0800e29c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	4a0d      	ldr	r2, [pc, #52]	; (800e2e4 <disk_initialize+0x48>)
 800e2ae:	5cd3      	ldrb	r3, [r2, r3]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d111      	bne.n	800e2d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e2b4:	79fb      	ldrb	r3, [r7, #7]
 800e2b6:	4a0b      	ldr	r2, [pc, #44]	; (800e2e4 <disk_initialize+0x48>)
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e2bc:	79fb      	ldrb	r3, [r7, #7]
 800e2be:	4a09      	ldr	r2, [pc, #36]	; (800e2e4 <disk_initialize+0x48>)
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4413      	add	r3, r2
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	79fa      	ldrb	r2, [r7, #7]
 800e2ca:	4906      	ldr	r1, [pc, #24]	; (800e2e4 <disk_initialize+0x48>)
 800e2cc:	440a      	add	r2, r1
 800e2ce:	7a12      	ldrb	r2, [r2, #8]
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	4798      	blx	r3
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20036a88 	.word	0x20036a88

0800e2e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e2e8:	b590      	push	{r4, r7, lr}
 800e2ea:	b087      	sub	sp, #28
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	607a      	str	r2, [r7, #4]
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	4a0a      	ldr	r2, [pc, #40]	; (800e324 <disk_read+0x3c>)
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	4413      	add	r3, r2
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	689c      	ldr	r4, [r3, #8]
 800e304:	7bfb      	ldrb	r3, [r7, #15]
 800e306:	4a07      	ldr	r2, [pc, #28]	; (800e324 <disk_read+0x3c>)
 800e308:	4413      	add	r3, r2
 800e30a:	7a18      	ldrb	r0, [r3, #8]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	68b9      	ldr	r1, [r7, #8]
 800e312:	47a0      	blx	r4
 800e314:	4603      	mov	r3, r0
 800e316:	75fb      	strb	r3, [r7, #23]
  return res;
 800e318:	7dfb      	ldrb	r3, [r7, #23]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	371c      	adds	r7, #28
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd90      	pop	{r4, r7, pc}
 800e322:	bf00      	nop
 800e324:	20036a88 	.word	0x20036a88

0800e328 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e328:	b590      	push	{r4, r7, lr}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60b9      	str	r1, [r7, #8]
 800e330:	607a      	str	r2, [r7, #4]
 800e332:	603b      	str	r3, [r7, #0]
 800e334:	4603      	mov	r3, r0
 800e336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e338:	7bfb      	ldrb	r3, [r7, #15]
 800e33a:	4a0a      	ldr	r2, [pc, #40]	; (800e364 <disk_write+0x3c>)
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	68dc      	ldr	r4, [r3, #12]
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	4a07      	ldr	r2, [pc, #28]	; (800e364 <disk_write+0x3c>)
 800e348:	4413      	add	r3, r2
 800e34a:	7a18      	ldrb	r0, [r3, #8]
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	68b9      	ldr	r1, [r7, #8]
 800e352:	47a0      	blx	r4
 800e354:	4603      	mov	r3, r0
 800e356:	75fb      	strb	r3, [r7, #23]
  return res;
 800e358:	7dfb      	ldrb	r3, [r7, #23]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	371c      	adds	r7, #28
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd90      	pop	{r4, r7, pc}
 800e362:	bf00      	nop
 800e364:	20036a88 	.word	0x20036a88

0800e368 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	603a      	str	r2, [r7, #0]
 800e372:	71fb      	strb	r3, [r7, #7]
 800e374:	460b      	mov	r3, r1
 800e376:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	4a09      	ldr	r2, [pc, #36]	; (800e3a0 <disk_ioctl+0x38>)
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4413      	add	r3, r2
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	79fa      	ldrb	r2, [r7, #7]
 800e386:	4906      	ldr	r1, [pc, #24]	; (800e3a0 <disk_ioctl+0x38>)
 800e388:	440a      	add	r2, r1
 800e38a:	7a10      	ldrb	r0, [r2, #8]
 800e38c:	79b9      	ldrb	r1, [r7, #6]
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	4798      	blx	r3
 800e392:	4603      	mov	r3, r0
 800e394:	73fb      	strb	r3, [r7, #15]
  return res;
 800e396:	7bfb      	ldrb	r3, [r7, #15]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20036a88 	.word	0x20036a88

0800e3a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e3b4:	89fb      	ldrh	r3, [r7, #14]
 800e3b6:	021b      	lsls	r3, r3, #8
 800e3b8:	b21a      	sxth	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	b21b      	sxth	r3, r3
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	b21b      	sxth	r3, r3
 800e3c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e3c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3303      	adds	r3, #3
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	021b      	lsls	r3, r3, #8
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	3202      	adds	r2, #2
 800e3ec:	7812      	ldrb	r2, [r2, #0]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	021b      	lsls	r3, r3, #8
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	3201      	adds	r2, #1
 800e3fa:	7812      	ldrb	r2, [r2, #0]
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	021b      	lsls	r3, r3, #8
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	7812      	ldrb	r2, [r2, #0]
 800e408:	4313      	orrs	r3, r2
 800e40a:	60fb      	str	r3, [r7, #12]
	return rv;
 800e40c:	68fb      	ldr	r3, [r7, #12]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e41a:	b480      	push	{r7}
 800e41c:	b083      	sub	sp, #12
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	460b      	mov	r3, r1
 800e424:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	887a      	ldrh	r2, [r7, #2]
 800e42e:	b2d2      	uxtb	r2, r2
 800e430:	701a      	strb	r2, [r3, #0]
 800e432:	887b      	ldrh	r3, [r7, #2]
 800e434:	0a1b      	lsrs	r3, r3, #8
 800e436:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	607a      	str	r2, [r7, #4]
 800e43e:	887a      	ldrh	r2, [r7, #2]
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	701a      	strb	r2, [r3, #0]
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	683a      	ldr	r2, [r7, #0]
 800e462:	b2d2      	uxtb	r2, r2
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	0a1b      	lsrs	r3, r3, #8
 800e46a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	1c5a      	adds	r2, r3, #1
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	b2d2      	uxtb	r2, r2
 800e476:	701a      	strb	r2, [r3, #0]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	0a1b      	lsrs	r3, r3, #8
 800e47c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	b2d2      	uxtb	r2, r2
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	0a1b      	lsrs	r3, r3, #8
 800e48e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	607a      	str	r2, [r7, #4]
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	b2d2      	uxtb	r2, r2
 800e49a:	701a      	strb	r2, [r3, #0]
}
 800e49c:	bf00      	nop
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e4a8:	b480      	push	{r7}
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00d      	beq.n	800e4de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	1c53      	adds	r3, r2, #1
 800e4c6:	613b      	str	r3, [r7, #16]
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	1c59      	adds	r1, r3, #1
 800e4cc:	6179      	str	r1, [r7, #20]
 800e4ce:	7812      	ldrb	r2, [r2, #0]
 800e4d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	607b      	str	r3, [r7, #4]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1f1      	bne.n	800e4c2 <mem_cpy+0x1a>
	}
}
 800e4de:	bf00      	nop
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e4ea:	b480      	push	{r7}
 800e4ec:	b087      	sub	sp, #28
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	60f8      	str	r0, [r7, #12]
 800e4f2:	60b9      	str	r1, [r7, #8]
 800e4f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	617a      	str	r2, [r7, #20]
 800e500:	68ba      	ldr	r2, [r7, #8]
 800e502:	b2d2      	uxtb	r2, r2
 800e504:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	3b01      	subs	r3, #1
 800e50a:	607b      	str	r3, [r7, #4]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1f3      	bne.n	800e4fa <mem_set+0x10>
}
 800e512:	bf00      	nop
 800e514:	371c      	adds	r7, #28
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e51e:	b480      	push	{r7}
 800e520:	b089      	sub	sp, #36	; 0x24
 800e522:	af00      	add	r7, sp, #0
 800e524:	60f8      	str	r0, [r7, #12]
 800e526:	60b9      	str	r1, [r7, #8]
 800e528:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	61fb      	str	r3, [r7, #28]
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	61fa      	str	r2, [r7, #28]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	4619      	mov	r1, r3
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	1c5a      	adds	r2, r3, #1
 800e544:	61ba      	str	r2, [r7, #24]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	1acb      	subs	r3, r1, r3
 800e54a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3b01      	subs	r3, #1
 800e550:	607b      	str	r3, [r7, #4]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <mem_cmp+0x40>
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0eb      	beq.n	800e536 <mem_cmp+0x18>

	return r;
 800e55e:	697b      	ldr	r3, [r7, #20]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3724      	adds	r7, #36	; 0x24
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e576:	e002      	b.n	800e57e <chk_chr+0x12>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3301      	adds	r3, #1
 800e57c:	607b      	str	r3, [r7, #4]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d005      	beq.n	800e592 <chk_chr+0x26>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	4293      	cmp	r3, r2
 800e590:	d1f2      	bne.n	800e578 <chk_chr+0xc>
	return *str;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	781b      	ldrb	r3, [r3, #0]
}
 800e596:	4618      	mov	r0, r3
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
	...

0800e5a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	60bb      	str	r3, [r7, #8]
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	60fb      	str	r3, [r7, #12]
 800e5b6:	e029      	b.n	800e60c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e5b8:	4a27      	ldr	r2, [pc, #156]	; (800e658 <chk_lock+0xb4>)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	011b      	lsls	r3, r3, #4
 800e5be:	4413      	add	r3, r2
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d01d      	beq.n	800e602 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e5c6:	4a24      	ldr	r2, [pc, #144]	; (800e658 <chk_lock+0xb4>)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	011b      	lsls	r3, r3, #4
 800e5cc:	4413      	add	r3, r2
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d116      	bne.n	800e606 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e5d8:	4a1f      	ldr	r2, [pc, #124]	; (800e658 <chk_lock+0xb4>)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	011b      	lsls	r3, r3, #4
 800e5de:	4413      	add	r3, r2
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d10c      	bne.n	800e606 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e5ec:	4a1a      	ldr	r2, [pc, #104]	; (800e658 <chk_lock+0xb4>)
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	011b      	lsls	r3, r3, #4
 800e5f2:	4413      	add	r3, r2
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d102      	bne.n	800e606 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e600:	e007      	b.n	800e612 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e602:	2301      	movs	r3, #1
 800e604:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	3301      	adds	r3, #1
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d9d2      	bls.n	800e5b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b02      	cmp	r3, #2
 800e616:	d109      	bne.n	800e62c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d102      	bne.n	800e624 <chk_lock+0x80>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b02      	cmp	r3, #2
 800e622:	d101      	bne.n	800e628 <chk_lock+0x84>
 800e624:	2300      	movs	r3, #0
 800e626:	e010      	b.n	800e64a <chk_lock+0xa6>
 800e628:	2312      	movs	r3, #18
 800e62a:	e00e      	b.n	800e64a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d108      	bne.n	800e644 <chk_lock+0xa0>
 800e632:	4a09      	ldr	r2, [pc, #36]	; (800e658 <chk_lock+0xb4>)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	4413      	add	r3, r2
 800e63a:	330c      	adds	r3, #12
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e642:	d101      	bne.n	800e648 <chk_lock+0xa4>
 800e644:	2310      	movs	r3, #16
 800e646:	e000      	b.n	800e64a <chk_lock+0xa6>
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	20036a68 	.word	0x20036a68

0800e65c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e662:	2300      	movs	r3, #0
 800e664:	607b      	str	r3, [r7, #4]
 800e666:	e002      	b.n	800e66e <enq_lock+0x12>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3301      	adds	r3, #1
 800e66c:	607b      	str	r3, [r7, #4]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b01      	cmp	r3, #1
 800e672:	d806      	bhi.n	800e682 <enq_lock+0x26>
 800e674:	4a09      	ldr	r2, [pc, #36]	; (800e69c <enq_lock+0x40>)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	011b      	lsls	r3, r3, #4
 800e67a:	4413      	add	r3, r2
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1f2      	bne.n	800e668 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b02      	cmp	r3, #2
 800e686:	bf14      	ite	ne
 800e688:	2301      	movne	r3, #1
 800e68a:	2300      	moveq	r3, #0
 800e68c:	b2db      	uxtb	r3, r3
}
 800e68e:	4618      	mov	r0, r3
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	20036a68 	.word	0x20036a68

0800e6a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60fb      	str	r3, [r7, #12]
 800e6ae:	e01f      	b.n	800e6f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e6b0:	4a41      	ldr	r2, [pc, #260]	; (800e7b8 <inc_lock+0x118>)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	011b      	lsls	r3, r3, #4
 800e6b6:	4413      	add	r3, r2
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d113      	bne.n	800e6ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e6c2:	4a3d      	ldr	r2, [pc, #244]	; (800e7b8 <inc_lock+0x118>)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	011b      	lsls	r3, r3, #4
 800e6c8:	4413      	add	r3, r2
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d109      	bne.n	800e6ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e6d6:	4a38      	ldr	r2, [pc, #224]	; (800e7b8 <inc_lock+0x118>)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	011b      	lsls	r3, r3, #4
 800e6dc:	4413      	add	r3, r2
 800e6de:	3308      	adds	r3, #8
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d006      	beq.n	800e6f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	60fb      	str	r3, [r7, #12]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d9dc      	bls.n	800e6b0 <inc_lock+0x10>
 800e6f6:	e000      	b.n	800e6fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e6f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d132      	bne.n	800e766 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e700:	2300      	movs	r3, #0
 800e702:	60fb      	str	r3, [r7, #12]
 800e704:	e002      	b.n	800e70c <inc_lock+0x6c>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	3301      	adds	r3, #1
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d806      	bhi.n	800e720 <inc_lock+0x80>
 800e712:	4a29      	ldr	r2, [pc, #164]	; (800e7b8 <inc_lock+0x118>)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	011b      	lsls	r3, r3, #4
 800e718:	4413      	add	r3, r2
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1f2      	bne.n	800e706 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2b02      	cmp	r3, #2
 800e724:	d101      	bne.n	800e72a <inc_lock+0x8a>
 800e726:	2300      	movs	r3, #0
 800e728:	e040      	b.n	800e7ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	4922      	ldr	r1, [pc, #136]	; (800e7b8 <inc_lock+0x118>)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	011b      	lsls	r3, r3, #4
 800e734:	440b      	add	r3, r1
 800e736:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	689a      	ldr	r2, [r3, #8]
 800e73c:	491e      	ldr	r1, [pc, #120]	; (800e7b8 <inc_lock+0x118>)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	011b      	lsls	r3, r3, #4
 800e742:	440b      	add	r3, r1
 800e744:	3304      	adds	r3, #4
 800e746:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	695a      	ldr	r2, [r3, #20]
 800e74c:	491a      	ldr	r1, [pc, #104]	; (800e7b8 <inc_lock+0x118>)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	011b      	lsls	r3, r3, #4
 800e752:	440b      	add	r3, r1
 800e754:	3308      	adds	r3, #8
 800e756:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e758:	4a17      	ldr	r2, [pc, #92]	; (800e7b8 <inc_lock+0x118>)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	011b      	lsls	r3, r3, #4
 800e75e:	4413      	add	r3, r2
 800e760:	330c      	adds	r3, #12
 800e762:	2200      	movs	r2, #0
 800e764:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d009      	beq.n	800e780 <inc_lock+0xe0>
 800e76c:	4a12      	ldr	r2, [pc, #72]	; (800e7b8 <inc_lock+0x118>)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	011b      	lsls	r3, r3, #4
 800e772:	4413      	add	r3, r2
 800e774:	330c      	adds	r3, #12
 800e776:	881b      	ldrh	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d001      	beq.n	800e780 <inc_lock+0xe0>
 800e77c:	2300      	movs	r3, #0
 800e77e:	e015      	b.n	800e7ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d108      	bne.n	800e798 <inc_lock+0xf8>
 800e786:	4a0c      	ldr	r2, [pc, #48]	; (800e7b8 <inc_lock+0x118>)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	011b      	lsls	r3, r3, #4
 800e78c:	4413      	add	r3, r2
 800e78e:	330c      	adds	r3, #12
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	3301      	adds	r3, #1
 800e794:	b29a      	uxth	r2, r3
 800e796:	e001      	b.n	800e79c <inc_lock+0xfc>
 800e798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e79c:	4906      	ldr	r1, [pc, #24]	; (800e7b8 <inc_lock+0x118>)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	011b      	lsls	r3, r3, #4
 800e7a2:	440b      	add	r3, r1
 800e7a4:	330c      	adds	r3, #12
 800e7a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3301      	adds	r3, #1
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	20036a68 	.word	0x20036a68

0800e7bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	607b      	str	r3, [r7, #4]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d825      	bhi.n	800e81c <dec_lock+0x60>
		n = Files[i].ctr;
 800e7d0:	4a17      	ldr	r2, [pc, #92]	; (800e830 <dec_lock+0x74>)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	011b      	lsls	r3, r3, #4
 800e7d6:	4413      	add	r3, r2
 800e7d8:	330c      	adds	r3, #12
 800e7da:	881b      	ldrh	r3, [r3, #0]
 800e7dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e7de:	89fb      	ldrh	r3, [r7, #14]
 800e7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7e4:	d101      	bne.n	800e7ea <dec_lock+0x2e>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e7ea:	89fb      	ldrh	r3, [r7, #14]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <dec_lock+0x3a>
 800e7f0:	89fb      	ldrh	r3, [r7, #14]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e7f6:	4a0e      	ldr	r2, [pc, #56]	; (800e830 <dec_lock+0x74>)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	011b      	lsls	r3, r3, #4
 800e7fc:	4413      	add	r3, r2
 800e7fe:	330c      	adds	r3, #12
 800e800:	89fa      	ldrh	r2, [r7, #14]
 800e802:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e804:	89fb      	ldrh	r3, [r7, #14]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d105      	bne.n	800e816 <dec_lock+0x5a>
 800e80a:	4a09      	ldr	r2, [pc, #36]	; (800e830 <dec_lock+0x74>)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	011b      	lsls	r3, r3, #4
 800e810:	4413      	add	r3, r2
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	737b      	strb	r3, [r7, #13]
 800e81a:	e001      	b.n	800e820 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e81c:	2302      	movs	r3, #2
 800e81e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e820:	7b7b      	ldrb	r3, [r7, #13]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	20036a68 	.word	0x20036a68

0800e834 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e010      	b.n	800e864 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e842:	4a0d      	ldr	r2, [pc, #52]	; (800e878 <clear_lock+0x44>)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	011b      	lsls	r3, r3, #4
 800e848:	4413      	add	r3, r2
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d105      	bne.n	800e85e <clear_lock+0x2a>
 800e852:	4a09      	ldr	r2, [pc, #36]	; (800e878 <clear_lock+0x44>)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	011b      	lsls	r3, r3, #4
 800e858:	4413      	add	r3, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d9eb      	bls.n	800e842 <clear_lock+0xe>
	}
}
 800e86a:	bf00      	nop
 800e86c:	3714      	adds	r7, #20
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	20036a68 	.word	0x20036a68

0800e87c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	78db      	ldrb	r3, [r3, #3]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d034      	beq.n	800e8fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e894:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	7858      	ldrb	r0, [r3, #1]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	697a      	ldr	r2, [r7, #20]
 800e8a4:	f7ff fd40 	bl	800e328 <disk_write>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	73fb      	strb	r3, [r7, #15]
 800e8b2:	e022      	b.n	800e8fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8be:	697a      	ldr	r2, [r7, #20]
 800e8c0:	1ad2      	subs	r2, r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a1b      	ldr	r3, [r3, #32]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d217      	bcs.n	800e8fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	789b      	ldrb	r3, [r3, #2]
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	e010      	b.n	800e8f4 <sync_window+0x78>
					wsect += fs->fsize;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a1b      	ldr	r3, [r3, #32]
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	4413      	add	r3, r2
 800e8da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7858      	ldrb	r0, [r3, #1]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	697a      	ldr	r2, [r7, #20]
 800e8ea:	f7ff fd1d 	bl	800e328 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	613b      	str	r3, [r7, #16]
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d8eb      	bhi.n	800e8d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3718      	adds	r7, #24
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d01b      	beq.n	800e954 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7ff ffad 	bl	800e87c <sync_window>
 800e922:	4603      	mov	r3, r0
 800e924:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e926:	7bfb      	ldrb	r3, [r7, #15]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d113      	bne.n	800e954 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	7858      	ldrb	r0, [r3, #1]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e936:	2301      	movs	r3, #1
 800e938:	683a      	ldr	r2, [r7, #0]
 800e93a:	f7ff fcd5 	bl	800e2e8 <disk_read>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d004      	beq.n	800e94e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e944:	f04f 33ff 	mov.w	r3, #4294967295
 800e948:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	683a      	ldr	r2, [r7, #0]
 800e952:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e954:	7bfb      	ldrb	r3, [r7, #15]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
	...

0800e960 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7ff ff87 	bl	800e87c <sync_window>
 800e96e:	4603      	mov	r3, r0
 800e970:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e972:	7bfb      	ldrb	r3, [r7, #15]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d159      	bne.n	800ea2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	2b03      	cmp	r3, #3
 800e97e:	d149      	bne.n	800ea14 <sync_fs+0xb4>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	791b      	ldrb	r3, [r3, #4]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d145      	bne.n	800ea14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	899b      	ldrh	r3, [r3, #12]
 800e992:	461a      	mov	r2, r3
 800e994:	2100      	movs	r1, #0
 800e996:	f7ff fda8 	bl	800e4ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	3338      	adds	r3, #56	; 0x38
 800e99e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e9a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7ff fd37 	bl	800e41a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	3338      	adds	r3, #56	; 0x38
 800e9b0:	4921      	ldr	r1, [pc, #132]	; (800ea38 <sync_fs+0xd8>)
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fd4c 	bl	800e450 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3338      	adds	r3, #56	; 0x38
 800e9bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e9c0:	491e      	ldr	r1, [pc, #120]	; (800ea3c <sync_fs+0xdc>)
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7ff fd44 	bl	800e450 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	3338      	adds	r3, #56	; 0x38
 800e9cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	695b      	ldr	r3, [r3, #20]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	f7ff fd3a 	bl	800e450 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	3338      	adds	r3, #56	; 0x38
 800e9e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	691b      	ldr	r3, [r3, #16]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f7ff fd30 	bl	800e450 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	7858      	ldrb	r0, [r3, #1]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea08:	2301      	movs	r3, #1
 800ea0a:	f7ff fc8d 	bl	800e328 <disk_write>
			fs->fsi_flag = 0;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	785b      	ldrb	r3, [r3, #1]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7ff fca3 	bl	800e368 <disk_ioctl>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <sync_fs+0xcc>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	41615252 	.word	0x41615252
 800ea3c:	61417272 	.word	0x61417272

0800ea40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	3b02      	subs	r3, #2
 800ea4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	69db      	ldr	r3, [r3, #28]
 800ea54:	3b02      	subs	r3, #2
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d301      	bcc.n	800ea60 <clust2sect+0x20>
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	e008      	b.n	800ea72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	895b      	ldrh	r3, [r3, #10]
 800ea64:	461a      	mov	r2, r3
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	fb03 f202 	mul.w	r2, r3, r2
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea70:	4413      	add	r3, r2
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	370c      	adds	r7, #12
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b086      	sub	sp, #24
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d904      	bls.n	800ea9e <get_fat+0x20>
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	69db      	ldr	r3, [r3, #28]
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d302      	bcc.n	800eaa4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	617b      	str	r3, [r7, #20]
 800eaa2:	e0b7      	b.n	800ec14 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d05a      	beq.n	800eb68 <get_fat+0xea>
 800eab2:	2b03      	cmp	r3, #3
 800eab4:	d07d      	beq.n	800ebb2 <get_fat+0x134>
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	f040 80a2 	bne.w	800ec00 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	60fb      	str	r3, [r7, #12]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	085b      	lsrs	r3, r3, #1
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	4413      	add	r3, r2
 800eac8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	899b      	ldrh	r3, [r3, #12]
 800ead2:	4619      	mov	r1, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eada:	4413      	add	r3, r2
 800eadc:	4619      	mov	r1, r3
 800eade:	6938      	ldr	r0, [r7, #16]
 800eae0:	f7ff ff10 	bl	800e904 <move_window>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f040 808d 	bne.w	800ec06 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	60fa      	str	r2, [r7, #12]
 800eaf2:	693a      	ldr	r2, [r7, #16]
 800eaf4:	8992      	ldrh	r2, [r2, #12]
 800eaf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800eafa:	fb02 f201 	mul.w	r2, r2, r1
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	4413      	add	r3, r2
 800eb04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	899b      	ldrh	r3, [r3, #12]
 800eb12:	4619      	mov	r1, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb1a:	4413      	add	r3, r2
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6938      	ldr	r0, [r7, #16]
 800eb20:	f7ff fef0 	bl	800e904 <move_window>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d16f      	bne.n	800ec0a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	899b      	ldrh	r3, [r3, #12]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb36:	fb02 f201 	mul.w	r2, r2, r1
 800eb3a:	1a9b      	subs	r3, r3, r2
 800eb3c:	693a      	ldr	r2, [r7, #16]
 800eb3e:	4413      	add	r3, r2
 800eb40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	461a      	mov	r2, r3
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	f003 0301 	and.w	r3, r3, #1
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <get_fat+0xe0>
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	091b      	lsrs	r3, r3, #4
 800eb5c:	e002      	b.n	800eb64 <get_fat+0xe6>
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb64:	617b      	str	r3, [r7, #20]
			break;
 800eb66:	e055      	b.n	800ec14 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	899b      	ldrh	r3, [r3, #12]
 800eb70:	085b      	lsrs	r3, r3, #1
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4619      	mov	r1, r3
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb7c:	4413      	add	r3, r2
 800eb7e:	4619      	mov	r1, r3
 800eb80:	6938      	ldr	r0, [r7, #16]
 800eb82:	f7ff febf 	bl	800e904 <move_window>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d140      	bne.n	800ec0e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	693a      	ldr	r2, [r7, #16]
 800eb98:	8992      	ldrh	r2, [r2, #12]
 800eb9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb9e:	fb02 f200 	mul.w	r2, r2, r0
 800eba2:	1a9b      	subs	r3, r3, r2
 800eba4:	440b      	add	r3, r1
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fbfc 	bl	800e3a4 <ld_word>
 800ebac:	4603      	mov	r3, r0
 800ebae:	617b      	str	r3, [r7, #20]
			break;
 800ebb0:	e030      	b.n	800ec14 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	899b      	ldrh	r3, [r3, #12]
 800ebba:	089b      	lsrs	r3, r3, #2
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebc6:	4413      	add	r3, r2
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6938      	ldr	r0, [r7, #16]
 800ebcc:	f7ff fe9a 	bl	800e904 <move_window>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d11d      	bne.n	800ec12 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	693a      	ldr	r2, [r7, #16]
 800ebe2:	8992      	ldrh	r2, [r2, #12]
 800ebe4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebe8:	fb02 f200 	mul.w	r2, r2, r0
 800ebec:	1a9b      	subs	r3, r3, r2
 800ebee:	440b      	add	r3, r1
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fbef 	bl	800e3d4 <ld_dword>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ebfc:	617b      	str	r3, [r7, #20]
			break;
 800ebfe:	e009      	b.n	800ec14 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ec00:	2301      	movs	r3, #1
 800ec02:	617b      	str	r3, [r7, #20]
 800ec04:	e006      	b.n	800ec14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec06:	bf00      	nop
 800ec08:	e004      	b.n	800ec14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec0a:	bf00      	nop
 800ec0c:	e002      	b.n	800ec14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec0e:	bf00      	nop
 800ec10:	e000      	b.n	800ec14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec12:	bf00      	nop
		}
	}

	return val;
 800ec14:	697b      	ldr	r3, [r7, #20]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ec1e:	b590      	push	{r4, r7, lr}
 800ec20:	b089      	sub	sp, #36	; 0x24
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	60f8      	str	r0, [r7, #12]
 800ec26:	60b9      	str	r1, [r7, #8]
 800ec28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	f240 8106 	bls.w	800ee42 <put_fat+0x224>
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	69db      	ldr	r3, [r3, #28]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	f080 8100 	bcs.w	800ee42 <put_fat+0x224>
		switch (fs->fs_type) {
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	f000 8088 	beq.w	800ed5c <put_fat+0x13e>
 800ec4c:	2b03      	cmp	r3, #3
 800ec4e:	f000 80b0 	beq.w	800edb2 <put_fat+0x194>
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	f040 80f5 	bne.w	800ee42 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	61bb      	str	r3, [r7, #24]
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	085b      	lsrs	r3, r3, #1
 800ec60:	69ba      	ldr	r2, [r7, #24]
 800ec62:	4413      	add	r3, r2
 800ec64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	899b      	ldrh	r3, [r3, #12]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec76:	4413      	add	r3, r2
 800ec78:	4619      	mov	r1, r3
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f7ff fe42 	bl	800e904 <move_window>
 800ec80:	4603      	mov	r3, r0
 800ec82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec84:	7ffb      	ldrb	r3, [r7, #31]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f040 80d4 	bne.w	800ee34 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	1c5a      	adds	r2, r3, #1
 800ec96:	61ba      	str	r2, [r7, #24]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	8992      	ldrh	r2, [r2, #12]
 800ec9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800eca0:	fb02 f200 	mul.w	r2, r2, r0
 800eca4:	1a9b      	subs	r3, r3, r2
 800eca6:	440b      	add	r3, r1
 800eca8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	f003 0301 	and.w	r3, r3, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00d      	beq.n	800ecd0 <put_fat+0xb2>
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	b25b      	sxtb	r3, r3
 800ecba:	f003 030f 	and.w	r3, r3, #15
 800ecbe:	b25a      	sxtb	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	011b      	lsls	r3, r3, #4
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	b25b      	sxtb	r3, r3
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	e001      	b.n	800ecd4 <put_fat+0xb6>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	899b      	ldrh	r3, [r3, #12]
 800ece6:	4619      	mov	r1, r3
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecee:	4413      	add	r3, r2
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7ff fe06 	bl	800e904 <move_window>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ecfc:	7ffb      	ldrb	r3, [r7, #31]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f040 809a 	bne.w	800ee38 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	899b      	ldrh	r3, [r3, #12]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed16:	fb02 f200 	mul.w	r2, r2, r0
 800ed1a:	1a9b      	subs	r3, r3, r2
 800ed1c:	440b      	add	r3, r1
 800ed1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <put_fat+0x114>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	091b      	lsrs	r3, r3, #4
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	e00e      	b.n	800ed50 <put_fat+0x132>
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	b25b      	sxtb	r3, r3
 800ed38:	f023 030f 	bic.w	r3, r3, #15
 800ed3c:	b25a      	sxtb	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	0a1b      	lsrs	r3, r3, #8
 800ed42:	b25b      	sxtb	r3, r3
 800ed44:	f003 030f 	and.w	r3, r3, #15
 800ed48:	b25b      	sxtb	r3, r3
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	b25b      	sxtb	r3, r3
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2201      	movs	r2, #1
 800ed58:	70da      	strb	r2, [r3, #3]
			break;
 800ed5a:	e072      	b.n	800ee42 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	899b      	ldrh	r3, [r3, #12]
 800ed64:	085b      	lsrs	r3, r3, #1
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	4619      	mov	r1, r3
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed70:	4413      	add	r3, r2
 800ed72:	4619      	mov	r1, r3
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7ff fdc5 	bl	800e904 <move_window>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed7e:	7ffb      	ldrb	r3, [r7, #31]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d15b      	bne.n	800ee3c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	005b      	lsls	r3, r3, #1
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	8992      	ldrh	r2, [r2, #12]
 800ed92:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed96:	fb02 f200 	mul.w	r2, r2, r0
 800ed9a:	1a9b      	subs	r3, r3, r2
 800ed9c:	440b      	add	r3, r1
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	b292      	uxth	r2, r2
 800eda2:	4611      	mov	r1, r2
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff fb38 	bl	800e41a <st_word>
			fs->wflag = 1;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2201      	movs	r2, #1
 800edae:	70da      	strb	r2, [r3, #3]
			break;
 800edb0:	e047      	b.n	800ee42 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	899b      	ldrh	r3, [r3, #12]
 800edba:	089b      	lsrs	r3, r3, #2
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	4619      	mov	r1, r3
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800edc6:	4413      	add	r3, r2
 800edc8:	4619      	mov	r1, r3
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f7ff fd9a 	bl	800e904 <move_window>
 800edd0:	4603      	mov	r3, r0
 800edd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edd4:	7ffb      	ldrb	r3, [r7, #31]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d132      	bne.n	800ee40 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	8992      	ldrh	r2, [r2, #12]
 800edee:	fbb3 f0f2 	udiv	r0, r3, r2
 800edf2:	fb02 f200 	mul.w	r2, r2, r0
 800edf6:	1a9b      	subs	r3, r3, r2
 800edf8:	440b      	add	r3, r1
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff faea 	bl	800e3d4 <ld_dword>
 800ee00:	4603      	mov	r3, r0
 800ee02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee06:	4323      	orrs	r3, r4
 800ee08:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	8992      	ldrh	r2, [r2, #12]
 800ee18:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee1c:	fb02 f200 	mul.w	r2, r2, r0
 800ee20:	1a9b      	subs	r3, r3, r2
 800ee22:	440b      	add	r3, r1
 800ee24:	6879      	ldr	r1, [r7, #4]
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7ff fb12 	bl	800e450 <st_dword>
			fs->wflag = 1;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	70da      	strb	r2, [r3, #3]
			break;
 800ee32:	e006      	b.n	800ee42 <put_fat+0x224>
			if (res != FR_OK) break;
 800ee34:	bf00      	nop
 800ee36:	e004      	b.n	800ee42 <put_fat+0x224>
			if (res != FR_OK) break;
 800ee38:	bf00      	nop
 800ee3a:	e002      	b.n	800ee42 <put_fat+0x224>
			if (res != FR_OK) break;
 800ee3c:	bf00      	nop
 800ee3e:	e000      	b.n	800ee42 <put_fat+0x224>
			if (res != FR_OK) break;
 800ee40:	bf00      	nop
		}
	}
	return res;
 800ee42:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3724      	adds	r7, #36	; 0x24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd90      	pop	{r4, r7, pc}

0800ee4c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	60b9      	str	r1, [r7, #8]
 800ee56:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d904      	bls.n	800ee72 <remove_chain+0x26>
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d301      	bcc.n	800ee76 <remove_chain+0x2a>
 800ee72:	2302      	movs	r3, #2
 800ee74:	e04b      	b.n	800ef0e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00c      	beq.n	800ee96 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ee7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	69b8      	ldr	r0, [r7, #24]
 800ee84:	f7ff fecb 	bl	800ec1e <put_fat>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ee8c:	7ffb      	ldrb	r3, [r7, #31]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <remove_chain+0x4a>
 800ee92:	7ffb      	ldrb	r3, [r7, #31]
 800ee94:	e03b      	b.n	800ef0e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ee96:	68b9      	ldr	r1, [r7, #8]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f7ff fdf0 	bl	800ea7e <get_fat>
 800ee9e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d031      	beq.n	800ef0a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d101      	bne.n	800eeb0 <remove_chain+0x64>
 800eeac:	2302      	movs	r3, #2
 800eeae:	e02e      	b.n	800ef0e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb6:	d101      	bne.n	800eebc <remove_chain+0x70>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e028      	b.n	800ef0e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eebc:	2200      	movs	r2, #0
 800eebe:	68b9      	ldr	r1, [r7, #8]
 800eec0:	69b8      	ldr	r0, [r7, #24]
 800eec2:	f7ff feac 	bl	800ec1e <put_fat>
 800eec6:	4603      	mov	r3, r0
 800eec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eeca:	7ffb      	ldrb	r3, [r7, #31]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <remove_chain+0x88>
 800eed0:	7ffb      	ldrb	r3, [r7, #31]
 800eed2:	e01c      	b.n	800ef0e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	695a      	ldr	r2, [r3, #20]
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	3b02      	subs	r3, #2
 800eede:	429a      	cmp	r2, r3
 800eee0:	d20b      	bcs.n	800eefa <remove_chain+0xae>
			fs->free_clst++;
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	695b      	ldr	r3, [r3, #20]
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	791b      	ldrb	r3, [r3, #4]
 800eef0:	f043 0301 	orr.w	r3, r3, #1
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d3c6      	bcc.n	800ee96 <remove_chain+0x4a>
 800ef08:	e000      	b.n	800ef0c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef0a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3720      	adds	r7, #32
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b088      	sub	sp, #32
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10d      	bne.n	800ef48 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <create_chain+0x2c>
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	69db      	ldr	r3, [r3, #28]
 800ef3c:	69ba      	ldr	r2, [r7, #24]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d31b      	bcc.n	800ef7a <create_chain+0x64>
 800ef42:	2301      	movs	r3, #1
 800ef44:	61bb      	str	r3, [r7, #24]
 800ef46:	e018      	b.n	800ef7a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff fd97 	bl	800ea7e <get_fat>
 800ef50:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d801      	bhi.n	800ef5c <create_chain+0x46>
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e070      	b.n	800f03e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef62:	d101      	bne.n	800ef68 <create_chain+0x52>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	e06a      	b.n	800f03e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	69db      	ldr	r3, [r3, #28]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d201      	bcs.n	800ef76 <create_chain+0x60>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	e063      	b.n	800f03e <create_chain+0x128>
		scl = clst;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	3301      	adds	r3, #1
 800ef82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	69db      	ldr	r3, [r3, #28]
 800ef88:	69fa      	ldr	r2, [r7, #28]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d307      	bcc.n	800ef9e <create_chain+0x88>
				ncl = 2;
 800ef8e:	2302      	movs	r3, #2
 800ef90:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ef92:	69fa      	ldr	r2, [r7, #28]
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d901      	bls.n	800ef9e <create_chain+0x88>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	e04f      	b.n	800f03e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ef9e:	69f9      	ldr	r1, [r7, #28]
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff fd6c 	bl	800ea7e <get_fat>
 800efa6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00e      	beq.n	800efcc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d003      	beq.n	800efbc <create_chain+0xa6>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efba:	d101      	bne.n	800efc0 <create_chain+0xaa>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	e03e      	b.n	800f03e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800efc0:	69fa      	ldr	r2, [r7, #28]
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d1da      	bne.n	800ef7e <create_chain+0x68>
 800efc8:	2300      	movs	r3, #0
 800efca:	e038      	b.n	800f03e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800efcc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800efce:	f04f 32ff 	mov.w	r2, #4294967295
 800efd2:	69f9      	ldr	r1, [r7, #28]
 800efd4:	6938      	ldr	r0, [r7, #16]
 800efd6:	f7ff fe22 	bl	800ec1e <put_fat>
 800efda:	4603      	mov	r3, r0
 800efdc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800efde:	7dfb      	ldrb	r3, [r7, #23]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d109      	bne.n	800eff8 <create_chain+0xe2>
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d006      	beq.n	800eff8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800efea:	69fa      	ldr	r2, [r7, #28]
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6938      	ldr	r0, [r7, #16]
 800eff0:	f7ff fe15 	bl	800ec1e <put_fat>
 800eff4:	4603      	mov	r3, r0
 800eff6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d116      	bne.n	800f02c <create_chain+0x116>
		fs->last_clst = ncl;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	69fa      	ldr	r2, [r7, #28]
 800f002:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	695a      	ldr	r2, [r3, #20]
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	3b02      	subs	r3, #2
 800f00e:	429a      	cmp	r2, r3
 800f010:	d804      	bhi.n	800f01c <create_chain+0x106>
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	695b      	ldr	r3, [r3, #20]
 800f016:	1e5a      	subs	r2, r3, #1
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	791b      	ldrb	r3, [r3, #4]
 800f020:	f043 0301 	orr.w	r3, r3, #1
 800f024:	b2da      	uxtb	r2, r3
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	711a      	strb	r2, [r3, #4]
 800f02a:	e007      	b.n	800f03c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f02c:	7dfb      	ldrb	r3, [r7, #23]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d102      	bne.n	800f038 <create_chain+0x122>
 800f032:	f04f 33ff 	mov.w	r3, #4294967295
 800f036:	e000      	b.n	800f03a <create_chain+0x124>
 800f038:	2301      	movs	r3, #1
 800f03a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f03c:	69fb      	ldr	r3, [r7, #28]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3720      	adds	r7, #32
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f046:	b480      	push	{r7}
 800f048:	b087      	sub	sp, #28
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
 800f04e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05a:	3304      	adds	r3, #4
 800f05c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	899b      	ldrh	r3, [r3, #12]
 800f062:	461a      	mov	r2, r3
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	fbb3 f3f2 	udiv	r3, r3, r2
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	8952      	ldrh	r2, [r2, #10]
 800f06e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f072:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	1d1a      	adds	r2, r3, #4
 800f078:	613a      	str	r2, [r7, #16]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <clmt_clust+0x42>
 800f084:	2300      	movs	r3, #0
 800f086:	e010      	b.n	800f0aa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f088:	697a      	ldr	r2, [r7, #20]
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d307      	bcc.n	800f0a0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	617b      	str	r3, [r7, #20]
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	3304      	adds	r3, #4
 800f09c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f09e:	e7e9      	b.n	800f074 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f0a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	4413      	add	r3, r2
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	371c      	adds	r7, #28
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b086      	sub	sp, #24
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0cc:	d204      	bcs.n	800f0d8 <dir_sdi+0x22>
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	f003 031f 	and.w	r3, r3, #31
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d001      	beq.n	800f0dc <dir_sdi+0x26>
		return FR_INT_ERR;
 800f0d8:	2302      	movs	r3, #2
 800f0da:	e071      	b.n	800f1c0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <dir_sdi+0x46>
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	d902      	bls.n	800f0fc <dir_sdi+0x46>
		clst = fs->dirbase;
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d10c      	bne.n	800f11c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	095b      	lsrs	r3, r3, #5
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	8912      	ldrh	r2, [r2, #8]
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d301      	bcc.n	800f112 <dir_sdi+0x5c>
 800f10e:	2302      	movs	r3, #2
 800f110:	e056      	b.n	800f1c0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	61da      	str	r2, [r3, #28]
 800f11a:	e02d      	b.n	800f178 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	895b      	ldrh	r3, [r3, #10]
 800f120:	461a      	mov	r2, r3
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	899b      	ldrh	r3, [r3, #12]
 800f126:	fb03 f302 	mul.w	r3, r3, r2
 800f12a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f12c:	e019      	b.n	800f162 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6979      	ldr	r1, [r7, #20]
 800f132:	4618      	mov	r0, r3
 800f134:	f7ff fca3 	bl	800ea7e <get_fat>
 800f138:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f140:	d101      	bne.n	800f146 <dir_sdi+0x90>
 800f142:	2301      	movs	r3, #1
 800f144:	e03c      	b.n	800f1c0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d904      	bls.n	800f156 <dir_sdi+0xa0>
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	69db      	ldr	r3, [r3, #28]
 800f150:	697a      	ldr	r2, [r7, #20]
 800f152:	429a      	cmp	r2, r3
 800f154:	d301      	bcc.n	800f15a <dir_sdi+0xa4>
 800f156:	2302      	movs	r3, #2
 800f158:	e032      	b.n	800f1c0 <dir_sdi+0x10a>
			ofs -= csz;
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	1ad3      	subs	r3, r2, r3
 800f160:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f162:	683a      	ldr	r2, [r7, #0]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	429a      	cmp	r2, r3
 800f168:	d2e1      	bcs.n	800f12e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f16a:	6979      	ldr	r1, [r7, #20]
 800f16c:	6938      	ldr	r0, [r7, #16]
 800f16e:	f7ff fc67 	bl	800ea40 <clust2sect>
 800f172:	4602      	mov	r2, r0
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	69db      	ldr	r3, [r3, #28]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d101      	bne.n	800f18a <dir_sdi+0xd4>
 800f186:	2302      	movs	r3, #2
 800f188:	e01a      	b.n	800f1c0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	69da      	ldr	r2, [r3, #28]
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	899b      	ldrh	r3, [r3, #12]
 800f192:	4619      	mov	r1, r3
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	fbb3 f3f1 	udiv	r3, r3, r1
 800f19a:	441a      	add	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	899b      	ldrh	r3, [r3, #12]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1b2:	fb02 f200 	mul.w	r2, r2, r0
 800f1b6:	1a9b      	subs	r3, r3, r2
 800f1b8:	18ca      	adds	r2, r1, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3718      	adds	r7, #24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	3320      	adds	r3, #32
 800f1de:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	69db      	ldr	r3, [r3, #28]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <dir_next+0x28>
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1ee:	d301      	bcc.n	800f1f4 <dir_next+0x2c>
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	e0bb      	b.n	800f36c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	899b      	ldrh	r3, [r3, #12]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f200:	fb02 f201 	mul.w	r2, r2, r1
 800f204:	1a9b      	subs	r3, r3, r2
 800f206:	2b00      	cmp	r3, #0
 800f208:	f040 809d 	bne.w	800f346 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	69db      	ldr	r3, [r3, #28]
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	699b      	ldr	r3, [r3, #24]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10b      	bne.n	800f236 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	095b      	lsrs	r3, r3, #5
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	8912      	ldrh	r2, [r2, #8]
 800f226:	4293      	cmp	r3, r2
 800f228:	f0c0 808d 	bcc.w	800f346 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	61da      	str	r2, [r3, #28]
 800f232:	2304      	movs	r3, #4
 800f234:	e09a      	b.n	800f36c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	899b      	ldrh	r3, [r3, #12]
 800f23a:	461a      	mov	r2, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	8952      	ldrh	r2, [r2, #10]
 800f246:	3a01      	subs	r2, #1
 800f248:	4013      	ands	r3, r2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d17b      	bne.n	800f346 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	699b      	ldr	r3, [r3, #24]
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f7ff fc11 	bl	800ea7e <get_fat>
 800f25c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d801      	bhi.n	800f268 <dir_next+0xa0>
 800f264:	2302      	movs	r3, #2
 800f266:	e081      	b.n	800f36c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26e:	d101      	bne.n	800f274 <dir_next+0xac>
 800f270:	2301      	movs	r3, #1
 800f272:	e07b      	b.n	800f36c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d359      	bcc.n	800f332 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d104      	bne.n	800f28e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	61da      	str	r2, [r3, #28]
 800f28a:	2304      	movs	r3, #4
 800f28c:	e06e      	b.n	800f36c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	4619      	mov	r1, r3
 800f296:	4610      	mov	r0, r2
 800f298:	f7ff fe3d 	bl	800ef16 <create_chain>
 800f29c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <dir_next+0xe0>
 800f2a4:	2307      	movs	r3, #7
 800f2a6:	e061      	b.n	800f36c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d101      	bne.n	800f2b2 <dir_next+0xea>
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	e05c      	b.n	800f36c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b8:	d101      	bne.n	800f2be <dir_next+0xf6>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e056      	b.n	800f36c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f2be:	68f8      	ldr	r0, [r7, #12]
 800f2c0:	f7ff fadc 	bl	800e87c <sync_window>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <dir_next+0x106>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e04e      	b.n	800f36c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	899b      	ldrh	r3, [r3, #12]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	2100      	movs	r1, #0
 800f2dc:	f7ff f905 	bl	800e4ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	613b      	str	r3, [r7, #16]
 800f2e4:	6979      	ldr	r1, [r7, #20]
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff fbaa 	bl	800ea40 <clust2sect>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	635a      	str	r2, [r3, #52]	; 0x34
 800f2f2:	e012      	b.n	800f31a <dir_next+0x152>
						fs->wflag = 1;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f7ff fabe 	bl	800e87c <sync_window>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <dir_next+0x142>
 800f306:	2301      	movs	r3, #1
 800f308:	e030      	b.n	800f36c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	3301      	adds	r3, #1
 800f30e:	613b      	str	r3, [r7, #16]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f314:	1c5a      	adds	r2, r3, #1
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	635a      	str	r2, [r3, #52]	; 0x34
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	895b      	ldrh	r3, [r3, #10]
 800f31e:	461a      	mov	r2, r3
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	4293      	cmp	r3, r2
 800f324:	d3e6      	bcc.n	800f2f4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	1ad2      	subs	r2, r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	697a      	ldr	r2, [r7, #20]
 800f336:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f338:	6979      	ldr	r1, [r7, #20]
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f7ff fb80 	bl	800ea40 <clust2sect>
 800f340:	4602      	mov	r2, r0
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	899b      	ldrh	r3, [r3, #12]
 800f356:	461a      	mov	r2, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f35e:	fb02 f200 	mul.w	r2, r2, r0
 800f362:	1a9b      	subs	r3, r3, r2
 800f364:	18ca      	adds	r2, r1, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f384:	2100      	movs	r1, #0
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7ff fe95 	bl	800f0b6 <dir_sdi>
 800f38c:	4603      	mov	r3, r0
 800f38e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f390:	7dfb      	ldrb	r3, [r7, #23]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d12b      	bne.n	800f3ee <dir_alloc+0x7a>
		n = 0;
 800f396:	2300      	movs	r3, #0
 800f398:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	69db      	ldr	r3, [r3, #28]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff faaf 	bl	800e904 <move_window>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3aa:	7dfb      	ldrb	r3, [r7, #23]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d11d      	bne.n	800f3ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2be5      	cmp	r3, #229	; 0xe5
 800f3b8:	d004      	beq.n	800f3c4 <dir_alloc+0x50>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a1b      	ldr	r3, [r3, #32]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d107      	bne.n	800f3d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	613b      	str	r3, [r7, #16]
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d102      	bne.n	800f3d8 <dir_alloc+0x64>
 800f3d2:	e00c      	b.n	800f3ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f3d8:	2101      	movs	r1, #1
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff fef4 	bl	800f1c8 <dir_next>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d0d7      	beq.n	800f39a <dir_alloc+0x26>
 800f3ea:	e000      	b.n	800f3ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f3ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f3ee:	7dfb      	ldrb	r3, [r7, #23]
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	d101      	bne.n	800f3f8 <dir_alloc+0x84>
 800f3f4:	2307      	movs	r3, #7
 800f3f6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3718      	adds	r7, #24
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b084      	sub	sp, #16
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	331a      	adds	r3, #26
 800f410:	4618      	mov	r0, r3
 800f412:	f7fe ffc7 	bl	800e3a4 <ld_word>
 800f416:	4603      	mov	r3, r0
 800f418:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d109      	bne.n	800f436 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	3314      	adds	r3, #20
 800f426:	4618      	mov	r0, r3
 800f428:	f7fe ffbc 	bl	800e3a4 <ld_word>
 800f42c:	4603      	mov	r3, r0
 800f42e:	041b      	lsls	r3, r3, #16
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	4313      	orrs	r3, r2
 800f434:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f436:	68fb      	ldr	r3, [r7, #12]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	331a      	adds	r3, #26
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	b292      	uxth	r2, r2
 800f454:	4611      	mov	r1, r2
 800f456:	4618      	mov	r0, r3
 800f458:	f7fe ffdf 	bl	800e41a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b03      	cmp	r3, #3
 800f462:	d109      	bne.n	800f478 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	f103 0214 	add.w	r2, r3, #20
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	0c1b      	lsrs	r3, r3, #16
 800f46e:	b29b      	uxth	r3, r3
 800f470:	4619      	mov	r1, r3
 800f472:	4610      	mov	r0, r2
 800f474:	f7fe ffd1 	bl	800e41a <st_word>
	}
}
 800f478:	bf00      	nop
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f48a:	2304      	movs	r3, #4
 800f48c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f494:	e03c      	b.n	800f510 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	69db      	ldr	r3, [r3, #28]
 800f49a:	4619      	mov	r1, r3
 800f49c:	6938      	ldr	r0, [r7, #16]
 800f49e:	f7ff fa31 	bl	800e904 <move_window>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f4a6:	7dfb      	ldrb	r3, [r7, #23]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d136      	bne.n	800f51a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a1b      	ldr	r3, [r3, #32]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d102      	bne.n	800f4c0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f4ba:	2304      	movs	r3, #4
 800f4bc:	75fb      	strb	r3, [r7, #23]
 800f4be:	e031      	b.n	800f524 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6a1b      	ldr	r3, [r3, #32]
 800f4c4:	330b      	adds	r3, #11
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4cc:	73bb      	strb	r3, [r7, #14]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	7bba      	ldrb	r2, [r7, #14]
 800f4d2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
 800f4d6:	2be5      	cmp	r3, #229	; 0xe5
 800f4d8:	d011      	beq.n	800f4fe <dir_read+0x7e>
 800f4da:	7bfb      	ldrb	r3, [r7, #15]
 800f4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f4de:	d00e      	beq.n	800f4fe <dir_read+0x7e>
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
 800f4e2:	2b0f      	cmp	r3, #15
 800f4e4:	d00b      	beq.n	800f4fe <dir_read+0x7e>
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	f023 0320 	bic.w	r3, r3, #32
 800f4ec:	2b08      	cmp	r3, #8
 800f4ee:	bf0c      	ite	eq
 800f4f0:	2301      	moveq	r3, #1
 800f4f2:	2300      	movne	r3, #0
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d00f      	beq.n	800f51e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f4fe:	2100      	movs	r1, #0
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff fe61 	bl	800f1c8 <dir_next>
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d108      	bne.n	800f522 <dir_read+0xa2>
	while (dp->sect) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	69db      	ldr	r3, [r3, #28]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1be      	bne.n	800f496 <dir_read+0x16>
 800f518:	e004      	b.n	800f524 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f51a:	bf00      	nop
 800f51c:	e002      	b.n	800f524 <dir_read+0xa4>
				break;
 800f51e:	bf00      	nop
 800f520:	e000      	b.n	800f524 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f522:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f524:	7dfb      	ldrb	r3, [r7, #23]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <dir_read+0xb0>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	61da      	str	r2, [r3, #28]
	return res;
 800f530:	7dfb      	ldrb	r3, [r7, #23]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3718      	adds	r7, #24
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b086      	sub	sp, #24
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f548:	2100      	movs	r1, #0
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff fdb3 	bl	800f0b6 <dir_sdi>
 800f550:	4603      	mov	r3, r0
 800f552:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f554:	7dfb      	ldrb	r3, [r7, #23]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d001      	beq.n	800f55e <dir_find+0x24>
 800f55a:	7dfb      	ldrb	r3, [r7, #23]
 800f55c:	e03e      	b.n	800f5dc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	69db      	ldr	r3, [r3, #28]
 800f562:	4619      	mov	r1, r3
 800f564:	6938      	ldr	r0, [r7, #16]
 800f566:	f7ff f9cd 	bl	800e904 <move_window>
 800f56a:	4603      	mov	r3, r0
 800f56c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f56e:	7dfb      	ldrb	r3, [r7, #23]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d12f      	bne.n	800f5d4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6a1b      	ldr	r3, [r3, #32]
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d102      	bne.n	800f588 <dir_find+0x4e>
 800f582:	2304      	movs	r3, #4
 800f584:	75fb      	strb	r3, [r7, #23]
 800f586:	e028      	b.n	800f5da <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6a1b      	ldr	r3, [r3, #32]
 800f58c:	330b      	adds	r3, #11
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f594:	b2da      	uxtb	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a1b      	ldr	r3, [r3, #32]
 800f59e:	330b      	adds	r3, #11
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	f003 0308 	and.w	r3, r3, #8
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10a      	bne.n	800f5c0 <dir_find+0x86>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a18      	ldr	r0, [r3, #32]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	3324      	adds	r3, #36	; 0x24
 800f5b2:	220b      	movs	r2, #11
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	f7fe ffb2 	bl	800e51e <mem_cmp>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff fe00 	bl	800f1c8 <dir_next>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d0c5      	beq.n	800f55e <dir_find+0x24>
 800f5d2:	e002      	b.n	800f5da <dir_find+0xa0>
		if (res != FR_OK) break;
 800f5d4:	bf00      	nop
 800f5d6:	e000      	b.n	800f5da <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5d8:	bf00      	nop

	return res;
 800f5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3718      	adds	r7, #24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f5f2:	2101      	movs	r1, #1
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff febd 	bl	800f374 <dir_alloc>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f5fe:	7bfb      	ldrb	r3, [r7, #15]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d11c      	bne.n	800f63e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	4619      	mov	r1, r3
 800f60a:	68b8      	ldr	r0, [r7, #8]
 800f60c:	f7ff f97a 	bl	800e904 <move_window>
 800f610:	4603      	mov	r3, r0
 800f612:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f614:	7bfb      	ldrb	r3, [r7, #15]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d111      	bne.n	800f63e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	2220      	movs	r2, #32
 800f620:	2100      	movs	r1, #0
 800f622:	4618      	mov	r0, r3
 800f624:	f7fe ff61 	bl	800e4ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a18      	ldr	r0, [r3, #32]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3324      	adds	r3, #36	; 0x24
 800f630:	220b      	movs	r2, #11
 800f632:	4619      	mov	r1, r3
 800f634:	f7fe ff38 	bl	800e4a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2201      	movs	r2, #1
 800f63c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3710      	adds	r7, #16
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	69db      	ldr	r3, [r3, #28]
 800f65a:	4619      	mov	r1, r3
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f7ff f951 	bl	800e904 <move_window>
 800f662:	4603      	mov	r3, r0
 800f664:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f666:	7afb      	ldrb	r3, [r7, #11]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d106      	bne.n	800f67a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6a1b      	ldr	r3, [r3, #32]
 800f670:	22e5      	movs	r2, #229	; 0xe5
 800f672:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2201      	movs	r2, #1
 800f678:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800f67a:	7afb      	ldrb	r3, [r7, #11]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	3324      	adds	r3, #36	; 0x24
 800f698:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f69a:	220b      	movs	r2, #11
 800f69c:	2120      	movs	r1, #32
 800f69e:	68b8      	ldr	r0, [r7, #8]
 800f6a0:	f7fe ff23 	bl	800e4ea <mem_set>
	si = i = 0; ni = 8;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	613b      	str	r3, [r7, #16]
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	617b      	str	r3, [r7, #20]
 800f6ac:	2308      	movs	r3, #8
 800f6ae:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ba:	d12f      	bne.n	800f71c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	617a      	str	r2, [r7, #20]
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800f6ca:	7ffb      	ldrb	r3, [r7, #31]
 800f6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ce:	d10a      	bne.n	800f6e6 <create_name+0x62>
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d807      	bhi.n	800f6e6 <create_name+0x62>
			sfn[i++] = c;
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	1c5a      	adds	r2, r3, #1
 800f6da:	613a      	str	r2, [r7, #16]
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	4413      	add	r3, r2
 800f6e0:	7ffa      	ldrb	r2, [r7, #31]
 800f6e2:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800f6e4:	e7ea      	b.n	800f6bc <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800f6e6:	7ffb      	ldrb	r3, [r7, #31]
 800f6e8:	2b2f      	cmp	r3, #47	; 0x2f
 800f6ea:	d007      	beq.n	800f6fc <create_name+0x78>
 800f6ec:	7ffb      	ldrb	r3, [r7, #31]
 800f6ee:	2b5c      	cmp	r3, #92	; 0x5c
 800f6f0:	d004      	beq.n	800f6fc <create_name+0x78>
 800f6f2:	7ffb      	ldrb	r3, [r7, #31]
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	d901      	bls.n	800f6fc <create_name+0x78>
 800f6f8:	2306      	movs	r3, #6
 800f6fa:	e084      	b.n	800f806 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	441a      	add	r2, r3
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800f706:	7ffb      	ldrb	r3, [r7, #31]
 800f708:	2b20      	cmp	r3, #32
 800f70a:	d801      	bhi.n	800f710 <create_name+0x8c>
 800f70c:	2224      	movs	r2, #36	; 0x24
 800f70e:	e000      	b.n	800f712 <create_name+0x8e>
 800f710:	2220      	movs	r2, #32
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	330b      	adds	r3, #11
 800f716:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f718:	2300      	movs	r3, #0
 800f71a:	e074      	b.n	800f806 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	1c5a      	adds	r2, r3, #1
 800f720:	617a      	str	r2, [r7, #20]
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	4413      	add	r3, r2
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f72a:	7ffb      	ldrb	r3, [r7, #31]
 800f72c:	2b20      	cmp	r3, #32
 800f72e:	d94e      	bls.n	800f7ce <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f730:	7ffb      	ldrb	r3, [r7, #31]
 800f732:	2b2f      	cmp	r3, #47	; 0x2f
 800f734:	d006      	beq.n	800f744 <create_name+0xc0>
 800f736:	7ffb      	ldrb	r3, [r7, #31]
 800f738:	2b5c      	cmp	r3, #92	; 0x5c
 800f73a:	d110      	bne.n	800f75e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f73c:	e002      	b.n	800f744 <create_name+0xc0>
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	3301      	adds	r3, #1
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	4413      	add	r3, r2
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b2f      	cmp	r3, #47	; 0x2f
 800f74e:	d0f6      	beq.n	800f73e <create_name+0xba>
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	4413      	add	r3, r2
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b5c      	cmp	r3, #92	; 0x5c
 800f75a:	d0f0      	beq.n	800f73e <create_name+0xba>
			break;
 800f75c:	e038      	b.n	800f7d0 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f75e:	7ffb      	ldrb	r3, [r7, #31]
 800f760:	2b2e      	cmp	r3, #46	; 0x2e
 800f762:	d003      	beq.n	800f76c <create_name+0xe8>
 800f764:	693a      	ldr	r2, [r7, #16]
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d30c      	bcc.n	800f786 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	2b0b      	cmp	r3, #11
 800f770:	d002      	beq.n	800f778 <create_name+0xf4>
 800f772:	7ffb      	ldrb	r3, [r7, #31]
 800f774:	2b2e      	cmp	r3, #46	; 0x2e
 800f776:	d001      	beq.n	800f77c <create_name+0xf8>
 800f778:	2306      	movs	r3, #6
 800f77a:	e044      	b.n	800f806 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800f77c:	2308      	movs	r3, #8
 800f77e:	613b      	str	r3, [r7, #16]
 800f780:	230b      	movs	r3, #11
 800f782:	61bb      	str	r3, [r7, #24]
			continue;
 800f784:	e022      	b.n	800f7cc <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f786:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	da04      	bge.n	800f798 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f78e:	7ffb      	ldrb	r3, [r7, #31]
 800f790:	3b80      	subs	r3, #128	; 0x80
 800f792:	4a1f      	ldr	r2, [pc, #124]	; (800f810 <create_name+0x18c>)
 800f794:	5cd3      	ldrb	r3, [r2, r3]
 800f796:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f798:	7ffb      	ldrb	r3, [r7, #31]
 800f79a:	4619      	mov	r1, r3
 800f79c:	481d      	ldr	r0, [pc, #116]	; (800f814 <create_name+0x190>)
 800f79e:	f7fe fee5 	bl	800e56c <chk_chr>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <create_name+0x128>
 800f7a8:	2306      	movs	r3, #6
 800f7aa:	e02c      	b.n	800f806 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f7ac:	7ffb      	ldrb	r3, [r7, #31]
 800f7ae:	2b60      	cmp	r3, #96	; 0x60
 800f7b0:	d905      	bls.n	800f7be <create_name+0x13a>
 800f7b2:	7ffb      	ldrb	r3, [r7, #31]
 800f7b4:	2b7a      	cmp	r3, #122	; 0x7a
 800f7b6:	d802      	bhi.n	800f7be <create_name+0x13a>
 800f7b8:	7ffb      	ldrb	r3, [r7, #31]
 800f7ba:	3b20      	subs	r3, #32
 800f7bc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	1c5a      	adds	r2, r3, #1
 800f7c2:	613a      	str	r2, [r7, #16]
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	7ffa      	ldrb	r2, [r7, #31]
 800f7ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f7cc:	e7a6      	b.n	800f71c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f7ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	441a      	add	r2, r3
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d101      	bne.n	800f7e4 <create_name+0x160>
 800f7e0:	2306      	movs	r3, #6
 800f7e2:	e010      	b.n	800f806 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2be5      	cmp	r3, #229	; 0xe5
 800f7ea:	d102      	bne.n	800f7f2 <create_name+0x16e>
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2205      	movs	r2, #5
 800f7f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f7f2:	7ffb      	ldrb	r3, [r7, #31]
 800f7f4:	2b20      	cmp	r3, #32
 800f7f6:	d801      	bhi.n	800f7fc <create_name+0x178>
 800f7f8:	2204      	movs	r2, #4
 800f7fa:	e000      	b.n	800f7fe <create_name+0x17a>
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	330b      	adds	r3, #11
 800f802:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f804:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f806:	4618      	mov	r0, r3
 800f808:	3720      	adds	r7, #32
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	0801785c 	.word	0x0801785c
 800f814:	0801780c 	.word	0x0801780c

0800f818 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	2b2f      	cmp	r3, #47	; 0x2f
 800f832:	d00b      	beq.n	800f84c <follow_path+0x34>
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	2b5c      	cmp	r3, #92	; 0x5c
 800f83a:	d007      	beq.n	800f84c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	699a      	ldr	r2, [r3, #24]
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	609a      	str	r2, [r3, #8]
 800f844:	e00d      	b.n	800f862 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	3301      	adds	r3, #1
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b2f      	cmp	r3, #47	; 0x2f
 800f852:	d0f8      	beq.n	800f846 <follow_path+0x2e>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	2b5c      	cmp	r3, #92	; 0x5c
 800f85a:	d0f4      	beq.n	800f846 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	2200      	movs	r2, #0
 800f860:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	2b1f      	cmp	r3, #31
 800f868:	d80a      	bhi.n	800f880 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2280      	movs	r2, #128	; 0x80
 800f86e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f872:	2100      	movs	r1, #0
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff fc1e 	bl	800f0b6 <dir_sdi>
 800f87a:	4603      	mov	r3, r0
 800f87c:	75fb      	strb	r3, [r7, #23]
 800f87e:	e05b      	b.n	800f938 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f880:	463b      	mov	r3, r7
 800f882:	4619      	mov	r1, r3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff fefd 	bl	800f684 <create_name>
 800f88a:	4603      	mov	r3, r0
 800f88c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d14c      	bne.n	800f92e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f7ff fe50 	bl	800f53a <dir_find>
 800f89a:	4603      	mov	r3, r0
 800f89c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f8a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f8a6:	7dfb      	ldrb	r3, [r7, #23]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d01b      	beq.n	800f8e4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f8ac:	7dfb      	ldrb	r3, [r7, #23]
 800f8ae:	2b04      	cmp	r3, #4
 800f8b0:	d13f      	bne.n	800f932 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f8b2:	7afb      	ldrb	r3, [r7, #11]
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00b      	beq.n	800f8d4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f8bc:	7afb      	ldrb	r3, [r7, #11]
 800f8be:	f003 0304 	and.w	r3, r3, #4
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d031      	beq.n	800f92a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2280      	movs	r2, #128	; 0x80
 800f8ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f8d2:	e02e      	b.n	800f932 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f8d4:	7afb      	ldrb	r3, [r7, #11]
 800f8d6:	f003 0304 	and.w	r3, r3, #4
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d129      	bne.n	800f932 <follow_path+0x11a>
 800f8de:	2305      	movs	r3, #5
 800f8e0:	75fb      	strb	r3, [r7, #23]
				break;
 800f8e2:	e026      	b.n	800f932 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f8e4:	7afb      	ldrb	r3, [r7, #11]
 800f8e6:	f003 0304 	and.w	r3, r3, #4
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d123      	bne.n	800f936 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	799b      	ldrb	r3, [r3, #6]
 800f8f2:	f003 0310 	and.w	r3, r3, #16
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d102      	bne.n	800f900 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f8fa:	2305      	movs	r3, #5
 800f8fc:	75fb      	strb	r3, [r7, #23]
 800f8fe:	e01b      	b.n	800f938 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	8992      	ldrh	r2, [r2, #12]
 800f90e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f912:	fb02 f200 	mul.w	r2, r2, r0
 800f916:	1a9b      	subs	r3, r3, r2
 800f918:	440b      	add	r3, r1
 800f91a:	4619      	mov	r1, r3
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7ff fd70 	bl	800f402 <ld_clust>
 800f922:	4602      	mov	r2, r0
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	609a      	str	r2, [r3, #8]
 800f928:	e7aa      	b.n	800f880 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f92a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f92c:	e7a8      	b.n	800f880 <follow_path+0x68>
			if (res != FR_OK) break;
 800f92e:	bf00      	nop
 800f930:	e002      	b.n	800f938 <follow_path+0x120>
				break;
 800f932:	bf00      	nop
 800f934:	e000      	b.n	800f938 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f936:	bf00      	nop
			}
		}
	}

	return res;
 800f938:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3718      	adds	r7, #24
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f942:	b480      	push	{r7}
 800f944:	b087      	sub	sp, #28
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f94a:	f04f 33ff 	mov.w	r3, #4294967295
 800f94e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d031      	beq.n	800f9bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	617b      	str	r3, [r7, #20]
 800f95e:	e002      	b.n	800f966 <get_ldnumber+0x24>
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	3301      	adds	r3, #1
 800f964:	617b      	str	r3, [r7, #20]
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	2b20      	cmp	r3, #32
 800f96c:	d903      	bls.n	800f976 <get_ldnumber+0x34>
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	2b3a      	cmp	r3, #58	; 0x3a
 800f974:	d1f4      	bne.n	800f960 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b3a      	cmp	r3, #58	; 0x3a
 800f97c:	d11c      	bne.n	800f9b8 <get_ldnumber+0x76>
			tp = *path;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	60fa      	str	r2, [r7, #12]
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	3b30      	subs	r3, #48	; 0x30
 800f98e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	2b09      	cmp	r3, #9
 800f994:	d80e      	bhi.n	800f9b4 <get_ldnumber+0x72>
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d10a      	bne.n	800f9b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d107      	bne.n	800f9b4 <get_ldnumber+0x72>
					vol = (int)i;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	617b      	str	r3, [r7, #20]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	e002      	b.n	800f9be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f9bc:	693b      	ldr	r3, [r7, #16]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	371c      	adds	r7, #28
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr
	...

0800f9cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	70da      	strb	r2, [r3, #3]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f9e4:	6839      	ldr	r1, [r7, #0]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7fe ff8c 	bl	800e904 <move_window>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <check_fs+0x2a>
 800f9f2:	2304      	movs	r3, #4
 800f9f4:	e038      	b.n	800fa68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	3338      	adds	r3, #56	; 0x38
 800f9fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fe fcd0 	bl	800e3a4 <ld_word>
 800fa04:	4603      	mov	r3, r0
 800fa06:	461a      	mov	r2, r3
 800fa08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d001      	beq.n	800fa14 <check_fs+0x48>
 800fa10:	2303      	movs	r3, #3
 800fa12:	e029      	b.n	800fa68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa1a:	2be9      	cmp	r3, #233	; 0xe9
 800fa1c:	d009      	beq.n	800fa32 <check_fs+0x66>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa24:	2beb      	cmp	r3, #235	; 0xeb
 800fa26:	d11e      	bne.n	800fa66 <check_fs+0x9a>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa2e:	2b90      	cmp	r3, #144	; 0x90
 800fa30:	d119      	bne.n	800fa66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3338      	adds	r3, #56	; 0x38
 800fa36:	3336      	adds	r3, #54	; 0x36
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fccb 	bl	800e3d4 <ld_dword>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fa44:	4a0a      	ldr	r2, [pc, #40]	; (800fa70 <check_fs+0xa4>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d101      	bne.n	800fa4e <check_fs+0x82>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e00c      	b.n	800fa68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3338      	adds	r3, #56	; 0x38
 800fa52:	3352      	adds	r3, #82	; 0x52
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fe fcbd 	bl	800e3d4 <ld_dword>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <check_fs+0xa8>)
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d101      	bne.n	800fa66 <check_fs+0x9a>
 800fa62:	2300      	movs	r3, #0
 800fa64:	e000      	b.n	800fa68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fa66:	2302      	movs	r3, #2
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	00544146 	.word	0x00544146
 800fa74:	33544146 	.word	0x33544146

0800fa78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b096      	sub	sp, #88	; 0x58
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	4613      	mov	r3, r2
 800fa84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f7ff ff58 	bl	800f942 <get_ldnumber>
 800fa92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	da01      	bge.n	800fa9e <find_volume+0x26>
 800fa9a:	230b      	movs	r3, #11
 800fa9c:	e268      	b.n	800ff70 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fa9e:	4ab0      	ldr	r2, [pc, #704]	; (800fd60 <find_volume+0x2e8>)
 800faa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800faa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d101      	bne.n	800fab2 <find_volume+0x3a>
 800faae:	230c      	movs	r3, #12
 800fab0:	e25e      	b.n	800ff70 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fab6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fab8:	79fb      	ldrb	r3, [r7, #7]
 800faba:	f023 0301 	bic.w	r3, r3, #1
 800fabe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d01a      	beq.n	800fafe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	785b      	ldrb	r3, [r3, #1]
 800facc:	4618      	mov	r0, r3
 800face:	f7fe fbcb 	bl	800e268 <disk_status>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fadc:	f003 0301 	and.w	r3, r3, #1
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d10c      	bne.n	800fafe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fae4:	79fb      	ldrb	r3, [r7, #7]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d007      	beq.n	800fafa <find_volume+0x82>
 800faea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faee:	f003 0304 	and.w	r3, r3, #4
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d001      	beq.n	800fafa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800faf6:	230a      	movs	r3, #10
 800faf8:	e23a      	b.n	800ff70 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800fafa:	2300      	movs	r3, #0
 800fafc:	e238      	b.n	800ff70 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb00:	2200      	movs	r2, #0
 800fb02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0e:	785b      	ldrb	r3, [r3, #1]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fe fbc3 	bl	800e29c <disk_initialize>
 800fb16:	4603      	mov	r3, r0
 800fb18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fb1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb20:	f003 0301 	and.w	r3, r3, #1
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d001      	beq.n	800fb2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fb28:	2303      	movs	r3, #3
 800fb2a:	e221      	b.n	800ff70 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fb2c:	79fb      	ldrb	r3, [r7, #7]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d007      	beq.n	800fb42 <find_volume+0xca>
 800fb32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb36:	f003 0304 	and.w	r3, r3, #4
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fb3e:	230a      	movs	r3, #10
 800fb40:	e216      	b.n	800ff70 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb44:	7858      	ldrb	r0, [r3, #1]
 800fb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb48:	330c      	adds	r3, #12
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	2102      	movs	r1, #2
 800fb4e:	f7fe fc0b 	bl	800e368 <disk_ioctl>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <find_volume+0xe4>
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e209      	b.n	800ff70 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5e:	899b      	ldrh	r3, [r3, #12]
 800fb60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb64:	d80d      	bhi.n	800fb82 <find_volume+0x10a>
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	899b      	ldrh	r3, [r3, #12]
 800fb6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb6e:	d308      	bcc.n	800fb82 <find_volume+0x10a>
 800fb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb72:	899b      	ldrh	r3, [r3, #12]
 800fb74:	461a      	mov	r2, r3
 800fb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb78:	899b      	ldrh	r3, [r3, #12]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	4013      	ands	r3, r2
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <find_volume+0x10e>
 800fb82:	2301      	movs	r3, #1
 800fb84:	e1f4      	b.n	800ff70 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fb8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb8e:	f7ff ff1d 	bl	800f9cc <check_fs>
 800fb92:	4603      	mov	r3, r0
 800fb94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fb98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d14b      	bne.n	800fc38 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fba0:	2300      	movs	r3, #0
 800fba2:	643b      	str	r3, [r7, #64]	; 0x40
 800fba4:	e01f      	b.n	800fbe6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbae:	011b      	lsls	r3, r3, #4
 800fbb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbb4:	4413      	add	r3, r2
 800fbb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	3304      	adds	r3, #4
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d006      	beq.n	800fbd0 <find_volume+0x158>
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	3308      	adds	r3, #8
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fe fc04 	bl	800e3d4 <ld_dword>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	e000      	b.n	800fbd2 <find_volume+0x15a>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fbda:	440b      	add	r3, r1
 800fbdc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	643b      	str	r3, [r7, #64]	; 0x40
 800fbe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	d9dc      	bls.n	800fba6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fbec:	2300      	movs	r3, #0
 800fbee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d002      	beq.n	800fbfc <find_volume+0x184>
 800fbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fc04:	4413      	add	r3, r2
 800fc06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d005      	beq.n	800fc1e <find_volume+0x1a6>
 800fc12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc16:	f7ff fed9 	bl	800f9cc <check_fs>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	e000      	b.n	800fc20 <find_volume+0x1a8>
 800fc1e:	2303      	movs	r3, #3
 800fc20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d905      	bls.n	800fc38 <find_volume+0x1c0>
 800fc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2e:	3301      	adds	r3, #1
 800fc30:	643b      	str	r3, [r7, #64]	; 0x40
 800fc32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d9e1      	bls.n	800fbfc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc3c:	2b04      	cmp	r3, #4
 800fc3e:	d101      	bne.n	800fc44 <find_volume+0x1cc>
 800fc40:	2301      	movs	r3, #1
 800fc42:	e195      	b.n	800ff70 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d901      	bls.n	800fc50 <find_volume+0x1d8>
 800fc4c:	230d      	movs	r3, #13
 800fc4e:	e18f      	b.n	800ff70 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc52:	3338      	adds	r3, #56	; 0x38
 800fc54:	330b      	adds	r3, #11
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fe fba4 	bl	800e3a4 <ld_word>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	461a      	mov	r2, r3
 800fc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc62:	899b      	ldrh	r3, [r3, #12]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d001      	beq.n	800fc6c <find_volume+0x1f4>
 800fc68:	230d      	movs	r3, #13
 800fc6a:	e181      	b.n	800ff70 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	3338      	adds	r3, #56	; 0x38
 800fc70:	3316      	adds	r3, #22
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fe fb96 	bl	800e3a4 <ld_word>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d106      	bne.n	800fc90 <find_volume+0x218>
 800fc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc84:	3338      	adds	r3, #56	; 0x38
 800fc86:	3324      	adds	r3, #36	; 0x24
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fe fba3 	bl	800e3d4 <ld_dword>
 800fc8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc94:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc98:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca2:	789b      	ldrb	r3, [r3, #2]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d005      	beq.n	800fcb4 <find_volume+0x23c>
 800fca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcaa:	789b      	ldrb	r3, [r3, #2]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d001      	beq.n	800fcb4 <find_volume+0x23c>
 800fcb0:	230d      	movs	r3, #13
 800fcb2:	e15d      	b.n	800ff70 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb6:	789b      	ldrb	r3, [r3, #2]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbc:	fb02 f303 	mul.w	r3, r2, r3
 800fcc0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd0:	895b      	ldrh	r3, [r3, #10]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d008      	beq.n	800fce8 <find_volume+0x270>
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	895b      	ldrh	r3, [r3, #10]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcde:	895b      	ldrh	r3, [r3, #10]
 800fce0:	3b01      	subs	r3, #1
 800fce2:	4013      	ands	r3, r2
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <find_volume+0x274>
 800fce8:	230d      	movs	r3, #13
 800fcea:	e141      	b.n	800ff70 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	3338      	adds	r3, #56	; 0x38
 800fcf0:	3311      	adds	r3, #17
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fe fb56 	bl	800e3a4 <ld_word>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd02:	891b      	ldrh	r3, [r3, #8]
 800fd04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd06:	8992      	ldrh	r2, [r2, #12]
 800fd08:	0952      	lsrs	r2, r2, #5
 800fd0a:	b292      	uxth	r2, r2
 800fd0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd10:	fb02 f201 	mul.w	r2, r2, r1
 800fd14:	1a9b      	subs	r3, r3, r2
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d001      	beq.n	800fd20 <find_volume+0x2a8>
 800fd1c:	230d      	movs	r3, #13
 800fd1e:	e127      	b.n	800ff70 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	3338      	adds	r3, #56	; 0x38
 800fd24:	3313      	adds	r3, #19
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fe fb3c 	bl	800e3a4 <ld_word>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <find_volume+0x2cc>
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	3338      	adds	r3, #56	; 0x38
 800fd3a:	3320      	adds	r3, #32
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fe fb49 	bl	800e3d4 <ld_dword>
 800fd42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	3338      	adds	r3, #56	; 0x38
 800fd48:	330e      	adds	r3, #14
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fe fb2a 	bl	800e3a4 <ld_word>
 800fd50:	4603      	mov	r3, r0
 800fd52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d104      	bne.n	800fd64 <find_volume+0x2ec>
 800fd5a:	230d      	movs	r3, #13
 800fd5c:	e108      	b.n	800ff70 <find_volume+0x4f8>
 800fd5e:	bf00      	nop
 800fd60:	20036a60 	.word	0x20036a60

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd68:	4413      	add	r3, r2
 800fd6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd6c:	8911      	ldrh	r1, [r2, #8]
 800fd6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd70:	8992      	ldrh	r2, [r2, #12]
 800fd72:	0952      	lsrs	r2, r2, #5
 800fd74:	b292      	uxth	r2, r2
 800fd76:	fbb1 f2f2 	udiv	r2, r1, r2
 800fd7a:	b292      	uxth	r2, r2
 800fd7c:	4413      	add	r3, r2
 800fd7e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fd80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d201      	bcs.n	800fd8c <find_volume+0x314>
 800fd88:	230d      	movs	r3, #13
 800fd8a:	e0f1      	b.n	800ff70 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fd8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd90:	1ad3      	subs	r3, r2, r3
 800fd92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd94:	8952      	ldrh	r2, [r2, #10]
 800fd96:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d101      	bne.n	800fda6 <find_volume+0x32e>
 800fda2:	230d      	movs	r3, #13
 800fda4:	e0e4      	b.n	800ff70 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800fda6:	2303      	movs	r3, #3
 800fda8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d802      	bhi.n	800fdbc <find_volume+0x344>
 800fdb6:	2302      	movs	r3, #2
 800fdb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d802      	bhi.n	800fdcc <find_volume+0x354>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	1c9a      	adds	r2, r3, #2
 800fdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdd8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fdda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdde:	441a      	add	r2, r3
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fde4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde8:	441a      	add	r2, r3
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fdee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdf2:	2b03      	cmp	r3, #3
 800fdf4:	d11e      	bne.n	800fe34 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	3338      	adds	r3, #56	; 0x38
 800fdfa:	332a      	adds	r3, #42	; 0x2a
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fe fad1 	bl	800e3a4 <ld_word>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <find_volume+0x394>
 800fe08:	230d      	movs	r3, #13
 800fe0a:	e0b1      	b.n	800ff70 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	891b      	ldrh	r3, [r3, #8]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <find_volume+0x3a0>
 800fe14:	230d      	movs	r3, #13
 800fe16:	e0ab      	b.n	800ff70 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1a:	3338      	adds	r3, #56	; 0x38
 800fe1c:	332c      	adds	r3, #44	; 0x2c
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fe fad8 	bl	800e3d4 <ld_dword>
 800fe24:	4602      	mov	r2, r0
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	647b      	str	r3, [r7, #68]	; 0x44
 800fe32:	e01f      	b.n	800fe74 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe36:	891b      	ldrh	r3, [r3, #8]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <find_volume+0x3c8>
 800fe3c:	230d      	movs	r3, #13
 800fe3e:	e097      	b.n	800ff70 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe46:	441a      	add	r2, r3
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe50:	2b02      	cmp	r3, #2
 800fe52:	d103      	bne.n	800fe5c <find_volume+0x3e4>
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	69db      	ldr	r3, [r3, #28]
 800fe58:	005b      	lsls	r3, r3, #1
 800fe5a:	e00a      	b.n	800fe72 <find_volume+0x3fa>
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	69da      	ldr	r2, [r3, #28]
 800fe60:	4613      	mov	r3, r2
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	4413      	add	r3, r2
 800fe66:	085a      	lsrs	r2, r3, #1
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	69db      	ldr	r3, [r3, #28]
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe72:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	6a1a      	ldr	r2, [r3, #32]
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	899b      	ldrh	r3, [r3, #12]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe80:	440b      	add	r3, r1
 800fe82:	3b01      	subs	r3, #1
 800fe84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe86:	8989      	ldrh	r1, [r1, #12]
 800fe88:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d201      	bcs.n	800fe94 <find_volume+0x41c>
 800fe90:	230d      	movs	r3, #13
 800fe92:	e06d      	b.n	800ff70 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9a:	615a      	str	r2, [r3, #20]
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9e:	695a      	ldr	r2, [r3, #20]
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea6:	2280      	movs	r2, #128	; 0x80
 800fea8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800feaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feae:	2b03      	cmp	r3, #3
 800feb0:	d149      	bne.n	800ff46 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800feb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb4:	3338      	adds	r3, #56	; 0x38
 800feb6:	3330      	adds	r3, #48	; 0x30
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fa73 	bl	800e3a4 <ld_word>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d140      	bne.n	800ff46 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec6:	3301      	adds	r3, #1
 800fec8:	4619      	mov	r1, r3
 800feca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fecc:	f7fe fd1a 	bl	800e904 <move_window>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d137      	bne.n	800ff46 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	2200      	movs	r2, #0
 800feda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fede:	3338      	adds	r3, #56	; 0x38
 800fee0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe fa5d 	bl	800e3a4 <ld_word>
 800feea:	4603      	mov	r3, r0
 800feec:	461a      	mov	r2, r3
 800feee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d127      	bne.n	800ff46 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	3338      	adds	r3, #56	; 0x38
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fa6a 	bl	800e3d4 <ld_dword>
 800ff00:	4602      	mov	r2, r0
 800ff02:	4b1d      	ldr	r3, [pc, #116]	; (800ff78 <find_volume+0x500>)
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d11e      	bne.n	800ff46 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	3338      	adds	r3, #56	; 0x38
 800ff0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe fa5f 	bl	800e3d4 <ld_dword>
 800ff16:	4602      	mov	r2, r0
 800ff18:	4b18      	ldr	r3, [pc, #96]	; (800ff7c <find_volume+0x504>)
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d113      	bne.n	800ff46 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	3338      	adds	r3, #56	; 0x38
 800ff22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fe fa54 	bl	800e3d4 <ld_dword>
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	3338      	adds	r3, #56	; 0x38
 800ff36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fe fa4a 	bl	800e3d4 <ld_dword>
 800ff40:	4602      	mov	r2, r0
 800ff42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff44:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff4e:	4b0c      	ldr	r3, [pc, #48]	; (800ff80 <find_volume+0x508>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	3301      	adds	r3, #1
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	4b0a      	ldr	r3, [pc, #40]	; (800ff80 <find_volume+0x508>)
 800ff58:	801a      	strh	r2, [r3, #0]
 800ff5a:	4b09      	ldr	r3, [pc, #36]	; (800ff80 <find_volume+0x508>)
 800ff5c:	881a      	ldrh	r2, [r3, #0]
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800ff62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff64:	2200      	movs	r2, #0
 800ff66:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff6a:	f7fe fc63 	bl	800e834 <clear_lock>
#endif
	return FR_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3758      	adds	r7, #88	; 0x58
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	41615252 	.word	0x41615252
 800ff7c:	61417272 	.word	0x61417272
 800ff80:	20036a64 	.word	0x20036a64

0800ff84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ff8e:	2309      	movs	r3, #9
 800ff90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d01c      	beq.n	800ffd2 <validate+0x4e>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d018      	beq.n	800ffd2 <validate+0x4e>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d013      	beq.n	800ffd2 <validate+0x4e>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	889a      	ldrh	r2, [r3, #4]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	88db      	ldrh	r3, [r3, #6]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d10c      	bne.n	800ffd2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	785b      	ldrb	r3, [r3, #1]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fe f952 	bl	800e268 <disk_status>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d101      	bne.n	800ffd2 <validate+0x4e>
			res = FR_OK;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ffd2:	7bfb      	ldrb	r3, [r7, #15]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <validate+0x5a>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	e000      	b.n	800ffe0 <validate+0x5c>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	6013      	str	r3, [r2, #0]
	return res;
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	4613      	mov	r3, r2
 800fffc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010002:	f107 0310 	add.w	r3, r7, #16
 8010006:	4618      	mov	r0, r3
 8010008:	f7ff fc9b 	bl	800f942 <get_ldnumber>
 801000c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	2b00      	cmp	r3, #0
 8010012:	da01      	bge.n	8010018 <f_mount+0x28>
 8010014:	230b      	movs	r3, #11
 8010016:	e02b      	b.n	8010070 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010018:	4a17      	ldr	r2, [pc, #92]	; (8010078 <f_mount+0x88>)
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010020:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d005      	beq.n	8010034 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010028:	69b8      	ldr	r0, [r7, #24]
 801002a:	f7fe fc03 	bl	800e834 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	2200      	movs	r2, #0
 8010032:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	490d      	ldr	r1, [pc, #52]	; (8010078 <f_mount+0x88>)
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <f_mount+0x66>
 8010050:	79fb      	ldrb	r3, [r7, #7]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d001      	beq.n	801005a <f_mount+0x6a>
 8010056:	2300      	movs	r3, #0
 8010058:	e00a      	b.n	8010070 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801005a:	f107 010c 	add.w	r1, r7, #12
 801005e:	f107 0308 	add.w	r3, r7, #8
 8010062:	2200      	movs	r2, #0
 8010064:	4618      	mov	r0, r3
 8010066:	f7ff fd07 	bl	800fa78 <find_volume>
 801006a:	4603      	mov	r3, r0
 801006c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801006e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010070:	4618      	mov	r0, r3
 8010072:	3720      	adds	r7, #32
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	20036a60 	.word	0x20036a60

0801007c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b098      	sub	sp, #96	; 0x60
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	4613      	mov	r3, r2
 8010088:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <f_open+0x18>
 8010090:	2309      	movs	r3, #9
 8010092:	e1ba      	b.n	801040a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010094:	79fb      	ldrb	r3, [r7, #7]
 8010096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801009a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801009c:	79fa      	ldrb	r2, [r7, #7]
 801009e:	f107 0110 	add.w	r1, r7, #16
 80100a2:	f107 0308 	add.w	r3, r7, #8
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7ff fce6 	bl	800fa78 <find_volume>
 80100ac:	4603      	mov	r3, r0
 80100ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80100b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f040 819e 	bne.w	80103f8 <f_open+0x37c>
		dj.obj.fs = fs;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100c0:	68ba      	ldr	r2, [r7, #8]
 80100c2:	f107 0314 	add.w	r3, r7, #20
 80100c6:	4611      	mov	r1, r2
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7ff fba5 	bl	800f818 <follow_path>
 80100ce:	4603      	mov	r3, r0
 80100d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d11a      	bne.n	8010112 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80100dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100e0:	b25b      	sxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	da03      	bge.n	80100ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80100e6:	2306      	movs	r3, #6
 80100e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80100ec:	e011      	b.n	8010112 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	f023 0301 	bic.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	bf14      	ite	ne
 80100f8:	2301      	movne	r3, #1
 80100fa:	2300      	moveq	r3, #0
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	f107 0314 	add.w	r3, r7, #20
 8010104:	4611      	mov	r1, r2
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fa4c 	bl	800e5a4 <chk_lock>
 801010c:	4603      	mov	r3, r0
 801010e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010112:	79fb      	ldrb	r3, [r7, #7]
 8010114:	f003 031c 	and.w	r3, r3, #28
 8010118:	2b00      	cmp	r3, #0
 801011a:	d07e      	beq.n	801021a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 801011c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010120:	2b00      	cmp	r3, #0
 8010122:	d017      	beq.n	8010154 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010124:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010128:	2b04      	cmp	r3, #4
 801012a:	d10e      	bne.n	801014a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801012c:	f7fe fa96 	bl	800e65c <enq_lock>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d006      	beq.n	8010144 <f_open+0xc8>
 8010136:	f107 0314 	add.w	r3, r7, #20
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff fa52 	bl	800f5e4 <dir_register>
 8010140:	4603      	mov	r3, r0
 8010142:	e000      	b.n	8010146 <f_open+0xca>
 8010144:	2312      	movs	r3, #18
 8010146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	f043 0308 	orr.w	r3, r3, #8
 8010150:	71fb      	strb	r3, [r7, #7]
 8010152:	e010      	b.n	8010176 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010154:	7ebb      	ldrb	r3, [r7, #26]
 8010156:	f003 0311 	and.w	r3, r3, #17
 801015a:	2b00      	cmp	r3, #0
 801015c:	d003      	beq.n	8010166 <f_open+0xea>
					res = FR_DENIED;
 801015e:	2307      	movs	r3, #7
 8010160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010164:	e007      	b.n	8010176 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010166:	79fb      	ldrb	r3, [r7, #7]
 8010168:	f003 0304 	and.w	r3, r3, #4
 801016c:	2b00      	cmp	r3, #0
 801016e:	d002      	beq.n	8010176 <f_open+0xfa>
 8010170:	2308      	movs	r3, #8
 8010172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801017a:	2b00      	cmp	r3, #0
 801017c:	d167      	bne.n	801024e <f_open+0x1d2>
 801017e:	79fb      	ldrb	r3, [r7, #7]
 8010180:	f003 0308 	and.w	r3, r3, #8
 8010184:	2b00      	cmp	r3, #0
 8010186:	d062      	beq.n	801024e <f_open+0x1d2>
				dw = GET_FATTIME();
 8010188:	4ba2      	ldr	r3, [pc, #648]	; (8010414 <f_open+0x398>)
 801018a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801018c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018e:	330e      	adds	r3, #14
 8010190:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe f95c 	bl	800e450 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019a:	3316      	adds	r3, #22
 801019c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe f956 	bl	800e450 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a6:	330b      	adds	r3, #11
 80101a8:	2220      	movs	r2, #32
 80101aa:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101b0:	4611      	mov	r1, r2
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff f925 	bl	800f402 <ld_clust>
 80101b8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101be:	2200      	movs	r2, #0
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7ff f93d 	bl	800f440 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c8:	331c      	adds	r3, #28
 80101ca:	2100      	movs	r1, #0
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fe f93f 	bl	800e450 <st_dword>
					fs->wflag = 1;
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	2201      	movs	r2, #1
 80101d6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d037      	beq.n	801024e <f_open+0x1d2>
						dw = fs->winsect;
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101e2:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80101e4:	f107 0314 	add.w	r3, r7, #20
 80101e8:	2200      	movs	r2, #0
 80101ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe fe2d 	bl	800ee4c <remove_chain>
 80101f2:	4603      	mov	r3, r0
 80101f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80101f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d126      	bne.n	801024e <f_open+0x1d2>
							res = move_window(fs, dw);
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010204:	4618      	mov	r0, r3
 8010206:	f7fe fb7d 	bl	800e904 <move_window>
 801020a:	4603      	mov	r3, r0
 801020c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010214:	3a01      	subs	r2, #1
 8010216:	611a      	str	r2, [r3, #16]
 8010218:	e019      	b.n	801024e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801021a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801021e:	2b00      	cmp	r3, #0
 8010220:	d115      	bne.n	801024e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010222:	7ebb      	ldrb	r3, [r7, #26]
 8010224:	f003 0310 	and.w	r3, r3, #16
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <f_open+0x1b8>
					res = FR_NO_FILE;
 801022c:	2304      	movs	r3, #4
 801022e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010232:	e00c      	b.n	801024e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	f003 0302 	and.w	r3, r3, #2
 801023a:	2b00      	cmp	r3, #0
 801023c:	d007      	beq.n	801024e <f_open+0x1d2>
 801023e:	7ebb      	ldrb	r3, [r7, #26]
 8010240:	f003 0301 	and.w	r3, r3, #1
 8010244:	2b00      	cmp	r3, #0
 8010246:	d002      	beq.n	801024e <f_open+0x1d2>
						res = FR_DENIED;
 8010248:	2307      	movs	r3, #7
 801024a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801024e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010252:	2b00      	cmp	r3, #0
 8010254:	d128      	bne.n	80102a8 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	f003 0308 	and.w	r3, r3, #8
 801025c:	2b00      	cmp	r3, #0
 801025e:	d003      	beq.n	8010268 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010260:	79fb      	ldrb	r3, [r7, #7]
 8010262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010266:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010276:	79fb      	ldrb	r3, [r7, #7]
 8010278:	f023 0301 	bic.w	r3, r3, #1
 801027c:	2b00      	cmp	r3, #0
 801027e:	bf14      	ite	ne
 8010280:	2301      	movne	r3, #1
 8010282:	2300      	moveq	r3, #0
 8010284:	b2db      	uxtb	r3, r3
 8010286:	461a      	mov	r2, r3
 8010288:	f107 0314 	add.w	r3, r7, #20
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fe fa06 	bl	800e6a0 <inc_lock>
 8010294:	4602      	mov	r2, r0
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d102      	bne.n	80102a8 <f_open+0x22c>
 80102a2:	2302      	movs	r3, #2
 80102a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f040 80a3 	bne.w	80103f8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b6:	4611      	mov	r1, r2
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff f8a2 	bl	800f402 <ld_clust>
 80102be:	4602      	mov	r2, r0
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c6:	331c      	adds	r3, #28
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe f883 	bl	800e3d4 <ld_dword>
 80102ce:	4602      	mov	r2, r0
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2200      	movs	r2, #0
 80102d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	88da      	ldrh	r2, [r3, #6]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	79fa      	ldrb	r2, [r7, #7]
 80102ec:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2200      	movs	r2, #0
 80102f2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	3330      	adds	r3, #48	; 0x30
 8010304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010308:	2100      	movs	r1, #0
 801030a:	4618      	mov	r0, r3
 801030c:	f7fe f8ed 	bl	800e4ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	f003 0320 	and.w	r3, r3, #32
 8010316:	2b00      	cmp	r3, #0
 8010318:	d06e      	beq.n	80103f8 <f_open+0x37c>
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d06a      	beq.n	80103f8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	68da      	ldr	r2, [r3, #12]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	895b      	ldrh	r3, [r3, #10]
 801032e:	461a      	mov	r2, r3
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	899b      	ldrh	r3, [r3, #12]
 8010334:	fb03 f302 	mul.w	r3, r3, r2
 8010338:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	657b      	str	r3, [r7, #84]	; 0x54
 8010346:	e016      	b.n	8010376 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801034c:	4618      	mov	r0, r3
 801034e:	f7fe fb96 	bl	800ea7e <get_fat>
 8010352:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010356:	2b01      	cmp	r3, #1
 8010358:	d802      	bhi.n	8010360 <f_open+0x2e4>
 801035a:	2302      	movs	r3, #2
 801035c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010366:	d102      	bne.n	801036e <f_open+0x2f2>
 8010368:	2301      	movs	r3, #1
 801036a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801036e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	657b      	str	r3, [r7, #84]	; 0x54
 8010376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801037a:	2b00      	cmp	r3, #0
 801037c:	d103      	bne.n	8010386 <f_open+0x30a>
 801037e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010382:	429a      	cmp	r2, r3
 8010384:	d8e0      	bhi.n	8010348 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801038a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801038c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010390:	2b00      	cmp	r3, #0
 8010392:	d131      	bne.n	80103f8 <f_open+0x37c>
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	899b      	ldrh	r3, [r3, #12]
 8010398:	461a      	mov	r2, r3
 801039a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801039c:	fbb3 f1f2 	udiv	r1, r3, r2
 80103a0:	fb02 f201 	mul.w	r2, r2, r1
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d026      	beq.n	80103f8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe fb46 	bl	800ea40 <clust2sect>
 80103b4:	6478      	str	r0, [r7, #68]	; 0x44
 80103b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d103      	bne.n	80103c4 <f_open+0x348>
						res = FR_INT_ERR;
 80103bc:	2302      	movs	r3, #2
 80103be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103c2:	e019      	b.n	80103f8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	899b      	ldrh	r3, [r3, #12]
 80103c8:	461a      	mov	r2, r3
 80103ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80103d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103d2:	441a      	add	r2, r3
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	7858      	ldrb	r0, [r3, #1]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6a1a      	ldr	r2, [r3, #32]
 80103e6:	2301      	movs	r3, #1
 80103e8:	f7fd ff7e 	bl	800e2e8 <disk_read>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d002      	beq.n	80103f8 <f_open+0x37c>
 80103f2:	2301      	movs	r3, #1
 80103f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d002      	beq.n	8010406 <f_open+0x38a>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2200      	movs	r2, #0
 8010404:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801040a:	4618      	mov	r0, r3
 801040c:	3760      	adds	r7, #96	; 0x60
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	274a0000 	.word	0x274a0000

08010418 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b08e      	sub	sp, #56	; 0x38
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	2200      	movs	r2, #0
 801042e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f107 0214 	add.w	r2, r7, #20
 8010436:	4611      	mov	r1, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fda3 	bl	800ff84 <validate>
 801043e:	4603      	mov	r3, r0
 8010440:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010448:	2b00      	cmp	r3, #0
 801044a:	d107      	bne.n	801045c <f_read+0x44>
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	7d5b      	ldrb	r3, [r3, #21]
 8010450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010458:	2b00      	cmp	r3, #0
 801045a:	d002      	beq.n	8010462 <f_read+0x4a>
 801045c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010460:	e135      	b.n	80106ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	7d1b      	ldrb	r3, [r3, #20]
 8010466:	f003 0301 	and.w	r3, r3, #1
 801046a:	2b00      	cmp	r3, #0
 801046c:	d101      	bne.n	8010472 <f_read+0x5a>
 801046e:	2307      	movs	r3, #7
 8010470:	e12d      	b.n	80106ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	68da      	ldr	r2, [r3, #12]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	699b      	ldr	r3, [r3, #24]
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	429a      	cmp	r2, r3
 8010484:	f240 811e 	bls.w	80106c4 <f_read+0x2ac>
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801048c:	e11a      	b.n	80106c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	697a      	ldr	r2, [r7, #20]
 8010494:	8992      	ldrh	r2, [r2, #12]
 8010496:	fbb3 f1f2 	udiv	r1, r3, r2
 801049a:	fb02 f201 	mul.w	r2, r2, r1
 801049e:	1a9b      	subs	r3, r3, r2
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f040 80d5 	bne.w	8010650 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	8992      	ldrh	r2, [r2, #12]
 80104ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80104b2:	697a      	ldr	r2, [r7, #20]
 80104b4:	8952      	ldrh	r2, [r2, #10]
 80104b6:	3a01      	subs	r2, #1
 80104b8:	4013      	ands	r3, r2
 80104ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d12f      	bne.n	8010522 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	699b      	ldr	r3, [r3, #24]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d103      	bne.n	80104d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	633b      	str	r3, [r7, #48]	; 0x30
 80104d0:	e013      	b.n	80104fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d007      	beq.n	80104ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	4619      	mov	r1, r3
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f7fe fdb0 	bl	800f046 <clmt_clust>
 80104e6:	6338      	str	r0, [r7, #48]	; 0x30
 80104e8:	e007      	b.n	80104fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	69db      	ldr	r3, [r3, #28]
 80104f0:	4619      	mov	r1, r3
 80104f2:	4610      	mov	r0, r2
 80104f4:	f7fe fac3 	bl	800ea7e <get_fat>
 80104f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d804      	bhi.n	801050a <f_read+0xf2>
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2202      	movs	r2, #2
 8010504:	755a      	strb	r2, [r3, #21]
 8010506:	2302      	movs	r3, #2
 8010508:	e0e1      	b.n	80106ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010510:	d104      	bne.n	801051c <f_read+0x104>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2201      	movs	r2, #1
 8010516:	755a      	strb	r2, [r3, #21]
 8010518:	2301      	movs	r3, #1
 801051a:	e0d8      	b.n	80106ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010520:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010522:	697a      	ldr	r2, [r7, #20]
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	69db      	ldr	r3, [r3, #28]
 8010528:	4619      	mov	r1, r3
 801052a:	4610      	mov	r0, r2
 801052c:	f7fe fa88 	bl	800ea40 <clust2sect>
 8010530:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010532:	69bb      	ldr	r3, [r7, #24]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d104      	bne.n	8010542 <f_read+0x12a>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2202      	movs	r2, #2
 801053c:	755a      	strb	r2, [r3, #21]
 801053e:	2302      	movs	r3, #2
 8010540:	e0c5      	b.n	80106ce <f_read+0x2b6>
			sect += csect;
 8010542:	69ba      	ldr	r2, [r7, #24]
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	4413      	add	r3, r2
 8010548:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	899b      	ldrh	r3, [r3, #12]
 801054e:	461a      	mov	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	fbb3 f3f2 	udiv	r3, r3, r2
 8010556:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055a:	2b00      	cmp	r3, #0
 801055c:	d041      	beq.n	80105e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801055e:	69fa      	ldr	r2, [r7, #28]
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	4413      	add	r3, r2
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	8952      	ldrh	r2, [r2, #10]
 8010568:	4293      	cmp	r3, r2
 801056a:	d905      	bls.n	8010578 <f_read+0x160>
					cc = fs->csize - csect;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	895b      	ldrh	r3, [r3, #10]
 8010570:	461a      	mov	r2, r3
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	7858      	ldrb	r0, [r3, #1]
 801057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057e:	69ba      	ldr	r2, [r7, #24]
 8010580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010582:	f7fd feb1 	bl	800e2e8 <disk_read>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d004      	beq.n	8010596 <f_read+0x17e>
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2201      	movs	r2, #1
 8010590:	755a      	strb	r2, [r3, #21]
 8010592:	2301      	movs	r3, #1
 8010594:	e09b      	b.n	80106ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	7d1b      	ldrb	r3, [r3, #20]
 801059a:	b25b      	sxtb	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	da18      	bge.n	80105d2 <f_read+0x1ba>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6a1a      	ldr	r2, [r3, #32]
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d911      	bls.n	80105d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	6a1a      	ldr	r2, [r3, #32]
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	8992      	ldrh	r2, [r2, #12]
 80105ba:	fb02 f303 	mul.w	r3, r2, r3
 80105be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105c0:	18d0      	adds	r0, r2, r3
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	899b      	ldrh	r3, [r3, #12]
 80105cc:	461a      	mov	r2, r3
 80105ce:	f7fd ff6b 	bl	800e4a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	899b      	ldrh	r3, [r3, #12]
 80105d6:	461a      	mov	r2, r3
 80105d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105da:	fb02 f303 	mul.w	r3, r2, r3
 80105de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80105e0:	e05c      	b.n	801069c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6a1b      	ldr	r3, [r3, #32]
 80105e6:	69ba      	ldr	r2, [r7, #24]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d02e      	beq.n	801064a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	7d1b      	ldrb	r3, [r3, #20]
 80105f0:	b25b      	sxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	da18      	bge.n	8010628 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	7858      	ldrb	r0, [r3, #1]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6a1a      	ldr	r2, [r3, #32]
 8010604:	2301      	movs	r3, #1
 8010606:	f7fd fe8f 	bl	800e328 <disk_write>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d004      	beq.n	801061a <f_read+0x202>
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2201      	movs	r2, #1
 8010614:	755a      	strb	r2, [r3, #21]
 8010616:	2301      	movs	r3, #1
 8010618:	e059      	b.n	80106ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	7d1b      	ldrb	r3, [r3, #20]
 801061e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010622:	b2da      	uxtb	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	7858      	ldrb	r0, [r3, #1]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010632:	2301      	movs	r3, #1
 8010634:	69ba      	ldr	r2, [r7, #24]
 8010636:	f7fd fe57 	bl	800e2e8 <disk_read>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d004      	beq.n	801064a <f_read+0x232>
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2201      	movs	r2, #1
 8010644:	755a      	strb	r2, [r3, #21]
 8010646:	2301      	movs	r3, #1
 8010648:	e041      	b.n	80106ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	69ba      	ldr	r2, [r7, #24]
 801064e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	899b      	ldrh	r3, [r3, #12]
 8010654:	4618      	mov	r0, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	8992      	ldrh	r2, [r2, #12]
 801065e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010662:	fb02 f201 	mul.w	r2, r2, r1
 8010666:	1a9b      	subs	r3, r3, r2
 8010668:	1ac3      	subs	r3, r0, r3
 801066a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801066c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	429a      	cmp	r2, r3
 8010672:	d901      	bls.n	8010678 <f_read+0x260>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	8992      	ldrh	r2, [r2, #12]
 8010686:	fbb3 f0f2 	udiv	r0, r3, r2
 801068a:	fb02 f200 	mul.w	r2, r2, r0
 801068e:	1a9b      	subs	r3, r3, r2
 8010690:	440b      	add	r3, r1
 8010692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010694:	4619      	mov	r1, r3
 8010696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010698:	f7fd ff06 	bl	800e4a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801069c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a0:	4413      	add	r3, r2
 80106a2:	627b      	str	r3, [r7, #36]	; 0x24
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	699a      	ldr	r2, [r3, #24]
 80106a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106aa:	441a      	add	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	619a      	str	r2, [r3, #24]
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b6:	441a      	add	r2, r3
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	601a      	str	r2, [r3, #0]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f47f aee1 	bne.w	801048e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3738      	adds	r7, #56	; 0x38
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b08c      	sub	sp, #48	; 0x30
 80106da:	af00      	add	r7, sp, #0
 80106dc:	60f8      	str	r0, [r7, #12]
 80106de:	60b9      	str	r1, [r7, #8]
 80106e0:	607a      	str	r2, [r7, #4]
 80106e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	2200      	movs	r2, #0
 80106ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	f107 0210 	add.w	r2, r7, #16
 80106f4:	4611      	mov	r1, r2
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fc44 	bl	800ff84 <validate>
 80106fc:	4603      	mov	r3, r0
 80106fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010706:	2b00      	cmp	r3, #0
 8010708:	d107      	bne.n	801071a <f_write+0x44>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	7d5b      	ldrb	r3, [r3, #21]
 801070e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010716:	2b00      	cmp	r3, #0
 8010718:	d002      	beq.n	8010720 <f_write+0x4a>
 801071a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801071e:	e16a      	b.n	80109f6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	7d1b      	ldrb	r3, [r3, #20]
 8010724:	f003 0302 	and.w	r3, r3, #2
 8010728:	2b00      	cmp	r3, #0
 801072a:	d101      	bne.n	8010730 <f_write+0x5a>
 801072c:	2307      	movs	r3, #7
 801072e:	e162      	b.n	80109f6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	699a      	ldr	r2, [r3, #24]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	441a      	add	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	699b      	ldr	r3, [r3, #24]
 801073c:	429a      	cmp	r2, r3
 801073e:	f080 814c 	bcs.w	80109da <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	699b      	ldr	r3, [r3, #24]
 8010746:	43db      	mvns	r3, r3
 8010748:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801074a:	e146      	b.n	80109da <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	699b      	ldr	r3, [r3, #24]
 8010750:	693a      	ldr	r2, [r7, #16]
 8010752:	8992      	ldrh	r2, [r2, #12]
 8010754:	fbb3 f1f2 	udiv	r1, r3, r2
 8010758:	fb02 f201 	mul.w	r2, r2, r1
 801075c:	1a9b      	subs	r3, r3, r2
 801075e:	2b00      	cmp	r3, #0
 8010760:	f040 80f1 	bne.w	8010946 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	699b      	ldr	r3, [r3, #24]
 8010768:	693a      	ldr	r2, [r7, #16]
 801076a:	8992      	ldrh	r2, [r2, #12]
 801076c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010770:	693a      	ldr	r2, [r7, #16]
 8010772:	8952      	ldrh	r2, [r2, #10]
 8010774:	3a01      	subs	r2, #1
 8010776:	4013      	ands	r3, r2
 8010778:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d143      	bne.n	8010808 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d10c      	bne.n	80107a2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	2b00      	cmp	r3, #0
 8010792:	d11a      	bne.n	80107ca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2100      	movs	r1, #0
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe fbbc 	bl	800ef16 <create_chain>
 801079e:	62b8      	str	r0, [r7, #40]	; 0x28
 80107a0:	e013      	b.n	80107ca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d007      	beq.n	80107ba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	699b      	ldr	r3, [r3, #24]
 80107ae:	4619      	mov	r1, r3
 80107b0:	68f8      	ldr	r0, [r7, #12]
 80107b2:	f7fe fc48 	bl	800f046 <clmt_clust>
 80107b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80107b8:	e007      	b.n	80107ca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	69db      	ldr	r3, [r3, #28]
 80107c0:	4619      	mov	r1, r3
 80107c2:	4610      	mov	r0, r2
 80107c4:	f7fe fba7 	bl	800ef16 <create_chain>
 80107c8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f000 8109 	beq.w	80109e4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d104      	bne.n	80107e2 <f_write+0x10c>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2202      	movs	r2, #2
 80107dc:	755a      	strb	r2, [r3, #21]
 80107de:	2302      	movs	r3, #2
 80107e0:	e109      	b.n	80109f6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80107e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e8:	d104      	bne.n	80107f4 <f_write+0x11e>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2201      	movs	r2, #1
 80107ee:	755a      	strb	r2, [r3, #21]
 80107f0:	2301      	movs	r3, #1
 80107f2:	e100      	b.n	80109f6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	689b      	ldr	r3, [r3, #8]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d102      	bne.n	8010808 <f_write+0x132>
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010806:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	7d1b      	ldrb	r3, [r3, #20]
 801080c:	b25b      	sxtb	r3, r3
 801080e:	2b00      	cmp	r3, #0
 8010810:	da18      	bge.n	8010844 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	7858      	ldrb	r0, [r3, #1]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6a1a      	ldr	r2, [r3, #32]
 8010820:	2301      	movs	r3, #1
 8010822:	f7fd fd81 	bl	800e328 <disk_write>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <f_write+0x160>
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2201      	movs	r2, #1
 8010830:	755a      	strb	r2, [r3, #21]
 8010832:	2301      	movs	r3, #1
 8010834:	e0df      	b.n	80109f6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	7d1b      	ldrb	r3, [r3, #20]
 801083a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801083e:	b2da      	uxtb	r2, r3
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010844:	693a      	ldr	r2, [r7, #16]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	4619      	mov	r1, r3
 801084c:	4610      	mov	r0, r2
 801084e:	f7fe f8f7 	bl	800ea40 <clust2sect>
 8010852:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d104      	bne.n	8010864 <f_write+0x18e>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2202      	movs	r2, #2
 801085e:	755a      	strb	r2, [r3, #21]
 8010860:	2302      	movs	r3, #2
 8010862:	e0c8      	b.n	80109f6 <f_write+0x320>
			sect += csect;
 8010864:	697a      	ldr	r2, [r7, #20]
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	4413      	add	r3, r2
 801086a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	899b      	ldrh	r3, [r3, #12]
 8010870:	461a      	mov	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	fbb3 f3f2 	udiv	r3, r3, r2
 8010878:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801087a:	6a3b      	ldr	r3, [r7, #32]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d043      	beq.n	8010908 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010880:	69ba      	ldr	r2, [r7, #24]
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	4413      	add	r3, r2
 8010886:	693a      	ldr	r2, [r7, #16]
 8010888:	8952      	ldrh	r2, [r2, #10]
 801088a:	4293      	cmp	r3, r2
 801088c:	d905      	bls.n	801089a <f_write+0x1c4>
					cc = fs->csize - csect;
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	895b      	ldrh	r3, [r3, #10]
 8010892:	461a      	mov	r2, r3
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	7858      	ldrb	r0, [r3, #1]
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	69f9      	ldr	r1, [r7, #28]
 80108a4:	f7fd fd40 	bl	800e328 <disk_write>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d004      	beq.n	80108b8 <f_write+0x1e2>
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2201      	movs	r2, #1
 80108b2:	755a      	strb	r2, [r3, #21]
 80108b4:	2301      	movs	r3, #1
 80108b6:	e09e      	b.n	80109f6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6a1a      	ldr	r2, [r3, #32]
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	6a3a      	ldr	r2, [r7, #32]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d918      	bls.n	80108f8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6a1a      	ldr	r2, [r3, #32]
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	693a      	ldr	r2, [r7, #16]
 80108d6:	8992      	ldrh	r2, [r2, #12]
 80108d8:	fb02 f303 	mul.w	r3, r2, r3
 80108dc:	69fa      	ldr	r2, [r7, #28]
 80108de:	18d1      	adds	r1, r2, r3
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	899b      	ldrh	r3, [r3, #12]
 80108e4:	461a      	mov	r2, r3
 80108e6:	f7fd fddf 	bl	800e4a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	7d1b      	ldrb	r3, [r3, #20]
 80108ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108f2:	b2da      	uxtb	r2, r3
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	899b      	ldrh	r3, [r3, #12]
 80108fc:	461a      	mov	r2, r3
 80108fe:	6a3b      	ldr	r3, [r7, #32]
 8010900:	fb02 f303 	mul.w	r3, r2, r3
 8010904:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010906:	e04b      	b.n	80109a0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6a1b      	ldr	r3, [r3, #32]
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	429a      	cmp	r2, r3
 8010910:	d016      	beq.n	8010940 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	699a      	ldr	r2, [r3, #24]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801091a:	429a      	cmp	r2, r3
 801091c:	d210      	bcs.n	8010940 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	7858      	ldrb	r0, [r3, #1]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010928:	2301      	movs	r3, #1
 801092a:	697a      	ldr	r2, [r7, #20]
 801092c:	f7fd fcdc 	bl	800e2e8 <disk_read>
 8010930:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010932:	2b00      	cmp	r3, #0
 8010934:	d004      	beq.n	8010940 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2201      	movs	r2, #1
 801093a:	755a      	strb	r2, [r3, #21]
 801093c:	2301      	movs	r3, #1
 801093e:	e05a      	b.n	80109f6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	697a      	ldr	r2, [r7, #20]
 8010944:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	899b      	ldrh	r3, [r3, #12]
 801094a:	4618      	mov	r0, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	699b      	ldr	r3, [r3, #24]
 8010950:	693a      	ldr	r2, [r7, #16]
 8010952:	8992      	ldrh	r2, [r2, #12]
 8010954:	fbb3 f1f2 	udiv	r1, r3, r2
 8010958:	fb02 f201 	mul.w	r2, r2, r1
 801095c:	1a9b      	subs	r3, r3, r2
 801095e:	1ac3      	subs	r3, r0, r3
 8010960:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	429a      	cmp	r2, r3
 8010968:	d901      	bls.n	801096e <f_write+0x298>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	699b      	ldr	r3, [r3, #24]
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	8992      	ldrh	r2, [r2, #12]
 801097c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010980:	fb02 f200 	mul.w	r2, r2, r0
 8010984:	1a9b      	subs	r3, r3, r2
 8010986:	440b      	add	r3, r1
 8010988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801098a:	69f9      	ldr	r1, [r7, #28]
 801098c:	4618      	mov	r0, r3
 801098e:	f7fd fd8b 	bl	800e4a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	7d1b      	ldrb	r3, [r3, #20]
 8010996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801099a:	b2da      	uxtb	r2, r3
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80109a0:	69fa      	ldr	r2, [r7, #28]
 80109a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a4:	4413      	add	r3, r2
 80109a6:	61fb      	str	r3, [r7, #28]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	699a      	ldr	r2, [r3, #24]
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	441a      	add	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	619a      	str	r2, [r3, #24]
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	68da      	ldr	r2, [r3, #12]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	699b      	ldr	r3, [r3, #24]
 80109bc:	429a      	cmp	r2, r3
 80109be:	bf38      	it	cc
 80109c0:	461a      	movcc	r2, r3
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	60da      	str	r2, [r3, #12]
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	441a      	add	r2, r3
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f47f aeb5 	bne.w	801074c <f_write+0x76>
 80109e2:	e000      	b.n	80109e6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80109e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	7d1b      	ldrb	r3, [r3, #20]
 80109ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3730      	adds	r7, #48	; 0x30
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
	...

08010a00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b086      	sub	sp, #24
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f107 0208 	add.w	r2, r7, #8
 8010a0e:	4611      	mov	r1, r2
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7ff fab7 	bl	800ff84 <validate>
 8010a16:	4603      	mov	r3, r0
 8010a18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010a1a:	7dfb      	ldrb	r3, [r7, #23]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d167      	bne.n	8010af0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	7d1b      	ldrb	r3, [r3, #20]
 8010a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d061      	beq.n	8010af0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	7d1b      	ldrb	r3, [r3, #20]
 8010a30:	b25b      	sxtb	r3, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	da15      	bge.n	8010a62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	7858      	ldrb	r0, [r3, #1]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a1a      	ldr	r2, [r3, #32]
 8010a44:	2301      	movs	r3, #1
 8010a46:	f7fd fc6f 	bl	800e328 <disk_write>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d001      	beq.n	8010a54 <f_sync+0x54>
 8010a50:	2301      	movs	r3, #1
 8010a52:	e04e      	b.n	8010af2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	7d1b      	ldrb	r3, [r3, #20]
 8010a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010a62:	4b26      	ldr	r3, [pc, #152]	; (8010afc <f_sync+0xfc>)
 8010a64:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010a66:	68ba      	ldr	r2, [r7, #8]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f7fd ff48 	bl	800e904 <move_window>
 8010a74:	4603      	mov	r3, r0
 8010a76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d138      	bne.n	8010af0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a82:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	330b      	adds	r3, #11
 8010a88:	781a      	ldrb	r2, [r3, #0]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	330b      	adds	r3, #11
 8010a8e:	f042 0220 	orr.w	r2, r2, #32
 8010a92:	b2d2      	uxtb	r2, r2
 8010a94:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6818      	ldr	r0, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	68f9      	ldr	r1, [r7, #12]
 8010aa2:	f7fe fccd 	bl	800f440 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f103 021c 	add.w	r2, r3, #28
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f7fd fccc 	bl	800e450 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	3316      	adds	r3, #22
 8010abc:	6939      	ldr	r1, [r7, #16]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fd fcc6 	bl	800e450 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	3312      	adds	r3, #18
 8010ac8:	2100      	movs	r1, #0
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fd fca5 	bl	800e41a <st_word>
					fs->wflag = 1;
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fd ff41 	bl	800e960 <sync_fs>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7d1b      	ldrb	r3, [r3, #20]
 8010ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aea:	b2da      	uxtb	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3718      	adds	r7, #24
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	274a0000 	.word	0x274a0000

08010b00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff ff79 	bl	8010a00 <f_sync>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d118      	bne.n	8010b4a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f107 0208 	add.w	r2, r7, #8
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fa2f 	bl	800ff84 <validate>
 8010b26:	4603      	mov	r3, r0
 8010b28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b2a:	7bfb      	ldrb	r3, [r7, #15]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10c      	bne.n	8010b4a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	691b      	ldr	r3, [r3, #16]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fd fe41 	bl	800e7bc <dec_lock>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b3e:	7bfb      	ldrb	r3, [r7, #15]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d102      	bne.n	8010b4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3710      	adds	r7, #16
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010b54:	b590      	push	{r4, r7, lr}
 8010b56:	b091      	sub	sp, #68	; 0x44
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010b5c:	f107 0108 	add.w	r1, r7, #8
 8010b60:	1d3b      	adds	r3, r7, #4
 8010b62:	2200      	movs	r2, #0
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7fe ff87 	bl	800fa78 <find_volume>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010b70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d131      	bne.n	8010bdc <f_chdir+0x88>
		dj.obj.fs = fs;
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	f107 030c 	add.w	r3, r7, #12
 8010b82:	4611      	mov	r1, r2
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe fe47 	bl	800f818 <follow_path>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8010b90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d11a      	bne.n	8010bce <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010b98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010b9c:	b25b      	sxtb	r3, r3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da03      	bge.n	8010baa <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	697a      	ldr	r2, [r7, #20]
 8010ba6:	619a      	str	r2, [r3, #24]
 8010ba8:	e011      	b.n	8010bce <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010baa:	7cbb      	ldrb	r3, [r7, #18]
 8010bac:	f003 0310 	and.w	r3, r3, #16
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d009      	beq.n	8010bc8 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bb8:	68bc      	ldr	r4, [r7, #8]
 8010bba:	4611      	mov	r1, r2
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7fe fc20 	bl	800f402 <ld_clust>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	61a3      	str	r3, [r4, #24]
 8010bc6:	e002      	b.n	8010bce <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010bc8:	2305      	movs	r3, #5
 8010bca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010bce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010bd2:	2b04      	cmp	r3, #4
 8010bd4:	d102      	bne.n	8010bdc <f_chdir+0x88>
 8010bd6:	2305      	movs	r3, #5
 8010bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8010bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3744      	adds	r7, #68	; 0x44
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd90      	pop	{r4, r7, pc}

08010be8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b090      	sub	sp, #64	; 0x40
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f107 0208 	add.w	r2, r7, #8
 8010bf8:	4611      	mov	r1, r2
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff f9c2 	bl	800ff84 <validate>
 8010c00:	4603      	mov	r3, r0
 8010c02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010c06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d103      	bne.n	8010c16 <f_lseek+0x2e>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	7d5b      	ldrb	r3, [r3, #21]
 8010c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010c16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d002      	beq.n	8010c24 <f_lseek+0x3c>
 8010c1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c22:	e201      	b.n	8011028 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 80d9 	beq.w	8010de0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c34:	d15a      	bne.n	8010cec <f_lseek+0x104>
			tbl = fp->cltbl;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c3a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	1d1a      	adds	r2, r3, #4
 8010c40:	627a      	str	r2, [r7, #36]	; 0x24
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	617b      	str	r3, [r7, #20]
 8010c46:	2302      	movs	r3, #2
 8010c48:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d03a      	beq.n	8010ccc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c58:	613b      	str	r3, [r7, #16]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	3302      	adds	r3, #2
 8010c62:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fd ff03 	bl	800ea7e <get_fat>
 8010c78:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d804      	bhi.n	8010c8a <f_lseek+0xa2>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2202      	movs	r2, #2
 8010c84:	755a      	strb	r2, [r3, #21]
 8010c86:	2302      	movs	r3, #2
 8010c88:	e1ce      	b.n	8011028 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c90:	d104      	bne.n	8010c9c <f_lseek+0xb4>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2201      	movs	r2, #1
 8010c96:	755a      	strb	r2, [r3, #21]
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e1c5      	b.n	8011028 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d0de      	beq.n	8010c64 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d809      	bhi.n	8010cc2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	1d1a      	adds	r2, r3, #4
 8010cb2:	627a      	str	r2, [r7, #36]	; 0x24
 8010cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cb6:	601a      	str	r2, [r3, #0]
 8010cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cba:	1d1a      	adds	r2, r3, #4
 8010cbc:	627a      	str	r2, [r7, #36]	; 0x24
 8010cbe:	693a      	ldr	r2, [r7, #16]
 8010cc0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	69db      	ldr	r3, [r3, #28]
 8010cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d3c4      	bcc.n	8010c56 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cd2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d803      	bhi.n	8010ce4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	2200      	movs	r2, #0
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e19f      	b.n	8011024 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010ce4:	2311      	movs	r3, #17
 8010ce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010cea:	e19b      	b.n	8011024 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d902      	bls.n	8010cfc <f_lseek+0x114>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	683a      	ldr	r2, [r7, #0]
 8010d00:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f000 818d 	beq.w	8011024 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	4619      	mov	r1, r3
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7fe f998 	bl	800f046 <clmt_clust>
 8010d16:	4602      	mov	r2, r0
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010d1c:	68ba      	ldr	r2, [r7, #8]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	69db      	ldr	r3, [r3, #28]
 8010d22:	4619      	mov	r1, r3
 8010d24:	4610      	mov	r0, r2
 8010d26:	f7fd fe8b 	bl	800ea40 <clust2sect>
 8010d2a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d104      	bne.n	8010d3c <f_lseek+0x154>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2202      	movs	r2, #2
 8010d36:	755a      	strb	r2, [r3, #21]
 8010d38:	2302      	movs	r3, #2
 8010d3a:	e175      	b.n	8011028 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	8992      	ldrh	r2, [r2, #12]
 8010d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	8952      	ldrh	r2, [r2, #10]
 8010d4c:	3a01      	subs	r2, #1
 8010d4e:	4013      	ands	r3, r2
 8010d50:	69ba      	ldr	r2, [r7, #24]
 8010d52:	4413      	add	r3, r2
 8010d54:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	699b      	ldr	r3, [r3, #24]
 8010d5a:	68ba      	ldr	r2, [r7, #8]
 8010d5c:	8992      	ldrh	r2, [r2, #12]
 8010d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d62:	fb02 f201 	mul.w	r2, r2, r1
 8010d66:	1a9b      	subs	r3, r3, r2
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 815b 	beq.w	8011024 <f_lseek+0x43c>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	69ba      	ldr	r2, [r7, #24]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	f000 8155 	beq.w	8011024 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	7d1b      	ldrb	r3, [r3, #20]
 8010d7e:	b25b      	sxtb	r3, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	da18      	bge.n	8010db6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	7858      	ldrb	r0, [r3, #1]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6a1a      	ldr	r2, [r3, #32]
 8010d92:	2301      	movs	r3, #1
 8010d94:	f7fd fac8 	bl	800e328 <disk_write>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d004      	beq.n	8010da8 <f_lseek+0x1c0>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	755a      	strb	r2, [r3, #21]
 8010da4:	2301      	movs	r3, #1
 8010da6:	e13f      	b.n	8011028 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	7d1b      	ldrb	r3, [r3, #20]
 8010dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010db0:	b2da      	uxtb	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	7858      	ldrb	r0, [r3, #1]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	69ba      	ldr	r2, [r7, #24]
 8010dc4:	f7fd fa90 	bl	800e2e8 <disk_read>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d004      	beq.n	8010dd8 <f_lseek+0x1f0>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	755a      	strb	r2, [r3, #21]
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e127      	b.n	8011028 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	69ba      	ldr	r2, [r7, #24]
 8010ddc:	621a      	str	r2, [r3, #32]
 8010dde:	e121      	b.n	8011024 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d908      	bls.n	8010dfc <f_lseek+0x214>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	7d1b      	ldrb	r3, [r3, #20]
 8010dee:	f003 0302 	and.w	r3, r3, #2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d102      	bne.n	8010dfc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	699b      	ldr	r3, [r3, #24]
 8010e00:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	637b      	str	r3, [r7, #52]	; 0x34
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e0a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f000 80b5 	beq.w	8010f7e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	895b      	ldrh	r3, [r3, #10]
 8010e18:	461a      	mov	r2, r3
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	899b      	ldrh	r3, [r3, #12]
 8010e1e:	fb03 f302 	mul.w	r3, r3, r2
 8010e22:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010e24:	6a3b      	ldr	r3, [r7, #32]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d01b      	beq.n	8010e62 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	1e5a      	subs	r2, r3, #1
 8010e2e:	69fb      	ldr	r3, [r7, #28]
 8010e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8010e34:	6a3b      	ldr	r3, [r7, #32]
 8010e36:	1e59      	subs	r1, r3, #1
 8010e38:	69fb      	ldr	r3, [r7, #28]
 8010e3a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d30f      	bcc.n	8010e62 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010e42:	6a3b      	ldr	r3, [r7, #32]
 8010e44:	1e5a      	subs	r2, r3, #1
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	425b      	negs	r3, r3
 8010e4a:	401a      	ands	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	699b      	ldr	r3, [r3, #24]
 8010e54:	683a      	ldr	r2, [r7, #0]
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	69db      	ldr	r3, [r3, #28]
 8010e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e60:	e022      	b.n	8010ea8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	689b      	ldr	r3, [r3, #8]
 8010e66:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d119      	bne.n	8010ea2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2100      	movs	r1, #0
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fe f84f 	bl	800ef16 <create_chain>
 8010e78:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d104      	bne.n	8010e8a <f_lseek+0x2a2>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2202      	movs	r2, #2
 8010e84:	755a      	strb	r2, [r3, #21]
 8010e86:	2302      	movs	r3, #2
 8010e88:	e0ce      	b.n	8011028 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e90:	d104      	bne.n	8010e9c <f_lseek+0x2b4>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2201      	movs	r2, #1
 8010e96:	755a      	strb	r2, [r3, #21]
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e0c5      	b.n	8011028 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ea0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ea6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d067      	beq.n	8010f7e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010eae:	e03a      	b.n	8010f26 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	1ad3      	subs	r3, r2, r3
 8010eb6:	603b      	str	r3, [r7, #0]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	699a      	ldr	r2, [r3, #24]
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	441a      	add	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	7d1b      	ldrb	r3, [r3, #20]
 8010ec8:	f003 0302 	and.w	r3, r3, #2
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00b      	beq.n	8010ee8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fe f81e 	bl	800ef16 <create_chain>
 8010eda:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d108      	bne.n	8010ef4 <f_lseek+0x30c>
							ofs = 0; break;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	603b      	str	r3, [r7, #0]
 8010ee6:	e022      	b.n	8010f2e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fd fdc6 	bl	800ea7e <get_fat>
 8010ef2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efa:	d104      	bne.n	8010f06 <f_lseek+0x31e>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2201      	movs	r2, #1
 8010f00:	755a      	strb	r2, [r3, #21]
 8010f02:	2301      	movs	r3, #1
 8010f04:	e090      	b.n	8011028 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d904      	bls.n	8010f16 <f_lseek+0x32e>
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	69db      	ldr	r3, [r3, #28]
 8010f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d304      	bcc.n	8010f20 <f_lseek+0x338>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2202      	movs	r2, #2
 8010f1a:	755a      	strb	r2, [r3, #21]
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	e083      	b.n	8011028 <f_lseek+0x440>
					fp->clust = clst;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f24:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010f26:	683a      	ldr	r2, [r7, #0]
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d8c0      	bhi.n	8010eb0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	699a      	ldr	r2, [r3, #24]
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	441a      	add	r2, r3
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	899b      	ldrh	r3, [r3, #12]
 8010f3e:	461a      	mov	r2, r3
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f46:	fb02 f201 	mul.w	r2, r2, r1
 8010f4a:	1a9b      	subs	r3, r3, r2
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d016      	beq.n	8010f7e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fd fd73 	bl	800ea40 <clust2sect>
 8010f5a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d104      	bne.n	8010f6c <f_lseek+0x384>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2202      	movs	r2, #2
 8010f66:	755a      	strb	r2, [r3, #21]
 8010f68:	2302      	movs	r3, #2
 8010f6a:	e05d      	b.n	8011028 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	899b      	ldrh	r3, [r3, #12]
 8010f70:	461a      	mov	r2, r3
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f7a:	4413      	add	r3, r2
 8010f7c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	699a      	ldr	r2, [r3, #24]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d90a      	bls.n	8010fa0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	699a      	ldr	r2, [r3, #24]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	7d1b      	ldrb	r3, [r3, #20]
 8010f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	699b      	ldr	r3, [r3, #24]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	8992      	ldrh	r2, [r2, #12]
 8010fa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fac:	fb02 f201 	mul.w	r2, r2, r1
 8010fb0:	1a9b      	subs	r3, r3, r2
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d036      	beq.n	8011024 <f_lseek+0x43c>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
 8010fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d031      	beq.n	8011024 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	7d1b      	ldrb	r3, [r3, #20]
 8010fc4:	b25b      	sxtb	r3, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	da18      	bge.n	8010ffc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	7858      	ldrb	r0, [r3, #1]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a1a      	ldr	r2, [r3, #32]
 8010fd8:	2301      	movs	r3, #1
 8010fda:	f7fd f9a5 	bl	800e328 <disk_write>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d004      	beq.n	8010fee <f_lseek+0x406>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	755a      	strb	r2, [r3, #21]
 8010fea:	2301      	movs	r3, #1
 8010fec:	e01c      	b.n	8011028 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	7d1b      	ldrb	r3, [r3, #20]
 8010ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	7858      	ldrb	r0, [r3, #1]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011006:	2301      	movs	r3, #1
 8011008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801100a:	f7fd f96d 	bl	800e2e8 <disk_read>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d004      	beq.n	801101e <f_lseek+0x436>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	755a      	strb	r2, [r3, #21]
 801101a:	2301      	movs	r3, #1
 801101c:	e004      	b.n	8011028 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011022:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011024:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011028:	4618      	mov	r0, r3
 801102a:	3740      	adds	r7, #64	; 0x40
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b09e      	sub	sp, #120	; 0x78
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801103c:	f107 010c 	add.w	r1, r7, #12
 8011040:	1d3b      	adds	r3, r7, #4
 8011042:	2202      	movs	r2, #2
 8011044:	4618      	mov	r0, r3
 8011046:	f7fe fd17 	bl	800fa78 <find_volume>
 801104a:	4603      	mov	r3, r0
 801104c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011054:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011058:	2b00      	cmp	r3, #0
 801105a:	f040 80a4 	bne.w	80111a6 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011064:	4611      	mov	r1, r2
 8011066:	4618      	mov	r0, r3
 8011068:	f7fe fbd6 	bl	800f818 <follow_path>
 801106c:	4603      	mov	r3, r0
 801106e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011072:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <f_unlink+0x5c>
 801107a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801107e:	f003 0320 	and.w	r3, r3, #32
 8011082:	2b00      	cmp	r3, #0
 8011084:	d002      	beq.n	801108c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011086:	2306      	movs	r3, #6
 8011088:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801108c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011090:	2b00      	cmp	r3, #0
 8011092:	d108      	bne.n	80110a6 <f_unlink+0x76>
 8011094:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011098:	2102      	movs	r1, #2
 801109a:	4618      	mov	r0, r3
 801109c:	f7fd fa82 	bl	800e5a4 <chk_lock>
 80110a0:	4603      	mov	r3, r0
 80110a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80110a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d17b      	bne.n	80111a6 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80110ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80110b2:	b25b      	sxtb	r3, r3
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	da03      	bge.n	80110c0 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80110b8:	2306      	movs	r3, #6
 80110ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80110be:	e008      	b.n	80110d2 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80110c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80110c4:	f003 0301 	and.w	r3, r3, #1
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d002      	beq.n	80110d2 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80110cc:	2307      	movs	r3, #7
 80110ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80110d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d13d      	bne.n	8011156 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80110de:	4611      	mov	r1, r2
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fe f98e 	bl	800f402 <ld_clust>
 80110e6:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80110e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80110ec:	f003 0310 	and.w	r3, r3, #16
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d030      	beq.n	8011156 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	699b      	ldr	r3, [r3, #24]
 80110f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d103      	bne.n	8011106 <f_unlink+0xd6>
						res = FR_DENIED;
 80110fe:	2307      	movs	r3, #7
 8011100:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011104:	e027      	b.n	8011156 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801110a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801110c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801110e:	f107 0310 	add.w	r3, r7, #16
 8011112:	2100      	movs	r1, #0
 8011114:	4618      	mov	r0, r3
 8011116:	f7fd ffce 	bl	800f0b6 <dir_sdi>
 801111a:	4603      	mov	r3, r0
 801111c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011120:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011124:	2b00      	cmp	r3, #0
 8011126:	d116      	bne.n	8011156 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011128:	f107 0310 	add.w	r3, r7, #16
 801112c:	2100      	movs	r1, #0
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe f9a6 	bl	800f480 <dir_read>
 8011134:	4603      	mov	r3, r0
 8011136:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801113a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801113e:	2b00      	cmp	r3, #0
 8011140:	d102      	bne.n	8011148 <f_unlink+0x118>
 8011142:	2307      	movs	r3, #7
 8011144:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011148:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801114c:	2b04      	cmp	r3, #4
 801114e:	d102      	bne.n	8011156 <f_unlink+0x126>
 8011150:	2300      	movs	r3, #0
 8011152:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011156:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801115a:	2b00      	cmp	r3, #0
 801115c:	d123      	bne.n	80111a6 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801115e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011162:	4618      	mov	r0, r3
 8011164:	f7fe fa70 	bl	800f648 <dir_remove>
 8011168:	4603      	mov	r3, r0
 801116a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801116e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011172:	2b00      	cmp	r3, #0
 8011174:	d10c      	bne.n	8011190 <f_unlink+0x160>
 8011176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011178:	2b00      	cmp	r3, #0
 801117a:	d009      	beq.n	8011190 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801117c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011180:	2200      	movs	r2, #0
 8011182:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011184:	4618      	mov	r0, r3
 8011186:	f7fd fe61 	bl	800ee4c <remove_chain>
 801118a:	4603      	mov	r3, r0
 801118c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011190:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011194:	2b00      	cmp	r3, #0
 8011196:	d106      	bne.n	80111a6 <f_unlink+0x176>
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	4618      	mov	r0, r3
 801119c:	f7fd fbe0 	bl	800e960 <sync_fs>
 80111a0:	4603      	mov	r3, r0
 80111a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80111a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3778      	adds	r7, #120	; 0x78
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
	...

080111b4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b096      	sub	sp, #88	; 0x58
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80111bc:	f107 0108 	add.w	r1, r7, #8
 80111c0:	1d3b      	adds	r3, r7, #4
 80111c2:	2202      	movs	r2, #2
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fe fc57 	bl	800fa78 <find_volume>
 80111ca:	4603      	mov	r3, r0
 80111cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80111d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f040 80fe 	bne.w	80113da <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	f107 030c 	add.w	r3, r7, #12
 80111e4:	4611      	mov	r1, r2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fe fb16 	bl	800f818 <follow_path>
 80111ec:	4603      	mov	r3, r0
 80111ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80111f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <f_mkdir+0x4c>
 80111fa:	2308      	movs	r3, #8
 80111fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011204:	2b04      	cmp	r3, #4
 8011206:	d108      	bne.n	801121a <f_mkdir+0x66>
 8011208:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801120c:	f003 0320 	and.w	r3, r3, #32
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011214:	2306      	movs	r3, #6
 8011216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801121a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801121e:	2b04      	cmp	r3, #4
 8011220:	f040 80db 	bne.w	80113da <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011224:	f107 030c 	add.w	r3, r7, #12
 8011228:	2100      	movs	r1, #0
 801122a:	4618      	mov	r0, r3
 801122c:	f7fd fe73 	bl	800ef16 <create_chain>
 8011230:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	895b      	ldrh	r3, [r3, #10]
 8011236:	461a      	mov	r2, r3
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	899b      	ldrh	r3, [r3, #12]
 801123c:	fb03 f302 	mul.w	r3, r3, r2
 8011240:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011242:	2300      	movs	r3, #0
 8011244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801124a:	2b00      	cmp	r3, #0
 801124c:	d102      	bne.n	8011254 <f_mkdir+0xa0>
 801124e:	2307      	movs	r3, #7
 8011250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011256:	2b01      	cmp	r3, #1
 8011258:	d102      	bne.n	8011260 <f_mkdir+0xac>
 801125a:	2302      	movs	r3, #2
 801125c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011266:	d102      	bne.n	801126e <f_mkdir+0xba>
 8011268:	2301      	movs	r3, #1
 801126a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801126e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011272:	2b00      	cmp	r3, #0
 8011274:	d106      	bne.n	8011284 <f_mkdir+0xd0>
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	4618      	mov	r0, r3
 801127a:	f7fd faff 	bl	800e87c <sync_window>
 801127e:	4603      	mov	r3, r0
 8011280:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011284:	4b58      	ldr	r3, [pc, #352]	; (80113e8 <f_mkdir+0x234>)
 8011286:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801128c:	2b00      	cmp	r3, #0
 801128e:	d16c      	bne.n	801136a <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011294:	4618      	mov	r0, r3
 8011296:	f7fd fbd3 	bl	800ea40 <clust2sect>
 801129a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	3338      	adds	r3, #56	; 0x38
 80112a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	461a      	mov	r2, r3
 80112a8:	2100      	movs	r1, #0
 80112aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112ac:	f7fd f91d 	bl	800e4ea <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80112b0:	220b      	movs	r2, #11
 80112b2:	2120      	movs	r1, #32
 80112b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112b6:	f7fd f918 	bl	800e4ea <mem_set>
					dir[DIR_Name] = '.';
 80112ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112bc:	222e      	movs	r2, #46	; 0x2e
 80112be:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80112c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c2:	330b      	adds	r3, #11
 80112c4:	2210      	movs	r2, #16
 80112c6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80112c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ca:	3316      	adds	r3, #22
 80112cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fd f8be 	bl	800e450 <st_dword>
					st_clust(fs, dir, dcl);
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fe f8b0 	bl	800f440 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80112e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e2:	3320      	adds	r3, #32
 80112e4:	2220      	movs	r2, #32
 80112e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fd f8dd 	bl	800e4a8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80112ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f0:	3321      	adds	r3, #33	; 0x21
 80112f2:	222e      	movs	r2, #46	; 0x2e
 80112f4:	701a      	strb	r2, [r3, #0]
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d106      	bne.n	8011310 <f_mkdir+0x15c>
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011308:	429a      	cmp	r2, r3
 801130a:	d101      	bne.n	8011310 <f_mkdir+0x15c>
 801130c:	2300      	movs	r3, #0
 801130e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011310:	68b8      	ldr	r0, [r7, #8]
 8011312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011314:	3320      	adds	r3, #32
 8011316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011318:	4619      	mov	r1, r3
 801131a:	f7fe f891 	bl	800f440 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	895b      	ldrh	r3, [r3, #10]
 8011322:	653b      	str	r3, [r7, #80]	; 0x50
 8011324:	e01c      	b.n	8011360 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011328:	1c5a      	adds	r2, r3, #1
 801132a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801132c:	68ba      	ldr	r2, [r7, #8]
 801132e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	2201      	movs	r2, #1
 8011334:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	4618      	mov	r0, r3
 801133a:	f7fd fa9f 	bl	800e87c <sync_window>
 801133e:	4603      	mov	r3, r0
 8011340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011348:	2b00      	cmp	r3, #0
 801134a:	d10d      	bne.n	8011368 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	899b      	ldrh	r3, [r3, #12]
 8011350:	461a      	mov	r2, r3
 8011352:	2100      	movs	r1, #0
 8011354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011356:	f7fd f8c8 	bl	800e4ea <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801135a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801135c:	3b01      	subs	r3, #1
 801135e:	653b      	str	r3, [r7, #80]	; 0x50
 8011360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1df      	bne.n	8011326 <f_mkdir+0x172>
 8011366:	e000      	b.n	801136a <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011368:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801136a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801136e:	2b00      	cmp	r3, #0
 8011370:	d107      	bne.n	8011382 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011372:	f107 030c 	add.w	r3, r7, #12
 8011376:	4618      	mov	r0, r3
 8011378:	f7fe f934 	bl	800f5e4 <dir_register>
 801137c:	4603      	mov	r3, r0
 801137e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011386:	2b00      	cmp	r3, #0
 8011388:	d120      	bne.n	80113cc <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801138e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011390:	3316      	adds	r3, #22
 8011392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011394:	4618      	mov	r0, r3
 8011396:	f7fd f85b 	bl	800e450 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801139e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fe f84d 	bl	800f440 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80113a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a8:	330b      	adds	r3, #11
 80113aa:	2210      	movs	r2, #16
 80113ac:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2201      	movs	r2, #1
 80113b2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80113b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d10e      	bne.n	80113da <f_mkdir+0x226>
					res = sync_fs(fs);
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fd face 	bl	800e960 <sync_fs>
 80113c4:	4603      	mov	r3, r0
 80113c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80113ca:	e006      	b.n	80113da <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80113cc:	f107 030c 	add.w	r3, r7, #12
 80113d0:	2200      	movs	r2, #0
 80113d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fd fd39 	bl	800ee4c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80113da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3758      	adds	r7, #88	; 0x58
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	274a0000 	.word	0x274a0000

080113ec <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b088      	sub	sp, #32
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011400:	e017      	b.n	8011432 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011402:	f107 0310 	add.w	r3, r7, #16
 8011406:	f107 0114 	add.w	r1, r7, #20
 801140a:	2201      	movs	r2, #1
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff f803 	bl	8010418 <f_read>
		if (rc != 1) break;
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d112      	bne.n	801143e <f_gets+0x52>
		c = s[0];
 8011418:	7d3b      	ldrb	r3, [r7, #20]
 801141a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	61ba      	str	r2, [r7, #24]
 8011422:	7dfa      	ldrb	r2, [r7, #23]
 8011424:	701a      	strb	r2, [r3, #0]
		n++;
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	3301      	adds	r3, #1
 801142a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801142c:	7dfb      	ldrb	r3, [r7, #23]
 801142e:	2b0a      	cmp	r3, #10
 8011430:	d007      	beq.n	8011442 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	3b01      	subs	r3, #1
 8011436:	69fa      	ldr	r2, [r7, #28]
 8011438:	429a      	cmp	r2, r3
 801143a:	dbe2      	blt.n	8011402 <f_gets+0x16>
 801143c:	e002      	b.n	8011444 <f_gets+0x58>
		if (rc != 1) break;
 801143e:	bf00      	nop
 8011440:	e000      	b.n	8011444 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011442:	bf00      	nop
	}
	*p = 0;
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	2200      	movs	r2, #0
 8011448:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <f_gets+0x68>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	e000      	b.n	8011456 <f_gets+0x6a>
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3720      	adds	r7, #32
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
	...

08011460 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011460:	b480      	push	{r7}
 8011462:	b087      	sub	sp, #28
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	4613      	mov	r3, r2
 801146c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801146e:	2301      	movs	r3, #1
 8011470:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011472:	2300      	movs	r3, #0
 8011474:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011476:	4b1f      	ldr	r3, [pc, #124]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011478:	7a5b      	ldrb	r3, [r3, #9]
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	d131      	bne.n	80114e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011480:	4b1c      	ldr	r3, [pc, #112]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011482:	7a5b      	ldrb	r3, [r3, #9]
 8011484:	b2db      	uxtb	r3, r3
 8011486:	461a      	mov	r2, r3
 8011488:	4b1a      	ldr	r3, [pc, #104]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 801148a:	2100      	movs	r1, #0
 801148c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801148e:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011490:	7a5b      	ldrb	r3, [r3, #9]
 8011492:	b2db      	uxtb	r3, r3
 8011494:	4a17      	ldr	r2, [pc, #92]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	68fa      	ldr	r2, [r7, #12]
 801149c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801149e:	4b15      	ldr	r3, [pc, #84]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114a0:	7a5b      	ldrb	r3, [r3, #9]
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	461a      	mov	r2, r3
 80114a6:	4b13      	ldr	r3, [pc, #76]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114a8:	4413      	add	r3, r2
 80114aa:	79fa      	ldrb	r2, [r7, #7]
 80114ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80114ae:	4b11      	ldr	r3, [pc, #68]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114b0:	7a5b      	ldrb	r3, [r3, #9]
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	b2d1      	uxtb	r1, r2
 80114b8:	4a0e      	ldr	r2, [pc, #56]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114ba:	7251      	strb	r1, [r2, #9]
 80114bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80114be:	7dbb      	ldrb	r3, [r7, #22]
 80114c0:	3330      	adds	r3, #48	; 0x30
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	3301      	adds	r3, #1
 80114cc:	223a      	movs	r2, #58	; 0x3a
 80114ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	3302      	adds	r3, #2
 80114d4:	222f      	movs	r2, #47	; 0x2f
 80114d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	3303      	adds	r3, #3
 80114dc:	2200      	movs	r2, #0
 80114de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80114e0:	2300      	movs	r3, #0
 80114e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80114e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	371c      	adds	r7, #28
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	20036a88 	.word	0x20036a88

080114f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011502:	2200      	movs	r2, #0
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7ff ffaa 	bl	8011460 <FATFS_LinkDriverEx>
 801150c:	4603      	mov	r3, r0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <__cxa_guard_acquire>:
 8011516:	6803      	ldr	r3, [r0, #0]
 8011518:	07db      	lsls	r3, r3, #31
 801151a:	d406      	bmi.n	801152a <__cxa_guard_acquire+0x14>
 801151c:	7843      	ldrb	r3, [r0, #1]
 801151e:	b103      	cbz	r3, 8011522 <__cxa_guard_acquire+0xc>
 8011520:	deff      	udf	#255	; 0xff
 8011522:	2301      	movs	r3, #1
 8011524:	7043      	strb	r3, [r0, #1]
 8011526:	4618      	mov	r0, r3
 8011528:	4770      	bx	lr
 801152a:	2000      	movs	r0, #0
 801152c:	4770      	bx	lr

0801152e <__cxa_guard_release>:
 801152e:	2301      	movs	r3, #1
 8011530:	6003      	str	r3, [r0, #0]
 8011532:	4770      	bx	lr
 8011534:	0000      	movs	r0, r0
	...

08011538 <cos>:
 8011538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801153a:	ec51 0b10 	vmov	r0, r1, d0
 801153e:	4a1e      	ldr	r2, [pc, #120]	; (80115b8 <cos+0x80>)
 8011540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011544:	4293      	cmp	r3, r2
 8011546:	dc06      	bgt.n	8011556 <cos+0x1e>
 8011548:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80115b0 <cos+0x78>
 801154c:	f000 fb80 	bl	8011c50 <__kernel_cos>
 8011550:	ec51 0b10 	vmov	r0, r1, d0
 8011554:	e007      	b.n	8011566 <cos+0x2e>
 8011556:	4a19      	ldr	r2, [pc, #100]	; (80115bc <cos+0x84>)
 8011558:	4293      	cmp	r3, r2
 801155a:	dd09      	ble.n	8011570 <cos+0x38>
 801155c:	ee10 2a10 	vmov	r2, s0
 8011560:	460b      	mov	r3, r1
 8011562:	f7ee fea9 	bl	80002b8 <__aeabi_dsub>
 8011566:	ec41 0b10 	vmov	d0, r0, r1
 801156a:	b005      	add	sp, #20
 801156c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011570:	4668      	mov	r0, sp
 8011572:	f000 f8c9 	bl	8011708 <__ieee754_rem_pio2>
 8011576:	f000 0003 	and.w	r0, r0, #3
 801157a:	2801      	cmp	r0, #1
 801157c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011580:	ed9d 0b00 	vldr	d0, [sp]
 8011584:	d007      	beq.n	8011596 <cos+0x5e>
 8011586:	2802      	cmp	r0, #2
 8011588:	d00e      	beq.n	80115a8 <cos+0x70>
 801158a:	2800      	cmp	r0, #0
 801158c:	d0de      	beq.n	801154c <cos+0x14>
 801158e:	2001      	movs	r0, #1
 8011590:	f000 ff66 	bl	8012460 <__kernel_sin>
 8011594:	e7dc      	b.n	8011550 <cos+0x18>
 8011596:	f000 ff63 	bl	8012460 <__kernel_sin>
 801159a:	ec53 2b10 	vmov	r2, r3, d0
 801159e:	ee10 0a10 	vmov	r0, s0
 80115a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115a6:	e7de      	b.n	8011566 <cos+0x2e>
 80115a8:	f000 fb52 	bl	8011c50 <__kernel_cos>
 80115ac:	e7f5      	b.n	801159a <cos+0x62>
 80115ae:	bf00      	nop
	...
 80115b8:	3fe921fb 	.word	0x3fe921fb
 80115bc:	7fefffff 	.word	0x7fefffff

080115c0 <sin>:
 80115c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115c2:	ec51 0b10 	vmov	r0, r1, d0
 80115c6:	4a20      	ldr	r2, [pc, #128]	; (8011648 <sin+0x88>)
 80115c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80115cc:	4293      	cmp	r3, r2
 80115ce:	dc07      	bgt.n	80115e0 <sin+0x20>
 80115d0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011640 <sin+0x80>
 80115d4:	2000      	movs	r0, #0
 80115d6:	f000 ff43 	bl	8012460 <__kernel_sin>
 80115da:	ec51 0b10 	vmov	r0, r1, d0
 80115de:	e007      	b.n	80115f0 <sin+0x30>
 80115e0:	4a1a      	ldr	r2, [pc, #104]	; (801164c <sin+0x8c>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	dd09      	ble.n	80115fa <sin+0x3a>
 80115e6:	ee10 2a10 	vmov	r2, s0
 80115ea:	460b      	mov	r3, r1
 80115ec:	f7ee fe64 	bl	80002b8 <__aeabi_dsub>
 80115f0:	ec41 0b10 	vmov	d0, r0, r1
 80115f4:	b005      	add	sp, #20
 80115f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80115fa:	4668      	mov	r0, sp
 80115fc:	f000 f884 	bl	8011708 <__ieee754_rem_pio2>
 8011600:	f000 0003 	and.w	r0, r0, #3
 8011604:	2801      	cmp	r0, #1
 8011606:	ed9d 1b02 	vldr	d1, [sp, #8]
 801160a:	ed9d 0b00 	vldr	d0, [sp]
 801160e:	d004      	beq.n	801161a <sin+0x5a>
 8011610:	2802      	cmp	r0, #2
 8011612:	d005      	beq.n	8011620 <sin+0x60>
 8011614:	b970      	cbnz	r0, 8011634 <sin+0x74>
 8011616:	2001      	movs	r0, #1
 8011618:	e7dd      	b.n	80115d6 <sin+0x16>
 801161a:	f000 fb19 	bl	8011c50 <__kernel_cos>
 801161e:	e7dc      	b.n	80115da <sin+0x1a>
 8011620:	2001      	movs	r0, #1
 8011622:	f000 ff1d 	bl	8012460 <__kernel_sin>
 8011626:	ec53 2b10 	vmov	r2, r3, d0
 801162a:	ee10 0a10 	vmov	r0, s0
 801162e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011632:	e7dd      	b.n	80115f0 <sin+0x30>
 8011634:	f000 fb0c 	bl	8011c50 <__kernel_cos>
 8011638:	e7f5      	b.n	8011626 <sin+0x66>
 801163a:	bf00      	nop
 801163c:	f3af 8000 	nop.w
	...
 8011648:	3fe921fb 	.word	0x3fe921fb
 801164c:	7fefffff 	.word	0x7fefffff

08011650 <sqrt>:
 8011650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011654:	ed2d 8b02 	vpush	{d8}
 8011658:	b08b      	sub	sp, #44	; 0x2c
 801165a:	ec55 4b10 	vmov	r4, r5, d0
 801165e:	f000 fa45 	bl	8011aec <__ieee754_sqrt>
 8011662:	4b26      	ldr	r3, [pc, #152]	; (80116fc <sqrt+0xac>)
 8011664:	eeb0 8a40 	vmov.f32	s16, s0
 8011668:	eef0 8a60 	vmov.f32	s17, s1
 801166c:	f993 6000 	ldrsb.w	r6, [r3]
 8011670:	1c73      	adds	r3, r6, #1
 8011672:	d02a      	beq.n	80116ca <sqrt+0x7a>
 8011674:	4622      	mov	r2, r4
 8011676:	462b      	mov	r3, r5
 8011678:	4620      	mov	r0, r4
 801167a:	4629      	mov	r1, r5
 801167c:	f7ef fa6e 	bl	8000b5c <__aeabi_dcmpun>
 8011680:	4607      	mov	r7, r0
 8011682:	bb10      	cbnz	r0, 80116ca <sqrt+0x7a>
 8011684:	f04f 0800 	mov.w	r8, #0
 8011688:	f04f 0900 	mov.w	r9, #0
 801168c:	4642      	mov	r2, r8
 801168e:	464b      	mov	r3, r9
 8011690:	4620      	mov	r0, r4
 8011692:	4629      	mov	r1, r5
 8011694:	f7ef fa3a 	bl	8000b0c <__aeabi_dcmplt>
 8011698:	b1b8      	cbz	r0, 80116ca <sqrt+0x7a>
 801169a:	2301      	movs	r3, #1
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	4b18      	ldr	r3, [pc, #96]	; (8011700 <sqrt+0xb0>)
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	9708      	str	r7, [sp, #32]
 80116a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80116a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80116ac:	b9b6      	cbnz	r6, 80116dc <sqrt+0x8c>
 80116ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80116b2:	4668      	mov	r0, sp
 80116b4:	f001 f81c 	bl	80126f0 <matherr>
 80116b8:	b1d0      	cbz	r0, 80116f0 <sqrt+0xa0>
 80116ba:	9b08      	ldr	r3, [sp, #32]
 80116bc:	b11b      	cbz	r3, 80116c6 <sqrt+0x76>
 80116be:	f001 f8a1 	bl	8012804 <__errno>
 80116c2:	9b08      	ldr	r3, [sp, #32]
 80116c4:	6003      	str	r3, [r0, #0]
 80116c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80116ca:	eeb0 0a48 	vmov.f32	s0, s16
 80116ce:	eef0 0a68 	vmov.f32	s1, s17
 80116d2:	b00b      	add	sp, #44	; 0x2c
 80116d4:	ecbd 8b02 	vpop	{d8}
 80116d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116dc:	4642      	mov	r2, r8
 80116de:	464b      	mov	r3, r9
 80116e0:	4640      	mov	r0, r8
 80116e2:	4649      	mov	r1, r9
 80116e4:	f7ef f8ca 	bl	800087c <__aeabi_ddiv>
 80116e8:	2e02      	cmp	r6, #2
 80116ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80116ee:	d1e0      	bne.n	80116b2 <sqrt+0x62>
 80116f0:	f001 f888 	bl	8012804 <__errno>
 80116f4:	2321      	movs	r3, #33	; 0x21
 80116f6:	6003      	str	r3, [r0, #0]
 80116f8:	e7df      	b.n	80116ba <sqrt+0x6a>
 80116fa:	bf00      	nop
 80116fc:	2000000a 	.word	0x2000000a
 8011700:	080178dc 	.word	0x080178dc
 8011704:	00000000 	.word	0x00000000

08011708 <__ieee754_rem_pio2>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	ec57 6b10 	vmov	r6, r7, d0
 8011710:	4bc3      	ldr	r3, [pc, #780]	; (8011a20 <__ieee754_rem_pio2+0x318>)
 8011712:	b08d      	sub	sp, #52	; 0x34
 8011714:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011718:	4598      	cmp	r8, r3
 801171a:	4604      	mov	r4, r0
 801171c:	9704      	str	r7, [sp, #16]
 801171e:	dc07      	bgt.n	8011730 <__ieee754_rem_pio2+0x28>
 8011720:	2200      	movs	r2, #0
 8011722:	2300      	movs	r3, #0
 8011724:	ed84 0b00 	vstr	d0, [r4]
 8011728:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801172c:	2500      	movs	r5, #0
 801172e:	e027      	b.n	8011780 <__ieee754_rem_pio2+0x78>
 8011730:	4bbc      	ldr	r3, [pc, #752]	; (8011a24 <__ieee754_rem_pio2+0x31c>)
 8011732:	4598      	cmp	r8, r3
 8011734:	dc75      	bgt.n	8011822 <__ieee754_rem_pio2+0x11a>
 8011736:	9b04      	ldr	r3, [sp, #16]
 8011738:	4dbb      	ldr	r5, [pc, #748]	; (8011a28 <__ieee754_rem_pio2+0x320>)
 801173a:	2b00      	cmp	r3, #0
 801173c:	ee10 0a10 	vmov	r0, s0
 8011740:	a3a9      	add	r3, pc, #676	; (adr r3, 80119e8 <__ieee754_rem_pio2+0x2e0>)
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	4639      	mov	r1, r7
 8011748:	dd36      	ble.n	80117b8 <__ieee754_rem_pio2+0xb0>
 801174a:	f7ee fdb5 	bl	80002b8 <__aeabi_dsub>
 801174e:	45a8      	cmp	r8, r5
 8011750:	4606      	mov	r6, r0
 8011752:	460f      	mov	r7, r1
 8011754:	d018      	beq.n	8011788 <__ieee754_rem_pio2+0x80>
 8011756:	a3a6      	add	r3, pc, #664	; (adr r3, 80119f0 <__ieee754_rem_pio2+0x2e8>)
 8011758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175c:	f7ee fdac 	bl	80002b8 <__aeabi_dsub>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	e9c4 2300 	strd	r2, r3, [r4]
 8011768:	4630      	mov	r0, r6
 801176a:	4639      	mov	r1, r7
 801176c:	f7ee fda4 	bl	80002b8 <__aeabi_dsub>
 8011770:	a39f      	add	r3, pc, #636	; (adr r3, 80119f0 <__ieee754_rem_pio2+0x2e8>)
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	f7ee fd9f 	bl	80002b8 <__aeabi_dsub>
 801177a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801177e:	2501      	movs	r5, #1
 8011780:	4628      	mov	r0, r5
 8011782:	b00d      	add	sp, #52	; 0x34
 8011784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011788:	a39b      	add	r3, pc, #620	; (adr r3, 80119f8 <__ieee754_rem_pio2+0x2f0>)
 801178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178e:	f7ee fd93 	bl	80002b8 <__aeabi_dsub>
 8011792:	a39b      	add	r3, pc, #620	; (adr r3, 8011a00 <__ieee754_rem_pio2+0x2f8>)
 8011794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011798:	4606      	mov	r6, r0
 801179a:	460f      	mov	r7, r1
 801179c:	f7ee fd8c 	bl	80002b8 <__aeabi_dsub>
 80117a0:	4602      	mov	r2, r0
 80117a2:	460b      	mov	r3, r1
 80117a4:	e9c4 2300 	strd	r2, r3, [r4]
 80117a8:	4630      	mov	r0, r6
 80117aa:	4639      	mov	r1, r7
 80117ac:	f7ee fd84 	bl	80002b8 <__aeabi_dsub>
 80117b0:	a393      	add	r3, pc, #588	; (adr r3, 8011a00 <__ieee754_rem_pio2+0x2f8>)
 80117b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b6:	e7de      	b.n	8011776 <__ieee754_rem_pio2+0x6e>
 80117b8:	f7ee fd80 	bl	80002bc <__adddf3>
 80117bc:	45a8      	cmp	r8, r5
 80117be:	4606      	mov	r6, r0
 80117c0:	460f      	mov	r7, r1
 80117c2:	d016      	beq.n	80117f2 <__ieee754_rem_pio2+0xea>
 80117c4:	a38a      	add	r3, pc, #552	; (adr r3, 80119f0 <__ieee754_rem_pio2+0x2e8>)
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	f7ee fd77 	bl	80002bc <__adddf3>
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	e9c4 2300 	strd	r2, r3, [r4]
 80117d6:	4630      	mov	r0, r6
 80117d8:	4639      	mov	r1, r7
 80117da:	f7ee fd6d 	bl	80002b8 <__aeabi_dsub>
 80117de:	a384      	add	r3, pc, #528	; (adr r3, 80119f0 <__ieee754_rem_pio2+0x2e8>)
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	f7ee fd6a 	bl	80002bc <__adddf3>
 80117e8:	f04f 35ff 	mov.w	r5, #4294967295
 80117ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80117f0:	e7c6      	b.n	8011780 <__ieee754_rem_pio2+0x78>
 80117f2:	a381      	add	r3, pc, #516	; (adr r3, 80119f8 <__ieee754_rem_pio2+0x2f0>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	f7ee fd60 	bl	80002bc <__adddf3>
 80117fc:	a380      	add	r3, pc, #512	; (adr r3, 8011a00 <__ieee754_rem_pio2+0x2f8>)
 80117fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011802:	4606      	mov	r6, r0
 8011804:	460f      	mov	r7, r1
 8011806:	f7ee fd59 	bl	80002bc <__adddf3>
 801180a:	4602      	mov	r2, r0
 801180c:	460b      	mov	r3, r1
 801180e:	e9c4 2300 	strd	r2, r3, [r4]
 8011812:	4630      	mov	r0, r6
 8011814:	4639      	mov	r1, r7
 8011816:	f7ee fd4f 	bl	80002b8 <__aeabi_dsub>
 801181a:	a379      	add	r3, pc, #484	; (adr r3, 8011a00 <__ieee754_rem_pio2+0x2f8>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	e7e0      	b.n	80117e4 <__ieee754_rem_pio2+0xdc>
 8011822:	4b82      	ldr	r3, [pc, #520]	; (8011a2c <__ieee754_rem_pio2+0x324>)
 8011824:	4598      	cmp	r8, r3
 8011826:	f300 80d0 	bgt.w	80119ca <__ieee754_rem_pio2+0x2c2>
 801182a:	f000 fed3 	bl	80125d4 <fabs>
 801182e:	ec57 6b10 	vmov	r6, r7, d0
 8011832:	ee10 0a10 	vmov	r0, s0
 8011836:	a374      	add	r3, pc, #464	; (adr r3, 8011a08 <__ieee754_rem_pio2+0x300>)
 8011838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183c:	4639      	mov	r1, r7
 801183e:	f7ee fef3 	bl	8000628 <__aeabi_dmul>
 8011842:	2200      	movs	r2, #0
 8011844:	4b7a      	ldr	r3, [pc, #488]	; (8011a30 <__ieee754_rem_pio2+0x328>)
 8011846:	f7ee fd39 	bl	80002bc <__adddf3>
 801184a:	f7ef f99d 	bl	8000b88 <__aeabi_d2iz>
 801184e:	4605      	mov	r5, r0
 8011850:	f7ee fe80 	bl	8000554 <__aeabi_i2d>
 8011854:	a364      	add	r3, pc, #400	; (adr r3, 80119e8 <__ieee754_rem_pio2+0x2e0>)
 8011856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801185e:	f7ee fee3 	bl	8000628 <__aeabi_dmul>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ee fd25 	bl	80002b8 <__aeabi_dsub>
 801186e:	a360      	add	r3, pc, #384	; (adr r3, 80119f0 <__ieee754_rem_pio2+0x2e8>)
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	4682      	mov	sl, r0
 8011876:	468b      	mov	fp, r1
 8011878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801187c:	f7ee fed4 	bl	8000628 <__aeabi_dmul>
 8011880:	2d1f      	cmp	r5, #31
 8011882:	4606      	mov	r6, r0
 8011884:	460f      	mov	r7, r1
 8011886:	dc0c      	bgt.n	80118a2 <__ieee754_rem_pio2+0x19a>
 8011888:	1e6a      	subs	r2, r5, #1
 801188a:	4b6a      	ldr	r3, [pc, #424]	; (8011a34 <__ieee754_rem_pio2+0x32c>)
 801188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011890:	4543      	cmp	r3, r8
 8011892:	d006      	beq.n	80118a2 <__ieee754_rem_pio2+0x19a>
 8011894:	4632      	mov	r2, r6
 8011896:	463b      	mov	r3, r7
 8011898:	4650      	mov	r0, sl
 801189a:	4659      	mov	r1, fp
 801189c:	f7ee fd0c 	bl	80002b8 <__aeabi_dsub>
 80118a0:	e00e      	b.n	80118c0 <__ieee754_rem_pio2+0x1b8>
 80118a2:	4632      	mov	r2, r6
 80118a4:	463b      	mov	r3, r7
 80118a6:	4650      	mov	r0, sl
 80118a8:	4659      	mov	r1, fp
 80118aa:	f7ee fd05 	bl	80002b8 <__aeabi_dsub>
 80118ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80118b2:	9305      	str	r3, [sp, #20]
 80118b4:	9a05      	ldr	r2, [sp, #20]
 80118b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	2b10      	cmp	r3, #16
 80118be:	dc02      	bgt.n	80118c6 <__ieee754_rem_pio2+0x1be>
 80118c0:	e9c4 0100 	strd	r0, r1, [r4]
 80118c4:	e039      	b.n	801193a <__ieee754_rem_pio2+0x232>
 80118c6:	a34c      	add	r3, pc, #304	; (adr r3, 80119f8 <__ieee754_rem_pio2+0x2f0>)
 80118c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118d0:	f7ee feaa 	bl	8000628 <__aeabi_dmul>
 80118d4:	4606      	mov	r6, r0
 80118d6:	460f      	mov	r7, r1
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	4650      	mov	r0, sl
 80118de:	4659      	mov	r1, fp
 80118e0:	f7ee fcea 	bl	80002b8 <__aeabi_dsub>
 80118e4:	4602      	mov	r2, r0
 80118e6:	460b      	mov	r3, r1
 80118e8:	4680      	mov	r8, r0
 80118ea:	4689      	mov	r9, r1
 80118ec:	4650      	mov	r0, sl
 80118ee:	4659      	mov	r1, fp
 80118f0:	f7ee fce2 	bl	80002b8 <__aeabi_dsub>
 80118f4:	4632      	mov	r2, r6
 80118f6:	463b      	mov	r3, r7
 80118f8:	f7ee fcde 	bl	80002b8 <__aeabi_dsub>
 80118fc:	a340      	add	r3, pc, #256	; (adr r3, 8011a00 <__ieee754_rem_pio2+0x2f8>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	4606      	mov	r6, r0
 8011904:	460f      	mov	r7, r1
 8011906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801190a:	f7ee fe8d 	bl	8000628 <__aeabi_dmul>
 801190e:	4632      	mov	r2, r6
 8011910:	463b      	mov	r3, r7
 8011912:	f7ee fcd1 	bl	80002b8 <__aeabi_dsub>
 8011916:	4602      	mov	r2, r0
 8011918:	460b      	mov	r3, r1
 801191a:	4606      	mov	r6, r0
 801191c:	460f      	mov	r7, r1
 801191e:	4640      	mov	r0, r8
 8011920:	4649      	mov	r1, r9
 8011922:	f7ee fcc9 	bl	80002b8 <__aeabi_dsub>
 8011926:	9a05      	ldr	r2, [sp, #20]
 8011928:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	2b31      	cmp	r3, #49	; 0x31
 8011930:	dc20      	bgt.n	8011974 <__ieee754_rem_pio2+0x26c>
 8011932:	e9c4 0100 	strd	r0, r1, [r4]
 8011936:	46c2      	mov	sl, r8
 8011938:	46cb      	mov	fp, r9
 801193a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801193e:	4650      	mov	r0, sl
 8011940:	4642      	mov	r2, r8
 8011942:	464b      	mov	r3, r9
 8011944:	4659      	mov	r1, fp
 8011946:	f7ee fcb7 	bl	80002b8 <__aeabi_dsub>
 801194a:	463b      	mov	r3, r7
 801194c:	4632      	mov	r2, r6
 801194e:	f7ee fcb3 	bl	80002b8 <__aeabi_dsub>
 8011952:	9b04      	ldr	r3, [sp, #16]
 8011954:	2b00      	cmp	r3, #0
 8011956:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801195a:	f6bf af11 	bge.w	8011780 <__ieee754_rem_pio2+0x78>
 801195e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011962:	6063      	str	r3, [r4, #4]
 8011964:	f8c4 8000 	str.w	r8, [r4]
 8011968:	60a0      	str	r0, [r4, #8]
 801196a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801196e:	60e3      	str	r3, [r4, #12]
 8011970:	426d      	negs	r5, r5
 8011972:	e705      	b.n	8011780 <__ieee754_rem_pio2+0x78>
 8011974:	a326      	add	r3, pc, #152	; (adr r3, 8011a10 <__ieee754_rem_pio2+0x308>)
 8011976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801197e:	f7ee fe53 	bl	8000628 <__aeabi_dmul>
 8011982:	4606      	mov	r6, r0
 8011984:	460f      	mov	r7, r1
 8011986:	4602      	mov	r2, r0
 8011988:	460b      	mov	r3, r1
 801198a:	4640      	mov	r0, r8
 801198c:	4649      	mov	r1, r9
 801198e:	f7ee fc93 	bl	80002b8 <__aeabi_dsub>
 8011992:	4602      	mov	r2, r0
 8011994:	460b      	mov	r3, r1
 8011996:	4682      	mov	sl, r0
 8011998:	468b      	mov	fp, r1
 801199a:	4640      	mov	r0, r8
 801199c:	4649      	mov	r1, r9
 801199e:	f7ee fc8b 	bl	80002b8 <__aeabi_dsub>
 80119a2:	4632      	mov	r2, r6
 80119a4:	463b      	mov	r3, r7
 80119a6:	f7ee fc87 	bl	80002b8 <__aeabi_dsub>
 80119aa:	a31b      	add	r3, pc, #108	; (adr r3, 8011a18 <__ieee754_rem_pio2+0x310>)
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	4606      	mov	r6, r0
 80119b2:	460f      	mov	r7, r1
 80119b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119b8:	f7ee fe36 	bl	8000628 <__aeabi_dmul>
 80119bc:	4632      	mov	r2, r6
 80119be:	463b      	mov	r3, r7
 80119c0:	f7ee fc7a 	bl	80002b8 <__aeabi_dsub>
 80119c4:	4606      	mov	r6, r0
 80119c6:	460f      	mov	r7, r1
 80119c8:	e764      	b.n	8011894 <__ieee754_rem_pio2+0x18c>
 80119ca:	4b1b      	ldr	r3, [pc, #108]	; (8011a38 <__ieee754_rem_pio2+0x330>)
 80119cc:	4598      	cmp	r8, r3
 80119ce:	dd35      	ble.n	8011a3c <__ieee754_rem_pio2+0x334>
 80119d0:	ee10 2a10 	vmov	r2, s0
 80119d4:	463b      	mov	r3, r7
 80119d6:	4630      	mov	r0, r6
 80119d8:	4639      	mov	r1, r7
 80119da:	f7ee fc6d 	bl	80002b8 <__aeabi_dsub>
 80119de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80119e2:	e9c4 0100 	strd	r0, r1, [r4]
 80119e6:	e6a1      	b.n	801172c <__ieee754_rem_pio2+0x24>
 80119e8:	54400000 	.word	0x54400000
 80119ec:	3ff921fb 	.word	0x3ff921fb
 80119f0:	1a626331 	.word	0x1a626331
 80119f4:	3dd0b461 	.word	0x3dd0b461
 80119f8:	1a600000 	.word	0x1a600000
 80119fc:	3dd0b461 	.word	0x3dd0b461
 8011a00:	2e037073 	.word	0x2e037073
 8011a04:	3ba3198a 	.word	0x3ba3198a
 8011a08:	6dc9c883 	.word	0x6dc9c883
 8011a0c:	3fe45f30 	.word	0x3fe45f30
 8011a10:	2e000000 	.word	0x2e000000
 8011a14:	3ba3198a 	.word	0x3ba3198a
 8011a18:	252049c1 	.word	0x252049c1
 8011a1c:	397b839a 	.word	0x397b839a
 8011a20:	3fe921fb 	.word	0x3fe921fb
 8011a24:	4002d97b 	.word	0x4002d97b
 8011a28:	3ff921fb 	.word	0x3ff921fb
 8011a2c:	413921fb 	.word	0x413921fb
 8011a30:	3fe00000 	.word	0x3fe00000
 8011a34:	080178e4 	.word	0x080178e4
 8011a38:	7fefffff 	.word	0x7fefffff
 8011a3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011a40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011a44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011a48:	4630      	mov	r0, r6
 8011a4a:	460f      	mov	r7, r1
 8011a4c:	f7ef f89c 	bl	8000b88 <__aeabi_d2iz>
 8011a50:	f7ee fd80 	bl	8000554 <__aeabi_i2d>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4630      	mov	r0, r6
 8011a5a:	4639      	mov	r1, r7
 8011a5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011a60:	f7ee fc2a 	bl	80002b8 <__aeabi_dsub>
 8011a64:	2200      	movs	r2, #0
 8011a66:	4b1f      	ldr	r3, [pc, #124]	; (8011ae4 <__ieee754_rem_pio2+0x3dc>)
 8011a68:	f7ee fdde 	bl	8000628 <__aeabi_dmul>
 8011a6c:	460f      	mov	r7, r1
 8011a6e:	4606      	mov	r6, r0
 8011a70:	f7ef f88a 	bl	8000b88 <__aeabi_d2iz>
 8011a74:	f7ee fd6e 	bl	8000554 <__aeabi_i2d>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	4639      	mov	r1, r7
 8011a80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a84:	f7ee fc18 	bl	80002b8 <__aeabi_dsub>
 8011a88:	2200      	movs	r2, #0
 8011a8a:	4b16      	ldr	r3, [pc, #88]	; (8011ae4 <__ieee754_rem_pio2+0x3dc>)
 8011a8c:	f7ee fdcc 	bl	8000628 <__aeabi_dmul>
 8011a90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011a94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011a98:	f04f 0803 	mov.w	r8, #3
 8011a9c:	2600      	movs	r6, #0
 8011a9e:	2700      	movs	r7, #0
 8011aa0:	4632      	mov	r2, r6
 8011aa2:	463b      	mov	r3, r7
 8011aa4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011aa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8011aac:	f7ef f824 	bl	8000af8 <__aeabi_dcmpeq>
 8011ab0:	b9b0      	cbnz	r0, 8011ae0 <__ieee754_rem_pio2+0x3d8>
 8011ab2:	4b0d      	ldr	r3, [pc, #52]	; (8011ae8 <__ieee754_rem_pio2+0x3e0>)
 8011ab4:	9301      	str	r3, [sp, #4]
 8011ab6:	2302      	movs	r3, #2
 8011ab8:	9300      	str	r3, [sp, #0]
 8011aba:	462a      	mov	r2, r5
 8011abc:	4643      	mov	r3, r8
 8011abe:	4621      	mov	r1, r4
 8011ac0:	a806      	add	r0, sp, #24
 8011ac2:	f000 f98d 	bl	8011de0 <__kernel_rem_pio2>
 8011ac6:	9b04      	ldr	r3, [sp, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	4605      	mov	r5, r0
 8011acc:	f6bf ae58 	bge.w	8011780 <__ieee754_rem_pio2+0x78>
 8011ad0:	6863      	ldr	r3, [r4, #4]
 8011ad2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011ad6:	6063      	str	r3, [r4, #4]
 8011ad8:	68e3      	ldr	r3, [r4, #12]
 8011ada:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011ade:	e746      	b.n	801196e <__ieee754_rem_pio2+0x266>
 8011ae0:	46d0      	mov	r8, sl
 8011ae2:	e7dd      	b.n	8011aa0 <__ieee754_rem_pio2+0x398>
 8011ae4:	41700000 	.word	0x41700000
 8011ae8:	08017964 	.word	0x08017964

08011aec <__ieee754_sqrt>:
 8011aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af0:	4955      	ldr	r1, [pc, #340]	; (8011c48 <__ieee754_sqrt+0x15c>)
 8011af2:	ec55 4b10 	vmov	r4, r5, d0
 8011af6:	43a9      	bics	r1, r5
 8011af8:	462b      	mov	r3, r5
 8011afa:	462a      	mov	r2, r5
 8011afc:	d112      	bne.n	8011b24 <__ieee754_sqrt+0x38>
 8011afe:	ee10 2a10 	vmov	r2, s0
 8011b02:	ee10 0a10 	vmov	r0, s0
 8011b06:	4629      	mov	r1, r5
 8011b08:	f7ee fd8e 	bl	8000628 <__aeabi_dmul>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	460b      	mov	r3, r1
 8011b10:	4620      	mov	r0, r4
 8011b12:	4629      	mov	r1, r5
 8011b14:	f7ee fbd2 	bl	80002bc <__adddf3>
 8011b18:	4604      	mov	r4, r0
 8011b1a:	460d      	mov	r5, r1
 8011b1c:	ec45 4b10 	vmov	d0, r4, r5
 8011b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b24:	2d00      	cmp	r5, #0
 8011b26:	ee10 0a10 	vmov	r0, s0
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	dc0f      	bgt.n	8011b4e <__ieee754_sqrt+0x62>
 8011b2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011b32:	4330      	orrs	r0, r6
 8011b34:	d0f2      	beq.n	8011b1c <__ieee754_sqrt+0x30>
 8011b36:	b155      	cbz	r5, 8011b4e <__ieee754_sqrt+0x62>
 8011b38:	ee10 2a10 	vmov	r2, s0
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	4629      	mov	r1, r5
 8011b40:	f7ee fbba 	bl	80002b8 <__aeabi_dsub>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	f7ee fe98 	bl	800087c <__aeabi_ddiv>
 8011b4c:	e7e4      	b.n	8011b18 <__ieee754_sqrt+0x2c>
 8011b4e:	151b      	asrs	r3, r3, #20
 8011b50:	d073      	beq.n	8011c3a <__ieee754_sqrt+0x14e>
 8011b52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011b56:	07dd      	lsls	r5, r3, #31
 8011b58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011b5c:	bf48      	it	mi
 8011b5e:	0fc8      	lsrmi	r0, r1, #31
 8011b60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011b64:	bf44      	itt	mi
 8011b66:	0049      	lslmi	r1, r1, #1
 8011b68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011b6c:	2500      	movs	r5, #0
 8011b6e:	1058      	asrs	r0, r3, #1
 8011b70:	0fcb      	lsrs	r3, r1, #31
 8011b72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011b76:	0049      	lsls	r1, r1, #1
 8011b78:	2316      	movs	r3, #22
 8011b7a:	462c      	mov	r4, r5
 8011b7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011b80:	19a7      	adds	r7, r4, r6
 8011b82:	4297      	cmp	r7, r2
 8011b84:	bfde      	ittt	le
 8011b86:	19bc      	addle	r4, r7, r6
 8011b88:	1bd2      	suble	r2, r2, r7
 8011b8a:	19ad      	addle	r5, r5, r6
 8011b8c:	0fcf      	lsrs	r7, r1, #31
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011b94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b9c:	d1f0      	bne.n	8011b80 <__ieee754_sqrt+0x94>
 8011b9e:	f04f 0c20 	mov.w	ip, #32
 8011ba2:	469e      	mov	lr, r3
 8011ba4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011ba8:	42a2      	cmp	r2, r4
 8011baa:	eb06 070e 	add.w	r7, r6, lr
 8011bae:	dc02      	bgt.n	8011bb6 <__ieee754_sqrt+0xca>
 8011bb0:	d112      	bne.n	8011bd8 <__ieee754_sqrt+0xec>
 8011bb2:	428f      	cmp	r7, r1
 8011bb4:	d810      	bhi.n	8011bd8 <__ieee754_sqrt+0xec>
 8011bb6:	2f00      	cmp	r7, #0
 8011bb8:	eb07 0e06 	add.w	lr, r7, r6
 8011bbc:	da42      	bge.n	8011c44 <__ieee754_sqrt+0x158>
 8011bbe:	f1be 0f00 	cmp.w	lr, #0
 8011bc2:	db3f      	blt.n	8011c44 <__ieee754_sqrt+0x158>
 8011bc4:	f104 0801 	add.w	r8, r4, #1
 8011bc8:	1b12      	subs	r2, r2, r4
 8011bca:	428f      	cmp	r7, r1
 8011bcc:	bf88      	it	hi
 8011bce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011bd2:	1bc9      	subs	r1, r1, r7
 8011bd4:	4433      	add	r3, r6
 8011bd6:	4644      	mov	r4, r8
 8011bd8:	0052      	lsls	r2, r2, #1
 8011bda:	f1bc 0c01 	subs.w	ip, ip, #1
 8011bde:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011be2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011be6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011bea:	d1dd      	bne.n	8011ba8 <__ieee754_sqrt+0xbc>
 8011bec:	430a      	orrs	r2, r1
 8011bee:	d006      	beq.n	8011bfe <__ieee754_sqrt+0x112>
 8011bf0:	1c5c      	adds	r4, r3, #1
 8011bf2:	bf13      	iteet	ne
 8011bf4:	3301      	addne	r3, #1
 8011bf6:	3501      	addeq	r5, #1
 8011bf8:	4663      	moveq	r3, ip
 8011bfa:	f023 0301 	bicne.w	r3, r3, #1
 8011bfe:	106a      	asrs	r2, r5, #1
 8011c00:	085b      	lsrs	r3, r3, #1
 8011c02:	07e9      	lsls	r1, r5, #31
 8011c04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011c08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011c0c:	bf48      	it	mi
 8011c0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011c12:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011c16:	461c      	mov	r4, r3
 8011c18:	e780      	b.n	8011b1c <__ieee754_sqrt+0x30>
 8011c1a:	0aca      	lsrs	r2, r1, #11
 8011c1c:	3815      	subs	r0, #21
 8011c1e:	0549      	lsls	r1, r1, #21
 8011c20:	2a00      	cmp	r2, #0
 8011c22:	d0fa      	beq.n	8011c1a <__ieee754_sqrt+0x12e>
 8011c24:	02d6      	lsls	r6, r2, #11
 8011c26:	d50a      	bpl.n	8011c3e <__ieee754_sqrt+0x152>
 8011c28:	f1c3 0420 	rsb	r4, r3, #32
 8011c2c:	fa21 f404 	lsr.w	r4, r1, r4
 8011c30:	1e5d      	subs	r5, r3, #1
 8011c32:	4099      	lsls	r1, r3
 8011c34:	4322      	orrs	r2, r4
 8011c36:	1b43      	subs	r3, r0, r5
 8011c38:	e78b      	b.n	8011b52 <__ieee754_sqrt+0x66>
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	e7f0      	b.n	8011c20 <__ieee754_sqrt+0x134>
 8011c3e:	0052      	lsls	r2, r2, #1
 8011c40:	3301      	adds	r3, #1
 8011c42:	e7ef      	b.n	8011c24 <__ieee754_sqrt+0x138>
 8011c44:	46a0      	mov	r8, r4
 8011c46:	e7bf      	b.n	8011bc8 <__ieee754_sqrt+0xdc>
 8011c48:	7ff00000 	.word	0x7ff00000
 8011c4c:	00000000 	.word	0x00000000

08011c50 <__kernel_cos>:
 8011c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c54:	ec59 8b10 	vmov	r8, r9, d0
 8011c58:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011c5c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011c60:	ed2d 8b02 	vpush	{d8}
 8011c64:	eeb0 8a41 	vmov.f32	s16, s2
 8011c68:	eef0 8a61 	vmov.f32	s17, s3
 8011c6c:	da07      	bge.n	8011c7e <__kernel_cos+0x2e>
 8011c6e:	ee10 0a10 	vmov	r0, s0
 8011c72:	4649      	mov	r1, r9
 8011c74:	f7ee ff88 	bl	8000b88 <__aeabi_d2iz>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	f000 8089 	beq.w	8011d90 <__kernel_cos+0x140>
 8011c7e:	4642      	mov	r2, r8
 8011c80:	464b      	mov	r3, r9
 8011c82:	4640      	mov	r0, r8
 8011c84:	4649      	mov	r1, r9
 8011c86:	f7ee fccf 	bl	8000628 <__aeabi_dmul>
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	4b4e      	ldr	r3, [pc, #312]	; (8011dc8 <__kernel_cos+0x178>)
 8011c8e:	4604      	mov	r4, r0
 8011c90:	460d      	mov	r5, r1
 8011c92:	f7ee fcc9 	bl	8000628 <__aeabi_dmul>
 8011c96:	a340      	add	r3, pc, #256	; (adr r3, 8011d98 <__kernel_cos+0x148>)
 8011c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9c:	4682      	mov	sl, r0
 8011c9e:	468b      	mov	fp, r1
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	f7ee fcc0 	bl	8000628 <__aeabi_dmul>
 8011ca8:	a33d      	add	r3, pc, #244	; (adr r3, 8011da0 <__kernel_cos+0x150>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	f7ee fb05 	bl	80002bc <__adddf3>
 8011cb2:	4622      	mov	r2, r4
 8011cb4:	462b      	mov	r3, r5
 8011cb6:	f7ee fcb7 	bl	8000628 <__aeabi_dmul>
 8011cba:	a33b      	add	r3, pc, #236	; (adr r3, 8011da8 <__kernel_cos+0x158>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	f7ee fafa 	bl	80002b8 <__aeabi_dsub>
 8011cc4:	4622      	mov	r2, r4
 8011cc6:	462b      	mov	r3, r5
 8011cc8:	f7ee fcae 	bl	8000628 <__aeabi_dmul>
 8011ccc:	a338      	add	r3, pc, #224	; (adr r3, 8011db0 <__kernel_cos+0x160>)
 8011cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd2:	f7ee faf3 	bl	80002bc <__adddf3>
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	462b      	mov	r3, r5
 8011cda:	f7ee fca5 	bl	8000628 <__aeabi_dmul>
 8011cde:	a336      	add	r3, pc, #216	; (adr r3, 8011db8 <__kernel_cos+0x168>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	f7ee fae8 	bl	80002b8 <__aeabi_dsub>
 8011ce8:	4622      	mov	r2, r4
 8011cea:	462b      	mov	r3, r5
 8011cec:	f7ee fc9c 	bl	8000628 <__aeabi_dmul>
 8011cf0:	a333      	add	r3, pc, #204	; (adr r3, 8011dc0 <__kernel_cos+0x170>)
 8011cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf6:	f7ee fae1 	bl	80002bc <__adddf3>
 8011cfa:	4622      	mov	r2, r4
 8011cfc:	462b      	mov	r3, r5
 8011cfe:	f7ee fc93 	bl	8000628 <__aeabi_dmul>
 8011d02:	4622      	mov	r2, r4
 8011d04:	462b      	mov	r3, r5
 8011d06:	f7ee fc8f 	bl	8000628 <__aeabi_dmul>
 8011d0a:	ec53 2b18 	vmov	r2, r3, d8
 8011d0e:	4604      	mov	r4, r0
 8011d10:	460d      	mov	r5, r1
 8011d12:	4640      	mov	r0, r8
 8011d14:	4649      	mov	r1, r9
 8011d16:	f7ee fc87 	bl	8000628 <__aeabi_dmul>
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	4602      	mov	r2, r0
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7ee fac9 	bl	80002b8 <__aeabi_dsub>
 8011d26:	4b29      	ldr	r3, [pc, #164]	; (8011dcc <__kernel_cos+0x17c>)
 8011d28:	429e      	cmp	r6, r3
 8011d2a:	4680      	mov	r8, r0
 8011d2c:	4689      	mov	r9, r1
 8011d2e:	dc11      	bgt.n	8011d54 <__kernel_cos+0x104>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4650      	mov	r0, sl
 8011d36:	4659      	mov	r1, fp
 8011d38:	f7ee fabe 	bl	80002b8 <__aeabi_dsub>
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	4924      	ldr	r1, [pc, #144]	; (8011dd0 <__kernel_cos+0x180>)
 8011d40:	4602      	mov	r2, r0
 8011d42:	2000      	movs	r0, #0
 8011d44:	f7ee fab8 	bl	80002b8 <__aeabi_dsub>
 8011d48:	ecbd 8b02 	vpop	{d8}
 8011d4c:	ec41 0b10 	vmov	d0, r0, r1
 8011d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d54:	4b1f      	ldr	r3, [pc, #124]	; (8011dd4 <__kernel_cos+0x184>)
 8011d56:	491e      	ldr	r1, [pc, #120]	; (8011dd0 <__kernel_cos+0x180>)
 8011d58:	429e      	cmp	r6, r3
 8011d5a:	bfcc      	ite	gt
 8011d5c:	4d1e      	ldrgt	r5, [pc, #120]	; (8011dd8 <__kernel_cos+0x188>)
 8011d5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011d62:	2400      	movs	r4, #0
 8011d64:	4622      	mov	r2, r4
 8011d66:	462b      	mov	r3, r5
 8011d68:	2000      	movs	r0, #0
 8011d6a:	f7ee faa5 	bl	80002b8 <__aeabi_dsub>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	4606      	mov	r6, r0
 8011d72:	460f      	mov	r7, r1
 8011d74:	462b      	mov	r3, r5
 8011d76:	4650      	mov	r0, sl
 8011d78:	4659      	mov	r1, fp
 8011d7a:	f7ee fa9d 	bl	80002b8 <__aeabi_dsub>
 8011d7e:	4642      	mov	r2, r8
 8011d80:	464b      	mov	r3, r9
 8011d82:	f7ee fa99 	bl	80002b8 <__aeabi_dsub>
 8011d86:	4602      	mov	r2, r0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	4639      	mov	r1, r7
 8011d8e:	e7d9      	b.n	8011d44 <__kernel_cos+0xf4>
 8011d90:	2000      	movs	r0, #0
 8011d92:	490f      	ldr	r1, [pc, #60]	; (8011dd0 <__kernel_cos+0x180>)
 8011d94:	e7d8      	b.n	8011d48 <__kernel_cos+0xf8>
 8011d96:	bf00      	nop
 8011d98:	be8838d4 	.word	0xbe8838d4
 8011d9c:	bda8fae9 	.word	0xbda8fae9
 8011da0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011da4:	3e21ee9e 	.word	0x3e21ee9e
 8011da8:	809c52ad 	.word	0x809c52ad
 8011dac:	3e927e4f 	.word	0x3e927e4f
 8011db0:	19cb1590 	.word	0x19cb1590
 8011db4:	3efa01a0 	.word	0x3efa01a0
 8011db8:	16c15177 	.word	0x16c15177
 8011dbc:	3f56c16c 	.word	0x3f56c16c
 8011dc0:	5555554c 	.word	0x5555554c
 8011dc4:	3fa55555 	.word	0x3fa55555
 8011dc8:	3fe00000 	.word	0x3fe00000
 8011dcc:	3fd33332 	.word	0x3fd33332
 8011dd0:	3ff00000 	.word	0x3ff00000
 8011dd4:	3fe90000 	.word	0x3fe90000
 8011dd8:	3fd20000 	.word	0x3fd20000
 8011ddc:	00000000 	.word	0x00000000

08011de0 <__kernel_rem_pio2>:
 8011de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de4:	ed2d 8b02 	vpush	{d8}
 8011de8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011dec:	1ed4      	subs	r4, r2, #3
 8011dee:	9308      	str	r3, [sp, #32]
 8011df0:	9101      	str	r1, [sp, #4]
 8011df2:	4bc5      	ldr	r3, [pc, #788]	; (8012108 <__kernel_rem_pio2+0x328>)
 8011df4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011df6:	9009      	str	r0, [sp, #36]	; 0x24
 8011df8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011dfc:	9304      	str	r3, [sp, #16]
 8011dfe:	9b08      	ldr	r3, [sp, #32]
 8011e00:	3b01      	subs	r3, #1
 8011e02:	9307      	str	r3, [sp, #28]
 8011e04:	2318      	movs	r3, #24
 8011e06:	fb94 f4f3 	sdiv	r4, r4, r3
 8011e0a:	f06f 0317 	mvn.w	r3, #23
 8011e0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011e12:	fb04 3303 	mla	r3, r4, r3, r3
 8011e16:	eb03 0a02 	add.w	sl, r3, r2
 8011e1a:	9b04      	ldr	r3, [sp, #16]
 8011e1c:	9a07      	ldr	r2, [sp, #28]
 8011e1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80120f8 <__kernel_rem_pio2+0x318>
 8011e22:	eb03 0802 	add.w	r8, r3, r2
 8011e26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011e28:	1aa7      	subs	r7, r4, r2
 8011e2a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011e2e:	ae22      	add	r6, sp, #136	; 0x88
 8011e30:	2500      	movs	r5, #0
 8011e32:	4545      	cmp	r5, r8
 8011e34:	dd13      	ble.n	8011e5e <__kernel_rem_pio2+0x7e>
 8011e36:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80120f8 <__kernel_rem_pio2+0x318>
 8011e3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011e3e:	2600      	movs	r6, #0
 8011e40:	9b04      	ldr	r3, [sp, #16]
 8011e42:	429e      	cmp	r6, r3
 8011e44:	dc32      	bgt.n	8011eac <__kernel_rem_pio2+0xcc>
 8011e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e48:	9302      	str	r3, [sp, #8]
 8011e4a:	9b08      	ldr	r3, [sp, #32]
 8011e4c:	199d      	adds	r5, r3, r6
 8011e4e:	ab22      	add	r3, sp, #136	; 0x88
 8011e50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011e54:	9306      	str	r3, [sp, #24]
 8011e56:	ec59 8b18 	vmov	r8, r9, d8
 8011e5a:	2700      	movs	r7, #0
 8011e5c:	e01f      	b.n	8011e9e <__kernel_rem_pio2+0xbe>
 8011e5e:	42ef      	cmn	r7, r5
 8011e60:	d407      	bmi.n	8011e72 <__kernel_rem_pio2+0x92>
 8011e62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011e66:	f7ee fb75 	bl	8000554 <__aeabi_i2d>
 8011e6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011e6e:	3501      	adds	r5, #1
 8011e70:	e7df      	b.n	8011e32 <__kernel_rem_pio2+0x52>
 8011e72:	ec51 0b18 	vmov	r0, r1, d8
 8011e76:	e7f8      	b.n	8011e6a <__kernel_rem_pio2+0x8a>
 8011e78:	9906      	ldr	r1, [sp, #24]
 8011e7a:	9d02      	ldr	r5, [sp, #8]
 8011e7c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011e80:	9106      	str	r1, [sp, #24]
 8011e82:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011e86:	9502      	str	r5, [sp, #8]
 8011e88:	f7ee fbce 	bl	8000628 <__aeabi_dmul>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	460b      	mov	r3, r1
 8011e90:	4640      	mov	r0, r8
 8011e92:	4649      	mov	r1, r9
 8011e94:	f7ee fa12 	bl	80002bc <__adddf3>
 8011e98:	3701      	adds	r7, #1
 8011e9a:	4680      	mov	r8, r0
 8011e9c:	4689      	mov	r9, r1
 8011e9e:	9b07      	ldr	r3, [sp, #28]
 8011ea0:	429f      	cmp	r7, r3
 8011ea2:	dde9      	ble.n	8011e78 <__kernel_rem_pio2+0x98>
 8011ea4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011ea8:	3601      	adds	r6, #1
 8011eaa:	e7c9      	b.n	8011e40 <__kernel_rem_pio2+0x60>
 8011eac:	9b04      	ldr	r3, [sp, #16]
 8011eae:	aa0e      	add	r2, sp, #56	; 0x38
 8011eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8011eb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011eb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011ebc:	9c04      	ldr	r4, [sp, #16]
 8011ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ec0:	ab9a      	add	r3, sp, #616	; 0x268
 8011ec2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011ec6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ece:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011ed2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011ed6:	ab9a      	add	r3, sp, #616	; 0x268
 8011ed8:	445b      	add	r3, fp
 8011eda:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011ede:	2500      	movs	r5, #0
 8011ee0:	1b63      	subs	r3, r4, r5
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	dc78      	bgt.n	8011fd8 <__kernel_rem_pio2+0x1f8>
 8011ee6:	4650      	mov	r0, sl
 8011ee8:	ec49 8b10 	vmov	d0, r8, r9
 8011eec:	f000 fc04 	bl	80126f8 <scalbn>
 8011ef0:	ec57 6b10 	vmov	r6, r7, d0
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011efa:	ee10 0a10 	vmov	r0, s0
 8011efe:	4639      	mov	r1, r7
 8011f00:	f7ee fb92 	bl	8000628 <__aeabi_dmul>
 8011f04:	ec41 0b10 	vmov	d0, r0, r1
 8011f08:	f000 fb6e 	bl	80125e8 <floor>
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	ec51 0b10 	vmov	r0, r1, d0
 8011f12:	4b7e      	ldr	r3, [pc, #504]	; (801210c <__kernel_rem_pio2+0x32c>)
 8011f14:	f7ee fb88 	bl	8000628 <__aeabi_dmul>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	4639      	mov	r1, r7
 8011f20:	f7ee f9ca 	bl	80002b8 <__aeabi_dsub>
 8011f24:	460f      	mov	r7, r1
 8011f26:	4606      	mov	r6, r0
 8011f28:	f7ee fe2e 	bl	8000b88 <__aeabi_d2iz>
 8011f2c:	9006      	str	r0, [sp, #24]
 8011f2e:	f7ee fb11 	bl	8000554 <__aeabi_i2d>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	4630      	mov	r0, r6
 8011f38:	4639      	mov	r1, r7
 8011f3a:	f7ee f9bd 	bl	80002b8 <__aeabi_dsub>
 8011f3e:	f1ba 0f00 	cmp.w	sl, #0
 8011f42:	4606      	mov	r6, r0
 8011f44:	460f      	mov	r7, r1
 8011f46:	dd6c      	ble.n	8012022 <__kernel_rem_pio2+0x242>
 8011f48:	1e62      	subs	r2, r4, #1
 8011f4a:	ab0e      	add	r3, sp, #56	; 0x38
 8011f4c:	f1ca 0118 	rsb	r1, sl, #24
 8011f50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011f54:	9d06      	ldr	r5, [sp, #24]
 8011f56:	fa40 f301 	asr.w	r3, r0, r1
 8011f5a:	441d      	add	r5, r3
 8011f5c:	408b      	lsls	r3, r1
 8011f5e:	1ac0      	subs	r0, r0, r3
 8011f60:	ab0e      	add	r3, sp, #56	; 0x38
 8011f62:	9506      	str	r5, [sp, #24]
 8011f64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011f68:	f1ca 0317 	rsb	r3, sl, #23
 8011f6c:	fa40 f303 	asr.w	r3, r0, r3
 8011f70:	9302      	str	r3, [sp, #8]
 8011f72:	9b02      	ldr	r3, [sp, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dd62      	ble.n	801203e <__kernel_rem_pio2+0x25e>
 8011f78:	9b06      	ldr	r3, [sp, #24]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	9306      	str	r3, [sp, #24]
 8011f80:	4615      	mov	r5, r2
 8011f82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011f86:	4294      	cmp	r4, r2
 8011f88:	f300 8095 	bgt.w	80120b6 <__kernel_rem_pio2+0x2d6>
 8011f8c:	f1ba 0f00 	cmp.w	sl, #0
 8011f90:	dd07      	ble.n	8011fa2 <__kernel_rem_pio2+0x1c2>
 8011f92:	f1ba 0f01 	cmp.w	sl, #1
 8011f96:	f000 80a2 	beq.w	80120de <__kernel_rem_pio2+0x2fe>
 8011f9a:	f1ba 0f02 	cmp.w	sl, #2
 8011f9e:	f000 80c1 	beq.w	8012124 <__kernel_rem_pio2+0x344>
 8011fa2:	9b02      	ldr	r3, [sp, #8]
 8011fa4:	2b02      	cmp	r3, #2
 8011fa6:	d14a      	bne.n	801203e <__kernel_rem_pio2+0x25e>
 8011fa8:	4632      	mov	r2, r6
 8011faa:	463b      	mov	r3, r7
 8011fac:	2000      	movs	r0, #0
 8011fae:	4958      	ldr	r1, [pc, #352]	; (8012110 <__kernel_rem_pio2+0x330>)
 8011fb0:	f7ee f982 	bl	80002b8 <__aeabi_dsub>
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	460f      	mov	r7, r1
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	d040      	beq.n	801203e <__kernel_rem_pio2+0x25e>
 8011fbc:	4650      	mov	r0, sl
 8011fbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012100 <__kernel_rem_pio2+0x320>
 8011fc2:	f000 fb99 	bl	80126f8 <scalbn>
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	4639      	mov	r1, r7
 8011fca:	ec53 2b10 	vmov	r2, r3, d0
 8011fce:	f7ee f973 	bl	80002b8 <__aeabi_dsub>
 8011fd2:	4606      	mov	r6, r0
 8011fd4:	460f      	mov	r7, r1
 8011fd6:	e032      	b.n	801203e <__kernel_rem_pio2+0x25e>
 8011fd8:	2200      	movs	r2, #0
 8011fda:	4b4e      	ldr	r3, [pc, #312]	; (8012114 <__kernel_rem_pio2+0x334>)
 8011fdc:	4640      	mov	r0, r8
 8011fde:	4649      	mov	r1, r9
 8011fe0:	f7ee fb22 	bl	8000628 <__aeabi_dmul>
 8011fe4:	f7ee fdd0 	bl	8000b88 <__aeabi_d2iz>
 8011fe8:	f7ee fab4 	bl	8000554 <__aeabi_i2d>
 8011fec:	2200      	movs	r2, #0
 8011fee:	4b4a      	ldr	r3, [pc, #296]	; (8012118 <__kernel_rem_pio2+0x338>)
 8011ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ff4:	f7ee fb18 	bl	8000628 <__aeabi_dmul>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	4640      	mov	r0, r8
 8011ffe:	4649      	mov	r1, r9
 8012000:	f7ee f95a 	bl	80002b8 <__aeabi_dsub>
 8012004:	f7ee fdc0 	bl	8000b88 <__aeabi_d2iz>
 8012008:	ab0e      	add	r3, sp, #56	; 0x38
 801200a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801200e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012016:	f7ee f951 	bl	80002bc <__adddf3>
 801201a:	3501      	adds	r5, #1
 801201c:	4680      	mov	r8, r0
 801201e:	4689      	mov	r9, r1
 8012020:	e75e      	b.n	8011ee0 <__kernel_rem_pio2+0x100>
 8012022:	d105      	bne.n	8012030 <__kernel_rem_pio2+0x250>
 8012024:	1e63      	subs	r3, r4, #1
 8012026:	aa0e      	add	r2, sp, #56	; 0x38
 8012028:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801202c:	15c3      	asrs	r3, r0, #23
 801202e:	e79f      	b.n	8011f70 <__kernel_rem_pio2+0x190>
 8012030:	2200      	movs	r2, #0
 8012032:	4b3a      	ldr	r3, [pc, #232]	; (801211c <__kernel_rem_pio2+0x33c>)
 8012034:	f7ee fd7e 	bl	8000b34 <__aeabi_dcmpge>
 8012038:	2800      	cmp	r0, #0
 801203a:	d139      	bne.n	80120b0 <__kernel_rem_pio2+0x2d0>
 801203c:	9002      	str	r0, [sp, #8]
 801203e:	2200      	movs	r2, #0
 8012040:	2300      	movs	r3, #0
 8012042:	4630      	mov	r0, r6
 8012044:	4639      	mov	r1, r7
 8012046:	f7ee fd57 	bl	8000af8 <__aeabi_dcmpeq>
 801204a:	2800      	cmp	r0, #0
 801204c:	f000 80c7 	beq.w	80121de <__kernel_rem_pio2+0x3fe>
 8012050:	1e65      	subs	r5, r4, #1
 8012052:	462b      	mov	r3, r5
 8012054:	2200      	movs	r2, #0
 8012056:	9904      	ldr	r1, [sp, #16]
 8012058:	428b      	cmp	r3, r1
 801205a:	da6a      	bge.n	8012132 <__kernel_rem_pio2+0x352>
 801205c:	2a00      	cmp	r2, #0
 801205e:	f000 8088 	beq.w	8012172 <__kernel_rem_pio2+0x392>
 8012062:	ab0e      	add	r3, sp, #56	; 0x38
 8012064:	f1aa 0a18 	sub.w	sl, sl, #24
 8012068:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801206c:	2b00      	cmp	r3, #0
 801206e:	f000 80b4 	beq.w	80121da <__kernel_rem_pio2+0x3fa>
 8012072:	4650      	mov	r0, sl
 8012074:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012100 <__kernel_rem_pio2+0x320>
 8012078:	f000 fb3e 	bl	80126f8 <scalbn>
 801207c:	00ec      	lsls	r4, r5, #3
 801207e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012080:	191e      	adds	r6, r3, r4
 8012082:	ec59 8b10 	vmov	r8, r9, d0
 8012086:	f106 0a08 	add.w	sl, r6, #8
 801208a:	462f      	mov	r7, r5
 801208c:	2f00      	cmp	r7, #0
 801208e:	f280 80df 	bge.w	8012250 <__kernel_rem_pio2+0x470>
 8012092:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80120f8 <__kernel_rem_pio2+0x318>
 8012096:	f04f 0a00 	mov.w	sl, #0
 801209a:	eba5 030a 	sub.w	r3, r5, sl
 801209e:	2b00      	cmp	r3, #0
 80120a0:	f2c0 810a 	blt.w	80122b8 <__kernel_rem_pio2+0x4d8>
 80120a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012120 <__kernel_rem_pio2+0x340>
 80120a8:	ec59 8b18 	vmov	r8, r9, d8
 80120ac:	2700      	movs	r7, #0
 80120ae:	e0f5      	b.n	801229c <__kernel_rem_pio2+0x4bc>
 80120b0:	2302      	movs	r3, #2
 80120b2:	9302      	str	r3, [sp, #8]
 80120b4:	e760      	b.n	8011f78 <__kernel_rem_pio2+0x198>
 80120b6:	ab0e      	add	r3, sp, #56	; 0x38
 80120b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120bc:	b94d      	cbnz	r5, 80120d2 <__kernel_rem_pio2+0x2f2>
 80120be:	b12b      	cbz	r3, 80120cc <__kernel_rem_pio2+0x2ec>
 80120c0:	a80e      	add	r0, sp, #56	; 0x38
 80120c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80120c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80120ca:	2301      	movs	r3, #1
 80120cc:	3201      	adds	r2, #1
 80120ce:	461d      	mov	r5, r3
 80120d0:	e759      	b.n	8011f86 <__kernel_rem_pio2+0x1a6>
 80120d2:	a80e      	add	r0, sp, #56	; 0x38
 80120d4:	1acb      	subs	r3, r1, r3
 80120d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80120da:	462b      	mov	r3, r5
 80120dc:	e7f6      	b.n	80120cc <__kernel_rem_pio2+0x2ec>
 80120de:	1e62      	subs	r2, r4, #1
 80120e0:	ab0e      	add	r3, sp, #56	; 0x38
 80120e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80120ea:	a90e      	add	r1, sp, #56	; 0x38
 80120ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80120f0:	e757      	b.n	8011fa2 <__kernel_rem_pio2+0x1c2>
 80120f2:	bf00      	nop
 80120f4:	f3af 8000 	nop.w
	...
 8012104:	3ff00000 	.word	0x3ff00000
 8012108:	08017ab0 	.word	0x08017ab0
 801210c:	40200000 	.word	0x40200000
 8012110:	3ff00000 	.word	0x3ff00000
 8012114:	3e700000 	.word	0x3e700000
 8012118:	41700000 	.word	0x41700000
 801211c:	3fe00000 	.word	0x3fe00000
 8012120:	08017a70 	.word	0x08017a70
 8012124:	1e62      	subs	r2, r4, #1
 8012126:	ab0e      	add	r3, sp, #56	; 0x38
 8012128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801212c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012130:	e7db      	b.n	80120ea <__kernel_rem_pio2+0x30a>
 8012132:	a90e      	add	r1, sp, #56	; 0x38
 8012134:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012138:	3b01      	subs	r3, #1
 801213a:	430a      	orrs	r2, r1
 801213c:	e78b      	b.n	8012056 <__kernel_rem_pio2+0x276>
 801213e:	3301      	adds	r3, #1
 8012140:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012144:	2900      	cmp	r1, #0
 8012146:	d0fa      	beq.n	801213e <__kernel_rem_pio2+0x35e>
 8012148:	9a08      	ldr	r2, [sp, #32]
 801214a:	4422      	add	r2, r4
 801214c:	00d2      	lsls	r2, r2, #3
 801214e:	a922      	add	r1, sp, #136	; 0x88
 8012150:	18e3      	adds	r3, r4, r3
 8012152:	9206      	str	r2, [sp, #24]
 8012154:	440a      	add	r2, r1
 8012156:	9302      	str	r3, [sp, #8]
 8012158:	f10b 0108 	add.w	r1, fp, #8
 801215c:	f102 0308 	add.w	r3, r2, #8
 8012160:	1c66      	adds	r6, r4, #1
 8012162:	910a      	str	r1, [sp, #40]	; 0x28
 8012164:	2500      	movs	r5, #0
 8012166:	930d      	str	r3, [sp, #52]	; 0x34
 8012168:	9b02      	ldr	r3, [sp, #8]
 801216a:	42b3      	cmp	r3, r6
 801216c:	da04      	bge.n	8012178 <__kernel_rem_pio2+0x398>
 801216e:	461c      	mov	r4, r3
 8012170:	e6a6      	b.n	8011ec0 <__kernel_rem_pio2+0xe0>
 8012172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012174:	2301      	movs	r3, #1
 8012176:	e7e3      	b.n	8012140 <__kernel_rem_pio2+0x360>
 8012178:	9b06      	ldr	r3, [sp, #24]
 801217a:	18ef      	adds	r7, r5, r3
 801217c:	ab22      	add	r3, sp, #136	; 0x88
 801217e:	441f      	add	r7, r3
 8012180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012182:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012186:	f7ee f9e5 	bl	8000554 <__aeabi_i2d>
 801218a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218c:	461c      	mov	r4, r3
 801218e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012190:	e9c7 0100 	strd	r0, r1, [r7]
 8012194:	eb03 0b05 	add.w	fp, r3, r5
 8012198:	2700      	movs	r7, #0
 801219a:	f04f 0800 	mov.w	r8, #0
 801219e:	f04f 0900 	mov.w	r9, #0
 80121a2:	9b07      	ldr	r3, [sp, #28]
 80121a4:	429f      	cmp	r7, r3
 80121a6:	dd08      	ble.n	80121ba <__kernel_rem_pio2+0x3da>
 80121a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121aa:	aa72      	add	r2, sp, #456	; 0x1c8
 80121ac:	18eb      	adds	r3, r5, r3
 80121ae:	4413      	add	r3, r2
 80121b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80121b4:	3601      	adds	r6, #1
 80121b6:	3508      	adds	r5, #8
 80121b8:	e7d6      	b.n	8012168 <__kernel_rem_pio2+0x388>
 80121ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80121be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80121c2:	f7ee fa31 	bl	8000628 <__aeabi_dmul>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	4640      	mov	r0, r8
 80121cc:	4649      	mov	r1, r9
 80121ce:	f7ee f875 	bl	80002bc <__adddf3>
 80121d2:	3701      	adds	r7, #1
 80121d4:	4680      	mov	r8, r0
 80121d6:	4689      	mov	r9, r1
 80121d8:	e7e3      	b.n	80121a2 <__kernel_rem_pio2+0x3c2>
 80121da:	3d01      	subs	r5, #1
 80121dc:	e741      	b.n	8012062 <__kernel_rem_pio2+0x282>
 80121de:	f1ca 0000 	rsb	r0, sl, #0
 80121e2:	ec47 6b10 	vmov	d0, r6, r7
 80121e6:	f000 fa87 	bl	80126f8 <scalbn>
 80121ea:	ec57 6b10 	vmov	r6, r7, d0
 80121ee:	2200      	movs	r2, #0
 80121f0:	4b99      	ldr	r3, [pc, #612]	; (8012458 <__kernel_rem_pio2+0x678>)
 80121f2:	ee10 0a10 	vmov	r0, s0
 80121f6:	4639      	mov	r1, r7
 80121f8:	f7ee fc9c 	bl	8000b34 <__aeabi_dcmpge>
 80121fc:	b1f8      	cbz	r0, 801223e <__kernel_rem_pio2+0x45e>
 80121fe:	2200      	movs	r2, #0
 8012200:	4b96      	ldr	r3, [pc, #600]	; (801245c <__kernel_rem_pio2+0x67c>)
 8012202:	4630      	mov	r0, r6
 8012204:	4639      	mov	r1, r7
 8012206:	f7ee fa0f 	bl	8000628 <__aeabi_dmul>
 801220a:	f7ee fcbd 	bl	8000b88 <__aeabi_d2iz>
 801220e:	4680      	mov	r8, r0
 8012210:	f7ee f9a0 	bl	8000554 <__aeabi_i2d>
 8012214:	2200      	movs	r2, #0
 8012216:	4b90      	ldr	r3, [pc, #576]	; (8012458 <__kernel_rem_pio2+0x678>)
 8012218:	f7ee fa06 	bl	8000628 <__aeabi_dmul>
 801221c:	460b      	mov	r3, r1
 801221e:	4602      	mov	r2, r0
 8012220:	4639      	mov	r1, r7
 8012222:	4630      	mov	r0, r6
 8012224:	f7ee f848 	bl	80002b8 <__aeabi_dsub>
 8012228:	f7ee fcae 	bl	8000b88 <__aeabi_d2iz>
 801222c:	1c65      	adds	r5, r4, #1
 801222e:	ab0e      	add	r3, sp, #56	; 0x38
 8012230:	f10a 0a18 	add.w	sl, sl, #24
 8012234:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012238:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801223c:	e719      	b.n	8012072 <__kernel_rem_pio2+0x292>
 801223e:	4630      	mov	r0, r6
 8012240:	4639      	mov	r1, r7
 8012242:	f7ee fca1 	bl	8000b88 <__aeabi_d2iz>
 8012246:	ab0e      	add	r3, sp, #56	; 0x38
 8012248:	4625      	mov	r5, r4
 801224a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801224e:	e710      	b.n	8012072 <__kernel_rem_pio2+0x292>
 8012250:	ab0e      	add	r3, sp, #56	; 0x38
 8012252:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012256:	f7ee f97d 	bl	8000554 <__aeabi_i2d>
 801225a:	4642      	mov	r2, r8
 801225c:	464b      	mov	r3, r9
 801225e:	f7ee f9e3 	bl	8000628 <__aeabi_dmul>
 8012262:	2200      	movs	r2, #0
 8012264:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012268:	4b7c      	ldr	r3, [pc, #496]	; (801245c <__kernel_rem_pio2+0x67c>)
 801226a:	4640      	mov	r0, r8
 801226c:	4649      	mov	r1, r9
 801226e:	f7ee f9db 	bl	8000628 <__aeabi_dmul>
 8012272:	3f01      	subs	r7, #1
 8012274:	4680      	mov	r8, r0
 8012276:	4689      	mov	r9, r1
 8012278:	e708      	b.n	801208c <__kernel_rem_pio2+0x2ac>
 801227a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012286:	f7ee f9cf 	bl	8000628 <__aeabi_dmul>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	4640      	mov	r0, r8
 8012290:	4649      	mov	r1, r9
 8012292:	f7ee f813 	bl	80002bc <__adddf3>
 8012296:	3701      	adds	r7, #1
 8012298:	4680      	mov	r8, r0
 801229a:	4689      	mov	r9, r1
 801229c:	9b04      	ldr	r3, [sp, #16]
 801229e:	429f      	cmp	r7, r3
 80122a0:	dc01      	bgt.n	80122a6 <__kernel_rem_pio2+0x4c6>
 80122a2:	45ba      	cmp	sl, r7
 80122a4:	dae9      	bge.n	801227a <__kernel_rem_pio2+0x49a>
 80122a6:	ab4a      	add	r3, sp, #296	; 0x128
 80122a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80122ac:	e9c3 8900 	strd	r8, r9, [r3]
 80122b0:	f10a 0a01 	add.w	sl, sl, #1
 80122b4:	3e08      	subs	r6, #8
 80122b6:	e6f0      	b.n	801209a <__kernel_rem_pio2+0x2ba>
 80122b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80122ba:	2b03      	cmp	r3, #3
 80122bc:	d85b      	bhi.n	8012376 <__kernel_rem_pio2+0x596>
 80122be:	e8df f003 	tbb	[pc, r3]
 80122c2:	264a      	.short	0x264a
 80122c4:	0226      	.short	0x0226
 80122c6:	ab9a      	add	r3, sp, #616	; 0x268
 80122c8:	441c      	add	r4, r3
 80122ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80122ce:	46a2      	mov	sl, r4
 80122d0:	46ab      	mov	fp, r5
 80122d2:	f1bb 0f00 	cmp.w	fp, #0
 80122d6:	dc6c      	bgt.n	80123b2 <__kernel_rem_pio2+0x5d2>
 80122d8:	46a2      	mov	sl, r4
 80122da:	46ab      	mov	fp, r5
 80122dc:	f1bb 0f01 	cmp.w	fp, #1
 80122e0:	f300 8086 	bgt.w	80123f0 <__kernel_rem_pio2+0x610>
 80122e4:	2000      	movs	r0, #0
 80122e6:	2100      	movs	r1, #0
 80122e8:	2d01      	cmp	r5, #1
 80122ea:	f300 80a0 	bgt.w	801242e <__kernel_rem_pio2+0x64e>
 80122ee:	9b02      	ldr	r3, [sp, #8]
 80122f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80122f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f040 809e 	bne.w	801243a <__kernel_rem_pio2+0x65a>
 80122fe:	9b01      	ldr	r3, [sp, #4]
 8012300:	e9c3 7800 	strd	r7, r8, [r3]
 8012304:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012308:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801230c:	e033      	b.n	8012376 <__kernel_rem_pio2+0x596>
 801230e:	3408      	adds	r4, #8
 8012310:	ab4a      	add	r3, sp, #296	; 0x128
 8012312:	441c      	add	r4, r3
 8012314:	462e      	mov	r6, r5
 8012316:	2000      	movs	r0, #0
 8012318:	2100      	movs	r1, #0
 801231a:	2e00      	cmp	r6, #0
 801231c:	da3a      	bge.n	8012394 <__kernel_rem_pio2+0x5b4>
 801231e:	9b02      	ldr	r3, [sp, #8]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d03d      	beq.n	80123a0 <__kernel_rem_pio2+0x5c0>
 8012324:	4602      	mov	r2, r0
 8012326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801232a:	9c01      	ldr	r4, [sp, #4]
 801232c:	e9c4 2300 	strd	r2, r3, [r4]
 8012330:	4602      	mov	r2, r0
 8012332:	460b      	mov	r3, r1
 8012334:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012338:	f7ed ffbe 	bl	80002b8 <__aeabi_dsub>
 801233c:	ae4c      	add	r6, sp, #304	; 0x130
 801233e:	2401      	movs	r4, #1
 8012340:	42a5      	cmp	r5, r4
 8012342:	da30      	bge.n	80123a6 <__kernel_rem_pio2+0x5c6>
 8012344:	9b02      	ldr	r3, [sp, #8]
 8012346:	b113      	cbz	r3, 801234e <__kernel_rem_pio2+0x56e>
 8012348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801234c:	4619      	mov	r1, r3
 801234e:	9b01      	ldr	r3, [sp, #4]
 8012350:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012354:	e00f      	b.n	8012376 <__kernel_rem_pio2+0x596>
 8012356:	ab9a      	add	r3, sp, #616	; 0x268
 8012358:	441c      	add	r4, r3
 801235a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801235e:	2000      	movs	r0, #0
 8012360:	2100      	movs	r1, #0
 8012362:	2d00      	cmp	r5, #0
 8012364:	da10      	bge.n	8012388 <__kernel_rem_pio2+0x5a8>
 8012366:	9b02      	ldr	r3, [sp, #8]
 8012368:	b113      	cbz	r3, 8012370 <__kernel_rem_pio2+0x590>
 801236a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801236e:	4619      	mov	r1, r3
 8012370:	9b01      	ldr	r3, [sp, #4]
 8012372:	e9c3 0100 	strd	r0, r1, [r3]
 8012376:	9b06      	ldr	r3, [sp, #24]
 8012378:	f003 0007 	and.w	r0, r3, #7
 801237c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012380:	ecbd 8b02 	vpop	{d8}
 8012384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012388:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801238c:	f7ed ff96 	bl	80002bc <__adddf3>
 8012390:	3d01      	subs	r5, #1
 8012392:	e7e6      	b.n	8012362 <__kernel_rem_pio2+0x582>
 8012394:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012398:	f7ed ff90 	bl	80002bc <__adddf3>
 801239c:	3e01      	subs	r6, #1
 801239e:	e7bc      	b.n	801231a <__kernel_rem_pio2+0x53a>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	e7c1      	b.n	801232a <__kernel_rem_pio2+0x54a>
 80123a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80123aa:	f7ed ff87 	bl	80002bc <__adddf3>
 80123ae:	3401      	adds	r4, #1
 80123b0:	e7c6      	b.n	8012340 <__kernel_rem_pio2+0x560>
 80123b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80123b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80123ba:	4640      	mov	r0, r8
 80123bc:	ec53 2b17 	vmov	r2, r3, d7
 80123c0:	4649      	mov	r1, r9
 80123c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80123c6:	f7ed ff79 	bl	80002bc <__adddf3>
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	4606      	mov	r6, r0
 80123d0:	460f      	mov	r7, r1
 80123d2:	4640      	mov	r0, r8
 80123d4:	4649      	mov	r1, r9
 80123d6:	f7ed ff6f 	bl	80002b8 <__aeabi_dsub>
 80123da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123de:	f7ed ff6d 	bl	80002bc <__adddf3>
 80123e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123e6:	e9ca 0100 	strd	r0, r1, [sl]
 80123ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80123ee:	e770      	b.n	80122d2 <__kernel_rem_pio2+0x4f2>
 80123f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80123f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80123f8:	4630      	mov	r0, r6
 80123fa:	ec53 2b17 	vmov	r2, r3, d7
 80123fe:	4639      	mov	r1, r7
 8012400:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012404:	f7ed ff5a 	bl	80002bc <__adddf3>
 8012408:	4602      	mov	r2, r0
 801240a:	460b      	mov	r3, r1
 801240c:	4680      	mov	r8, r0
 801240e:	4689      	mov	r9, r1
 8012410:	4630      	mov	r0, r6
 8012412:	4639      	mov	r1, r7
 8012414:	f7ed ff50 	bl	80002b8 <__aeabi_dsub>
 8012418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801241c:	f7ed ff4e 	bl	80002bc <__adddf3>
 8012420:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012424:	e9ca 0100 	strd	r0, r1, [sl]
 8012428:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801242c:	e756      	b.n	80122dc <__kernel_rem_pio2+0x4fc>
 801242e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012432:	f7ed ff43 	bl	80002bc <__adddf3>
 8012436:	3d01      	subs	r5, #1
 8012438:	e756      	b.n	80122e8 <__kernel_rem_pio2+0x508>
 801243a:	9b01      	ldr	r3, [sp, #4]
 801243c:	9a01      	ldr	r2, [sp, #4]
 801243e:	601f      	str	r7, [r3, #0]
 8012440:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012444:	605c      	str	r4, [r3, #4]
 8012446:	609d      	str	r5, [r3, #8]
 8012448:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801244c:	60d3      	str	r3, [r2, #12]
 801244e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012452:	6110      	str	r0, [r2, #16]
 8012454:	6153      	str	r3, [r2, #20]
 8012456:	e78e      	b.n	8012376 <__kernel_rem_pio2+0x596>
 8012458:	41700000 	.word	0x41700000
 801245c:	3e700000 	.word	0x3e700000

08012460 <__kernel_sin>:
 8012460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012464:	ec55 4b10 	vmov	r4, r5, d0
 8012468:	b085      	sub	sp, #20
 801246a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801246e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012472:	ed8d 1b00 	vstr	d1, [sp]
 8012476:	9002      	str	r0, [sp, #8]
 8012478:	da06      	bge.n	8012488 <__kernel_sin+0x28>
 801247a:	ee10 0a10 	vmov	r0, s0
 801247e:	4629      	mov	r1, r5
 8012480:	f7ee fb82 	bl	8000b88 <__aeabi_d2iz>
 8012484:	2800      	cmp	r0, #0
 8012486:	d051      	beq.n	801252c <__kernel_sin+0xcc>
 8012488:	4622      	mov	r2, r4
 801248a:	462b      	mov	r3, r5
 801248c:	4620      	mov	r0, r4
 801248e:	4629      	mov	r1, r5
 8012490:	f7ee f8ca 	bl	8000628 <__aeabi_dmul>
 8012494:	4682      	mov	sl, r0
 8012496:	468b      	mov	fp, r1
 8012498:	4602      	mov	r2, r0
 801249a:	460b      	mov	r3, r1
 801249c:	4620      	mov	r0, r4
 801249e:	4629      	mov	r1, r5
 80124a0:	f7ee f8c2 	bl	8000628 <__aeabi_dmul>
 80124a4:	a341      	add	r3, pc, #260	; (adr r3, 80125ac <__kernel_sin+0x14c>)
 80124a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124aa:	4680      	mov	r8, r0
 80124ac:	4689      	mov	r9, r1
 80124ae:	4650      	mov	r0, sl
 80124b0:	4659      	mov	r1, fp
 80124b2:	f7ee f8b9 	bl	8000628 <__aeabi_dmul>
 80124b6:	a33f      	add	r3, pc, #252	; (adr r3, 80125b4 <__kernel_sin+0x154>)
 80124b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124bc:	f7ed fefc 	bl	80002b8 <__aeabi_dsub>
 80124c0:	4652      	mov	r2, sl
 80124c2:	465b      	mov	r3, fp
 80124c4:	f7ee f8b0 	bl	8000628 <__aeabi_dmul>
 80124c8:	a33c      	add	r3, pc, #240	; (adr r3, 80125bc <__kernel_sin+0x15c>)
 80124ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ce:	f7ed fef5 	bl	80002bc <__adddf3>
 80124d2:	4652      	mov	r2, sl
 80124d4:	465b      	mov	r3, fp
 80124d6:	f7ee f8a7 	bl	8000628 <__aeabi_dmul>
 80124da:	a33a      	add	r3, pc, #232	; (adr r3, 80125c4 <__kernel_sin+0x164>)
 80124dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e0:	f7ed feea 	bl	80002b8 <__aeabi_dsub>
 80124e4:	4652      	mov	r2, sl
 80124e6:	465b      	mov	r3, fp
 80124e8:	f7ee f89e 	bl	8000628 <__aeabi_dmul>
 80124ec:	a337      	add	r3, pc, #220	; (adr r3, 80125cc <__kernel_sin+0x16c>)
 80124ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f2:	f7ed fee3 	bl	80002bc <__adddf3>
 80124f6:	9b02      	ldr	r3, [sp, #8]
 80124f8:	4606      	mov	r6, r0
 80124fa:	460f      	mov	r7, r1
 80124fc:	b9db      	cbnz	r3, 8012536 <__kernel_sin+0xd6>
 80124fe:	4602      	mov	r2, r0
 8012500:	460b      	mov	r3, r1
 8012502:	4650      	mov	r0, sl
 8012504:	4659      	mov	r1, fp
 8012506:	f7ee f88f 	bl	8000628 <__aeabi_dmul>
 801250a:	a325      	add	r3, pc, #148	; (adr r3, 80125a0 <__kernel_sin+0x140>)
 801250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012510:	f7ed fed2 	bl	80002b8 <__aeabi_dsub>
 8012514:	4642      	mov	r2, r8
 8012516:	464b      	mov	r3, r9
 8012518:	f7ee f886 	bl	8000628 <__aeabi_dmul>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	4620      	mov	r0, r4
 8012522:	4629      	mov	r1, r5
 8012524:	f7ed feca 	bl	80002bc <__adddf3>
 8012528:	4604      	mov	r4, r0
 801252a:	460d      	mov	r5, r1
 801252c:	ec45 4b10 	vmov	d0, r4, r5
 8012530:	b005      	add	sp, #20
 8012532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012536:	2200      	movs	r2, #0
 8012538:	4b1b      	ldr	r3, [pc, #108]	; (80125a8 <__kernel_sin+0x148>)
 801253a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801253e:	f7ee f873 	bl	8000628 <__aeabi_dmul>
 8012542:	4632      	mov	r2, r6
 8012544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012548:	463b      	mov	r3, r7
 801254a:	4640      	mov	r0, r8
 801254c:	4649      	mov	r1, r9
 801254e:	f7ee f86b 	bl	8000628 <__aeabi_dmul>
 8012552:	4602      	mov	r2, r0
 8012554:	460b      	mov	r3, r1
 8012556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255a:	f7ed fead 	bl	80002b8 <__aeabi_dsub>
 801255e:	4652      	mov	r2, sl
 8012560:	465b      	mov	r3, fp
 8012562:	f7ee f861 	bl	8000628 <__aeabi_dmul>
 8012566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801256a:	f7ed fea5 	bl	80002b8 <__aeabi_dsub>
 801256e:	a30c      	add	r3, pc, #48	; (adr r3, 80125a0 <__kernel_sin+0x140>)
 8012570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012574:	4606      	mov	r6, r0
 8012576:	460f      	mov	r7, r1
 8012578:	4640      	mov	r0, r8
 801257a:	4649      	mov	r1, r9
 801257c:	f7ee f854 	bl	8000628 <__aeabi_dmul>
 8012580:	4602      	mov	r2, r0
 8012582:	460b      	mov	r3, r1
 8012584:	4630      	mov	r0, r6
 8012586:	4639      	mov	r1, r7
 8012588:	f7ed fe98 	bl	80002bc <__adddf3>
 801258c:	4602      	mov	r2, r0
 801258e:	460b      	mov	r3, r1
 8012590:	4620      	mov	r0, r4
 8012592:	4629      	mov	r1, r5
 8012594:	f7ed fe90 	bl	80002b8 <__aeabi_dsub>
 8012598:	e7c6      	b.n	8012528 <__kernel_sin+0xc8>
 801259a:	bf00      	nop
 801259c:	f3af 8000 	nop.w
 80125a0:	55555549 	.word	0x55555549
 80125a4:	3fc55555 	.word	0x3fc55555
 80125a8:	3fe00000 	.word	0x3fe00000
 80125ac:	5acfd57c 	.word	0x5acfd57c
 80125b0:	3de5d93a 	.word	0x3de5d93a
 80125b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80125b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80125bc:	57b1fe7d 	.word	0x57b1fe7d
 80125c0:	3ec71de3 	.word	0x3ec71de3
 80125c4:	19c161d5 	.word	0x19c161d5
 80125c8:	3f2a01a0 	.word	0x3f2a01a0
 80125cc:	1110f8a6 	.word	0x1110f8a6
 80125d0:	3f811111 	.word	0x3f811111

080125d4 <fabs>:
 80125d4:	ec51 0b10 	vmov	r0, r1, d0
 80125d8:	ee10 2a10 	vmov	r2, s0
 80125dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125e0:	ec43 2b10 	vmov	d0, r2, r3
 80125e4:	4770      	bx	lr
	...

080125e8 <floor>:
 80125e8:	ec51 0b10 	vmov	r0, r1, d0
 80125ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80125f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80125f8:	2e13      	cmp	r6, #19
 80125fa:	460c      	mov	r4, r1
 80125fc:	ee10 5a10 	vmov	r5, s0
 8012600:	4680      	mov	r8, r0
 8012602:	dc34      	bgt.n	801266e <floor+0x86>
 8012604:	2e00      	cmp	r6, #0
 8012606:	da16      	bge.n	8012636 <floor+0x4e>
 8012608:	a335      	add	r3, pc, #212	; (adr r3, 80126e0 <floor+0xf8>)
 801260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260e:	f7ed fe55 	bl	80002bc <__adddf3>
 8012612:	2200      	movs	r2, #0
 8012614:	2300      	movs	r3, #0
 8012616:	f7ee fa97 	bl	8000b48 <__aeabi_dcmpgt>
 801261a:	b148      	cbz	r0, 8012630 <floor+0x48>
 801261c:	2c00      	cmp	r4, #0
 801261e:	da59      	bge.n	80126d4 <floor+0xec>
 8012620:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012624:	4a30      	ldr	r2, [pc, #192]	; (80126e8 <floor+0x100>)
 8012626:	432b      	orrs	r3, r5
 8012628:	2500      	movs	r5, #0
 801262a:	42ab      	cmp	r3, r5
 801262c:	bf18      	it	ne
 801262e:	4614      	movne	r4, r2
 8012630:	4621      	mov	r1, r4
 8012632:	4628      	mov	r0, r5
 8012634:	e025      	b.n	8012682 <floor+0x9a>
 8012636:	4f2d      	ldr	r7, [pc, #180]	; (80126ec <floor+0x104>)
 8012638:	4137      	asrs	r7, r6
 801263a:	ea01 0307 	and.w	r3, r1, r7
 801263e:	4303      	orrs	r3, r0
 8012640:	d01f      	beq.n	8012682 <floor+0x9a>
 8012642:	a327      	add	r3, pc, #156	; (adr r3, 80126e0 <floor+0xf8>)
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	f7ed fe38 	bl	80002bc <__adddf3>
 801264c:	2200      	movs	r2, #0
 801264e:	2300      	movs	r3, #0
 8012650:	f7ee fa7a 	bl	8000b48 <__aeabi_dcmpgt>
 8012654:	2800      	cmp	r0, #0
 8012656:	d0eb      	beq.n	8012630 <floor+0x48>
 8012658:	2c00      	cmp	r4, #0
 801265a:	bfbe      	ittt	lt
 801265c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012660:	fa43 f606 	asrlt.w	r6, r3, r6
 8012664:	19a4      	addlt	r4, r4, r6
 8012666:	ea24 0407 	bic.w	r4, r4, r7
 801266a:	2500      	movs	r5, #0
 801266c:	e7e0      	b.n	8012630 <floor+0x48>
 801266e:	2e33      	cmp	r6, #51	; 0x33
 8012670:	dd0b      	ble.n	801268a <floor+0xa2>
 8012672:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012676:	d104      	bne.n	8012682 <floor+0x9a>
 8012678:	ee10 2a10 	vmov	r2, s0
 801267c:	460b      	mov	r3, r1
 801267e:	f7ed fe1d 	bl	80002bc <__adddf3>
 8012682:	ec41 0b10 	vmov	d0, r0, r1
 8012686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801268a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801268e:	f04f 33ff 	mov.w	r3, #4294967295
 8012692:	fa23 f707 	lsr.w	r7, r3, r7
 8012696:	4207      	tst	r7, r0
 8012698:	d0f3      	beq.n	8012682 <floor+0x9a>
 801269a:	a311      	add	r3, pc, #68	; (adr r3, 80126e0 <floor+0xf8>)
 801269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a0:	f7ed fe0c 	bl	80002bc <__adddf3>
 80126a4:	2200      	movs	r2, #0
 80126a6:	2300      	movs	r3, #0
 80126a8:	f7ee fa4e 	bl	8000b48 <__aeabi_dcmpgt>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d0bf      	beq.n	8012630 <floor+0x48>
 80126b0:	2c00      	cmp	r4, #0
 80126b2:	da02      	bge.n	80126ba <floor+0xd2>
 80126b4:	2e14      	cmp	r6, #20
 80126b6:	d103      	bne.n	80126c0 <floor+0xd8>
 80126b8:	3401      	adds	r4, #1
 80126ba:	ea25 0507 	bic.w	r5, r5, r7
 80126be:	e7b7      	b.n	8012630 <floor+0x48>
 80126c0:	2301      	movs	r3, #1
 80126c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80126c6:	fa03 f606 	lsl.w	r6, r3, r6
 80126ca:	4435      	add	r5, r6
 80126cc:	4545      	cmp	r5, r8
 80126ce:	bf38      	it	cc
 80126d0:	18e4      	addcc	r4, r4, r3
 80126d2:	e7f2      	b.n	80126ba <floor+0xd2>
 80126d4:	2500      	movs	r5, #0
 80126d6:	462c      	mov	r4, r5
 80126d8:	e7aa      	b.n	8012630 <floor+0x48>
 80126da:	bf00      	nop
 80126dc:	f3af 8000 	nop.w
 80126e0:	8800759c 	.word	0x8800759c
 80126e4:	7e37e43c 	.word	0x7e37e43c
 80126e8:	bff00000 	.word	0xbff00000
 80126ec:	000fffff 	.word	0x000fffff

080126f0 <matherr>:
 80126f0:	2000      	movs	r0, #0
 80126f2:	4770      	bx	lr
 80126f4:	0000      	movs	r0, r0
	...

080126f8 <scalbn>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	ec55 4b10 	vmov	r4, r5, d0
 80126fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012702:	4606      	mov	r6, r0
 8012704:	462b      	mov	r3, r5
 8012706:	b9aa      	cbnz	r2, 8012734 <scalbn+0x3c>
 8012708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801270c:	4323      	orrs	r3, r4
 801270e:	d03b      	beq.n	8012788 <scalbn+0x90>
 8012710:	4b31      	ldr	r3, [pc, #196]	; (80127d8 <scalbn+0xe0>)
 8012712:	4629      	mov	r1, r5
 8012714:	2200      	movs	r2, #0
 8012716:	ee10 0a10 	vmov	r0, s0
 801271a:	f7ed ff85 	bl	8000628 <__aeabi_dmul>
 801271e:	4b2f      	ldr	r3, [pc, #188]	; (80127dc <scalbn+0xe4>)
 8012720:	429e      	cmp	r6, r3
 8012722:	4604      	mov	r4, r0
 8012724:	460d      	mov	r5, r1
 8012726:	da12      	bge.n	801274e <scalbn+0x56>
 8012728:	a327      	add	r3, pc, #156	; (adr r3, 80127c8 <scalbn+0xd0>)
 801272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272e:	f7ed ff7b 	bl	8000628 <__aeabi_dmul>
 8012732:	e009      	b.n	8012748 <scalbn+0x50>
 8012734:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012738:	428a      	cmp	r2, r1
 801273a:	d10c      	bne.n	8012756 <scalbn+0x5e>
 801273c:	ee10 2a10 	vmov	r2, s0
 8012740:	4620      	mov	r0, r4
 8012742:	4629      	mov	r1, r5
 8012744:	f7ed fdba 	bl	80002bc <__adddf3>
 8012748:	4604      	mov	r4, r0
 801274a:	460d      	mov	r5, r1
 801274c:	e01c      	b.n	8012788 <scalbn+0x90>
 801274e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012752:	460b      	mov	r3, r1
 8012754:	3a36      	subs	r2, #54	; 0x36
 8012756:	4432      	add	r2, r6
 8012758:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801275c:	428a      	cmp	r2, r1
 801275e:	dd0b      	ble.n	8012778 <scalbn+0x80>
 8012760:	ec45 4b11 	vmov	d1, r4, r5
 8012764:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80127d0 <scalbn+0xd8>
 8012768:	f000 f83c 	bl	80127e4 <copysign>
 801276c:	a318      	add	r3, pc, #96	; (adr r3, 80127d0 <scalbn+0xd8>)
 801276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012772:	ec51 0b10 	vmov	r0, r1, d0
 8012776:	e7da      	b.n	801272e <scalbn+0x36>
 8012778:	2a00      	cmp	r2, #0
 801277a:	dd08      	ble.n	801278e <scalbn+0x96>
 801277c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012780:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012784:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012788:	ec45 4b10 	vmov	d0, r4, r5
 801278c:	bd70      	pop	{r4, r5, r6, pc}
 801278e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012792:	da0d      	bge.n	80127b0 <scalbn+0xb8>
 8012794:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012798:	429e      	cmp	r6, r3
 801279a:	ec45 4b11 	vmov	d1, r4, r5
 801279e:	dce1      	bgt.n	8012764 <scalbn+0x6c>
 80127a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80127c8 <scalbn+0xd0>
 80127a4:	f000 f81e 	bl	80127e4 <copysign>
 80127a8:	a307      	add	r3, pc, #28	; (adr r3, 80127c8 <scalbn+0xd0>)
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	e7e0      	b.n	8012772 <scalbn+0x7a>
 80127b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127b4:	3236      	adds	r2, #54	; 0x36
 80127b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80127be:	4620      	mov	r0, r4
 80127c0:	4629      	mov	r1, r5
 80127c2:	2200      	movs	r2, #0
 80127c4:	4b06      	ldr	r3, [pc, #24]	; (80127e0 <scalbn+0xe8>)
 80127c6:	e7b2      	b.n	801272e <scalbn+0x36>
 80127c8:	c2f8f359 	.word	0xc2f8f359
 80127cc:	01a56e1f 	.word	0x01a56e1f
 80127d0:	8800759c 	.word	0x8800759c
 80127d4:	7e37e43c 	.word	0x7e37e43c
 80127d8:	43500000 	.word	0x43500000
 80127dc:	ffff3cb0 	.word	0xffff3cb0
 80127e0:	3c900000 	.word	0x3c900000

080127e4 <copysign>:
 80127e4:	ec51 0b10 	vmov	r0, r1, d0
 80127e8:	ee11 0a90 	vmov	r0, s3
 80127ec:	ee10 2a10 	vmov	r2, s0
 80127f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80127f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80127f8:	ea41 0300 	orr.w	r3, r1, r0
 80127fc:	ec43 2b10 	vmov	d0, r2, r3
 8012800:	4770      	bx	lr
	...

08012804 <__errno>:
 8012804:	4b01      	ldr	r3, [pc, #4]	; (801280c <__errno+0x8>)
 8012806:	6818      	ldr	r0, [r3, #0]
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	2000000c 	.word	0x2000000c

08012810 <__libc_init_array>:
 8012810:	b570      	push	{r4, r5, r6, lr}
 8012812:	4e0d      	ldr	r6, [pc, #52]	; (8012848 <__libc_init_array+0x38>)
 8012814:	4c0d      	ldr	r4, [pc, #52]	; (801284c <__libc_init_array+0x3c>)
 8012816:	1ba4      	subs	r4, r4, r6
 8012818:	10a4      	asrs	r4, r4, #2
 801281a:	2500      	movs	r5, #0
 801281c:	42a5      	cmp	r5, r4
 801281e:	d109      	bne.n	8012834 <__libc_init_array+0x24>
 8012820:	4e0b      	ldr	r6, [pc, #44]	; (8012850 <__libc_init_array+0x40>)
 8012822:	4c0c      	ldr	r4, [pc, #48]	; (8012854 <__libc_init_array+0x44>)
 8012824:	f004 feec 	bl	8017600 <_init>
 8012828:	1ba4      	subs	r4, r4, r6
 801282a:	10a4      	asrs	r4, r4, #2
 801282c:	2500      	movs	r5, #0
 801282e:	42a5      	cmp	r5, r4
 8012830:	d105      	bne.n	801283e <__libc_init_array+0x2e>
 8012832:	bd70      	pop	{r4, r5, r6, pc}
 8012834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012838:	4798      	blx	r3
 801283a:	3501      	adds	r5, #1
 801283c:	e7ee      	b.n	801281c <__libc_init_array+0xc>
 801283e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012842:	4798      	blx	r3
 8012844:	3501      	adds	r5, #1
 8012846:	e7f2      	b.n	801282e <__libc_init_array+0x1e>
 8012848:	08017e04 	.word	0x08017e04
 801284c:	08017e04 	.word	0x08017e04
 8012850:	08017e04 	.word	0x08017e04
 8012854:	08017e0c 	.word	0x08017e0c

08012858 <memset>:
 8012858:	4402      	add	r2, r0
 801285a:	4603      	mov	r3, r0
 801285c:	4293      	cmp	r3, r2
 801285e:	d100      	bne.n	8012862 <memset+0xa>
 8012860:	4770      	bx	lr
 8012862:	f803 1b01 	strb.w	r1, [r3], #1
 8012866:	e7f9      	b.n	801285c <memset+0x4>

08012868 <__cvt>:
 8012868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801286c:	ec55 4b10 	vmov	r4, r5, d0
 8012870:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012872:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012876:	2d00      	cmp	r5, #0
 8012878:	460e      	mov	r6, r1
 801287a:	4691      	mov	r9, r2
 801287c:	4619      	mov	r1, r3
 801287e:	bfb8      	it	lt
 8012880:	4622      	movlt	r2, r4
 8012882:	462b      	mov	r3, r5
 8012884:	f027 0720 	bic.w	r7, r7, #32
 8012888:	bfbb      	ittet	lt
 801288a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801288e:	461d      	movlt	r5, r3
 8012890:	2300      	movge	r3, #0
 8012892:	232d      	movlt	r3, #45	; 0x2d
 8012894:	bfb8      	it	lt
 8012896:	4614      	movlt	r4, r2
 8012898:	2f46      	cmp	r7, #70	; 0x46
 801289a:	700b      	strb	r3, [r1, #0]
 801289c:	d004      	beq.n	80128a8 <__cvt+0x40>
 801289e:	2f45      	cmp	r7, #69	; 0x45
 80128a0:	d100      	bne.n	80128a4 <__cvt+0x3c>
 80128a2:	3601      	adds	r6, #1
 80128a4:	2102      	movs	r1, #2
 80128a6:	e000      	b.n	80128aa <__cvt+0x42>
 80128a8:	2103      	movs	r1, #3
 80128aa:	ab03      	add	r3, sp, #12
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	ab02      	add	r3, sp, #8
 80128b0:	9300      	str	r3, [sp, #0]
 80128b2:	4632      	mov	r2, r6
 80128b4:	4653      	mov	r3, sl
 80128b6:	ec45 4b10 	vmov	d0, r4, r5
 80128ba:	f001 ff9d 	bl	80147f8 <_dtoa_r>
 80128be:	2f47      	cmp	r7, #71	; 0x47
 80128c0:	4680      	mov	r8, r0
 80128c2:	d102      	bne.n	80128ca <__cvt+0x62>
 80128c4:	f019 0f01 	tst.w	r9, #1
 80128c8:	d026      	beq.n	8012918 <__cvt+0xb0>
 80128ca:	2f46      	cmp	r7, #70	; 0x46
 80128cc:	eb08 0906 	add.w	r9, r8, r6
 80128d0:	d111      	bne.n	80128f6 <__cvt+0x8e>
 80128d2:	f898 3000 	ldrb.w	r3, [r8]
 80128d6:	2b30      	cmp	r3, #48	; 0x30
 80128d8:	d10a      	bne.n	80128f0 <__cvt+0x88>
 80128da:	2200      	movs	r2, #0
 80128dc:	2300      	movs	r3, #0
 80128de:	4620      	mov	r0, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	f7ee f909 	bl	8000af8 <__aeabi_dcmpeq>
 80128e6:	b918      	cbnz	r0, 80128f0 <__cvt+0x88>
 80128e8:	f1c6 0601 	rsb	r6, r6, #1
 80128ec:	f8ca 6000 	str.w	r6, [sl]
 80128f0:	f8da 3000 	ldr.w	r3, [sl]
 80128f4:	4499      	add	r9, r3
 80128f6:	2200      	movs	r2, #0
 80128f8:	2300      	movs	r3, #0
 80128fa:	4620      	mov	r0, r4
 80128fc:	4629      	mov	r1, r5
 80128fe:	f7ee f8fb 	bl	8000af8 <__aeabi_dcmpeq>
 8012902:	b938      	cbnz	r0, 8012914 <__cvt+0xac>
 8012904:	2230      	movs	r2, #48	; 0x30
 8012906:	9b03      	ldr	r3, [sp, #12]
 8012908:	454b      	cmp	r3, r9
 801290a:	d205      	bcs.n	8012918 <__cvt+0xb0>
 801290c:	1c59      	adds	r1, r3, #1
 801290e:	9103      	str	r1, [sp, #12]
 8012910:	701a      	strb	r2, [r3, #0]
 8012912:	e7f8      	b.n	8012906 <__cvt+0x9e>
 8012914:	f8cd 900c 	str.w	r9, [sp, #12]
 8012918:	9b03      	ldr	r3, [sp, #12]
 801291a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801291c:	eba3 0308 	sub.w	r3, r3, r8
 8012920:	4640      	mov	r0, r8
 8012922:	6013      	str	r3, [r2, #0]
 8012924:	b004      	add	sp, #16
 8012926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801292a <__exponent>:
 801292a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801292c:	2900      	cmp	r1, #0
 801292e:	4604      	mov	r4, r0
 8012930:	bfba      	itte	lt
 8012932:	4249      	neglt	r1, r1
 8012934:	232d      	movlt	r3, #45	; 0x2d
 8012936:	232b      	movge	r3, #43	; 0x2b
 8012938:	2909      	cmp	r1, #9
 801293a:	f804 2b02 	strb.w	r2, [r4], #2
 801293e:	7043      	strb	r3, [r0, #1]
 8012940:	dd20      	ble.n	8012984 <__exponent+0x5a>
 8012942:	f10d 0307 	add.w	r3, sp, #7
 8012946:	461f      	mov	r7, r3
 8012948:	260a      	movs	r6, #10
 801294a:	fb91 f5f6 	sdiv	r5, r1, r6
 801294e:	fb06 1115 	mls	r1, r6, r5, r1
 8012952:	3130      	adds	r1, #48	; 0x30
 8012954:	2d09      	cmp	r5, #9
 8012956:	f803 1c01 	strb.w	r1, [r3, #-1]
 801295a:	f103 32ff 	add.w	r2, r3, #4294967295
 801295e:	4629      	mov	r1, r5
 8012960:	dc09      	bgt.n	8012976 <__exponent+0x4c>
 8012962:	3130      	adds	r1, #48	; 0x30
 8012964:	3b02      	subs	r3, #2
 8012966:	f802 1c01 	strb.w	r1, [r2, #-1]
 801296a:	42bb      	cmp	r3, r7
 801296c:	4622      	mov	r2, r4
 801296e:	d304      	bcc.n	801297a <__exponent+0x50>
 8012970:	1a10      	subs	r0, r2, r0
 8012972:	b003      	add	sp, #12
 8012974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012976:	4613      	mov	r3, r2
 8012978:	e7e7      	b.n	801294a <__exponent+0x20>
 801297a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801297e:	f804 2b01 	strb.w	r2, [r4], #1
 8012982:	e7f2      	b.n	801296a <__exponent+0x40>
 8012984:	2330      	movs	r3, #48	; 0x30
 8012986:	4419      	add	r1, r3
 8012988:	7083      	strb	r3, [r0, #2]
 801298a:	1d02      	adds	r2, r0, #4
 801298c:	70c1      	strb	r1, [r0, #3]
 801298e:	e7ef      	b.n	8012970 <__exponent+0x46>

08012990 <_printf_float>:
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	b08d      	sub	sp, #52	; 0x34
 8012996:	460c      	mov	r4, r1
 8012998:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801299c:	4616      	mov	r6, r2
 801299e:	461f      	mov	r7, r3
 80129a0:	4605      	mov	r5, r0
 80129a2:	f003 f995 	bl	8015cd0 <_localeconv_r>
 80129a6:	6803      	ldr	r3, [r0, #0]
 80129a8:	9304      	str	r3, [sp, #16]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ed fc28 	bl	8000200 <strlen>
 80129b0:	2300      	movs	r3, #0
 80129b2:	930a      	str	r3, [sp, #40]	; 0x28
 80129b4:	f8d8 3000 	ldr.w	r3, [r8]
 80129b8:	9005      	str	r0, [sp, #20]
 80129ba:	3307      	adds	r3, #7
 80129bc:	f023 0307 	bic.w	r3, r3, #7
 80129c0:	f103 0208 	add.w	r2, r3, #8
 80129c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80129c8:	f8d4 b000 	ldr.w	fp, [r4]
 80129cc:	f8c8 2000 	str.w	r2, [r8]
 80129d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80129d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80129dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80129e0:	9307      	str	r3, [sp, #28]
 80129e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80129e6:	f04f 32ff 	mov.w	r2, #4294967295
 80129ea:	4ba7      	ldr	r3, [pc, #668]	; (8012c88 <_printf_float+0x2f8>)
 80129ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129f0:	f7ee f8b4 	bl	8000b5c <__aeabi_dcmpun>
 80129f4:	bb70      	cbnz	r0, 8012a54 <_printf_float+0xc4>
 80129f6:	f04f 32ff 	mov.w	r2, #4294967295
 80129fa:	4ba3      	ldr	r3, [pc, #652]	; (8012c88 <_printf_float+0x2f8>)
 80129fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a00:	f7ee f88e 	bl	8000b20 <__aeabi_dcmple>
 8012a04:	bb30      	cbnz	r0, 8012a54 <_printf_float+0xc4>
 8012a06:	2200      	movs	r2, #0
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4640      	mov	r0, r8
 8012a0c:	4649      	mov	r1, r9
 8012a0e:	f7ee f87d 	bl	8000b0c <__aeabi_dcmplt>
 8012a12:	b110      	cbz	r0, 8012a1a <_printf_float+0x8a>
 8012a14:	232d      	movs	r3, #45	; 0x2d
 8012a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a1a:	4a9c      	ldr	r2, [pc, #624]	; (8012c8c <_printf_float+0x2fc>)
 8012a1c:	4b9c      	ldr	r3, [pc, #624]	; (8012c90 <_printf_float+0x300>)
 8012a1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012a22:	bf8c      	ite	hi
 8012a24:	4690      	movhi	r8, r2
 8012a26:	4698      	movls	r8, r3
 8012a28:	2303      	movs	r3, #3
 8012a2a:	f02b 0204 	bic.w	r2, fp, #4
 8012a2e:	6123      	str	r3, [r4, #16]
 8012a30:	6022      	str	r2, [r4, #0]
 8012a32:	f04f 0900 	mov.w	r9, #0
 8012a36:	9700      	str	r7, [sp, #0]
 8012a38:	4633      	mov	r3, r6
 8012a3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f000 f9e6 	bl	8012e10 <_printf_common>
 8012a44:	3001      	adds	r0, #1
 8012a46:	f040 808d 	bne.w	8012b64 <_printf_float+0x1d4>
 8012a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a4e:	b00d      	add	sp, #52	; 0x34
 8012a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a54:	4642      	mov	r2, r8
 8012a56:	464b      	mov	r3, r9
 8012a58:	4640      	mov	r0, r8
 8012a5a:	4649      	mov	r1, r9
 8012a5c:	f7ee f87e 	bl	8000b5c <__aeabi_dcmpun>
 8012a60:	b110      	cbz	r0, 8012a68 <_printf_float+0xd8>
 8012a62:	4a8c      	ldr	r2, [pc, #560]	; (8012c94 <_printf_float+0x304>)
 8012a64:	4b8c      	ldr	r3, [pc, #560]	; (8012c98 <_printf_float+0x308>)
 8012a66:	e7da      	b.n	8012a1e <_printf_float+0x8e>
 8012a68:	6861      	ldr	r1, [r4, #4]
 8012a6a:	1c4b      	adds	r3, r1, #1
 8012a6c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012a70:	a80a      	add	r0, sp, #40	; 0x28
 8012a72:	d13e      	bne.n	8012af2 <_printf_float+0x162>
 8012a74:	2306      	movs	r3, #6
 8012a76:	6063      	str	r3, [r4, #4]
 8012a78:	2300      	movs	r3, #0
 8012a7a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012a7e:	ab09      	add	r3, sp, #36	; 0x24
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	ec49 8b10 	vmov	d0, r8, r9
 8012a86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012a8a:	6022      	str	r2, [r4, #0]
 8012a8c:	f8cd a004 	str.w	sl, [sp, #4]
 8012a90:	6861      	ldr	r1, [r4, #4]
 8012a92:	4628      	mov	r0, r5
 8012a94:	f7ff fee8 	bl	8012868 <__cvt>
 8012a98:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012a9c:	2b47      	cmp	r3, #71	; 0x47
 8012a9e:	4680      	mov	r8, r0
 8012aa0:	d109      	bne.n	8012ab6 <_printf_float+0x126>
 8012aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aa4:	1cd8      	adds	r0, r3, #3
 8012aa6:	db02      	blt.n	8012aae <_printf_float+0x11e>
 8012aa8:	6862      	ldr	r2, [r4, #4]
 8012aaa:	4293      	cmp	r3, r2
 8012aac:	dd47      	ble.n	8012b3e <_printf_float+0x1ae>
 8012aae:	f1aa 0a02 	sub.w	sl, sl, #2
 8012ab2:	fa5f fa8a 	uxtb.w	sl, sl
 8012ab6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012abc:	d824      	bhi.n	8012b08 <_printf_float+0x178>
 8012abe:	3901      	subs	r1, #1
 8012ac0:	4652      	mov	r2, sl
 8012ac2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012ac6:	9109      	str	r1, [sp, #36]	; 0x24
 8012ac8:	f7ff ff2f 	bl	801292a <__exponent>
 8012acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ace:	1813      	adds	r3, r2, r0
 8012ad0:	2a01      	cmp	r2, #1
 8012ad2:	4681      	mov	r9, r0
 8012ad4:	6123      	str	r3, [r4, #16]
 8012ad6:	dc02      	bgt.n	8012ade <_printf_float+0x14e>
 8012ad8:	6822      	ldr	r2, [r4, #0]
 8012ada:	07d1      	lsls	r1, r2, #31
 8012adc:	d501      	bpl.n	8012ae2 <_printf_float+0x152>
 8012ade:	3301      	adds	r3, #1
 8012ae0:	6123      	str	r3, [r4, #16]
 8012ae2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d0a5      	beq.n	8012a36 <_printf_float+0xa6>
 8012aea:	232d      	movs	r3, #45	; 0x2d
 8012aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012af0:	e7a1      	b.n	8012a36 <_printf_float+0xa6>
 8012af2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012af6:	f000 8177 	beq.w	8012de8 <_printf_float+0x458>
 8012afa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012afe:	d1bb      	bne.n	8012a78 <_printf_float+0xe8>
 8012b00:	2900      	cmp	r1, #0
 8012b02:	d1b9      	bne.n	8012a78 <_printf_float+0xe8>
 8012b04:	2301      	movs	r3, #1
 8012b06:	e7b6      	b.n	8012a76 <_printf_float+0xe6>
 8012b08:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012b0c:	d119      	bne.n	8012b42 <_printf_float+0x1b2>
 8012b0e:	2900      	cmp	r1, #0
 8012b10:	6863      	ldr	r3, [r4, #4]
 8012b12:	dd0c      	ble.n	8012b2e <_printf_float+0x19e>
 8012b14:	6121      	str	r1, [r4, #16]
 8012b16:	b913      	cbnz	r3, 8012b1e <_printf_float+0x18e>
 8012b18:	6822      	ldr	r2, [r4, #0]
 8012b1a:	07d2      	lsls	r2, r2, #31
 8012b1c:	d502      	bpl.n	8012b24 <_printf_float+0x194>
 8012b1e:	3301      	adds	r3, #1
 8012b20:	440b      	add	r3, r1
 8012b22:	6123      	str	r3, [r4, #16]
 8012b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b26:	65a3      	str	r3, [r4, #88]	; 0x58
 8012b28:	f04f 0900 	mov.w	r9, #0
 8012b2c:	e7d9      	b.n	8012ae2 <_printf_float+0x152>
 8012b2e:	b913      	cbnz	r3, 8012b36 <_printf_float+0x1a6>
 8012b30:	6822      	ldr	r2, [r4, #0]
 8012b32:	07d0      	lsls	r0, r2, #31
 8012b34:	d501      	bpl.n	8012b3a <_printf_float+0x1aa>
 8012b36:	3302      	adds	r3, #2
 8012b38:	e7f3      	b.n	8012b22 <_printf_float+0x192>
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e7f1      	b.n	8012b22 <_printf_float+0x192>
 8012b3e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012b42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012b46:	4293      	cmp	r3, r2
 8012b48:	db05      	blt.n	8012b56 <_printf_float+0x1c6>
 8012b4a:	6822      	ldr	r2, [r4, #0]
 8012b4c:	6123      	str	r3, [r4, #16]
 8012b4e:	07d1      	lsls	r1, r2, #31
 8012b50:	d5e8      	bpl.n	8012b24 <_printf_float+0x194>
 8012b52:	3301      	adds	r3, #1
 8012b54:	e7e5      	b.n	8012b22 <_printf_float+0x192>
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	bfd4      	ite	le
 8012b5a:	f1c3 0302 	rsble	r3, r3, #2
 8012b5e:	2301      	movgt	r3, #1
 8012b60:	4413      	add	r3, r2
 8012b62:	e7de      	b.n	8012b22 <_printf_float+0x192>
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	055a      	lsls	r2, r3, #21
 8012b68:	d407      	bmi.n	8012b7a <_printf_float+0x1ea>
 8012b6a:	6923      	ldr	r3, [r4, #16]
 8012b6c:	4642      	mov	r2, r8
 8012b6e:	4631      	mov	r1, r6
 8012b70:	4628      	mov	r0, r5
 8012b72:	47b8      	blx	r7
 8012b74:	3001      	adds	r0, #1
 8012b76:	d12b      	bne.n	8012bd0 <_printf_float+0x240>
 8012b78:	e767      	b.n	8012a4a <_printf_float+0xba>
 8012b7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012b7e:	f240 80dc 	bls.w	8012d3a <_printf_float+0x3aa>
 8012b82:	2200      	movs	r2, #0
 8012b84:	2300      	movs	r3, #0
 8012b86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b8a:	f7ed ffb5 	bl	8000af8 <__aeabi_dcmpeq>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d033      	beq.n	8012bfa <_printf_float+0x26a>
 8012b92:	2301      	movs	r3, #1
 8012b94:	4a41      	ldr	r2, [pc, #260]	; (8012c9c <_printf_float+0x30c>)
 8012b96:	4631      	mov	r1, r6
 8012b98:	4628      	mov	r0, r5
 8012b9a:	47b8      	blx	r7
 8012b9c:	3001      	adds	r0, #1
 8012b9e:	f43f af54 	beq.w	8012a4a <_printf_float+0xba>
 8012ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	db02      	blt.n	8012bb0 <_printf_float+0x220>
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	07d8      	lsls	r0, r3, #31
 8012bae:	d50f      	bpl.n	8012bd0 <_printf_float+0x240>
 8012bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bb4:	4631      	mov	r1, r6
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	47b8      	blx	r7
 8012bba:	3001      	adds	r0, #1
 8012bbc:	f43f af45 	beq.w	8012a4a <_printf_float+0xba>
 8012bc0:	f04f 0800 	mov.w	r8, #0
 8012bc4:	f104 091a 	add.w	r9, r4, #26
 8012bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	4543      	cmp	r3, r8
 8012bce:	dc09      	bgt.n	8012be4 <_printf_float+0x254>
 8012bd0:	6823      	ldr	r3, [r4, #0]
 8012bd2:	079b      	lsls	r3, r3, #30
 8012bd4:	f100 8103 	bmi.w	8012dde <_printf_float+0x44e>
 8012bd8:	68e0      	ldr	r0, [r4, #12]
 8012bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bdc:	4298      	cmp	r0, r3
 8012bde:	bfb8      	it	lt
 8012be0:	4618      	movlt	r0, r3
 8012be2:	e734      	b.n	8012a4e <_printf_float+0xbe>
 8012be4:	2301      	movs	r3, #1
 8012be6:	464a      	mov	r2, r9
 8012be8:	4631      	mov	r1, r6
 8012bea:	4628      	mov	r0, r5
 8012bec:	47b8      	blx	r7
 8012bee:	3001      	adds	r0, #1
 8012bf0:	f43f af2b 	beq.w	8012a4a <_printf_float+0xba>
 8012bf4:	f108 0801 	add.w	r8, r8, #1
 8012bf8:	e7e6      	b.n	8012bc8 <_printf_float+0x238>
 8012bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	dc2b      	bgt.n	8012c58 <_printf_float+0x2c8>
 8012c00:	2301      	movs	r3, #1
 8012c02:	4a26      	ldr	r2, [pc, #152]	; (8012c9c <_printf_float+0x30c>)
 8012c04:	4631      	mov	r1, r6
 8012c06:	4628      	mov	r0, r5
 8012c08:	47b8      	blx	r7
 8012c0a:	3001      	adds	r0, #1
 8012c0c:	f43f af1d 	beq.w	8012a4a <_printf_float+0xba>
 8012c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c12:	b923      	cbnz	r3, 8012c1e <_printf_float+0x28e>
 8012c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c16:	b913      	cbnz	r3, 8012c1e <_printf_float+0x28e>
 8012c18:	6823      	ldr	r3, [r4, #0]
 8012c1a:	07d9      	lsls	r1, r3, #31
 8012c1c:	d5d8      	bpl.n	8012bd0 <_printf_float+0x240>
 8012c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c22:	4631      	mov	r1, r6
 8012c24:	4628      	mov	r0, r5
 8012c26:	47b8      	blx	r7
 8012c28:	3001      	adds	r0, #1
 8012c2a:	f43f af0e 	beq.w	8012a4a <_printf_float+0xba>
 8012c2e:	f04f 0900 	mov.w	r9, #0
 8012c32:	f104 0a1a 	add.w	sl, r4, #26
 8012c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c38:	425b      	negs	r3, r3
 8012c3a:	454b      	cmp	r3, r9
 8012c3c:	dc01      	bgt.n	8012c42 <_printf_float+0x2b2>
 8012c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c40:	e794      	b.n	8012b6c <_printf_float+0x1dc>
 8012c42:	2301      	movs	r3, #1
 8012c44:	4652      	mov	r2, sl
 8012c46:	4631      	mov	r1, r6
 8012c48:	4628      	mov	r0, r5
 8012c4a:	47b8      	blx	r7
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	f43f aefc 	beq.w	8012a4a <_printf_float+0xba>
 8012c52:	f109 0901 	add.w	r9, r9, #1
 8012c56:	e7ee      	b.n	8012c36 <_printf_float+0x2a6>
 8012c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	bfa8      	it	ge
 8012c60:	461a      	movge	r2, r3
 8012c62:	2a00      	cmp	r2, #0
 8012c64:	4691      	mov	r9, r2
 8012c66:	dd07      	ble.n	8012c78 <_printf_float+0x2e8>
 8012c68:	4613      	mov	r3, r2
 8012c6a:	4631      	mov	r1, r6
 8012c6c:	4642      	mov	r2, r8
 8012c6e:	4628      	mov	r0, r5
 8012c70:	47b8      	blx	r7
 8012c72:	3001      	adds	r0, #1
 8012c74:	f43f aee9 	beq.w	8012a4a <_printf_float+0xba>
 8012c78:	f104 031a 	add.w	r3, r4, #26
 8012c7c:	f04f 0b00 	mov.w	fp, #0
 8012c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c84:	9306      	str	r3, [sp, #24]
 8012c86:	e015      	b.n	8012cb4 <_printf_float+0x324>
 8012c88:	7fefffff 	.word	0x7fefffff
 8012c8c:	08017ac8 	.word	0x08017ac8
 8012c90:	08017ac4 	.word	0x08017ac4
 8012c94:	08017ad0 	.word	0x08017ad0
 8012c98:	08017acc 	.word	0x08017acc
 8012c9c:	08017cf3 	.word	0x08017cf3
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	9a06      	ldr	r2, [sp, #24]
 8012ca4:	4631      	mov	r1, r6
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	47b8      	blx	r7
 8012caa:	3001      	adds	r0, #1
 8012cac:	f43f aecd 	beq.w	8012a4a <_printf_float+0xba>
 8012cb0:	f10b 0b01 	add.w	fp, fp, #1
 8012cb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012cb8:	ebaa 0309 	sub.w	r3, sl, r9
 8012cbc:	455b      	cmp	r3, fp
 8012cbe:	dcef      	bgt.n	8012ca0 <_printf_float+0x310>
 8012cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	44d0      	add	r8, sl
 8012cc8:	db15      	blt.n	8012cf6 <_printf_float+0x366>
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	07da      	lsls	r2, r3, #31
 8012cce:	d412      	bmi.n	8012cf6 <_printf_float+0x366>
 8012cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cd4:	eba3 020a 	sub.w	r2, r3, sl
 8012cd8:	eba3 0a01 	sub.w	sl, r3, r1
 8012cdc:	4592      	cmp	sl, r2
 8012cde:	bfa8      	it	ge
 8012ce0:	4692      	movge	sl, r2
 8012ce2:	f1ba 0f00 	cmp.w	sl, #0
 8012ce6:	dc0e      	bgt.n	8012d06 <_printf_float+0x376>
 8012ce8:	f04f 0800 	mov.w	r8, #0
 8012cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cf0:	f104 091a 	add.w	r9, r4, #26
 8012cf4:	e019      	b.n	8012d2a <_printf_float+0x39a>
 8012cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	47b8      	blx	r7
 8012d00:	3001      	adds	r0, #1
 8012d02:	d1e5      	bne.n	8012cd0 <_printf_float+0x340>
 8012d04:	e6a1      	b.n	8012a4a <_printf_float+0xba>
 8012d06:	4653      	mov	r3, sl
 8012d08:	4642      	mov	r2, r8
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	47b8      	blx	r7
 8012d10:	3001      	adds	r0, #1
 8012d12:	d1e9      	bne.n	8012ce8 <_printf_float+0x358>
 8012d14:	e699      	b.n	8012a4a <_printf_float+0xba>
 8012d16:	2301      	movs	r3, #1
 8012d18:	464a      	mov	r2, r9
 8012d1a:	4631      	mov	r1, r6
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	47b8      	blx	r7
 8012d20:	3001      	adds	r0, #1
 8012d22:	f43f ae92 	beq.w	8012a4a <_printf_float+0xba>
 8012d26:	f108 0801 	add.w	r8, r8, #1
 8012d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d2e:	1a9b      	subs	r3, r3, r2
 8012d30:	eba3 030a 	sub.w	r3, r3, sl
 8012d34:	4543      	cmp	r3, r8
 8012d36:	dcee      	bgt.n	8012d16 <_printf_float+0x386>
 8012d38:	e74a      	b.n	8012bd0 <_printf_float+0x240>
 8012d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d3c:	2a01      	cmp	r2, #1
 8012d3e:	dc01      	bgt.n	8012d44 <_printf_float+0x3b4>
 8012d40:	07db      	lsls	r3, r3, #31
 8012d42:	d53a      	bpl.n	8012dba <_printf_float+0x42a>
 8012d44:	2301      	movs	r3, #1
 8012d46:	4642      	mov	r2, r8
 8012d48:	4631      	mov	r1, r6
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	47b8      	blx	r7
 8012d4e:	3001      	adds	r0, #1
 8012d50:	f43f ae7b 	beq.w	8012a4a <_printf_float+0xba>
 8012d54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d58:	4631      	mov	r1, r6
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	47b8      	blx	r7
 8012d5e:	3001      	adds	r0, #1
 8012d60:	f108 0801 	add.w	r8, r8, #1
 8012d64:	f43f ae71 	beq.w	8012a4a <_printf_float+0xba>
 8012d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d74:	2300      	movs	r3, #0
 8012d76:	f7ed febf 	bl	8000af8 <__aeabi_dcmpeq>
 8012d7a:	b9c8      	cbnz	r0, 8012db0 <_printf_float+0x420>
 8012d7c:	4653      	mov	r3, sl
 8012d7e:	4642      	mov	r2, r8
 8012d80:	4631      	mov	r1, r6
 8012d82:	4628      	mov	r0, r5
 8012d84:	47b8      	blx	r7
 8012d86:	3001      	adds	r0, #1
 8012d88:	d10e      	bne.n	8012da8 <_printf_float+0x418>
 8012d8a:	e65e      	b.n	8012a4a <_printf_float+0xba>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	4652      	mov	r2, sl
 8012d90:	4631      	mov	r1, r6
 8012d92:	4628      	mov	r0, r5
 8012d94:	47b8      	blx	r7
 8012d96:	3001      	adds	r0, #1
 8012d98:	f43f ae57 	beq.w	8012a4a <_printf_float+0xba>
 8012d9c:	f108 0801 	add.w	r8, r8, #1
 8012da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012da2:	3b01      	subs	r3, #1
 8012da4:	4543      	cmp	r3, r8
 8012da6:	dcf1      	bgt.n	8012d8c <_printf_float+0x3fc>
 8012da8:	464b      	mov	r3, r9
 8012daa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012dae:	e6de      	b.n	8012b6e <_printf_float+0x1de>
 8012db0:	f04f 0800 	mov.w	r8, #0
 8012db4:	f104 0a1a 	add.w	sl, r4, #26
 8012db8:	e7f2      	b.n	8012da0 <_printf_float+0x410>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e7df      	b.n	8012d7e <_printf_float+0x3ee>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	464a      	mov	r2, r9
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	47b8      	blx	r7
 8012dc8:	3001      	adds	r0, #1
 8012dca:	f43f ae3e 	beq.w	8012a4a <_printf_float+0xba>
 8012dce:	f108 0801 	add.w	r8, r8, #1
 8012dd2:	68e3      	ldr	r3, [r4, #12]
 8012dd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dd6:	1a9b      	subs	r3, r3, r2
 8012dd8:	4543      	cmp	r3, r8
 8012dda:	dcf0      	bgt.n	8012dbe <_printf_float+0x42e>
 8012ddc:	e6fc      	b.n	8012bd8 <_printf_float+0x248>
 8012dde:	f04f 0800 	mov.w	r8, #0
 8012de2:	f104 0919 	add.w	r9, r4, #25
 8012de6:	e7f4      	b.n	8012dd2 <_printf_float+0x442>
 8012de8:	2900      	cmp	r1, #0
 8012dea:	f43f ae8b 	beq.w	8012b04 <_printf_float+0x174>
 8012dee:	2300      	movs	r3, #0
 8012df0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012df4:	ab09      	add	r3, sp, #36	; 0x24
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	ec49 8b10 	vmov	d0, r8, r9
 8012dfc:	6022      	str	r2, [r4, #0]
 8012dfe:	f8cd a004 	str.w	sl, [sp, #4]
 8012e02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012e06:	4628      	mov	r0, r5
 8012e08:	f7ff fd2e 	bl	8012868 <__cvt>
 8012e0c:	4680      	mov	r8, r0
 8012e0e:	e648      	b.n	8012aa2 <_printf_float+0x112>

08012e10 <_printf_common>:
 8012e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e14:	4691      	mov	r9, r2
 8012e16:	461f      	mov	r7, r3
 8012e18:	688a      	ldr	r2, [r1, #8]
 8012e1a:	690b      	ldr	r3, [r1, #16]
 8012e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e20:	4293      	cmp	r3, r2
 8012e22:	bfb8      	it	lt
 8012e24:	4613      	movlt	r3, r2
 8012e26:	f8c9 3000 	str.w	r3, [r9]
 8012e2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e2e:	4606      	mov	r6, r0
 8012e30:	460c      	mov	r4, r1
 8012e32:	b112      	cbz	r2, 8012e3a <_printf_common+0x2a>
 8012e34:	3301      	adds	r3, #1
 8012e36:	f8c9 3000 	str.w	r3, [r9]
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	0699      	lsls	r1, r3, #26
 8012e3e:	bf42      	ittt	mi
 8012e40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012e44:	3302      	addmi	r3, #2
 8012e46:	f8c9 3000 	strmi.w	r3, [r9]
 8012e4a:	6825      	ldr	r5, [r4, #0]
 8012e4c:	f015 0506 	ands.w	r5, r5, #6
 8012e50:	d107      	bne.n	8012e62 <_printf_common+0x52>
 8012e52:	f104 0a19 	add.w	sl, r4, #25
 8012e56:	68e3      	ldr	r3, [r4, #12]
 8012e58:	f8d9 2000 	ldr.w	r2, [r9]
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	42ab      	cmp	r3, r5
 8012e60:	dc28      	bgt.n	8012eb4 <_printf_common+0xa4>
 8012e62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012e66:	6822      	ldr	r2, [r4, #0]
 8012e68:	3300      	adds	r3, #0
 8012e6a:	bf18      	it	ne
 8012e6c:	2301      	movne	r3, #1
 8012e6e:	0692      	lsls	r2, r2, #26
 8012e70:	d42d      	bmi.n	8012ece <_printf_common+0xbe>
 8012e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e76:	4639      	mov	r1, r7
 8012e78:	4630      	mov	r0, r6
 8012e7a:	47c0      	blx	r8
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	d020      	beq.n	8012ec2 <_printf_common+0xb2>
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	68e5      	ldr	r5, [r4, #12]
 8012e84:	f8d9 2000 	ldr.w	r2, [r9]
 8012e88:	f003 0306 	and.w	r3, r3, #6
 8012e8c:	2b04      	cmp	r3, #4
 8012e8e:	bf08      	it	eq
 8012e90:	1aad      	subeq	r5, r5, r2
 8012e92:	68a3      	ldr	r3, [r4, #8]
 8012e94:	6922      	ldr	r2, [r4, #16]
 8012e96:	bf0c      	ite	eq
 8012e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e9c:	2500      	movne	r5, #0
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	bfc4      	itt	gt
 8012ea2:	1a9b      	subgt	r3, r3, r2
 8012ea4:	18ed      	addgt	r5, r5, r3
 8012ea6:	f04f 0900 	mov.w	r9, #0
 8012eaa:	341a      	adds	r4, #26
 8012eac:	454d      	cmp	r5, r9
 8012eae:	d11a      	bne.n	8012ee6 <_printf_common+0xd6>
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	e008      	b.n	8012ec6 <_printf_common+0xb6>
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	4652      	mov	r2, sl
 8012eb8:	4639      	mov	r1, r7
 8012eba:	4630      	mov	r0, r6
 8012ebc:	47c0      	blx	r8
 8012ebe:	3001      	adds	r0, #1
 8012ec0:	d103      	bne.n	8012eca <_printf_common+0xba>
 8012ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eca:	3501      	adds	r5, #1
 8012ecc:	e7c3      	b.n	8012e56 <_printf_common+0x46>
 8012ece:	18e1      	adds	r1, r4, r3
 8012ed0:	1c5a      	adds	r2, r3, #1
 8012ed2:	2030      	movs	r0, #48	; 0x30
 8012ed4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ed8:	4422      	add	r2, r4
 8012eda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ee2:	3302      	adds	r3, #2
 8012ee4:	e7c5      	b.n	8012e72 <_printf_common+0x62>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	4622      	mov	r2, r4
 8012eea:	4639      	mov	r1, r7
 8012eec:	4630      	mov	r0, r6
 8012eee:	47c0      	blx	r8
 8012ef0:	3001      	adds	r0, #1
 8012ef2:	d0e6      	beq.n	8012ec2 <_printf_common+0xb2>
 8012ef4:	f109 0901 	add.w	r9, r9, #1
 8012ef8:	e7d8      	b.n	8012eac <_printf_common+0x9c>
	...

08012efc <_printf_i>:
 8012efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012f04:	460c      	mov	r4, r1
 8012f06:	7e09      	ldrb	r1, [r1, #24]
 8012f08:	b085      	sub	sp, #20
 8012f0a:	296e      	cmp	r1, #110	; 0x6e
 8012f0c:	4617      	mov	r7, r2
 8012f0e:	4606      	mov	r6, r0
 8012f10:	4698      	mov	r8, r3
 8012f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f14:	f000 80b3 	beq.w	801307e <_printf_i+0x182>
 8012f18:	d822      	bhi.n	8012f60 <_printf_i+0x64>
 8012f1a:	2963      	cmp	r1, #99	; 0x63
 8012f1c:	d036      	beq.n	8012f8c <_printf_i+0x90>
 8012f1e:	d80a      	bhi.n	8012f36 <_printf_i+0x3a>
 8012f20:	2900      	cmp	r1, #0
 8012f22:	f000 80b9 	beq.w	8013098 <_printf_i+0x19c>
 8012f26:	2958      	cmp	r1, #88	; 0x58
 8012f28:	f000 8083 	beq.w	8013032 <_printf_i+0x136>
 8012f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012f34:	e032      	b.n	8012f9c <_printf_i+0xa0>
 8012f36:	2964      	cmp	r1, #100	; 0x64
 8012f38:	d001      	beq.n	8012f3e <_printf_i+0x42>
 8012f3a:	2969      	cmp	r1, #105	; 0x69
 8012f3c:	d1f6      	bne.n	8012f2c <_printf_i+0x30>
 8012f3e:	6820      	ldr	r0, [r4, #0]
 8012f40:	6813      	ldr	r3, [r2, #0]
 8012f42:	0605      	lsls	r5, r0, #24
 8012f44:	f103 0104 	add.w	r1, r3, #4
 8012f48:	d52a      	bpl.n	8012fa0 <_printf_i+0xa4>
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	6011      	str	r1, [r2, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	da03      	bge.n	8012f5a <_printf_i+0x5e>
 8012f52:	222d      	movs	r2, #45	; 0x2d
 8012f54:	425b      	negs	r3, r3
 8012f56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012f5a:	486f      	ldr	r0, [pc, #444]	; (8013118 <_printf_i+0x21c>)
 8012f5c:	220a      	movs	r2, #10
 8012f5e:	e039      	b.n	8012fd4 <_printf_i+0xd8>
 8012f60:	2973      	cmp	r1, #115	; 0x73
 8012f62:	f000 809d 	beq.w	80130a0 <_printf_i+0x1a4>
 8012f66:	d808      	bhi.n	8012f7a <_printf_i+0x7e>
 8012f68:	296f      	cmp	r1, #111	; 0x6f
 8012f6a:	d020      	beq.n	8012fae <_printf_i+0xb2>
 8012f6c:	2970      	cmp	r1, #112	; 0x70
 8012f6e:	d1dd      	bne.n	8012f2c <_printf_i+0x30>
 8012f70:	6823      	ldr	r3, [r4, #0]
 8012f72:	f043 0320 	orr.w	r3, r3, #32
 8012f76:	6023      	str	r3, [r4, #0]
 8012f78:	e003      	b.n	8012f82 <_printf_i+0x86>
 8012f7a:	2975      	cmp	r1, #117	; 0x75
 8012f7c:	d017      	beq.n	8012fae <_printf_i+0xb2>
 8012f7e:	2978      	cmp	r1, #120	; 0x78
 8012f80:	d1d4      	bne.n	8012f2c <_printf_i+0x30>
 8012f82:	2378      	movs	r3, #120	; 0x78
 8012f84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f88:	4864      	ldr	r0, [pc, #400]	; (801311c <_printf_i+0x220>)
 8012f8a:	e055      	b.n	8013038 <_printf_i+0x13c>
 8012f8c:	6813      	ldr	r3, [r2, #0]
 8012f8e:	1d19      	adds	r1, r3, #4
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	6011      	str	r1, [r2, #0]
 8012f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	e08c      	b.n	80130ba <_printf_i+0x1be>
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	6011      	str	r1, [r2, #0]
 8012fa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fa8:	bf18      	it	ne
 8012faa:	b21b      	sxthne	r3, r3
 8012fac:	e7cf      	b.n	8012f4e <_printf_i+0x52>
 8012fae:	6813      	ldr	r3, [r2, #0]
 8012fb0:	6825      	ldr	r5, [r4, #0]
 8012fb2:	1d18      	adds	r0, r3, #4
 8012fb4:	6010      	str	r0, [r2, #0]
 8012fb6:	0628      	lsls	r0, r5, #24
 8012fb8:	d501      	bpl.n	8012fbe <_printf_i+0xc2>
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	e002      	b.n	8012fc4 <_printf_i+0xc8>
 8012fbe:	0668      	lsls	r0, r5, #25
 8012fc0:	d5fb      	bpl.n	8012fba <_printf_i+0xbe>
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	4854      	ldr	r0, [pc, #336]	; (8013118 <_printf_i+0x21c>)
 8012fc6:	296f      	cmp	r1, #111	; 0x6f
 8012fc8:	bf14      	ite	ne
 8012fca:	220a      	movne	r2, #10
 8012fcc:	2208      	moveq	r2, #8
 8012fce:	2100      	movs	r1, #0
 8012fd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fd4:	6865      	ldr	r5, [r4, #4]
 8012fd6:	60a5      	str	r5, [r4, #8]
 8012fd8:	2d00      	cmp	r5, #0
 8012fda:	f2c0 8095 	blt.w	8013108 <_printf_i+0x20c>
 8012fde:	6821      	ldr	r1, [r4, #0]
 8012fe0:	f021 0104 	bic.w	r1, r1, #4
 8012fe4:	6021      	str	r1, [r4, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d13d      	bne.n	8013066 <_printf_i+0x16a>
 8012fea:	2d00      	cmp	r5, #0
 8012fec:	f040 808e 	bne.w	801310c <_printf_i+0x210>
 8012ff0:	4665      	mov	r5, ip
 8012ff2:	2a08      	cmp	r2, #8
 8012ff4:	d10b      	bne.n	801300e <_printf_i+0x112>
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	07db      	lsls	r3, r3, #31
 8012ffa:	d508      	bpl.n	801300e <_printf_i+0x112>
 8012ffc:	6923      	ldr	r3, [r4, #16]
 8012ffe:	6862      	ldr	r2, [r4, #4]
 8013000:	429a      	cmp	r2, r3
 8013002:	bfde      	ittt	le
 8013004:	2330      	movle	r3, #48	; 0x30
 8013006:	f805 3c01 	strble.w	r3, [r5, #-1]
 801300a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801300e:	ebac 0305 	sub.w	r3, ip, r5
 8013012:	6123      	str	r3, [r4, #16]
 8013014:	f8cd 8000 	str.w	r8, [sp]
 8013018:	463b      	mov	r3, r7
 801301a:	aa03      	add	r2, sp, #12
 801301c:	4621      	mov	r1, r4
 801301e:	4630      	mov	r0, r6
 8013020:	f7ff fef6 	bl	8012e10 <_printf_common>
 8013024:	3001      	adds	r0, #1
 8013026:	d14d      	bne.n	80130c4 <_printf_i+0x1c8>
 8013028:	f04f 30ff 	mov.w	r0, #4294967295
 801302c:	b005      	add	sp, #20
 801302e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013032:	4839      	ldr	r0, [pc, #228]	; (8013118 <_printf_i+0x21c>)
 8013034:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013038:	6813      	ldr	r3, [r2, #0]
 801303a:	6821      	ldr	r1, [r4, #0]
 801303c:	1d1d      	adds	r5, r3, #4
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	6015      	str	r5, [r2, #0]
 8013042:	060a      	lsls	r2, r1, #24
 8013044:	d50b      	bpl.n	801305e <_printf_i+0x162>
 8013046:	07ca      	lsls	r2, r1, #31
 8013048:	bf44      	itt	mi
 801304a:	f041 0120 	orrmi.w	r1, r1, #32
 801304e:	6021      	strmi	r1, [r4, #0]
 8013050:	b91b      	cbnz	r3, 801305a <_printf_i+0x15e>
 8013052:	6822      	ldr	r2, [r4, #0]
 8013054:	f022 0220 	bic.w	r2, r2, #32
 8013058:	6022      	str	r2, [r4, #0]
 801305a:	2210      	movs	r2, #16
 801305c:	e7b7      	b.n	8012fce <_printf_i+0xd2>
 801305e:	064d      	lsls	r5, r1, #25
 8013060:	bf48      	it	mi
 8013062:	b29b      	uxthmi	r3, r3
 8013064:	e7ef      	b.n	8013046 <_printf_i+0x14a>
 8013066:	4665      	mov	r5, ip
 8013068:	fbb3 f1f2 	udiv	r1, r3, r2
 801306c:	fb02 3311 	mls	r3, r2, r1, r3
 8013070:	5cc3      	ldrb	r3, [r0, r3]
 8013072:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013076:	460b      	mov	r3, r1
 8013078:	2900      	cmp	r1, #0
 801307a:	d1f5      	bne.n	8013068 <_printf_i+0x16c>
 801307c:	e7b9      	b.n	8012ff2 <_printf_i+0xf6>
 801307e:	6813      	ldr	r3, [r2, #0]
 8013080:	6825      	ldr	r5, [r4, #0]
 8013082:	6961      	ldr	r1, [r4, #20]
 8013084:	1d18      	adds	r0, r3, #4
 8013086:	6010      	str	r0, [r2, #0]
 8013088:	0628      	lsls	r0, r5, #24
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	d501      	bpl.n	8013092 <_printf_i+0x196>
 801308e:	6019      	str	r1, [r3, #0]
 8013090:	e002      	b.n	8013098 <_printf_i+0x19c>
 8013092:	066a      	lsls	r2, r5, #25
 8013094:	d5fb      	bpl.n	801308e <_printf_i+0x192>
 8013096:	8019      	strh	r1, [r3, #0]
 8013098:	2300      	movs	r3, #0
 801309a:	6123      	str	r3, [r4, #16]
 801309c:	4665      	mov	r5, ip
 801309e:	e7b9      	b.n	8013014 <_printf_i+0x118>
 80130a0:	6813      	ldr	r3, [r2, #0]
 80130a2:	1d19      	adds	r1, r3, #4
 80130a4:	6011      	str	r1, [r2, #0]
 80130a6:	681d      	ldr	r5, [r3, #0]
 80130a8:	6862      	ldr	r2, [r4, #4]
 80130aa:	2100      	movs	r1, #0
 80130ac:	4628      	mov	r0, r5
 80130ae:	f7ed f8af 	bl	8000210 <memchr>
 80130b2:	b108      	cbz	r0, 80130b8 <_printf_i+0x1bc>
 80130b4:	1b40      	subs	r0, r0, r5
 80130b6:	6060      	str	r0, [r4, #4]
 80130b8:	6863      	ldr	r3, [r4, #4]
 80130ba:	6123      	str	r3, [r4, #16]
 80130bc:	2300      	movs	r3, #0
 80130be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130c2:	e7a7      	b.n	8013014 <_printf_i+0x118>
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	462a      	mov	r2, r5
 80130c8:	4639      	mov	r1, r7
 80130ca:	4630      	mov	r0, r6
 80130cc:	47c0      	blx	r8
 80130ce:	3001      	adds	r0, #1
 80130d0:	d0aa      	beq.n	8013028 <_printf_i+0x12c>
 80130d2:	6823      	ldr	r3, [r4, #0]
 80130d4:	079b      	lsls	r3, r3, #30
 80130d6:	d413      	bmi.n	8013100 <_printf_i+0x204>
 80130d8:	68e0      	ldr	r0, [r4, #12]
 80130da:	9b03      	ldr	r3, [sp, #12]
 80130dc:	4298      	cmp	r0, r3
 80130de:	bfb8      	it	lt
 80130e0:	4618      	movlt	r0, r3
 80130e2:	e7a3      	b.n	801302c <_printf_i+0x130>
 80130e4:	2301      	movs	r3, #1
 80130e6:	464a      	mov	r2, r9
 80130e8:	4639      	mov	r1, r7
 80130ea:	4630      	mov	r0, r6
 80130ec:	47c0      	blx	r8
 80130ee:	3001      	adds	r0, #1
 80130f0:	d09a      	beq.n	8013028 <_printf_i+0x12c>
 80130f2:	3501      	adds	r5, #1
 80130f4:	68e3      	ldr	r3, [r4, #12]
 80130f6:	9a03      	ldr	r2, [sp, #12]
 80130f8:	1a9b      	subs	r3, r3, r2
 80130fa:	42ab      	cmp	r3, r5
 80130fc:	dcf2      	bgt.n	80130e4 <_printf_i+0x1e8>
 80130fe:	e7eb      	b.n	80130d8 <_printf_i+0x1dc>
 8013100:	2500      	movs	r5, #0
 8013102:	f104 0919 	add.w	r9, r4, #25
 8013106:	e7f5      	b.n	80130f4 <_printf_i+0x1f8>
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1ac      	bne.n	8013066 <_printf_i+0x16a>
 801310c:	7803      	ldrb	r3, [r0, #0]
 801310e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013112:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013116:	e76c      	b.n	8012ff2 <_printf_i+0xf6>
 8013118:	08017ad4 	.word	0x08017ad4
 801311c:	08017ae5 	.word	0x08017ae5

08013120 <_scanf_float>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	469a      	mov	sl, r3
 8013126:	688b      	ldr	r3, [r1, #8]
 8013128:	4616      	mov	r6, r2
 801312a:	1e5a      	subs	r2, r3, #1
 801312c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013130:	b087      	sub	sp, #28
 8013132:	bf83      	ittte	hi
 8013134:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013138:	189b      	addhi	r3, r3, r2
 801313a:	9301      	strhi	r3, [sp, #4]
 801313c:	2300      	movls	r3, #0
 801313e:	bf86      	itte	hi
 8013140:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013144:	608b      	strhi	r3, [r1, #8]
 8013146:	9301      	strls	r3, [sp, #4]
 8013148:	680b      	ldr	r3, [r1, #0]
 801314a:	4688      	mov	r8, r1
 801314c:	f04f 0b00 	mov.w	fp, #0
 8013150:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013154:	f848 3b1c 	str.w	r3, [r8], #28
 8013158:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801315c:	4607      	mov	r7, r0
 801315e:	460c      	mov	r4, r1
 8013160:	4645      	mov	r5, r8
 8013162:	465a      	mov	r2, fp
 8013164:	46d9      	mov	r9, fp
 8013166:	f8cd b008 	str.w	fp, [sp, #8]
 801316a:	68a1      	ldr	r1, [r4, #8]
 801316c:	b181      	cbz	r1, 8013190 <_scanf_float+0x70>
 801316e:	6833      	ldr	r3, [r6, #0]
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	2b49      	cmp	r3, #73	; 0x49
 8013174:	d071      	beq.n	801325a <_scanf_float+0x13a>
 8013176:	d84d      	bhi.n	8013214 <_scanf_float+0xf4>
 8013178:	2b39      	cmp	r3, #57	; 0x39
 801317a:	d840      	bhi.n	80131fe <_scanf_float+0xde>
 801317c:	2b31      	cmp	r3, #49	; 0x31
 801317e:	f080 8088 	bcs.w	8013292 <_scanf_float+0x172>
 8013182:	2b2d      	cmp	r3, #45	; 0x2d
 8013184:	f000 8090 	beq.w	80132a8 <_scanf_float+0x188>
 8013188:	d815      	bhi.n	80131b6 <_scanf_float+0x96>
 801318a:	2b2b      	cmp	r3, #43	; 0x2b
 801318c:	f000 808c 	beq.w	80132a8 <_scanf_float+0x188>
 8013190:	f1b9 0f00 	cmp.w	r9, #0
 8013194:	d003      	beq.n	801319e <_scanf_float+0x7e>
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	3a01      	subs	r2, #1
 80131a0:	2a01      	cmp	r2, #1
 80131a2:	f200 80ea 	bhi.w	801337a <_scanf_float+0x25a>
 80131a6:	4545      	cmp	r5, r8
 80131a8:	f200 80dc 	bhi.w	8013364 <_scanf_float+0x244>
 80131ac:	2601      	movs	r6, #1
 80131ae:	4630      	mov	r0, r6
 80131b0:	b007      	add	sp, #28
 80131b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b6:	2b2e      	cmp	r3, #46	; 0x2e
 80131b8:	f000 809f 	beq.w	80132fa <_scanf_float+0x1da>
 80131bc:	2b30      	cmp	r3, #48	; 0x30
 80131be:	d1e7      	bne.n	8013190 <_scanf_float+0x70>
 80131c0:	6820      	ldr	r0, [r4, #0]
 80131c2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80131c6:	d064      	beq.n	8013292 <_scanf_float+0x172>
 80131c8:	9b01      	ldr	r3, [sp, #4]
 80131ca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80131ce:	6020      	str	r0, [r4, #0]
 80131d0:	f109 0901 	add.w	r9, r9, #1
 80131d4:	b11b      	cbz	r3, 80131de <_scanf_float+0xbe>
 80131d6:	3b01      	subs	r3, #1
 80131d8:	3101      	adds	r1, #1
 80131da:	9301      	str	r3, [sp, #4]
 80131dc:	60a1      	str	r1, [r4, #8]
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	3b01      	subs	r3, #1
 80131e2:	60a3      	str	r3, [r4, #8]
 80131e4:	6923      	ldr	r3, [r4, #16]
 80131e6:	3301      	adds	r3, #1
 80131e8:	6123      	str	r3, [r4, #16]
 80131ea:	6873      	ldr	r3, [r6, #4]
 80131ec:	3b01      	subs	r3, #1
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	6073      	str	r3, [r6, #4]
 80131f2:	f340 80ac 	ble.w	801334e <_scanf_float+0x22e>
 80131f6:	6833      	ldr	r3, [r6, #0]
 80131f8:	3301      	adds	r3, #1
 80131fa:	6033      	str	r3, [r6, #0]
 80131fc:	e7b5      	b.n	801316a <_scanf_float+0x4a>
 80131fe:	2b45      	cmp	r3, #69	; 0x45
 8013200:	f000 8085 	beq.w	801330e <_scanf_float+0x1ee>
 8013204:	2b46      	cmp	r3, #70	; 0x46
 8013206:	d06a      	beq.n	80132de <_scanf_float+0x1be>
 8013208:	2b41      	cmp	r3, #65	; 0x41
 801320a:	d1c1      	bne.n	8013190 <_scanf_float+0x70>
 801320c:	2a01      	cmp	r2, #1
 801320e:	d1bf      	bne.n	8013190 <_scanf_float+0x70>
 8013210:	2202      	movs	r2, #2
 8013212:	e046      	b.n	80132a2 <_scanf_float+0x182>
 8013214:	2b65      	cmp	r3, #101	; 0x65
 8013216:	d07a      	beq.n	801330e <_scanf_float+0x1ee>
 8013218:	d818      	bhi.n	801324c <_scanf_float+0x12c>
 801321a:	2b54      	cmp	r3, #84	; 0x54
 801321c:	d066      	beq.n	80132ec <_scanf_float+0x1cc>
 801321e:	d811      	bhi.n	8013244 <_scanf_float+0x124>
 8013220:	2b4e      	cmp	r3, #78	; 0x4e
 8013222:	d1b5      	bne.n	8013190 <_scanf_float+0x70>
 8013224:	2a00      	cmp	r2, #0
 8013226:	d146      	bne.n	80132b6 <_scanf_float+0x196>
 8013228:	f1b9 0f00 	cmp.w	r9, #0
 801322c:	d145      	bne.n	80132ba <_scanf_float+0x19a>
 801322e:	6821      	ldr	r1, [r4, #0]
 8013230:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013234:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013238:	d13f      	bne.n	80132ba <_scanf_float+0x19a>
 801323a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801323e:	6021      	str	r1, [r4, #0]
 8013240:	2201      	movs	r2, #1
 8013242:	e02e      	b.n	80132a2 <_scanf_float+0x182>
 8013244:	2b59      	cmp	r3, #89	; 0x59
 8013246:	d01e      	beq.n	8013286 <_scanf_float+0x166>
 8013248:	2b61      	cmp	r3, #97	; 0x61
 801324a:	e7de      	b.n	801320a <_scanf_float+0xea>
 801324c:	2b6e      	cmp	r3, #110	; 0x6e
 801324e:	d0e9      	beq.n	8013224 <_scanf_float+0x104>
 8013250:	d815      	bhi.n	801327e <_scanf_float+0x15e>
 8013252:	2b66      	cmp	r3, #102	; 0x66
 8013254:	d043      	beq.n	80132de <_scanf_float+0x1be>
 8013256:	2b69      	cmp	r3, #105	; 0x69
 8013258:	d19a      	bne.n	8013190 <_scanf_float+0x70>
 801325a:	f1bb 0f00 	cmp.w	fp, #0
 801325e:	d138      	bne.n	80132d2 <_scanf_float+0x1b2>
 8013260:	f1b9 0f00 	cmp.w	r9, #0
 8013264:	d197      	bne.n	8013196 <_scanf_float+0x76>
 8013266:	6821      	ldr	r1, [r4, #0]
 8013268:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801326c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013270:	d195      	bne.n	801319e <_scanf_float+0x7e>
 8013272:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013276:	6021      	str	r1, [r4, #0]
 8013278:	f04f 0b01 	mov.w	fp, #1
 801327c:	e011      	b.n	80132a2 <_scanf_float+0x182>
 801327e:	2b74      	cmp	r3, #116	; 0x74
 8013280:	d034      	beq.n	80132ec <_scanf_float+0x1cc>
 8013282:	2b79      	cmp	r3, #121	; 0x79
 8013284:	d184      	bne.n	8013190 <_scanf_float+0x70>
 8013286:	f1bb 0f07 	cmp.w	fp, #7
 801328a:	d181      	bne.n	8013190 <_scanf_float+0x70>
 801328c:	f04f 0b08 	mov.w	fp, #8
 8013290:	e007      	b.n	80132a2 <_scanf_float+0x182>
 8013292:	eb12 0f0b 	cmn.w	r2, fp
 8013296:	f47f af7b 	bne.w	8013190 <_scanf_float+0x70>
 801329a:	6821      	ldr	r1, [r4, #0]
 801329c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80132a0:	6021      	str	r1, [r4, #0]
 80132a2:	702b      	strb	r3, [r5, #0]
 80132a4:	3501      	adds	r5, #1
 80132a6:	e79a      	b.n	80131de <_scanf_float+0xbe>
 80132a8:	6821      	ldr	r1, [r4, #0]
 80132aa:	0608      	lsls	r0, r1, #24
 80132ac:	f57f af70 	bpl.w	8013190 <_scanf_float+0x70>
 80132b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80132b4:	e7f4      	b.n	80132a0 <_scanf_float+0x180>
 80132b6:	2a02      	cmp	r2, #2
 80132b8:	d047      	beq.n	801334a <_scanf_float+0x22a>
 80132ba:	f1bb 0f01 	cmp.w	fp, #1
 80132be:	d003      	beq.n	80132c8 <_scanf_float+0x1a8>
 80132c0:	f1bb 0f04 	cmp.w	fp, #4
 80132c4:	f47f af64 	bne.w	8013190 <_scanf_float+0x70>
 80132c8:	f10b 0b01 	add.w	fp, fp, #1
 80132cc:	fa5f fb8b 	uxtb.w	fp, fp
 80132d0:	e7e7      	b.n	80132a2 <_scanf_float+0x182>
 80132d2:	f1bb 0f03 	cmp.w	fp, #3
 80132d6:	d0f7      	beq.n	80132c8 <_scanf_float+0x1a8>
 80132d8:	f1bb 0f05 	cmp.w	fp, #5
 80132dc:	e7f2      	b.n	80132c4 <_scanf_float+0x1a4>
 80132de:	f1bb 0f02 	cmp.w	fp, #2
 80132e2:	f47f af55 	bne.w	8013190 <_scanf_float+0x70>
 80132e6:	f04f 0b03 	mov.w	fp, #3
 80132ea:	e7da      	b.n	80132a2 <_scanf_float+0x182>
 80132ec:	f1bb 0f06 	cmp.w	fp, #6
 80132f0:	f47f af4e 	bne.w	8013190 <_scanf_float+0x70>
 80132f4:	f04f 0b07 	mov.w	fp, #7
 80132f8:	e7d3      	b.n	80132a2 <_scanf_float+0x182>
 80132fa:	6821      	ldr	r1, [r4, #0]
 80132fc:	0588      	lsls	r0, r1, #22
 80132fe:	f57f af47 	bpl.w	8013190 <_scanf_float+0x70>
 8013302:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013306:	6021      	str	r1, [r4, #0]
 8013308:	f8cd 9008 	str.w	r9, [sp, #8]
 801330c:	e7c9      	b.n	80132a2 <_scanf_float+0x182>
 801330e:	6821      	ldr	r1, [r4, #0]
 8013310:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013314:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013318:	d006      	beq.n	8013328 <_scanf_float+0x208>
 801331a:	0548      	lsls	r0, r1, #21
 801331c:	f57f af38 	bpl.w	8013190 <_scanf_float+0x70>
 8013320:	f1b9 0f00 	cmp.w	r9, #0
 8013324:	f43f af3b 	beq.w	801319e <_scanf_float+0x7e>
 8013328:	0588      	lsls	r0, r1, #22
 801332a:	bf58      	it	pl
 801332c:	9802      	ldrpl	r0, [sp, #8]
 801332e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013332:	bf58      	it	pl
 8013334:	eba9 0000 	subpl.w	r0, r9, r0
 8013338:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801333c:	bf58      	it	pl
 801333e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013342:	6021      	str	r1, [r4, #0]
 8013344:	f04f 0900 	mov.w	r9, #0
 8013348:	e7ab      	b.n	80132a2 <_scanf_float+0x182>
 801334a:	2203      	movs	r2, #3
 801334c:	e7a9      	b.n	80132a2 <_scanf_float+0x182>
 801334e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013352:	9205      	str	r2, [sp, #20]
 8013354:	4631      	mov	r1, r6
 8013356:	4638      	mov	r0, r7
 8013358:	4798      	blx	r3
 801335a:	9a05      	ldr	r2, [sp, #20]
 801335c:	2800      	cmp	r0, #0
 801335e:	f43f af04 	beq.w	801316a <_scanf_float+0x4a>
 8013362:	e715      	b.n	8013190 <_scanf_float+0x70>
 8013364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013368:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801336c:	4632      	mov	r2, r6
 801336e:	4638      	mov	r0, r7
 8013370:	4798      	blx	r3
 8013372:	6923      	ldr	r3, [r4, #16]
 8013374:	3b01      	subs	r3, #1
 8013376:	6123      	str	r3, [r4, #16]
 8013378:	e715      	b.n	80131a6 <_scanf_float+0x86>
 801337a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801337e:	2b06      	cmp	r3, #6
 8013380:	d80a      	bhi.n	8013398 <_scanf_float+0x278>
 8013382:	f1bb 0f02 	cmp.w	fp, #2
 8013386:	d968      	bls.n	801345a <_scanf_float+0x33a>
 8013388:	f1ab 0b03 	sub.w	fp, fp, #3
 801338c:	fa5f fb8b 	uxtb.w	fp, fp
 8013390:	eba5 0b0b 	sub.w	fp, r5, fp
 8013394:	455d      	cmp	r5, fp
 8013396:	d14b      	bne.n	8013430 <_scanf_float+0x310>
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	05da      	lsls	r2, r3, #23
 801339c:	d51f      	bpl.n	80133de <_scanf_float+0x2be>
 801339e:	055b      	lsls	r3, r3, #21
 80133a0:	d468      	bmi.n	8013474 <_scanf_float+0x354>
 80133a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80133a6:	6923      	ldr	r3, [r4, #16]
 80133a8:	2965      	cmp	r1, #101	; 0x65
 80133aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80133ae:	f105 3bff 	add.w	fp, r5, #4294967295
 80133b2:	6123      	str	r3, [r4, #16]
 80133b4:	d00d      	beq.n	80133d2 <_scanf_float+0x2b2>
 80133b6:	2945      	cmp	r1, #69	; 0x45
 80133b8:	d00b      	beq.n	80133d2 <_scanf_float+0x2b2>
 80133ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133be:	4632      	mov	r2, r6
 80133c0:	4638      	mov	r0, r7
 80133c2:	4798      	blx	r3
 80133c4:	6923      	ldr	r3, [r4, #16]
 80133c6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80133ca:	3b01      	subs	r3, #1
 80133cc:	f1a5 0b02 	sub.w	fp, r5, #2
 80133d0:	6123      	str	r3, [r4, #16]
 80133d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133d6:	4632      	mov	r2, r6
 80133d8:	4638      	mov	r0, r7
 80133da:	4798      	blx	r3
 80133dc:	465d      	mov	r5, fp
 80133de:	6826      	ldr	r6, [r4, #0]
 80133e0:	f016 0610 	ands.w	r6, r6, #16
 80133e4:	d17a      	bne.n	80134dc <_scanf_float+0x3bc>
 80133e6:	702e      	strb	r6, [r5, #0]
 80133e8:	6823      	ldr	r3, [r4, #0]
 80133ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80133ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133f2:	d142      	bne.n	801347a <_scanf_float+0x35a>
 80133f4:	9b02      	ldr	r3, [sp, #8]
 80133f6:	eba9 0303 	sub.w	r3, r9, r3
 80133fa:	425a      	negs	r2, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d149      	bne.n	8013494 <_scanf_float+0x374>
 8013400:	2200      	movs	r2, #0
 8013402:	4641      	mov	r1, r8
 8013404:	4638      	mov	r0, r7
 8013406:	f000 ffcb 	bl	80143a0 <_strtod_r>
 801340a:	6825      	ldr	r5, [r4, #0]
 801340c:	f8da 3000 	ldr.w	r3, [sl]
 8013410:	f015 0f02 	tst.w	r5, #2
 8013414:	f103 0204 	add.w	r2, r3, #4
 8013418:	ec59 8b10 	vmov	r8, r9, d0
 801341c:	f8ca 2000 	str.w	r2, [sl]
 8013420:	d043      	beq.n	80134aa <_scanf_float+0x38a>
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	e9c3 8900 	strd	r8, r9, [r3]
 8013428:	68e3      	ldr	r3, [r4, #12]
 801342a:	3301      	adds	r3, #1
 801342c:	60e3      	str	r3, [r4, #12]
 801342e:	e6be      	b.n	80131ae <_scanf_float+0x8e>
 8013430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013434:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013438:	4632      	mov	r2, r6
 801343a:	4638      	mov	r0, r7
 801343c:	4798      	blx	r3
 801343e:	6923      	ldr	r3, [r4, #16]
 8013440:	3b01      	subs	r3, #1
 8013442:	6123      	str	r3, [r4, #16]
 8013444:	e7a6      	b.n	8013394 <_scanf_float+0x274>
 8013446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801344a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801344e:	4632      	mov	r2, r6
 8013450:	4638      	mov	r0, r7
 8013452:	4798      	blx	r3
 8013454:	6923      	ldr	r3, [r4, #16]
 8013456:	3b01      	subs	r3, #1
 8013458:	6123      	str	r3, [r4, #16]
 801345a:	4545      	cmp	r5, r8
 801345c:	d8f3      	bhi.n	8013446 <_scanf_float+0x326>
 801345e:	e6a5      	b.n	80131ac <_scanf_float+0x8c>
 8013460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013464:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013468:	4632      	mov	r2, r6
 801346a:	4638      	mov	r0, r7
 801346c:	4798      	blx	r3
 801346e:	6923      	ldr	r3, [r4, #16]
 8013470:	3b01      	subs	r3, #1
 8013472:	6123      	str	r3, [r4, #16]
 8013474:	4545      	cmp	r5, r8
 8013476:	d8f3      	bhi.n	8013460 <_scanf_float+0x340>
 8013478:	e698      	b.n	80131ac <_scanf_float+0x8c>
 801347a:	9b03      	ldr	r3, [sp, #12]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d0bf      	beq.n	8013400 <_scanf_float+0x2e0>
 8013480:	9904      	ldr	r1, [sp, #16]
 8013482:	230a      	movs	r3, #10
 8013484:	4632      	mov	r2, r6
 8013486:	3101      	adds	r1, #1
 8013488:	4638      	mov	r0, r7
 801348a:	f001 f815 	bl	80144b8 <_strtol_r>
 801348e:	9b03      	ldr	r3, [sp, #12]
 8013490:	9d04      	ldr	r5, [sp, #16]
 8013492:	1ac2      	subs	r2, r0, r3
 8013494:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013498:	429d      	cmp	r5, r3
 801349a:	bf28      	it	cs
 801349c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80134a0:	490f      	ldr	r1, [pc, #60]	; (80134e0 <_scanf_float+0x3c0>)
 80134a2:	4628      	mov	r0, r5
 80134a4:	f000 f8d4 	bl	8013650 <siprintf>
 80134a8:	e7aa      	b.n	8013400 <_scanf_float+0x2e0>
 80134aa:	f015 0504 	ands.w	r5, r5, #4
 80134ae:	d1b8      	bne.n	8013422 <_scanf_float+0x302>
 80134b0:	681f      	ldr	r7, [r3, #0]
 80134b2:	ee10 2a10 	vmov	r2, s0
 80134b6:	464b      	mov	r3, r9
 80134b8:	ee10 0a10 	vmov	r0, s0
 80134bc:	4649      	mov	r1, r9
 80134be:	f7ed fb4d 	bl	8000b5c <__aeabi_dcmpun>
 80134c2:	b128      	cbz	r0, 80134d0 <_scanf_float+0x3b0>
 80134c4:	4628      	mov	r0, r5
 80134c6:	f000 f889 	bl	80135dc <nanf>
 80134ca:	ed87 0a00 	vstr	s0, [r7]
 80134ce:	e7ab      	b.n	8013428 <_scanf_float+0x308>
 80134d0:	4640      	mov	r0, r8
 80134d2:	4649      	mov	r1, r9
 80134d4:	f7ed fba0 	bl	8000c18 <__aeabi_d2f>
 80134d8:	6038      	str	r0, [r7, #0]
 80134da:	e7a5      	b.n	8013428 <_scanf_float+0x308>
 80134dc:	2600      	movs	r6, #0
 80134de:	e666      	b.n	80131ae <_scanf_float+0x8e>
 80134e0:	08017af6 	.word	0x08017af6

080134e4 <iprintf>:
 80134e4:	b40f      	push	{r0, r1, r2, r3}
 80134e6:	4b0a      	ldr	r3, [pc, #40]	; (8013510 <iprintf+0x2c>)
 80134e8:	b513      	push	{r0, r1, r4, lr}
 80134ea:	681c      	ldr	r4, [r3, #0]
 80134ec:	b124      	cbz	r4, 80134f8 <iprintf+0x14>
 80134ee:	69a3      	ldr	r3, [r4, #24]
 80134f0:	b913      	cbnz	r3, 80134f8 <iprintf+0x14>
 80134f2:	4620      	mov	r0, r4
 80134f4:	f002 f828 	bl	8015548 <__sinit>
 80134f8:	ab05      	add	r3, sp, #20
 80134fa:	9a04      	ldr	r2, [sp, #16]
 80134fc:	68a1      	ldr	r1, [r4, #8]
 80134fe:	9301      	str	r3, [sp, #4]
 8013500:	4620      	mov	r0, r4
 8013502:	f003 fc69 	bl	8016dd8 <_vfiprintf_r>
 8013506:	b002      	add	sp, #8
 8013508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801350c:	b004      	add	sp, #16
 801350e:	4770      	bx	lr
 8013510:	2000000c 	.word	0x2000000c

08013514 <_puts_r>:
 8013514:	b570      	push	{r4, r5, r6, lr}
 8013516:	460e      	mov	r6, r1
 8013518:	4605      	mov	r5, r0
 801351a:	b118      	cbz	r0, 8013524 <_puts_r+0x10>
 801351c:	6983      	ldr	r3, [r0, #24]
 801351e:	b90b      	cbnz	r3, 8013524 <_puts_r+0x10>
 8013520:	f002 f812 	bl	8015548 <__sinit>
 8013524:	69ab      	ldr	r3, [r5, #24]
 8013526:	68ac      	ldr	r4, [r5, #8]
 8013528:	b913      	cbnz	r3, 8013530 <_puts_r+0x1c>
 801352a:	4628      	mov	r0, r5
 801352c:	f002 f80c 	bl	8015548 <__sinit>
 8013530:	4b23      	ldr	r3, [pc, #140]	; (80135c0 <_puts_r+0xac>)
 8013532:	429c      	cmp	r4, r3
 8013534:	d117      	bne.n	8013566 <_puts_r+0x52>
 8013536:	686c      	ldr	r4, [r5, #4]
 8013538:	89a3      	ldrh	r3, [r4, #12]
 801353a:	071b      	lsls	r3, r3, #28
 801353c:	d51d      	bpl.n	801357a <_puts_r+0x66>
 801353e:	6923      	ldr	r3, [r4, #16]
 8013540:	b1db      	cbz	r3, 801357a <_puts_r+0x66>
 8013542:	3e01      	subs	r6, #1
 8013544:	68a3      	ldr	r3, [r4, #8]
 8013546:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801354a:	3b01      	subs	r3, #1
 801354c:	60a3      	str	r3, [r4, #8]
 801354e:	b9e9      	cbnz	r1, 801358c <_puts_r+0x78>
 8013550:	2b00      	cmp	r3, #0
 8013552:	da2e      	bge.n	80135b2 <_puts_r+0x9e>
 8013554:	4622      	mov	r2, r4
 8013556:	210a      	movs	r1, #10
 8013558:	4628      	mov	r0, r5
 801355a:	f000 ffdf 	bl	801451c <__swbuf_r>
 801355e:	3001      	adds	r0, #1
 8013560:	d011      	beq.n	8013586 <_puts_r+0x72>
 8013562:	200a      	movs	r0, #10
 8013564:	e011      	b.n	801358a <_puts_r+0x76>
 8013566:	4b17      	ldr	r3, [pc, #92]	; (80135c4 <_puts_r+0xb0>)
 8013568:	429c      	cmp	r4, r3
 801356a:	d101      	bne.n	8013570 <_puts_r+0x5c>
 801356c:	68ac      	ldr	r4, [r5, #8]
 801356e:	e7e3      	b.n	8013538 <_puts_r+0x24>
 8013570:	4b15      	ldr	r3, [pc, #84]	; (80135c8 <_puts_r+0xb4>)
 8013572:	429c      	cmp	r4, r3
 8013574:	bf08      	it	eq
 8013576:	68ec      	ldreq	r4, [r5, #12]
 8013578:	e7de      	b.n	8013538 <_puts_r+0x24>
 801357a:	4621      	mov	r1, r4
 801357c:	4628      	mov	r0, r5
 801357e:	f001 f831 	bl	80145e4 <__swsetup_r>
 8013582:	2800      	cmp	r0, #0
 8013584:	d0dd      	beq.n	8013542 <_puts_r+0x2e>
 8013586:	f04f 30ff 	mov.w	r0, #4294967295
 801358a:	bd70      	pop	{r4, r5, r6, pc}
 801358c:	2b00      	cmp	r3, #0
 801358e:	da04      	bge.n	801359a <_puts_r+0x86>
 8013590:	69a2      	ldr	r2, [r4, #24]
 8013592:	429a      	cmp	r2, r3
 8013594:	dc06      	bgt.n	80135a4 <_puts_r+0x90>
 8013596:	290a      	cmp	r1, #10
 8013598:	d004      	beq.n	80135a4 <_puts_r+0x90>
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	1c5a      	adds	r2, r3, #1
 801359e:	6022      	str	r2, [r4, #0]
 80135a0:	7019      	strb	r1, [r3, #0]
 80135a2:	e7cf      	b.n	8013544 <_puts_r+0x30>
 80135a4:	4622      	mov	r2, r4
 80135a6:	4628      	mov	r0, r5
 80135a8:	f000 ffb8 	bl	801451c <__swbuf_r>
 80135ac:	3001      	adds	r0, #1
 80135ae:	d1c9      	bne.n	8013544 <_puts_r+0x30>
 80135b0:	e7e9      	b.n	8013586 <_puts_r+0x72>
 80135b2:	6823      	ldr	r3, [r4, #0]
 80135b4:	200a      	movs	r0, #10
 80135b6:	1c5a      	adds	r2, r3, #1
 80135b8:	6022      	str	r2, [r4, #0]
 80135ba:	7018      	strb	r0, [r3, #0]
 80135bc:	e7e5      	b.n	801358a <_puts_r+0x76>
 80135be:	bf00      	nop
 80135c0:	08017b80 	.word	0x08017b80
 80135c4:	08017ba0 	.word	0x08017ba0
 80135c8:	08017b60 	.word	0x08017b60

080135cc <puts>:
 80135cc:	4b02      	ldr	r3, [pc, #8]	; (80135d8 <puts+0xc>)
 80135ce:	4601      	mov	r1, r0
 80135d0:	6818      	ldr	r0, [r3, #0]
 80135d2:	f7ff bf9f 	b.w	8013514 <_puts_r>
 80135d6:	bf00      	nop
 80135d8:	2000000c 	.word	0x2000000c

080135dc <nanf>:
 80135dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80135e4 <nanf+0x8>
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop
 80135e4:	7fc00000 	.word	0x7fc00000

080135e8 <sniprintf>:
 80135e8:	b40c      	push	{r2, r3}
 80135ea:	b530      	push	{r4, r5, lr}
 80135ec:	4b17      	ldr	r3, [pc, #92]	; (801364c <sniprintf+0x64>)
 80135ee:	1e0c      	subs	r4, r1, #0
 80135f0:	b09d      	sub	sp, #116	; 0x74
 80135f2:	681d      	ldr	r5, [r3, #0]
 80135f4:	da08      	bge.n	8013608 <sniprintf+0x20>
 80135f6:	238b      	movs	r3, #139	; 0x8b
 80135f8:	602b      	str	r3, [r5, #0]
 80135fa:	f04f 30ff 	mov.w	r0, #4294967295
 80135fe:	b01d      	add	sp, #116	; 0x74
 8013600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013604:	b002      	add	sp, #8
 8013606:	4770      	bx	lr
 8013608:	f44f 7302 	mov.w	r3, #520	; 0x208
 801360c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013610:	bf14      	ite	ne
 8013612:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013616:	4623      	moveq	r3, r4
 8013618:	9304      	str	r3, [sp, #16]
 801361a:	9307      	str	r3, [sp, #28]
 801361c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013620:	9002      	str	r0, [sp, #8]
 8013622:	9006      	str	r0, [sp, #24]
 8013624:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013628:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801362a:	ab21      	add	r3, sp, #132	; 0x84
 801362c:	a902      	add	r1, sp, #8
 801362e:	4628      	mov	r0, r5
 8013630:	9301      	str	r3, [sp, #4]
 8013632:	f003 f905 	bl	8016840 <_svfiprintf_r>
 8013636:	1c43      	adds	r3, r0, #1
 8013638:	bfbc      	itt	lt
 801363a:	238b      	movlt	r3, #139	; 0x8b
 801363c:	602b      	strlt	r3, [r5, #0]
 801363e:	2c00      	cmp	r4, #0
 8013640:	d0dd      	beq.n	80135fe <sniprintf+0x16>
 8013642:	9b02      	ldr	r3, [sp, #8]
 8013644:	2200      	movs	r2, #0
 8013646:	701a      	strb	r2, [r3, #0]
 8013648:	e7d9      	b.n	80135fe <sniprintf+0x16>
 801364a:	bf00      	nop
 801364c:	2000000c 	.word	0x2000000c

08013650 <siprintf>:
 8013650:	b40e      	push	{r1, r2, r3}
 8013652:	b500      	push	{lr}
 8013654:	b09c      	sub	sp, #112	; 0x70
 8013656:	ab1d      	add	r3, sp, #116	; 0x74
 8013658:	9002      	str	r0, [sp, #8]
 801365a:	9006      	str	r0, [sp, #24]
 801365c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013660:	4809      	ldr	r0, [pc, #36]	; (8013688 <siprintf+0x38>)
 8013662:	9107      	str	r1, [sp, #28]
 8013664:	9104      	str	r1, [sp, #16]
 8013666:	4909      	ldr	r1, [pc, #36]	; (801368c <siprintf+0x3c>)
 8013668:	f853 2b04 	ldr.w	r2, [r3], #4
 801366c:	9105      	str	r1, [sp, #20]
 801366e:	6800      	ldr	r0, [r0, #0]
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	a902      	add	r1, sp, #8
 8013674:	f003 f8e4 	bl	8016840 <_svfiprintf_r>
 8013678:	9b02      	ldr	r3, [sp, #8]
 801367a:	2200      	movs	r2, #0
 801367c:	701a      	strb	r2, [r3, #0]
 801367e:	b01c      	add	sp, #112	; 0x70
 8013680:	f85d eb04 	ldr.w	lr, [sp], #4
 8013684:	b003      	add	sp, #12
 8013686:	4770      	bx	lr
 8013688:	2000000c 	.word	0x2000000c
 801368c:	ffff0208 	.word	0xffff0208

08013690 <siscanf>:
 8013690:	b40e      	push	{r1, r2, r3}
 8013692:	b530      	push	{r4, r5, lr}
 8013694:	b09c      	sub	sp, #112	; 0x70
 8013696:	ac1f      	add	r4, sp, #124	; 0x7c
 8013698:	f44f 7201 	mov.w	r2, #516	; 0x204
 801369c:	f854 5b04 	ldr.w	r5, [r4], #4
 80136a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80136a4:	9002      	str	r0, [sp, #8]
 80136a6:	9006      	str	r0, [sp, #24]
 80136a8:	f7ec fdaa 	bl	8000200 <strlen>
 80136ac:	4b0b      	ldr	r3, [pc, #44]	; (80136dc <siscanf+0x4c>)
 80136ae:	9003      	str	r0, [sp, #12]
 80136b0:	9007      	str	r0, [sp, #28]
 80136b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80136b4:	480a      	ldr	r0, [pc, #40]	; (80136e0 <siscanf+0x50>)
 80136b6:	9401      	str	r4, [sp, #4]
 80136b8:	2300      	movs	r3, #0
 80136ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80136bc:	9314      	str	r3, [sp, #80]	; 0x50
 80136be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80136c6:	462a      	mov	r2, r5
 80136c8:	4623      	mov	r3, r4
 80136ca:	a902      	add	r1, sp, #8
 80136cc:	6800      	ldr	r0, [r0, #0]
 80136ce:	f003 fa09 	bl	8016ae4 <__ssvfiscanf_r>
 80136d2:	b01c      	add	sp, #112	; 0x70
 80136d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136d8:	b003      	add	sp, #12
 80136da:	4770      	bx	lr
 80136dc:	08013707 	.word	0x08013707
 80136e0:	2000000c 	.word	0x2000000c

080136e4 <__sread>:
 80136e4:	b510      	push	{r4, lr}
 80136e6:	460c      	mov	r4, r1
 80136e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ec:	f003 fde2 	bl	80172b4 <_read_r>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	bfab      	itete	ge
 80136f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136f6:	89a3      	ldrhlt	r3, [r4, #12]
 80136f8:	181b      	addge	r3, r3, r0
 80136fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136fe:	bfac      	ite	ge
 8013700:	6563      	strge	r3, [r4, #84]	; 0x54
 8013702:	81a3      	strhlt	r3, [r4, #12]
 8013704:	bd10      	pop	{r4, pc}

08013706 <__seofread>:
 8013706:	2000      	movs	r0, #0
 8013708:	4770      	bx	lr

0801370a <__swrite>:
 801370a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801370e:	461f      	mov	r7, r3
 8013710:	898b      	ldrh	r3, [r1, #12]
 8013712:	05db      	lsls	r3, r3, #23
 8013714:	4605      	mov	r5, r0
 8013716:	460c      	mov	r4, r1
 8013718:	4616      	mov	r6, r2
 801371a:	d505      	bpl.n	8013728 <__swrite+0x1e>
 801371c:	2302      	movs	r3, #2
 801371e:	2200      	movs	r2, #0
 8013720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013724:	f002 fae2 	bl	8015cec <_lseek_r>
 8013728:	89a3      	ldrh	r3, [r4, #12]
 801372a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801372e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013732:	81a3      	strh	r3, [r4, #12]
 8013734:	4632      	mov	r2, r6
 8013736:	463b      	mov	r3, r7
 8013738:	4628      	mov	r0, r5
 801373a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801373e:	f000 bf3f 	b.w	80145c0 <_write_r>

08013742 <__sseek>:
 8013742:	b510      	push	{r4, lr}
 8013744:	460c      	mov	r4, r1
 8013746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801374a:	f002 facf 	bl	8015cec <_lseek_r>
 801374e:	1c43      	adds	r3, r0, #1
 8013750:	89a3      	ldrh	r3, [r4, #12]
 8013752:	bf15      	itete	ne
 8013754:	6560      	strne	r0, [r4, #84]	; 0x54
 8013756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801375a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801375e:	81a3      	strheq	r3, [r4, #12]
 8013760:	bf18      	it	ne
 8013762:	81a3      	strhne	r3, [r4, #12]
 8013764:	bd10      	pop	{r4, pc}

08013766 <__sclose>:
 8013766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801376a:	f000 bfa9 	b.w	80146c0 <_close_r>

0801376e <strcpy>:
 801376e:	4603      	mov	r3, r0
 8013770:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013774:	f803 2b01 	strb.w	r2, [r3], #1
 8013778:	2a00      	cmp	r2, #0
 801377a:	d1f9      	bne.n	8013770 <strcpy+0x2>
 801377c:	4770      	bx	lr

0801377e <sulp>:
 801377e:	b570      	push	{r4, r5, r6, lr}
 8013780:	4604      	mov	r4, r0
 8013782:	460d      	mov	r5, r1
 8013784:	ec45 4b10 	vmov	d0, r4, r5
 8013788:	4616      	mov	r6, r2
 801378a:	f002 fe15 	bl	80163b8 <__ulp>
 801378e:	ec51 0b10 	vmov	r0, r1, d0
 8013792:	b17e      	cbz	r6, 80137b4 <sulp+0x36>
 8013794:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013798:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801379c:	2b00      	cmp	r3, #0
 801379e:	dd09      	ble.n	80137b4 <sulp+0x36>
 80137a0:	051b      	lsls	r3, r3, #20
 80137a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80137a6:	2400      	movs	r4, #0
 80137a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80137ac:	4622      	mov	r2, r4
 80137ae:	462b      	mov	r3, r5
 80137b0:	f7ec ff3a 	bl	8000628 <__aeabi_dmul>
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080137b8 <_strtod_l>:
 80137b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137bc:	461f      	mov	r7, r3
 80137be:	b0a1      	sub	sp, #132	; 0x84
 80137c0:	2300      	movs	r3, #0
 80137c2:	4681      	mov	r9, r0
 80137c4:	4638      	mov	r0, r7
 80137c6:	460e      	mov	r6, r1
 80137c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80137ca:	931c      	str	r3, [sp, #112]	; 0x70
 80137cc:	f002 fa7e 	bl	8015ccc <__localeconv_l>
 80137d0:	4680      	mov	r8, r0
 80137d2:	6800      	ldr	r0, [r0, #0]
 80137d4:	f7ec fd14 	bl	8000200 <strlen>
 80137d8:	f04f 0a00 	mov.w	sl, #0
 80137dc:	4604      	mov	r4, r0
 80137de:	f04f 0b00 	mov.w	fp, #0
 80137e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80137e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137e6:	781a      	ldrb	r2, [r3, #0]
 80137e8:	2a0d      	cmp	r2, #13
 80137ea:	d832      	bhi.n	8013852 <_strtod_l+0x9a>
 80137ec:	2a09      	cmp	r2, #9
 80137ee:	d236      	bcs.n	801385e <_strtod_l+0xa6>
 80137f0:	2a00      	cmp	r2, #0
 80137f2:	d03e      	beq.n	8013872 <_strtod_l+0xba>
 80137f4:	2300      	movs	r3, #0
 80137f6:	930d      	str	r3, [sp, #52]	; 0x34
 80137f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80137fa:	782b      	ldrb	r3, [r5, #0]
 80137fc:	2b30      	cmp	r3, #48	; 0x30
 80137fe:	f040 80ac 	bne.w	801395a <_strtod_l+0x1a2>
 8013802:	786b      	ldrb	r3, [r5, #1]
 8013804:	2b58      	cmp	r3, #88	; 0x58
 8013806:	d001      	beq.n	801380c <_strtod_l+0x54>
 8013808:	2b78      	cmp	r3, #120	; 0x78
 801380a:	d167      	bne.n	80138dc <_strtod_l+0x124>
 801380c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801380e:	9301      	str	r3, [sp, #4]
 8013810:	ab1c      	add	r3, sp, #112	; 0x70
 8013812:	9300      	str	r3, [sp, #0]
 8013814:	9702      	str	r7, [sp, #8]
 8013816:	ab1d      	add	r3, sp, #116	; 0x74
 8013818:	4a88      	ldr	r2, [pc, #544]	; (8013a3c <_strtod_l+0x284>)
 801381a:	a91b      	add	r1, sp, #108	; 0x6c
 801381c:	4648      	mov	r0, r9
 801381e:	f001 ff6c 	bl	80156fa <__gethex>
 8013822:	f010 0407 	ands.w	r4, r0, #7
 8013826:	4606      	mov	r6, r0
 8013828:	d005      	beq.n	8013836 <_strtod_l+0x7e>
 801382a:	2c06      	cmp	r4, #6
 801382c:	d12b      	bne.n	8013886 <_strtod_l+0xce>
 801382e:	3501      	adds	r5, #1
 8013830:	2300      	movs	r3, #0
 8013832:	951b      	str	r5, [sp, #108]	; 0x6c
 8013834:	930d      	str	r3, [sp, #52]	; 0x34
 8013836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013838:	2b00      	cmp	r3, #0
 801383a:	f040 859a 	bne.w	8014372 <_strtod_l+0xbba>
 801383e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013840:	b1e3      	cbz	r3, 801387c <_strtod_l+0xc4>
 8013842:	4652      	mov	r2, sl
 8013844:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013848:	ec43 2b10 	vmov	d0, r2, r3
 801384c:	b021      	add	sp, #132	; 0x84
 801384e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013852:	2a2b      	cmp	r2, #43	; 0x2b
 8013854:	d015      	beq.n	8013882 <_strtod_l+0xca>
 8013856:	2a2d      	cmp	r2, #45	; 0x2d
 8013858:	d004      	beq.n	8013864 <_strtod_l+0xac>
 801385a:	2a20      	cmp	r2, #32
 801385c:	d1ca      	bne.n	80137f4 <_strtod_l+0x3c>
 801385e:	3301      	adds	r3, #1
 8013860:	931b      	str	r3, [sp, #108]	; 0x6c
 8013862:	e7bf      	b.n	80137e4 <_strtod_l+0x2c>
 8013864:	2201      	movs	r2, #1
 8013866:	920d      	str	r2, [sp, #52]	; 0x34
 8013868:	1c5a      	adds	r2, r3, #1
 801386a:	921b      	str	r2, [sp, #108]	; 0x6c
 801386c:	785b      	ldrb	r3, [r3, #1]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d1c2      	bne.n	80137f8 <_strtod_l+0x40>
 8013872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013874:	961b      	str	r6, [sp, #108]	; 0x6c
 8013876:	2b00      	cmp	r3, #0
 8013878:	f040 8579 	bne.w	801436e <_strtod_l+0xbb6>
 801387c:	4652      	mov	r2, sl
 801387e:	465b      	mov	r3, fp
 8013880:	e7e2      	b.n	8013848 <_strtod_l+0x90>
 8013882:	2200      	movs	r2, #0
 8013884:	e7ef      	b.n	8013866 <_strtod_l+0xae>
 8013886:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013888:	b13a      	cbz	r2, 801389a <_strtod_l+0xe2>
 801388a:	2135      	movs	r1, #53	; 0x35
 801388c:	a81e      	add	r0, sp, #120	; 0x78
 801388e:	f002 fe8b 	bl	80165a8 <__copybits>
 8013892:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013894:	4648      	mov	r0, r9
 8013896:	f002 faf8 	bl	8015e8a <_Bfree>
 801389a:	3c01      	subs	r4, #1
 801389c:	2c04      	cmp	r4, #4
 801389e:	d806      	bhi.n	80138ae <_strtod_l+0xf6>
 80138a0:	e8df f004 	tbb	[pc, r4]
 80138a4:	1714030a 	.word	0x1714030a
 80138a8:	0a          	.byte	0x0a
 80138a9:	00          	.byte	0x00
 80138aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80138ae:	0730      	lsls	r0, r6, #28
 80138b0:	d5c1      	bpl.n	8013836 <_strtod_l+0x7e>
 80138b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80138b6:	e7be      	b.n	8013836 <_strtod_l+0x7e>
 80138b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80138bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80138be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80138c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80138c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80138ca:	e7f0      	b.n	80138ae <_strtod_l+0xf6>
 80138cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013a40 <_strtod_l+0x288>
 80138d0:	e7ed      	b.n	80138ae <_strtod_l+0xf6>
 80138d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80138d6:	f04f 3aff 	mov.w	sl, #4294967295
 80138da:	e7e8      	b.n	80138ae <_strtod_l+0xf6>
 80138dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80138e2:	785b      	ldrb	r3, [r3, #1]
 80138e4:	2b30      	cmp	r3, #48	; 0x30
 80138e6:	d0f9      	beq.n	80138dc <_strtod_l+0x124>
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d0a4      	beq.n	8013836 <_strtod_l+0x7e>
 80138ec:	2301      	movs	r3, #1
 80138ee:	2500      	movs	r5, #0
 80138f0:	9306      	str	r3, [sp, #24]
 80138f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138f4:	9308      	str	r3, [sp, #32]
 80138f6:	9507      	str	r5, [sp, #28]
 80138f8:	9505      	str	r5, [sp, #20]
 80138fa:	220a      	movs	r2, #10
 80138fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80138fe:	7807      	ldrb	r7, [r0, #0]
 8013900:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013904:	b2d9      	uxtb	r1, r3
 8013906:	2909      	cmp	r1, #9
 8013908:	d929      	bls.n	801395e <_strtod_l+0x1a6>
 801390a:	4622      	mov	r2, r4
 801390c:	f8d8 1000 	ldr.w	r1, [r8]
 8013910:	f003 fd24 	bl	801735c <strncmp>
 8013914:	2800      	cmp	r0, #0
 8013916:	d031      	beq.n	801397c <_strtod_l+0x1c4>
 8013918:	2000      	movs	r0, #0
 801391a:	9c05      	ldr	r4, [sp, #20]
 801391c:	9004      	str	r0, [sp, #16]
 801391e:	463b      	mov	r3, r7
 8013920:	4602      	mov	r2, r0
 8013922:	2b65      	cmp	r3, #101	; 0x65
 8013924:	d001      	beq.n	801392a <_strtod_l+0x172>
 8013926:	2b45      	cmp	r3, #69	; 0x45
 8013928:	d114      	bne.n	8013954 <_strtod_l+0x19c>
 801392a:	b924      	cbnz	r4, 8013936 <_strtod_l+0x17e>
 801392c:	b910      	cbnz	r0, 8013934 <_strtod_l+0x17c>
 801392e:	9b06      	ldr	r3, [sp, #24]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d09e      	beq.n	8013872 <_strtod_l+0xba>
 8013934:	2400      	movs	r4, #0
 8013936:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013938:	1c73      	adds	r3, r6, #1
 801393a:	931b      	str	r3, [sp, #108]	; 0x6c
 801393c:	7873      	ldrb	r3, [r6, #1]
 801393e:	2b2b      	cmp	r3, #43	; 0x2b
 8013940:	d078      	beq.n	8013a34 <_strtod_l+0x27c>
 8013942:	2b2d      	cmp	r3, #45	; 0x2d
 8013944:	d070      	beq.n	8013a28 <_strtod_l+0x270>
 8013946:	f04f 0c00 	mov.w	ip, #0
 801394a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801394e:	2f09      	cmp	r7, #9
 8013950:	d97c      	bls.n	8013a4c <_strtod_l+0x294>
 8013952:	961b      	str	r6, [sp, #108]	; 0x6c
 8013954:	f04f 0e00 	mov.w	lr, #0
 8013958:	e09a      	b.n	8013a90 <_strtod_l+0x2d8>
 801395a:	2300      	movs	r3, #0
 801395c:	e7c7      	b.n	80138ee <_strtod_l+0x136>
 801395e:	9905      	ldr	r1, [sp, #20]
 8013960:	2908      	cmp	r1, #8
 8013962:	bfdd      	ittte	le
 8013964:	9907      	ldrle	r1, [sp, #28]
 8013966:	fb02 3301 	mlale	r3, r2, r1, r3
 801396a:	9307      	strle	r3, [sp, #28]
 801396c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013970:	9b05      	ldr	r3, [sp, #20]
 8013972:	3001      	adds	r0, #1
 8013974:	3301      	adds	r3, #1
 8013976:	9305      	str	r3, [sp, #20]
 8013978:	901b      	str	r0, [sp, #108]	; 0x6c
 801397a:	e7bf      	b.n	80138fc <_strtod_l+0x144>
 801397c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801397e:	191a      	adds	r2, r3, r4
 8013980:	921b      	str	r2, [sp, #108]	; 0x6c
 8013982:	9a05      	ldr	r2, [sp, #20]
 8013984:	5d1b      	ldrb	r3, [r3, r4]
 8013986:	2a00      	cmp	r2, #0
 8013988:	d037      	beq.n	80139fa <_strtod_l+0x242>
 801398a:	9c05      	ldr	r4, [sp, #20]
 801398c:	4602      	mov	r2, r0
 801398e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013992:	2909      	cmp	r1, #9
 8013994:	d913      	bls.n	80139be <_strtod_l+0x206>
 8013996:	2101      	movs	r1, #1
 8013998:	9104      	str	r1, [sp, #16]
 801399a:	e7c2      	b.n	8013922 <_strtod_l+0x16a>
 801399c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801399e:	1c5a      	adds	r2, r3, #1
 80139a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80139a2:	785b      	ldrb	r3, [r3, #1]
 80139a4:	3001      	adds	r0, #1
 80139a6:	2b30      	cmp	r3, #48	; 0x30
 80139a8:	d0f8      	beq.n	801399c <_strtod_l+0x1e4>
 80139aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80139ae:	2a08      	cmp	r2, #8
 80139b0:	f200 84e4 	bhi.w	801437c <_strtod_l+0xbc4>
 80139b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80139b6:	9208      	str	r2, [sp, #32]
 80139b8:	4602      	mov	r2, r0
 80139ba:	2000      	movs	r0, #0
 80139bc:	4604      	mov	r4, r0
 80139be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80139c2:	f100 0101 	add.w	r1, r0, #1
 80139c6:	d012      	beq.n	80139ee <_strtod_l+0x236>
 80139c8:	440a      	add	r2, r1
 80139ca:	eb00 0c04 	add.w	ip, r0, r4
 80139ce:	4621      	mov	r1, r4
 80139d0:	270a      	movs	r7, #10
 80139d2:	458c      	cmp	ip, r1
 80139d4:	d113      	bne.n	80139fe <_strtod_l+0x246>
 80139d6:	1821      	adds	r1, r4, r0
 80139d8:	2908      	cmp	r1, #8
 80139da:	f104 0401 	add.w	r4, r4, #1
 80139de:	4404      	add	r4, r0
 80139e0:	dc19      	bgt.n	8013a16 <_strtod_l+0x25e>
 80139e2:	9b07      	ldr	r3, [sp, #28]
 80139e4:	210a      	movs	r1, #10
 80139e6:	fb01 e303 	mla	r3, r1, r3, lr
 80139ea:	9307      	str	r3, [sp, #28]
 80139ec:	2100      	movs	r1, #0
 80139ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139f0:	1c58      	adds	r0, r3, #1
 80139f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80139f4:	785b      	ldrb	r3, [r3, #1]
 80139f6:	4608      	mov	r0, r1
 80139f8:	e7c9      	b.n	801398e <_strtod_l+0x1d6>
 80139fa:	9805      	ldr	r0, [sp, #20]
 80139fc:	e7d3      	b.n	80139a6 <_strtod_l+0x1ee>
 80139fe:	2908      	cmp	r1, #8
 8013a00:	f101 0101 	add.w	r1, r1, #1
 8013a04:	dc03      	bgt.n	8013a0e <_strtod_l+0x256>
 8013a06:	9b07      	ldr	r3, [sp, #28]
 8013a08:	437b      	muls	r3, r7
 8013a0a:	9307      	str	r3, [sp, #28]
 8013a0c:	e7e1      	b.n	80139d2 <_strtod_l+0x21a>
 8013a0e:	2910      	cmp	r1, #16
 8013a10:	bfd8      	it	le
 8013a12:	437d      	mulle	r5, r7
 8013a14:	e7dd      	b.n	80139d2 <_strtod_l+0x21a>
 8013a16:	2c10      	cmp	r4, #16
 8013a18:	bfdc      	itt	le
 8013a1a:	210a      	movle	r1, #10
 8013a1c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013a20:	e7e4      	b.n	80139ec <_strtod_l+0x234>
 8013a22:	2301      	movs	r3, #1
 8013a24:	9304      	str	r3, [sp, #16]
 8013a26:	e781      	b.n	801392c <_strtod_l+0x174>
 8013a28:	f04f 0c01 	mov.w	ip, #1
 8013a2c:	1cb3      	adds	r3, r6, #2
 8013a2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a30:	78b3      	ldrb	r3, [r6, #2]
 8013a32:	e78a      	b.n	801394a <_strtod_l+0x192>
 8013a34:	f04f 0c00 	mov.w	ip, #0
 8013a38:	e7f8      	b.n	8013a2c <_strtod_l+0x274>
 8013a3a:	bf00      	nop
 8013a3c:	08017afc 	.word	0x08017afc
 8013a40:	7ff00000 	.word	0x7ff00000
 8013a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a46:	1c5f      	adds	r7, r3, #1
 8013a48:	971b      	str	r7, [sp, #108]	; 0x6c
 8013a4a:	785b      	ldrb	r3, [r3, #1]
 8013a4c:	2b30      	cmp	r3, #48	; 0x30
 8013a4e:	d0f9      	beq.n	8013a44 <_strtod_l+0x28c>
 8013a50:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013a54:	2f08      	cmp	r7, #8
 8013a56:	f63f af7d 	bhi.w	8013954 <_strtod_l+0x19c>
 8013a5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a60:	930a      	str	r3, [sp, #40]	; 0x28
 8013a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a64:	1c5f      	adds	r7, r3, #1
 8013a66:	971b      	str	r7, [sp, #108]	; 0x6c
 8013a68:	785b      	ldrb	r3, [r3, #1]
 8013a6a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013a6e:	f1b8 0f09 	cmp.w	r8, #9
 8013a72:	d937      	bls.n	8013ae4 <_strtod_l+0x32c>
 8013a74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a76:	1a7f      	subs	r7, r7, r1
 8013a78:	2f08      	cmp	r7, #8
 8013a7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013a7e:	dc37      	bgt.n	8013af0 <_strtod_l+0x338>
 8013a80:	45be      	cmp	lr, r7
 8013a82:	bfa8      	it	ge
 8013a84:	46be      	movge	lr, r7
 8013a86:	f1bc 0f00 	cmp.w	ip, #0
 8013a8a:	d001      	beq.n	8013a90 <_strtod_l+0x2d8>
 8013a8c:	f1ce 0e00 	rsb	lr, lr, #0
 8013a90:	2c00      	cmp	r4, #0
 8013a92:	d151      	bne.n	8013b38 <_strtod_l+0x380>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	f47f aece 	bne.w	8013836 <_strtod_l+0x7e>
 8013a9a:	9a06      	ldr	r2, [sp, #24]
 8013a9c:	2a00      	cmp	r2, #0
 8013a9e:	f47f aeca 	bne.w	8013836 <_strtod_l+0x7e>
 8013aa2:	9a04      	ldr	r2, [sp, #16]
 8013aa4:	2a00      	cmp	r2, #0
 8013aa6:	f47f aee4 	bne.w	8013872 <_strtod_l+0xba>
 8013aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8013aac:	d027      	beq.n	8013afe <_strtod_l+0x346>
 8013aae:	dc21      	bgt.n	8013af4 <_strtod_l+0x33c>
 8013ab0:	2b49      	cmp	r3, #73	; 0x49
 8013ab2:	f47f aede 	bne.w	8013872 <_strtod_l+0xba>
 8013ab6:	49a0      	ldr	r1, [pc, #640]	; (8013d38 <_strtod_l+0x580>)
 8013ab8:	a81b      	add	r0, sp, #108	; 0x6c
 8013aba:	f002 f851 	bl	8015b60 <__match>
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	f43f aed7 	beq.w	8013872 <_strtod_l+0xba>
 8013ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ac6:	499d      	ldr	r1, [pc, #628]	; (8013d3c <_strtod_l+0x584>)
 8013ac8:	3b01      	subs	r3, #1
 8013aca:	a81b      	add	r0, sp, #108	; 0x6c
 8013acc:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ace:	f002 f847 	bl	8015b60 <__match>
 8013ad2:	b910      	cbnz	r0, 8013ada <_strtod_l+0x322>
 8013ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ada:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013d50 <_strtod_l+0x598>
 8013ade:	f04f 0a00 	mov.w	sl, #0
 8013ae2:	e6a8      	b.n	8013836 <_strtod_l+0x7e>
 8013ae4:	210a      	movs	r1, #10
 8013ae6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013aea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013aee:	e7b8      	b.n	8013a62 <_strtod_l+0x2aa>
 8013af0:	46be      	mov	lr, r7
 8013af2:	e7c8      	b.n	8013a86 <_strtod_l+0x2ce>
 8013af4:	2b69      	cmp	r3, #105	; 0x69
 8013af6:	d0de      	beq.n	8013ab6 <_strtod_l+0x2fe>
 8013af8:	2b6e      	cmp	r3, #110	; 0x6e
 8013afa:	f47f aeba 	bne.w	8013872 <_strtod_l+0xba>
 8013afe:	4990      	ldr	r1, [pc, #576]	; (8013d40 <_strtod_l+0x588>)
 8013b00:	a81b      	add	r0, sp, #108	; 0x6c
 8013b02:	f002 f82d 	bl	8015b60 <__match>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	f43f aeb3 	beq.w	8013872 <_strtod_l+0xba>
 8013b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	2b28      	cmp	r3, #40	; 0x28
 8013b12:	d10e      	bne.n	8013b32 <_strtod_l+0x37a>
 8013b14:	aa1e      	add	r2, sp, #120	; 0x78
 8013b16:	498b      	ldr	r1, [pc, #556]	; (8013d44 <_strtod_l+0x58c>)
 8013b18:	a81b      	add	r0, sp, #108	; 0x6c
 8013b1a:	f002 f835 	bl	8015b88 <__hexnan>
 8013b1e:	2805      	cmp	r0, #5
 8013b20:	d107      	bne.n	8013b32 <_strtod_l+0x37a>
 8013b22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b24:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013b28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013b2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013b30:	e681      	b.n	8013836 <_strtod_l+0x7e>
 8013b32:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013d58 <_strtod_l+0x5a0>
 8013b36:	e7d2      	b.n	8013ade <_strtod_l+0x326>
 8013b38:	ebae 0302 	sub.w	r3, lr, r2
 8013b3c:	9306      	str	r3, [sp, #24]
 8013b3e:	9b05      	ldr	r3, [sp, #20]
 8013b40:	9807      	ldr	r0, [sp, #28]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	bf08      	it	eq
 8013b46:	4623      	moveq	r3, r4
 8013b48:	2c10      	cmp	r4, #16
 8013b4a:	9305      	str	r3, [sp, #20]
 8013b4c:	46a0      	mov	r8, r4
 8013b4e:	bfa8      	it	ge
 8013b50:	f04f 0810 	movge.w	r8, #16
 8013b54:	f7ec fcee 	bl	8000534 <__aeabi_ui2d>
 8013b58:	2c09      	cmp	r4, #9
 8013b5a:	4682      	mov	sl, r0
 8013b5c:	468b      	mov	fp, r1
 8013b5e:	dc13      	bgt.n	8013b88 <_strtod_l+0x3d0>
 8013b60:	9b06      	ldr	r3, [sp, #24]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f43f ae67 	beq.w	8013836 <_strtod_l+0x7e>
 8013b68:	9b06      	ldr	r3, [sp, #24]
 8013b6a:	dd7a      	ble.n	8013c62 <_strtod_l+0x4aa>
 8013b6c:	2b16      	cmp	r3, #22
 8013b6e:	dc61      	bgt.n	8013c34 <_strtod_l+0x47c>
 8013b70:	4a75      	ldr	r2, [pc, #468]	; (8013d48 <_strtod_l+0x590>)
 8013b72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013b76:	e9de 0100 	ldrd	r0, r1, [lr]
 8013b7a:	4652      	mov	r2, sl
 8013b7c:	465b      	mov	r3, fp
 8013b7e:	f7ec fd53 	bl	8000628 <__aeabi_dmul>
 8013b82:	4682      	mov	sl, r0
 8013b84:	468b      	mov	fp, r1
 8013b86:	e656      	b.n	8013836 <_strtod_l+0x7e>
 8013b88:	4b6f      	ldr	r3, [pc, #444]	; (8013d48 <_strtod_l+0x590>)
 8013b8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013b8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013b92:	f7ec fd49 	bl	8000628 <__aeabi_dmul>
 8013b96:	4606      	mov	r6, r0
 8013b98:	4628      	mov	r0, r5
 8013b9a:	460f      	mov	r7, r1
 8013b9c:	f7ec fcca 	bl	8000534 <__aeabi_ui2d>
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4630      	mov	r0, r6
 8013ba6:	4639      	mov	r1, r7
 8013ba8:	f7ec fb88 	bl	80002bc <__adddf3>
 8013bac:	2c0f      	cmp	r4, #15
 8013bae:	4682      	mov	sl, r0
 8013bb0:	468b      	mov	fp, r1
 8013bb2:	ddd5      	ble.n	8013b60 <_strtod_l+0x3a8>
 8013bb4:	9b06      	ldr	r3, [sp, #24]
 8013bb6:	eba4 0808 	sub.w	r8, r4, r8
 8013bba:	4498      	add	r8, r3
 8013bbc:	f1b8 0f00 	cmp.w	r8, #0
 8013bc0:	f340 8096 	ble.w	8013cf0 <_strtod_l+0x538>
 8013bc4:	f018 030f 	ands.w	r3, r8, #15
 8013bc8:	d00a      	beq.n	8013be0 <_strtod_l+0x428>
 8013bca:	495f      	ldr	r1, [pc, #380]	; (8013d48 <_strtod_l+0x590>)
 8013bcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013bd0:	4652      	mov	r2, sl
 8013bd2:	465b      	mov	r3, fp
 8013bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bd8:	f7ec fd26 	bl	8000628 <__aeabi_dmul>
 8013bdc:	4682      	mov	sl, r0
 8013bde:	468b      	mov	fp, r1
 8013be0:	f038 080f 	bics.w	r8, r8, #15
 8013be4:	d073      	beq.n	8013cce <_strtod_l+0x516>
 8013be6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013bea:	dd47      	ble.n	8013c7c <_strtod_l+0x4c4>
 8013bec:	2400      	movs	r4, #0
 8013bee:	46a0      	mov	r8, r4
 8013bf0:	9407      	str	r4, [sp, #28]
 8013bf2:	9405      	str	r4, [sp, #20]
 8013bf4:	2322      	movs	r3, #34	; 0x22
 8013bf6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013d50 <_strtod_l+0x598>
 8013bfa:	f8c9 3000 	str.w	r3, [r9]
 8013bfe:	f04f 0a00 	mov.w	sl, #0
 8013c02:	9b07      	ldr	r3, [sp, #28]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f43f ae16 	beq.w	8013836 <_strtod_l+0x7e>
 8013c0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c0c:	4648      	mov	r0, r9
 8013c0e:	f002 f93c 	bl	8015e8a <_Bfree>
 8013c12:	9905      	ldr	r1, [sp, #20]
 8013c14:	4648      	mov	r0, r9
 8013c16:	f002 f938 	bl	8015e8a <_Bfree>
 8013c1a:	4641      	mov	r1, r8
 8013c1c:	4648      	mov	r0, r9
 8013c1e:	f002 f934 	bl	8015e8a <_Bfree>
 8013c22:	9907      	ldr	r1, [sp, #28]
 8013c24:	4648      	mov	r0, r9
 8013c26:	f002 f930 	bl	8015e8a <_Bfree>
 8013c2a:	4621      	mov	r1, r4
 8013c2c:	4648      	mov	r0, r9
 8013c2e:	f002 f92c 	bl	8015e8a <_Bfree>
 8013c32:	e600      	b.n	8013836 <_strtod_l+0x7e>
 8013c34:	9a06      	ldr	r2, [sp, #24]
 8013c36:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	dbba      	blt.n	8013bb4 <_strtod_l+0x3fc>
 8013c3e:	4d42      	ldr	r5, [pc, #264]	; (8013d48 <_strtod_l+0x590>)
 8013c40:	f1c4 040f 	rsb	r4, r4, #15
 8013c44:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013c48:	4652      	mov	r2, sl
 8013c4a:	465b      	mov	r3, fp
 8013c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c50:	f7ec fcea 	bl	8000628 <__aeabi_dmul>
 8013c54:	9b06      	ldr	r3, [sp, #24]
 8013c56:	1b1c      	subs	r4, r3, r4
 8013c58:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c60:	e78d      	b.n	8013b7e <_strtod_l+0x3c6>
 8013c62:	f113 0f16 	cmn.w	r3, #22
 8013c66:	dba5      	blt.n	8013bb4 <_strtod_l+0x3fc>
 8013c68:	4a37      	ldr	r2, [pc, #220]	; (8013d48 <_strtod_l+0x590>)
 8013c6a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013c6e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013c72:	4650      	mov	r0, sl
 8013c74:	4659      	mov	r1, fp
 8013c76:	f7ec fe01 	bl	800087c <__aeabi_ddiv>
 8013c7a:	e782      	b.n	8013b82 <_strtod_l+0x3ca>
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	4e33      	ldr	r6, [pc, #204]	; (8013d4c <_strtod_l+0x594>)
 8013c80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013c84:	4650      	mov	r0, sl
 8013c86:	4659      	mov	r1, fp
 8013c88:	461d      	mov	r5, r3
 8013c8a:	f1b8 0f01 	cmp.w	r8, #1
 8013c8e:	dc21      	bgt.n	8013cd4 <_strtod_l+0x51c>
 8013c90:	b10b      	cbz	r3, 8013c96 <_strtod_l+0x4de>
 8013c92:	4682      	mov	sl, r0
 8013c94:	468b      	mov	fp, r1
 8013c96:	4b2d      	ldr	r3, [pc, #180]	; (8013d4c <_strtod_l+0x594>)
 8013c98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013c9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013ca0:	4652      	mov	r2, sl
 8013ca2:	465b      	mov	r3, fp
 8013ca4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013ca8:	f7ec fcbe 	bl	8000628 <__aeabi_dmul>
 8013cac:	4b28      	ldr	r3, [pc, #160]	; (8013d50 <_strtod_l+0x598>)
 8013cae:	460a      	mov	r2, r1
 8013cb0:	400b      	ands	r3, r1
 8013cb2:	4928      	ldr	r1, [pc, #160]	; (8013d54 <_strtod_l+0x59c>)
 8013cb4:	428b      	cmp	r3, r1
 8013cb6:	4682      	mov	sl, r0
 8013cb8:	d898      	bhi.n	8013bec <_strtod_l+0x434>
 8013cba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013cbe:	428b      	cmp	r3, r1
 8013cc0:	bf86      	itte	hi
 8013cc2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013d5c <_strtod_l+0x5a4>
 8013cc6:	f04f 3aff 	movhi.w	sl, #4294967295
 8013cca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013cce:	2300      	movs	r3, #0
 8013cd0:	9304      	str	r3, [sp, #16]
 8013cd2:	e077      	b.n	8013dc4 <_strtod_l+0x60c>
 8013cd4:	f018 0f01 	tst.w	r8, #1
 8013cd8:	d006      	beq.n	8013ce8 <_strtod_l+0x530>
 8013cda:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce2:	f7ec fca1 	bl	8000628 <__aeabi_dmul>
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	3501      	adds	r5, #1
 8013cea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013cee:	e7cc      	b.n	8013c8a <_strtod_l+0x4d2>
 8013cf0:	d0ed      	beq.n	8013cce <_strtod_l+0x516>
 8013cf2:	f1c8 0800 	rsb	r8, r8, #0
 8013cf6:	f018 020f 	ands.w	r2, r8, #15
 8013cfa:	d00a      	beq.n	8013d12 <_strtod_l+0x55a>
 8013cfc:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <_strtod_l+0x590>)
 8013cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d02:	4650      	mov	r0, sl
 8013d04:	4659      	mov	r1, fp
 8013d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0a:	f7ec fdb7 	bl	800087c <__aeabi_ddiv>
 8013d0e:	4682      	mov	sl, r0
 8013d10:	468b      	mov	fp, r1
 8013d12:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013d16:	d0da      	beq.n	8013cce <_strtod_l+0x516>
 8013d18:	f1b8 0f1f 	cmp.w	r8, #31
 8013d1c:	dd20      	ble.n	8013d60 <_strtod_l+0x5a8>
 8013d1e:	2400      	movs	r4, #0
 8013d20:	46a0      	mov	r8, r4
 8013d22:	9407      	str	r4, [sp, #28]
 8013d24:	9405      	str	r4, [sp, #20]
 8013d26:	2322      	movs	r3, #34	; 0x22
 8013d28:	f04f 0a00 	mov.w	sl, #0
 8013d2c:	f04f 0b00 	mov.w	fp, #0
 8013d30:	f8c9 3000 	str.w	r3, [r9]
 8013d34:	e765      	b.n	8013c02 <_strtod_l+0x44a>
 8013d36:	bf00      	nop
 8013d38:	08017ac9 	.word	0x08017ac9
 8013d3c:	08017b53 	.word	0x08017b53
 8013d40:	08017ad1 	.word	0x08017ad1
 8013d44:	08017b10 	.word	0x08017b10
 8013d48:	08017bf8 	.word	0x08017bf8
 8013d4c:	08017bd0 	.word	0x08017bd0
 8013d50:	7ff00000 	.word	0x7ff00000
 8013d54:	7ca00000 	.word	0x7ca00000
 8013d58:	fff80000 	.word	0xfff80000
 8013d5c:	7fefffff 	.word	0x7fefffff
 8013d60:	f018 0310 	ands.w	r3, r8, #16
 8013d64:	bf18      	it	ne
 8013d66:	236a      	movne	r3, #106	; 0x6a
 8013d68:	4da0      	ldr	r5, [pc, #640]	; (8013fec <_strtod_l+0x834>)
 8013d6a:	9304      	str	r3, [sp, #16]
 8013d6c:	4650      	mov	r0, sl
 8013d6e:	4659      	mov	r1, fp
 8013d70:	2300      	movs	r3, #0
 8013d72:	f1b8 0f00 	cmp.w	r8, #0
 8013d76:	f300 810a 	bgt.w	8013f8e <_strtod_l+0x7d6>
 8013d7a:	b10b      	cbz	r3, 8013d80 <_strtod_l+0x5c8>
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	468b      	mov	fp, r1
 8013d80:	9b04      	ldr	r3, [sp, #16]
 8013d82:	b1bb      	cbz	r3, 8013db4 <_strtod_l+0x5fc>
 8013d84:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013d88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	4659      	mov	r1, fp
 8013d90:	dd10      	ble.n	8013db4 <_strtod_l+0x5fc>
 8013d92:	2b1f      	cmp	r3, #31
 8013d94:	f340 8107 	ble.w	8013fa6 <_strtod_l+0x7ee>
 8013d98:	2b34      	cmp	r3, #52	; 0x34
 8013d9a:	bfde      	ittt	le
 8013d9c:	3b20      	suble	r3, #32
 8013d9e:	f04f 32ff 	movle.w	r2, #4294967295
 8013da2:	fa02 f303 	lslle.w	r3, r2, r3
 8013da6:	f04f 0a00 	mov.w	sl, #0
 8013daa:	bfcc      	ite	gt
 8013dac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013db0:	ea03 0b01 	andle.w	fp, r3, r1
 8013db4:	2200      	movs	r2, #0
 8013db6:	2300      	movs	r3, #0
 8013db8:	4650      	mov	r0, sl
 8013dba:	4659      	mov	r1, fp
 8013dbc:	f7ec fe9c 	bl	8000af8 <__aeabi_dcmpeq>
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d1ac      	bne.n	8013d1e <_strtod_l+0x566>
 8013dc4:	9b07      	ldr	r3, [sp, #28]
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	9a05      	ldr	r2, [sp, #20]
 8013dca:	9908      	ldr	r1, [sp, #32]
 8013dcc:	4623      	mov	r3, r4
 8013dce:	4648      	mov	r0, r9
 8013dd0:	f002 f8ad 	bl	8015f2e <__s2b>
 8013dd4:	9007      	str	r0, [sp, #28]
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	f43f af08 	beq.w	8013bec <_strtod_l+0x434>
 8013ddc:	9a06      	ldr	r2, [sp, #24]
 8013dde:	9b06      	ldr	r3, [sp, #24]
 8013de0:	2a00      	cmp	r2, #0
 8013de2:	f1c3 0300 	rsb	r3, r3, #0
 8013de6:	bfa8      	it	ge
 8013de8:	2300      	movge	r3, #0
 8013dea:	930e      	str	r3, [sp, #56]	; 0x38
 8013dec:	2400      	movs	r4, #0
 8013dee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013df2:	9316      	str	r3, [sp, #88]	; 0x58
 8013df4:	46a0      	mov	r8, r4
 8013df6:	9b07      	ldr	r3, [sp, #28]
 8013df8:	4648      	mov	r0, r9
 8013dfa:	6859      	ldr	r1, [r3, #4]
 8013dfc:	f002 f811 	bl	8015e22 <_Balloc>
 8013e00:	9005      	str	r0, [sp, #20]
 8013e02:	2800      	cmp	r0, #0
 8013e04:	f43f aef6 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013e08:	9b07      	ldr	r3, [sp, #28]
 8013e0a:	691a      	ldr	r2, [r3, #16]
 8013e0c:	3202      	adds	r2, #2
 8013e0e:	f103 010c 	add.w	r1, r3, #12
 8013e12:	0092      	lsls	r2, r2, #2
 8013e14:	300c      	adds	r0, #12
 8013e16:	f001 fff9 	bl	8015e0c <memcpy>
 8013e1a:	aa1e      	add	r2, sp, #120	; 0x78
 8013e1c:	a91d      	add	r1, sp, #116	; 0x74
 8013e1e:	ec4b ab10 	vmov	d0, sl, fp
 8013e22:	4648      	mov	r0, r9
 8013e24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013e28:	f002 fb3c 	bl	80164a4 <__d2b>
 8013e2c:	901c      	str	r0, [sp, #112]	; 0x70
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	f43f aee0 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013e34:	2101      	movs	r1, #1
 8013e36:	4648      	mov	r0, r9
 8013e38:	f002 f905 	bl	8016046 <__i2b>
 8013e3c:	4680      	mov	r8, r0
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	f43f aed8 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013e44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013e46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013e48:	2e00      	cmp	r6, #0
 8013e4a:	bfab      	itete	ge
 8013e4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013e4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013e50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013e52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013e54:	bfac      	ite	ge
 8013e56:	18f7      	addge	r7, r6, r3
 8013e58:	1b9d      	sublt	r5, r3, r6
 8013e5a:	9b04      	ldr	r3, [sp, #16]
 8013e5c:	1af6      	subs	r6, r6, r3
 8013e5e:	4416      	add	r6, r2
 8013e60:	4b63      	ldr	r3, [pc, #396]	; (8013ff0 <_strtod_l+0x838>)
 8013e62:	3e01      	subs	r6, #1
 8013e64:	429e      	cmp	r6, r3
 8013e66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013e6a:	f280 80af 	bge.w	8013fcc <_strtod_l+0x814>
 8013e6e:	1b9b      	subs	r3, r3, r6
 8013e70:	2b1f      	cmp	r3, #31
 8013e72:	eba2 0203 	sub.w	r2, r2, r3
 8013e76:	f04f 0101 	mov.w	r1, #1
 8013e7a:	f300 809b 	bgt.w	8013fb4 <_strtod_l+0x7fc>
 8013e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e84:	2300      	movs	r3, #0
 8013e86:	930a      	str	r3, [sp, #40]	; 0x28
 8013e88:	18be      	adds	r6, r7, r2
 8013e8a:	9b04      	ldr	r3, [sp, #16]
 8013e8c:	42b7      	cmp	r7, r6
 8013e8e:	4415      	add	r5, r2
 8013e90:	441d      	add	r5, r3
 8013e92:	463b      	mov	r3, r7
 8013e94:	bfa8      	it	ge
 8013e96:	4633      	movge	r3, r6
 8013e98:	42ab      	cmp	r3, r5
 8013e9a:	bfa8      	it	ge
 8013e9c:	462b      	movge	r3, r5
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	bfc2      	ittt	gt
 8013ea2:	1af6      	subgt	r6, r6, r3
 8013ea4:	1aed      	subgt	r5, r5, r3
 8013ea6:	1aff      	subgt	r7, r7, r3
 8013ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013eaa:	b1bb      	cbz	r3, 8013edc <_strtod_l+0x724>
 8013eac:	4641      	mov	r1, r8
 8013eae:	461a      	mov	r2, r3
 8013eb0:	4648      	mov	r0, r9
 8013eb2:	f002 f967 	bl	8016184 <__pow5mult>
 8013eb6:	4680      	mov	r8, r0
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	f43f ae9b 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013ebe:	4601      	mov	r1, r0
 8013ec0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013ec2:	4648      	mov	r0, r9
 8013ec4:	f002 f8c8 	bl	8016058 <__multiply>
 8013ec8:	900c      	str	r0, [sp, #48]	; 0x30
 8013eca:	2800      	cmp	r0, #0
 8013ecc:	f43f ae92 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013ed0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ed2:	4648      	mov	r0, r9
 8013ed4:	f001 ffd9 	bl	8015e8a <_Bfree>
 8013ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eda:	931c      	str	r3, [sp, #112]	; 0x70
 8013edc:	2e00      	cmp	r6, #0
 8013ede:	dc7a      	bgt.n	8013fd6 <_strtod_l+0x81e>
 8013ee0:	9b06      	ldr	r3, [sp, #24]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	dd08      	ble.n	8013ef8 <_strtod_l+0x740>
 8013ee6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013ee8:	9905      	ldr	r1, [sp, #20]
 8013eea:	4648      	mov	r0, r9
 8013eec:	f002 f94a 	bl	8016184 <__pow5mult>
 8013ef0:	9005      	str	r0, [sp, #20]
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	f43f ae7e 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013ef8:	2d00      	cmp	r5, #0
 8013efa:	dd08      	ble.n	8013f0e <_strtod_l+0x756>
 8013efc:	462a      	mov	r2, r5
 8013efe:	9905      	ldr	r1, [sp, #20]
 8013f00:	4648      	mov	r0, r9
 8013f02:	f002 f98d 	bl	8016220 <__lshift>
 8013f06:	9005      	str	r0, [sp, #20]
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	f43f ae73 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013f0e:	2f00      	cmp	r7, #0
 8013f10:	dd08      	ble.n	8013f24 <_strtod_l+0x76c>
 8013f12:	4641      	mov	r1, r8
 8013f14:	463a      	mov	r2, r7
 8013f16:	4648      	mov	r0, r9
 8013f18:	f002 f982 	bl	8016220 <__lshift>
 8013f1c:	4680      	mov	r8, r0
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	f43f ae68 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013f24:	9a05      	ldr	r2, [sp, #20]
 8013f26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f28:	4648      	mov	r0, r9
 8013f2a:	f002 f9e7 	bl	80162fc <__mdiff>
 8013f2e:	4604      	mov	r4, r0
 8013f30:	2800      	cmp	r0, #0
 8013f32:	f43f ae5f 	beq.w	8013bf4 <_strtod_l+0x43c>
 8013f36:	68c3      	ldr	r3, [r0, #12]
 8013f38:	930c      	str	r3, [sp, #48]	; 0x30
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	60c3      	str	r3, [r0, #12]
 8013f3e:	4641      	mov	r1, r8
 8013f40:	f002 f9c2 	bl	80162c8 <__mcmp>
 8013f44:	2800      	cmp	r0, #0
 8013f46:	da55      	bge.n	8013ff4 <_strtod_l+0x83c>
 8013f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f4a:	b9e3      	cbnz	r3, 8013f86 <_strtod_l+0x7ce>
 8013f4c:	f1ba 0f00 	cmp.w	sl, #0
 8013f50:	d119      	bne.n	8013f86 <_strtod_l+0x7ce>
 8013f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f56:	b9b3      	cbnz	r3, 8013f86 <_strtod_l+0x7ce>
 8013f58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f5c:	0d1b      	lsrs	r3, r3, #20
 8013f5e:	051b      	lsls	r3, r3, #20
 8013f60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f64:	d90f      	bls.n	8013f86 <_strtod_l+0x7ce>
 8013f66:	6963      	ldr	r3, [r4, #20]
 8013f68:	b913      	cbnz	r3, 8013f70 <_strtod_l+0x7b8>
 8013f6a:	6923      	ldr	r3, [r4, #16]
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	dd0a      	ble.n	8013f86 <_strtod_l+0x7ce>
 8013f70:	4621      	mov	r1, r4
 8013f72:	2201      	movs	r2, #1
 8013f74:	4648      	mov	r0, r9
 8013f76:	f002 f953 	bl	8016220 <__lshift>
 8013f7a:	4641      	mov	r1, r8
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	f002 f9a3 	bl	80162c8 <__mcmp>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	dc67      	bgt.n	8014056 <_strtod_l+0x89e>
 8013f86:	9b04      	ldr	r3, [sp, #16]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d171      	bne.n	8014070 <_strtod_l+0x8b8>
 8013f8c:	e63d      	b.n	8013c0a <_strtod_l+0x452>
 8013f8e:	f018 0f01 	tst.w	r8, #1
 8013f92:	d004      	beq.n	8013f9e <_strtod_l+0x7e6>
 8013f94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f98:	f7ec fb46 	bl	8000628 <__aeabi_dmul>
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013fa2:	3508      	adds	r5, #8
 8013fa4:	e6e5      	b.n	8013d72 <_strtod_l+0x5ba>
 8013fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8013faa:	fa02 f303 	lsl.w	r3, r2, r3
 8013fae:	ea03 0a0a 	and.w	sl, r3, sl
 8013fb2:	e6ff      	b.n	8013db4 <_strtod_l+0x5fc>
 8013fb4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013fb8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013fbc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013fc0:	36e2      	adds	r6, #226	; 0xe2
 8013fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8013fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8013fc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8013fca:	e75d      	b.n	8013e88 <_strtod_l+0x6d0>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	930a      	str	r3, [sp, #40]	; 0x28
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fd4:	e758      	b.n	8013e88 <_strtod_l+0x6d0>
 8013fd6:	4632      	mov	r2, r6
 8013fd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013fda:	4648      	mov	r0, r9
 8013fdc:	f002 f920 	bl	8016220 <__lshift>
 8013fe0:	901c      	str	r0, [sp, #112]	; 0x70
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	f47f af7c 	bne.w	8013ee0 <_strtod_l+0x728>
 8013fe8:	e604      	b.n	8013bf4 <_strtod_l+0x43c>
 8013fea:	bf00      	nop
 8013fec:	08017b28 	.word	0x08017b28
 8013ff0:	fffffc02 	.word	0xfffffc02
 8013ff4:	465d      	mov	r5, fp
 8013ff6:	f040 8086 	bne.w	8014106 <_strtod_l+0x94e>
 8013ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014000:	b32a      	cbz	r2, 801404e <_strtod_l+0x896>
 8014002:	4aaf      	ldr	r2, [pc, #700]	; (80142c0 <_strtod_l+0xb08>)
 8014004:	4293      	cmp	r3, r2
 8014006:	d153      	bne.n	80140b0 <_strtod_l+0x8f8>
 8014008:	9b04      	ldr	r3, [sp, #16]
 801400a:	4650      	mov	r0, sl
 801400c:	b1d3      	cbz	r3, 8014044 <_strtod_l+0x88c>
 801400e:	4aad      	ldr	r2, [pc, #692]	; (80142c4 <_strtod_l+0xb0c>)
 8014010:	402a      	ands	r2, r5
 8014012:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014016:	f04f 31ff 	mov.w	r1, #4294967295
 801401a:	d816      	bhi.n	801404a <_strtod_l+0x892>
 801401c:	0d12      	lsrs	r2, r2, #20
 801401e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014022:	fa01 f303 	lsl.w	r3, r1, r3
 8014026:	4298      	cmp	r0, r3
 8014028:	d142      	bne.n	80140b0 <_strtod_l+0x8f8>
 801402a:	4ba7      	ldr	r3, [pc, #668]	; (80142c8 <_strtod_l+0xb10>)
 801402c:	429d      	cmp	r5, r3
 801402e:	d102      	bne.n	8014036 <_strtod_l+0x87e>
 8014030:	3001      	adds	r0, #1
 8014032:	f43f addf 	beq.w	8013bf4 <_strtod_l+0x43c>
 8014036:	4ba3      	ldr	r3, [pc, #652]	; (80142c4 <_strtod_l+0xb0c>)
 8014038:	402b      	ands	r3, r5
 801403a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801403e:	f04f 0a00 	mov.w	sl, #0
 8014042:	e7a0      	b.n	8013f86 <_strtod_l+0x7ce>
 8014044:	f04f 33ff 	mov.w	r3, #4294967295
 8014048:	e7ed      	b.n	8014026 <_strtod_l+0x86e>
 801404a:	460b      	mov	r3, r1
 801404c:	e7eb      	b.n	8014026 <_strtod_l+0x86e>
 801404e:	bb7b      	cbnz	r3, 80140b0 <_strtod_l+0x8f8>
 8014050:	f1ba 0f00 	cmp.w	sl, #0
 8014054:	d12c      	bne.n	80140b0 <_strtod_l+0x8f8>
 8014056:	9904      	ldr	r1, [sp, #16]
 8014058:	4a9a      	ldr	r2, [pc, #616]	; (80142c4 <_strtod_l+0xb0c>)
 801405a:	465b      	mov	r3, fp
 801405c:	b1f1      	cbz	r1, 801409c <_strtod_l+0x8e4>
 801405e:	ea02 010b 	and.w	r1, r2, fp
 8014062:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014066:	dc19      	bgt.n	801409c <_strtod_l+0x8e4>
 8014068:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801406c:	f77f ae5b 	ble.w	8013d26 <_strtod_l+0x56e>
 8014070:	4a96      	ldr	r2, [pc, #600]	; (80142cc <_strtod_l+0xb14>)
 8014072:	2300      	movs	r3, #0
 8014074:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014078:	4650      	mov	r0, sl
 801407a:	4659      	mov	r1, fp
 801407c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014080:	f7ec fad2 	bl	8000628 <__aeabi_dmul>
 8014084:	4682      	mov	sl, r0
 8014086:	468b      	mov	fp, r1
 8014088:	2900      	cmp	r1, #0
 801408a:	f47f adbe 	bne.w	8013c0a <_strtod_l+0x452>
 801408e:	2800      	cmp	r0, #0
 8014090:	f47f adbb 	bne.w	8013c0a <_strtod_l+0x452>
 8014094:	2322      	movs	r3, #34	; 0x22
 8014096:	f8c9 3000 	str.w	r3, [r9]
 801409a:	e5b6      	b.n	8013c0a <_strtod_l+0x452>
 801409c:	4013      	ands	r3, r2
 801409e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80140a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80140a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80140aa:	f04f 3aff 	mov.w	sl, #4294967295
 80140ae:	e76a      	b.n	8013f86 <_strtod_l+0x7ce>
 80140b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140b2:	b193      	cbz	r3, 80140da <_strtod_l+0x922>
 80140b4:	422b      	tst	r3, r5
 80140b6:	f43f af66 	beq.w	8013f86 <_strtod_l+0x7ce>
 80140ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140bc:	9a04      	ldr	r2, [sp, #16]
 80140be:	4650      	mov	r0, sl
 80140c0:	4659      	mov	r1, fp
 80140c2:	b173      	cbz	r3, 80140e2 <_strtod_l+0x92a>
 80140c4:	f7ff fb5b 	bl	801377e <sulp>
 80140c8:	4602      	mov	r2, r0
 80140ca:	460b      	mov	r3, r1
 80140cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80140d0:	f7ec f8f4 	bl	80002bc <__adddf3>
 80140d4:	4682      	mov	sl, r0
 80140d6:	468b      	mov	fp, r1
 80140d8:	e755      	b.n	8013f86 <_strtod_l+0x7ce>
 80140da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140dc:	ea13 0f0a 	tst.w	r3, sl
 80140e0:	e7e9      	b.n	80140b6 <_strtod_l+0x8fe>
 80140e2:	f7ff fb4c 	bl	801377e <sulp>
 80140e6:	4602      	mov	r2, r0
 80140e8:	460b      	mov	r3, r1
 80140ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80140ee:	f7ec f8e3 	bl	80002b8 <__aeabi_dsub>
 80140f2:	2200      	movs	r2, #0
 80140f4:	2300      	movs	r3, #0
 80140f6:	4682      	mov	sl, r0
 80140f8:	468b      	mov	fp, r1
 80140fa:	f7ec fcfd 	bl	8000af8 <__aeabi_dcmpeq>
 80140fe:	2800      	cmp	r0, #0
 8014100:	f47f ae11 	bne.w	8013d26 <_strtod_l+0x56e>
 8014104:	e73f      	b.n	8013f86 <_strtod_l+0x7ce>
 8014106:	4641      	mov	r1, r8
 8014108:	4620      	mov	r0, r4
 801410a:	f002 fa1a 	bl	8016542 <__ratio>
 801410e:	ec57 6b10 	vmov	r6, r7, d0
 8014112:	2200      	movs	r2, #0
 8014114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014118:	ee10 0a10 	vmov	r0, s0
 801411c:	4639      	mov	r1, r7
 801411e:	f7ec fcff 	bl	8000b20 <__aeabi_dcmple>
 8014122:	2800      	cmp	r0, #0
 8014124:	d077      	beq.n	8014216 <_strtod_l+0xa5e>
 8014126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014128:	2b00      	cmp	r3, #0
 801412a:	d04a      	beq.n	80141c2 <_strtod_l+0xa0a>
 801412c:	4b68      	ldr	r3, [pc, #416]	; (80142d0 <_strtod_l+0xb18>)
 801412e:	2200      	movs	r2, #0
 8014130:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014134:	4f66      	ldr	r7, [pc, #408]	; (80142d0 <_strtod_l+0xb18>)
 8014136:	2600      	movs	r6, #0
 8014138:	4b62      	ldr	r3, [pc, #392]	; (80142c4 <_strtod_l+0xb0c>)
 801413a:	402b      	ands	r3, r5
 801413c:	930f      	str	r3, [sp, #60]	; 0x3c
 801413e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014140:	4b64      	ldr	r3, [pc, #400]	; (80142d4 <_strtod_l+0xb1c>)
 8014142:	429a      	cmp	r2, r3
 8014144:	f040 80ce 	bne.w	80142e4 <_strtod_l+0xb2c>
 8014148:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801414c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014150:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014154:	ec4b ab10 	vmov	d0, sl, fp
 8014158:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801415c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014160:	f002 f92a 	bl	80163b8 <__ulp>
 8014164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014168:	ec53 2b10 	vmov	r2, r3, d0
 801416c:	f7ec fa5c 	bl	8000628 <__aeabi_dmul>
 8014170:	4652      	mov	r2, sl
 8014172:	465b      	mov	r3, fp
 8014174:	f7ec f8a2 	bl	80002bc <__adddf3>
 8014178:	460b      	mov	r3, r1
 801417a:	4952      	ldr	r1, [pc, #328]	; (80142c4 <_strtod_l+0xb0c>)
 801417c:	4a56      	ldr	r2, [pc, #344]	; (80142d8 <_strtod_l+0xb20>)
 801417e:	4019      	ands	r1, r3
 8014180:	4291      	cmp	r1, r2
 8014182:	4682      	mov	sl, r0
 8014184:	d95b      	bls.n	801423e <_strtod_l+0xa86>
 8014186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014188:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801418c:	4293      	cmp	r3, r2
 801418e:	d103      	bne.n	8014198 <_strtod_l+0x9e0>
 8014190:	9b08      	ldr	r3, [sp, #32]
 8014192:	3301      	adds	r3, #1
 8014194:	f43f ad2e 	beq.w	8013bf4 <_strtod_l+0x43c>
 8014198:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80142c8 <_strtod_l+0xb10>
 801419c:	f04f 3aff 	mov.w	sl, #4294967295
 80141a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80141a2:	4648      	mov	r0, r9
 80141a4:	f001 fe71 	bl	8015e8a <_Bfree>
 80141a8:	9905      	ldr	r1, [sp, #20]
 80141aa:	4648      	mov	r0, r9
 80141ac:	f001 fe6d 	bl	8015e8a <_Bfree>
 80141b0:	4641      	mov	r1, r8
 80141b2:	4648      	mov	r0, r9
 80141b4:	f001 fe69 	bl	8015e8a <_Bfree>
 80141b8:	4621      	mov	r1, r4
 80141ba:	4648      	mov	r0, r9
 80141bc:	f001 fe65 	bl	8015e8a <_Bfree>
 80141c0:	e619      	b.n	8013df6 <_strtod_l+0x63e>
 80141c2:	f1ba 0f00 	cmp.w	sl, #0
 80141c6:	d11a      	bne.n	80141fe <_strtod_l+0xa46>
 80141c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141cc:	b9eb      	cbnz	r3, 801420a <_strtod_l+0xa52>
 80141ce:	2200      	movs	r2, #0
 80141d0:	4b3f      	ldr	r3, [pc, #252]	; (80142d0 <_strtod_l+0xb18>)
 80141d2:	4630      	mov	r0, r6
 80141d4:	4639      	mov	r1, r7
 80141d6:	f7ec fc99 	bl	8000b0c <__aeabi_dcmplt>
 80141da:	b9c8      	cbnz	r0, 8014210 <_strtod_l+0xa58>
 80141dc:	4630      	mov	r0, r6
 80141de:	4639      	mov	r1, r7
 80141e0:	2200      	movs	r2, #0
 80141e2:	4b3e      	ldr	r3, [pc, #248]	; (80142dc <_strtod_l+0xb24>)
 80141e4:	f7ec fa20 	bl	8000628 <__aeabi_dmul>
 80141e8:	4606      	mov	r6, r0
 80141ea:	460f      	mov	r7, r1
 80141ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80141f0:	9618      	str	r6, [sp, #96]	; 0x60
 80141f2:	9319      	str	r3, [sp, #100]	; 0x64
 80141f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80141f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80141fc:	e79c      	b.n	8014138 <_strtod_l+0x980>
 80141fe:	f1ba 0f01 	cmp.w	sl, #1
 8014202:	d102      	bne.n	801420a <_strtod_l+0xa52>
 8014204:	2d00      	cmp	r5, #0
 8014206:	f43f ad8e 	beq.w	8013d26 <_strtod_l+0x56e>
 801420a:	2200      	movs	r2, #0
 801420c:	4b34      	ldr	r3, [pc, #208]	; (80142e0 <_strtod_l+0xb28>)
 801420e:	e78f      	b.n	8014130 <_strtod_l+0x978>
 8014210:	2600      	movs	r6, #0
 8014212:	4f32      	ldr	r7, [pc, #200]	; (80142dc <_strtod_l+0xb24>)
 8014214:	e7ea      	b.n	80141ec <_strtod_l+0xa34>
 8014216:	4b31      	ldr	r3, [pc, #196]	; (80142dc <_strtod_l+0xb24>)
 8014218:	4630      	mov	r0, r6
 801421a:	4639      	mov	r1, r7
 801421c:	2200      	movs	r2, #0
 801421e:	f7ec fa03 	bl	8000628 <__aeabi_dmul>
 8014222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014224:	4606      	mov	r6, r0
 8014226:	460f      	mov	r7, r1
 8014228:	b933      	cbnz	r3, 8014238 <_strtod_l+0xa80>
 801422a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801422e:	9010      	str	r0, [sp, #64]	; 0x40
 8014230:	9311      	str	r3, [sp, #68]	; 0x44
 8014232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014236:	e7df      	b.n	80141f8 <_strtod_l+0xa40>
 8014238:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801423c:	e7f9      	b.n	8014232 <_strtod_l+0xa7a>
 801423e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014242:	9b04      	ldr	r3, [sp, #16]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d1ab      	bne.n	80141a0 <_strtod_l+0x9e8>
 8014248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801424c:	0d1b      	lsrs	r3, r3, #20
 801424e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014250:	051b      	lsls	r3, r3, #20
 8014252:	429a      	cmp	r2, r3
 8014254:	465d      	mov	r5, fp
 8014256:	d1a3      	bne.n	80141a0 <_strtod_l+0x9e8>
 8014258:	4639      	mov	r1, r7
 801425a:	4630      	mov	r0, r6
 801425c:	f7ec fc94 	bl	8000b88 <__aeabi_d2iz>
 8014260:	f7ec f978 	bl	8000554 <__aeabi_i2d>
 8014264:	460b      	mov	r3, r1
 8014266:	4602      	mov	r2, r0
 8014268:	4639      	mov	r1, r7
 801426a:	4630      	mov	r0, r6
 801426c:	f7ec f824 	bl	80002b8 <__aeabi_dsub>
 8014270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014272:	4606      	mov	r6, r0
 8014274:	460f      	mov	r7, r1
 8014276:	b933      	cbnz	r3, 8014286 <_strtod_l+0xace>
 8014278:	f1ba 0f00 	cmp.w	sl, #0
 801427c:	d103      	bne.n	8014286 <_strtod_l+0xace>
 801427e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014282:	2d00      	cmp	r5, #0
 8014284:	d06d      	beq.n	8014362 <_strtod_l+0xbaa>
 8014286:	a30a      	add	r3, pc, #40	; (adr r3, 80142b0 <_strtod_l+0xaf8>)
 8014288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428c:	4630      	mov	r0, r6
 801428e:	4639      	mov	r1, r7
 8014290:	f7ec fc3c 	bl	8000b0c <__aeabi_dcmplt>
 8014294:	2800      	cmp	r0, #0
 8014296:	f47f acb8 	bne.w	8013c0a <_strtod_l+0x452>
 801429a:	a307      	add	r3, pc, #28	; (adr r3, 80142b8 <_strtod_l+0xb00>)
 801429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a0:	4630      	mov	r0, r6
 80142a2:	4639      	mov	r1, r7
 80142a4:	f7ec fc50 	bl	8000b48 <__aeabi_dcmpgt>
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f43f af79 	beq.w	80141a0 <_strtod_l+0x9e8>
 80142ae:	e4ac      	b.n	8013c0a <_strtod_l+0x452>
 80142b0:	94a03595 	.word	0x94a03595
 80142b4:	3fdfffff 	.word	0x3fdfffff
 80142b8:	35afe535 	.word	0x35afe535
 80142bc:	3fe00000 	.word	0x3fe00000
 80142c0:	000fffff 	.word	0x000fffff
 80142c4:	7ff00000 	.word	0x7ff00000
 80142c8:	7fefffff 	.word	0x7fefffff
 80142cc:	39500000 	.word	0x39500000
 80142d0:	3ff00000 	.word	0x3ff00000
 80142d4:	7fe00000 	.word	0x7fe00000
 80142d8:	7c9fffff 	.word	0x7c9fffff
 80142dc:	3fe00000 	.word	0x3fe00000
 80142e0:	bff00000 	.word	0xbff00000
 80142e4:	9b04      	ldr	r3, [sp, #16]
 80142e6:	b333      	cbz	r3, 8014336 <_strtod_l+0xb7e>
 80142e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80142ee:	d822      	bhi.n	8014336 <_strtod_l+0xb7e>
 80142f0:	a327      	add	r3, pc, #156	; (adr r3, 8014390 <_strtod_l+0xbd8>)
 80142f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f6:	4630      	mov	r0, r6
 80142f8:	4639      	mov	r1, r7
 80142fa:	f7ec fc11 	bl	8000b20 <__aeabi_dcmple>
 80142fe:	b1a0      	cbz	r0, 801432a <_strtod_l+0xb72>
 8014300:	4639      	mov	r1, r7
 8014302:	4630      	mov	r0, r6
 8014304:	f7ec fc68 	bl	8000bd8 <__aeabi_d2uiz>
 8014308:	2800      	cmp	r0, #0
 801430a:	bf08      	it	eq
 801430c:	2001      	moveq	r0, #1
 801430e:	f7ec f911 	bl	8000534 <__aeabi_ui2d>
 8014312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014314:	4606      	mov	r6, r0
 8014316:	460f      	mov	r7, r1
 8014318:	bb03      	cbnz	r3, 801435c <_strtod_l+0xba4>
 801431a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801431e:	9012      	str	r0, [sp, #72]	; 0x48
 8014320:	9313      	str	r3, [sp, #76]	; 0x4c
 8014322:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014326:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801432a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801432c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801432e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014332:	1a9b      	subs	r3, r3, r2
 8014334:	930b      	str	r3, [sp, #44]	; 0x2c
 8014336:	ed9d 0b08 	vldr	d0, [sp, #32]
 801433a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801433e:	f002 f83b 	bl	80163b8 <__ulp>
 8014342:	4650      	mov	r0, sl
 8014344:	ec53 2b10 	vmov	r2, r3, d0
 8014348:	4659      	mov	r1, fp
 801434a:	f7ec f96d 	bl	8000628 <__aeabi_dmul>
 801434e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014352:	f7eb ffb3 	bl	80002bc <__adddf3>
 8014356:	4682      	mov	sl, r0
 8014358:	468b      	mov	fp, r1
 801435a:	e772      	b.n	8014242 <_strtod_l+0xa8a>
 801435c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014360:	e7df      	b.n	8014322 <_strtod_l+0xb6a>
 8014362:	a30d      	add	r3, pc, #52	; (adr r3, 8014398 <_strtod_l+0xbe0>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7ec fbd0 	bl	8000b0c <__aeabi_dcmplt>
 801436c:	e79c      	b.n	80142a8 <_strtod_l+0xaf0>
 801436e:	2300      	movs	r3, #0
 8014370:	930d      	str	r3, [sp, #52]	; 0x34
 8014372:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014376:	6013      	str	r3, [r2, #0]
 8014378:	f7ff ba61 	b.w	801383e <_strtod_l+0x86>
 801437c:	2b65      	cmp	r3, #101	; 0x65
 801437e:	f04f 0200 	mov.w	r2, #0
 8014382:	f43f ab4e 	beq.w	8013a22 <_strtod_l+0x26a>
 8014386:	2101      	movs	r1, #1
 8014388:	4614      	mov	r4, r2
 801438a:	9104      	str	r1, [sp, #16]
 801438c:	f7ff bacb 	b.w	8013926 <_strtod_l+0x16e>
 8014390:	ffc00000 	.word	0xffc00000
 8014394:	41dfffff 	.word	0x41dfffff
 8014398:	94a03595 	.word	0x94a03595
 801439c:	3fcfffff 	.word	0x3fcfffff

080143a0 <_strtod_r>:
 80143a0:	4b05      	ldr	r3, [pc, #20]	; (80143b8 <_strtod_r+0x18>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	b410      	push	{r4}
 80143a6:	6a1b      	ldr	r3, [r3, #32]
 80143a8:	4c04      	ldr	r4, [pc, #16]	; (80143bc <_strtod_r+0x1c>)
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	bf08      	it	eq
 80143ae:	4623      	moveq	r3, r4
 80143b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143b4:	f7ff ba00 	b.w	80137b8 <_strtod_l>
 80143b8:	2000000c 	.word	0x2000000c
 80143bc:	20000070 	.word	0x20000070

080143c0 <_strtol_l.isra.0>:
 80143c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c4:	4680      	mov	r8, r0
 80143c6:	4689      	mov	r9, r1
 80143c8:	4692      	mov	sl, r2
 80143ca:	461e      	mov	r6, r3
 80143cc:	460f      	mov	r7, r1
 80143ce:	463d      	mov	r5, r7
 80143d0:	9808      	ldr	r0, [sp, #32]
 80143d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80143d6:	f001 fc67 	bl	8015ca8 <__locale_ctype_ptr_l>
 80143da:	4420      	add	r0, r4
 80143dc:	7843      	ldrb	r3, [r0, #1]
 80143de:	f013 0308 	ands.w	r3, r3, #8
 80143e2:	d132      	bne.n	801444a <_strtol_l.isra.0+0x8a>
 80143e4:	2c2d      	cmp	r4, #45	; 0x2d
 80143e6:	d132      	bne.n	801444e <_strtol_l.isra.0+0x8e>
 80143e8:	787c      	ldrb	r4, [r7, #1]
 80143ea:	1cbd      	adds	r5, r7, #2
 80143ec:	2201      	movs	r2, #1
 80143ee:	2e00      	cmp	r6, #0
 80143f0:	d05d      	beq.n	80144ae <_strtol_l.isra.0+0xee>
 80143f2:	2e10      	cmp	r6, #16
 80143f4:	d109      	bne.n	801440a <_strtol_l.isra.0+0x4a>
 80143f6:	2c30      	cmp	r4, #48	; 0x30
 80143f8:	d107      	bne.n	801440a <_strtol_l.isra.0+0x4a>
 80143fa:	782b      	ldrb	r3, [r5, #0]
 80143fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014400:	2b58      	cmp	r3, #88	; 0x58
 8014402:	d14f      	bne.n	80144a4 <_strtol_l.isra.0+0xe4>
 8014404:	786c      	ldrb	r4, [r5, #1]
 8014406:	2610      	movs	r6, #16
 8014408:	3502      	adds	r5, #2
 801440a:	2a00      	cmp	r2, #0
 801440c:	bf14      	ite	ne
 801440e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014412:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014416:	2700      	movs	r7, #0
 8014418:	fbb1 fcf6 	udiv	ip, r1, r6
 801441c:	4638      	mov	r0, r7
 801441e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014422:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014426:	2b09      	cmp	r3, #9
 8014428:	d817      	bhi.n	801445a <_strtol_l.isra.0+0x9a>
 801442a:	461c      	mov	r4, r3
 801442c:	42a6      	cmp	r6, r4
 801442e:	dd23      	ble.n	8014478 <_strtol_l.isra.0+0xb8>
 8014430:	1c7b      	adds	r3, r7, #1
 8014432:	d007      	beq.n	8014444 <_strtol_l.isra.0+0x84>
 8014434:	4584      	cmp	ip, r0
 8014436:	d31c      	bcc.n	8014472 <_strtol_l.isra.0+0xb2>
 8014438:	d101      	bne.n	801443e <_strtol_l.isra.0+0x7e>
 801443a:	45a6      	cmp	lr, r4
 801443c:	db19      	blt.n	8014472 <_strtol_l.isra.0+0xb2>
 801443e:	fb00 4006 	mla	r0, r0, r6, r4
 8014442:	2701      	movs	r7, #1
 8014444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014448:	e7eb      	b.n	8014422 <_strtol_l.isra.0+0x62>
 801444a:	462f      	mov	r7, r5
 801444c:	e7bf      	b.n	80143ce <_strtol_l.isra.0+0xe>
 801444e:	2c2b      	cmp	r4, #43	; 0x2b
 8014450:	bf04      	itt	eq
 8014452:	1cbd      	addeq	r5, r7, #2
 8014454:	787c      	ldrbeq	r4, [r7, #1]
 8014456:	461a      	mov	r2, r3
 8014458:	e7c9      	b.n	80143ee <_strtol_l.isra.0+0x2e>
 801445a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801445e:	2b19      	cmp	r3, #25
 8014460:	d801      	bhi.n	8014466 <_strtol_l.isra.0+0xa6>
 8014462:	3c37      	subs	r4, #55	; 0x37
 8014464:	e7e2      	b.n	801442c <_strtol_l.isra.0+0x6c>
 8014466:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801446a:	2b19      	cmp	r3, #25
 801446c:	d804      	bhi.n	8014478 <_strtol_l.isra.0+0xb8>
 801446e:	3c57      	subs	r4, #87	; 0x57
 8014470:	e7dc      	b.n	801442c <_strtol_l.isra.0+0x6c>
 8014472:	f04f 37ff 	mov.w	r7, #4294967295
 8014476:	e7e5      	b.n	8014444 <_strtol_l.isra.0+0x84>
 8014478:	1c7b      	adds	r3, r7, #1
 801447a:	d108      	bne.n	801448e <_strtol_l.isra.0+0xce>
 801447c:	2322      	movs	r3, #34	; 0x22
 801447e:	f8c8 3000 	str.w	r3, [r8]
 8014482:	4608      	mov	r0, r1
 8014484:	f1ba 0f00 	cmp.w	sl, #0
 8014488:	d107      	bne.n	801449a <_strtol_l.isra.0+0xda>
 801448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448e:	b102      	cbz	r2, 8014492 <_strtol_l.isra.0+0xd2>
 8014490:	4240      	negs	r0, r0
 8014492:	f1ba 0f00 	cmp.w	sl, #0
 8014496:	d0f8      	beq.n	801448a <_strtol_l.isra.0+0xca>
 8014498:	b10f      	cbz	r7, 801449e <_strtol_l.isra.0+0xde>
 801449a:	f105 39ff 	add.w	r9, r5, #4294967295
 801449e:	f8ca 9000 	str.w	r9, [sl]
 80144a2:	e7f2      	b.n	801448a <_strtol_l.isra.0+0xca>
 80144a4:	2430      	movs	r4, #48	; 0x30
 80144a6:	2e00      	cmp	r6, #0
 80144a8:	d1af      	bne.n	801440a <_strtol_l.isra.0+0x4a>
 80144aa:	2608      	movs	r6, #8
 80144ac:	e7ad      	b.n	801440a <_strtol_l.isra.0+0x4a>
 80144ae:	2c30      	cmp	r4, #48	; 0x30
 80144b0:	d0a3      	beq.n	80143fa <_strtol_l.isra.0+0x3a>
 80144b2:	260a      	movs	r6, #10
 80144b4:	e7a9      	b.n	801440a <_strtol_l.isra.0+0x4a>
	...

080144b8 <_strtol_r>:
 80144b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144ba:	4c06      	ldr	r4, [pc, #24]	; (80144d4 <_strtol_r+0x1c>)
 80144bc:	4d06      	ldr	r5, [pc, #24]	; (80144d8 <_strtol_r+0x20>)
 80144be:	6824      	ldr	r4, [r4, #0]
 80144c0:	6a24      	ldr	r4, [r4, #32]
 80144c2:	2c00      	cmp	r4, #0
 80144c4:	bf08      	it	eq
 80144c6:	462c      	moveq	r4, r5
 80144c8:	9400      	str	r4, [sp, #0]
 80144ca:	f7ff ff79 	bl	80143c0 <_strtol_l.isra.0>
 80144ce:	b003      	add	sp, #12
 80144d0:	bd30      	pop	{r4, r5, pc}
 80144d2:	bf00      	nop
 80144d4:	2000000c 	.word	0x2000000c
 80144d8:	20000070 	.word	0x20000070

080144dc <_vsiprintf_r>:
 80144dc:	b500      	push	{lr}
 80144de:	b09b      	sub	sp, #108	; 0x6c
 80144e0:	9100      	str	r1, [sp, #0]
 80144e2:	9104      	str	r1, [sp, #16]
 80144e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80144e8:	9105      	str	r1, [sp, #20]
 80144ea:	9102      	str	r1, [sp, #8]
 80144ec:	4905      	ldr	r1, [pc, #20]	; (8014504 <_vsiprintf_r+0x28>)
 80144ee:	9103      	str	r1, [sp, #12]
 80144f0:	4669      	mov	r1, sp
 80144f2:	f002 f9a5 	bl	8016840 <_svfiprintf_r>
 80144f6:	9b00      	ldr	r3, [sp, #0]
 80144f8:	2200      	movs	r2, #0
 80144fa:	701a      	strb	r2, [r3, #0]
 80144fc:	b01b      	add	sp, #108	; 0x6c
 80144fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014502:	bf00      	nop
 8014504:	ffff0208 	.word	0xffff0208

08014508 <vsiprintf>:
 8014508:	4613      	mov	r3, r2
 801450a:	460a      	mov	r2, r1
 801450c:	4601      	mov	r1, r0
 801450e:	4802      	ldr	r0, [pc, #8]	; (8014518 <vsiprintf+0x10>)
 8014510:	6800      	ldr	r0, [r0, #0]
 8014512:	f7ff bfe3 	b.w	80144dc <_vsiprintf_r>
 8014516:	bf00      	nop
 8014518:	2000000c 	.word	0x2000000c

0801451c <__swbuf_r>:
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451e:	460e      	mov	r6, r1
 8014520:	4614      	mov	r4, r2
 8014522:	4605      	mov	r5, r0
 8014524:	b118      	cbz	r0, 801452e <__swbuf_r+0x12>
 8014526:	6983      	ldr	r3, [r0, #24]
 8014528:	b90b      	cbnz	r3, 801452e <__swbuf_r+0x12>
 801452a:	f001 f80d 	bl	8015548 <__sinit>
 801452e:	4b21      	ldr	r3, [pc, #132]	; (80145b4 <__swbuf_r+0x98>)
 8014530:	429c      	cmp	r4, r3
 8014532:	d12a      	bne.n	801458a <__swbuf_r+0x6e>
 8014534:	686c      	ldr	r4, [r5, #4]
 8014536:	69a3      	ldr	r3, [r4, #24]
 8014538:	60a3      	str	r3, [r4, #8]
 801453a:	89a3      	ldrh	r3, [r4, #12]
 801453c:	071a      	lsls	r2, r3, #28
 801453e:	d52e      	bpl.n	801459e <__swbuf_r+0x82>
 8014540:	6923      	ldr	r3, [r4, #16]
 8014542:	b363      	cbz	r3, 801459e <__swbuf_r+0x82>
 8014544:	6923      	ldr	r3, [r4, #16]
 8014546:	6820      	ldr	r0, [r4, #0]
 8014548:	1ac0      	subs	r0, r0, r3
 801454a:	6963      	ldr	r3, [r4, #20]
 801454c:	b2f6      	uxtb	r6, r6
 801454e:	4283      	cmp	r3, r0
 8014550:	4637      	mov	r7, r6
 8014552:	dc04      	bgt.n	801455e <__swbuf_r+0x42>
 8014554:	4621      	mov	r1, r4
 8014556:	4628      	mov	r0, r5
 8014558:	f000 ff8c 	bl	8015474 <_fflush_r>
 801455c:	bb28      	cbnz	r0, 80145aa <__swbuf_r+0x8e>
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	3b01      	subs	r3, #1
 8014562:	60a3      	str	r3, [r4, #8]
 8014564:	6823      	ldr	r3, [r4, #0]
 8014566:	1c5a      	adds	r2, r3, #1
 8014568:	6022      	str	r2, [r4, #0]
 801456a:	701e      	strb	r6, [r3, #0]
 801456c:	6963      	ldr	r3, [r4, #20]
 801456e:	3001      	adds	r0, #1
 8014570:	4283      	cmp	r3, r0
 8014572:	d004      	beq.n	801457e <__swbuf_r+0x62>
 8014574:	89a3      	ldrh	r3, [r4, #12]
 8014576:	07db      	lsls	r3, r3, #31
 8014578:	d519      	bpl.n	80145ae <__swbuf_r+0x92>
 801457a:	2e0a      	cmp	r6, #10
 801457c:	d117      	bne.n	80145ae <__swbuf_r+0x92>
 801457e:	4621      	mov	r1, r4
 8014580:	4628      	mov	r0, r5
 8014582:	f000 ff77 	bl	8015474 <_fflush_r>
 8014586:	b190      	cbz	r0, 80145ae <__swbuf_r+0x92>
 8014588:	e00f      	b.n	80145aa <__swbuf_r+0x8e>
 801458a:	4b0b      	ldr	r3, [pc, #44]	; (80145b8 <__swbuf_r+0x9c>)
 801458c:	429c      	cmp	r4, r3
 801458e:	d101      	bne.n	8014594 <__swbuf_r+0x78>
 8014590:	68ac      	ldr	r4, [r5, #8]
 8014592:	e7d0      	b.n	8014536 <__swbuf_r+0x1a>
 8014594:	4b09      	ldr	r3, [pc, #36]	; (80145bc <__swbuf_r+0xa0>)
 8014596:	429c      	cmp	r4, r3
 8014598:	bf08      	it	eq
 801459a:	68ec      	ldreq	r4, [r5, #12]
 801459c:	e7cb      	b.n	8014536 <__swbuf_r+0x1a>
 801459e:	4621      	mov	r1, r4
 80145a0:	4628      	mov	r0, r5
 80145a2:	f000 f81f 	bl	80145e4 <__swsetup_r>
 80145a6:	2800      	cmp	r0, #0
 80145a8:	d0cc      	beq.n	8014544 <__swbuf_r+0x28>
 80145aa:	f04f 37ff 	mov.w	r7, #4294967295
 80145ae:	4638      	mov	r0, r7
 80145b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145b2:	bf00      	nop
 80145b4:	08017b80 	.word	0x08017b80
 80145b8:	08017ba0 	.word	0x08017ba0
 80145bc:	08017b60 	.word	0x08017b60

080145c0 <_write_r>:
 80145c0:	b538      	push	{r3, r4, r5, lr}
 80145c2:	4c07      	ldr	r4, [pc, #28]	; (80145e0 <_write_r+0x20>)
 80145c4:	4605      	mov	r5, r0
 80145c6:	4608      	mov	r0, r1
 80145c8:	4611      	mov	r1, r2
 80145ca:	2200      	movs	r2, #0
 80145cc:	6022      	str	r2, [r4, #0]
 80145ce:	461a      	mov	r2, r3
 80145d0:	f7ef fb45 	bl	8003c5e <_write>
 80145d4:	1c43      	adds	r3, r0, #1
 80145d6:	d102      	bne.n	80145de <_write_r+0x1e>
 80145d8:	6823      	ldr	r3, [r4, #0]
 80145da:	b103      	cbz	r3, 80145de <_write_r+0x1e>
 80145dc:	602b      	str	r3, [r5, #0]
 80145de:	bd38      	pop	{r3, r4, r5, pc}
 80145e0:	2003b434 	.word	0x2003b434

080145e4 <__swsetup_r>:
 80145e4:	4b32      	ldr	r3, [pc, #200]	; (80146b0 <__swsetup_r+0xcc>)
 80145e6:	b570      	push	{r4, r5, r6, lr}
 80145e8:	681d      	ldr	r5, [r3, #0]
 80145ea:	4606      	mov	r6, r0
 80145ec:	460c      	mov	r4, r1
 80145ee:	b125      	cbz	r5, 80145fa <__swsetup_r+0x16>
 80145f0:	69ab      	ldr	r3, [r5, #24]
 80145f2:	b913      	cbnz	r3, 80145fa <__swsetup_r+0x16>
 80145f4:	4628      	mov	r0, r5
 80145f6:	f000 ffa7 	bl	8015548 <__sinit>
 80145fa:	4b2e      	ldr	r3, [pc, #184]	; (80146b4 <__swsetup_r+0xd0>)
 80145fc:	429c      	cmp	r4, r3
 80145fe:	d10f      	bne.n	8014620 <__swsetup_r+0x3c>
 8014600:	686c      	ldr	r4, [r5, #4]
 8014602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014606:	b29a      	uxth	r2, r3
 8014608:	0715      	lsls	r5, r2, #28
 801460a:	d42c      	bmi.n	8014666 <__swsetup_r+0x82>
 801460c:	06d0      	lsls	r0, r2, #27
 801460e:	d411      	bmi.n	8014634 <__swsetup_r+0x50>
 8014610:	2209      	movs	r2, #9
 8014612:	6032      	str	r2, [r6, #0]
 8014614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014618:	81a3      	strh	r3, [r4, #12]
 801461a:	f04f 30ff 	mov.w	r0, #4294967295
 801461e:	e03e      	b.n	801469e <__swsetup_r+0xba>
 8014620:	4b25      	ldr	r3, [pc, #148]	; (80146b8 <__swsetup_r+0xd4>)
 8014622:	429c      	cmp	r4, r3
 8014624:	d101      	bne.n	801462a <__swsetup_r+0x46>
 8014626:	68ac      	ldr	r4, [r5, #8]
 8014628:	e7eb      	b.n	8014602 <__swsetup_r+0x1e>
 801462a:	4b24      	ldr	r3, [pc, #144]	; (80146bc <__swsetup_r+0xd8>)
 801462c:	429c      	cmp	r4, r3
 801462e:	bf08      	it	eq
 8014630:	68ec      	ldreq	r4, [r5, #12]
 8014632:	e7e6      	b.n	8014602 <__swsetup_r+0x1e>
 8014634:	0751      	lsls	r1, r2, #29
 8014636:	d512      	bpl.n	801465e <__swsetup_r+0x7a>
 8014638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801463a:	b141      	cbz	r1, 801464e <__swsetup_r+0x6a>
 801463c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014640:	4299      	cmp	r1, r3
 8014642:	d002      	beq.n	801464a <__swsetup_r+0x66>
 8014644:	4630      	mov	r0, r6
 8014646:	f001 fff9 	bl	801663c <_free_r>
 801464a:	2300      	movs	r3, #0
 801464c:	6363      	str	r3, [r4, #52]	; 0x34
 801464e:	89a3      	ldrh	r3, [r4, #12]
 8014650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014654:	81a3      	strh	r3, [r4, #12]
 8014656:	2300      	movs	r3, #0
 8014658:	6063      	str	r3, [r4, #4]
 801465a:	6923      	ldr	r3, [r4, #16]
 801465c:	6023      	str	r3, [r4, #0]
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	f043 0308 	orr.w	r3, r3, #8
 8014664:	81a3      	strh	r3, [r4, #12]
 8014666:	6923      	ldr	r3, [r4, #16]
 8014668:	b94b      	cbnz	r3, 801467e <__swsetup_r+0x9a>
 801466a:	89a3      	ldrh	r3, [r4, #12]
 801466c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014674:	d003      	beq.n	801467e <__swsetup_r+0x9a>
 8014676:	4621      	mov	r1, r4
 8014678:	4630      	mov	r0, r6
 801467a:	f001 fb6d 	bl	8015d58 <__smakebuf_r>
 801467e:	89a2      	ldrh	r2, [r4, #12]
 8014680:	f012 0301 	ands.w	r3, r2, #1
 8014684:	d00c      	beq.n	80146a0 <__swsetup_r+0xbc>
 8014686:	2300      	movs	r3, #0
 8014688:	60a3      	str	r3, [r4, #8]
 801468a:	6963      	ldr	r3, [r4, #20]
 801468c:	425b      	negs	r3, r3
 801468e:	61a3      	str	r3, [r4, #24]
 8014690:	6923      	ldr	r3, [r4, #16]
 8014692:	b953      	cbnz	r3, 80146aa <__swsetup_r+0xc6>
 8014694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014698:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801469c:	d1ba      	bne.n	8014614 <__swsetup_r+0x30>
 801469e:	bd70      	pop	{r4, r5, r6, pc}
 80146a0:	0792      	lsls	r2, r2, #30
 80146a2:	bf58      	it	pl
 80146a4:	6963      	ldrpl	r3, [r4, #20]
 80146a6:	60a3      	str	r3, [r4, #8]
 80146a8:	e7f2      	b.n	8014690 <__swsetup_r+0xac>
 80146aa:	2000      	movs	r0, #0
 80146ac:	e7f7      	b.n	801469e <__swsetup_r+0xba>
 80146ae:	bf00      	nop
 80146b0:	2000000c 	.word	0x2000000c
 80146b4:	08017b80 	.word	0x08017b80
 80146b8:	08017ba0 	.word	0x08017ba0
 80146bc:	08017b60 	.word	0x08017b60

080146c0 <_close_r>:
 80146c0:	b538      	push	{r3, r4, r5, lr}
 80146c2:	4c06      	ldr	r4, [pc, #24]	; (80146dc <_close_r+0x1c>)
 80146c4:	2300      	movs	r3, #0
 80146c6:	4605      	mov	r5, r0
 80146c8:	4608      	mov	r0, r1
 80146ca:	6023      	str	r3, [r4, #0]
 80146cc:	f7f1 f9b9 	bl	8005a42 <_close>
 80146d0:	1c43      	adds	r3, r0, #1
 80146d2:	d102      	bne.n	80146da <_close_r+0x1a>
 80146d4:	6823      	ldr	r3, [r4, #0]
 80146d6:	b103      	cbz	r3, 80146da <_close_r+0x1a>
 80146d8:	602b      	str	r3, [r5, #0]
 80146da:	bd38      	pop	{r3, r4, r5, pc}
 80146dc:	2003b434 	.word	0x2003b434

080146e0 <quorem>:
 80146e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e4:	6903      	ldr	r3, [r0, #16]
 80146e6:	690c      	ldr	r4, [r1, #16]
 80146e8:	42a3      	cmp	r3, r4
 80146ea:	4680      	mov	r8, r0
 80146ec:	f2c0 8082 	blt.w	80147f4 <quorem+0x114>
 80146f0:	3c01      	subs	r4, #1
 80146f2:	f101 0714 	add.w	r7, r1, #20
 80146f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80146fa:	f100 0614 	add.w	r6, r0, #20
 80146fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014702:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014706:	eb06 030c 	add.w	r3, r6, ip
 801470a:	3501      	adds	r5, #1
 801470c:	eb07 090c 	add.w	r9, r7, ip
 8014710:	9301      	str	r3, [sp, #4]
 8014712:	fbb0 f5f5 	udiv	r5, r0, r5
 8014716:	b395      	cbz	r5, 801477e <quorem+0x9e>
 8014718:	f04f 0a00 	mov.w	sl, #0
 801471c:	4638      	mov	r0, r7
 801471e:	46b6      	mov	lr, r6
 8014720:	46d3      	mov	fp, sl
 8014722:	f850 2b04 	ldr.w	r2, [r0], #4
 8014726:	b293      	uxth	r3, r2
 8014728:	fb05 a303 	mla	r3, r5, r3, sl
 801472c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014730:	b29b      	uxth	r3, r3
 8014732:	ebab 0303 	sub.w	r3, fp, r3
 8014736:	0c12      	lsrs	r2, r2, #16
 8014738:	f8de b000 	ldr.w	fp, [lr]
 801473c:	fb05 a202 	mla	r2, r5, r2, sl
 8014740:	fa13 f38b 	uxtah	r3, r3, fp
 8014744:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014748:	fa1f fb82 	uxth.w	fp, r2
 801474c:	f8de 2000 	ldr.w	r2, [lr]
 8014750:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014758:	b29b      	uxth	r3, r3
 801475a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801475e:	4581      	cmp	r9, r0
 8014760:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014764:	f84e 3b04 	str.w	r3, [lr], #4
 8014768:	d2db      	bcs.n	8014722 <quorem+0x42>
 801476a:	f856 300c 	ldr.w	r3, [r6, ip]
 801476e:	b933      	cbnz	r3, 801477e <quorem+0x9e>
 8014770:	9b01      	ldr	r3, [sp, #4]
 8014772:	3b04      	subs	r3, #4
 8014774:	429e      	cmp	r6, r3
 8014776:	461a      	mov	r2, r3
 8014778:	d330      	bcc.n	80147dc <quorem+0xfc>
 801477a:	f8c8 4010 	str.w	r4, [r8, #16]
 801477e:	4640      	mov	r0, r8
 8014780:	f001 fda2 	bl	80162c8 <__mcmp>
 8014784:	2800      	cmp	r0, #0
 8014786:	db25      	blt.n	80147d4 <quorem+0xf4>
 8014788:	3501      	adds	r5, #1
 801478a:	4630      	mov	r0, r6
 801478c:	f04f 0c00 	mov.w	ip, #0
 8014790:	f857 2b04 	ldr.w	r2, [r7], #4
 8014794:	f8d0 e000 	ldr.w	lr, [r0]
 8014798:	b293      	uxth	r3, r2
 801479a:	ebac 0303 	sub.w	r3, ip, r3
 801479e:	0c12      	lsrs	r2, r2, #16
 80147a0:	fa13 f38e 	uxtah	r3, r3, lr
 80147a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80147a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147b2:	45b9      	cmp	r9, r7
 80147b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80147b8:	f840 3b04 	str.w	r3, [r0], #4
 80147bc:	d2e8      	bcs.n	8014790 <quorem+0xb0>
 80147be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80147c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80147c6:	b92a      	cbnz	r2, 80147d4 <quorem+0xf4>
 80147c8:	3b04      	subs	r3, #4
 80147ca:	429e      	cmp	r6, r3
 80147cc:	461a      	mov	r2, r3
 80147ce:	d30b      	bcc.n	80147e8 <quorem+0x108>
 80147d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80147d4:	4628      	mov	r0, r5
 80147d6:	b003      	add	sp, #12
 80147d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147dc:	6812      	ldr	r2, [r2, #0]
 80147de:	3b04      	subs	r3, #4
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	d1ca      	bne.n	801477a <quorem+0x9a>
 80147e4:	3c01      	subs	r4, #1
 80147e6:	e7c5      	b.n	8014774 <quorem+0x94>
 80147e8:	6812      	ldr	r2, [r2, #0]
 80147ea:	3b04      	subs	r3, #4
 80147ec:	2a00      	cmp	r2, #0
 80147ee:	d1ef      	bne.n	80147d0 <quorem+0xf0>
 80147f0:	3c01      	subs	r4, #1
 80147f2:	e7ea      	b.n	80147ca <quorem+0xea>
 80147f4:	2000      	movs	r0, #0
 80147f6:	e7ee      	b.n	80147d6 <quorem+0xf6>

080147f8 <_dtoa_r>:
 80147f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147fc:	ec57 6b10 	vmov	r6, r7, d0
 8014800:	b097      	sub	sp, #92	; 0x5c
 8014802:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014804:	9106      	str	r1, [sp, #24]
 8014806:	4604      	mov	r4, r0
 8014808:	920b      	str	r2, [sp, #44]	; 0x2c
 801480a:	9312      	str	r3, [sp, #72]	; 0x48
 801480c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014810:	e9cd 6700 	strd	r6, r7, [sp]
 8014814:	b93d      	cbnz	r5, 8014826 <_dtoa_r+0x2e>
 8014816:	2010      	movs	r0, #16
 8014818:	f001 fade 	bl	8015dd8 <malloc>
 801481c:	6260      	str	r0, [r4, #36]	; 0x24
 801481e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014822:	6005      	str	r5, [r0, #0]
 8014824:	60c5      	str	r5, [r0, #12]
 8014826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	b151      	cbz	r1, 8014842 <_dtoa_r+0x4a>
 801482c:	685a      	ldr	r2, [r3, #4]
 801482e:	604a      	str	r2, [r1, #4]
 8014830:	2301      	movs	r3, #1
 8014832:	4093      	lsls	r3, r2
 8014834:	608b      	str	r3, [r1, #8]
 8014836:	4620      	mov	r0, r4
 8014838:	f001 fb27 	bl	8015e8a <_Bfree>
 801483c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801483e:	2200      	movs	r2, #0
 8014840:	601a      	str	r2, [r3, #0]
 8014842:	1e3b      	subs	r3, r7, #0
 8014844:	bfbb      	ittet	lt
 8014846:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801484a:	9301      	strlt	r3, [sp, #4]
 801484c:	2300      	movge	r3, #0
 801484e:	2201      	movlt	r2, #1
 8014850:	bfac      	ite	ge
 8014852:	f8c8 3000 	strge.w	r3, [r8]
 8014856:	f8c8 2000 	strlt.w	r2, [r8]
 801485a:	4baf      	ldr	r3, [pc, #700]	; (8014b18 <_dtoa_r+0x320>)
 801485c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014860:	ea33 0308 	bics.w	r3, r3, r8
 8014864:	d114      	bne.n	8014890 <_dtoa_r+0x98>
 8014866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014868:	f242 730f 	movw	r3, #9999	; 0x270f
 801486c:	6013      	str	r3, [r2, #0]
 801486e:	9b00      	ldr	r3, [sp, #0]
 8014870:	b923      	cbnz	r3, 801487c <_dtoa_r+0x84>
 8014872:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014876:	2800      	cmp	r0, #0
 8014878:	f000 8542 	beq.w	8015300 <_dtoa_r+0xb08>
 801487c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801487e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014b2c <_dtoa_r+0x334>
 8014882:	2b00      	cmp	r3, #0
 8014884:	f000 8544 	beq.w	8015310 <_dtoa_r+0xb18>
 8014888:	f10b 0303 	add.w	r3, fp, #3
 801488c:	f000 bd3e 	b.w	801530c <_dtoa_r+0xb14>
 8014890:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014894:	2200      	movs	r2, #0
 8014896:	2300      	movs	r3, #0
 8014898:	4630      	mov	r0, r6
 801489a:	4639      	mov	r1, r7
 801489c:	f7ec f92c 	bl	8000af8 <__aeabi_dcmpeq>
 80148a0:	4681      	mov	r9, r0
 80148a2:	b168      	cbz	r0, 80148c0 <_dtoa_r+0xc8>
 80148a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80148a6:	2301      	movs	r3, #1
 80148a8:	6013      	str	r3, [r2, #0]
 80148aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	f000 8524 	beq.w	80152fa <_dtoa_r+0xb02>
 80148b2:	4b9a      	ldr	r3, [pc, #616]	; (8014b1c <_dtoa_r+0x324>)
 80148b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80148ba:	6013      	str	r3, [r2, #0]
 80148bc:	f000 bd28 	b.w	8015310 <_dtoa_r+0xb18>
 80148c0:	aa14      	add	r2, sp, #80	; 0x50
 80148c2:	a915      	add	r1, sp, #84	; 0x54
 80148c4:	ec47 6b10 	vmov	d0, r6, r7
 80148c8:	4620      	mov	r0, r4
 80148ca:	f001 fdeb 	bl	80164a4 <__d2b>
 80148ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80148d2:	9004      	str	r0, [sp, #16]
 80148d4:	2d00      	cmp	r5, #0
 80148d6:	d07c      	beq.n	80149d2 <_dtoa_r+0x1da>
 80148d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80148dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80148e0:	46b2      	mov	sl, r6
 80148e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80148e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80148ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80148ee:	2200      	movs	r2, #0
 80148f0:	4b8b      	ldr	r3, [pc, #556]	; (8014b20 <_dtoa_r+0x328>)
 80148f2:	4650      	mov	r0, sl
 80148f4:	4659      	mov	r1, fp
 80148f6:	f7eb fcdf 	bl	80002b8 <__aeabi_dsub>
 80148fa:	a381      	add	r3, pc, #516	; (adr r3, 8014b00 <_dtoa_r+0x308>)
 80148fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014900:	f7eb fe92 	bl	8000628 <__aeabi_dmul>
 8014904:	a380      	add	r3, pc, #512	; (adr r3, 8014b08 <_dtoa_r+0x310>)
 8014906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490a:	f7eb fcd7 	bl	80002bc <__adddf3>
 801490e:	4606      	mov	r6, r0
 8014910:	4628      	mov	r0, r5
 8014912:	460f      	mov	r7, r1
 8014914:	f7eb fe1e 	bl	8000554 <__aeabi_i2d>
 8014918:	a37d      	add	r3, pc, #500	; (adr r3, 8014b10 <_dtoa_r+0x318>)
 801491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801491e:	f7eb fe83 	bl	8000628 <__aeabi_dmul>
 8014922:	4602      	mov	r2, r0
 8014924:	460b      	mov	r3, r1
 8014926:	4630      	mov	r0, r6
 8014928:	4639      	mov	r1, r7
 801492a:	f7eb fcc7 	bl	80002bc <__adddf3>
 801492e:	4606      	mov	r6, r0
 8014930:	460f      	mov	r7, r1
 8014932:	f7ec f929 	bl	8000b88 <__aeabi_d2iz>
 8014936:	2200      	movs	r2, #0
 8014938:	4682      	mov	sl, r0
 801493a:	2300      	movs	r3, #0
 801493c:	4630      	mov	r0, r6
 801493e:	4639      	mov	r1, r7
 8014940:	f7ec f8e4 	bl	8000b0c <__aeabi_dcmplt>
 8014944:	b148      	cbz	r0, 801495a <_dtoa_r+0x162>
 8014946:	4650      	mov	r0, sl
 8014948:	f7eb fe04 	bl	8000554 <__aeabi_i2d>
 801494c:	4632      	mov	r2, r6
 801494e:	463b      	mov	r3, r7
 8014950:	f7ec f8d2 	bl	8000af8 <__aeabi_dcmpeq>
 8014954:	b908      	cbnz	r0, 801495a <_dtoa_r+0x162>
 8014956:	f10a 3aff 	add.w	sl, sl, #4294967295
 801495a:	f1ba 0f16 	cmp.w	sl, #22
 801495e:	d859      	bhi.n	8014a14 <_dtoa_r+0x21c>
 8014960:	4970      	ldr	r1, [pc, #448]	; (8014b24 <_dtoa_r+0x32c>)
 8014962:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014966:	e9dd 2300 	ldrd	r2, r3, [sp]
 801496a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801496e:	f7ec f8eb 	bl	8000b48 <__aeabi_dcmpgt>
 8014972:	2800      	cmp	r0, #0
 8014974:	d050      	beq.n	8014a18 <_dtoa_r+0x220>
 8014976:	f10a 3aff 	add.w	sl, sl, #4294967295
 801497a:	2300      	movs	r3, #0
 801497c:	930f      	str	r3, [sp, #60]	; 0x3c
 801497e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014980:	1b5d      	subs	r5, r3, r5
 8014982:	f1b5 0801 	subs.w	r8, r5, #1
 8014986:	bf49      	itett	mi
 8014988:	f1c5 0301 	rsbmi	r3, r5, #1
 801498c:	2300      	movpl	r3, #0
 801498e:	9305      	strmi	r3, [sp, #20]
 8014990:	f04f 0800 	movmi.w	r8, #0
 8014994:	bf58      	it	pl
 8014996:	9305      	strpl	r3, [sp, #20]
 8014998:	f1ba 0f00 	cmp.w	sl, #0
 801499c:	db3e      	blt.n	8014a1c <_dtoa_r+0x224>
 801499e:	2300      	movs	r3, #0
 80149a0:	44d0      	add	r8, sl
 80149a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80149a6:	9307      	str	r3, [sp, #28]
 80149a8:	9b06      	ldr	r3, [sp, #24]
 80149aa:	2b09      	cmp	r3, #9
 80149ac:	f200 8090 	bhi.w	8014ad0 <_dtoa_r+0x2d8>
 80149b0:	2b05      	cmp	r3, #5
 80149b2:	bfc4      	itt	gt
 80149b4:	3b04      	subgt	r3, #4
 80149b6:	9306      	strgt	r3, [sp, #24]
 80149b8:	9b06      	ldr	r3, [sp, #24]
 80149ba:	f1a3 0302 	sub.w	r3, r3, #2
 80149be:	bfcc      	ite	gt
 80149c0:	2500      	movgt	r5, #0
 80149c2:	2501      	movle	r5, #1
 80149c4:	2b03      	cmp	r3, #3
 80149c6:	f200 808f 	bhi.w	8014ae8 <_dtoa_r+0x2f0>
 80149ca:	e8df f003 	tbb	[pc, r3]
 80149ce:	7f7d      	.short	0x7f7d
 80149d0:	7131      	.short	0x7131
 80149d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80149d6:	441d      	add	r5, r3
 80149d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80149dc:	2820      	cmp	r0, #32
 80149de:	dd13      	ble.n	8014a08 <_dtoa_r+0x210>
 80149e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80149e4:	9b00      	ldr	r3, [sp, #0]
 80149e6:	fa08 f800 	lsl.w	r8, r8, r0
 80149ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80149ee:	fa23 f000 	lsr.w	r0, r3, r0
 80149f2:	ea48 0000 	orr.w	r0, r8, r0
 80149f6:	f7eb fd9d 	bl	8000534 <__aeabi_ui2d>
 80149fa:	2301      	movs	r3, #1
 80149fc:	4682      	mov	sl, r0
 80149fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014a02:	3d01      	subs	r5, #1
 8014a04:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a06:	e772      	b.n	80148ee <_dtoa_r+0xf6>
 8014a08:	9b00      	ldr	r3, [sp, #0]
 8014a0a:	f1c0 0020 	rsb	r0, r0, #32
 8014a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8014a12:	e7f0      	b.n	80149f6 <_dtoa_r+0x1fe>
 8014a14:	2301      	movs	r3, #1
 8014a16:	e7b1      	b.n	801497c <_dtoa_r+0x184>
 8014a18:	900f      	str	r0, [sp, #60]	; 0x3c
 8014a1a:	e7b0      	b.n	801497e <_dtoa_r+0x186>
 8014a1c:	9b05      	ldr	r3, [sp, #20]
 8014a1e:	eba3 030a 	sub.w	r3, r3, sl
 8014a22:	9305      	str	r3, [sp, #20]
 8014a24:	f1ca 0300 	rsb	r3, sl, #0
 8014a28:	9307      	str	r3, [sp, #28]
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8014a2e:	e7bb      	b.n	80149a8 <_dtoa_r+0x1b0>
 8014a30:	2301      	movs	r3, #1
 8014a32:	930a      	str	r3, [sp, #40]	; 0x28
 8014a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	dd59      	ble.n	8014aee <_dtoa_r+0x2f6>
 8014a3a:	9302      	str	r3, [sp, #8]
 8014a3c:	4699      	mov	r9, r3
 8014a3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014a40:	2200      	movs	r2, #0
 8014a42:	6072      	str	r2, [r6, #4]
 8014a44:	2204      	movs	r2, #4
 8014a46:	f102 0014 	add.w	r0, r2, #20
 8014a4a:	4298      	cmp	r0, r3
 8014a4c:	6871      	ldr	r1, [r6, #4]
 8014a4e:	d953      	bls.n	8014af8 <_dtoa_r+0x300>
 8014a50:	4620      	mov	r0, r4
 8014a52:	f001 f9e6 	bl	8015e22 <_Balloc>
 8014a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a58:	6030      	str	r0, [r6, #0]
 8014a5a:	f1b9 0f0e 	cmp.w	r9, #14
 8014a5e:	f8d3 b000 	ldr.w	fp, [r3]
 8014a62:	f200 80e6 	bhi.w	8014c32 <_dtoa_r+0x43a>
 8014a66:	2d00      	cmp	r5, #0
 8014a68:	f000 80e3 	beq.w	8014c32 <_dtoa_r+0x43a>
 8014a6c:	ed9d 7b00 	vldr	d7, [sp]
 8014a70:	f1ba 0f00 	cmp.w	sl, #0
 8014a74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014a78:	dd74      	ble.n	8014b64 <_dtoa_r+0x36c>
 8014a7a:	4a2a      	ldr	r2, [pc, #168]	; (8014b24 <_dtoa_r+0x32c>)
 8014a7c:	f00a 030f 	and.w	r3, sl, #15
 8014a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014a84:	ed93 7b00 	vldr	d7, [r3]
 8014a88:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014a8c:	06f0      	lsls	r0, r6, #27
 8014a8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014a92:	d565      	bpl.n	8014b60 <_dtoa_r+0x368>
 8014a94:	4b24      	ldr	r3, [pc, #144]	; (8014b28 <_dtoa_r+0x330>)
 8014a96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014a9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014a9e:	f7eb feed 	bl	800087c <__aeabi_ddiv>
 8014aa2:	e9cd 0100 	strd	r0, r1, [sp]
 8014aa6:	f006 060f 	and.w	r6, r6, #15
 8014aaa:	2503      	movs	r5, #3
 8014aac:	4f1e      	ldr	r7, [pc, #120]	; (8014b28 <_dtoa_r+0x330>)
 8014aae:	e04c      	b.n	8014b4a <_dtoa_r+0x352>
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ab6:	4453      	add	r3, sl
 8014ab8:	f103 0901 	add.w	r9, r3, #1
 8014abc:	9302      	str	r3, [sp, #8]
 8014abe:	464b      	mov	r3, r9
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	bfb8      	it	lt
 8014ac4:	2301      	movlt	r3, #1
 8014ac6:	e7ba      	b.n	8014a3e <_dtoa_r+0x246>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	e7b2      	b.n	8014a32 <_dtoa_r+0x23a>
 8014acc:	2300      	movs	r3, #0
 8014ace:	e7f0      	b.n	8014ab2 <_dtoa_r+0x2ba>
 8014ad0:	2501      	movs	r5, #1
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	9306      	str	r3, [sp, #24]
 8014ad6:	950a      	str	r5, [sp, #40]	; 0x28
 8014ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8014adc:	9302      	str	r3, [sp, #8]
 8014ade:	4699      	mov	r9, r3
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2312      	movs	r3, #18
 8014ae4:	920b      	str	r2, [sp, #44]	; 0x2c
 8014ae6:	e7aa      	b.n	8014a3e <_dtoa_r+0x246>
 8014ae8:	2301      	movs	r3, #1
 8014aea:	930a      	str	r3, [sp, #40]	; 0x28
 8014aec:	e7f4      	b.n	8014ad8 <_dtoa_r+0x2e0>
 8014aee:	2301      	movs	r3, #1
 8014af0:	9302      	str	r3, [sp, #8]
 8014af2:	4699      	mov	r9, r3
 8014af4:	461a      	mov	r2, r3
 8014af6:	e7f5      	b.n	8014ae4 <_dtoa_r+0x2ec>
 8014af8:	3101      	adds	r1, #1
 8014afa:	6071      	str	r1, [r6, #4]
 8014afc:	0052      	lsls	r2, r2, #1
 8014afe:	e7a2      	b.n	8014a46 <_dtoa_r+0x24e>
 8014b00:	636f4361 	.word	0x636f4361
 8014b04:	3fd287a7 	.word	0x3fd287a7
 8014b08:	8b60c8b3 	.word	0x8b60c8b3
 8014b0c:	3fc68a28 	.word	0x3fc68a28
 8014b10:	509f79fb 	.word	0x509f79fb
 8014b14:	3fd34413 	.word	0x3fd34413
 8014b18:	7ff00000 	.word	0x7ff00000
 8014b1c:	08017cf4 	.word	0x08017cf4
 8014b20:	3ff80000 	.word	0x3ff80000
 8014b24:	08017bf8 	.word	0x08017bf8
 8014b28:	08017bd0 	.word	0x08017bd0
 8014b2c:	08017b59 	.word	0x08017b59
 8014b30:	07f1      	lsls	r1, r6, #31
 8014b32:	d508      	bpl.n	8014b46 <_dtoa_r+0x34e>
 8014b34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b3c:	f7eb fd74 	bl	8000628 <__aeabi_dmul>
 8014b40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014b44:	3501      	adds	r5, #1
 8014b46:	1076      	asrs	r6, r6, #1
 8014b48:	3708      	adds	r7, #8
 8014b4a:	2e00      	cmp	r6, #0
 8014b4c:	d1f0      	bne.n	8014b30 <_dtoa_r+0x338>
 8014b4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b56:	f7eb fe91 	bl	800087c <__aeabi_ddiv>
 8014b5a:	e9cd 0100 	strd	r0, r1, [sp]
 8014b5e:	e01a      	b.n	8014b96 <_dtoa_r+0x39e>
 8014b60:	2502      	movs	r5, #2
 8014b62:	e7a3      	b.n	8014aac <_dtoa_r+0x2b4>
 8014b64:	f000 80a0 	beq.w	8014ca8 <_dtoa_r+0x4b0>
 8014b68:	f1ca 0600 	rsb	r6, sl, #0
 8014b6c:	4b9f      	ldr	r3, [pc, #636]	; (8014dec <_dtoa_r+0x5f4>)
 8014b6e:	4fa0      	ldr	r7, [pc, #640]	; (8014df0 <_dtoa_r+0x5f8>)
 8014b70:	f006 020f 	and.w	r2, r6, #15
 8014b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014b80:	f7eb fd52 	bl	8000628 <__aeabi_dmul>
 8014b84:	e9cd 0100 	strd	r0, r1, [sp]
 8014b88:	1136      	asrs	r6, r6, #4
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	2502      	movs	r5, #2
 8014b8e:	2e00      	cmp	r6, #0
 8014b90:	d17f      	bne.n	8014c92 <_dtoa_r+0x49a>
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d1e1      	bne.n	8014b5a <_dtoa_r+0x362>
 8014b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	f000 8087 	beq.w	8014cac <_dtoa_r+0x4b4>
 8014b9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	4b93      	ldr	r3, [pc, #588]	; (8014df4 <_dtoa_r+0x5fc>)
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	4639      	mov	r1, r7
 8014baa:	f7eb ffaf 	bl	8000b0c <__aeabi_dcmplt>
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	d07c      	beq.n	8014cac <_dtoa_r+0x4b4>
 8014bb2:	f1b9 0f00 	cmp.w	r9, #0
 8014bb6:	d079      	beq.n	8014cac <_dtoa_r+0x4b4>
 8014bb8:	9b02      	ldr	r3, [sp, #8]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	dd35      	ble.n	8014c2a <_dtoa_r+0x432>
 8014bbe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014bc2:	9308      	str	r3, [sp, #32]
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	4b8b      	ldr	r3, [pc, #556]	; (8014df8 <_dtoa_r+0x600>)
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f7eb fd2c 	bl	8000628 <__aeabi_dmul>
 8014bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8014bd4:	9f02      	ldr	r7, [sp, #8]
 8014bd6:	3501      	adds	r5, #1
 8014bd8:	4628      	mov	r0, r5
 8014bda:	f7eb fcbb 	bl	8000554 <__aeabi_i2d>
 8014bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014be2:	f7eb fd21 	bl	8000628 <__aeabi_dmul>
 8014be6:	2200      	movs	r2, #0
 8014be8:	4b84      	ldr	r3, [pc, #528]	; (8014dfc <_dtoa_r+0x604>)
 8014bea:	f7eb fb67 	bl	80002bc <__adddf3>
 8014bee:	4605      	mov	r5, r0
 8014bf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014bf4:	2f00      	cmp	r7, #0
 8014bf6:	d15d      	bne.n	8014cb4 <_dtoa_r+0x4bc>
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	4b81      	ldr	r3, [pc, #516]	; (8014e00 <_dtoa_r+0x608>)
 8014bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c00:	f7eb fb5a 	bl	80002b8 <__aeabi_dsub>
 8014c04:	462a      	mov	r2, r5
 8014c06:	4633      	mov	r3, r6
 8014c08:	e9cd 0100 	strd	r0, r1, [sp]
 8014c0c:	f7eb ff9c 	bl	8000b48 <__aeabi_dcmpgt>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	f040 8288 	bne.w	8015126 <_dtoa_r+0x92e>
 8014c16:	462a      	mov	r2, r5
 8014c18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c20:	f7eb ff74 	bl	8000b0c <__aeabi_dcmplt>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	f040 827c 	bne.w	8015122 <_dtoa_r+0x92a>
 8014c2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8014c32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f2c0 8150 	blt.w	8014eda <_dtoa_r+0x6e2>
 8014c3a:	f1ba 0f0e 	cmp.w	sl, #14
 8014c3e:	f300 814c 	bgt.w	8014eda <_dtoa_r+0x6e2>
 8014c42:	4b6a      	ldr	r3, [pc, #424]	; (8014dec <_dtoa_r+0x5f4>)
 8014c44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014c48:	ed93 7b00 	vldr	d7, [r3]
 8014c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c54:	f280 80d8 	bge.w	8014e08 <_dtoa_r+0x610>
 8014c58:	f1b9 0f00 	cmp.w	r9, #0
 8014c5c:	f300 80d4 	bgt.w	8014e08 <_dtoa_r+0x610>
 8014c60:	f040 825e 	bne.w	8015120 <_dtoa_r+0x928>
 8014c64:	2200      	movs	r2, #0
 8014c66:	4b66      	ldr	r3, [pc, #408]	; (8014e00 <_dtoa_r+0x608>)
 8014c68:	ec51 0b17 	vmov	r0, r1, d7
 8014c6c:	f7eb fcdc 	bl	8000628 <__aeabi_dmul>
 8014c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c74:	f7eb ff5e 	bl	8000b34 <__aeabi_dcmpge>
 8014c78:	464f      	mov	r7, r9
 8014c7a:	464e      	mov	r6, r9
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	f040 8234 	bne.w	80150ea <_dtoa_r+0x8f2>
 8014c82:	2331      	movs	r3, #49	; 0x31
 8014c84:	f10b 0501 	add.w	r5, fp, #1
 8014c88:	f88b 3000 	strb.w	r3, [fp]
 8014c8c:	f10a 0a01 	add.w	sl, sl, #1
 8014c90:	e22f      	b.n	80150f2 <_dtoa_r+0x8fa>
 8014c92:	07f2      	lsls	r2, r6, #31
 8014c94:	d505      	bpl.n	8014ca2 <_dtoa_r+0x4aa>
 8014c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c9a:	f7eb fcc5 	bl	8000628 <__aeabi_dmul>
 8014c9e:	3501      	adds	r5, #1
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	1076      	asrs	r6, r6, #1
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	e772      	b.n	8014b8e <_dtoa_r+0x396>
 8014ca8:	2502      	movs	r5, #2
 8014caa:	e774      	b.n	8014b96 <_dtoa_r+0x39e>
 8014cac:	f8cd a020 	str.w	sl, [sp, #32]
 8014cb0:	464f      	mov	r7, r9
 8014cb2:	e791      	b.n	8014bd8 <_dtoa_r+0x3e0>
 8014cb4:	4b4d      	ldr	r3, [pc, #308]	; (8014dec <_dtoa_r+0x5f4>)
 8014cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014cba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d047      	beq.n	8014d54 <_dtoa_r+0x55c>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	2000      	movs	r0, #0
 8014cca:	494e      	ldr	r1, [pc, #312]	; (8014e04 <_dtoa_r+0x60c>)
 8014ccc:	f7eb fdd6 	bl	800087c <__aeabi_ddiv>
 8014cd0:	462a      	mov	r2, r5
 8014cd2:	4633      	mov	r3, r6
 8014cd4:	f7eb faf0 	bl	80002b8 <__aeabi_dsub>
 8014cd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014cdc:	465d      	mov	r5, fp
 8014cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ce2:	f7eb ff51 	bl	8000b88 <__aeabi_d2iz>
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	f7eb fc34 	bl	8000554 <__aeabi_i2d>
 8014cec:	4602      	mov	r2, r0
 8014cee:	460b      	mov	r3, r1
 8014cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cf4:	f7eb fae0 	bl	80002b8 <__aeabi_dsub>
 8014cf8:	3630      	adds	r6, #48	; 0x30
 8014cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8014cfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014d02:	e9cd 0100 	strd	r0, r1, [sp]
 8014d06:	f7eb ff01 	bl	8000b0c <__aeabi_dcmplt>
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d163      	bne.n	8014dd6 <_dtoa_r+0x5de>
 8014d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d12:	2000      	movs	r0, #0
 8014d14:	4937      	ldr	r1, [pc, #220]	; (8014df4 <_dtoa_r+0x5fc>)
 8014d16:	f7eb facf 	bl	80002b8 <__aeabi_dsub>
 8014d1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014d1e:	f7eb fef5 	bl	8000b0c <__aeabi_dcmplt>
 8014d22:	2800      	cmp	r0, #0
 8014d24:	f040 80b7 	bne.w	8014e96 <_dtoa_r+0x69e>
 8014d28:	eba5 030b 	sub.w	r3, r5, fp
 8014d2c:	429f      	cmp	r7, r3
 8014d2e:	f77f af7c 	ble.w	8014c2a <_dtoa_r+0x432>
 8014d32:	2200      	movs	r2, #0
 8014d34:	4b30      	ldr	r3, [pc, #192]	; (8014df8 <_dtoa_r+0x600>)
 8014d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d3a:	f7eb fc75 	bl	8000628 <__aeabi_dmul>
 8014d3e:	2200      	movs	r2, #0
 8014d40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014d44:	4b2c      	ldr	r3, [pc, #176]	; (8014df8 <_dtoa_r+0x600>)
 8014d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d4a:	f7eb fc6d 	bl	8000628 <__aeabi_dmul>
 8014d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8014d52:	e7c4      	b.n	8014cde <_dtoa_r+0x4e6>
 8014d54:	462a      	mov	r2, r5
 8014d56:	4633      	mov	r3, r6
 8014d58:	f7eb fc66 	bl	8000628 <__aeabi_dmul>
 8014d5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014d60:	eb0b 0507 	add.w	r5, fp, r7
 8014d64:	465e      	mov	r6, fp
 8014d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d6a:	f7eb ff0d 	bl	8000b88 <__aeabi_d2iz>
 8014d6e:	4607      	mov	r7, r0
 8014d70:	f7eb fbf0 	bl	8000554 <__aeabi_i2d>
 8014d74:	3730      	adds	r7, #48	; 0x30
 8014d76:	4602      	mov	r2, r0
 8014d78:	460b      	mov	r3, r1
 8014d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d7e:	f7eb fa9b 	bl	80002b8 <__aeabi_dsub>
 8014d82:	f806 7b01 	strb.w	r7, [r6], #1
 8014d86:	42ae      	cmp	r6, r5
 8014d88:	e9cd 0100 	strd	r0, r1, [sp]
 8014d8c:	f04f 0200 	mov.w	r2, #0
 8014d90:	d126      	bne.n	8014de0 <_dtoa_r+0x5e8>
 8014d92:	4b1c      	ldr	r3, [pc, #112]	; (8014e04 <_dtoa_r+0x60c>)
 8014d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d98:	f7eb fa90 	bl	80002bc <__adddf3>
 8014d9c:	4602      	mov	r2, r0
 8014d9e:	460b      	mov	r3, r1
 8014da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014da4:	f7eb fed0 	bl	8000b48 <__aeabi_dcmpgt>
 8014da8:	2800      	cmp	r0, #0
 8014daa:	d174      	bne.n	8014e96 <_dtoa_r+0x69e>
 8014dac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014db0:	2000      	movs	r0, #0
 8014db2:	4914      	ldr	r1, [pc, #80]	; (8014e04 <_dtoa_r+0x60c>)
 8014db4:	f7eb fa80 	bl	80002b8 <__aeabi_dsub>
 8014db8:	4602      	mov	r2, r0
 8014dba:	460b      	mov	r3, r1
 8014dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014dc0:	f7eb fea4 	bl	8000b0c <__aeabi_dcmplt>
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	f43f af30 	beq.w	8014c2a <_dtoa_r+0x432>
 8014dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014dce:	2b30      	cmp	r3, #48	; 0x30
 8014dd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8014dd4:	d002      	beq.n	8014ddc <_dtoa_r+0x5e4>
 8014dd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014dda:	e04a      	b.n	8014e72 <_dtoa_r+0x67a>
 8014ddc:	4615      	mov	r5, r2
 8014dde:	e7f4      	b.n	8014dca <_dtoa_r+0x5d2>
 8014de0:	4b05      	ldr	r3, [pc, #20]	; (8014df8 <_dtoa_r+0x600>)
 8014de2:	f7eb fc21 	bl	8000628 <__aeabi_dmul>
 8014de6:	e9cd 0100 	strd	r0, r1, [sp]
 8014dea:	e7bc      	b.n	8014d66 <_dtoa_r+0x56e>
 8014dec:	08017bf8 	.word	0x08017bf8
 8014df0:	08017bd0 	.word	0x08017bd0
 8014df4:	3ff00000 	.word	0x3ff00000
 8014df8:	40240000 	.word	0x40240000
 8014dfc:	401c0000 	.word	0x401c0000
 8014e00:	40140000 	.word	0x40140000
 8014e04:	3fe00000 	.word	0x3fe00000
 8014e08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014e0c:	465d      	mov	r5, fp
 8014e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e12:	4630      	mov	r0, r6
 8014e14:	4639      	mov	r1, r7
 8014e16:	f7eb fd31 	bl	800087c <__aeabi_ddiv>
 8014e1a:	f7eb feb5 	bl	8000b88 <__aeabi_d2iz>
 8014e1e:	4680      	mov	r8, r0
 8014e20:	f7eb fb98 	bl	8000554 <__aeabi_i2d>
 8014e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e28:	f7eb fbfe 	bl	8000628 <__aeabi_dmul>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	460b      	mov	r3, r1
 8014e30:	4630      	mov	r0, r6
 8014e32:	4639      	mov	r1, r7
 8014e34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014e38:	f7eb fa3e 	bl	80002b8 <__aeabi_dsub>
 8014e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8014e40:	eba5 060b 	sub.w	r6, r5, fp
 8014e44:	45b1      	cmp	r9, r6
 8014e46:	4602      	mov	r2, r0
 8014e48:	460b      	mov	r3, r1
 8014e4a:	d139      	bne.n	8014ec0 <_dtoa_r+0x6c8>
 8014e4c:	f7eb fa36 	bl	80002bc <__adddf3>
 8014e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e54:	4606      	mov	r6, r0
 8014e56:	460f      	mov	r7, r1
 8014e58:	f7eb fe76 	bl	8000b48 <__aeabi_dcmpgt>
 8014e5c:	b9c8      	cbnz	r0, 8014e92 <_dtoa_r+0x69a>
 8014e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e62:	4630      	mov	r0, r6
 8014e64:	4639      	mov	r1, r7
 8014e66:	f7eb fe47 	bl	8000af8 <__aeabi_dcmpeq>
 8014e6a:	b110      	cbz	r0, 8014e72 <_dtoa_r+0x67a>
 8014e6c:	f018 0f01 	tst.w	r8, #1
 8014e70:	d10f      	bne.n	8014e92 <_dtoa_r+0x69a>
 8014e72:	9904      	ldr	r1, [sp, #16]
 8014e74:	4620      	mov	r0, r4
 8014e76:	f001 f808 	bl	8015e8a <_Bfree>
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e7e:	702b      	strb	r3, [r5, #0]
 8014e80:	f10a 0301 	add.w	r3, sl, #1
 8014e84:	6013      	str	r3, [r2, #0]
 8014e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	f000 8241 	beq.w	8015310 <_dtoa_r+0xb18>
 8014e8e:	601d      	str	r5, [r3, #0]
 8014e90:	e23e      	b.n	8015310 <_dtoa_r+0xb18>
 8014e92:	f8cd a020 	str.w	sl, [sp, #32]
 8014e96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014e9a:	2a39      	cmp	r2, #57	; 0x39
 8014e9c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014ea0:	d108      	bne.n	8014eb4 <_dtoa_r+0x6bc>
 8014ea2:	459b      	cmp	fp, r3
 8014ea4:	d10a      	bne.n	8014ebc <_dtoa_r+0x6c4>
 8014ea6:	9b08      	ldr	r3, [sp, #32]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	9308      	str	r3, [sp, #32]
 8014eac:	2330      	movs	r3, #48	; 0x30
 8014eae:	f88b 3000 	strb.w	r3, [fp]
 8014eb2:	465b      	mov	r3, fp
 8014eb4:	781a      	ldrb	r2, [r3, #0]
 8014eb6:	3201      	adds	r2, #1
 8014eb8:	701a      	strb	r2, [r3, #0]
 8014eba:	e78c      	b.n	8014dd6 <_dtoa_r+0x5de>
 8014ebc:	461d      	mov	r5, r3
 8014ebe:	e7ea      	b.n	8014e96 <_dtoa_r+0x69e>
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	4b9b      	ldr	r3, [pc, #620]	; (8015130 <_dtoa_r+0x938>)
 8014ec4:	f7eb fbb0 	bl	8000628 <__aeabi_dmul>
 8014ec8:	2200      	movs	r2, #0
 8014eca:	2300      	movs	r3, #0
 8014ecc:	4606      	mov	r6, r0
 8014ece:	460f      	mov	r7, r1
 8014ed0:	f7eb fe12 	bl	8000af8 <__aeabi_dcmpeq>
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d09a      	beq.n	8014e0e <_dtoa_r+0x616>
 8014ed8:	e7cb      	b.n	8014e72 <_dtoa_r+0x67a>
 8014eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014edc:	2a00      	cmp	r2, #0
 8014ede:	f000 808b 	beq.w	8014ff8 <_dtoa_r+0x800>
 8014ee2:	9a06      	ldr	r2, [sp, #24]
 8014ee4:	2a01      	cmp	r2, #1
 8014ee6:	dc6e      	bgt.n	8014fc6 <_dtoa_r+0x7ce>
 8014ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014eea:	2a00      	cmp	r2, #0
 8014eec:	d067      	beq.n	8014fbe <_dtoa_r+0x7c6>
 8014eee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ef2:	9f07      	ldr	r7, [sp, #28]
 8014ef4:	9d05      	ldr	r5, [sp, #20]
 8014ef6:	9a05      	ldr	r2, [sp, #20]
 8014ef8:	2101      	movs	r1, #1
 8014efa:	441a      	add	r2, r3
 8014efc:	4620      	mov	r0, r4
 8014efe:	9205      	str	r2, [sp, #20]
 8014f00:	4498      	add	r8, r3
 8014f02:	f001 f8a0 	bl	8016046 <__i2b>
 8014f06:	4606      	mov	r6, r0
 8014f08:	2d00      	cmp	r5, #0
 8014f0a:	dd0c      	ble.n	8014f26 <_dtoa_r+0x72e>
 8014f0c:	f1b8 0f00 	cmp.w	r8, #0
 8014f10:	dd09      	ble.n	8014f26 <_dtoa_r+0x72e>
 8014f12:	4545      	cmp	r5, r8
 8014f14:	9a05      	ldr	r2, [sp, #20]
 8014f16:	462b      	mov	r3, r5
 8014f18:	bfa8      	it	ge
 8014f1a:	4643      	movge	r3, r8
 8014f1c:	1ad2      	subs	r2, r2, r3
 8014f1e:	9205      	str	r2, [sp, #20]
 8014f20:	1aed      	subs	r5, r5, r3
 8014f22:	eba8 0803 	sub.w	r8, r8, r3
 8014f26:	9b07      	ldr	r3, [sp, #28]
 8014f28:	b1eb      	cbz	r3, 8014f66 <_dtoa_r+0x76e>
 8014f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d067      	beq.n	8015000 <_dtoa_r+0x808>
 8014f30:	b18f      	cbz	r7, 8014f56 <_dtoa_r+0x75e>
 8014f32:	4631      	mov	r1, r6
 8014f34:	463a      	mov	r2, r7
 8014f36:	4620      	mov	r0, r4
 8014f38:	f001 f924 	bl	8016184 <__pow5mult>
 8014f3c:	9a04      	ldr	r2, [sp, #16]
 8014f3e:	4601      	mov	r1, r0
 8014f40:	4606      	mov	r6, r0
 8014f42:	4620      	mov	r0, r4
 8014f44:	f001 f888 	bl	8016058 <__multiply>
 8014f48:	9904      	ldr	r1, [sp, #16]
 8014f4a:	9008      	str	r0, [sp, #32]
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	f000 ff9c 	bl	8015e8a <_Bfree>
 8014f52:	9b08      	ldr	r3, [sp, #32]
 8014f54:	9304      	str	r3, [sp, #16]
 8014f56:	9b07      	ldr	r3, [sp, #28]
 8014f58:	1bda      	subs	r2, r3, r7
 8014f5a:	d004      	beq.n	8014f66 <_dtoa_r+0x76e>
 8014f5c:	9904      	ldr	r1, [sp, #16]
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f001 f910 	bl	8016184 <__pow5mult>
 8014f64:	9004      	str	r0, [sp, #16]
 8014f66:	2101      	movs	r1, #1
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f001 f86c 	bl	8016046 <__i2b>
 8014f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f70:	4607      	mov	r7, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f000 81d0 	beq.w	8015318 <_dtoa_r+0xb20>
 8014f78:	461a      	mov	r2, r3
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f001 f901 	bl	8016184 <__pow5mult>
 8014f82:	9b06      	ldr	r3, [sp, #24]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	4607      	mov	r7, r0
 8014f88:	dc40      	bgt.n	801500c <_dtoa_r+0x814>
 8014f8a:	9b00      	ldr	r3, [sp, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d139      	bne.n	8015004 <_dtoa_r+0x80c>
 8014f90:	9b01      	ldr	r3, [sp, #4]
 8014f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d136      	bne.n	8015008 <_dtoa_r+0x810>
 8014f9a:	9b01      	ldr	r3, [sp, #4]
 8014f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014fa0:	0d1b      	lsrs	r3, r3, #20
 8014fa2:	051b      	lsls	r3, r3, #20
 8014fa4:	b12b      	cbz	r3, 8014fb2 <_dtoa_r+0x7ba>
 8014fa6:	9b05      	ldr	r3, [sp, #20]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	9305      	str	r3, [sp, #20]
 8014fac:	f108 0801 	add.w	r8, r8, #1
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	9307      	str	r3, [sp, #28]
 8014fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d12a      	bne.n	8015010 <_dtoa_r+0x818>
 8014fba:	2001      	movs	r0, #1
 8014fbc:	e030      	b.n	8015020 <_dtoa_r+0x828>
 8014fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fc0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014fc4:	e795      	b.n	8014ef2 <_dtoa_r+0x6fa>
 8014fc6:	9b07      	ldr	r3, [sp, #28]
 8014fc8:	f109 37ff 	add.w	r7, r9, #4294967295
 8014fcc:	42bb      	cmp	r3, r7
 8014fce:	bfbf      	itttt	lt
 8014fd0:	9b07      	ldrlt	r3, [sp, #28]
 8014fd2:	9707      	strlt	r7, [sp, #28]
 8014fd4:	1afa      	sublt	r2, r7, r3
 8014fd6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014fd8:	bfbb      	ittet	lt
 8014fda:	189b      	addlt	r3, r3, r2
 8014fdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014fde:	1bdf      	subge	r7, r3, r7
 8014fe0:	2700      	movlt	r7, #0
 8014fe2:	f1b9 0f00 	cmp.w	r9, #0
 8014fe6:	bfb5      	itete	lt
 8014fe8:	9b05      	ldrlt	r3, [sp, #20]
 8014fea:	9d05      	ldrge	r5, [sp, #20]
 8014fec:	eba3 0509 	sublt.w	r5, r3, r9
 8014ff0:	464b      	movge	r3, r9
 8014ff2:	bfb8      	it	lt
 8014ff4:	2300      	movlt	r3, #0
 8014ff6:	e77e      	b.n	8014ef6 <_dtoa_r+0x6fe>
 8014ff8:	9f07      	ldr	r7, [sp, #28]
 8014ffa:	9d05      	ldr	r5, [sp, #20]
 8014ffc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014ffe:	e783      	b.n	8014f08 <_dtoa_r+0x710>
 8015000:	9a07      	ldr	r2, [sp, #28]
 8015002:	e7ab      	b.n	8014f5c <_dtoa_r+0x764>
 8015004:	2300      	movs	r3, #0
 8015006:	e7d4      	b.n	8014fb2 <_dtoa_r+0x7ba>
 8015008:	9b00      	ldr	r3, [sp, #0]
 801500a:	e7d2      	b.n	8014fb2 <_dtoa_r+0x7ba>
 801500c:	2300      	movs	r3, #0
 801500e:	9307      	str	r3, [sp, #28]
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015016:	6918      	ldr	r0, [r3, #16]
 8015018:	f000 ffc7 	bl	8015faa <__hi0bits>
 801501c:	f1c0 0020 	rsb	r0, r0, #32
 8015020:	4440      	add	r0, r8
 8015022:	f010 001f 	ands.w	r0, r0, #31
 8015026:	d047      	beq.n	80150b8 <_dtoa_r+0x8c0>
 8015028:	f1c0 0320 	rsb	r3, r0, #32
 801502c:	2b04      	cmp	r3, #4
 801502e:	dd3b      	ble.n	80150a8 <_dtoa_r+0x8b0>
 8015030:	9b05      	ldr	r3, [sp, #20]
 8015032:	f1c0 001c 	rsb	r0, r0, #28
 8015036:	4403      	add	r3, r0
 8015038:	9305      	str	r3, [sp, #20]
 801503a:	4405      	add	r5, r0
 801503c:	4480      	add	r8, r0
 801503e:	9b05      	ldr	r3, [sp, #20]
 8015040:	2b00      	cmp	r3, #0
 8015042:	dd05      	ble.n	8015050 <_dtoa_r+0x858>
 8015044:	461a      	mov	r2, r3
 8015046:	9904      	ldr	r1, [sp, #16]
 8015048:	4620      	mov	r0, r4
 801504a:	f001 f8e9 	bl	8016220 <__lshift>
 801504e:	9004      	str	r0, [sp, #16]
 8015050:	f1b8 0f00 	cmp.w	r8, #0
 8015054:	dd05      	ble.n	8015062 <_dtoa_r+0x86a>
 8015056:	4639      	mov	r1, r7
 8015058:	4642      	mov	r2, r8
 801505a:	4620      	mov	r0, r4
 801505c:	f001 f8e0 	bl	8016220 <__lshift>
 8015060:	4607      	mov	r7, r0
 8015062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015064:	b353      	cbz	r3, 80150bc <_dtoa_r+0x8c4>
 8015066:	4639      	mov	r1, r7
 8015068:	9804      	ldr	r0, [sp, #16]
 801506a:	f001 f92d 	bl	80162c8 <__mcmp>
 801506e:	2800      	cmp	r0, #0
 8015070:	da24      	bge.n	80150bc <_dtoa_r+0x8c4>
 8015072:	2300      	movs	r3, #0
 8015074:	220a      	movs	r2, #10
 8015076:	9904      	ldr	r1, [sp, #16]
 8015078:	4620      	mov	r0, r4
 801507a:	f000 ff1d 	bl	8015eb8 <__multadd>
 801507e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015080:	9004      	str	r0, [sp, #16]
 8015082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015086:	2b00      	cmp	r3, #0
 8015088:	f000 814d 	beq.w	8015326 <_dtoa_r+0xb2e>
 801508c:	2300      	movs	r3, #0
 801508e:	4631      	mov	r1, r6
 8015090:	220a      	movs	r2, #10
 8015092:	4620      	mov	r0, r4
 8015094:	f000 ff10 	bl	8015eb8 <__multadd>
 8015098:	9b02      	ldr	r3, [sp, #8]
 801509a:	2b00      	cmp	r3, #0
 801509c:	4606      	mov	r6, r0
 801509e:	dc4f      	bgt.n	8015140 <_dtoa_r+0x948>
 80150a0:	9b06      	ldr	r3, [sp, #24]
 80150a2:	2b02      	cmp	r3, #2
 80150a4:	dd4c      	ble.n	8015140 <_dtoa_r+0x948>
 80150a6:	e011      	b.n	80150cc <_dtoa_r+0x8d4>
 80150a8:	d0c9      	beq.n	801503e <_dtoa_r+0x846>
 80150aa:	9a05      	ldr	r2, [sp, #20]
 80150ac:	331c      	adds	r3, #28
 80150ae:	441a      	add	r2, r3
 80150b0:	9205      	str	r2, [sp, #20]
 80150b2:	441d      	add	r5, r3
 80150b4:	4498      	add	r8, r3
 80150b6:	e7c2      	b.n	801503e <_dtoa_r+0x846>
 80150b8:	4603      	mov	r3, r0
 80150ba:	e7f6      	b.n	80150aa <_dtoa_r+0x8b2>
 80150bc:	f1b9 0f00 	cmp.w	r9, #0
 80150c0:	dc38      	bgt.n	8015134 <_dtoa_r+0x93c>
 80150c2:	9b06      	ldr	r3, [sp, #24]
 80150c4:	2b02      	cmp	r3, #2
 80150c6:	dd35      	ble.n	8015134 <_dtoa_r+0x93c>
 80150c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80150cc:	9b02      	ldr	r3, [sp, #8]
 80150ce:	b963      	cbnz	r3, 80150ea <_dtoa_r+0x8f2>
 80150d0:	4639      	mov	r1, r7
 80150d2:	2205      	movs	r2, #5
 80150d4:	4620      	mov	r0, r4
 80150d6:	f000 feef 	bl	8015eb8 <__multadd>
 80150da:	4601      	mov	r1, r0
 80150dc:	4607      	mov	r7, r0
 80150de:	9804      	ldr	r0, [sp, #16]
 80150e0:	f001 f8f2 	bl	80162c8 <__mcmp>
 80150e4:	2800      	cmp	r0, #0
 80150e6:	f73f adcc 	bgt.w	8014c82 <_dtoa_r+0x48a>
 80150ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150ec:	465d      	mov	r5, fp
 80150ee:	ea6f 0a03 	mvn.w	sl, r3
 80150f2:	f04f 0900 	mov.w	r9, #0
 80150f6:	4639      	mov	r1, r7
 80150f8:	4620      	mov	r0, r4
 80150fa:	f000 fec6 	bl	8015e8a <_Bfree>
 80150fe:	2e00      	cmp	r6, #0
 8015100:	f43f aeb7 	beq.w	8014e72 <_dtoa_r+0x67a>
 8015104:	f1b9 0f00 	cmp.w	r9, #0
 8015108:	d005      	beq.n	8015116 <_dtoa_r+0x91e>
 801510a:	45b1      	cmp	r9, r6
 801510c:	d003      	beq.n	8015116 <_dtoa_r+0x91e>
 801510e:	4649      	mov	r1, r9
 8015110:	4620      	mov	r0, r4
 8015112:	f000 feba 	bl	8015e8a <_Bfree>
 8015116:	4631      	mov	r1, r6
 8015118:	4620      	mov	r0, r4
 801511a:	f000 feb6 	bl	8015e8a <_Bfree>
 801511e:	e6a8      	b.n	8014e72 <_dtoa_r+0x67a>
 8015120:	2700      	movs	r7, #0
 8015122:	463e      	mov	r6, r7
 8015124:	e7e1      	b.n	80150ea <_dtoa_r+0x8f2>
 8015126:	f8dd a020 	ldr.w	sl, [sp, #32]
 801512a:	463e      	mov	r6, r7
 801512c:	e5a9      	b.n	8014c82 <_dtoa_r+0x48a>
 801512e:	bf00      	nop
 8015130:	40240000 	.word	0x40240000
 8015134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015136:	f8cd 9008 	str.w	r9, [sp, #8]
 801513a:	2b00      	cmp	r3, #0
 801513c:	f000 80fa 	beq.w	8015334 <_dtoa_r+0xb3c>
 8015140:	2d00      	cmp	r5, #0
 8015142:	dd05      	ble.n	8015150 <_dtoa_r+0x958>
 8015144:	4631      	mov	r1, r6
 8015146:	462a      	mov	r2, r5
 8015148:	4620      	mov	r0, r4
 801514a:	f001 f869 	bl	8016220 <__lshift>
 801514e:	4606      	mov	r6, r0
 8015150:	9b07      	ldr	r3, [sp, #28]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d04c      	beq.n	80151f0 <_dtoa_r+0x9f8>
 8015156:	6871      	ldr	r1, [r6, #4]
 8015158:	4620      	mov	r0, r4
 801515a:	f000 fe62 	bl	8015e22 <_Balloc>
 801515e:	6932      	ldr	r2, [r6, #16]
 8015160:	3202      	adds	r2, #2
 8015162:	4605      	mov	r5, r0
 8015164:	0092      	lsls	r2, r2, #2
 8015166:	f106 010c 	add.w	r1, r6, #12
 801516a:	300c      	adds	r0, #12
 801516c:	f000 fe4e 	bl	8015e0c <memcpy>
 8015170:	2201      	movs	r2, #1
 8015172:	4629      	mov	r1, r5
 8015174:	4620      	mov	r0, r4
 8015176:	f001 f853 	bl	8016220 <__lshift>
 801517a:	9b00      	ldr	r3, [sp, #0]
 801517c:	f8cd b014 	str.w	fp, [sp, #20]
 8015180:	f003 0301 	and.w	r3, r3, #1
 8015184:	46b1      	mov	r9, r6
 8015186:	9307      	str	r3, [sp, #28]
 8015188:	4606      	mov	r6, r0
 801518a:	4639      	mov	r1, r7
 801518c:	9804      	ldr	r0, [sp, #16]
 801518e:	f7ff faa7 	bl	80146e0 <quorem>
 8015192:	4649      	mov	r1, r9
 8015194:	4605      	mov	r5, r0
 8015196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801519a:	9804      	ldr	r0, [sp, #16]
 801519c:	f001 f894 	bl	80162c8 <__mcmp>
 80151a0:	4632      	mov	r2, r6
 80151a2:	9000      	str	r0, [sp, #0]
 80151a4:	4639      	mov	r1, r7
 80151a6:	4620      	mov	r0, r4
 80151a8:	f001 f8a8 	bl	80162fc <__mdiff>
 80151ac:	68c3      	ldr	r3, [r0, #12]
 80151ae:	4602      	mov	r2, r0
 80151b0:	bb03      	cbnz	r3, 80151f4 <_dtoa_r+0x9fc>
 80151b2:	4601      	mov	r1, r0
 80151b4:	9008      	str	r0, [sp, #32]
 80151b6:	9804      	ldr	r0, [sp, #16]
 80151b8:	f001 f886 	bl	80162c8 <__mcmp>
 80151bc:	9a08      	ldr	r2, [sp, #32]
 80151be:	4603      	mov	r3, r0
 80151c0:	4611      	mov	r1, r2
 80151c2:	4620      	mov	r0, r4
 80151c4:	9308      	str	r3, [sp, #32]
 80151c6:	f000 fe60 	bl	8015e8a <_Bfree>
 80151ca:	9b08      	ldr	r3, [sp, #32]
 80151cc:	b9a3      	cbnz	r3, 80151f8 <_dtoa_r+0xa00>
 80151ce:	9a06      	ldr	r2, [sp, #24]
 80151d0:	b992      	cbnz	r2, 80151f8 <_dtoa_r+0xa00>
 80151d2:	9a07      	ldr	r2, [sp, #28]
 80151d4:	b982      	cbnz	r2, 80151f8 <_dtoa_r+0xa00>
 80151d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80151da:	d029      	beq.n	8015230 <_dtoa_r+0xa38>
 80151dc:	9b00      	ldr	r3, [sp, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	dd01      	ble.n	80151e6 <_dtoa_r+0x9ee>
 80151e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80151e6:	9b05      	ldr	r3, [sp, #20]
 80151e8:	1c5d      	adds	r5, r3, #1
 80151ea:	f883 8000 	strb.w	r8, [r3]
 80151ee:	e782      	b.n	80150f6 <_dtoa_r+0x8fe>
 80151f0:	4630      	mov	r0, r6
 80151f2:	e7c2      	b.n	801517a <_dtoa_r+0x982>
 80151f4:	2301      	movs	r3, #1
 80151f6:	e7e3      	b.n	80151c0 <_dtoa_r+0x9c8>
 80151f8:	9a00      	ldr	r2, [sp, #0]
 80151fa:	2a00      	cmp	r2, #0
 80151fc:	db04      	blt.n	8015208 <_dtoa_r+0xa10>
 80151fe:	d125      	bne.n	801524c <_dtoa_r+0xa54>
 8015200:	9a06      	ldr	r2, [sp, #24]
 8015202:	bb1a      	cbnz	r2, 801524c <_dtoa_r+0xa54>
 8015204:	9a07      	ldr	r2, [sp, #28]
 8015206:	bb0a      	cbnz	r2, 801524c <_dtoa_r+0xa54>
 8015208:	2b00      	cmp	r3, #0
 801520a:	ddec      	ble.n	80151e6 <_dtoa_r+0x9ee>
 801520c:	2201      	movs	r2, #1
 801520e:	9904      	ldr	r1, [sp, #16]
 8015210:	4620      	mov	r0, r4
 8015212:	f001 f805 	bl	8016220 <__lshift>
 8015216:	4639      	mov	r1, r7
 8015218:	9004      	str	r0, [sp, #16]
 801521a:	f001 f855 	bl	80162c8 <__mcmp>
 801521e:	2800      	cmp	r0, #0
 8015220:	dc03      	bgt.n	801522a <_dtoa_r+0xa32>
 8015222:	d1e0      	bne.n	80151e6 <_dtoa_r+0x9ee>
 8015224:	f018 0f01 	tst.w	r8, #1
 8015228:	d0dd      	beq.n	80151e6 <_dtoa_r+0x9ee>
 801522a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801522e:	d1d8      	bne.n	80151e2 <_dtoa_r+0x9ea>
 8015230:	9b05      	ldr	r3, [sp, #20]
 8015232:	9a05      	ldr	r2, [sp, #20]
 8015234:	1c5d      	adds	r5, r3, #1
 8015236:	2339      	movs	r3, #57	; 0x39
 8015238:	7013      	strb	r3, [r2, #0]
 801523a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801523e:	2b39      	cmp	r3, #57	; 0x39
 8015240:	f105 32ff 	add.w	r2, r5, #4294967295
 8015244:	d04f      	beq.n	80152e6 <_dtoa_r+0xaee>
 8015246:	3301      	adds	r3, #1
 8015248:	7013      	strb	r3, [r2, #0]
 801524a:	e754      	b.n	80150f6 <_dtoa_r+0x8fe>
 801524c:	9a05      	ldr	r2, [sp, #20]
 801524e:	2b00      	cmp	r3, #0
 8015250:	f102 0501 	add.w	r5, r2, #1
 8015254:	dd06      	ble.n	8015264 <_dtoa_r+0xa6c>
 8015256:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801525a:	d0e9      	beq.n	8015230 <_dtoa_r+0xa38>
 801525c:	f108 0801 	add.w	r8, r8, #1
 8015260:	9b05      	ldr	r3, [sp, #20]
 8015262:	e7c2      	b.n	80151ea <_dtoa_r+0x9f2>
 8015264:	9a02      	ldr	r2, [sp, #8]
 8015266:	f805 8c01 	strb.w	r8, [r5, #-1]
 801526a:	eba5 030b 	sub.w	r3, r5, fp
 801526e:	4293      	cmp	r3, r2
 8015270:	d021      	beq.n	80152b6 <_dtoa_r+0xabe>
 8015272:	2300      	movs	r3, #0
 8015274:	220a      	movs	r2, #10
 8015276:	9904      	ldr	r1, [sp, #16]
 8015278:	4620      	mov	r0, r4
 801527a:	f000 fe1d 	bl	8015eb8 <__multadd>
 801527e:	45b1      	cmp	r9, r6
 8015280:	9004      	str	r0, [sp, #16]
 8015282:	f04f 0300 	mov.w	r3, #0
 8015286:	f04f 020a 	mov.w	r2, #10
 801528a:	4649      	mov	r1, r9
 801528c:	4620      	mov	r0, r4
 801528e:	d105      	bne.n	801529c <_dtoa_r+0xaa4>
 8015290:	f000 fe12 	bl	8015eb8 <__multadd>
 8015294:	4681      	mov	r9, r0
 8015296:	4606      	mov	r6, r0
 8015298:	9505      	str	r5, [sp, #20]
 801529a:	e776      	b.n	801518a <_dtoa_r+0x992>
 801529c:	f000 fe0c 	bl	8015eb8 <__multadd>
 80152a0:	4631      	mov	r1, r6
 80152a2:	4681      	mov	r9, r0
 80152a4:	2300      	movs	r3, #0
 80152a6:	220a      	movs	r2, #10
 80152a8:	4620      	mov	r0, r4
 80152aa:	f000 fe05 	bl	8015eb8 <__multadd>
 80152ae:	4606      	mov	r6, r0
 80152b0:	e7f2      	b.n	8015298 <_dtoa_r+0xaa0>
 80152b2:	f04f 0900 	mov.w	r9, #0
 80152b6:	2201      	movs	r2, #1
 80152b8:	9904      	ldr	r1, [sp, #16]
 80152ba:	4620      	mov	r0, r4
 80152bc:	f000 ffb0 	bl	8016220 <__lshift>
 80152c0:	4639      	mov	r1, r7
 80152c2:	9004      	str	r0, [sp, #16]
 80152c4:	f001 f800 	bl	80162c8 <__mcmp>
 80152c8:	2800      	cmp	r0, #0
 80152ca:	dcb6      	bgt.n	801523a <_dtoa_r+0xa42>
 80152cc:	d102      	bne.n	80152d4 <_dtoa_r+0xadc>
 80152ce:	f018 0f01 	tst.w	r8, #1
 80152d2:	d1b2      	bne.n	801523a <_dtoa_r+0xa42>
 80152d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80152d8:	2b30      	cmp	r3, #48	; 0x30
 80152da:	f105 32ff 	add.w	r2, r5, #4294967295
 80152de:	f47f af0a 	bne.w	80150f6 <_dtoa_r+0x8fe>
 80152e2:	4615      	mov	r5, r2
 80152e4:	e7f6      	b.n	80152d4 <_dtoa_r+0xadc>
 80152e6:	4593      	cmp	fp, r2
 80152e8:	d105      	bne.n	80152f6 <_dtoa_r+0xafe>
 80152ea:	2331      	movs	r3, #49	; 0x31
 80152ec:	f10a 0a01 	add.w	sl, sl, #1
 80152f0:	f88b 3000 	strb.w	r3, [fp]
 80152f4:	e6ff      	b.n	80150f6 <_dtoa_r+0x8fe>
 80152f6:	4615      	mov	r5, r2
 80152f8:	e79f      	b.n	801523a <_dtoa_r+0xa42>
 80152fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015360 <_dtoa_r+0xb68>
 80152fe:	e007      	b.n	8015310 <_dtoa_r+0xb18>
 8015300:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015302:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015364 <_dtoa_r+0xb6c>
 8015306:	b11b      	cbz	r3, 8015310 <_dtoa_r+0xb18>
 8015308:	f10b 0308 	add.w	r3, fp, #8
 801530c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801530e:	6013      	str	r3, [r2, #0]
 8015310:	4658      	mov	r0, fp
 8015312:	b017      	add	sp, #92	; 0x5c
 8015314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015318:	9b06      	ldr	r3, [sp, #24]
 801531a:	2b01      	cmp	r3, #1
 801531c:	f77f ae35 	ble.w	8014f8a <_dtoa_r+0x792>
 8015320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015322:	9307      	str	r3, [sp, #28]
 8015324:	e649      	b.n	8014fba <_dtoa_r+0x7c2>
 8015326:	9b02      	ldr	r3, [sp, #8]
 8015328:	2b00      	cmp	r3, #0
 801532a:	dc03      	bgt.n	8015334 <_dtoa_r+0xb3c>
 801532c:	9b06      	ldr	r3, [sp, #24]
 801532e:	2b02      	cmp	r3, #2
 8015330:	f73f aecc 	bgt.w	80150cc <_dtoa_r+0x8d4>
 8015334:	465d      	mov	r5, fp
 8015336:	4639      	mov	r1, r7
 8015338:	9804      	ldr	r0, [sp, #16]
 801533a:	f7ff f9d1 	bl	80146e0 <quorem>
 801533e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015342:	f805 8b01 	strb.w	r8, [r5], #1
 8015346:	9a02      	ldr	r2, [sp, #8]
 8015348:	eba5 030b 	sub.w	r3, r5, fp
 801534c:	429a      	cmp	r2, r3
 801534e:	ddb0      	ble.n	80152b2 <_dtoa_r+0xaba>
 8015350:	2300      	movs	r3, #0
 8015352:	220a      	movs	r2, #10
 8015354:	9904      	ldr	r1, [sp, #16]
 8015356:	4620      	mov	r0, r4
 8015358:	f000 fdae 	bl	8015eb8 <__multadd>
 801535c:	9004      	str	r0, [sp, #16]
 801535e:	e7ea      	b.n	8015336 <_dtoa_r+0xb3e>
 8015360:	08017cf3 	.word	0x08017cf3
 8015364:	08017b50 	.word	0x08017b50

08015368 <__sflush_r>:
 8015368:	898a      	ldrh	r2, [r1, #12]
 801536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536e:	4605      	mov	r5, r0
 8015370:	0710      	lsls	r0, r2, #28
 8015372:	460c      	mov	r4, r1
 8015374:	d458      	bmi.n	8015428 <__sflush_r+0xc0>
 8015376:	684b      	ldr	r3, [r1, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	dc05      	bgt.n	8015388 <__sflush_r+0x20>
 801537c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801537e:	2b00      	cmp	r3, #0
 8015380:	dc02      	bgt.n	8015388 <__sflush_r+0x20>
 8015382:	2000      	movs	r0, #0
 8015384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801538a:	2e00      	cmp	r6, #0
 801538c:	d0f9      	beq.n	8015382 <__sflush_r+0x1a>
 801538e:	2300      	movs	r3, #0
 8015390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015394:	682f      	ldr	r7, [r5, #0]
 8015396:	6a21      	ldr	r1, [r4, #32]
 8015398:	602b      	str	r3, [r5, #0]
 801539a:	d032      	beq.n	8015402 <__sflush_r+0x9a>
 801539c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801539e:	89a3      	ldrh	r3, [r4, #12]
 80153a0:	075a      	lsls	r2, r3, #29
 80153a2:	d505      	bpl.n	80153b0 <__sflush_r+0x48>
 80153a4:	6863      	ldr	r3, [r4, #4]
 80153a6:	1ac0      	subs	r0, r0, r3
 80153a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80153aa:	b10b      	cbz	r3, 80153b0 <__sflush_r+0x48>
 80153ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80153ae:	1ac0      	subs	r0, r0, r3
 80153b0:	2300      	movs	r3, #0
 80153b2:	4602      	mov	r2, r0
 80153b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153b6:	6a21      	ldr	r1, [r4, #32]
 80153b8:	4628      	mov	r0, r5
 80153ba:	47b0      	blx	r6
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	89a3      	ldrh	r3, [r4, #12]
 80153c0:	d106      	bne.n	80153d0 <__sflush_r+0x68>
 80153c2:	6829      	ldr	r1, [r5, #0]
 80153c4:	291d      	cmp	r1, #29
 80153c6:	d848      	bhi.n	801545a <__sflush_r+0xf2>
 80153c8:	4a29      	ldr	r2, [pc, #164]	; (8015470 <__sflush_r+0x108>)
 80153ca:	40ca      	lsrs	r2, r1
 80153cc:	07d6      	lsls	r6, r2, #31
 80153ce:	d544      	bpl.n	801545a <__sflush_r+0xf2>
 80153d0:	2200      	movs	r2, #0
 80153d2:	6062      	str	r2, [r4, #4]
 80153d4:	04d9      	lsls	r1, r3, #19
 80153d6:	6922      	ldr	r2, [r4, #16]
 80153d8:	6022      	str	r2, [r4, #0]
 80153da:	d504      	bpl.n	80153e6 <__sflush_r+0x7e>
 80153dc:	1c42      	adds	r2, r0, #1
 80153de:	d101      	bne.n	80153e4 <__sflush_r+0x7c>
 80153e0:	682b      	ldr	r3, [r5, #0]
 80153e2:	b903      	cbnz	r3, 80153e6 <__sflush_r+0x7e>
 80153e4:	6560      	str	r0, [r4, #84]	; 0x54
 80153e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153e8:	602f      	str	r7, [r5, #0]
 80153ea:	2900      	cmp	r1, #0
 80153ec:	d0c9      	beq.n	8015382 <__sflush_r+0x1a>
 80153ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153f2:	4299      	cmp	r1, r3
 80153f4:	d002      	beq.n	80153fc <__sflush_r+0x94>
 80153f6:	4628      	mov	r0, r5
 80153f8:	f001 f920 	bl	801663c <_free_r>
 80153fc:	2000      	movs	r0, #0
 80153fe:	6360      	str	r0, [r4, #52]	; 0x34
 8015400:	e7c0      	b.n	8015384 <__sflush_r+0x1c>
 8015402:	2301      	movs	r3, #1
 8015404:	4628      	mov	r0, r5
 8015406:	47b0      	blx	r6
 8015408:	1c41      	adds	r1, r0, #1
 801540a:	d1c8      	bne.n	801539e <__sflush_r+0x36>
 801540c:	682b      	ldr	r3, [r5, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d0c5      	beq.n	801539e <__sflush_r+0x36>
 8015412:	2b1d      	cmp	r3, #29
 8015414:	d001      	beq.n	801541a <__sflush_r+0xb2>
 8015416:	2b16      	cmp	r3, #22
 8015418:	d101      	bne.n	801541e <__sflush_r+0xb6>
 801541a:	602f      	str	r7, [r5, #0]
 801541c:	e7b1      	b.n	8015382 <__sflush_r+0x1a>
 801541e:	89a3      	ldrh	r3, [r4, #12]
 8015420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015424:	81a3      	strh	r3, [r4, #12]
 8015426:	e7ad      	b.n	8015384 <__sflush_r+0x1c>
 8015428:	690f      	ldr	r7, [r1, #16]
 801542a:	2f00      	cmp	r7, #0
 801542c:	d0a9      	beq.n	8015382 <__sflush_r+0x1a>
 801542e:	0793      	lsls	r3, r2, #30
 8015430:	680e      	ldr	r6, [r1, #0]
 8015432:	bf08      	it	eq
 8015434:	694b      	ldreq	r3, [r1, #20]
 8015436:	600f      	str	r7, [r1, #0]
 8015438:	bf18      	it	ne
 801543a:	2300      	movne	r3, #0
 801543c:	eba6 0807 	sub.w	r8, r6, r7
 8015440:	608b      	str	r3, [r1, #8]
 8015442:	f1b8 0f00 	cmp.w	r8, #0
 8015446:	dd9c      	ble.n	8015382 <__sflush_r+0x1a>
 8015448:	4643      	mov	r3, r8
 801544a:	463a      	mov	r2, r7
 801544c:	6a21      	ldr	r1, [r4, #32]
 801544e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015450:	4628      	mov	r0, r5
 8015452:	47b0      	blx	r6
 8015454:	2800      	cmp	r0, #0
 8015456:	dc06      	bgt.n	8015466 <__sflush_r+0xfe>
 8015458:	89a3      	ldrh	r3, [r4, #12]
 801545a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801545e:	81a3      	strh	r3, [r4, #12]
 8015460:	f04f 30ff 	mov.w	r0, #4294967295
 8015464:	e78e      	b.n	8015384 <__sflush_r+0x1c>
 8015466:	4407      	add	r7, r0
 8015468:	eba8 0800 	sub.w	r8, r8, r0
 801546c:	e7e9      	b.n	8015442 <__sflush_r+0xda>
 801546e:	bf00      	nop
 8015470:	20400001 	.word	0x20400001

08015474 <_fflush_r>:
 8015474:	b538      	push	{r3, r4, r5, lr}
 8015476:	690b      	ldr	r3, [r1, #16]
 8015478:	4605      	mov	r5, r0
 801547a:	460c      	mov	r4, r1
 801547c:	b1db      	cbz	r3, 80154b6 <_fflush_r+0x42>
 801547e:	b118      	cbz	r0, 8015488 <_fflush_r+0x14>
 8015480:	6983      	ldr	r3, [r0, #24]
 8015482:	b90b      	cbnz	r3, 8015488 <_fflush_r+0x14>
 8015484:	f000 f860 	bl	8015548 <__sinit>
 8015488:	4b0c      	ldr	r3, [pc, #48]	; (80154bc <_fflush_r+0x48>)
 801548a:	429c      	cmp	r4, r3
 801548c:	d109      	bne.n	80154a2 <_fflush_r+0x2e>
 801548e:	686c      	ldr	r4, [r5, #4]
 8015490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015494:	b17b      	cbz	r3, 80154b6 <_fflush_r+0x42>
 8015496:	4621      	mov	r1, r4
 8015498:	4628      	mov	r0, r5
 801549a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801549e:	f7ff bf63 	b.w	8015368 <__sflush_r>
 80154a2:	4b07      	ldr	r3, [pc, #28]	; (80154c0 <_fflush_r+0x4c>)
 80154a4:	429c      	cmp	r4, r3
 80154a6:	d101      	bne.n	80154ac <_fflush_r+0x38>
 80154a8:	68ac      	ldr	r4, [r5, #8]
 80154aa:	e7f1      	b.n	8015490 <_fflush_r+0x1c>
 80154ac:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <_fflush_r+0x50>)
 80154ae:	429c      	cmp	r4, r3
 80154b0:	bf08      	it	eq
 80154b2:	68ec      	ldreq	r4, [r5, #12]
 80154b4:	e7ec      	b.n	8015490 <_fflush_r+0x1c>
 80154b6:	2000      	movs	r0, #0
 80154b8:	bd38      	pop	{r3, r4, r5, pc}
 80154ba:	bf00      	nop
 80154bc:	08017b80 	.word	0x08017b80
 80154c0:	08017ba0 	.word	0x08017ba0
 80154c4:	08017b60 	.word	0x08017b60

080154c8 <std>:
 80154c8:	2300      	movs	r3, #0
 80154ca:	b510      	push	{r4, lr}
 80154cc:	4604      	mov	r4, r0
 80154ce:	e9c0 3300 	strd	r3, r3, [r0]
 80154d2:	6083      	str	r3, [r0, #8]
 80154d4:	8181      	strh	r1, [r0, #12]
 80154d6:	6643      	str	r3, [r0, #100]	; 0x64
 80154d8:	81c2      	strh	r2, [r0, #14]
 80154da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80154de:	6183      	str	r3, [r0, #24]
 80154e0:	4619      	mov	r1, r3
 80154e2:	2208      	movs	r2, #8
 80154e4:	305c      	adds	r0, #92	; 0x5c
 80154e6:	f7fd f9b7 	bl	8012858 <memset>
 80154ea:	4b05      	ldr	r3, [pc, #20]	; (8015500 <std+0x38>)
 80154ec:	6263      	str	r3, [r4, #36]	; 0x24
 80154ee:	4b05      	ldr	r3, [pc, #20]	; (8015504 <std+0x3c>)
 80154f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80154f2:	4b05      	ldr	r3, [pc, #20]	; (8015508 <std+0x40>)
 80154f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154f6:	4b05      	ldr	r3, [pc, #20]	; (801550c <std+0x44>)
 80154f8:	6224      	str	r4, [r4, #32]
 80154fa:	6323      	str	r3, [r4, #48]	; 0x30
 80154fc:	bd10      	pop	{r4, pc}
 80154fe:	bf00      	nop
 8015500:	080136e5 	.word	0x080136e5
 8015504:	0801370b 	.word	0x0801370b
 8015508:	08013743 	.word	0x08013743
 801550c:	08013767 	.word	0x08013767

08015510 <_cleanup_r>:
 8015510:	4901      	ldr	r1, [pc, #4]	; (8015518 <_cleanup_r+0x8>)
 8015512:	f000 b885 	b.w	8015620 <_fwalk_reent>
 8015516:	bf00      	nop
 8015518:	08015475 	.word	0x08015475

0801551c <__sfmoreglue>:
 801551c:	b570      	push	{r4, r5, r6, lr}
 801551e:	1e4a      	subs	r2, r1, #1
 8015520:	2568      	movs	r5, #104	; 0x68
 8015522:	4355      	muls	r5, r2
 8015524:	460e      	mov	r6, r1
 8015526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801552a:	f001 f8d5 	bl	80166d8 <_malloc_r>
 801552e:	4604      	mov	r4, r0
 8015530:	b140      	cbz	r0, 8015544 <__sfmoreglue+0x28>
 8015532:	2100      	movs	r1, #0
 8015534:	e9c0 1600 	strd	r1, r6, [r0]
 8015538:	300c      	adds	r0, #12
 801553a:	60a0      	str	r0, [r4, #8]
 801553c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015540:	f7fd f98a 	bl	8012858 <memset>
 8015544:	4620      	mov	r0, r4
 8015546:	bd70      	pop	{r4, r5, r6, pc}

08015548 <__sinit>:
 8015548:	6983      	ldr	r3, [r0, #24]
 801554a:	b510      	push	{r4, lr}
 801554c:	4604      	mov	r4, r0
 801554e:	bb33      	cbnz	r3, 801559e <__sinit+0x56>
 8015550:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015554:	6503      	str	r3, [r0, #80]	; 0x50
 8015556:	4b12      	ldr	r3, [pc, #72]	; (80155a0 <__sinit+0x58>)
 8015558:	4a12      	ldr	r2, [pc, #72]	; (80155a4 <__sinit+0x5c>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	6282      	str	r2, [r0, #40]	; 0x28
 801555e:	4298      	cmp	r0, r3
 8015560:	bf04      	itt	eq
 8015562:	2301      	moveq	r3, #1
 8015564:	6183      	streq	r3, [r0, #24]
 8015566:	f000 f81f 	bl	80155a8 <__sfp>
 801556a:	6060      	str	r0, [r4, #4]
 801556c:	4620      	mov	r0, r4
 801556e:	f000 f81b 	bl	80155a8 <__sfp>
 8015572:	60a0      	str	r0, [r4, #8]
 8015574:	4620      	mov	r0, r4
 8015576:	f000 f817 	bl	80155a8 <__sfp>
 801557a:	2200      	movs	r2, #0
 801557c:	60e0      	str	r0, [r4, #12]
 801557e:	2104      	movs	r1, #4
 8015580:	6860      	ldr	r0, [r4, #4]
 8015582:	f7ff ffa1 	bl	80154c8 <std>
 8015586:	2201      	movs	r2, #1
 8015588:	2109      	movs	r1, #9
 801558a:	68a0      	ldr	r0, [r4, #8]
 801558c:	f7ff ff9c 	bl	80154c8 <std>
 8015590:	2202      	movs	r2, #2
 8015592:	2112      	movs	r1, #18
 8015594:	68e0      	ldr	r0, [r4, #12]
 8015596:	f7ff ff97 	bl	80154c8 <std>
 801559a:	2301      	movs	r3, #1
 801559c:	61a3      	str	r3, [r4, #24]
 801559e:	bd10      	pop	{r4, pc}
 80155a0:	08017ac0 	.word	0x08017ac0
 80155a4:	08015511 	.word	0x08015511

080155a8 <__sfp>:
 80155a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155aa:	4b1b      	ldr	r3, [pc, #108]	; (8015618 <__sfp+0x70>)
 80155ac:	681e      	ldr	r6, [r3, #0]
 80155ae:	69b3      	ldr	r3, [r6, #24]
 80155b0:	4607      	mov	r7, r0
 80155b2:	b913      	cbnz	r3, 80155ba <__sfp+0x12>
 80155b4:	4630      	mov	r0, r6
 80155b6:	f7ff ffc7 	bl	8015548 <__sinit>
 80155ba:	3648      	adds	r6, #72	; 0x48
 80155bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80155c0:	3b01      	subs	r3, #1
 80155c2:	d503      	bpl.n	80155cc <__sfp+0x24>
 80155c4:	6833      	ldr	r3, [r6, #0]
 80155c6:	b133      	cbz	r3, 80155d6 <__sfp+0x2e>
 80155c8:	6836      	ldr	r6, [r6, #0]
 80155ca:	e7f7      	b.n	80155bc <__sfp+0x14>
 80155cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80155d0:	b16d      	cbz	r5, 80155ee <__sfp+0x46>
 80155d2:	3468      	adds	r4, #104	; 0x68
 80155d4:	e7f4      	b.n	80155c0 <__sfp+0x18>
 80155d6:	2104      	movs	r1, #4
 80155d8:	4638      	mov	r0, r7
 80155da:	f7ff ff9f 	bl	801551c <__sfmoreglue>
 80155de:	6030      	str	r0, [r6, #0]
 80155e0:	2800      	cmp	r0, #0
 80155e2:	d1f1      	bne.n	80155c8 <__sfp+0x20>
 80155e4:	230c      	movs	r3, #12
 80155e6:	603b      	str	r3, [r7, #0]
 80155e8:	4604      	mov	r4, r0
 80155ea:	4620      	mov	r0, r4
 80155ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ee:	4b0b      	ldr	r3, [pc, #44]	; (801561c <__sfp+0x74>)
 80155f0:	6665      	str	r5, [r4, #100]	; 0x64
 80155f2:	e9c4 5500 	strd	r5, r5, [r4]
 80155f6:	60a5      	str	r5, [r4, #8]
 80155f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80155fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015600:	2208      	movs	r2, #8
 8015602:	4629      	mov	r1, r5
 8015604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015608:	f7fd f926 	bl	8012858 <memset>
 801560c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015614:	e7e9      	b.n	80155ea <__sfp+0x42>
 8015616:	bf00      	nop
 8015618:	08017ac0 	.word	0x08017ac0
 801561c:	ffff0001 	.word	0xffff0001

08015620 <_fwalk_reent>:
 8015620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015624:	4680      	mov	r8, r0
 8015626:	4689      	mov	r9, r1
 8015628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801562c:	2600      	movs	r6, #0
 801562e:	b914      	cbnz	r4, 8015636 <_fwalk_reent+0x16>
 8015630:	4630      	mov	r0, r6
 8015632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015636:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801563a:	3f01      	subs	r7, #1
 801563c:	d501      	bpl.n	8015642 <_fwalk_reent+0x22>
 801563e:	6824      	ldr	r4, [r4, #0]
 8015640:	e7f5      	b.n	801562e <_fwalk_reent+0xe>
 8015642:	89ab      	ldrh	r3, [r5, #12]
 8015644:	2b01      	cmp	r3, #1
 8015646:	d907      	bls.n	8015658 <_fwalk_reent+0x38>
 8015648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801564c:	3301      	adds	r3, #1
 801564e:	d003      	beq.n	8015658 <_fwalk_reent+0x38>
 8015650:	4629      	mov	r1, r5
 8015652:	4640      	mov	r0, r8
 8015654:	47c8      	blx	r9
 8015656:	4306      	orrs	r6, r0
 8015658:	3568      	adds	r5, #104	; 0x68
 801565a:	e7ee      	b.n	801563a <_fwalk_reent+0x1a>

0801565c <rshift>:
 801565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801565e:	6906      	ldr	r6, [r0, #16]
 8015660:	114b      	asrs	r3, r1, #5
 8015662:	429e      	cmp	r6, r3
 8015664:	f100 0414 	add.w	r4, r0, #20
 8015668:	dd30      	ble.n	80156cc <rshift+0x70>
 801566a:	f011 011f 	ands.w	r1, r1, #31
 801566e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015672:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015676:	d108      	bne.n	801568a <rshift+0x2e>
 8015678:	4621      	mov	r1, r4
 801567a:	42b2      	cmp	r2, r6
 801567c:	460b      	mov	r3, r1
 801567e:	d211      	bcs.n	80156a4 <rshift+0x48>
 8015680:	f852 3b04 	ldr.w	r3, [r2], #4
 8015684:	f841 3b04 	str.w	r3, [r1], #4
 8015688:	e7f7      	b.n	801567a <rshift+0x1e>
 801568a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801568e:	f1c1 0c20 	rsb	ip, r1, #32
 8015692:	40cd      	lsrs	r5, r1
 8015694:	3204      	adds	r2, #4
 8015696:	4623      	mov	r3, r4
 8015698:	42b2      	cmp	r2, r6
 801569a:	4617      	mov	r7, r2
 801569c:	d30c      	bcc.n	80156b8 <rshift+0x5c>
 801569e:	601d      	str	r5, [r3, #0]
 80156a0:	b105      	cbz	r5, 80156a4 <rshift+0x48>
 80156a2:	3304      	adds	r3, #4
 80156a4:	1b1a      	subs	r2, r3, r4
 80156a6:	42a3      	cmp	r3, r4
 80156a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80156ac:	bf08      	it	eq
 80156ae:	2300      	moveq	r3, #0
 80156b0:	6102      	str	r2, [r0, #16]
 80156b2:	bf08      	it	eq
 80156b4:	6143      	streq	r3, [r0, #20]
 80156b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156b8:	683f      	ldr	r7, [r7, #0]
 80156ba:	fa07 f70c 	lsl.w	r7, r7, ip
 80156be:	433d      	orrs	r5, r7
 80156c0:	f843 5b04 	str.w	r5, [r3], #4
 80156c4:	f852 5b04 	ldr.w	r5, [r2], #4
 80156c8:	40cd      	lsrs	r5, r1
 80156ca:	e7e5      	b.n	8015698 <rshift+0x3c>
 80156cc:	4623      	mov	r3, r4
 80156ce:	e7e9      	b.n	80156a4 <rshift+0x48>

080156d0 <__hexdig_fun>:
 80156d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80156d4:	2b09      	cmp	r3, #9
 80156d6:	d802      	bhi.n	80156de <__hexdig_fun+0xe>
 80156d8:	3820      	subs	r0, #32
 80156da:	b2c0      	uxtb	r0, r0
 80156dc:	4770      	bx	lr
 80156de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80156e2:	2b05      	cmp	r3, #5
 80156e4:	d801      	bhi.n	80156ea <__hexdig_fun+0x1a>
 80156e6:	3847      	subs	r0, #71	; 0x47
 80156e8:	e7f7      	b.n	80156da <__hexdig_fun+0xa>
 80156ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80156ee:	2b05      	cmp	r3, #5
 80156f0:	d801      	bhi.n	80156f6 <__hexdig_fun+0x26>
 80156f2:	3827      	subs	r0, #39	; 0x27
 80156f4:	e7f1      	b.n	80156da <__hexdig_fun+0xa>
 80156f6:	2000      	movs	r0, #0
 80156f8:	4770      	bx	lr

080156fa <__gethex>:
 80156fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156fe:	b08b      	sub	sp, #44	; 0x2c
 8015700:	468a      	mov	sl, r1
 8015702:	9002      	str	r0, [sp, #8]
 8015704:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015706:	9306      	str	r3, [sp, #24]
 8015708:	4690      	mov	r8, r2
 801570a:	f000 fadf 	bl	8015ccc <__localeconv_l>
 801570e:	6803      	ldr	r3, [r0, #0]
 8015710:	9303      	str	r3, [sp, #12]
 8015712:	4618      	mov	r0, r3
 8015714:	f7ea fd74 	bl	8000200 <strlen>
 8015718:	9b03      	ldr	r3, [sp, #12]
 801571a:	9001      	str	r0, [sp, #4]
 801571c:	4403      	add	r3, r0
 801571e:	f04f 0b00 	mov.w	fp, #0
 8015722:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015726:	9307      	str	r3, [sp, #28]
 8015728:	f8da 3000 	ldr.w	r3, [sl]
 801572c:	3302      	adds	r3, #2
 801572e:	461f      	mov	r7, r3
 8015730:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015734:	2830      	cmp	r0, #48	; 0x30
 8015736:	d06c      	beq.n	8015812 <__gethex+0x118>
 8015738:	f7ff ffca 	bl	80156d0 <__hexdig_fun>
 801573c:	4604      	mov	r4, r0
 801573e:	2800      	cmp	r0, #0
 8015740:	d16a      	bne.n	8015818 <__gethex+0x11e>
 8015742:	9a01      	ldr	r2, [sp, #4]
 8015744:	9903      	ldr	r1, [sp, #12]
 8015746:	4638      	mov	r0, r7
 8015748:	f001 fe08 	bl	801735c <strncmp>
 801574c:	2800      	cmp	r0, #0
 801574e:	d166      	bne.n	801581e <__gethex+0x124>
 8015750:	9b01      	ldr	r3, [sp, #4]
 8015752:	5cf8      	ldrb	r0, [r7, r3]
 8015754:	18fe      	adds	r6, r7, r3
 8015756:	f7ff ffbb 	bl	80156d0 <__hexdig_fun>
 801575a:	2800      	cmp	r0, #0
 801575c:	d062      	beq.n	8015824 <__gethex+0x12a>
 801575e:	4633      	mov	r3, r6
 8015760:	7818      	ldrb	r0, [r3, #0]
 8015762:	2830      	cmp	r0, #48	; 0x30
 8015764:	461f      	mov	r7, r3
 8015766:	f103 0301 	add.w	r3, r3, #1
 801576a:	d0f9      	beq.n	8015760 <__gethex+0x66>
 801576c:	f7ff ffb0 	bl	80156d0 <__hexdig_fun>
 8015770:	fab0 f580 	clz	r5, r0
 8015774:	096d      	lsrs	r5, r5, #5
 8015776:	4634      	mov	r4, r6
 8015778:	f04f 0b01 	mov.w	fp, #1
 801577c:	463a      	mov	r2, r7
 801577e:	4616      	mov	r6, r2
 8015780:	3201      	adds	r2, #1
 8015782:	7830      	ldrb	r0, [r6, #0]
 8015784:	f7ff ffa4 	bl	80156d0 <__hexdig_fun>
 8015788:	2800      	cmp	r0, #0
 801578a:	d1f8      	bne.n	801577e <__gethex+0x84>
 801578c:	9a01      	ldr	r2, [sp, #4]
 801578e:	9903      	ldr	r1, [sp, #12]
 8015790:	4630      	mov	r0, r6
 8015792:	f001 fde3 	bl	801735c <strncmp>
 8015796:	b950      	cbnz	r0, 80157ae <__gethex+0xb4>
 8015798:	b954      	cbnz	r4, 80157b0 <__gethex+0xb6>
 801579a:	9b01      	ldr	r3, [sp, #4]
 801579c:	18f4      	adds	r4, r6, r3
 801579e:	4622      	mov	r2, r4
 80157a0:	4616      	mov	r6, r2
 80157a2:	3201      	adds	r2, #1
 80157a4:	7830      	ldrb	r0, [r6, #0]
 80157a6:	f7ff ff93 	bl	80156d0 <__hexdig_fun>
 80157aa:	2800      	cmp	r0, #0
 80157ac:	d1f8      	bne.n	80157a0 <__gethex+0xa6>
 80157ae:	b10c      	cbz	r4, 80157b4 <__gethex+0xba>
 80157b0:	1ba4      	subs	r4, r4, r6
 80157b2:	00a4      	lsls	r4, r4, #2
 80157b4:	7833      	ldrb	r3, [r6, #0]
 80157b6:	2b50      	cmp	r3, #80	; 0x50
 80157b8:	d001      	beq.n	80157be <__gethex+0xc4>
 80157ba:	2b70      	cmp	r3, #112	; 0x70
 80157bc:	d140      	bne.n	8015840 <__gethex+0x146>
 80157be:	7873      	ldrb	r3, [r6, #1]
 80157c0:	2b2b      	cmp	r3, #43	; 0x2b
 80157c2:	d031      	beq.n	8015828 <__gethex+0x12e>
 80157c4:	2b2d      	cmp	r3, #45	; 0x2d
 80157c6:	d033      	beq.n	8015830 <__gethex+0x136>
 80157c8:	1c71      	adds	r1, r6, #1
 80157ca:	f04f 0900 	mov.w	r9, #0
 80157ce:	7808      	ldrb	r0, [r1, #0]
 80157d0:	f7ff ff7e 	bl	80156d0 <__hexdig_fun>
 80157d4:	1e43      	subs	r3, r0, #1
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	2b18      	cmp	r3, #24
 80157da:	d831      	bhi.n	8015840 <__gethex+0x146>
 80157dc:	f1a0 0210 	sub.w	r2, r0, #16
 80157e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80157e4:	f7ff ff74 	bl	80156d0 <__hexdig_fun>
 80157e8:	1e43      	subs	r3, r0, #1
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	2b18      	cmp	r3, #24
 80157ee:	d922      	bls.n	8015836 <__gethex+0x13c>
 80157f0:	f1b9 0f00 	cmp.w	r9, #0
 80157f4:	d000      	beq.n	80157f8 <__gethex+0xfe>
 80157f6:	4252      	negs	r2, r2
 80157f8:	4414      	add	r4, r2
 80157fa:	f8ca 1000 	str.w	r1, [sl]
 80157fe:	b30d      	cbz	r5, 8015844 <__gethex+0x14a>
 8015800:	f1bb 0f00 	cmp.w	fp, #0
 8015804:	bf0c      	ite	eq
 8015806:	2706      	moveq	r7, #6
 8015808:	2700      	movne	r7, #0
 801580a:	4638      	mov	r0, r7
 801580c:	b00b      	add	sp, #44	; 0x2c
 801580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015812:	f10b 0b01 	add.w	fp, fp, #1
 8015816:	e78a      	b.n	801572e <__gethex+0x34>
 8015818:	2500      	movs	r5, #0
 801581a:	462c      	mov	r4, r5
 801581c:	e7ae      	b.n	801577c <__gethex+0x82>
 801581e:	463e      	mov	r6, r7
 8015820:	2501      	movs	r5, #1
 8015822:	e7c7      	b.n	80157b4 <__gethex+0xba>
 8015824:	4604      	mov	r4, r0
 8015826:	e7fb      	b.n	8015820 <__gethex+0x126>
 8015828:	f04f 0900 	mov.w	r9, #0
 801582c:	1cb1      	adds	r1, r6, #2
 801582e:	e7ce      	b.n	80157ce <__gethex+0xd4>
 8015830:	f04f 0901 	mov.w	r9, #1
 8015834:	e7fa      	b.n	801582c <__gethex+0x132>
 8015836:	230a      	movs	r3, #10
 8015838:	fb03 0202 	mla	r2, r3, r2, r0
 801583c:	3a10      	subs	r2, #16
 801583e:	e7cf      	b.n	80157e0 <__gethex+0xe6>
 8015840:	4631      	mov	r1, r6
 8015842:	e7da      	b.n	80157fa <__gethex+0x100>
 8015844:	1bf3      	subs	r3, r6, r7
 8015846:	3b01      	subs	r3, #1
 8015848:	4629      	mov	r1, r5
 801584a:	2b07      	cmp	r3, #7
 801584c:	dc49      	bgt.n	80158e2 <__gethex+0x1e8>
 801584e:	9802      	ldr	r0, [sp, #8]
 8015850:	f000 fae7 	bl	8015e22 <_Balloc>
 8015854:	9b01      	ldr	r3, [sp, #4]
 8015856:	f100 0914 	add.w	r9, r0, #20
 801585a:	f04f 0b00 	mov.w	fp, #0
 801585e:	f1c3 0301 	rsb	r3, r3, #1
 8015862:	4605      	mov	r5, r0
 8015864:	f8cd 9010 	str.w	r9, [sp, #16]
 8015868:	46da      	mov	sl, fp
 801586a:	9308      	str	r3, [sp, #32]
 801586c:	42b7      	cmp	r7, r6
 801586e:	d33b      	bcc.n	80158e8 <__gethex+0x1ee>
 8015870:	9804      	ldr	r0, [sp, #16]
 8015872:	f840 ab04 	str.w	sl, [r0], #4
 8015876:	eba0 0009 	sub.w	r0, r0, r9
 801587a:	1080      	asrs	r0, r0, #2
 801587c:	6128      	str	r0, [r5, #16]
 801587e:	0147      	lsls	r7, r0, #5
 8015880:	4650      	mov	r0, sl
 8015882:	f000 fb92 	bl	8015faa <__hi0bits>
 8015886:	f8d8 6000 	ldr.w	r6, [r8]
 801588a:	1a3f      	subs	r7, r7, r0
 801588c:	42b7      	cmp	r7, r6
 801588e:	dd64      	ble.n	801595a <__gethex+0x260>
 8015890:	1bbf      	subs	r7, r7, r6
 8015892:	4639      	mov	r1, r7
 8015894:	4628      	mov	r0, r5
 8015896:	f000 fea1 	bl	80165dc <__any_on>
 801589a:	4682      	mov	sl, r0
 801589c:	b178      	cbz	r0, 80158be <__gethex+0x1c4>
 801589e:	1e7b      	subs	r3, r7, #1
 80158a0:	1159      	asrs	r1, r3, #5
 80158a2:	f003 021f 	and.w	r2, r3, #31
 80158a6:	f04f 0a01 	mov.w	sl, #1
 80158aa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80158ae:	fa0a f202 	lsl.w	r2, sl, r2
 80158b2:	420a      	tst	r2, r1
 80158b4:	d003      	beq.n	80158be <__gethex+0x1c4>
 80158b6:	4553      	cmp	r3, sl
 80158b8:	dc46      	bgt.n	8015948 <__gethex+0x24e>
 80158ba:	f04f 0a02 	mov.w	sl, #2
 80158be:	4639      	mov	r1, r7
 80158c0:	4628      	mov	r0, r5
 80158c2:	f7ff fecb 	bl	801565c <rshift>
 80158c6:	443c      	add	r4, r7
 80158c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80158cc:	42a3      	cmp	r3, r4
 80158ce:	da52      	bge.n	8015976 <__gethex+0x27c>
 80158d0:	4629      	mov	r1, r5
 80158d2:	9802      	ldr	r0, [sp, #8]
 80158d4:	f000 fad9 	bl	8015e8a <_Bfree>
 80158d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158da:	2300      	movs	r3, #0
 80158dc:	6013      	str	r3, [r2, #0]
 80158de:	27a3      	movs	r7, #163	; 0xa3
 80158e0:	e793      	b.n	801580a <__gethex+0x110>
 80158e2:	3101      	adds	r1, #1
 80158e4:	105b      	asrs	r3, r3, #1
 80158e6:	e7b0      	b.n	801584a <__gethex+0x150>
 80158e8:	1e73      	subs	r3, r6, #1
 80158ea:	9305      	str	r3, [sp, #20]
 80158ec:	9a07      	ldr	r2, [sp, #28]
 80158ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d018      	beq.n	8015928 <__gethex+0x22e>
 80158f6:	f1bb 0f20 	cmp.w	fp, #32
 80158fa:	d107      	bne.n	801590c <__gethex+0x212>
 80158fc:	9b04      	ldr	r3, [sp, #16]
 80158fe:	f8c3 a000 	str.w	sl, [r3]
 8015902:	3304      	adds	r3, #4
 8015904:	f04f 0a00 	mov.w	sl, #0
 8015908:	9304      	str	r3, [sp, #16]
 801590a:	46d3      	mov	fp, sl
 801590c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015910:	f7ff fede 	bl	80156d0 <__hexdig_fun>
 8015914:	f000 000f 	and.w	r0, r0, #15
 8015918:	fa00 f00b 	lsl.w	r0, r0, fp
 801591c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015920:	f10b 0b04 	add.w	fp, fp, #4
 8015924:	9b05      	ldr	r3, [sp, #20]
 8015926:	e00d      	b.n	8015944 <__gethex+0x24a>
 8015928:	9b05      	ldr	r3, [sp, #20]
 801592a:	9a08      	ldr	r2, [sp, #32]
 801592c:	4413      	add	r3, r2
 801592e:	42bb      	cmp	r3, r7
 8015930:	d3e1      	bcc.n	80158f6 <__gethex+0x1fc>
 8015932:	4618      	mov	r0, r3
 8015934:	9a01      	ldr	r2, [sp, #4]
 8015936:	9903      	ldr	r1, [sp, #12]
 8015938:	9309      	str	r3, [sp, #36]	; 0x24
 801593a:	f001 fd0f 	bl	801735c <strncmp>
 801593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015940:	2800      	cmp	r0, #0
 8015942:	d1d8      	bne.n	80158f6 <__gethex+0x1fc>
 8015944:	461e      	mov	r6, r3
 8015946:	e791      	b.n	801586c <__gethex+0x172>
 8015948:	1eb9      	subs	r1, r7, #2
 801594a:	4628      	mov	r0, r5
 801594c:	f000 fe46 	bl	80165dc <__any_on>
 8015950:	2800      	cmp	r0, #0
 8015952:	d0b2      	beq.n	80158ba <__gethex+0x1c0>
 8015954:	f04f 0a03 	mov.w	sl, #3
 8015958:	e7b1      	b.n	80158be <__gethex+0x1c4>
 801595a:	da09      	bge.n	8015970 <__gethex+0x276>
 801595c:	1bf7      	subs	r7, r6, r7
 801595e:	4629      	mov	r1, r5
 8015960:	463a      	mov	r2, r7
 8015962:	9802      	ldr	r0, [sp, #8]
 8015964:	f000 fc5c 	bl	8016220 <__lshift>
 8015968:	1be4      	subs	r4, r4, r7
 801596a:	4605      	mov	r5, r0
 801596c:	f100 0914 	add.w	r9, r0, #20
 8015970:	f04f 0a00 	mov.w	sl, #0
 8015974:	e7a8      	b.n	80158c8 <__gethex+0x1ce>
 8015976:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801597a:	42a0      	cmp	r0, r4
 801597c:	dd6a      	ble.n	8015a54 <__gethex+0x35a>
 801597e:	1b04      	subs	r4, r0, r4
 8015980:	42a6      	cmp	r6, r4
 8015982:	dc2e      	bgt.n	80159e2 <__gethex+0x2e8>
 8015984:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015988:	2b02      	cmp	r3, #2
 801598a:	d022      	beq.n	80159d2 <__gethex+0x2d8>
 801598c:	2b03      	cmp	r3, #3
 801598e:	d024      	beq.n	80159da <__gethex+0x2e0>
 8015990:	2b01      	cmp	r3, #1
 8015992:	d115      	bne.n	80159c0 <__gethex+0x2c6>
 8015994:	42a6      	cmp	r6, r4
 8015996:	d113      	bne.n	80159c0 <__gethex+0x2c6>
 8015998:	2e01      	cmp	r6, #1
 801599a:	dc0b      	bgt.n	80159b4 <__gethex+0x2ba>
 801599c:	9a06      	ldr	r2, [sp, #24]
 801599e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80159a2:	6013      	str	r3, [r2, #0]
 80159a4:	2301      	movs	r3, #1
 80159a6:	612b      	str	r3, [r5, #16]
 80159a8:	f8c9 3000 	str.w	r3, [r9]
 80159ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159ae:	2762      	movs	r7, #98	; 0x62
 80159b0:	601d      	str	r5, [r3, #0]
 80159b2:	e72a      	b.n	801580a <__gethex+0x110>
 80159b4:	1e71      	subs	r1, r6, #1
 80159b6:	4628      	mov	r0, r5
 80159b8:	f000 fe10 	bl	80165dc <__any_on>
 80159bc:	2800      	cmp	r0, #0
 80159be:	d1ed      	bne.n	801599c <__gethex+0x2a2>
 80159c0:	4629      	mov	r1, r5
 80159c2:	9802      	ldr	r0, [sp, #8]
 80159c4:	f000 fa61 	bl	8015e8a <_Bfree>
 80159c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80159ca:	2300      	movs	r3, #0
 80159cc:	6013      	str	r3, [r2, #0]
 80159ce:	2750      	movs	r7, #80	; 0x50
 80159d0:	e71b      	b.n	801580a <__gethex+0x110>
 80159d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d0e1      	beq.n	801599c <__gethex+0x2a2>
 80159d8:	e7f2      	b.n	80159c0 <__gethex+0x2c6>
 80159da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1dd      	bne.n	801599c <__gethex+0x2a2>
 80159e0:	e7ee      	b.n	80159c0 <__gethex+0x2c6>
 80159e2:	1e67      	subs	r7, r4, #1
 80159e4:	f1ba 0f00 	cmp.w	sl, #0
 80159e8:	d131      	bne.n	8015a4e <__gethex+0x354>
 80159ea:	b127      	cbz	r7, 80159f6 <__gethex+0x2fc>
 80159ec:	4639      	mov	r1, r7
 80159ee:	4628      	mov	r0, r5
 80159f0:	f000 fdf4 	bl	80165dc <__any_on>
 80159f4:	4682      	mov	sl, r0
 80159f6:	117a      	asrs	r2, r7, #5
 80159f8:	2301      	movs	r3, #1
 80159fa:	f007 071f 	and.w	r7, r7, #31
 80159fe:	fa03 f707 	lsl.w	r7, r3, r7
 8015a02:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015a06:	4621      	mov	r1, r4
 8015a08:	421f      	tst	r7, r3
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	bf18      	it	ne
 8015a0e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015a12:	1b36      	subs	r6, r6, r4
 8015a14:	f7ff fe22 	bl	801565c <rshift>
 8015a18:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015a1c:	2702      	movs	r7, #2
 8015a1e:	f1ba 0f00 	cmp.w	sl, #0
 8015a22:	d048      	beq.n	8015ab6 <__gethex+0x3bc>
 8015a24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a28:	2b02      	cmp	r3, #2
 8015a2a:	d015      	beq.n	8015a58 <__gethex+0x35e>
 8015a2c:	2b03      	cmp	r3, #3
 8015a2e:	d017      	beq.n	8015a60 <__gethex+0x366>
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	d109      	bne.n	8015a48 <__gethex+0x34e>
 8015a34:	f01a 0f02 	tst.w	sl, #2
 8015a38:	d006      	beq.n	8015a48 <__gethex+0x34e>
 8015a3a:	f8d9 3000 	ldr.w	r3, [r9]
 8015a3e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015a42:	f01a 0f01 	tst.w	sl, #1
 8015a46:	d10e      	bne.n	8015a66 <__gethex+0x36c>
 8015a48:	f047 0710 	orr.w	r7, r7, #16
 8015a4c:	e033      	b.n	8015ab6 <__gethex+0x3bc>
 8015a4e:	f04f 0a01 	mov.w	sl, #1
 8015a52:	e7d0      	b.n	80159f6 <__gethex+0x2fc>
 8015a54:	2701      	movs	r7, #1
 8015a56:	e7e2      	b.n	8015a1e <__gethex+0x324>
 8015a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a5a:	f1c3 0301 	rsb	r3, r3, #1
 8015a5e:	9315      	str	r3, [sp, #84]	; 0x54
 8015a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d0f0      	beq.n	8015a48 <__gethex+0x34e>
 8015a66:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015a6a:	f105 0314 	add.w	r3, r5, #20
 8015a6e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015a72:	eb03 010a 	add.w	r1, r3, sl
 8015a76:	f04f 0c00 	mov.w	ip, #0
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a80:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015a84:	d01c      	beq.n	8015ac0 <__gethex+0x3c6>
 8015a86:	3201      	adds	r2, #1
 8015a88:	6002      	str	r2, [r0, #0]
 8015a8a:	2f02      	cmp	r7, #2
 8015a8c:	f105 0314 	add.w	r3, r5, #20
 8015a90:	d138      	bne.n	8015b04 <__gethex+0x40a>
 8015a92:	f8d8 2000 	ldr.w	r2, [r8]
 8015a96:	3a01      	subs	r2, #1
 8015a98:	42b2      	cmp	r2, r6
 8015a9a:	d10a      	bne.n	8015ab2 <__gethex+0x3b8>
 8015a9c:	1171      	asrs	r1, r6, #5
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	f006 061f 	and.w	r6, r6, #31
 8015aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015aa8:	fa02 f606 	lsl.w	r6, r2, r6
 8015aac:	421e      	tst	r6, r3
 8015aae:	bf18      	it	ne
 8015ab0:	4617      	movne	r7, r2
 8015ab2:	f047 0720 	orr.w	r7, r7, #32
 8015ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ab8:	601d      	str	r5, [r3, #0]
 8015aba:	9b06      	ldr	r3, [sp, #24]
 8015abc:	601c      	str	r4, [r3, #0]
 8015abe:	e6a4      	b.n	801580a <__gethex+0x110>
 8015ac0:	4299      	cmp	r1, r3
 8015ac2:	f843 cc04 	str.w	ip, [r3, #-4]
 8015ac6:	d8d8      	bhi.n	8015a7a <__gethex+0x380>
 8015ac8:	68ab      	ldr	r3, [r5, #8]
 8015aca:	4599      	cmp	r9, r3
 8015acc:	db12      	blt.n	8015af4 <__gethex+0x3fa>
 8015ace:	6869      	ldr	r1, [r5, #4]
 8015ad0:	9802      	ldr	r0, [sp, #8]
 8015ad2:	3101      	adds	r1, #1
 8015ad4:	f000 f9a5 	bl	8015e22 <_Balloc>
 8015ad8:	692a      	ldr	r2, [r5, #16]
 8015ada:	3202      	adds	r2, #2
 8015adc:	f105 010c 	add.w	r1, r5, #12
 8015ae0:	4683      	mov	fp, r0
 8015ae2:	0092      	lsls	r2, r2, #2
 8015ae4:	300c      	adds	r0, #12
 8015ae6:	f000 f991 	bl	8015e0c <memcpy>
 8015aea:	4629      	mov	r1, r5
 8015aec:	9802      	ldr	r0, [sp, #8]
 8015aee:	f000 f9cc 	bl	8015e8a <_Bfree>
 8015af2:	465d      	mov	r5, fp
 8015af4:	692b      	ldr	r3, [r5, #16]
 8015af6:	1c5a      	adds	r2, r3, #1
 8015af8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015afc:	612a      	str	r2, [r5, #16]
 8015afe:	2201      	movs	r2, #1
 8015b00:	615a      	str	r2, [r3, #20]
 8015b02:	e7c2      	b.n	8015a8a <__gethex+0x390>
 8015b04:	692a      	ldr	r2, [r5, #16]
 8015b06:	454a      	cmp	r2, r9
 8015b08:	dd0b      	ble.n	8015b22 <__gethex+0x428>
 8015b0a:	2101      	movs	r1, #1
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	f7ff fda5 	bl	801565c <rshift>
 8015b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b16:	3401      	adds	r4, #1
 8015b18:	42a3      	cmp	r3, r4
 8015b1a:	f6ff aed9 	blt.w	80158d0 <__gethex+0x1d6>
 8015b1e:	2701      	movs	r7, #1
 8015b20:	e7c7      	b.n	8015ab2 <__gethex+0x3b8>
 8015b22:	f016 061f 	ands.w	r6, r6, #31
 8015b26:	d0fa      	beq.n	8015b1e <__gethex+0x424>
 8015b28:	449a      	add	sl, r3
 8015b2a:	f1c6 0620 	rsb	r6, r6, #32
 8015b2e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015b32:	f000 fa3a 	bl	8015faa <__hi0bits>
 8015b36:	42b0      	cmp	r0, r6
 8015b38:	dbe7      	blt.n	8015b0a <__gethex+0x410>
 8015b3a:	e7f0      	b.n	8015b1e <__gethex+0x424>

08015b3c <L_shift>:
 8015b3c:	f1c2 0208 	rsb	r2, r2, #8
 8015b40:	0092      	lsls	r2, r2, #2
 8015b42:	b570      	push	{r4, r5, r6, lr}
 8015b44:	f1c2 0620 	rsb	r6, r2, #32
 8015b48:	6843      	ldr	r3, [r0, #4]
 8015b4a:	6804      	ldr	r4, [r0, #0]
 8015b4c:	fa03 f506 	lsl.w	r5, r3, r6
 8015b50:	432c      	orrs	r4, r5
 8015b52:	40d3      	lsrs	r3, r2
 8015b54:	6004      	str	r4, [r0, #0]
 8015b56:	f840 3f04 	str.w	r3, [r0, #4]!
 8015b5a:	4288      	cmp	r0, r1
 8015b5c:	d3f4      	bcc.n	8015b48 <L_shift+0xc>
 8015b5e:	bd70      	pop	{r4, r5, r6, pc}

08015b60 <__match>:
 8015b60:	b530      	push	{r4, r5, lr}
 8015b62:	6803      	ldr	r3, [r0, #0]
 8015b64:	3301      	adds	r3, #1
 8015b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b6a:	b914      	cbnz	r4, 8015b72 <__match+0x12>
 8015b6c:	6003      	str	r3, [r0, #0]
 8015b6e:	2001      	movs	r0, #1
 8015b70:	bd30      	pop	{r4, r5, pc}
 8015b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015b7a:	2d19      	cmp	r5, #25
 8015b7c:	bf98      	it	ls
 8015b7e:	3220      	addls	r2, #32
 8015b80:	42a2      	cmp	r2, r4
 8015b82:	d0f0      	beq.n	8015b66 <__match+0x6>
 8015b84:	2000      	movs	r0, #0
 8015b86:	e7f3      	b.n	8015b70 <__match+0x10>

08015b88 <__hexnan>:
 8015b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	680b      	ldr	r3, [r1, #0]
 8015b8e:	6801      	ldr	r1, [r0, #0]
 8015b90:	115f      	asrs	r7, r3, #5
 8015b92:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015b96:	f013 031f 	ands.w	r3, r3, #31
 8015b9a:	b087      	sub	sp, #28
 8015b9c:	bf18      	it	ne
 8015b9e:	3704      	addne	r7, #4
 8015ba0:	2500      	movs	r5, #0
 8015ba2:	1f3e      	subs	r6, r7, #4
 8015ba4:	4682      	mov	sl, r0
 8015ba6:	4690      	mov	r8, r2
 8015ba8:	9301      	str	r3, [sp, #4]
 8015baa:	f847 5c04 	str.w	r5, [r7, #-4]
 8015bae:	46b1      	mov	r9, r6
 8015bb0:	4634      	mov	r4, r6
 8015bb2:	9502      	str	r5, [sp, #8]
 8015bb4:	46ab      	mov	fp, r5
 8015bb6:	784a      	ldrb	r2, [r1, #1]
 8015bb8:	1c4b      	adds	r3, r1, #1
 8015bba:	9303      	str	r3, [sp, #12]
 8015bbc:	b342      	cbz	r2, 8015c10 <__hexnan+0x88>
 8015bbe:	4610      	mov	r0, r2
 8015bc0:	9105      	str	r1, [sp, #20]
 8015bc2:	9204      	str	r2, [sp, #16]
 8015bc4:	f7ff fd84 	bl	80156d0 <__hexdig_fun>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d143      	bne.n	8015c54 <__hexnan+0xcc>
 8015bcc:	9a04      	ldr	r2, [sp, #16]
 8015bce:	9905      	ldr	r1, [sp, #20]
 8015bd0:	2a20      	cmp	r2, #32
 8015bd2:	d818      	bhi.n	8015c06 <__hexnan+0x7e>
 8015bd4:	9b02      	ldr	r3, [sp, #8]
 8015bd6:	459b      	cmp	fp, r3
 8015bd8:	dd13      	ble.n	8015c02 <__hexnan+0x7a>
 8015bda:	454c      	cmp	r4, r9
 8015bdc:	d206      	bcs.n	8015bec <__hexnan+0x64>
 8015bde:	2d07      	cmp	r5, #7
 8015be0:	dc04      	bgt.n	8015bec <__hexnan+0x64>
 8015be2:	462a      	mov	r2, r5
 8015be4:	4649      	mov	r1, r9
 8015be6:	4620      	mov	r0, r4
 8015be8:	f7ff ffa8 	bl	8015b3c <L_shift>
 8015bec:	4544      	cmp	r4, r8
 8015bee:	d944      	bls.n	8015c7a <__hexnan+0xf2>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	f1a4 0904 	sub.w	r9, r4, #4
 8015bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015bfa:	f8cd b008 	str.w	fp, [sp, #8]
 8015bfe:	464c      	mov	r4, r9
 8015c00:	461d      	mov	r5, r3
 8015c02:	9903      	ldr	r1, [sp, #12]
 8015c04:	e7d7      	b.n	8015bb6 <__hexnan+0x2e>
 8015c06:	2a29      	cmp	r2, #41	; 0x29
 8015c08:	d14a      	bne.n	8015ca0 <__hexnan+0x118>
 8015c0a:	3102      	adds	r1, #2
 8015c0c:	f8ca 1000 	str.w	r1, [sl]
 8015c10:	f1bb 0f00 	cmp.w	fp, #0
 8015c14:	d044      	beq.n	8015ca0 <__hexnan+0x118>
 8015c16:	454c      	cmp	r4, r9
 8015c18:	d206      	bcs.n	8015c28 <__hexnan+0xa0>
 8015c1a:	2d07      	cmp	r5, #7
 8015c1c:	dc04      	bgt.n	8015c28 <__hexnan+0xa0>
 8015c1e:	462a      	mov	r2, r5
 8015c20:	4649      	mov	r1, r9
 8015c22:	4620      	mov	r0, r4
 8015c24:	f7ff ff8a 	bl	8015b3c <L_shift>
 8015c28:	4544      	cmp	r4, r8
 8015c2a:	d928      	bls.n	8015c7e <__hexnan+0xf6>
 8015c2c:	4643      	mov	r3, r8
 8015c2e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015c32:	f843 2b04 	str.w	r2, [r3], #4
 8015c36:	42a6      	cmp	r6, r4
 8015c38:	d2f9      	bcs.n	8015c2e <__hexnan+0xa6>
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	f843 2b04 	str.w	r2, [r3], #4
 8015c40:	429e      	cmp	r6, r3
 8015c42:	d2fb      	bcs.n	8015c3c <__hexnan+0xb4>
 8015c44:	6833      	ldr	r3, [r6, #0]
 8015c46:	b91b      	cbnz	r3, 8015c50 <__hexnan+0xc8>
 8015c48:	4546      	cmp	r6, r8
 8015c4a:	d127      	bne.n	8015c9c <__hexnan+0x114>
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	6033      	str	r3, [r6, #0]
 8015c50:	2005      	movs	r0, #5
 8015c52:	e026      	b.n	8015ca2 <__hexnan+0x11a>
 8015c54:	3501      	adds	r5, #1
 8015c56:	2d08      	cmp	r5, #8
 8015c58:	f10b 0b01 	add.w	fp, fp, #1
 8015c5c:	dd06      	ble.n	8015c6c <__hexnan+0xe4>
 8015c5e:	4544      	cmp	r4, r8
 8015c60:	d9cf      	bls.n	8015c02 <__hexnan+0x7a>
 8015c62:	2300      	movs	r3, #0
 8015c64:	f844 3c04 	str.w	r3, [r4, #-4]
 8015c68:	2501      	movs	r5, #1
 8015c6a:	3c04      	subs	r4, #4
 8015c6c:	6822      	ldr	r2, [r4, #0]
 8015c6e:	f000 000f 	and.w	r0, r0, #15
 8015c72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015c76:	6020      	str	r0, [r4, #0]
 8015c78:	e7c3      	b.n	8015c02 <__hexnan+0x7a>
 8015c7a:	2508      	movs	r5, #8
 8015c7c:	e7c1      	b.n	8015c02 <__hexnan+0x7a>
 8015c7e:	9b01      	ldr	r3, [sp, #4]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d0df      	beq.n	8015c44 <__hexnan+0xbc>
 8015c84:	f04f 32ff 	mov.w	r2, #4294967295
 8015c88:	f1c3 0320 	rsb	r3, r3, #32
 8015c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8015c90:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015c94:	401a      	ands	r2, r3
 8015c96:	f847 2c04 	str.w	r2, [r7, #-4]
 8015c9a:	e7d3      	b.n	8015c44 <__hexnan+0xbc>
 8015c9c:	3e04      	subs	r6, #4
 8015c9e:	e7d1      	b.n	8015c44 <__hexnan+0xbc>
 8015ca0:	2004      	movs	r0, #4
 8015ca2:	b007      	add	sp, #28
 8015ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ca8 <__locale_ctype_ptr_l>:
 8015ca8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015cac:	4770      	bx	lr
	...

08015cb0 <__locale_ctype_ptr>:
 8015cb0:	4b04      	ldr	r3, [pc, #16]	; (8015cc4 <__locale_ctype_ptr+0x14>)
 8015cb2:	4a05      	ldr	r2, [pc, #20]	; (8015cc8 <__locale_ctype_ptr+0x18>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	6a1b      	ldr	r3, [r3, #32]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	bf08      	it	eq
 8015cbc:	4613      	moveq	r3, r2
 8015cbe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015cc2:	4770      	bx	lr
 8015cc4:	2000000c 	.word	0x2000000c
 8015cc8:	20000070 	.word	0x20000070

08015ccc <__localeconv_l>:
 8015ccc:	30f0      	adds	r0, #240	; 0xf0
 8015cce:	4770      	bx	lr

08015cd0 <_localeconv_r>:
 8015cd0:	4b04      	ldr	r3, [pc, #16]	; (8015ce4 <_localeconv_r+0x14>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	6a18      	ldr	r0, [r3, #32]
 8015cd6:	4b04      	ldr	r3, [pc, #16]	; (8015ce8 <_localeconv_r+0x18>)
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	bf08      	it	eq
 8015cdc:	4618      	moveq	r0, r3
 8015cde:	30f0      	adds	r0, #240	; 0xf0
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	2000000c 	.word	0x2000000c
 8015ce8:	20000070 	.word	0x20000070

08015cec <_lseek_r>:
 8015cec:	b538      	push	{r3, r4, r5, lr}
 8015cee:	4c07      	ldr	r4, [pc, #28]	; (8015d0c <_lseek_r+0x20>)
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	4608      	mov	r0, r1
 8015cf4:	4611      	mov	r1, r2
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	6022      	str	r2, [r4, #0]
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	f7ef fec8 	bl	8005a90 <_lseek>
 8015d00:	1c43      	adds	r3, r0, #1
 8015d02:	d102      	bne.n	8015d0a <_lseek_r+0x1e>
 8015d04:	6823      	ldr	r3, [r4, #0]
 8015d06:	b103      	cbz	r3, 8015d0a <_lseek_r+0x1e>
 8015d08:	602b      	str	r3, [r5, #0]
 8015d0a:	bd38      	pop	{r3, r4, r5, pc}
 8015d0c:	2003b434 	.word	0x2003b434

08015d10 <__swhatbuf_r>:
 8015d10:	b570      	push	{r4, r5, r6, lr}
 8015d12:	460e      	mov	r6, r1
 8015d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d18:	2900      	cmp	r1, #0
 8015d1a:	b096      	sub	sp, #88	; 0x58
 8015d1c:	4614      	mov	r4, r2
 8015d1e:	461d      	mov	r5, r3
 8015d20:	da07      	bge.n	8015d32 <__swhatbuf_r+0x22>
 8015d22:	2300      	movs	r3, #0
 8015d24:	602b      	str	r3, [r5, #0]
 8015d26:	89b3      	ldrh	r3, [r6, #12]
 8015d28:	061a      	lsls	r2, r3, #24
 8015d2a:	d410      	bmi.n	8015d4e <__swhatbuf_r+0x3e>
 8015d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d30:	e00e      	b.n	8015d50 <__swhatbuf_r+0x40>
 8015d32:	466a      	mov	r2, sp
 8015d34:	f001 fbf8 	bl	8017528 <_fstat_r>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	dbf2      	blt.n	8015d22 <__swhatbuf_r+0x12>
 8015d3c:	9a01      	ldr	r2, [sp, #4]
 8015d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d46:	425a      	negs	r2, r3
 8015d48:	415a      	adcs	r2, r3
 8015d4a:	602a      	str	r2, [r5, #0]
 8015d4c:	e7ee      	b.n	8015d2c <__swhatbuf_r+0x1c>
 8015d4e:	2340      	movs	r3, #64	; 0x40
 8015d50:	2000      	movs	r0, #0
 8015d52:	6023      	str	r3, [r4, #0]
 8015d54:	b016      	add	sp, #88	; 0x58
 8015d56:	bd70      	pop	{r4, r5, r6, pc}

08015d58 <__smakebuf_r>:
 8015d58:	898b      	ldrh	r3, [r1, #12]
 8015d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d5c:	079d      	lsls	r5, r3, #30
 8015d5e:	4606      	mov	r6, r0
 8015d60:	460c      	mov	r4, r1
 8015d62:	d507      	bpl.n	8015d74 <__smakebuf_r+0x1c>
 8015d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d68:	6023      	str	r3, [r4, #0]
 8015d6a:	6123      	str	r3, [r4, #16]
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	6163      	str	r3, [r4, #20]
 8015d70:	b002      	add	sp, #8
 8015d72:	bd70      	pop	{r4, r5, r6, pc}
 8015d74:	ab01      	add	r3, sp, #4
 8015d76:	466a      	mov	r2, sp
 8015d78:	f7ff ffca 	bl	8015d10 <__swhatbuf_r>
 8015d7c:	9900      	ldr	r1, [sp, #0]
 8015d7e:	4605      	mov	r5, r0
 8015d80:	4630      	mov	r0, r6
 8015d82:	f000 fca9 	bl	80166d8 <_malloc_r>
 8015d86:	b948      	cbnz	r0, 8015d9c <__smakebuf_r+0x44>
 8015d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d8c:	059a      	lsls	r2, r3, #22
 8015d8e:	d4ef      	bmi.n	8015d70 <__smakebuf_r+0x18>
 8015d90:	f023 0303 	bic.w	r3, r3, #3
 8015d94:	f043 0302 	orr.w	r3, r3, #2
 8015d98:	81a3      	strh	r3, [r4, #12]
 8015d9a:	e7e3      	b.n	8015d64 <__smakebuf_r+0xc>
 8015d9c:	4b0d      	ldr	r3, [pc, #52]	; (8015dd4 <__smakebuf_r+0x7c>)
 8015d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015da0:	89a3      	ldrh	r3, [r4, #12]
 8015da2:	6020      	str	r0, [r4, #0]
 8015da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015da8:	81a3      	strh	r3, [r4, #12]
 8015daa:	9b00      	ldr	r3, [sp, #0]
 8015dac:	6163      	str	r3, [r4, #20]
 8015dae:	9b01      	ldr	r3, [sp, #4]
 8015db0:	6120      	str	r0, [r4, #16]
 8015db2:	b15b      	cbz	r3, 8015dcc <__smakebuf_r+0x74>
 8015db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015db8:	4630      	mov	r0, r6
 8015dba:	f001 fbc7 	bl	801754c <_isatty_r>
 8015dbe:	b128      	cbz	r0, 8015dcc <__smakebuf_r+0x74>
 8015dc0:	89a3      	ldrh	r3, [r4, #12]
 8015dc2:	f023 0303 	bic.w	r3, r3, #3
 8015dc6:	f043 0301 	orr.w	r3, r3, #1
 8015dca:	81a3      	strh	r3, [r4, #12]
 8015dcc:	89a3      	ldrh	r3, [r4, #12]
 8015dce:	431d      	orrs	r5, r3
 8015dd0:	81a5      	strh	r5, [r4, #12]
 8015dd2:	e7cd      	b.n	8015d70 <__smakebuf_r+0x18>
 8015dd4:	08015511 	.word	0x08015511

08015dd8 <malloc>:
 8015dd8:	4b02      	ldr	r3, [pc, #8]	; (8015de4 <malloc+0xc>)
 8015dda:	4601      	mov	r1, r0
 8015ddc:	6818      	ldr	r0, [r3, #0]
 8015dde:	f000 bc7b 	b.w	80166d8 <_malloc_r>
 8015de2:	bf00      	nop
 8015de4:	2000000c 	.word	0x2000000c

08015de8 <__ascii_mbtowc>:
 8015de8:	b082      	sub	sp, #8
 8015dea:	b901      	cbnz	r1, 8015dee <__ascii_mbtowc+0x6>
 8015dec:	a901      	add	r1, sp, #4
 8015dee:	b142      	cbz	r2, 8015e02 <__ascii_mbtowc+0x1a>
 8015df0:	b14b      	cbz	r3, 8015e06 <__ascii_mbtowc+0x1e>
 8015df2:	7813      	ldrb	r3, [r2, #0]
 8015df4:	600b      	str	r3, [r1, #0]
 8015df6:	7812      	ldrb	r2, [r2, #0]
 8015df8:	1c10      	adds	r0, r2, #0
 8015dfa:	bf18      	it	ne
 8015dfc:	2001      	movne	r0, #1
 8015dfe:	b002      	add	sp, #8
 8015e00:	4770      	bx	lr
 8015e02:	4610      	mov	r0, r2
 8015e04:	e7fb      	b.n	8015dfe <__ascii_mbtowc+0x16>
 8015e06:	f06f 0001 	mvn.w	r0, #1
 8015e0a:	e7f8      	b.n	8015dfe <__ascii_mbtowc+0x16>

08015e0c <memcpy>:
 8015e0c:	b510      	push	{r4, lr}
 8015e0e:	1e43      	subs	r3, r0, #1
 8015e10:	440a      	add	r2, r1
 8015e12:	4291      	cmp	r1, r2
 8015e14:	d100      	bne.n	8015e18 <memcpy+0xc>
 8015e16:	bd10      	pop	{r4, pc}
 8015e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e20:	e7f7      	b.n	8015e12 <memcpy+0x6>

08015e22 <_Balloc>:
 8015e22:	b570      	push	{r4, r5, r6, lr}
 8015e24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015e26:	4604      	mov	r4, r0
 8015e28:	460e      	mov	r6, r1
 8015e2a:	b93d      	cbnz	r5, 8015e3c <_Balloc+0x1a>
 8015e2c:	2010      	movs	r0, #16
 8015e2e:	f7ff ffd3 	bl	8015dd8 <malloc>
 8015e32:	6260      	str	r0, [r4, #36]	; 0x24
 8015e34:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015e38:	6005      	str	r5, [r0, #0]
 8015e3a:	60c5      	str	r5, [r0, #12]
 8015e3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015e3e:	68eb      	ldr	r3, [r5, #12]
 8015e40:	b183      	cbz	r3, 8015e64 <_Balloc+0x42>
 8015e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e44:	68db      	ldr	r3, [r3, #12]
 8015e46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015e4a:	b9b8      	cbnz	r0, 8015e7c <_Balloc+0x5a>
 8015e4c:	2101      	movs	r1, #1
 8015e4e:	fa01 f506 	lsl.w	r5, r1, r6
 8015e52:	1d6a      	adds	r2, r5, #5
 8015e54:	0092      	lsls	r2, r2, #2
 8015e56:	4620      	mov	r0, r4
 8015e58:	f000 fbe1 	bl	801661e <_calloc_r>
 8015e5c:	b160      	cbz	r0, 8015e78 <_Balloc+0x56>
 8015e5e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015e62:	e00e      	b.n	8015e82 <_Balloc+0x60>
 8015e64:	2221      	movs	r2, #33	; 0x21
 8015e66:	2104      	movs	r1, #4
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f000 fbd8 	bl	801661e <_calloc_r>
 8015e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e70:	60e8      	str	r0, [r5, #12]
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d1e4      	bne.n	8015e42 <_Balloc+0x20>
 8015e78:	2000      	movs	r0, #0
 8015e7a:	bd70      	pop	{r4, r5, r6, pc}
 8015e7c:	6802      	ldr	r2, [r0, #0]
 8015e7e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015e82:	2300      	movs	r3, #0
 8015e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015e88:	e7f7      	b.n	8015e7a <_Balloc+0x58>

08015e8a <_Bfree>:
 8015e8a:	b570      	push	{r4, r5, r6, lr}
 8015e8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015e8e:	4606      	mov	r6, r0
 8015e90:	460d      	mov	r5, r1
 8015e92:	b93c      	cbnz	r4, 8015ea4 <_Bfree+0x1a>
 8015e94:	2010      	movs	r0, #16
 8015e96:	f7ff ff9f 	bl	8015dd8 <malloc>
 8015e9a:	6270      	str	r0, [r6, #36]	; 0x24
 8015e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ea0:	6004      	str	r4, [r0, #0]
 8015ea2:	60c4      	str	r4, [r0, #12]
 8015ea4:	b13d      	cbz	r5, 8015eb6 <_Bfree+0x2c>
 8015ea6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015ea8:	686a      	ldr	r2, [r5, #4]
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015eb0:	6029      	str	r1, [r5, #0]
 8015eb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}

08015eb8 <__multadd>:
 8015eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebc:	690d      	ldr	r5, [r1, #16]
 8015ebe:	461f      	mov	r7, r3
 8015ec0:	4606      	mov	r6, r0
 8015ec2:	460c      	mov	r4, r1
 8015ec4:	f101 0c14 	add.w	ip, r1, #20
 8015ec8:	2300      	movs	r3, #0
 8015eca:	f8dc 0000 	ldr.w	r0, [ip]
 8015ece:	b281      	uxth	r1, r0
 8015ed0:	fb02 7101 	mla	r1, r2, r1, r7
 8015ed4:	0c0f      	lsrs	r7, r1, #16
 8015ed6:	0c00      	lsrs	r0, r0, #16
 8015ed8:	fb02 7000 	mla	r0, r2, r0, r7
 8015edc:	b289      	uxth	r1, r1
 8015ede:	3301      	adds	r3, #1
 8015ee0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015ee4:	429d      	cmp	r5, r3
 8015ee6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015eea:	f84c 1b04 	str.w	r1, [ip], #4
 8015eee:	dcec      	bgt.n	8015eca <__multadd+0x12>
 8015ef0:	b1d7      	cbz	r7, 8015f28 <__multadd+0x70>
 8015ef2:	68a3      	ldr	r3, [r4, #8]
 8015ef4:	42ab      	cmp	r3, r5
 8015ef6:	dc12      	bgt.n	8015f1e <__multadd+0x66>
 8015ef8:	6861      	ldr	r1, [r4, #4]
 8015efa:	4630      	mov	r0, r6
 8015efc:	3101      	adds	r1, #1
 8015efe:	f7ff ff90 	bl	8015e22 <_Balloc>
 8015f02:	6922      	ldr	r2, [r4, #16]
 8015f04:	3202      	adds	r2, #2
 8015f06:	f104 010c 	add.w	r1, r4, #12
 8015f0a:	4680      	mov	r8, r0
 8015f0c:	0092      	lsls	r2, r2, #2
 8015f0e:	300c      	adds	r0, #12
 8015f10:	f7ff ff7c 	bl	8015e0c <memcpy>
 8015f14:	4621      	mov	r1, r4
 8015f16:	4630      	mov	r0, r6
 8015f18:	f7ff ffb7 	bl	8015e8a <_Bfree>
 8015f1c:	4644      	mov	r4, r8
 8015f1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015f22:	3501      	adds	r5, #1
 8015f24:	615f      	str	r7, [r3, #20]
 8015f26:	6125      	str	r5, [r4, #16]
 8015f28:	4620      	mov	r0, r4
 8015f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f2e <__s2b>:
 8015f2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f32:	460c      	mov	r4, r1
 8015f34:	4615      	mov	r5, r2
 8015f36:	461f      	mov	r7, r3
 8015f38:	2209      	movs	r2, #9
 8015f3a:	3308      	adds	r3, #8
 8015f3c:	4606      	mov	r6, r0
 8015f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015f42:	2100      	movs	r1, #0
 8015f44:	2201      	movs	r2, #1
 8015f46:	429a      	cmp	r2, r3
 8015f48:	db20      	blt.n	8015f8c <__s2b+0x5e>
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	f7ff ff69 	bl	8015e22 <_Balloc>
 8015f50:	9b08      	ldr	r3, [sp, #32]
 8015f52:	6143      	str	r3, [r0, #20]
 8015f54:	2d09      	cmp	r5, #9
 8015f56:	f04f 0301 	mov.w	r3, #1
 8015f5a:	6103      	str	r3, [r0, #16]
 8015f5c:	dd19      	ble.n	8015f92 <__s2b+0x64>
 8015f5e:	f104 0809 	add.w	r8, r4, #9
 8015f62:	46c1      	mov	r9, r8
 8015f64:	442c      	add	r4, r5
 8015f66:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015f6a:	4601      	mov	r1, r0
 8015f6c:	3b30      	subs	r3, #48	; 0x30
 8015f6e:	220a      	movs	r2, #10
 8015f70:	4630      	mov	r0, r6
 8015f72:	f7ff ffa1 	bl	8015eb8 <__multadd>
 8015f76:	45a1      	cmp	r9, r4
 8015f78:	d1f5      	bne.n	8015f66 <__s2b+0x38>
 8015f7a:	eb08 0405 	add.w	r4, r8, r5
 8015f7e:	3c08      	subs	r4, #8
 8015f80:	1b2d      	subs	r5, r5, r4
 8015f82:	1963      	adds	r3, r4, r5
 8015f84:	42bb      	cmp	r3, r7
 8015f86:	db07      	blt.n	8015f98 <__s2b+0x6a>
 8015f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f8c:	0052      	lsls	r2, r2, #1
 8015f8e:	3101      	adds	r1, #1
 8015f90:	e7d9      	b.n	8015f46 <__s2b+0x18>
 8015f92:	340a      	adds	r4, #10
 8015f94:	2509      	movs	r5, #9
 8015f96:	e7f3      	b.n	8015f80 <__s2b+0x52>
 8015f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015f9c:	4601      	mov	r1, r0
 8015f9e:	3b30      	subs	r3, #48	; 0x30
 8015fa0:	220a      	movs	r2, #10
 8015fa2:	4630      	mov	r0, r6
 8015fa4:	f7ff ff88 	bl	8015eb8 <__multadd>
 8015fa8:	e7eb      	b.n	8015f82 <__s2b+0x54>

08015faa <__hi0bits>:
 8015faa:	0c02      	lsrs	r2, r0, #16
 8015fac:	0412      	lsls	r2, r2, #16
 8015fae:	4603      	mov	r3, r0
 8015fb0:	b9b2      	cbnz	r2, 8015fe0 <__hi0bits+0x36>
 8015fb2:	0403      	lsls	r3, r0, #16
 8015fb4:	2010      	movs	r0, #16
 8015fb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015fba:	bf04      	itt	eq
 8015fbc:	021b      	lsleq	r3, r3, #8
 8015fbe:	3008      	addeq	r0, #8
 8015fc0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015fc4:	bf04      	itt	eq
 8015fc6:	011b      	lsleq	r3, r3, #4
 8015fc8:	3004      	addeq	r0, #4
 8015fca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015fce:	bf04      	itt	eq
 8015fd0:	009b      	lsleq	r3, r3, #2
 8015fd2:	3002      	addeq	r0, #2
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	db06      	blt.n	8015fe6 <__hi0bits+0x3c>
 8015fd8:	005b      	lsls	r3, r3, #1
 8015fda:	d503      	bpl.n	8015fe4 <__hi0bits+0x3a>
 8015fdc:	3001      	adds	r0, #1
 8015fde:	4770      	bx	lr
 8015fe0:	2000      	movs	r0, #0
 8015fe2:	e7e8      	b.n	8015fb6 <__hi0bits+0xc>
 8015fe4:	2020      	movs	r0, #32
 8015fe6:	4770      	bx	lr

08015fe8 <__lo0bits>:
 8015fe8:	6803      	ldr	r3, [r0, #0]
 8015fea:	f013 0207 	ands.w	r2, r3, #7
 8015fee:	4601      	mov	r1, r0
 8015ff0:	d00b      	beq.n	801600a <__lo0bits+0x22>
 8015ff2:	07da      	lsls	r2, r3, #31
 8015ff4:	d423      	bmi.n	801603e <__lo0bits+0x56>
 8015ff6:	0798      	lsls	r0, r3, #30
 8015ff8:	bf49      	itett	mi
 8015ffa:	085b      	lsrmi	r3, r3, #1
 8015ffc:	089b      	lsrpl	r3, r3, #2
 8015ffe:	2001      	movmi	r0, #1
 8016000:	600b      	strmi	r3, [r1, #0]
 8016002:	bf5c      	itt	pl
 8016004:	600b      	strpl	r3, [r1, #0]
 8016006:	2002      	movpl	r0, #2
 8016008:	4770      	bx	lr
 801600a:	b298      	uxth	r0, r3
 801600c:	b9a8      	cbnz	r0, 801603a <__lo0bits+0x52>
 801600e:	0c1b      	lsrs	r3, r3, #16
 8016010:	2010      	movs	r0, #16
 8016012:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016016:	bf04      	itt	eq
 8016018:	0a1b      	lsreq	r3, r3, #8
 801601a:	3008      	addeq	r0, #8
 801601c:	071a      	lsls	r2, r3, #28
 801601e:	bf04      	itt	eq
 8016020:	091b      	lsreq	r3, r3, #4
 8016022:	3004      	addeq	r0, #4
 8016024:	079a      	lsls	r2, r3, #30
 8016026:	bf04      	itt	eq
 8016028:	089b      	lsreq	r3, r3, #2
 801602a:	3002      	addeq	r0, #2
 801602c:	07da      	lsls	r2, r3, #31
 801602e:	d402      	bmi.n	8016036 <__lo0bits+0x4e>
 8016030:	085b      	lsrs	r3, r3, #1
 8016032:	d006      	beq.n	8016042 <__lo0bits+0x5a>
 8016034:	3001      	adds	r0, #1
 8016036:	600b      	str	r3, [r1, #0]
 8016038:	4770      	bx	lr
 801603a:	4610      	mov	r0, r2
 801603c:	e7e9      	b.n	8016012 <__lo0bits+0x2a>
 801603e:	2000      	movs	r0, #0
 8016040:	4770      	bx	lr
 8016042:	2020      	movs	r0, #32
 8016044:	4770      	bx	lr

08016046 <__i2b>:
 8016046:	b510      	push	{r4, lr}
 8016048:	460c      	mov	r4, r1
 801604a:	2101      	movs	r1, #1
 801604c:	f7ff fee9 	bl	8015e22 <_Balloc>
 8016050:	2201      	movs	r2, #1
 8016052:	6144      	str	r4, [r0, #20]
 8016054:	6102      	str	r2, [r0, #16]
 8016056:	bd10      	pop	{r4, pc}

08016058 <__multiply>:
 8016058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	4614      	mov	r4, r2
 801605e:	690a      	ldr	r2, [r1, #16]
 8016060:	6923      	ldr	r3, [r4, #16]
 8016062:	429a      	cmp	r2, r3
 8016064:	bfb8      	it	lt
 8016066:	460b      	movlt	r3, r1
 8016068:	4688      	mov	r8, r1
 801606a:	bfbc      	itt	lt
 801606c:	46a0      	movlt	r8, r4
 801606e:	461c      	movlt	r4, r3
 8016070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016074:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016078:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801607c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016080:	eb07 0609 	add.w	r6, r7, r9
 8016084:	42b3      	cmp	r3, r6
 8016086:	bfb8      	it	lt
 8016088:	3101      	addlt	r1, #1
 801608a:	f7ff feca 	bl	8015e22 <_Balloc>
 801608e:	f100 0514 	add.w	r5, r0, #20
 8016092:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016096:	462b      	mov	r3, r5
 8016098:	2200      	movs	r2, #0
 801609a:	4573      	cmp	r3, lr
 801609c:	d316      	bcc.n	80160cc <__multiply+0x74>
 801609e:	f104 0214 	add.w	r2, r4, #20
 80160a2:	f108 0114 	add.w	r1, r8, #20
 80160a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80160aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80160ae:	9300      	str	r3, [sp, #0]
 80160b0:	9b00      	ldr	r3, [sp, #0]
 80160b2:	9201      	str	r2, [sp, #4]
 80160b4:	4293      	cmp	r3, r2
 80160b6:	d80c      	bhi.n	80160d2 <__multiply+0x7a>
 80160b8:	2e00      	cmp	r6, #0
 80160ba:	dd03      	ble.n	80160c4 <__multiply+0x6c>
 80160bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d05d      	beq.n	8016180 <__multiply+0x128>
 80160c4:	6106      	str	r6, [r0, #16]
 80160c6:	b003      	add	sp, #12
 80160c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160cc:	f843 2b04 	str.w	r2, [r3], #4
 80160d0:	e7e3      	b.n	801609a <__multiply+0x42>
 80160d2:	f8b2 b000 	ldrh.w	fp, [r2]
 80160d6:	f1bb 0f00 	cmp.w	fp, #0
 80160da:	d023      	beq.n	8016124 <__multiply+0xcc>
 80160dc:	4689      	mov	r9, r1
 80160de:	46ac      	mov	ip, r5
 80160e0:	f04f 0800 	mov.w	r8, #0
 80160e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80160e8:	f8dc a000 	ldr.w	sl, [ip]
 80160ec:	b2a3      	uxth	r3, r4
 80160ee:	fa1f fa8a 	uxth.w	sl, sl
 80160f2:	fb0b a303 	mla	r3, fp, r3, sl
 80160f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80160fa:	f8dc 4000 	ldr.w	r4, [ip]
 80160fe:	4443      	add	r3, r8
 8016100:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016104:	fb0b 840a 	mla	r4, fp, sl, r8
 8016108:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801610c:	46e2      	mov	sl, ip
 801610e:	b29b      	uxth	r3, r3
 8016110:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016114:	454f      	cmp	r7, r9
 8016116:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801611a:	f84a 3b04 	str.w	r3, [sl], #4
 801611e:	d82b      	bhi.n	8016178 <__multiply+0x120>
 8016120:	f8cc 8004 	str.w	r8, [ip, #4]
 8016124:	9b01      	ldr	r3, [sp, #4]
 8016126:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801612a:	3204      	adds	r2, #4
 801612c:	f1ba 0f00 	cmp.w	sl, #0
 8016130:	d020      	beq.n	8016174 <__multiply+0x11c>
 8016132:	682b      	ldr	r3, [r5, #0]
 8016134:	4689      	mov	r9, r1
 8016136:	46a8      	mov	r8, r5
 8016138:	f04f 0b00 	mov.w	fp, #0
 801613c:	f8b9 c000 	ldrh.w	ip, [r9]
 8016140:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016144:	fb0a 440c 	mla	r4, sl, ip, r4
 8016148:	445c      	add	r4, fp
 801614a:	46c4      	mov	ip, r8
 801614c:	b29b      	uxth	r3, r3
 801614e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016152:	f84c 3b04 	str.w	r3, [ip], #4
 8016156:	f859 3b04 	ldr.w	r3, [r9], #4
 801615a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801615e:	0c1b      	lsrs	r3, r3, #16
 8016160:	fb0a b303 	mla	r3, sl, r3, fp
 8016164:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016168:	454f      	cmp	r7, r9
 801616a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801616e:	d805      	bhi.n	801617c <__multiply+0x124>
 8016170:	f8c8 3004 	str.w	r3, [r8, #4]
 8016174:	3504      	adds	r5, #4
 8016176:	e79b      	b.n	80160b0 <__multiply+0x58>
 8016178:	46d4      	mov	ip, sl
 801617a:	e7b3      	b.n	80160e4 <__multiply+0x8c>
 801617c:	46e0      	mov	r8, ip
 801617e:	e7dd      	b.n	801613c <__multiply+0xe4>
 8016180:	3e01      	subs	r6, #1
 8016182:	e799      	b.n	80160b8 <__multiply+0x60>

08016184 <__pow5mult>:
 8016184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016188:	4615      	mov	r5, r2
 801618a:	f012 0203 	ands.w	r2, r2, #3
 801618e:	4606      	mov	r6, r0
 8016190:	460f      	mov	r7, r1
 8016192:	d007      	beq.n	80161a4 <__pow5mult+0x20>
 8016194:	3a01      	subs	r2, #1
 8016196:	4c21      	ldr	r4, [pc, #132]	; (801621c <__pow5mult+0x98>)
 8016198:	2300      	movs	r3, #0
 801619a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801619e:	f7ff fe8b 	bl	8015eb8 <__multadd>
 80161a2:	4607      	mov	r7, r0
 80161a4:	10ad      	asrs	r5, r5, #2
 80161a6:	d035      	beq.n	8016214 <__pow5mult+0x90>
 80161a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80161aa:	b93c      	cbnz	r4, 80161bc <__pow5mult+0x38>
 80161ac:	2010      	movs	r0, #16
 80161ae:	f7ff fe13 	bl	8015dd8 <malloc>
 80161b2:	6270      	str	r0, [r6, #36]	; 0x24
 80161b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80161b8:	6004      	str	r4, [r0, #0]
 80161ba:	60c4      	str	r4, [r0, #12]
 80161bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80161c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80161c4:	b94c      	cbnz	r4, 80161da <__pow5mult+0x56>
 80161c6:	f240 2171 	movw	r1, #625	; 0x271
 80161ca:	4630      	mov	r0, r6
 80161cc:	f7ff ff3b 	bl	8016046 <__i2b>
 80161d0:	2300      	movs	r3, #0
 80161d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80161d6:	4604      	mov	r4, r0
 80161d8:	6003      	str	r3, [r0, #0]
 80161da:	f04f 0800 	mov.w	r8, #0
 80161de:	07eb      	lsls	r3, r5, #31
 80161e0:	d50a      	bpl.n	80161f8 <__pow5mult+0x74>
 80161e2:	4639      	mov	r1, r7
 80161e4:	4622      	mov	r2, r4
 80161e6:	4630      	mov	r0, r6
 80161e8:	f7ff ff36 	bl	8016058 <__multiply>
 80161ec:	4639      	mov	r1, r7
 80161ee:	4681      	mov	r9, r0
 80161f0:	4630      	mov	r0, r6
 80161f2:	f7ff fe4a 	bl	8015e8a <_Bfree>
 80161f6:	464f      	mov	r7, r9
 80161f8:	106d      	asrs	r5, r5, #1
 80161fa:	d00b      	beq.n	8016214 <__pow5mult+0x90>
 80161fc:	6820      	ldr	r0, [r4, #0]
 80161fe:	b938      	cbnz	r0, 8016210 <__pow5mult+0x8c>
 8016200:	4622      	mov	r2, r4
 8016202:	4621      	mov	r1, r4
 8016204:	4630      	mov	r0, r6
 8016206:	f7ff ff27 	bl	8016058 <__multiply>
 801620a:	6020      	str	r0, [r4, #0]
 801620c:	f8c0 8000 	str.w	r8, [r0]
 8016210:	4604      	mov	r4, r0
 8016212:	e7e4      	b.n	80161de <__pow5mult+0x5a>
 8016214:	4638      	mov	r0, r7
 8016216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801621a:	bf00      	nop
 801621c:	08017cc0 	.word	0x08017cc0

08016220 <__lshift>:
 8016220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016224:	460c      	mov	r4, r1
 8016226:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801622a:	6923      	ldr	r3, [r4, #16]
 801622c:	6849      	ldr	r1, [r1, #4]
 801622e:	eb0a 0903 	add.w	r9, sl, r3
 8016232:	68a3      	ldr	r3, [r4, #8]
 8016234:	4607      	mov	r7, r0
 8016236:	4616      	mov	r6, r2
 8016238:	f109 0501 	add.w	r5, r9, #1
 801623c:	42ab      	cmp	r3, r5
 801623e:	db32      	blt.n	80162a6 <__lshift+0x86>
 8016240:	4638      	mov	r0, r7
 8016242:	f7ff fdee 	bl	8015e22 <_Balloc>
 8016246:	2300      	movs	r3, #0
 8016248:	4680      	mov	r8, r0
 801624a:	f100 0114 	add.w	r1, r0, #20
 801624e:	461a      	mov	r2, r3
 8016250:	4553      	cmp	r3, sl
 8016252:	db2b      	blt.n	80162ac <__lshift+0x8c>
 8016254:	6920      	ldr	r0, [r4, #16]
 8016256:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801625a:	f104 0314 	add.w	r3, r4, #20
 801625e:	f016 021f 	ands.w	r2, r6, #31
 8016262:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016266:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801626a:	d025      	beq.n	80162b8 <__lshift+0x98>
 801626c:	f1c2 0e20 	rsb	lr, r2, #32
 8016270:	2000      	movs	r0, #0
 8016272:	681e      	ldr	r6, [r3, #0]
 8016274:	468a      	mov	sl, r1
 8016276:	4096      	lsls	r6, r2
 8016278:	4330      	orrs	r0, r6
 801627a:	f84a 0b04 	str.w	r0, [sl], #4
 801627e:	f853 0b04 	ldr.w	r0, [r3], #4
 8016282:	459c      	cmp	ip, r3
 8016284:	fa20 f00e 	lsr.w	r0, r0, lr
 8016288:	d814      	bhi.n	80162b4 <__lshift+0x94>
 801628a:	6048      	str	r0, [r1, #4]
 801628c:	b108      	cbz	r0, 8016292 <__lshift+0x72>
 801628e:	f109 0502 	add.w	r5, r9, #2
 8016292:	3d01      	subs	r5, #1
 8016294:	4638      	mov	r0, r7
 8016296:	f8c8 5010 	str.w	r5, [r8, #16]
 801629a:	4621      	mov	r1, r4
 801629c:	f7ff fdf5 	bl	8015e8a <_Bfree>
 80162a0:	4640      	mov	r0, r8
 80162a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162a6:	3101      	adds	r1, #1
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	e7c7      	b.n	801623c <__lshift+0x1c>
 80162ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80162b0:	3301      	adds	r3, #1
 80162b2:	e7cd      	b.n	8016250 <__lshift+0x30>
 80162b4:	4651      	mov	r1, sl
 80162b6:	e7dc      	b.n	8016272 <__lshift+0x52>
 80162b8:	3904      	subs	r1, #4
 80162ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80162be:	f841 2f04 	str.w	r2, [r1, #4]!
 80162c2:	459c      	cmp	ip, r3
 80162c4:	d8f9      	bhi.n	80162ba <__lshift+0x9a>
 80162c6:	e7e4      	b.n	8016292 <__lshift+0x72>

080162c8 <__mcmp>:
 80162c8:	6903      	ldr	r3, [r0, #16]
 80162ca:	690a      	ldr	r2, [r1, #16]
 80162cc:	1a9b      	subs	r3, r3, r2
 80162ce:	b530      	push	{r4, r5, lr}
 80162d0:	d10c      	bne.n	80162ec <__mcmp+0x24>
 80162d2:	0092      	lsls	r2, r2, #2
 80162d4:	3014      	adds	r0, #20
 80162d6:	3114      	adds	r1, #20
 80162d8:	1884      	adds	r4, r0, r2
 80162da:	4411      	add	r1, r2
 80162dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80162e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80162e4:	4295      	cmp	r5, r2
 80162e6:	d003      	beq.n	80162f0 <__mcmp+0x28>
 80162e8:	d305      	bcc.n	80162f6 <__mcmp+0x2e>
 80162ea:	2301      	movs	r3, #1
 80162ec:	4618      	mov	r0, r3
 80162ee:	bd30      	pop	{r4, r5, pc}
 80162f0:	42a0      	cmp	r0, r4
 80162f2:	d3f3      	bcc.n	80162dc <__mcmp+0x14>
 80162f4:	e7fa      	b.n	80162ec <__mcmp+0x24>
 80162f6:	f04f 33ff 	mov.w	r3, #4294967295
 80162fa:	e7f7      	b.n	80162ec <__mcmp+0x24>

080162fc <__mdiff>:
 80162fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016300:	460d      	mov	r5, r1
 8016302:	4607      	mov	r7, r0
 8016304:	4611      	mov	r1, r2
 8016306:	4628      	mov	r0, r5
 8016308:	4614      	mov	r4, r2
 801630a:	f7ff ffdd 	bl	80162c8 <__mcmp>
 801630e:	1e06      	subs	r6, r0, #0
 8016310:	d108      	bne.n	8016324 <__mdiff+0x28>
 8016312:	4631      	mov	r1, r6
 8016314:	4638      	mov	r0, r7
 8016316:	f7ff fd84 	bl	8015e22 <_Balloc>
 801631a:	2301      	movs	r3, #1
 801631c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016324:	bfa4      	itt	ge
 8016326:	4623      	movge	r3, r4
 8016328:	462c      	movge	r4, r5
 801632a:	4638      	mov	r0, r7
 801632c:	6861      	ldr	r1, [r4, #4]
 801632e:	bfa6      	itte	ge
 8016330:	461d      	movge	r5, r3
 8016332:	2600      	movge	r6, #0
 8016334:	2601      	movlt	r6, #1
 8016336:	f7ff fd74 	bl	8015e22 <_Balloc>
 801633a:	692b      	ldr	r3, [r5, #16]
 801633c:	60c6      	str	r6, [r0, #12]
 801633e:	6926      	ldr	r6, [r4, #16]
 8016340:	f105 0914 	add.w	r9, r5, #20
 8016344:	f104 0214 	add.w	r2, r4, #20
 8016348:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801634c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016350:	f100 0514 	add.w	r5, r0, #20
 8016354:	f04f 0e00 	mov.w	lr, #0
 8016358:	f852 ab04 	ldr.w	sl, [r2], #4
 801635c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016360:	fa1e f18a 	uxtah	r1, lr, sl
 8016364:	b2a3      	uxth	r3, r4
 8016366:	1ac9      	subs	r1, r1, r3
 8016368:	0c23      	lsrs	r3, r4, #16
 801636a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801636e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016372:	b289      	uxth	r1, r1
 8016374:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016378:	45c8      	cmp	r8, r9
 801637a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801637e:	4694      	mov	ip, r2
 8016380:	f845 3b04 	str.w	r3, [r5], #4
 8016384:	d8e8      	bhi.n	8016358 <__mdiff+0x5c>
 8016386:	45bc      	cmp	ip, r7
 8016388:	d304      	bcc.n	8016394 <__mdiff+0x98>
 801638a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801638e:	b183      	cbz	r3, 80163b2 <__mdiff+0xb6>
 8016390:	6106      	str	r6, [r0, #16]
 8016392:	e7c5      	b.n	8016320 <__mdiff+0x24>
 8016394:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016398:	fa1e f381 	uxtah	r3, lr, r1
 801639c:	141a      	asrs	r2, r3, #16
 801639e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80163ac:	f845 3b04 	str.w	r3, [r5], #4
 80163b0:	e7e9      	b.n	8016386 <__mdiff+0x8a>
 80163b2:	3e01      	subs	r6, #1
 80163b4:	e7e9      	b.n	801638a <__mdiff+0x8e>
	...

080163b8 <__ulp>:
 80163b8:	4b12      	ldr	r3, [pc, #72]	; (8016404 <__ulp+0x4c>)
 80163ba:	ee10 2a90 	vmov	r2, s1
 80163be:	401a      	ands	r2, r3
 80163c0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dd04      	ble.n	80163d2 <__ulp+0x1a>
 80163c8:	2000      	movs	r0, #0
 80163ca:	4619      	mov	r1, r3
 80163cc:	ec41 0b10 	vmov	d0, r0, r1
 80163d0:	4770      	bx	lr
 80163d2:	425b      	negs	r3, r3
 80163d4:	151b      	asrs	r3, r3, #20
 80163d6:	2b13      	cmp	r3, #19
 80163d8:	f04f 0000 	mov.w	r0, #0
 80163dc:	f04f 0100 	mov.w	r1, #0
 80163e0:	dc04      	bgt.n	80163ec <__ulp+0x34>
 80163e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80163e6:	fa42 f103 	asr.w	r1, r2, r3
 80163ea:	e7ef      	b.n	80163cc <__ulp+0x14>
 80163ec:	3b14      	subs	r3, #20
 80163ee:	2b1e      	cmp	r3, #30
 80163f0:	f04f 0201 	mov.w	r2, #1
 80163f4:	bfda      	itte	le
 80163f6:	f1c3 031f 	rsble	r3, r3, #31
 80163fa:	fa02 f303 	lslle.w	r3, r2, r3
 80163fe:	4613      	movgt	r3, r2
 8016400:	4618      	mov	r0, r3
 8016402:	e7e3      	b.n	80163cc <__ulp+0x14>
 8016404:	7ff00000 	.word	0x7ff00000

08016408 <__b2d>:
 8016408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801640a:	6905      	ldr	r5, [r0, #16]
 801640c:	f100 0714 	add.w	r7, r0, #20
 8016410:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016414:	1f2e      	subs	r6, r5, #4
 8016416:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801641a:	4620      	mov	r0, r4
 801641c:	f7ff fdc5 	bl	8015faa <__hi0bits>
 8016420:	f1c0 0320 	rsb	r3, r0, #32
 8016424:	280a      	cmp	r0, #10
 8016426:	600b      	str	r3, [r1, #0]
 8016428:	f8df c074 	ldr.w	ip, [pc, #116]	; 80164a0 <__b2d+0x98>
 801642c:	dc14      	bgt.n	8016458 <__b2d+0x50>
 801642e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016432:	fa24 f10e 	lsr.w	r1, r4, lr
 8016436:	42b7      	cmp	r7, r6
 8016438:	ea41 030c 	orr.w	r3, r1, ip
 801643c:	bf34      	ite	cc
 801643e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016442:	2100      	movcs	r1, #0
 8016444:	3015      	adds	r0, #21
 8016446:	fa04 f000 	lsl.w	r0, r4, r0
 801644a:	fa21 f10e 	lsr.w	r1, r1, lr
 801644e:	ea40 0201 	orr.w	r2, r0, r1
 8016452:	ec43 2b10 	vmov	d0, r2, r3
 8016456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016458:	42b7      	cmp	r7, r6
 801645a:	bf3a      	itte	cc
 801645c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016460:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016464:	2100      	movcs	r1, #0
 8016466:	380b      	subs	r0, #11
 8016468:	d015      	beq.n	8016496 <__b2d+0x8e>
 801646a:	4084      	lsls	r4, r0
 801646c:	f1c0 0520 	rsb	r5, r0, #32
 8016470:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016474:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016478:	42be      	cmp	r6, r7
 801647a:	fa21 fc05 	lsr.w	ip, r1, r5
 801647e:	ea44 030c 	orr.w	r3, r4, ip
 8016482:	bf8c      	ite	hi
 8016484:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016488:	2400      	movls	r4, #0
 801648a:	fa01 f000 	lsl.w	r0, r1, r0
 801648e:	40ec      	lsrs	r4, r5
 8016490:	ea40 0204 	orr.w	r2, r0, r4
 8016494:	e7dd      	b.n	8016452 <__b2d+0x4a>
 8016496:	ea44 030c 	orr.w	r3, r4, ip
 801649a:	460a      	mov	r2, r1
 801649c:	e7d9      	b.n	8016452 <__b2d+0x4a>
 801649e:	bf00      	nop
 80164a0:	3ff00000 	.word	0x3ff00000

080164a4 <__d2b>:
 80164a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80164a8:	460e      	mov	r6, r1
 80164aa:	2101      	movs	r1, #1
 80164ac:	ec59 8b10 	vmov	r8, r9, d0
 80164b0:	4615      	mov	r5, r2
 80164b2:	f7ff fcb6 	bl	8015e22 <_Balloc>
 80164b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80164ba:	4607      	mov	r7, r0
 80164bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164c0:	bb34      	cbnz	r4, 8016510 <__d2b+0x6c>
 80164c2:	9301      	str	r3, [sp, #4]
 80164c4:	f1b8 0300 	subs.w	r3, r8, #0
 80164c8:	d027      	beq.n	801651a <__d2b+0x76>
 80164ca:	a802      	add	r0, sp, #8
 80164cc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80164d0:	f7ff fd8a 	bl	8015fe8 <__lo0bits>
 80164d4:	9900      	ldr	r1, [sp, #0]
 80164d6:	b1f0      	cbz	r0, 8016516 <__d2b+0x72>
 80164d8:	9a01      	ldr	r2, [sp, #4]
 80164da:	f1c0 0320 	rsb	r3, r0, #32
 80164de:	fa02 f303 	lsl.w	r3, r2, r3
 80164e2:	430b      	orrs	r3, r1
 80164e4:	40c2      	lsrs	r2, r0
 80164e6:	617b      	str	r3, [r7, #20]
 80164e8:	9201      	str	r2, [sp, #4]
 80164ea:	9b01      	ldr	r3, [sp, #4]
 80164ec:	61bb      	str	r3, [r7, #24]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	bf14      	ite	ne
 80164f2:	2102      	movne	r1, #2
 80164f4:	2101      	moveq	r1, #1
 80164f6:	6139      	str	r1, [r7, #16]
 80164f8:	b1c4      	cbz	r4, 801652c <__d2b+0x88>
 80164fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80164fe:	4404      	add	r4, r0
 8016500:	6034      	str	r4, [r6, #0]
 8016502:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016506:	6028      	str	r0, [r5, #0]
 8016508:	4638      	mov	r0, r7
 801650a:	b003      	add	sp, #12
 801650c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016514:	e7d5      	b.n	80164c2 <__d2b+0x1e>
 8016516:	6179      	str	r1, [r7, #20]
 8016518:	e7e7      	b.n	80164ea <__d2b+0x46>
 801651a:	a801      	add	r0, sp, #4
 801651c:	f7ff fd64 	bl	8015fe8 <__lo0bits>
 8016520:	9b01      	ldr	r3, [sp, #4]
 8016522:	617b      	str	r3, [r7, #20]
 8016524:	2101      	movs	r1, #1
 8016526:	6139      	str	r1, [r7, #16]
 8016528:	3020      	adds	r0, #32
 801652a:	e7e5      	b.n	80164f8 <__d2b+0x54>
 801652c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016534:	6030      	str	r0, [r6, #0]
 8016536:	6918      	ldr	r0, [r3, #16]
 8016538:	f7ff fd37 	bl	8015faa <__hi0bits>
 801653c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016540:	e7e1      	b.n	8016506 <__d2b+0x62>

08016542 <__ratio>:
 8016542:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016546:	4688      	mov	r8, r1
 8016548:	4669      	mov	r1, sp
 801654a:	4681      	mov	r9, r0
 801654c:	f7ff ff5c 	bl	8016408 <__b2d>
 8016550:	a901      	add	r1, sp, #4
 8016552:	4640      	mov	r0, r8
 8016554:	ec57 6b10 	vmov	r6, r7, d0
 8016558:	f7ff ff56 	bl	8016408 <__b2d>
 801655c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016560:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016564:	eba3 0c02 	sub.w	ip, r3, r2
 8016568:	e9dd 3200 	ldrd	r3, r2, [sp]
 801656c:	1a9b      	subs	r3, r3, r2
 801656e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016572:	ec5b ab10 	vmov	sl, fp, d0
 8016576:	2b00      	cmp	r3, #0
 8016578:	bfce      	itee	gt
 801657a:	463a      	movgt	r2, r7
 801657c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016580:	465a      	movle	r2, fp
 8016582:	4659      	mov	r1, fp
 8016584:	463d      	mov	r5, r7
 8016586:	bfd4      	ite	le
 8016588:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801658c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016590:	4630      	mov	r0, r6
 8016592:	ee10 2a10 	vmov	r2, s0
 8016596:	460b      	mov	r3, r1
 8016598:	4629      	mov	r1, r5
 801659a:	f7ea f96f 	bl	800087c <__aeabi_ddiv>
 801659e:	ec41 0b10 	vmov	d0, r0, r1
 80165a2:	b003      	add	sp, #12
 80165a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165a8 <__copybits>:
 80165a8:	3901      	subs	r1, #1
 80165aa:	b510      	push	{r4, lr}
 80165ac:	1149      	asrs	r1, r1, #5
 80165ae:	6914      	ldr	r4, [r2, #16]
 80165b0:	3101      	adds	r1, #1
 80165b2:	f102 0314 	add.w	r3, r2, #20
 80165b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80165ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80165be:	42a3      	cmp	r3, r4
 80165c0:	4602      	mov	r2, r0
 80165c2:	d303      	bcc.n	80165cc <__copybits+0x24>
 80165c4:	2300      	movs	r3, #0
 80165c6:	428a      	cmp	r2, r1
 80165c8:	d305      	bcc.n	80165d6 <__copybits+0x2e>
 80165ca:	bd10      	pop	{r4, pc}
 80165cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80165d0:	f840 2b04 	str.w	r2, [r0], #4
 80165d4:	e7f3      	b.n	80165be <__copybits+0x16>
 80165d6:	f842 3b04 	str.w	r3, [r2], #4
 80165da:	e7f4      	b.n	80165c6 <__copybits+0x1e>

080165dc <__any_on>:
 80165dc:	f100 0214 	add.w	r2, r0, #20
 80165e0:	6900      	ldr	r0, [r0, #16]
 80165e2:	114b      	asrs	r3, r1, #5
 80165e4:	4298      	cmp	r0, r3
 80165e6:	b510      	push	{r4, lr}
 80165e8:	db11      	blt.n	801660e <__any_on+0x32>
 80165ea:	dd0a      	ble.n	8016602 <__any_on+0x26>
 80165ec:	f011 011f 	ands.w	r1, r1, #31
 80165f0:	d007      	beq.n	8016602 <__any_on+0x26>
 80165f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80165f6:	fa24 f001 	lsr.w	r0, r4, r1
 80165fa:	fa00 f101 	lsl.w	r1, r0, r1
 80165fe:	428c      	cmp	r4, r1
 8016600:	d10b      	bne.n	801661a <__any_on+0x3e>
 8016602:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016606:	4293      	cmp	r3, r2
 8016608:	d803      	bhi.n	8016612 <__any_on+0x36>
 801660a:	2000      	movs	r0, #0
 801660c:	bd10      	pop	{r4, pc}
 801660e:	4603      	mov	r3, r0
 8016610:	e7f7      	b.n	8016602 <__any_on+0x26>
 8016612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016616:	2900      	cmp	r1, #0
 8016618:	d0f5      	beq.n	8016606 <__any_on+0x2a>
 801661a:	2001      	movs	r0, #1
 801661c:	e7f6      	b.n	801660c <__any_on+0x30>

0801661e <_calloc_r>:
 801661e:	b538      	push	{r3, r4, r5, lr}
 8016620:	fb02 f401 	mul.w	r4, r2, r1
 8016624:	4621      	mov	r1, r4
 8016626:	f000 f857 	bl	80166d8 <_malloc_r>
 801662a:	4605      	mov	r5, r0
 801662c:	b118      	cbz	r0, 8016636 <_calloc_r+0x18>
 801662e:	4622      	mov	r2, r4
 8016630:	2100      	movs	r1, #0
 8016632:	f7fc f911 	bl	8012858 <memset>
 8016636:	4628      	mov	r0, r5
 8016638:	bd38      	pop	{r3, r4, r5, pc}
	...

0801663c <_free_r>:
 801663c:	b538      	push	{r3, r4, r5, lr}
 801663e:	4605      	mov	r5, r0
 8016640:	2900      	cmp	r1, #0
 8016642:	d045      	beq.n	80166d0 <_free_r+0x94>
 8016644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016648:	1f0c      	subs	r4, r1, #4
 801664a:	2b00      	cmp	r3, #0
 801664c:	bfb8      	it	lt
 801664e:	18e4      	addlt	r4, r4, r3
 8016650:	f000 ffa5 	bl	801759e <__malloc_lock>
 8016654:	4a1f      	ldr	r2, [pc, #124]	; (80166d4 <_free_r+0x98>)
 8016656:	6813      	ldr	r3, [r2, #0]
 8016658:	4610      	mov	r0, r2
 801665a:	b933      	cbnz	r3, 801666a <_free_r+0x2e>
 801665c:	6063      	str	r3, [r4, #4]
 801665e:	6014      	str	r4, [r2, #0]
 8016660:	4628      	mov	r0, r5
 8016662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016666:	f000 bf9b 	b.w	80175a0 <__malloc_unlock>
 801666a:	42a3      	cmp	r3, r4
 801666c:	d90c      	bls.n	8016688 <_free_r+0x4c>
 801666e:	6821      	ldr	r1, [r4, #0]
 8016670:	1862      	adds	r2, r4, r1
 8016672:	4293      	cmp	r3, r2
 8016674:	bf04      	itt	eq
 8016676:	681a      	ldreq	r2, [r3, #0]
 8016678:	685b      	ldreq	r3, [r3, #4]
 801667a:	6063      	str	r3, [r4, #4]
 801667c:	bf04      	itt	eq
 801667e:	1852      	addeq	r2, r2, r1
 8016680:	6022      	streq	r2, [r4, #0]
 8016682:	6004      	str	r4, [r0, #0]
 8016684:	e7ec      	b.n	8016660 <_free_r+0x24>
 8016686:	4613      	mov	r3, r2
 8016688:	685a      	ldr	r2, [r3, #4]
 801668a:	b10a      	cbz	r2, 8016690 <_free_r+0x54>
 801668c:	42a2      	cmp	r2, r4
 801668e:	d9fa      	bls.n	8016686 <_free_r+0x4a>
 8016690:	6819      	ldr	r1, [r3, #0]
 8016692:	1858      	adds	r0, r3, r1
 8016694:	42a0      	cmp	r0, r4
 8016696:	d10b      	bne.n	80166b0 <_free_r+0x74>
 8016698:	6820      	ldr	r0, [r4, #0]
 801669a:	4401      	add	r1, r0
 801669c:	1858      	adds	r0, r3, r1
 801669e:	4282      	cmp	r2, r0
 80166a0:	6019      	str	r1, [r3, #0]
 80166a2:	d1dd      	bne.n	8016660 <_free_r+0x24>
 80166a4:	6810      	ldr	r0, [r2, #0]
 80166a6:	6852      	ldr	r2, [r2, #4]
 80166a8:	605a      	str	r2, [r3, #4]
 80166aa:	4401      	add	r1, r0
 80166ac:	6019      	str	r1, [r3, #0]
 80166ae:	e7d7      	b.n	8016660 <_free_r+0x24>
 80166b0:	d902      	bls.n	80166b8 <_free_r+0x7c>
 80166b2:	230c      	movs	r3, #12
 80166b4:	602b      	str	r3, [r5, #0]
 80166b6:	e7d3      	b.n	8016660 <_free_r+0x24>
 80166b8:	6820      	ldr	r0, [r4, #0]
 80166ba:	1821      	adds	r1, r4, r0
 80166bc:	428a      	cmp	r2, r1
 80166be:	bf04      	itt	eq
 80166c0:	6811      	ldreq	r1, [r2, #0]
 80166c2:	6852      	ldreq	r2, [r2, #4]
 80166c4:	6062      	str	r2, [r4, #4]
 80166c6:	bf04      	itt	eq
 80166c8:	1809      	addeq	r1, r1, r0
 80166ca:	6021      	streq	r1, [r4, #0]
 80166cc:	605c      	str	r4, [r3, #4]
 80166ce:	e7c7      	b.n	8016660 <_free_r+0x24>
 80166d0:	bd38      	pop	{r3, r4, r5, pc}
 80166d2:	bf00      	nop
 80166d4:	20036a94 	.word	0x20036a94

080166d8 <_malloc_r>:
 80166d8:	b570      	push	{r4, r5, r6, lr}
 80166da:	1ccd      	adds	r5, r1, #3
 80166dc:	f025 0503 	bic.w	r5, r5, #3
 80166e0:	3508      	adds	r5, #8
 80166e2:	2d0c      	cmp	r5, #12
 80166e4:	bf38      	it	cc
 80166e6:	250c      	movcc	r5, #12
 80166e8:	2d00      	cmp	r5, #0
 80166ea:	4606      	mov	r6, r0
 80166ec:	db01      	blt.n	80166f2 <_malloc_r+0x1a>
 80166ee:	42a9      	cmp	r1, r5
 80166f0:	d903      	bls.n	80166fa <_malloc_r+0x22>
 80166f2:	230c      	movs	r3, #12
 80166f4:	6033      	str	r3, [r6, #0]
 80166f6:	2000      	movs	r0, #0
 80166f8:	bd70      	pop	{r4, r5, r6, pc}
 80166fa:	f000 ff50 	bl	801759e <__malloc_lock>
 80166fe:	4a21      	ldr	r2, [pc, #132]	; (8016784 <_malloc_r+0xac>)
 8016700:	6814      	ldr	r4, [r2, #0]
 8016702:	4621      	mov	r1, r4
 8016704:	b991      	cbnz	r1, 801672c <_malloc_r+0x54>
 8016706:	4c20      	ldr	r4, [pc, #128]	; (8016788 <_malloc_r+0xb0>)
 8016708:	6823      	ldr	r3, [r4, #0]
 801670a:	b91b      	cbnz	r3, 8016714 <_malloc_r+0x3c>
 801670c:	4630      	mov	r0, r6
 801670e:	f000 fde3 	bl	80172d8 <_sbrk_r>
 8016712:	6020      	str	r0, [r4, #0]
 8016714:	4629      	mov	r1, r5
 8016716:	4630      	mov	r0, r6
 8016718:	f000 fdde 	bl	80172d8 <_sbrk_r>
 801671c:	1c43      	adds	r3, r0, #1
 801671e:	d124      	bne.n	801676a <_malloc_r+0x92>
 8016720:	230c      	movs	r3, #12
 8016722:	6033      	str	r3, [r6, #0]
 8016724:	4630      	mov	r0, r6
 8016726:	f000 ff3b 	bl	80175a0 <__malloc_unlock>
 801672a:	e7e4      	b.n	80166f6 <_malloc_r+0x1e>
 801672c:	680b      	ldr	r3, [r1, #0]
 801672e:	1b5b      	subs	r3, r3, r5
 8016730:	d418      	bmi.n	8016764 <_malloc_r+0x8c>
 8016732:	2b0b      	cmp	r3, #11
 8016734:	d90f      	bls.n	8016756 <_malloc_r+0x7e>
 8016736:	600b      	str	r3, [r1, #0]
 8016738:	50cd      	str	r5, [r1, r3]
 801673a:	18cc      	adds	r4, r1, r3
 801673c:	4630      	mov	r0, r6
 801673e:	f000 ff2f 	bl	80175a0 <__malloc_unlock>
 8016742:	f104 000b 	add.w	r0, r4, #11
 8016746:	1d23      	adds	r3, r4, #4
 8016748:	f020 0007 	bic.w	r0, r0, #7
 801674c:	1ac3      	subs	r3, r0, r3
 801674e:	d0d3      	beq.n	80166f8 <_malloc_r+0x20>
 8016750:	425a      	negs	r2, r3
 8016752:	50e2      	str	r2, [r4, r3]
 8016754:	e7d0      	b.n	80166f8 <_malloc_r+0x20>
 8016756:	428c      	cmp	r4, r1
 8016758:	684b      	ldr	r3, [r1, #4]
 801675a:	bf16      	itet	ne
 801675c:	6063      	strne	r3, [r4, #4]
 801675e:	6013      	streq	r3, [r2, #0]
 8016760:	460c      	movne	r4, r1
 8016762:	e7eb      	b.n	801673c <_malloc_r+0x64>
 8016764:	460c      	mov	r4, r1
 8016766:	6849      	ldr	r1, [r1, #4]
 8016768:	e7cc      	b.n	8016704 <_malloc_r+0x2c>
 801676a:	1cc4      	adds	r4, r0, #3
 801676c:	f024 0403 	bic.w	r4, r4, #3
 8016770:	42a0      	cmp	r0, r4
 8016772:	d005      	beq.n	8016780 <_malloc_r+0xa8>
 8016774:	1a21      	subs	r1, r4, r0
 8016776:	4630      	mov	r0, r6
 8016778:	f000 fdae 	bl	80172d8 <_sbrk_r>
 801677c:	3001      	adds	r0, #1
 801677e:	d0cf      	beq.n	8016720 <_malloc_r+0x48>
 8016780:	6025      	str	r5, [r4, #0]
 8016782:	e7db      	b.n	801673c <_malloc_r+0x64>
 8016784:	20036a94 	.word	0x20036a94
 8016788:	20036a98 	.word	0x20036a98

0801678c <__ssputs_r>:
 801678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016790:	688e      	ldr	r6, [r1, #8]
 8016792:	429e      	cmp	r6, r3
 8016794:	4682      	mov	sl, r0
 8016796:	460c      	mov	r4, r1
 8016798:	4690      	mov	r8, r2
 801679a:	4699      	mov	r9, r3
 801679c:	d837      	bhi.n	801680e <__ssputs_r+0x82>
 801679e:	898a      	ldrh	r2, [r1, #12]
 80167a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80167a4:	d031      	beq.n	801680a <__ssputs_r+0x7e>
 80167a6:	6825      	ldr	r5, [r4, #0]
 80167a8:	6909      	ldr	r1, [r1, #16]
 80167aa:	1a6f      	subs	r7, r5, r1
 80167ac:	6965      	ldr	r5, [r4, #20]
 80167ae:	2302      	movs	r3, #2
 80167b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80167b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80167b8:	f109 0301 	add.w	r3, r9, #1
 80167bc:	443b      	add	r3, r7
 80167be:	429d      	cmp	r5, r3
 80167c0:	bf38      	it	cc
 80167c2:	461d      	movcc	r5, r3
 80167c4:	0553      	lsls	r3, r2, #21
 80167c6:	d530      	bpl.n	801682a <__ssputs_r+0x9e>
 80167c8:	4629      	mov	r1, r5
 80167ca:	f7ff ff85 	bl	80166d8 <_malloc_r>
 80167ce:	4606      	mov	r6, r0
 80167d0:	b950      	cbnz	r0, 80167e8 <__ssputs_r+0x5c>
 80167d2:	230c      	movs	r3, #12
 80167d4:	f8ca 3000 	str.w	r3, [sl]
 80167d8:	89a3      	ldrh	r3, [r4, #12]
 80167da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167de:	81a3      	strh	r3, [r4, #12]
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295
 80167e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167e8:	463a      	mov	r2, r7
 80167ea:	6921      	ldr	r1, [r4, #16]
 80167ec:	f7ff fb0e 	bl	8015e0c <memcpy>
 80167f0:	89a3      	ldrh	r3, [r4, #12]
 80167f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80167f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167fa:	81a3      	strh	r3, [r4, #12]
 80167fc:	6126      	str	r6, [r4, #16]
 80167fe:	6165      	str	r5, [r4, #20]
 8016800:	443e      	add	r6, r7
 8016802:	1bed      	subs	r5, r5, r7
 8016804:	6026      	str	r6, [r4, #0]
 8016806:	60a5      	str	r5, [r4, #8]
 8016808:	464e      	mov	r6, r9
 801680a:	454e      	cmp	r6, r9
 801680c:	d900      	bls.n	8016810 <__ssputs_r+0x84>
 801680e:	464e      	mov	r6, r9
 8016810:	4632      	mov	r2, r6
 8016812:	4641      	mov	r1, r8
 8016814:	6820      	ldr	r0, [r4, #0]
 8016816:	f000 fea9 	bl	801756c <memmove>
 801681a:	68a3      	ldr	r3, [r4, #8]
 801681c:	1b9b      	subs	r3, r3, r6
 801681e:	60a3      	str	r3, [r4, #8]
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	441e      	add	r6, r3
 8016824:	6026      	str	r6, [r4, #0]
 8016826:	2000      	movs	r0, #0
 8016828:	e7dc      	b.n	80167e4 <__ssputs_r+0x58>
 801682a:	462a      	mov	r2, r5
 801682c:	f000 feb9 	bl	80175a2 <_realloc_r>
 8016830:	4606      	mov	r6, r0
 8016832:	2800      	cmp	r0, #0
 8016834:	d1e2      	bne.n	80167fc <__ssputs_r+0x70>
 8016836:	6921      	ldr	r1, [r4, #16]
 8016838:	4650      	mov	r0, sl
 801683a:	f7ff feff 	bl	801663c <_free_r>
 801683e:	e7c8      	b.n	80167d2 <__ssputs_r+0x46>

08016840 <_svfiprintf_r>:
 8016840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016844:	461d      	mov	r5, r3
 8016846:	898b      	ldrh	r3, [r1, #12]
 8016848:	061f      	lsls	r7, r3, #24
 801684a:	b09d      	sub	sp, #116	; 0x74
 801684c:	4680      	mov	r8, r0
 801684e:	460c      	mov	r4, r1
 8016850:	4616      	mov	r6, r2
 8016852:	d50f      	bpl.n	8016874 <_svfiprintf_r+0x34>
 8016854:	690b      	ldr	r3, [r1, #16]
 8016856:	b96b      	cbnz	r3, 8016874 <_svfiprintf_r+0x34>
 8016858:	2140      	movs	r1, #64	; 0x40
 801685a:	f7ff ff3d 	bl	80166d8 <_malloc_r>
 801685e:	6020      	str	r0, [r4, #0]
 8016860:	6120      	str	r0, [r4, #16]
 8016862:	b928      	cbnz	r0, 8016870 <_svfiprintf_r+0x30>
 8016864:	230c      	movs	r3, #12
 8016866:	f8c8 3000 	str.w	r3, [r8]
 801686a:	f04f 30ff 	mov.w	r0, #4294967295
 801686e:	e0c8      	b.n	8016a02 <_svfiprintf_r+0x1c2>
 8016870:	2340      	movs	r3, #64	; 0x40
 8016872:	6163      	str	r3, [r4, #20]
 8016874:	2300      	movs	r3, #0
 8016876:	9309      	str	r3, [sp, #36]	; 0x24
 8016878:	2320      	movs	r3, #32
 801687a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801687e:	2330      	movs	r3, #48	; 0x30
 8016880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016884:	9503      	str	r5, [sp, #12]
 8016886:	f04f 0b01 	mov.w	fp, #1
 801688a:	4637      	mov	r7, r6
 801688c:	463d      	mov	r5, r7
 801688e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016892:	b10b      	cbz	r3, 8016898 <_svfiprintf_r+0x58>
 8016894:	2b25      	cmp	r3, #37	; 0x25
 8016896:	d13e      	bne.n	8016916 <_svfiprintf_r+0xd6>
 8016898:	ebb7 0a06 	subs.w	sl, r7, r6
 801689c:	d00b      	beq.n	80168b6 <_svfiprintf_r+0x76>
 801689e:	4653      	mov	r3, sl
 80168a0:	4632      	mov	r2, r6
 80168a2:	4621      	mov	r1, r4
 80168a4:	4640      	mov	r0, r8
 80168a6:	f7ff ff71 	bl	801678c <__ssputs_r>
 80168aa:	3001      	adds	r0, #1
 80168ac:	f000 80a4 	beq.w	80169f8 <_svfiprintf_r+0x1b8>
 80168b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b2:	4453      	add	r3, sl
 80168b4:	9309      	str	r3, [sp, #36]	; 0x24
 80168b6:	783b      	ldrb	r3, [r7, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	f000 809d 	beq.w	80169f8 <_svfiprintf_r+0x1b8>
 80168be:	2300      	movs	r3, #0
 80168c0:	f04f 32ff 	mov.w	r2, #4294967295
 80168c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168c8:	9304      	str	r3, [sp, #16]
 80168ca:	9307      	str	r3, [sp, #28]
 80168cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168d0:	931a      	str	r3, [sp, #104]	; 0x68
 80168d2:	462f      	mov	r7, r5
 80168d4:	2205      	movs	r2, #5
 80168d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80168da:	4850      	ldr	r0, [pc, #320]	; (8016a1c <_svfiprintf_r+0x1dc>)
 80168dc:	f7e9 fc98 	bl	8000210 <memchr>
 80168e0:	9b04      	ldr	r3, [sp, #16]
 80168e2:	b9d0      	cbnz	r0, 801691a <_svfiprintf_r+0xda>
 80168e4:	06d9      	lsls	r1, r3, #27
 80168e6:	bf44      	itt	mi
 80168e8:	2220      	movmi	r2, #32
 80168ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80168ee:	071a      	lsls	r2, r3, #28
 80168f0:	bf44      	itt	mi
 80168f2:	222b      	movmi	r2, #43	; 0x2b
 80168f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80168f8:	782a      	ldrb	r2, [r5, #0]
 80168fa:	2a2a      	cmp	r2, #42	; 0x2a
 80168fc:	d015      	beq.n	801692a <_svfiprintf_r+0xea>
 80168fe:	9a07      	ldr	r2, [sp, #28]
 8016900:	462f      	mov	r7, r5
 8016902:	2000      	movs	r0, #0
 8016904:	250a      	movs	r5, #10
 8016906:	4639      	mov	r1, r7
 8016908:	f811 3b01 	ldrb.w	r3, [r1], #1
 801690c:	3b30      	subs	r3, #48	; 0x30
 801690e:	2b09      	cmp	r3, #9
 8016910:	d94d      	bls.n	80169ae <_svfiprintf_r+0x16e>
 8016912:	b1b8      	cbz	r0, 8016944 <_svfiprintf_r+0x104>
 8016914:	e00f      	b.n	8016936 <_svfiprintf_r+0xf6>
 8016916:	462f      	mov	r7, r5
 8016918:	e7b8      	b.n	801688c <_svfiprintf_r+0x4c>
 801691a:	4a40      	ldr	r2, [pc, #256]	; (8016a1c <_svfiprintf_r+0x1dc>)
 801691c:	1a80      	subs	r0, r0, r2
 801691e:	fa0b f000 	lsl.w	r0, fp, r0
 8016922:	4318      	orrs	r0, r3
 8016924:	9004      	str	r0, [sp, #16]
 8016926:	463d      	mov	r5, r7
 8016928:	e7d3      	b.n	80168d2 <_svfiprintf_r+0x92>
 801692a:	9a03      	ldr	r2, [sp, #12]
 801692c:	1d11      	adds	r1, r2, #4
 801692e:	6812      	ldr	r2, [r2, #0]
 8016930:	9103      	str	r1, [sp, #12]
 8016932:	2a00      	cmp	r2, #0
 8016934:	db01      	blt.n	801693a <_svfiprintf_r+0xfa>
 8016936:	9207      	str	r2, [sp, #28]
 8016938:	e004      	b.n	8016944 <_svfiprintf_r+0x104>
 801693a:	4252      	negs	r2, r2
 801693c:	f043 0302 	orr.w	r3, r3, #2
 8016940:	9207      	str	r2, [sp, #28]
 8016942:	9304      	str	r3, [sp, #16]
 8016944:	783b      	ldrb	r3, [r7, #0]
 8016946:	2b2e      	cmp	r3, #46	; 0x2e
 8016948:	d10c      	bne.n	8016964 <_svfiprintf_r+0x124>
 801694a:	787b      	ldrb	r3, [r7, #1]
 801694c:	2b2a      	cmp	r3, #42	; 0x2a
 801694e:	d133      	bne.n	80169b8 <_svfiprintf_r+0x178>
 8016950:	9b03      	ldr	r3, [sp, #12]
 8016952:	1d1a      	adds	r2, r3, #4
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	9203      	str	r2, [sp, #12]
 8016958:	2b00      	cmp	r3, #0
 801695a:	bfb8      	it	lt
 801695c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016960:	3702      	adds	r7, #2
 8016962:	9305      	str	r3, [sp, #20]
 8016964:	4d2e      	ldr	r5, [pc, #184]	; (8016a20 <_svfiprintf_r+0x1e0>)
 8016966:	7839      	ldrb	r1, [r7, #0]
 8016968:	2203      	movs	r2, #3
 801696a:	4628      	mov	r0, r5
 801696c:	f7e9 fc50 	bl	8000210 <memchr>
 8016970:	b138      	cbz	r0, 8016982 <_svfiprintf_r+0x142>
 8016972:	2340      	movs	r3, #64	; 0x40
 8016974:	1b40      	subs	r0, r0, r5
 8016976:	fa03 f000 	lsl.w	r0, r3, r0
 801697a:	9b04      	ldr	r3, [sp, #16]
 801697c:	4303      	orrs	r3, r0
 801697e:	3701      	adds	r7, #1
 8016980:	9304      	str	r3, [sp, #16]
 8016982:	7839      	ldrb	r1, [r7, #0]
 8016984:	4827      	ldr	r0, [pc, #156]	; (8016a24 <_svfiprintf_r+0x1e4>)
 8016986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801698a:	2206      	movs	r2, #6
 801698c:	1c7e      	adds	r6, r7, #1
 801698e:	f7e9 fc3f 	bl	8000210 <memchr>
 8016992:	2800      	cmp	r0, #0
 8016994:	d038      	beq.n	8016a08 <_svfiprintf_r+0x1c8>
 8016996:	4b24      	ldr	r3, [pc, #144]	; (8016a28 <_svfiprintf_r+0x1e8>)
 8016998:	bb13      	cbnz	r3, 80169e0 <_svfiprintf_r+0x1a0>
 801699a:	9b03      	ldr	r3, [sp, #12]
 801699c:	3307      	adds	r3, #7
 801699e:	f023 0307 	bic.w	r3, r3, #7
 80169a2:	3308      	adds	r3, #8
 80169a4:	9303      	str	r3, [sp, #12]
 80169a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a8:	444b      	add	r3, r9
 80169aa:	9309      	str	r3, [sp, #36]	; 0x24
 80169ac:	e76d      	b.n	801688a <_svfiprintf_r+0x4a>
 80169ae:	fb05 3202 	mla	r2, r5, r2, r3
 80169b2:	2001      	movs	r0, #1
 80169b4:	460f      	mov	r7, r1
 80169b6:	e7a6      	b.n	8016906 <_svfiprintf_r+0xc6>
 80169b8:	2300      	movs	r3, #0
 80169ba:	3701      	adds	r7, #1
 80169bc:	9305      	str	r3, [sp, #20]
 80169be:	4619      	mov	r1, r3
 80169c0:	250a      	movs	r5, #10
 80169c2:	4638      	mov	r0, r7
 80169c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169c8:	3a30      	subs	r2, #48	; 0x30
 80169ca:	2a09      	cmp	r2, #9
 80169cc:	d903      	bls.n	80169d6 <_svfiprintf_r+0x196>
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d0c8      	beq.n	8016964 <_svfiprintf_r+0x124>
 80169d2:	9105      	str	r1, [sp, #20]
 80169d4:	e7c6      	b.n	8016964 <_svfiprintf_r+0x124>
 80169d6:	fb05 2101 	mla	r1, r5, r1, r2
 80169da:	2301      	movs	r3, #1
 80169dc:	4607      	mov	r7, r0
 80169de:	e7f0      	b.n	80169c2 <_svfiprintf_r+0x182>
 80169e0:	ab03      	add	r3, sp, #12
 80169e2:	9300      	str	r3, [sp, #0]
 80169e4:	4622      	mov	r2, r4
 80169e6:	4b11      	ldr	r3, [pc, #68]	; (8016a2c <_svfiprintf_r+0x1ec>)
 80169e8:	a904      	add	r1, sp, #16
 80169ea:	4640      	mov	r0, r8
 80169ec:	f7fb ffd0 	bl	8012990 <_printf_float>
 80169f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80169f4:	4681      	mov	r9, r0
 80169f6:	d1d6      	bne.n	80169a6 <_svfiprintf_r+0x166>
 80169f8:	89a3      	ldrh	r3, [r4, #12]
 80169fa:	065b      	lsls	r3, r3, #25
 80169fc:	f53f af35 	bmi.w	801686a <_svfiprintf_r+0x2a>
 8016a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a02:	b01d      	add	sp, #116	; 0x74
 8016a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a08:	ab03      	add	r3, sp, #12
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	4622      	mov	r2, r4
 8016a0e:	4b07      	ldr	r3, [pc, #28]	; (8016a2c <_svfiprintf_r+0x1ec>)
 8016a10:	a904      	add	r1, sp, #16
 8016a12:	4640      	mov	r0, r8
 8016a14:	f7fc fa72 	bl	8012efc <_printf_i>
 8016a18:	e7ea      	b.n	80169f0 <_svfiprintf_r+0x1b0>
 8016a1a:	bf00      	nop
 8016a1c:	08017ccc 	.word	0x08017ccc
 8016a20:	08017cd2 	.word	0x08017cd2
 8016a24:	08017cd6 	.word	0x08017cd6
 8016a28:	08012991 	.word	0x08012991
 8016a2c:	0801678d 	.word	0x0801678d

08016a30 <_sungetc_r>:
 8016a30:	b538      	push	{r3, r4, r5, lr}
 8016a32:	1c4b      	adds	r3, r1, #1
 8016a34:	4614      	mov	r4, r2
 8016a36:	d103      	bne.n	8016a40 <_sungetc_r+0x10>
 8016a38:	f04f 35ff 	mov.w	r5, #4294967295
 8016a3c:	4628      	mov	r0, r5
 8016a3e:	bd38      	pop	{r3, r4, r5, pc}
 8016a40:	8993      	ldrh	r3, [r2, #12]
 8016a42:	f023 0320 	bic.w	r3, r3, #32
 8016a46:	8193      	strh	r3, [r2, #12]
 8016a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a4a:	6852      	ldr	r2, [r2, #4]
 8016a4c:	b2cd      	uxtb	r5, r1
 8016a4e:	b18b      	cbz	r3, 8016a74 <_sungetc_r+0x44>
 8016a50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016a52:	4293      	cmp	r3, r2
 8016a54:	dd08      	ble.n	8016a68 <_sungetc_r+0x38>
 8016a56:	6823      	ldr	r3, [r4, #0]
 8016a58:	1e5a      	subs	r2, r3, #1
 8016a5a:	6022      	str	r2, [r4, #0]
 8016a5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016a60:	6863      	ldr	r3, [r4, #4]
 8016a62:	3301      	adds	r3, #1
 8016a64:	6063      	str	r3, [r4, #4]
 8016a66:	e7e9      	b.n	8016a3c <_sungetc_r+0xc>
 8016a68:	4621      	mov	r1, r4
 8016a6a:	f000 fd15 	bl	8017498 <__submore>
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	d0f1      	beq.n	8016a56 <_sungetc_r+0x26>
 8016a72:	e7e1      	b.n	8016a38 <_sungetc_r+0x8>
 8016a74:	6921      	ldr	r1, [r4, #16]
 8016a76:	6823      	ldr	r3, [r4, #0]
 8016a78:	b151      	cbz	r1, 8016a90 <_sungetc_r+0x60>
 8016a7a:	4299      	cmp	r1, r3
 8016a7c:	d208      	bcs.n	8016a90 <_sungetc_r+0x60>
 8016a7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016a82:	42a9      	cmp	r1, r5
 8016a84:	d104      	bne.n	8016a90 <_sungetc_r+0x60>
 8016a86:	3b01      	subs	r3, #1
 8016a88:	3201      	adds	r2, #1
 8016a8a:	6023      	str	r3, [r4, #0]
 8016a8c:	6062      	str	r2, [r4, #4]
 8016a8e:	e7d5      	b.n	8016a3c <_sungetc_r+0xc>
 8016a90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a98:	6363      	str	r3, [r4, #52]	; 0x34
 8016a9a:	2303      	movs	r3, #3
 8016a9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8016a9e:	4623      	mov	r3, r4
 8016aa0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016aa4:	6023      	str	r3, [r4, #0]
 8016aa6:	2301      	movs	r3, #1
 8016aa8:	e7dc      	b.n	8016a64 <_sungetc_r+0x34>

08016aaa <__ssrefill_r>:
 8016aaa:	b510      	push	{r4, lr}
 8016aac:	460c      	mov	r4, r1
 8016aae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ab0:	b169      	cbz	r1, 8016ace <__ssrefill_r+0x24>
 8016ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ab6:	4299      	cmp	r1, r3
 8016ab8:	d001      	beq.n	8016abe <__ssrefill_r+0x14>
 8016aba:	f7ff fdbf 	bl	801663c <_free_r>
 8016abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ac0:	6063      	str	r3, [r4, #4]
 8016ac2:	2000      	movs	r0, #0
 8016ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8016ac6:	b113      	cbz	r3, 8016ace <__ssrefill_r+0x24>
 8016ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016aca:	6023      	str	r3, [r4, #0]
 8016acc:	bd10      	pop	{r4, pc}
 8016ace:	6923      	ldr	r3, [r4, #16]
 8016ad0:	6023      	str	r3, [r4, #0]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	6063      	str	r3, [r4, #4]
 8016ad6:	89a3      	ldrh	r3, [r4, #12]
 8016ad8:	f043 0320 	orr.w	r3, r3, #32
 8016adc:	81a3      	strh	r3, [r4, #12]
 8016ade:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae2:	e7f3      	b.n	8016acc <__ssrefill_r+0x22>

08016ae4 <__ssvfiscanf_r>:
 8016ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016aec:	460c      	mov	r4, r1
 8016aee:	2100      	movs	r1, #0
 8016af0:	9144      	str	r1, [sp, #272]	; 0x110
 8016af2:	9145      	str	r1, [sp, #276]	; 0x114
 8016af4:	499f      	ldr	r1, [pc, #636]	; (8016d74 <__ssvfiscanf_r+0x290>)
 8016af6:	91a0      	str	r1, [sp, #640]	; 0x280
 8016af8:	f10d 0804 	add.w	r8, sp, #4
 8016afc:	499e      	ldr	r1, [pc, #632]	; (8016d78 <__ssvfiscanf_r+0x294>)
 8016afe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016d7c <__ssvfiscanf_r+0x298>
 8016b02:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016b06:	4606      	mov	r6, r0
 8016b08:	4692      	mov	sl, r2
 8016b0a:	91a1      	str	r1, [sp, #644]	; 0x284
 8016b0c:	9300      	str	r3, [sp, #0]
 8016b0e:	270a      	movs	r7, #10
 8016b10:	f89a 3000 	ldrb.w	r3, [sl]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	f000 812a 	beq.w	8016d6e <__ssvfiscanf_r+0x28a>
 8016b1a:	4655      	mov	r5, sl
 8016b1c:	f7ff f8c8 	bl	8015cb0 <__locale_ctype_ptr>
 8016b20:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016b24:	4458      	add	r0, fp
 8016b26:	7843      	ldrb	r3, [r0, #1]
 8016b28:	f013 0308 	ands.w	r3, r3, #8
 8016b2c:	d01c      	beq.n	8016b68 <__ssvfiscanf_r+0x84>
 8016b2e:	6863      	ldr	r3, [r4, #4]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	dd12      	ble.n	8016b5a <__ssvfiscanf_r+0x76>
 8016b34:	f7ff f8bc 	bl	8015cb0 <__locale_ctype_ptr>
 8016b38:	6823      	ldr	r3, [r4, #0]
 8016b3a:	781a      	ldrb	r2, [r3, #0]
 8016b3c:	4410      	add	r0, r2
 8016b3e:	7842      	ldrb	r2, [r0, #1]
 8016b40:	0712      	lsls	r2, r2, #28
 8016b42:	d401      	bmi.n	8016b48 <__ssvfiscanf_r+0x64>
 8016b44:	46aa      	mov	sl, r5
 8016b46:	e7e3      	b.n	8016b10 <__ssvfiscanf_r+0x2c>
 8016b48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b4a:	3201      	adds	r2, #1
 8016b4c:	9245      	str	r2, [sp, #276]	; 0x114
 8016b4e:	6862      	ldr	r2, [r4, #4]
 8016b50:	3301      	adds	r3, #1
 8016b52:	3a01      	subs	r2, #1
 8016b54:	6062      	str	r2, [r4, #4]
 8016b56:	6023      	str	r3, [r4, #0]
 8016b58:	e7e9      	b.n	8016b2e <__ssvfiscanf_r+0x4a>
 8016b5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b5c:	4621      	mov	r1, r4
 8016b5e:	4630      	mov	r0, r6
 8016b60:	4798      	blx	r3
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d0e6      	beq.n	8016b34 <__ssvfiscanf_r+0x50>
 8016b66:	e7ed      	b.n	8016b44 <__ssvfiscanf_r+0x60>
 8016b68:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016b6c:	f040 8082 	bne.w	8016c74 <__ssvfiscanf_r+0x190>
 8016b70:	9343      	str	r3, [sp, #268]	; 0x10c
 8016b72:	9341      	str	r3, [sp, #260]	; 0x104
 8016b74:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016b78:	2b2a      	cmp	r3, #42	; 0x2a
 8016b7a:	d103      	bne.n	8016b84 <__ssvfiscanf_r+0xa0>
 8016b7c:	2310      	movs	r3, #16
 8016b7e:	9341      	str	r3, [sp, #260]	; 0x104
 8016b80:	f10a 0502 	add.w	r5, sl, #2
 8016b84:	46aa      	mov	sl, r5
 8016b86:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016b8a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016b8e:	2a09      	cmp	r2, #9
 8016b90:	d922      	bls.n	8016bd8 <__ssvfiscanf_r+0xf4>
 8016b92:	2203      	movs	r2, #3
 8016b94:	4879      	ldr	r0, [pc, #484]	; (8016d7c <__ssvfiscanf_r+0x298>)
 8016b96:	f7e9 fb3b 	bl	8000210 <memchr>
 8016b9a:	b138      	cbz	r0, 8016bac <__ssvfiscanf_r+0xc8>
 8016b9c:	eba0 0309 	sub.w	r3, r0, r9
 8016ba0:	2001      	movs	r0, #1
 8016ba2:	4098      	lsls	r0, r3
 8016ba4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ba6:	4318      	orrs	r0, r3
 8016ba8:	9041      	str	r0, [sp, #260]	; 0x104
 8016baa:	46aa      	mov	sl, r5
 8016bac:	f89a 3000 	ldrb.w	r3, [sl]
 8016bb0:	2b67      	cmp	r3, #103	; 0x67
 8016bb2:	f10a 0501 	add.w	r5, sl, #1
 8016bb6:	d82b      	bhi.n	8016c10 <__ssvfiscanf_r+0x12c>
 8016bb8:	2b65      	cmp	r3, #101	; 0x65
 8016bba:	f080 809f 	bcs.w	8016cfc <__ssvfiscanf_r+0x218>
 8016bbe:	2b47      	cmp	r3, #71	; 0x47
 8016bc0:	d810      	bhi.n	8016be4 <__ssvfiscanf_r+0x100>
 8016bc2:	2b45      	cmp	r3, #69	; 0x45
 8016bc4:	f080 809a 	bcs.w	8016cfc <__ssvfiscanf_r+0x218>
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d06c      	beq.n	8016ca6 <__ssvfiscanf_r+0x1c2>
 8016bcc:	2b25      	cmp	r3, #37	; 0x25
 8016bce:	d051      	beq.n	8016c74 <__ssvfiscanf_r+0x190>
 8016bd0:	2303      	movs	r3, #3
 8016bd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8016bd4:	9742      	str	r7, [sp, #264]	; 0x108
 8016bd6:	e027      	b.n	8016c28 <__ssvfiscanf_r+0x144>
 8016bd8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016bda:	fb07 1303 	mla	r3, r7, r3, r1
 8016bde:	3b30      	subs	r3, #48	; 0x30
 8016be0:	9343      	str	r3, [sp, #268]	; 0x10c
 8016be2:	e7cf      	b.n	8016b84 <__ssvfiscanf_r+0xa0>
 8016be4:	2b5b      	cmp	r3, #91	; 0x5b
 8016be6:	d06a      	beq.n	8016cbe <__ssvfiscanf_r+0x1da>
 8016be8:	d80c      	bhi.n	8016c04 <__ssvfiscanf_r+0x120>
 8016bea:	2b58      	cmp	r3, #88	; 0x58
 8016bec:	d1f0      	bne.n	8016bd0 <__ssvfiscanf_r+0xec>
 8016bee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016bf4:	9241      	str	r2, [sp, #260]	; 0x104
 8016bf6:	2210      	movs	r2, #16
 8016bf8:	9242      	str	r2, [sp, #264]	; 0x108
 8016bfa:	2b6e      	cmp	r3, #110	; 0x6e
 8016bfc:	bf8c      	ite	hi
 8016bfe:	2304      	movhi	r3, #4
 8016c00:	2303      	movls	r3, #3
 8016c02:	e010      	b.n	8016c26 <__ssvfiscanf_r+0x142>
 8016c04:	2b63      	cmp	r3, #99	; 0x63
 8016c06:	d065      	beq.n	8016cd4 <__ssvfiscanf_r+0x1f0>
 8016c08:	2b64      	cmp	r3, #100	; 0x64
 8016c0a:	d1e1      	bne.n	8016bd0 <__ssvfiscanf_r+0xec>
 8016c0c:	9742      	str	r7, [sp, #264]	; 0x108
 8016c0e:	e7f4      	b.n	8016bfa <__ssvfiscanf_r+0x116>
 8016c10:	2b70      	cmp	r3, #112	; 0x70
 8016c12:	d04b      	beq.n	8016cac <__ssvfiscanf_r+0x1c8>
 8016c14:	d826      	bhi.n	8016c64 <__ssvfiscanf_r+0x180>
 8016c16:	2b6e      	cmp	r3, #110	; 0x6e
 8016c18:	d062      	beq.n	8016ce0 <__ssvfiscanf_r+0x1fc>
 8016c1a:	d84c      	bhi.n	8016cb6 <__ssvfiscanf_r+0x1d2>
 8016c1c:	2b69      	cmp	r3, #105	; 0x69
 8016c1e:	d1d7      	bne.n	8016bd0 <__ssvfiscanf_r+0xec>
 8016c20:	2300      	movs	r3, #0
 8016c22:	9342      	str	r3, [sp, #264]	; 0x108
 8016c24:	2303      	movs	r3, #3
 8016c26:	9347      	str	r3, [sp, #284]	; 0x11c
 8016c28:	6863      	ldr	r3, [r4, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	dd68      	ble.n	8016d00 <__ssvfiscanf_r+0x21c>
 8016c2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c30:	0659      	lsls	r1, r3, #25
 8016c32:	d407      	bmi.n	8016c44 <__ssvfiscanf_r+0x160>
 8016c34:	f7ff f83c 	bl	8015cb0 <__locale_ctype_ptr>
 8016c38:	6823      	ldr	r3, [r4, #0]
 8016c3a:	781a      	ldrb	r2, [r3, #0]
 8016c3c:	4410      	add	r0, r2
 8016c3e:	7842      	ldrb	r2, [r0, #1]
 8016c40:	0712      	lsls	r2, r2, #28
 8016c42:	d464      	bmi.n	8016d0e <__ssvfiscanf_r+0x22a>
 8016c44:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016c46:	2b02      	cmp	r3, #2
 8016c48:	dc73      	bgt.n	8016d32 <__ssvfiscanf_r+0x24e>
 8016c4a:	466b      	mov	r3, sp
 8016c4c:	4622      	mov	r2, r4
 8016c4e:	a941      	add	r1, sp, #260	; 0x104
 8016c50:	4630      	mov	r0, r6
 8016c52:	f000 f9d7 	bl	8017004 <_scanf_chars>
 8016c56:	2801      	cmp	r0, #1
 8016c58:	f000 8089 	beq.w	8016d6e <__ssvfiscanf_r+0x28a>
 8016c5c:	2802      	cmp	r0, #2
 8016c5e:	f47f af71 	bne.w	8016b44 <__ssvfiscanf_r+0x60>
 8016c62:	e01d      	b.n	8016ca0 <__ssvfiscanf_r+0x1bc>
 8016c64:	2b75      	cmp	r3, #117	; 0x75
 8016c66:	d0d1      	beq.n	8016c0c <__ssvfiscanf_r+0x128>
 8016c68:	2b78      	cmp	r3, #120	; 0x78
 8016c6a:	d0c0      	beq.n	8016bee <__ssvfiscanf_r+0x10a>
 8016c6c:	2b73      	cmp	r3, #115	; 0x73
 8016c6e:	d1af      	bne.n	8016bd0 <__ssvfiscanf_r+0xec>
 8016c70:	2302      	movs	r3, #2
 8016c72:	e7d8      	b.n	8016c26 <__ssvfiscanf_r+0x142>
 8016c74:	6863      	ldr	r3, [r4, #4]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	dd0c      	ble.n	8016c94 <__ssvfiscanf_r+0x1b0>
 8016c7a:	6823      	ldr	r3, [r4, #0]
 8016c7c:	781a      	ldrb	r2, [r3, #0]
 8016c7e:	455a      	cmp	r2, fp
 8016c80:	d175      	bne.n	8016d6e <__ssvfiscanf_r+0x28a>
 8016c82:	3301      	adds	r3, #1
 8016c84:	6862      	ldr	r2, [r4, #4]
 8016c86:	6023      	str	r3, [r4, #0]
 8016c88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016c8a:	3a01      	subs	r2, #1
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	6062      	str	r2, [r4, #4]
 8016c90:	9345      	str	r3, [sp, #276]	; 0x114
 8016c92:	e757      	b.n	8016b44 <__ssvfiscanf_r+0x60>
 8016c94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c96:	4621      	mov	r1, r4
 8016c98:	4630      	mov	r0, r6
 8016c9a:	4798      	blx	r3
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d0ec      	beq.n	8016c7a <__ssvfiscanf_r+0x196>
 8016ca0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016ca2:	2800      	cmp	r0, #0
 8016ca4:	d159      	bne.n	8016d5a <__ssvfiscanf_r+0x276>
 8016ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8016caa:	e05c      	b.n	8016d66 <__ssvfiscanf_r+0x282>
 8016cac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016cae:	f042 0220 	orr.w	r2, r2, #32
 8016cb2:	9241      	str	r2, [sp, #260]	; 0x104
 8016cb4:	e79b      	b.n	8016bee <__ssvfiscanf_r+0x10a>
 8016cb6:	2308      	movs	r3, #8
 8016cb8:	9342      	str	r3, [sp, #264]	; 0x108
 8016cba:	2304      	movs	r3, #4
 8016cbc:	e7b3      	b.n	8016c26 <__ssvfiscanf_r+0x142>
 8016cbe:	4629      	mov	r1, r5
 8016cc0:	4640      	mov	r0, r8
 8016cc2:	f000 fb19 	bl	80172f8 <__sccl>
 8016cc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ccc:	9341      	str	r3, [sp, #260]	; 0x104
 8016cce:	4605      	mov	r5, r0
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	e7a8      	b.n	8016c26 <__ssvfiscanf_r+0x142>
 8016cd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cda:	9341      	str	r3, [sp, #260]	; 0x104
 8016cdc:	2300      	movs	r3, #0
 8016cde:	e7a2      	b.n	8016c26 <__ssvfiscanf_r+0x142>
 8016ce0:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016ce2:	06c3      	lsls	r3, r0, #27
 8016ce4:	f53f af2e 	bmi.w	8016b44 <__ssvfiscanf_r+0x60>
 8016ce8:	9b00      	ldr	r3, [sp, #0]
 8016cea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016cec:	1d19      	adds	r1, r3, #4
 8016cee:	9100      	str	r1, [sp, #0]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	07c0      	lsls	r0, r0, #31
 8016cf4:	bf4c      	ite	mi
 8016cf6:	801a      	strhmi	r2, [r3, #0]
 8016cf8:	601a      	strpl	r2, [r3, #0]
 8016cfa:	e723      	b.n	8016b44 <__ssvfiscanf_r+0x60>
 8016cfc:	2305      	movs	r3, #5
 8016cfe:	e792      	b.n	8016c26 <__ssvfiscanf_r+0x142>
 8016d00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d02:	4621      	mov	r1, r4
 8016d04:	4630      	mov	r0, r6
 8016d06:	4798      	blx	r3
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	d090      	beq.n	8016c2e <__ssvfiscanf_r+0x14a>
 8016d0c:	e7c8      	b.n	8016ca0 <__ssvfiscanf_r+0x1bc>
 8016d0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d10:	3201      	adds	r2, #1
 8016d12:	9245      	str	r2, [sp, #276]	; 0x114
 8016d14:	6862      	ldr	r2, [r4, #4]
 8016d16:	3a01      	subs	r2, #1
 8016d18:	2a00      	cmp	r2, #0
 8016d1a:	6062      	str	r2, [r4, #4]
 8016d1c:	dd02      	ble.n	8016d24 <__ssvfiscanf_r+0x240>
 8016d1e:	3301      	adds	r3, #1
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	e787      	b.n	8016c34 <__ssvfiscanf_r+0x150>
 8016d24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d26:	4621      	mov	r1, r4
 8016d28:	4630      	mov	r0, r6
 8016d2a:	4798      	blx	r3
 8016d2c:	2800      	cmp	r0, #0
 8016d2e:	d081      	beq.n	8016c34 <__ssvfiscanf_r+0x150>
 8016d30:	e7b6      	b.n	8016ca0 <__ssvfiscanf_r+0x1bc>
 8016d32:	2b04      	cmp	r3, #4
 8016d34:	dc06      	bgt.n	8016d44 <__ssvfiscanf_r+0x260>
 8016d36:	466b      	mov	r3, sp
 8016d38:	4622      	mov	r2, r4
 8016d3a:	a941      	add	r1, sp, #260	; 0x104
 8016d3c:	4630      	mov	r0, r6
 8016d3e:	f000 f9c5 	bl	80170cc <_scanf_i>
 8016d42:	e788      	b.n	8016c56 <__ssvfiscanf_r+0x172>
 8016d44:	4b0e      	ldr	r3, [pc, #56]	; (8016d80 <__ssvfiscanf_r+0x29c>)
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	f43f aefc 	beq.w	8016b44 <__ssvfiscanf_r+0x60>
 8016d4c:	466b      	mov	r3, sp
 8016d4e:	4622      	mov	r2, r4
 8016d50:	a941      	add	r1, sp, #260	; 0x104
 8016d52:	4630      	mov	r0, r6
 8016d54:	f7fc f9e4 	bl	8013120 <_scanf_float>
 8016d58:	e77d      	b.n	8016c56 <__ssvfiscanf_r+0x172>
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016d60:	bf18      	it	ne
 8016d62:	f04f 30ff 	movne.w	r0, #4294967295
 8016d66:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d6e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016d70:	e7f9      	b.n	8016d66 <__ssvfiscanf_r+0x282>
 8016d72:	bf00      	nop
 8016d74:	08016a31 	.word	0x08016a31
 8016d78:	08016aab 	.word	0x08016aab
 8016d7c:	08017cd2 	.word	0x08017cd2
 8016d80:	08013121 	.word	0x08013121

08016d84 <__sfputc_r>:
 8016d84:	6893      	ldr	r3, [r2, #8]
 8016d86:	3b01      	subs	r3, #1
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	b410      	push	{r4}
 8016d8c:	6093      	str	r3, [r2, #8]
 8016d8e:	da08      	bge.n	8016da2 <__sfputc_r+0x1e>
 8016d90:	6994      	ldr	r4, [r2, #24]
 8016d92:	42a3      	cmp	r3, r4
 8016d94:	db01      	blt.n	8016d9a <__sfputc_r+0x16>
 8016d96:	290a      	cmp	r1, #10
 8016d98:	d103      	bne.n	8016da2 <__sfputc_r+0x1e>
 8016d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d9e:	f7fd bbbd 	b.w	801451c <__swbuf_r>
 8016da2:	6813      	ldr	r3, [r2, #0]
 8016da4:	1c58      	adds	r0, r3, #1
 8016da6:	6010      	str	r0, [r2, #0]
 8016da8:	7019      	strb	r1, [r3, #0]
 8016daa:	4608      	mov	r0, r1
 8016dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016db0:	4770      	bx	lr

08016db2 <__sfputs_r>:
 8016db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db4:	4606      	mov	r6, r0
 8016db6:	460f      	mov	r7, r1
 8016db8:	4614      	mov	r4, r2
 8016dba:	18d5      	adds	r5, r2, r3
 8016dbc:	42ac      	cmp	r4, r5
 8016dbe:	d101      	bne.n	8016dc4 <__sfputs_r+0x12>
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e007      	b.n	8016dd4 <__sfputs_r+0x22>
 8016dc4:	463a      	mov	r2, r7
 8016dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dca:	4630      	mov	r0, r6
 8016dcc:	f7ff ffda 	bl	8016d84 <__sfputc_r>
 8016dd0:	1c43      	adds	r3, r0, #1
 8016dd2:	d1f3      	bne.n	8016dbc <__sfputs_r+0xa>
 8016dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016dd8 <_vfiprintf_r>:
 8016dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ddc:	460c      	mov	r4, r1
 8016dde:	b09d      	sub	sp, #116	; 0x74
 8016de0:	4617      	mov	r7, r2
 8016de2:	461d      	mov	r5, r3
 8016de4:	4606      	mov	r6, r0
 8016de6:	b118      	cbz	r0, 8016df0 <_vfiprintf_r+0x18>
 8016de8:	6983      	ldr	r3, [r0, #24]
 8016dea:	b90b      	cbnz	r3, 8016df0 <_vfiprintf_r+0x18>
 8016dec:	f7fe fbac 	bl	8015548 <__sinit>
 8016df0:	4b7c      	ldr	r3, [pc, #496]	; (8016fe4 <_vfiprintf_r+0x20c>)
 8016df2:	429c      	cmp	r4, r3
 8016df4:	d158      	bne.n	8016ea8 <_vfiprintf_r+0xd0>
 8016df6:	6874      	ldr	r4, [r6, #4]
 8016df8:	89a3      	ldrh	r3, [r4, #12]
 8016dfa:	0718      	lsls	r0, r3, #28
 8016dfc:	d55e      	bpl.n	8016ebc <_vfiprintf_r+0xe4>
 8016dfe:	6923      	ldr	r3, [r4, #16]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d05b      	beq.n	8016ebc <_vfiprintf_r+0xe4>
 8016e04:	2300      	movs	r3, #0
 8016e06:	9309      	str	r3, [sp, #36]	; 0x24
 8016e08:	2320      	movs	r3, #32
 8016e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e0e:	2330      	movs	r3, #48	; 0x30
 8016e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e14:	9503      	str	r5, [sp, #12]
 8016e16:	f04f 0b01 	mov.w	fp, #1
 8016e1a:	46b8      	mov	r8, r7
 8016e1c:	4645      	mov	r5, r8
 8016e1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e22:	b10b      	cbz	r3, 8016e28 <_vfiprintf_r+0x50>
 8016e24:	2b25      	cmp	r3, #37	; 0x25
 8016e26:	d154      	bne.n	8016ed2 <_vfiprintf_r+0xfa>
 8016e28:	ebb8 0a07 	subs.w	sl, r8, r7
 8016e2c:	d00b      	beq.n	8016e46 <_vfiprintf_r+0x6e>
 8016e2e:	4653      	mov	r3, sl
 8016e30:	463a      	mov	r2, r7
 8016e32:	4621      	mov	r1, r4
 8016e34:	4630      	mov	r0, r6
 8016e36:	f7ff ffbc 	bl	8016db2 <__sfputs_r>
 8016e3a:	3001      	adds	r0, #1
 8016e3c:	f000 80c2 	beq.w	8016fc4 <_vfiprintf_r+0x1ec>
 8016e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e42:	4453      	add	r3, sl
 8016e44:	9309      	str	r3, [sp, #36]	; 0x24
 8016e46:	f898 3000 	ldrb.w	r3, [r8]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	f000 80ba 	beq.w	8016fc4 <_vfiprintf_r+0x1ec>
 8016e50:	2300      	movs	r3, #0
 8016e52:	f04f 32ff 	mov.w	r2, #4294967295
 8016e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e5a:	9304      	str	r3, [sp, #16]
 8016e5c:	9307      	str	r3, [sp, #28]
 8016e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e62:	931a      	str	r3, [sp, #104]	; 0x68
 8016e64:	46a8      	mov	r8, r5
 8016e66:	2205      	movs	r2, #5
 8016e68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016e6c:	485e      	ldr	r0, [pc, #376]	; (8016fe8 <_vfiprintf_r+0x210>)
 8016e6e:	f7e9 f9cf 	bl	8000210 <memchr>
 8016e72:	9b04      	ldr	r3, [sp, #16]
 8016e74:	bb78      	cbnz	r0, 8016ed6 <_vfiprintf_r+0xfe>
 8016e76:	06d9      	lsls	r1, r3, #27
 8016e78:	bf44      	itt	mi
 8016e7a:	2220      	movmi	r2, #32
 8016e7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e80:	071a      	lsls	r2, r3, #28
 8016e82:	bf44      	itt	mi
 8016e84:	222b      	movmi	r2, #43	; 0x2b
 8016e86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e8a:	782a      	ldrb	r2, [r5, #0]
 8016e8c:	2a2a      	cmp	r2, #42	; 0x2a
 8016e8e:	d02a      	beq.n	8016ee6 <_vfiprintf_r+0x10e>
 8016e90:	9a07      	ldr	r2, [sp, #28]
 8016e92:	46a8      	mov	r8, r5
 8016e94:	2000      	movs	r0, #0
 8016e96:	250a      	movs	r5, #10
 8016e98:	4641      	mov	r1, r8
 8016e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e9e:	3b30      	subs	r3, #48	; 0x30
 8016ea0:	2b09      	cmp	r3, #9
 8016ea2:	d969      	bls.n	8016f78 <_vfiprintf_r+0x1a0>
 8016ea4:	b360      	cbz	r0, 8016f00 <_vfiprintf_r+0x128>
 8016ea6:	e024      	b.n	8016ef2 <_vfiprintf_r+0x11a>
 8016ea8:	4b50      	ldr	r3, [pc, #320]	; (8016fec <_vfiprintf_r+0x214>)
 8016eaa:	429c      	cmp	r4, r3
 8016eac:	d101      	bne.n	8016eb2 <_vfiprintf_r+0xda>
 8016eae:	68b4      	ldr	r4, [r6, #8]
 8016eb0:	e7a2      	b.n	8016df8 <_vfiprintf_r+0x20>
 8016eb2:	4b4f      	ldr	r3, [pc, #316]	; (8016ff0 <_vfiprintf_r+0x218>)
 8016eb4:	429c      	cmp	r4, r3
 8016eb6:	bf08      	it	eq
 8016eb8:	68f4      	ldreq	r4, [r6, #12]
 8016eba:	e79d      	b.n	8016df8 <_vfiprintf_r+0x20>
 8016ebc:	4621      	mov	r1, r4
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	f7fd fb90 	bl	80145e4 <__swsetup_r>
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d09d      	beq.n	8016e04 <_vfiprintf_r+0x2c>
 8016ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ecc:	b01d      	add	sp, #116	; 0x74
 8016ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed2:	46a8      	mov	r8, r5
 8016ed4:	e7a2      	b.n	8016e1c <_vfiprintf_r+0x44>
 8016ed6:	4a44      	ldr	r2, [pc, #272]	; (8016fe8 <_vfiprintf_r+0x210>)
 8016ed8:	1a80      	subs	r0, r0, r2
 8016eda:	fa0b f000 	lsl.w	r0, fp, r0
 8016ede:	4318      	orrs	r0, r3
 8016ee0:	9004      	str	r0, [sp, #16]
 8016ee2:	4645      	mov	r5, r8
 8016ee4:	e7be      	b.n	8016e64 <_vfiprintf_r+0x8c>
 8016ee6:	9a03      	ldr	r2, [sp, #12]
 8016ee8:	1d11      	adds	r1, r2, #4
 8016eea:	6812      	ldr	r2, [r2, #0]
 8016eec:	9103      	str	r1, [sp, #12]
 8016eee:	2a00      	cmp	r2, #0
 8016ef0:	db01      	blt.n	8016ef6 <_vfiprintf_r+0x11e>
 8016ef2:	9207      	str	r2, [sp, #28]
 8016ef4:	e004      	b.n	8016f00 <_vfiprintf_r+0x128>
 8016ef6:	4252      	negs	r2, r2
 8016ef8:	f043 0302 	orr.w	r3, r3, #2
 8016efc:	9207      	str	r2, [sp, #28]
 8016efe:	9304      	str	r3, [sp, #16]
 8016f00:	f898 3000 	ldrb.w	r3, [r8]
 8016f04:	2b2e      	cmp	r3, #46	; 0x2e
 8016f06:	d10e      	bne.n	8016f26 <_vfiprintf_r+0x14e>
 8016f08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f0e:	d138      	bne.n	8016f82 <_vfiprintf_r+0x1aa>
 8016f10:	9b03      	ldr	r3, [sp, #12]
 8016f12:	1d1a      	adds	r2, r3, #4
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	9203      	str	r2, [sp, #12]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	bfb8      	it	lt
 8016f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f20:	f108 0802 	add.w	r8, r8, #2
 8016f24:	9305      	str	r3, [sp, #20]
 8016f26:	4d33      	ldr	r5, [pc, #204]	; (8016ff4 <_vfiprintf_r+0x21c>)
 8016f28:	f898 1000 	ldrb.w	r1, [r8]
 8016f2c:	2203      	movs	r2, #3
 8016f2e:	4628      	mov	r0, r5
 8016f30:	f7e9 f96e 	bl	8000210 <memchr>
 8016f34:	b140      	cbz	r0, 8016f48 <_vfiprintf_r+0x170>
 8016f36:	2340      	movs	r3, #64	; 0x40
 8016f38:	1b40      	subs	r0, r0, r5
 8016f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8016f3e:	9b04      	ldr	r3, [sp, #16]
 8016f40:	4303      	orrs	r3, r0
 8016f42:	f108 0801 	add.w	r8, r8, #1
 8016f46:	9304      	str	r3, [sp, #16]
 8016f48:	f898 1000 	ldrb.w	r1, [r8]
 8016f4c:	482a      	ldr	r0, [pc, #168]	; (8016ff8 <_vfiprintf_r+0x220>)
 8016f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f52:	2206      	movs	r2, #6
 8016f54:	f108 0701 	add.w	r7, r8, #1
 8016f58:	f7e9 f95a 	bl	8000210 <memchr>
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	d037      	beq.n	8016fd0 <_vfiprintf_r+0x1f8>
 8016f60:	4b26      	ldr	r3, [pc, #152]	; (8016ffc <_vfiprintf_r+0x224>)
 8016f62:	bb1b      	cbnz	r3, 8016fac <_vfiprintf_r+0x1d4>
 8016f64:	9b03      	ldr	r3, [sp, #12]
 8016f66:	3307      	adds	r3, #7
 8016f68:	f023 0307 	bic.w	r3, r3, #7
 8016f6c:	3308      	adds	r3, #8
 8016f6e:	9303      	str	r3, [sp, #12]
 8016f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f72:	444b      	add	r3, r9
 8016f74:	9309      	str	r3, [sp, #36]	; 0x24
 8016f76:	e750      	b.n	8016e1a <_vfiprintf_r+0x42>
 8016f78:	fb05 3202 	mla	r2, r5, r2, r3
 8016f7c:	2001      	movs	r0, #1
 8016f7e:	4688      	mov	r8, r1
 8016f80:	e78a      	b.n	8016e98 <_vfiprintf_r+0xc0>
 8016f82:	2300      	movs	r3, #0
 8016f84:	f108 0801 	add.w	r8, r8, #1
 8016f88:	9305      	str	r3, [sp, #20]
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	250a      	movs	r5, #10
 8016f8e:	4640      	mov	r0, r8
 8016f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f94:	3a30      	subs	r2, #48	; 0x30
 8016f96:	2a09      	cmp	r2, #9
 8016f98:	d903      	bls.n	8016fa2 <_vfiprintf_r+0x1ca>
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d0c3      	beq.n	8016f26 <_vfiprintf_r+0x14e>
 8016f9e:	9105      	str	r1, [sp, #20]
 8016fa0:	e7c1      	b.n	8016f26 <_vfiprintf_r+0x14e>
 8016fa2:	fb05 2101 	mla	r1, r5, r1, r2
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	4680      	mov	r8, r0
 8016faa:	e7f0      	b.n	8016f8e <_vfiprintf_r+0x1b6>
 8016fac:	ab03      	add	r3, sp, #12
 8016fae:	9300      	str	r3, [sp, #0]
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	4b13      	ldr	r3, [pc, #76]	; (8017000 <_vfiprintf_r+0x228>)
 8016fb4:	a904      	add	r1, sp, #16
 8016fb6:	4630      	mov	r0, r6
 8016fb8:	f7fb fcea 	bl	8012990 <_printf_float>
 8016fbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016fc0:	4681      	mov	r9, r0
 8016fc2:	d1d5      	bne.n	8016f70 <_vfiprintf_r+0x198>
 8016fc4:	89a3      	ldrh	r3, [r4, #12]
 8016fc6:	065b      	lsls	r3, r3, #25
 8016fc8:	f53f af7e 	bmi.w	8016ec8 <_vfiprintf_r+0xf0>
 8016fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fce:	e77d      	b.n	8016ecc <_vfiprintf_r+0xf4>
 8016fd0:	ab03      	add	r3, sp, #12
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	4622      	mov	r2, r4
 8016fd6:	4b0a      	ldr	r3, [pc, #40]	; (8017000 <_vfiprintf_r+0x228>)
 8016fd8:	a904      	add	r1, sp, #16
 8016fda:	4630      	mov	r0, r6
 8016fdc:	f7fb ff8e 	bl	8012efc <_printf_i>
 8016fe0:	e7ec      	b.n	8016fbc <_vfiprintf_r+0x1e4>
 8016fe2:	bf00      	nop
 8016fe4:	08017b80 	.word	0x08017b80
 8016fe8:	08017ccc 	.word	0x08017ccc
 8016fec:	08017ba0 	.word	0x08017ba0
 8016ff0:	08017b60 	.word	0x08017b60
 8016ff4:	08017cd2 	.word	0x08017cd2
 8016ff8:	08017cd6 	.word	0x08017cd6
 8016ffc:	08012991 	.word	0x08012991
 8017000:	08016db3 	.word	0x08016db3

08017004 <_scanf_chars>:
 8017004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017008:	4615      	mov	r5, r2
 801700a:	688a      	ldr	r2, [r1, #8]
 801700c:	4680      	mov	r8, r0
 801700e:	460c      	mov	r4, r1
 8017010:	b932      	cbnz	r2, 8017020 <_scanf_chars+0x1c>
 8017012:	698a      	ldr	r2, [r1, #24]
 8017014:	2a00      	cmp	r2, #0
 8017016:	bf14      	ite	ne
 8017018:	f04f 32ff 	movne.w	r2, #4294967295
 801701c:	2201      	moveq	r2, #1
 801701e:	608a      	str	r2, [r1, #8]
 8017020:	6822      	ldr	r2, [r4, #0]
 8017022:	06d1      	lsls	r1, r2, #27
 8017024:	bf5f      	itttt	pl
 8017026:	681a      	ldrpl	r2, [r3, #0]
 8017028:	1d11      	addpl	r1, r2, #4
 801702a:	6019      	strpl	r1, [r3, #0]
 801702c:	6817      	ldrpl	r7, [r2, #0]
 801702e:	2600      	movs	r6, #0
 8017030:	69a3      	ldr	r3, [r4, #24]
 8017032:	b1db      	cbz	r3, 801706c <_scanf_chars+0x68>
 8017034:	2b01      	cmp	r3, #1
 8017036:	d107      	bne.n	8017048 <_scanf_chars+0x44>
 8017038:	682b      	ldr	r3, [r5, #0]
 801703a:	6962      	ldr	r2, [r4, #20]
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	5cd3      	ldrb	r3, [r2, r3]
 8017040:	b9a3      	cbnz	r3, 801706c <_scanf_chars+0x68>
 8017042:	2e00      	cmp	r6, #0
 8017044:	d132      	bne.n	80170ac <_scanf_chars+0xa8>
 8017046:	e006      	b.n	8017056 <_scanf_chars+0x52>
 8017048:	2b02      	cmp	r3, #2
 801704a:	d007      	beq.n	801705c <_scanf_chars+0x58>
 801704c:	2e00      	cmp	r6, #0
 801704e:	d12d      	bne.n	80170ac <_scanf_chars+0xa8>
 8017050:	69a3      	ldr	r3, [r4, #24]
 8017052:	2b01      	cmp	r3, #1
 8017054:	d12a      	bne.n	80170ac <_scanf_chars+0xa8>
 8017056:	2001      	movs	r0, #1
 8017058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801705c:	f7fe fe28 	bl	8015cb0 <__locale_ctype_ptr>
 8017060:	682b      	ldr	r3, [r5, #0]
 8017062:	781b      	ldrb	r3, [r3, #0]
 8017064:	4418      	add	r0, r3
 8017066:	7843      	ldrb	r3, [r0, #1]
 8017068:	071b      	lsls	r3, r3, #28
 801706a:	d4ef      	bmi.n	801704c <_scanf_chars+0x48>
 801706c:	6823      	ldr	r3, [r4, #0]
 801706e:	06da      	lsls	r2, r3, #27
 8017070:	bf5e      	ittt	pl
 8017072:	682b      	ldrpl	r3, [r5, #0]
 8017074:	781b      	ldrbpl	r3, [r3, #0]
 8017076:	703b      	strbpl	r3, [r7, #0]
 8017078:	682a      	ldr	r2, [r5, #0]
 801707a:	686b      	ldr	r3, [r5, #4]
 801707c:	f102 0201 	add.w	r2, r2, #1
 8017080:	602a      	str	r2, [r5, #0]
 8017082:	68a2      	ldr	r2, [r4, #8]
 8017084:	f103 33ff 	add.w	r3, r3, #4294967295
 8017088:	f102 32ff 	add.w	r2, r2, #4294967295
 801708c:	606b      	str	r3, [r5, #4]
 801708e:	f106 0601 	add.w	r6, r6, #1
 8017092:	bf58      	it	pl
 8017094:	3701      	addpl	r7, #1
 8017096:	60a2      	str	r2, [r4, #8]
 8017098:	b142      	cbz	r2, 80170ac <_scanf_chars+0xa8>
 801709a:	2b00      	cmp	r3, #0
 801709c:	dcc8      	bgt.n	8017030 <_scanf_chars+0x2c>
 801709e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80170a2:	4629      	mov	r1, r5
 80170a4:	4640      	mov	r0, r8
 80170a6:	4798      	blx	r3
 80170a8:	2800      	cmp	r0, #0
 80170aa:	d0c1      	beq.n	8017030 <_scanf_chars+0x2c>
 80170ac:	6823      	ldr	r3, [r4, #0]
 80170ae:	f013 0310 	ands.w	r3, r3, #16
 80170b2:	d105      	bne.n	80170c0 <_scanf_chars+0xbc>
 80170b4:	68e2      	ldr	r2, [r4, #12]
 80170b6:	3201      	adds	r2, #1
 80170b8:	60e2      	str	r2, [r4, #12]
 80170ba:	69a2      	ldr	r2, [r4, #24]
 80170bc:	b102      	cbz	r2, 80170c0 <_scanf_chars+0xbc>
 80170be:	703b      	strb	r3, [r7, #0]
 80170c0:	6923      	ldr	r3, [r4, #16]
 80170c2:	441e      	add	r6, r3
 80170c4:	6126      	str	r6, [r4, #16]
 80170c6:	2000      	movs	r0, #0
 80170c8:	e7c6      	b.n	8017058 <_scanf_chars+0x54>
	...

080170cc <_scanf_i>:
 80170cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d0:	469a      	mov	sl, r3
 80170d2:	4b74      	ldr	r3, [pc, #464]	; (80172a4 <_scanf_i+0x1d8>)
 80170d4:	460c      	mov	r4, r1
 80170d6:	4683      	mov	fp, r0
 80170d8:	4616      	mov	r6, r2
 80170da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80170de:	b087      	sub	sp, #28
 80170e0:	ab03      	add	r3, sp, #12
 80170e2:	68a7      	ldr	r7, [r4, #8]
 80170e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80170e8:	4b6f      	ldr	r3, [pc, #444]	; (80172a8 <_scanf_i+0x1dc>)
 80170ea:	69a1      	ldr	r1, [r4, #24]
 80170ec:	4a6f      	ldr	r2, [pc, #444]	; (80172ac <_scanf_i+0x1e0>)
 80170ee:	2903      	cmp	r1, #3
 80170f0:	bf08      	it	eq
 80170f2:	461a      	moveq	r2, r3
 80170f4:	1e7b      	subs	r3, r7, #1
 80170f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80170fa:	bf84      	itt	hi
 80170fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017100:	60a3      	strhi	r3, [r4, #8]
 8017102:	6823      	ldr	r3, [r4, #0]
 8017104:	9200      	str	r2, [sp, #0]
 8017106:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801710a:	bf88      	it	hi
 801710c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017110:	f104 091c 	add.w	r9, r4, #28
 8017114:	6023      	str	r3, [r4, #0]
 8017116:	bf8c      	ite	hi
 8017118:	197f      	addhi	r7, r7, r5
 801711a:	2700      	movls	r7, #0
 801711c:	464b      	mov	r3, r9
 801711e:	f04f 0800 	mov.w	r8, #0
 8017122:	9301      	str	r3, [sp, #4]
 8017124:	6831      	ldr	r1, [r6, #0]
 8017126:	ab03      	add	r3, sp, #12
 8017128:	2202      	movs	r2, #2
 801712a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801712e:	7809      	ldrb	r1, [r1, #0]
 8017130:	f7e9 f86e 	bl	8000210 <memchr>
 8017134:	9b01      	ldr	r3, [sp, #4]
 8017136:	b330      	cbz	r0, 8017186 <_scanf_i+0xba>
 8017138:	f1b8 0f01 	cmp.w	r8, #1
 801713c:	d15a      	bne.n	80171f4 <_scanf_i+0x128>
 801713e:	6862      	ldr	r2, [r4, #4]
 8017140:	b92a      	cbnz	r2, 801714e <_scanf_i+0x82>
 8017142:	6822      	ldr	r2, [r4, #0]
 8017144:	2108      	movs	r1, #8
 8017146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801714a:	6061      	str	r1, [r4, #4]
 801714c:	6022      	str	r2, [r4, #0]
 801714e:	6822      	ldr	r2, [r4, #0]
 8017150:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017154:	6022      	str	r2, [r4, #0]
 8017156:	68a2      	ldr	r2, [r4, #8]
 8017158:	1e51      	subs	r1, r2, #1
 801715a:	60a1      	str	r1, [r4, #8]
 801715c:	b19a      	cbz	r2, 8017186 <_scanf_i+0xba>
 801715e:	6832      	ldr	r2, [r6, #0]
 8017160:	1c51      	adds	r1, r2, #1
 8017162:	6031      	str	r1, [r6, #0]
 8017164:	7812      	ldrb	r2, [r2, #0]
 8017166:	701a      	strb	r2, [r3, #0]
 8017168:	1c5d      	adds	r5, r3, #1
 801716a:	6873      	ldr	r3, [r6, #4]
 801716c:	3b01      	subs	r3, #1
 801716e:	2b00      	cmp	r3, #0
 8017170:	6073      	str	r3, [r6, #4]
 8017172:	dc07      	bgt.n	8017184 <_scanf_i+0xb8>
 8017174:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017178:	4631      	mov	r1, r6
 801717a:	4658      	mov	r0, fp
 801717c:	4798      	blx	r3
 801717e:	2800      	cmp	r0, #0
 8017180:	f040 8086 	bne.w	8017290 <_scanf_i+0x1c4>
 8017184:	462b      	mov	r3, r5
 8017186:	f108 0801 	add.w	r8, r8, #1
 801718a:	f1b8 0f03 	cmp.w	r8, #3
 801718e:	d1c8      	bne.n	8017122 <_scanf_i+0x56>
 8017190:	6862      	ldr	r2, [r4, #4]
 8017192:	b90a      	cbnz	r2, 8017198 <_scanf_i+0xcc>
 8017194:	220a      	movs	r2, #10
 8017196:	6062      	str	r2, [r4, #4]
 8017198:	6862      	ldr	r2, [r4, #4]
 801719a:	4945      	ldr	r1, [pc, #276]	; (80172b0 <_scanf_i+0x1e4>)
 801719c:	6960      	ldr	r0, [r4, #20]
 801719e:	9301      	str	r3, [sp, #4]
 80171a0:	1a89      	subs	r1, r1, r2
 80171a2:	f000 f8a9 	bl	80172f8 <__sccl>
 80171a6:	9b01      	ldr	r3, [sp, #4]
 80171a8:	f04f 0800 	mov.w	r8, #0
 80171ac:	461d      	mov	r5, r3
 80171ae:	68a3      	ldr	r3, [r4, #8]
 80171b0:	6822      	ldr	r2, [r4, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d03a      	beq.n	801722c <_scanf_i+0x160>
 80171b6:	6831      	ldr	r1, [r6, #0]
 80171b8:	6960      	ldr	r0, [r4, #20]
 80171ba:	f891 c000 	ldrb.w	ip, [r1]
 80171be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80171c2:	2800      	cmp	r0, #0
 80171c4:	d032      	beq.n	801722c <_scanf_i+0x160>
 80171c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80171ca:	d121      	bne.n	8017210 <_scanf_i+0x144>
 80171cc:	0510      	lsls	r0, r2, #20
 80171ce:	d51f      	bpl.n	8017210 <_scanf_i+0x144>
 80171d0:	f108 0801 	add.w	r8, r8, #1
 80171d4:	b117      	cbz	r7, 80171dc <_scanf_i+0x110>
 80171d6:	3301      	adds	r3, #1
 80171d8:	3f01      	subs	r7, #1
 80171da:	60a3      	str	r3, [r4, #8]
 80171dc:	6873      	ldr	r3, [r6, #4]
 80171de:	3b01      	subs	r3, #1
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	6073      	str	r3, [r6, #4]
 80171e4:	dd1b      	ble.n	801721e <_scanf_i+0x152>
 80171e6:	6833      	ldr	r3, [r6, #0]
 80171e8:	3301      	adds	r3, #1
 80171ea:	6033      	str	r3, [r6, #0]
 80171ec:	68a3      	ldr	r3, [r4, #8]
 80171ee:	3b01      	subs	r3, #1
 80171f0:	60a3      	str	r3, [r4, #8]
 80171f2:	e7dc      	b.n	80171ae <_scanf_i+0xe2>
 80171f4:	f1b8 0f02 	cmp.w	r8, #2
 80171f8:	d1ad      	bne.n	8017156 <_scanf_i+0x8a>
 80171fa:	6822      	ldr	r2, [r4, #0]
 80171fc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017200:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017204:	d1bf      	bne.n	8017186 <_scanf_i+0xba>
 8017206:	2110      	movs	r1, #16
 8017208:	6061      	str	r1, [r4, #4]
 801720a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801720e:	e7a1      	b.n	8017154 <_scanf_i+0x88>
 8017210:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017214:	6022      	str	r2, [r4, #0]
 8017216:	780b      	ldrb	r3, [r1, #0]
 8017218:	702b      	strb	r3, [r5, #0]
 801721a:	3501      	adds	r5, #1
 801721c:	e7de      	b.n	80171dc <_scanf_i+0x110>
 801721e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017222:	4631      	mov	r1, r6
 8017224:	4658      	mov	r0, fp
 8017226:	4798      	blx	r3
 8017228:	2800      	cmp	r0, #0
 801722a:	d0df      	beq.n	80171ec <_scanf_i+0x120>
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	05d9      	lsls	r1, r3, #23
 8017230:	d50c      	bpl.n	801724c <_scanf_i+0x180>
 8017232:	454d      	cmp	r5, r9
 8017234:	d908      	bls.n	8017248 <_scanf_i+0x17c>
 8017236:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801723a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801723e:	4632      	mov	r2, r6
 8017240:	4658      	mov	r0, fp
 8017242:	4798      	blx	r3
 8017244:	1e6f      	subs	r7, r5, #1
 8017246:	463d      	mov	r5, r7
 8017248:	454d      	cmp	r5, r9
 801724a:	d029      	beq.n	80172a0 <_scanf_i+0x1d4>
 801724c:	6822      	ldr	r2, [r4, #0]
 801724e:	f012 0210 	ands.w	r2, r2, #16
 8017252:	d113      	bne.n	801727c <_scanf_i+0x1b0>
 8017254:	702a      	strb	r2, [r5, #0]
 8017256:	6863      	ldr	r3, [r4, #4]
 8017258:	9e00      	ldr	r6, [sp, #0]
 801725a:	4649      	mov	r1, r9
 801725c:	4658      	mov	r0, fp
 801725e:	47b0      	blx	r6
 8017260:	f8da 3000 	ldr.w	r3, [sl]
 8017264:	6821      	ldr	r1, [r4, #0]
 8017266:	1d1a      	adds	r2, r3, #4
 8017268:	f8ca 2000 	str.w	r2, [sl]
 801726c:	f011 0f20 	tst.w	r1, #32
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	d010      	beq.n	8017296 <_scanf_i+0x1ca>
 8017274:	6018      	str	r0, [r3, #0]
 8017276:	68e3      	ldr	r3, [r4, #12]
 8017278:	3301      	adds	r3, #1
 801727a:	60e3      	str	r3, [r4, #12]
 801727c:	eba5 0509 	sub.w	r5, r5, r9
 8017280:	44a8      	add	r8, r5
 8017282:	6925      	ldr	r5, [r4, #16]
 8017284:	4445      	add	r5, r8
 8017286:	6125      	str	r5, [r4, #16]
 8017288:	2000      	movs	r0, #0
 801728a:	b007      	add	sp, #28
 801728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017290:	f04f 0800 	mov.w	r8, #0
 8017294:	e7ca      	b.n	801722c <_scanf_i+0x160>
 8017296:	07ca      	lsls	r2, r1, #31
 8017298:	bf4c      	ite	mi
 801729a:	8018      	strhmi	r0, [r3, #0]
 801729c:	6018      	strpl	r0, [r3, #0]
 801729e:	e7ea      	b.n	8017276 <_scanf_i+0x1aa>
 80172a0:	2001      	movs	r0, #1
 80172a2:	e7f2      	b.n	801728a <_scanf_i+0x1be>
 80172a4:	0801781c 	.word	0x0801781c
 80172a8:	080144b9 	.word	0x080144b9
 80172ac:	08017475 	.word	0x08017475
 80172b0:	08017ced 	.word	0x08017ced

080172b4 <_read_r>:
 80172b4:	b538      	push	{r3, r4, r5, lr}
 80172b6:	4c07      	ldr	r4, [pc, #28]	; (80172d4 <_read_r+0x20>)
 80172b8:	4605      	mov	r5, r0
 80172ba:	4608      	mov	r0, r1
 80172bc:	4611      	mov	r1, r2
 80172be:	2200      	movs	r2, #0
 80172c0:	6022      	str	r2, [r4, #0]
 80172c2:	461a      	mov	r2, r3
 80172c4:	f7ee fba0 	bl	8005a08 <_read>
 80172c8:	1c43      	adds	r3, r0, #1
 80172ca:	d102      	bne.n	80172d2 <_read_r+0x1e>
 80172cc:	6823      	ldr	r3, [r4, #0]
 80172ce:	b103      	cbz	r3, 80172d2 <_read_r+0x1e>
 80172d0:	602b      	str	r3, [r5, #0]
 80172d2:	bd38      	pop	{r3, r4, r5, pc}
 80172d4:	2003b434 	.word	0x2003b434

080172d8 <_sbrk_r>:
 80172d8:	b538      	push	{r3, r4, r5, lr}
 80172da:	4c06      	ldr	r4, [pc, #24]	; (80172f4 <_sbrk_r+0x1c>)
 80172dc:	2300      	movs	r3, #0
 80172de:	4605      	mov	r5, r0
 80172e0:	4608      	mov	r0, r1
 80172e2:	6023      	str	r3, [r4, #0]
 80172e4:	f7ee fbe2 	bl	8005aac <_sbrk>
 80172e8:	1c43      	adds	r3, r0, #1
 80172ea:	d102      	bne.n	80172f2 <_sbrk_r+0x1a>
 80172ec:	6823      	ldr	r3, [r4, #0]
 80172ee:	b103      	cbz	r3, 80172f2 <_sbrk_r+0x1a>
 80172f0:	602b      	str	r3, [r5, #0]
 80172f2:	bd38      	pop	{r3, r4, r5, pc}
 80172f4:	2003b434 	.word	0x2003b434

080172f8 <__sccl>:
 80172f8:	b570      	push	{r4, r5, r6, lr}
 80172fa:	780b      	ldrb	r3, [r1, #0]
 80172fc:	2b5e      	cmp	r3, #94	; 0x5e
 80172fe:	bf13      	iteet	ne
 8017300:	1c4a      	addne	r2, r1, #1
 8017302:	1c8a      	addeq	r2, r1, #2
 8017304:	784b      	ldrbeq	r3, [r1, #1]
 8017306:	2100      	movne	r1, #0
 8017308:	bf08      	it	eq
 801730a:	2101      	moveq	r1, #1
 801730c:	1e44      	subs	r4, r0, #1
 801730e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017312:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017316:	42ac      	cmp	r4, r5
 8017318:	d1fb      	bne.n	8017312 <__sccl+0x1a>
 801731a:	b913      	cbnz	r3, 8017322 <__sccl+0x2a>
 801731c:	3a01      	subs	r2, #1
 801731e:	4610      	mov	r0, r2
 8017320:	bd70      	pop	{r4, r5, r6, pc}
 8017322:	f081 0401 	eor.w	r4, r1, #1
 8017326:	54c4      	strb	r4, [r0, r3]
 8017328:	1c51      	adds	r1, r2, #1
 801732a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801732e:	2d2d      	cmp	r5, #45	; 0x2d
 8017330:	f101 36ff 	add.w	r6, r1, #4294967295
 8017334:	460a      	mov	r2, r1
 8017336:	d006      	beq.n	8017346 <__sccl+0x4e>
 8017338:	2d5d      	cmp	r5, #93	; 0x5d
 801733a:	d0f0      	beq.n	801731e <__sccl+0x26>
 801733c:	b90d      	cbnz	r5, 8017342 <__sccl+0x4a>
 801733e:	4632      	mov	r2, r6
 8017340:	e7ed      	b.n	801731e <__sccl+0x26>
 8017342:	462b      	mov	r3, r5
 8017344:	e7ef      	b.n	8017326 <__sccl+0x2e>
 8017346:	780e      	ldrb	r6, [r1, #0]
 8017348:	2e5d      	cmp	r6, #93	; 0x5d
 801734a:	d0fa      	beq.n	8017342 <__sccl+0x4a>
 801734c:	42b3      	cmp	r3, r6
 801734e:	dcf8      	bgt.n	8017342 <__sccl+0x4a>
 8017350:	3301      	adds	r3, #1
 8017352:	429e      	cmp	r6, r3
 8017354:	54c4      	strb	r4, [r0, r3]
 8017356:	dcfb      	bgt.n	8017350 <__sccl+0x58>
 8017358:	3102      	adds	r1, #2
 801735a:	e7e6      	b.n	801732a <__sccl+0x32>

0801735c <strncmp>:
 801735c:	b510      	push	{r4, lr}
 801735e:	b16a      	cbz	r2, 801737c <strncmp+0x20>
 8017360:	3901      	subs	r1, #1
 8017362:	1884      	adds	r4, r0, r2
 8017364:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017368:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801736c:	4293      	cmp	r3, r2
 801736e:	d103      	bne.n	8017378 <strncmp+0x1c>
 8017370:	42a0      	cmp	r0, r4
 8017372:	d001      	beq.n	8017378 <strncmp+0x1c>
 8017374:	2b00      	cmp	r3, #0
 8017376:	d1f5      	bne.n	8017364 <strncmp+0x8>
 8017378:	1a98      	subs	r0, r3, r2
 801737a:	bd10      	pop	{r4, pc}
 801737c:	4610      	mov	r0, r2
 801737e:	e7fc      	b.n	801737a <strncmp+0x1e>

08017380 <_strtoul_l.isra.0>:
 8017380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017384:	4680      	mov	r8, r0
 8017386:	4689      	mov	r9, r1
 8017388:	4692      	mov	sl, r2
 801738a:	461e      	mov	r6, r3
 801738c:	460f      	mov	r7, r1
 801738e:	463d      	mov	r5, r7
 8017390:	9808      	ldr	r0, [sp, #32]
 8017392:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017396:	f7fe fc87 	bl	8015ca8 <__locale_ctype_ptr_l>
 801739a:	4420      	add	r0, r4
 801739c:	7843      	ldrb	r3, [r0, #1]
 801739e:	f013 0308 	ands.w	r3, r3, #8
 80173a2:	d130      	bne.n	8017406 <_strtoul_l.isra.0+0x86>
 80173a4:	2c2d      	cmp	r4, #45	; 0x2d
 80173a6:	d130      	bne.n	801740a <_strtoul_l.isra.0+0x8a>
 80173a8:	787c      	ldrb	r4, [r7, #1]
 80173aa:	1cbd      	adds	r5, r7, #2
 80173ac:	2101      	movs	r1, #1
 80173ae:	2e00      	cmp	r6, #0
 80173b0:	d05c      	beq.n	801746c <_strtoul_l.isra.0+0xec>
 80173b2:	2e10      	cmp	r6, #16
 80173b4:	d109      	bne.n	80173ca <_strtoul_l.isra.0+0x4a>
 80173b6:	2c30      	cmp	r4, #48	; 0x30
 80173b8:	d107      	bne.n	80173ca <_strtoul_l.isra.0+0x4a>
 80173ba:	782b      	ldrb	r3, [r5, #0]
 80173bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80173c0:	2b58      	cmp	r3, #88	; 0x58
 80173c2:	d14e      	bne.n	8017462 <_strtoul_l.isra.0+0xe2>
 80173c4:	786c      	ldrb	r4, [r5, #1]
 80173c6:	2610      	movs	r6, #16
 80173c8:	3502      	adds	r5, #2
 80173ca:	f04f 32ff 	mov.w	r2, #4294967295
 80173ce:	2300      	movs	r3, #0
 80173d0:	fbb2 f2f6 	udiv	r2, r2, r6
 80173d4:	fb06 fc02 	mul.w	ip, r6, r2
 80173d8:	ea6f 0c0c 	mvn.w	ip, ip
 80173dc:	4618      	mov	r0, r3
 80173de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80173e2:	2f09      	cmp	r7, #9
 80173e4:	d817      	bhi.n	8017416 <_strtoul_l.isra.0+0x96>
 80173e6:	463c      	mov	r4, r7
 80173e8:	42a6      	cmp	r6, r4
 80173ea:	dd23      	ble.n	8017434 <_strtoul_l.isra.0+0xb4>
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	db1e      	blt.n	801742e <_strtoul_l.isra.0+0xae>
 80173f0:	4282      	cmp	r2, r0
 80173f2:	d31c      	bcc.n	801742e <_strtoul_l.isra.0+0xae>
 80173f4:	d101      	bne.n	80173fa <_strtoul_l.isra.0+0x7a>
 80173f6:	45a4      	cmp	ip, r4
 80173f8:	db19      	blt.n	801742e <_strtoul_l.isra.0+0xae>
 80173fa:	fb00 4006 	mla	r0, r0, r6, r4
 80173fe:	2301      	movs	r3, #1
 8017400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017404:	e7eb      	b.n	80173de <_strtoul_l.isra.0+0x5e>
 8017406:	462f      	mov	r7, r5
 8017408:	e7c1      	b.n	801738e <_strtoul_l.isra.0+0xe>
 801740a:	2c2b      	cmp	r4, #43	; 0x2b
 801740c:	bf04      	itt	eq
 801740e:	1cbd      	addeq	r5, r7, #2
 8017410:	787c      	ldrbeq	r4, [r7, #1]
 8017412:	4619      	mov	r1, r3
 8017414:	e7cb      	b.n	80173ae <_strtoul_l.isra.0+0x2e>
 8017416:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801741a:	2f19      	cmp	r7, #25
 801741c:	d801      	bhi.n	8017422 <_strtoul_l.isra.0+0xa2>
 801741e:	3c37      	subs	r4, #55	; 0x37
 8017420:	e7e2      	b.n	80173e8 <_strtoul_l.isra.0+0x68>
 8017422:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017426:	2f19      	cmp	r7, #25
 8017428:	d804      	bhi.n	8017434 <_strtoul_l.isra.0+0xb4>
 801742a:	3c57      	subs	r4, #87	; 0x57
 801742c:	e7dc      	b.n	80173e8 <_strtoul_l.isra.0+0x68>
 801742e:	f04f 33ff 	mov.w	r3, #4294967295
 8017432:	e7e5      	b.n	8017400 <_strtoul_l.isra.0+0x80>
 8017434:	2b00      	cmp	r3, #0
 8017436:	da09      	bge.n	801744c <_strtoul_l.isra.0+0xcc>
 8017438:	2322      	movs	r3, #34	; 0x22
 801743a:	f8c8 3000 	str.w	r3, [r8]
 801743e:	f04f 30ff 	mov.w	r0, #4294967295
 8017442:	f1ba 0f00 	cmp.w	sl, #0
 8017446:	d107      	bne.n	8017458 <_strtoul_l.isra.0+0xd8>
 8017448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801744c:	b101      	cbz	r1, 8017450 <_strtoul_l.isra.0+0xd0>
 801744e:	4240      	negs	r0, r0
 8017450:	f1ba 0f00 	cmp.w	sl, #0
 8017454:	d0f8      	beq.n	8017448 <_strtoul_l.isra.0+0xc8>
 8017456:	b10b      	cbz	r3, 801745c <_strtoul_l.isra.0+0xdc>
 8017458:	f105 39ff 	add.w	r9, r5, #4294967295
 801745c:	f8ca 9000 	str.w	r9, [sl]
 8017460:	e7f2      	b.n	8017448 <_strtoul_l.isra.0+0xc8>
 8017462:	2430      	movs	r4, #48	; 0x30
 8017464:	2e00      	cmp	r6, #0
 8017466:	d1b0      	bne.n	80173ca <_strtoul_l.isra.0+0x4a>
 8017468:	2608      	movs	r6, #8
 801746a:	e7ae      	b.n	80173ca <_strtoul_l.isra.0+0x4a>
 801746c:	2c30      	cmp	r4, #48	; 0x30
 801746e:	d0a4      	beq.n	80173ba <_strtoul_l.isra.0+0x3a>
 8017470:	260a      	movs	r6, #10
 8017472:	e7aa      	b.n	80173ca <_strtoul_l.isra.0+0x4a>

08017474 <_strtoul_r>:
 8017474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017476:	4c06      	ldr	r4, [pc, #24]	; (8017490 <_strtoul_r+0x1c>)
 8017478:	4d06      	ldr	r5, [pc, #24]	; (8017494 <_strtoul_r+0x20>)
 801747a:	6824      	ldr	r4, [r4, #0]
 801747c:	6a24      	ldr	r4, [r4, #32]
 801747e:	2c00      	cmp	r4, #0
 8017480:	bf08      	it	eq
 8017482:	462c      	moveq	r4, r5
 8017484:	9400      	str	r4, [sp, #0]
 8017486:	f7ff ff7b 	bl	8017380 <_strtoul_l.isra.0>
 801748a:	b003      	add	sp, #12
 801748c:	bd30      	pop	{r4, r5, pc}
 801748e:	bf00      	nop
 8017490:	2000000c 	.word	0x2000000c
 8017494:	20000070 	.word	0x20000070

08017498 <__submore>:
 8017498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801749c:	460c      	mov	r4, r1
 801749e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80174a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174a4:	4299      	cmp	r1, r3
 80174a6:	d11d      	bne.n	80174e4 <__submore+0x4c>
 80174a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80174ac:	f7ff f914 	bl	80166d8 <_malloc_r>
 80174b0:	b918      	cbnz	r0, 80174ba <__submore+0x22>
 80174b2:	f04f 30ff 	mov.w	r0, #4294967295
 80174b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80174be:	63a3      	str	r3, [r4, #56]	; 0x38
 80174c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80174c4:	6360      	str	r0, [r4, #52]	; 0x34
 80174c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80174ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80174ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80174d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80174d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80174da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80174de:	6020      	str	r0, [r4, #0]
 80174e0:	2000      	movs	r0, #0
 80174e2:	e7e8      	b.n	80174b6 <__submore+0x1e>
 80174e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80174e6:	0077      	lsls	r7, r6, #1
 80174e8:	463a      	mov	r2, r7
 80174ea:	f000 f85a 	bl	80175a2 <_realloc_r>
 80174ee:	4605      	mov	r5, r0
 80174f0:	2800      	cmp	r0, #0
 80174f2:	d0de      	beq.n	80174b2 <__submore+0x1a>
 80174f4:	eb00 0806 	add.w	r8, r0, r6
 80174f8:	4601      	mov	r1, r0
 80174fa:	4632      	mov	r2, r6
 80174fc:	4640      	mov	r0, r8
 80174fe:	f7fe fc85 	bl	8015e0c <memcpy>
 8017502:	f8c4 8000 	str.w	r8, [r4]
 8017506:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801750a:	e7e9      	b.n	80174e0 <__submore+0x48>

0801750c <__ascii_wctomb>:
 801750c:	b149      	cbz	r1, 8017522 <__ascii_wctomb+0x16>
 801750e:	2aff      	cmp	r2, #255	; 0xff
 8017510:	bf85      	ittet	hi
 8017512:	238a      	movhi	r3, #138	; 0x8a
 8017514:	6003      	strhi	r3, [r0, #0]
 8017516:	700a      	strbls	r2, [r1, #0]
 8017518:	f04f 30ff 	movhi.w	r0, #4294967295
 801751c:	bf98      	it	ls
 801751e:	2001      	movls	r0, #1
 8017520:	4770      	bx	lr
 8017522:	4608      	mov	r0, r1
 8017524:	4770      	bx	lr
	...

08017528 <_fstat_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4c07      	ldr	r4, [pc, #28]	; (8017548 <_fstat_r+0x20>)
 801752c:	2300      	movs	r3, #0
 801752e:	4605      	mov	r5, r0
 8017530:	4608      	mov	r0, r1
 8017532:	4611      	mov	r1, r2
 8017534:	6023      	str	r3, [r4, #0]
 8017536:	f7ee fa90 	bl	8005a5a <_fstat>
 801753a:	1c43      	adds	r3, r0, #1
 801753c:	d102      	bne.n	8017544 <_fstat_r+0x1c>
 801753e:	6823      	ldr	r3, [r4, #0]
 8017540:	b103      	cbz	r3, 8017544 <_fstat_r+0x1c>
 8017542:	602b      	str	r3, [r5, #0]
 8017544:	bd38      	pop	{r3, r4, r5, pc}
 8017546:	bf00      	nop
 8017548:	2003b434 	.word	0x2003b434

0801754c <_isatty_r>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4c06      	ldr	r4, [pc, #24]	; (8017568 <_isatty_r+0x1c>)
 8017550:	2300      	movs	r3, #0
 8017552:	4605      	mov	r5, r0
 8017554:	4608      	mov	r0, r1
 8017556:	6023      	str	r3, [r4, #0]
 8017558:	f7ee fa8f 	bl	8005a7a <_isatty>
 801755c:	1c43      	adds	r3, r0, #1
 801755e:	d102      	bne.n	8017566 <_isatty_r+0x1a>
 8017560:	6823      	ldr	r3, [r4, #0]
 8017562:	b103      	cbz	r3, 8017566 <_isatty_r+0x1a>
 8017564:	602b      	str	r3, [r5, #0]
 8017566:	bd38      	pop	{r3, r4, r5, pc}
 8017568:	2003b434 	.word	0x2003b434

0801756c <memmove>:
 801756c:	4288      	cmp	r0, r1
 801756e:	b510      	push	{r4, lr}
 8017570:	eb01 0302 	add.w	r3, r1, r2
 8017574:	d807      	bhi.n	8017586 <memmove+0x1a>
 8017576:	1e42      	subs	r2, r0, #1
 8017578:	4299      	cmp	r1, r3
 801757a:	d00a      	beq.n	8017592 <memmove+0x26>
 801757c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017580:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017584:	e7f8      	b.n	8017578 <memmove+0xc>
 8017586:	4283      	cmp	r3, r0
 8017588:	d9f5      	bls.n	8017576 <memmove+0xa>
 801758a:	1881      	adds	r1, r0, r2
 801758c:	1ad2      	subs	r2, r2, r3
 801758e:	42d3      	cmn	r3, r2
 8017590:	d100      	bne.n	8017594 <memmove+0x28>
 8017592:	bd10      	pop	{r4, pc}
 8017594:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017598:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801759c:	e7f7      	b.n	801758e <memmove+0x22>

0801759e <__malloc_lock>:
 801759e:	4770      	bx	lr

080175a0 <__malloc_unlock>:
 80175a0:	4770      	bx	lr

080175a2 <_realloc_r>:
 80175a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175a4:	4607      	mov	r7, r0
 80175a6:	4614      	mov	r4, r2
 80175a8:	460e      	mov	r6, r1
 80175aa:	b921      	cbnz	r1, 80175b6 <_realloc_r+0x14>
 80175ac:	4611      	mov	r1, r2
 80175ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80175b2:	f7ff b891 	b.w	80166d8 <_malloc_r>
 80175b6:	b922      	cbnz	r2, 80175c2 <_realloc_r+0x20>
 80175b8:	f7ff f840 	bl	801663c <_free_r>
 80175bc:	4625      	mov	r5, r4
 80175be:	4628      	mov	r0, r5
 80175c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175c2:	f000 f814 	bl	80175ee <_malloc_usable_size_r>
 80175c6:	42a0      	cmp	r0, r4
 80175c8:	d20f      	bcs.n	80175ea <_realloc_r+0x48>
 80175ca:	4621      	mov	r1, r4
 80175cc:	4638      	mov	r0, r7
 80175ce:	f7ff f883 	bl	80166d8 <_malloc_r>
 80175d2:	4605      	mov	r5, r0
 80175d4:	2800      	cmp	r0, #0
 80175d6:	d0f2      	beq.n	80175be <_realloc_r+0x1c>
 80175d8:	4631      	mov	r1, r6
 80175da:	4622      	mov	r2, r4
 80175dc:	f7fe fc16 	bl	8015e0c <memcpy>
 80175e0:	4631      	mov	r1, r6
 80175e2:	4638      	mov	r0, r7
 80175e4:	f7ff f82a 	bl	801663c <_free_r>
 80175e8:	e7e9      	b.n	80175be <_realloc_r+0x1c>
 80175ea:	4635      	mov	r5, r6
 80175ec:	e7e7      	b.n	80175be <_realloc_r+0x1c>

080175ee <_malloc_usable_size_r>:
 80175ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175f2:	1f18      	subs	r0, r3, #4
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	bfbc      	itt	lt
 80175f8:	580b      	ldrlt	r3, [r1, r0]
 80175fa:	18c0      	addlt	r0, r0, r3
 80175fc:	4770      	bx	lr
	...

08017600 <_init>:
 8017600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017602:	bf00      	nop
 8017604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017606:	bc08      	pop	{r3}
 8017608:	469e      	mov	lr, r3
 801760a:	4770      	bx	lr

0801760c <_fini>:
 801760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801760e:	bf00      	nop
 8017610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017612:	bc08      	pop	{r3}
 8017614:	469e      	mov	lr, r3
 8017616:	4770      	bx	lr
