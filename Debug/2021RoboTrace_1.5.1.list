
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000193ec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  080195b0  080195b0  000295b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019fac  08019fac  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019fac  08019fac  00029fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019fb4  08019fb4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019fb4  08019fb4  00029fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019fbc  08019fbc  00029fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019fc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046aa8  200001e0  0801a19c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046c88  0801a19c  00036c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b156  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  000752d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00077348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026578  00000000  00000000  000ac7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111072  00000000  00000000  000d2d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a760  00000000  00000000  001e3e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019594 	.word	0x08019594

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019594 	.word	0x08019594

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 ff82 	bl	800aee0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044780 	.word	0x20044780

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 ff6a 	bl	800aee0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044780 	.word	0x20044780

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fe0b 	bl	800ac3c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fb72 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fb6c 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fb66 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fb60 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fb5a 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fb54 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fb4e 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fb48 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fb42 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fb3c 	bl	8009710 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fb30 	bl	8009710 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fb2a 	bl	8009710 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fdfd 	bl	8016d28 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fc3a 	bl	800ea70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fc36 	bl	800ea70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fc32 	bl	800ea70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fc2e 	bl	800ea70 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004486c 	.word	0x2004486c
 8001248:	200447d4 	.word	0x200447d4
 800124c:	200448f4 	.word	0x200448f4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004486c 	.word	0x2004486c
 800137c:	200448f4 	.word	0x200448f4
 8001380:	200447d4 	.word	0x200447d4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004486c 	.word	0x2004486c
 80013c4:	200447d4 	.word	0x200447d4
 80013c8:	200448f4 	.word	0x200448f4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fbee 	bl	800ec10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fbea 	bl	800ec10 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449d4 	.word	0x200449d4
 8001458:	200446b8 	.word	0x200446b8
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder16getTotalDistanceEv>:
{
	return distance_10mm_;
}

float Encoder::getTotalDistance()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	ee07 3a90 	vmov	s15, r3
}
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f9d8 	bl	8001b1c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800176c:	f000 f9ec 	bl	8001b48 <fopen_folder_and_file>

	return ret;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <user_fclose+0x1c>)
 8001788:	f011 ff9c 	bl	80136c4 <f_close>

	return ret;
 800178c:	79fb      	ldrb	r3, [r7, #7]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200435c4 	.word	0x200435c4

0800179c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	4613      	mov	r3, r2
 80017aa:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017b0:	2300      	movs	r3, #0
 80017b2:	81fb      	strh	r3, [r7, #14]
 80017b4:	e030      	b.n	8001818 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fed8 	bl	8000578 <__aeabi_f2d>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	e9cd 3400 	strd	r3, r4, [sp]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <sd_write_float+0x94>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	4817      	ldr	r0, [pc, #92]	; (8001834 <sd_write_float+0x98>)
 80017d6:	f014 fb5b 	bl	8015e90 <sniprintf>

		if(state == ADD_WRITE){
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <sd_write_float+0x9c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	; (8001838 <sd_write_float+0x9c>)
 80017e8:	f011 ffe0 	bl	80137ac <f_lseek>
 80017ec:	e003      	b.n	80017f6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80017ee:	2100      	movs	r1, #0
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <sd_write_float+0x9c>)
 80017f2:	f011 ffdb 	bl	80137ac <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <sd_write_float+0x98>)
 80017f8:	f7fe fd02 	bl	8000200 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <sd_write_float+0xa0>)
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <sd_write_float+0x98>)
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <sd_write_float+0x9c>)
 8001804:	f011 fd49 	bl	801329a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001808:	f000 f9b8 	bl	8001b7c <bufclear>
	for(short i = 0 ; i < size; i++){
 800180c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001810:	b29b      	uxth	r3, r3
 8001812:	3301      	adds	r3, #1
 8001814:	b29b      	uxth	r3, r3
 8001816:	81fb      	strh	r3, [r7, #14]
 8001818:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbc8      	blt.n	80017b6 <sd_write_float+0x1a>
	}
	return ret;
 8001824:	7b7b      	ldrb	r3, [r7, #13]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	bf00      	nop
 8001830:	080195b0 	.word	0x080195b0
 8001834:	20043534 	.word	0x20043534
 8001838:	200435c4 	.word	0x200435c4
 800183c:	200435b4 	.word	0x200435b4

08001840 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f960 	bl	8001b1c <create_path>

	if(state == OVER_WRITE){
 800185c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d108      	bne.n	8001876 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001864:	4822      	ldr	r0, [pc, #136]	; (80018f0 <sd_write_array_float+0xb0>)
 8001866:	f011 ff57 	bl	8013718 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800186a:	4822      	ldr	r0, [pc, #136]	; (80018f4 <sd_write_array_float+0xb4>)
 800186c:	f012 f9c2 	bl	8013bf4 <f_unlink>
		f_chdir("..");
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <sd_write_array_float+0xb8>)
 8001872:	f011 ff51 	bl	8013718 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001876:	f000 f967 	bl	8001b48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800187a:	2300      	movs	r3, #0
 800187c:	82fb      	strh	r3, [r7, #22]
 800187e:	e028      	b.n	80018d2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001880:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe73 	bl	8000578 <__aeabi_f2d>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	e9cd 3400 	strd	r3, r4, [sp]
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <sd_write_array_float+0xbc>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <sd_write_array_float+0xc0>)
 80018a0:	f014 faf6 	bl	8015e90 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <sd_write_array_float+0xc4>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4816      	ldr	r0, [pc, #88]	; (8001904 <sd_write_array_float+0xc4>)
 80018ac:	f011 ff7e 	bl	80137ac <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <sd_write_array_float+0xc0>)
 80018b2:	f7fe fca5 	bl	8000200 <strlen>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <sd_write_array_float+0xc8>)
 80018ba:	4911      	ldr	r1, [pc, #68]	; (8001900 <sd_write_array_float+0xc0>)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <sd_write_array_float+0xc4>)
 80018be:	f011 fcec 	bl	801329a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018c2:	f000 f95b 	bl	8001b7c <bufclear>
	for(short i = 0 ; i < size; i++){
 80018c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]
 80018d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbd0      	blt.n	8001880 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <sd_write_array_float+0xc4>)
 80018e0:	f011 fef0 	bl	80136c4 <f_close>

	return ret;
 80018e4:	7d7b      	ldrb	r3, [r7, #21]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20043434 	.word	0x20043434
 80018f4:	200422f4 	.word	0x200422f4
 80018f8:	080195cc 	.word	0x080195cc
 80018fc:	080195b0 	.word	0x080195b0
 8001900:	20043534 	.word	0x20043534
 8001904:	200435c4 	.word	0x200435c4
 8001908:	200435b4 	.word	0x200435b4

0800190c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f8f8 	bl	8001b1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800192c:	f000 f90c 	bl	8001b48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001930:	e019      	b.n	8001966 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001932:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4913      	ldr	r1, [pc, #76]	; (800198c <sd_read_array_float+0x80>)
 8001940:	4813      	ldr	r0, [pc, #76]	; (8001990 <sd_read_array_float+0x84>)
 8001942:	f014 faf9 	bl	8015f38 <siscanf>
		i++;
 8001946:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800194a:	b29b      	uxth	r3, r3
 800194c:	3301      	adds	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001952:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195a:	429a      	cmp	r2, r3
 800195c:	db03      	blt.n	8001966 <sd_read_array_float+0x5a>
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	3b01      	subs	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <sd_read_array_float+0x88>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <sd_read_array_float+0x84>)
 800196c:	f012 fb20 	bl	8013fb0 <f_gets>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1dd      	bne.n	8001932 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001976:	f000 f901 	bl	8001b7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <sd_read_array_float+0x88>)
 800197c:	f011 fea2 	bl	80136c4 <f_close>

	return ret;
 8001980:	7d7b      	ldrb	r3, [r7, #21]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	080195bc 	.word	0x080195bc
 8001990:	20043534 	.word	0x20043534
 8001994:	200435c4 	.word	0x200435c4

08001998 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f8b2 	bl	8001b1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019b8:	f000 f8c6 	bl	8001b48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019bc:	e019      	b.n	80019f2 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <sd_read_array_double+0x80>)
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <sd_read_array_double+0x84>)
 80019ce:	f014 fab3 	bl	8015f38 <siscanf>
		i++;
 80019d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	db03      	blt.n	80019f2 <sd_read_array_double+0x5a>
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <sd_read_array_double+0x88>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <sd_read_array_double+0x84>)
 80019f8:	f012 fada 	bl	8013fb0 <f_gets>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1dd      	bne.n	80019be <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a02:	f000 f8bb 	bl	8001b7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <sd_read_array_double+0x88>)
 8001a08:	f011 fe5c 	bl	80136c4 <f_close>

	return ret;
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	080195c8 	.word	0x080195c8
 8001a1c:	20043534 	.word	0x20043534
 8001a20:	200435c4 	.word	0x200435c4

08001a24 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f86e 	bl	8001b1c <create_path>

	if(state == OVER_WRITE){
 8001a40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d108      	bne.n	8001a5a <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a48:	481f      	ldr	r0, [pc, #124]	; (8001ac8 <sd_write_array_int+0xa4>)
 8001a4a:	f011 fe65 	bl	8013718 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a4e:	481f      	ldr	r0, [pc, #124]	; (8001acc <sd_write_array_int+0xa8>)
 8001a50:	f012 f8d0 	bl	8013bf4 <f_unlink>
		f_chdir("..");
 8001a54:	481e      	ldr	r0, [pc, #120]	; (8001ad0 <sd_write_array_int+0xac>)
 8001a56:	f011 fe5f 	bl	8013718 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a5a:	f000 f875 	bl	8001b48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a5e:	2300      	movs	r3, #0
 8001a60:	82fb      	strh	r3, [r7, #22]
 8001a62:	e022      	b.n	8001aaa <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <sd_write_array_int+0xb0>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <sd_write_array_int+0xb4>)
 8001a78:	f014 fa0a 	bl	8015e90 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <sd_write_array_int+0xb8>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4816      	ldr	r0, [pc, #88]	; (8001adc <sd_write_array_int+0xb8>)
 8001a84:	f011 fe92 	bl	80137ac <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <sd_write_array_int+0xb4>)
 8001a8a:	f7fe fbb9 	bl	8000200 <strlen>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <sd_write_array_int+0xbc>)
 8001a92:	4911      	ldr	r1, [pc, #68]	; (8001ad8 <sd_write_array_int+0xb4>)
 8001a94:	4811      	ldr	r0, [pc, #68]	; (8001adc <sd_write_array_int+0xb8>)
 8001a96:	f011 fc00 	bl	801329a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001a9a:	f000 f86f 	bl	8001b7c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	82fb      	strh	r3, [r7, #22]
 8001aaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbd6      	blt.n	8001a64 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <sd_write_array_int+0xb8>)
 8001ab8:	f011 fe04 	bl	80136c4 <f_close>

	return ret;
 8001abc:	7d7b      	ldrb	r3, [r7, #21]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20043434 	.word	0x20043434
 8001acc:	200422f4 	.word	0x200422f4
 8001ad0:	080195cc 	.word	0x080195cc
 8001ad4:	080195d0 	.word	0x080195d0
 8001ad8:	20043534 	.word	0x20043534
 8001adc:	200435c4 	.word	0x200435c4
 8001ae0:	200435b4 	.word	0x200435b4

08001ae4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001aee:	2201      	movs	r2, #1
 8001af0:	4908      	ldr	r1, [pc, #32]	; (8001b14 <sd_mount+0x30>)
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_mount+0x34>)
 8001af4:	f011 f85e 	bl	8012bb4 <f_mount>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <sd_mount+0x20>
 8001afe:	2301      	movs	r3, #1
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	e001      	b.n	8001b08 <sd_mount+0x24>
	else ret = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	080195d8 	.word	0x080195d8
 8001b18:	200423f4 	.word	0x200423f4

08001b1c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <create_path+0x24>)
 8001b2a:	f014 fa31 	bl	8015f90 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <create_path+0x28>)
 8001b32:	f014 fa2d 	bl	8015f90 <strcpy>

}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20043434 	.word	0x20043434
 8001b44:	200422f4 	.word	0x200422f4

08001b48 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <fopen_folder_and_file+0x24>)
 8001b4e:	f012 f913 	bl	8013d78 <f_mkdir>

	f_chdir(dirpath);
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <fopen_folder_and_file+0x24>)
 8001b54:	f011 fde0 	bl	8013718 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b58:	2213      	movs	r2, #19
 8001b5a:	4905      	ldr	r1, [pc, #20]	; (8001b70 <fopen_folder_and_file+0x28>)
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <fopen_folder_and_file+0x2c>)
 8001b5e:	f011 f86f 	bl	8012c40 <f_open>

	f_chdir("..");
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <fopen_folder_and_file+0x30>)
 8001b64:	f011 fdd8 	bl	8013718 <f_chdir>


}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20043434 	.word	0x20043434
 8001b70:	200422f4 	.word	0x200422f4
 8001b74:	200435c4 	.word	0x200435c4
 8001b78:	080195cc 	.word	0x080195cc

08001b7c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	e007      	b.n	8001b98 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <bufclear+0x30>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3301      	adds	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddf4      	ble.n	8001b88 <bufclear+0xc>
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20043534 	.word	0x20043534

08001bb0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bca:	480e      	ldr	r0, [pc, #56]	; (8001c04 <read_byte+0x54>)
 8001bcc:	f009 f836 	bl	800ac3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bd0:	f107 010f 	add.w	r1, r7, #15
 8001bd4:	2364      	movs	r3, #100	; 0x64
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <read_byte+0x58>)
 8001bda:	f00c f9df 	bl	800df9c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	2201      	movs	r2, #1
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <read_byte+0x58>)
 8001be8:	f00c fb0c 	bl	800e204 <HAL_SPI_Receive>
	CS_SET;
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <read_byte+0x54>)
 8001bf4:	f009 f822 	bl	800ac3c <HAL_GPIO_WritePin>

	return val;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020400 	.word	0x40020400
 8001c08:	20044660 	.word	0x20044660

08001c0c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <write_byte+0x54>)
 8001c2e:	f009 f805 	bl	800ac3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c32:	f107 010f 	add.w	r1, r7, #15
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2201      	movs	r2, #1
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <write_byte+0x58>)
 8001c3c:	f00c f9ae 	bl	800df9c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c40:	1db9      	adds	r1, r7, #6
 8001c42:	2364      	movs	r3, #100	; 0x64
 8001c44:	2201      	movs	r2, #1
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <write_byte+0x58>)
 8001c48:	f00c f9a8 	bl	800df9c <HAL_SPI_Transmit>
	CS_SET;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <write_byte+0x54>)
 8001c54:	f008 fff2 	bl	800ac3c <HAL_GPIO_WritePin>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400
 8001c64:	20044660 	.word	0x20044660

08001c68 <IMU_init>:

uint16_t IMU_init() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff ff9c 	bl	8001bb0 <read_byte>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	2be0      	cmp	r3, #224	; 0xe0
 8001c80:	d119      	bne.n	8001cb6 <IMU_init+0x4e>
		ret = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c86:	2101      	movs	r1, #1
 8001c88:	2006      	movs	r0, #6
 8001c8a:	f7ff ffbf 	bl	8001c0c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c8e:	2110      	movs	r1, #16
 8001c90:	2003      	movs	r0, #3
 8001c92:	f7ff ffbb 	bl	8001c0c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c96:	2120      	movs	r1, #32
 8001c98:	207f      	movs	r0, #127	; 0x7f
 8001c9a:	f7ff ffb7 	bl	8001c0c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff ffb3 	bl	8001c0c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ca6:	2106      	movs	r1, #6
 8001ca8:	2014      	movs	r0, #20
 8001caa:	f7ff ffaf 	bl	8001c0c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	207f      	movs	r0, #127	; 0x7f
 8001cb2:	f7ff ffab 	bl	8001c0c <write_byte>
	}
	return ret;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <read_gyro_data>:

void read_gyro_data() {
 8001cc0:	b598      	push	{r3, r4, r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001cc4:	2033      	movs	r0, #51	; 0x33
 8001cc6:	f7ff ff73 	bl	8001bb0 <read_byte>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21c      	sxth	r4, r3
 8001cd0:	2034      	movs	r0, #52	; 0x34
 8001cd2:	f7ff ff6d 	bl	8001bb0 <read_byte>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <read_gyro_data+0x64>)
 8001ce0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001ce2:	2035      	movs	r0, #53	; 0x35
 8001ce4:	f7ff ff64 	bl	8001bb0 <read_byte>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21c      	sxth	r4, r3
 8001cee:	2036      	movs	r0, #54	; 0x36
 8001cf0:	f7ff ff5e 	bl	8001bb0 <read_byte>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4323      	orrs	r3, r4
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <read_gyro_data+0x68>)
 8001cfe:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d00:	2037      	movs	r0, #55	; 0x37
 8001d02:	f7ff ff55 	bl	8001bb0 <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2038      	movs	r0, #56	; 0x38
 8001d0e:	f7ff ff4f 	bl	8001bb0 <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <read_gyro_data+0x6c>)
 8001d1c:	801a      	strh	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	bd98      	pop	{r3, r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200445fc 	.word	0x200445fc
 8001d28:	200445fa 	.word	0x200445fa
 8001d2c:	200445f4 	.word	0x200445f4

08001d30 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	805a      	strh	r2, [r3, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	809a      	strh	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	80da      	strh	r2, [r3, #6]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	811a      	strh	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	815a      	strh	r2, [r3, #10]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
{

}
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001d7c:	f7ff ff74 	bl	8001c68 <IMU_init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d84:	f7ff f98c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff f998 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <_ZN3IMU4initEv+0x44>)
 8001d92:	f7ff f9bf 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff f991 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <_ZN3IMU4initEv+0x48>)
 8001da4:	f7ff f9b6 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dac:	f007 fcb0 	bl	8009710 <HAL_Delay>

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	080195dc 	.word	0x080195dc
 8001dbc:	080195e8 	.word	0x080195e8

08001dc0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001dc8:	f7ff ff7a 	bl	8001cc0 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <_ZN3IMU12updateValuesEv+0xb8>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <_ZN3IMU12updateValuesEv+0xbc>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <_ZN3IMU12updateValuesEv+0xc0>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbaf 	bl	8000554 <__aeabi_i2d>
 8001df6:	a31c      	add	r3, pc, #112	; (adr r3, 8001e68 <_ZN3IMU12updateValuesEv+0xa8>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc14 	bl	8000628 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4625      	mov	r5, r4
 8001e06:	461c      	mov	r4, r3
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fba0 	bl	8000554 <__aeabi_i2d>
 8001e14:	a316      	add	r3, pc, #88	; (adr r3, 8001e70 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fc05 	bl	8000628 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fa49 	bl	80002bc <__adddf3>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	4621      	mov	r1, r4
 8001e32:	f7fe fea9 	bl	8000b88 <__aeabi_d2iz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e46:	801a      	strh	r2, [r3, #0]

	mon_zg= zg_;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	f3af 8000 	nop.w
 8001e68:	9999999a 	.word	0x9999999a
 8001e6c:	3fb99999 	.word	0x3fb99999
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	3feccccc 	.word	0x3feccccc
 8001e78:	200445fc 	.word	0x200445fc
 8001e7c:	200445fa 	.word	0x200445fa
 8001e80:	200445f4 	.word	0x200445f4
 8001e84:	20000214 	.word	0x20000214
 8001e88:	20000210 	.word	0x20000210
 8001e8c:	00000000 	.word	0x00000000

08001e90 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7fe fb5f 	bl	8000578 <__aeabi_f2d>
 8001eba:	a316      	add	r3, pc, #88	; (adr r3, 8001f14 <_ZN3IMU8getOmegaEv+0x84>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ece:	a313      	add	r3, pc, #76	; (adr r3, 8001f1c <_ZN3IMU8getOmegaEv+0x8c>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fba6 	bl	8000628 <__aeabi_dmul>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <_ZN3IMU8getOmegaEv+0x80>)
 8001eea:	f7fe fcc7 	bl	800087c <__aeabi_ddiv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	f7fe fe8f 	bl	8000c18 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	ee07 3a90 	vmov	s15, r3
}
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40668000 	.word	0x40668000
 8001f14:	66666666 	.word	0x66666666
 8001f18:	40306666 	.word	0x40306666
 8001f1c:	54411744 	.word	0x54411744
 8001f20:	400921fb 	.word	0x400921fb

08001f24 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f2c:	466b      	mov	r3, sp
 8001f2e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f34:	f007 fbec 	bl	8009710 <HAL_Delay>
	lcd_clear();
 8001f38:	f7ff f8b2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff f8be 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f44:	4840      	ldr	r0, [pc, #256]	; (8002048 <_ZN3IMU11calibrationEv+0x124>)
 8001f46:	f7ff f8e5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f8b7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f52:	483e      	ldr	r0, [pc, #248]	; (800204c <_ZN3IMU11calibrationEv+0x128>)
 8001f54:	f7ff f8de 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f5c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f62:	1e5d      	subs	r5, r3, #1
 8001f64:	61bd      	str	r5, [r7, #24]
 8001f66:	462b      	mov	r3, r5
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	f04f 0400 	mov.w	r4, #0
 8001f78:	0154      	lsls	r4, r2, #5
 8001f7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f7e:	014b      	lsls	r3, r1, #5
 8001f80:	462b      	mov	r3, r5
 8001f82:	3301      	adds	r3, #1
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	f04f 0400 	mov.w	r4, #0
 8001f92:	0154      	lsls	r4, r2, #5
 8001f94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f98:	014b      	lsls	r3, r1, #5
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	3307      	adds	r3, #7
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fac:	466b      	mov	r3, sp
 8001fae:	3303      	adds	r3, #3
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	83fb      	strh	r3, [r7, #30]
 8001fba:	8bfa      	ldrh	r2, [r7, #30]
 8001fbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	da13      	bge.n	8001fec <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	ee07 2a90 	vmov	s15, r2
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f007 fb96 	bl	8009710 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001fe4:	8bfb      	ldrh	r3, [r7, #30]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	83fb      	strh	r3, [r7, #30]
 8001fea:	e7e6      	b.n	8001fba <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d00e      	beq.n	8002022 <_ZN3IMU11calibrationEv+0xfe>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3304      	adds	r3, #4
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
 8002020:	e7ec      	b.n	8001ffc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002022:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	edc3 7a03 	vstr	s15, [r3, #12]
 800203c:	46b5      	mov	sp, r6
}
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002046:	bf00      	nop
 8002048:	080195ec 	.word	0x080195ec
 800204c:	080195f8 	.word	0x080195f8

08002050 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	4603      	mov	r3, r0
 8002058:	460a      	mov	r2, r1
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	4613      	mov	r3, r2
 800205e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002060:	79bb      	ldrb	r3, [r7, #6]
 8002062:	b299      	uxth	r1, r3
 8002064:	1dfa      	adds	r2, r7, #7
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <INA260_read+0x50>)
 800206e:	f008 ff37 	bl	800aee0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	b299      	uxth	r1, r3
 8002076:	f107 020c 	add.w	r2, r7, #12
 800207a:	2364      	movs	r3, #100	; 0x64
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2302      	movs	r3, #2
 8002080:	4807      	ldr	r0, [pc, #28]	; (80020a0 <INA260_read+0x50>)
 8002082:	f009 f82b 	bl	800b0dc <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8002086:	7b3b      	ldrb	r3, [r7, #12]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b21a      	sxth	r2, r3
 800208c:	7b7b      	ldrb	r3, [r7, #13]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	81fb      	strh	r3, [r7, #14]
	return val;
 8002096:	89fb      	ldrh	r3, [r7, #14]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20044814 	.word	0x20044814

080020a4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	4603      	mov	r3, r0
 80020b8:	71bb      	strb	r3, [r7, #6]
 80020ba:	460b      	mov	r3, r1
 80020bc:	717b      	strb	r3, [r7, #5]
 80020be:	4613      	mov	r3, r2
 80020c0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	733b      	strb	r3, [r7, #12]
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	737b      	strb	r3, [r7, #13]
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 80020ce:	793b      	ldrb	r3, [r7, #4]
 80020d0:	b299      	uxth	r1, r3
 80020d2:	f107 020c 	add.w	r2, r7, #12
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2303      	movs	r3, #3
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <INA260_write+0x48>)
 80020de:	f008 feff 	bl	800aee0 <HAL_I2C_Master_Transmit>
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20044814 	.word	0x20044814

080020f0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	460b      	mov	r3, r1
 80020fc:	71bb      	strb	r3, [r7, #6]
 80020fe:	4613      	mov	r3, r2
 8002100:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002102:	797b      	ldrb	r3, [r7, #5]
 8002104:	79ba      	ldrb	r2, [r7, #6]
 8002106:	79f9      	ldrb	r1, [r7, #7]
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff ffcb 	bl	80020a4 <INA260_write>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	461a      	mov	r2, r3
 8002124:	21df      	movs	r1, #223	; 0xdf
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff ffe2 	bl	80020f0 <setConfig>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
{

}
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800215c:	482a      	ldr	r0, [pc, #168]	; (8002208 <_ZN8JoyStick8getValueEv+0xbc>)
 800215e:	f008 fd55 	bl	800ac0c <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <_ZN8JoyStick8getValueEv+0x2e>
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800217a:	2101      	movs	r1, #1
 800217c:	4823      	ldr	r0, [pc, #140]	; (800220c <_ZN8JoyStick8getValueEv+0xc0>)
 800217e:	f008 fd45 	bl	800ac0c <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <_ZN8JoyStick8getValueEv+0x4e>
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800219a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219e:	481a      	ldr	r0, [pc, #104]	; (8002208 <_ZN8JoyStick8getValueEv+0xbc>)
 80021a0:	f008 fd34 	bl	800ac0c <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <_ZN8JoyStick8getValueEv+0x70>
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021bc:	2104      	movs	r1, #4
 80021be:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN8JoyStick8getValueEv+0xc4>)
 80021c0:	f008 fd24 	bl	800ac0c <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <_ZN8JoyStick8getValueEv+0x90>
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	480a      	ldr	r0, [pc, #40]	; (8002208 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f008 fd14 	bl	800ac0c <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0xb0>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80021fc:	89fb      	ldrh	r3, [r7, #14]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40020400 	.word	0x40020400

08002214 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b52      	cmp	r3, #82	; 0x52
 8002224:	d112      	bne.n	800224c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222c:	4856      	ldr	r0, [pc, #344]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f008 fd05 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002238:	4853      	ldr	r0, [pc, #332]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800223a:	f008 fcff 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800223e:	2201      	movs	r2, #1
 8002240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002244:	4850      	ldr	r0, [pc, #320]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002246:	f008 fcf9 	bl	800ac3c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800224a:	e098      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b47      	cmp	r3, #71	; 0x47
 8002250:	d112      	bne.n	8002278 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002258:	484b      	ldr	r0, [pc, #300]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 fcef 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4848      	ldr	r0, [pc, #288]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f008 fce9 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002270:	4845      	ldr	r0, [pc, #276]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002272:	f008 fce3 	bl	800ac3c <HAL_GPIO_WritePin>
}
 8002276:	e082      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	2b42      	cmp	r3, #66	; 0x42
 800227c:	d112      	bne.n	80022a4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002284:	4840      	ldr	r0, [pc, #256]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 fcd9 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002290:	483d      	ldr	r0, [pc, #244]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f008 fcd3 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229c:	483a      	ldr	r0, [pc, #232]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800229e:	f008 fccd 	bl	800ac3c <HAL_GPIO_WritePin>
}
 80022a2:	e06c      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b43      	cmp	r3, #67	; 0x43
 80022a8:	d112      	bne.n	80022d0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b0:	4835      	ldr	r0, [pc, #212]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 fcc3 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022bc:	4832      	ldr	r0, [pc, #200]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f008 fcbd 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c8:	482f      	ldr	r0, [pc, #188]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022ca:	f008 fcb7 	bl	800ac3c <HAL_GPIO_WritePin>
}
 80022ce:	e056      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b4d      	cmp	r3, #77	; 0x4d
 80022d4:	d112      	bne.n	80022fc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 fcad 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f008 fca7 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f4:	4824      	ldr	r0, [pc, #144]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022f6:	f008 fca1 	bl	800ac3c <HAL_GPIO_WritePin>
}
 80022fa:	e040      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b59      	cmp	r3, #89	; 0x59
 8002300:	d112      	bne.n	8002328 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	481f      	ldr	r0, [pc, #124]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 fc97 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f008 fc91 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002320:	4819      	ldr	r0, [pc, #100]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002322:	f008 fc8b 	bl	800ac3c <HAL_GPIO_WritePin>
}
 8002326:	e02a      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2b57      	cmp	r3, #87	; 0x57
 800232c:	d112      	bne.n	8002354 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002334:	4814      	ldr	r0, [pc, #80]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 fc81 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002340:	4811      	ldr	r0, [pc, #68]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002342:	f008 fc7b 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800234c:	480e      	ldr	r0, [pc, #56]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800234e:	f008 fc75 	bl	800ac3c <HAL_GPIO_WritePin>
}
 8002352:	e014      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	2b7e      	cmp	r3, #126	; 0x7e
 8002358:	d111      	bne.n	800237e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002360:	4809      	ldr	r0, [pc, #36]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 fc6b 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800236e:	f008 fc65 	bl	800ac3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800237a:	f008 fc5f 	bl	800ac3c <HAL_GPIO_WritePin>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40020000 	.word	0x40020000

0800238c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	4613      	mov	r3, r2
 800239a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023aa:	4813      	ldr	r0, [pc, #76]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023ac:	f008 fc46 	bl	800ac3c <HAL_GPIO_WritePin>
 80023b0:	e009      	b.n	80023c6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023c2:	f008 fc3b 	bl	800ac3c <HAL_GPIO_WritePin>

	if(r_status == 1)
 80023c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023d6:	f008 fc31 	bl	800ac3c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80023da:	e009      	b.n	80023f0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80023dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f008 fc26 	bl	800ac3c <HAL_GPIO_WritePin>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020000 	.word	0x40020000

080023fc <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b092      	sub	sp, #72	; 0x48
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fe92 	bl	8002134 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	331c      	adds	r3, #28
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
 800241e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	429a      	cmp	r2, r3
 8002424:	d008      	beq.n	8002438 <_ZN10LineSensorC1Ev+0x3c>
 8002426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	2200      	movs	r2, #0
 800242e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	3302      	adds	r3, #2
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
 8002436:	e7f2      	b.n	800241e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	643b      	str	r3, [r7, #64]	; 0x40
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	3338      	adds	r3, #56	; 0x38
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	429a      	cmp	r2, r3
 8002450:	d009      	beq.n	8002466 <_ZN10LineSensorC1Ev+0x6a>
 8002452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002454:	623b      	str	r3, [r7, #32]
		s = 0;
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	3304      	adds	r3, #4
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
 8002464:	e7f1      	b.n	800244a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3338      	adds	r3, #56	; 0x38
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d009      	beq.n	8002494 <_ZN10LineSensorC1Ev+0x98>
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	617b      	str	r3, [r7, #20]
		m = 0;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	3304      	adds	r3, #4
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	e7f1      	b.n	8002478 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	3338      	adds	r3, #56	; 0x38
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d009      	beq.n	80024c2 <_ZN10LineSensorC1Ev+0xc6>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024b8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	3304      	adds	r3, #4
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c0:	e7f1      	b.n	80024a6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	3748      	adds	r7, #72	; 0x48
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	220e      	movs	r2, #14
 80024d8:	4619      	mov	r1, r3
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80024dc:	f007 f97e 	bl	80097dc <HAL_ADC_Start_DMA>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20044738 	.word	0x20044738

080024ec <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	dc2f      	bgt.n	800255e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3392      	adds	r3, #146	; 0x92
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	ed93 7a00 	vldr	s14, [r3]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	33a0      	adds	r3, #160	; 0xa0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	1a5b      	subs	r3, r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	440b      	add	r3, r1
 800254a:	3306      	adds	r3, #6
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e7cc      	b.n	80024f8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002568:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b09      	cmp	r3, #9
 8002570:	d902      	bls.n	8002578 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]


}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	20000254 	.word	0x20000254

08002588 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002588:	b490      	push	{r4, r7}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800259a:	2b0d      	cmp	r3, #13
 800259c:	f200 8087 	bhi.w	80026ae <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d81c      	bhi.n	80025e8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025b2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025b6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4423      	add	r3, r4
 80025c6:	3306      	adds	r3, #6
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4403      	add	r3, r0
 80025cc:	3304      	adds	r3, #4
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	008b      	lsls	r3, r1, #2
 80025d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025d6:	440b      	add	r3, r1
 80025d8:	3b30      	subs	r3, #48	; 0x30
 80025da:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025e0:	3301      	adds	r3, #1
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	e7de      	b.n	80025a6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	d84d      	bhi.n	8002692 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80025f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025fa:	3301      	adds	r3, #1
 80025fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002600:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002604:	2b09      	cmp	r3, #9
 8002606:	d83e      	bhi.n	8002686 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002608:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002612:	4413      	add	r3, r2
 8002614:	3b30      	subs	r3, #48	; 0x30
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002624:	4413      	add	r3, r2
 8002626:	3b30      	subs	r3, #48	; 0x30
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	d521      	bpl.n	800267a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002636:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002640:	4413      	add	r3, r2
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002648:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800264c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002656:	440a      	add	r2, r1
 8002658:	3a30      	subs	r2, #48	; 0x30
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002662:	440b      	add	r3, r1
 8002664:	3b30      	subs	r3, #48	; 0x30
 8002666:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002668:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002672:	4413      	add	r3, r2
 8002674:	3b30      	subs	r3, #48	; 0x30
 8002676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002678:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800267a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267e:	3301      	adds	r3, #1
 8002680:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002684:	e7bc      	b.n	8002600 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002686:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800268a:	3301      	adds	r3, #1
 800268c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002690:	e7ad      	b.n	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 8002692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	33b0      	adds	r3, #176	; 0xb0
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026a6:	3301      	adds	r3, #1
 80026a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ac:	e773      	b.n	8002596 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026b6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 80026c0:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 80026ca:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 80026d4:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 80026de:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 80026e8:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 80026f2:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 80026fc:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002704:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002706:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002710:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800271a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002722:	4a16      	ldr	r2, [pc, #88]	; (800277c <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002724:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800272e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002738:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002740:	4a11      	ldr	r2, [pc, #68]	; (8002788 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bc90      	pop	{r4, r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000218 	.word	0x20000218
 8002754:	2000021c 	.word	0x2000021c
 8002758:	20000220 	.word	0x20000220
 800275c:	20000224 	.word	0x20000224
 8002760:	20000228 	.word	0x20000228
 8002764:	2000022c 	.word	0x2000022c
 8002768:	20000230 	.word	0x20000230
 800276c:	20000234 	.word	0x20000234
 8002770:	20000238 	.word	0x20000238
 8002774:	2000023c 	.word	0x2000023c
 8002778:	20000240 	.word	0x20000240
 800277c:	20000244 	.word	0x20000244
 8002780:	20000248 	.word	0x20000248
 8002784:	2000024c 	.word	0x2000024c
 8002788:	20000250 	.word	0x20000250

0800278c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0a0      	sub	sp, #128	; 0x80
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002794:	2064      	movs	r0, #100	; 0x64
 8002796:	f006 ffbb 	bl	8009710 <HAL_Delay>

	lcd_clear();
 800279a:	f7fe fc81 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800279e:	2100      	movs	r1, #0
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fc8d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027a6:	4886      	ldr	r0, [pc, #536]	; (80029c0 <_ZN10LineSensor11calibrationEv+0x234>)
 80027a8:	f7fe fcb4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ac:	2101      	movs	r1, #1
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe fc86 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027b4:	4883      	ldr	r0, [pc, #524]	; (80029c4 <_ZN10LineSensor11calibrationEv+0x238>)
 80027b6:	f7fe fcad 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027c4:	2b0d      	cmp	r3, #13
 80027c6:	d823      	bhi.n	8002810 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80027c8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	32b0      	adds	r2, #176	; 0xb0
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	440a      	add	r2, r1
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027e0:	440b      	add	r3, r1
 80027e2:	3b40      	subs	r3, #64	; 0x40
 80027e4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80027e6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027ea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	32b0      	adds	r2, #176	; 0xb0
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	440a      	add	r2, r1
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027fe:	440b      	add	r3, r1
 8002800:	3b78      	subs	r3, #120	; 0x78
 8002802:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002804:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002808:	3301      	adds	r3, #1
 800280a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800280e:	e7d7      	b.n	80027c0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fc98 	bl	800214c <_ZN8JoyStick8getValueEv>
 800281c:	4603      	mov	r3, r0
 800281e:	2b02      	cmp	r3, #2
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d079      	beq.n	8002920 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800282c:	2300      	movs	r3, #0
 800282e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002832:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002836:	2b0d      	cmp	r3, #13
 8002838:	d850      	bhi.n	80028dc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800283a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002844:	4413      	add	r3, r2
 8002846:	3b40      	subs	r3, #64	; 0x40
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	d50f      	bpl.n	8002886 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002866:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800286a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	32b0      	adds	r2, #176	; 0xb0
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	440a      	add	r2, r1
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800287e:	440b      	add	r3, r1
 8002880:	3b40      	subs	r3, #64	; 0x40
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e024      	b.n	80028d0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002886:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002890:	4413      	add	r3, r2
 8002892:	3b78      	subs	r3, #120	; 0x78
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	33b0      	adds	r3, #176	; 0xb0
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	dd0e      	ble.n	80028d0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028b2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	32b0      	adds	r2, #176	; 0xb0
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	440a      	add	r2, r1
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028ca:	440b      	add	r3, r1
 80028cc:	3b78      	subs	r3, #120	; 0x78
 80028ce:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028d4:	3301      	adds	r3, #1
 80028d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028da:	e7aa      	b.n	8002832 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fa1a 	bl	8004d1c <_ZN12RotarySwitch8getValueEv>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028fe:	2201      	movs	r2, #1
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fd41 	bl	800238c <_ZN3LED2LREaa>
 800290a:	e781      	b.n	8002810 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002912:	2200      	movs	r2, #0
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fd37 	bl	800238c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800291e:	e777      	b.n	8002810 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002920:	2300      	movs	r3, #0
 8002922:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002926:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800292a:	2b0d      	cmp	r3, #13
 800292c:	d826      	bhi.n	800297c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800292e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002938:	4413      	add	r3, r2
 800293a:	3b40      	subs	r3, #64	; 0x40
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800294a:	4413      	add	r3, r2
 800294c:	3b78      	subs	r3, #120	; 0x78
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80029c8 <_ZN10LineSensor11calibrationEv+0x23c>
 800295e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	3392      	adds	r3, #146	; 0x92
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002970:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002974:	3301      	adds	r3, #1
 8002976:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800297a:	e7d4      	b.n	8002926 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800297c:	2300      	movs	r3, #0
 800297e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002982:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002986:	2b0d      	cmp	r3, #13
 8002988:	d815      	bhi.n	80029b6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800298a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800298e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002998:	440a      	add	r2, r1
 800299a:	3a78      	subs	r2, #120	; 0x78
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	33a0      	adds	r3, #160	; 0xa0
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3304      	adds	r3, #4
 80029a8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029aa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ae:	3301      	adds	r3, #1
 80029b0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b4:	e7e5      	b.n	8002982 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029b6:	bf00      	nop
 80029b8:	3780      	adds	r7, #128	; 0x80
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08019604 	.word	0x08019604
 80029c4:	08019610 	.word	0x08019610
 80029c8:	447a0000 	.word	0x447a0000

080029cc <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80029d8:	2303      	movs	r3, #3
 80029da:	81bb      	strh	r3, [r7, #12]
 80029dc:	89bb      	ldrh	r3, [r7, #12]
 80029de:	2b0a      	cmp	r3, #10
 80029e0:	d814      	bhi.n	8002a0c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	33b0      	adds	r3, #176	; 0xb0
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a60 <_ZN10LineSensor13emergencyStopEv+0x94>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	db02      	blt.n	8002a04 <_ZN10LineSensor13emergencyStopEv+0x38>
 80029fe:	89fb      	ldrh	r3, [r7, #14]
 8002a00:	3301      	adds	r3, #1
 8002a02:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a04:	89bb      	ldrh	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	81bb      	strh	r3, [r7, #12]
 8002a0a:	e7e7      	b.n	80029dc <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d906      	bls.n	8002a20 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	e002      	b.n	8002a26 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	2b63      	cmp	r3, #99	; 0x63
 8002a2c:	d903      	bls.n	8002a36 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e002      	b.n	8002a3c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d903      	bls.n	8002a50 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a4e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]

}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	44098000 	.word	0x44098000
 8002a64:	20000256 	.word	0x20000256
 8002a68:	20000258 	.word	0x20000258

08002a6c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a7a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b18:	3350      	adds	r3, #80	; 0x50
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b24:	3352      	adds	r3, #82	; 0x52
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b30:	3354      	adds	r3, #84	; 0x54
 8002b32:	2200      	movs	r2, #0
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b3c:	3388      	adds	r3, #136	; 0x88
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b48:	338a      	adds	r3, #138	; 0x8a
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b54:	338c      	adds	r3, #140	; 0x8c
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b60:	338e      	adds	r3, #142	; 0x8e
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b6c:	338f      	adds	r3, #143	; 0x8f
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b78:	3390      	adds	r3, #144	; 0x90
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b84:	3394      	adds	r3, #148	; 0x94
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b92:	3398      	adds	r3, #152	; 0x98
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba0:	339c      	adds	r3, #156	; 0x9c
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bae:	33a0      	adds	r3, #160	; 0xa0
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bbc:	33a4      	adds	r3, #164	; 0xa4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc8:	33a6      	adds	r3, #166	; 0xa6
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a3a      	ldr	r2, [r7, #32]
 8002be4:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf0:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf6:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c04:	2300      	movs	r3, #0
 8002c06:	82fb      	strh	r3, [r7, #22]
 8002c08:	8afb      	ldrh	r3, [r7, #22]
 8002c0a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d80d      	bhi.n	8002c2e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002c12:	8afb      	ldrh	r3, [r7, #22]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c26:	8afb      	ldrh	r3, [r7, #22]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	82fb      	strh	r3, [r7, #22]
 8002c2c:	e7ec      	b.n	8002c08 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c2e:	2300      	movs	r3, #0
 8002c30:	82bb      	strh	r3, [r7, #20]
 8002c32:	8abb      	ldrh	r3, [r7, #20]
 8002c34:	2b63      	cmp	r3, #99	; 0x63
 8002c36:	d80d      	bhi.n	8002c54 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c38:	8abb      	ldrh	r3, [r7, #20]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c40:	3316      	adds	r3, #22
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c4c:	8abb      	ldrh	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	82bb      	strh	r3, [r7, #20]
 8002c52:	e7ee      	b.n	8002c32 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c54:	2300      	movs	r3, #0
 8002c56:	827b      	strh	r3, [r7, #18]
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
 8002c5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c5e:	d20d      	bcs.n	8002c7c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002c60:	8a7b      	ldrh	r3, [r7, #18]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c68:	333a      	adds	r3, #58	; 0x3a
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c74:	8a7b      	ldrh	r3, [r7, #18]
 8002c76:	3301      	adds	r3, #1
 8002c78:	827b      	strh	r3, [r7, #18]
 8002c7a:	e7ed      	b.n	8002c58 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	823b      	strh	r3, [r7, #16]
 8002c80:	8a3b      	ldrh	r3, [r7, #16]
 8002c82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c86:	d20d      	bcs.n	8002ca4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002c88:	8a3b      	ldrh	r3, [r7, #16]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002c90:	332e      	adds	r3, #46	; 0x2e
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c9c:	8a3b      	ldrh	r3, [r7, #16]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	823b      	strh	r3, [r7, #16]
 8002ca2:	e7ed      	b.n	8002c80 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002cec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d00:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	ee07 3a90 	vmov	s15, r3

}
 8002d10:	eeb0 0a67 	vmov.f32	s0, s15
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000025c 	.word	0x2000025c
 8002d24:	00000000 	.word	0x00000000

08002d28 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffbf 	bl	8002cb4 <_ZN9LineTrace9calcErrorEv>
 8002d36:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d5a:	3354      	adds	r3, #84	; 0x54
 8002d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d14c      	bne.n	8002dfe <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	ee17 0a90 	vmov	r0, s15
 8002d92:	f7fd fbf1 	bl	8000578 <__aeabi_f2d>
 8002d96:	a350      	add	r3, pc, #320	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fd6e 	bl	800087c <__aeabi_ddiv>
 8002da0:	4603      	mov	r3, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	4618      	mov	r0, r3
 8002da6:	4621      	mov	r1, r4
 8002da8:	f7fd ff36 	bl	8000c18 <__aeabi_d2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbdf 	bl	8000578 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002dc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dcc:	ee17 0a90 	vmov	r0, s15
 8002dd0:	f7fd fbd2 	bl	8000578 <__aeabi_f2d>
 8002dd4:	a340      	add	r3, pc, #256	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc25 	bl	8000628 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa69 	bl	80002bc <__adddf3>
 8002dea:	4603      	mov	r3, r0
 8002dec:	460c      	mov	r4, r1
 8002dee:	4618      	mov	r0, r3
 8002df0:	4621      	mov	r1, r4
 8002df2:	f7fd ff11 	bl	8000c18 <__aeabi_d2f>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e04b      	b.n	8002e96 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e04:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e28:	ee17 0a90 	vmov	r0, s15
 8002e2c:	f7fd fba4 	bl	8000578 <__aeabi_f2d>
 8002e30:	a329      	add	r3, pc, #164	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fd21 	bl	800087c <__aeabi_ddiv>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4621      	mov	r1, r4
 8002e42:	f7fd fee9 	bl	8000c18 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb92 	bl	8000578 <__aeabi_f2d>
 8002e54:	4604      	mov	r4, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e66:	ee17 0a90 	vmov	r0, s15
 8002e6a:	f7fd fb85 	bl	8000578 <__aeabi_f2d>
 8002e6e:	a31a      	add	r3, pc, #104	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbd8 	bl	8000628 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd fa1c 	bl	80002bc <__adddf3>
 8002e84:	4603      	mov	r3, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	f7fd fec4 	bl	8000c18 <__aeabi_d2f>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e94:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002e96:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002eba:	edd7 0a02 	vldr	s1, [r7, #8]
 8002ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f002 fc3c 	bl	8005740 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6013      	str	r3, [r2, #0]

}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002edc:	3f50624d 	.word	0x3f50624d
 8002ee0:	2000026c 	.word	0x2000026c
 8002ee4:	20000268 	.word	0x20000268

08002ee8 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fbf5 	bl	80016e4 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 fdcd 	bl	8004a9e <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 faf4 	bl	80044f6 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fb55 	bl	80045da <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f52:	3388      	adds	r3, #136	; 0x88
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461c      	mov	r4, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fe fbb4 	bl	80016c6 <_ZN7Encoder16getTotalDistanceEv>
 8002f5e:	eef0 7a40 	vmov.f32	s15, s0
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f68:	3316      	adds	r3, #22
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f78:	3388      	adds	r3, #136	; 0x88
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f86:	3388      	adds	r3, #136	; 0x88
 8002f88:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f90:	3388      	adds	r3, #136	; 0x88
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	2b63      	cmp	r3, #99	; 0x63
 8002f96:	d905      	bls.n	8002fa4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f9e:	3388      	adds	r3, #136	; 0x88
 8002fa0:	2263      	movs	r2, #99	; 0x63
 8002fa2:	801a      	strh	r2, [r3, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}

08002fac <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fbe:	3354      	adds	r3, #84	; 0x54
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d143      	bne.n	8003050 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002fc8:	edd7 7a00 	vldr	s15, [r7]
 8002fcc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80030e8 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd8:	d504      	bpl.n	8002fe4 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e076      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002fe4:	edd7 7a00 	vldr	s15, [r7]
 8002fe8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80030ec <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	d502      	bpl.n	8002ffc <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e06a      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002ffc:	edd7 7a00 	vldr	s15, [r7]
 8003000:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80030f4 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d503      	bpl.n	8003016 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 800300e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e05d      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8003016:	edd7 7a00 	vldr	s15, [r7]
 800301a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80030f8 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d502      	bpl.n	800302e <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <_ZN9LineTrace15radius2VelocityEf+0x150>)
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e051      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 800302e:	edd7 7a00 	vldr	s15, [r7]
 8003032:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003100 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d502      	bpl.n	8003046 <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e045      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e040      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003056:	3354      	adds	r3, #84	; 0x54
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d136      	bne.n	80030ce <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003060:	edd7 7a00 	vldr	s15, [r7]
 8003064:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030e8 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	d504      	bpl.n	800307c <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e02a      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 800307c:	edd7 7a00 	vldr	s15, [r7]
 8003080:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80030f8 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d502      	bpl.n	8003094 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e01e      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003094:	edd7 7a00 	vldr	s15, [r7]
 8003098:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003100 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d502      	bpl.n	80030ac <_ZN9LineTrace15radius2VelocityEf+0x100>
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e012      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 80030ac:	edd7 7a00 	vldr	s15, [r7]
 80030b0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800310c <_ZN9LineTrace15radius2VelocityEf+0x160>
 80030b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	d502      	bpl.n	80030c4 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e006      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e001      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80030d0:	60fb      	str	r3, [r7, #12]

	return velocity;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ee07 3a90 	vmov	s15, r3
}
 80030d8:	eeb0 0a67 	vmov.f32	s0, s15
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	43960000 	.word	0x43960000
 80030ec:	44480000 	.word	0x44480000
 80030f0:	3fd9999a 	.word	0x3fd9999a
 80030f4:	447a0000 	.word	0x447a0000
 80030f8:	44bb8000 	.word	0x44bb8000
 80030fc:	40133333 	.word	0x40133333
 8003100:	44fa0000 	.word	0x44fa0000
 8003104:	40200000 	.word	0x40200000
 8003108:	40066666 	.word	0x40066666
 800310c:	451c4000 	.word	0x451c4000
 8003110:	40400000 	.word	0x40400000
 8003114:	3fa66666 	.word	0x3fa66666

08003118 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	ed87 0a02 	vstr	s0, [r7, #8]
 8003124:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003126:	f241 736f 	movw	r3, #5999	; 0x176f
 800312a:	83fb      	strh	r3, [r7, #30]
 800312c:	8bfb      	ldrh	r3, [r7, #30]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 808d 	beq.w	800324e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003134:	8bfb      	ldrh	r3, [r7, #30]
 8003136:	3b01      	subs	r3, #1
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800313e:	3304      	adds	r3, #4
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	8bfb      	ldrh	r3, [r7, #30]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003150:	3304      	adds	r3, #4
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003162:	edd7 7a06 	vldr	s15, [r7, #24]
 8003166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	dd6a      	ble.n	8003246 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003170:	8bfb      	ldrh	r3, [r7, #30]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f9fc 	bl	8000578 <__aeabi_f2d>
 8003180:	a335      	add	r3, pc, #212	; (adr r3, 8003258 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd fa4f 	bl	8000628 <__aeabi_dmul>
 800318a:	4603      	mov	r3, r0
 800318c:	460c      	mov	r4, r1
 800318e:	4625      	mov	r5, r4
 8003190:	461c      	mov	r4, r3
 8003192:	69b8      	ldr	r0, [r7, #24]
 8003194:	f7fd f9f0 	bl	8000578 <__aeabi_f2d>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd fb6c 	bl	800087c <__aeabi_ddiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4618      	mov	r0, r3
 80031aa:	4621      	mov	r1, r4
 80031ac:	f7fd fd34 	bl	8000c18 <__aeabi_d2f>
 80031b0:	4603      	mov	r3, r0
 80031b2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80031b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80031b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80031c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80031c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	dd37      	ble.n	8003246 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80031d6:	8bfb      	ldrh	r3, [r7, #30]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80031de:	3304      	adds	r3, #4
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f9c6 	bl	8000578 <__aeabi_f2d>
 80031ec:	4604      	mov	r4, r0
 80031ee:	460d      	mov	r5, r1
 80031f0:	8bfb      	ldrh	r3, [r7, #30]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	ed93 7a00 	vldr	s14, [r3]
 80031fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	ee17 0a90 	vmov	r0, s15
 8003208:	f7fd f9b6 	bl	8000578 <__aeabi_f2d>
 800320c:	a312      	add	r3, pc, #72	; (adr r3, 8003258 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd fa09 	bl	8000628 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd f84d 	bl	80002bc <__adddf3>
 8003222:	4603      	mov	r3, r0
 8003224:	460c      	mov	r4, r1
 8003226:	4619      	mov	r1, r3
 8003228:	4622      	mov	r2, r4
 800322a:	8bfb      	ldrh	r3, [r7, #30]
 800322c:	1e5c      	subs	r4, r3, #1
 800322e:	4608      	mov	r0, r1
 8003230:	4611      	mov	r1, r2
 8003232:	f7fd fcf1 	bl	8000c18 <__aeabi_d2f>
 8003236:	4601      	mov	r1, r0
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800323e:	3304      	adds	r3, #4
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003246:	8bfb      	ldrh	r3, [r7, #30]
 8003248:	3b01      	subs	r3, #1
 800324a:	83fb      	strh	r3, [r7, #30]
 800324c:	e76e      	b.n	800312c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800324e:	bf00      	nop
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bdb0      	pop	{r4, r5, r7, pc}
 8003256:	bf00      	nop
 8003258:	d2f1a9fc 	.word	0xd2f1a9fc
 800325c:	3f50624d 	.word	0x3f50624d

08003260 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	ed87 0a02 	vstr	s0, [r7, #8]
 800326c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800326e:	2300      	movs	r3, #0
 8003270:	83fb      	strh	r3, [r7, #30]
 8003272:	8bfb      	ldrh	r3, [r7, #30]
 8003274:	f241 726f 	movw	r2, #5999	; 0x176f
 8003278:	4293      	cmp	r3, r2
 800327a:	f200 808d 	bhi.w	8003398 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800327e:	8bfb      	ldrh	r3, [r7, #30]
 8003280:	3301      	adds	r3, #1
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003288:	3304      	adds	r3, #4
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	8bfb      	ldrh	r3, [r7, #30]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800329a:	3304      	adds	r3, #4
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	dd6a      	ble.n	8003390 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80032ba:	8bfb      	ldrh	r3, [r7, #30]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f957 	bl	8000578 <__aeabi_f2d>
 80032ca:	a335      	add	r3, pc, #212	; (adr r3, 80033a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	f7fd f9aa 	bl	8000628 <__aeabi_dmul>
 80032d4:	4603      	mov	r3, r0
 80032d6:	460c      	mov	r4, r1
 80032d8:	4625      	mov	r5, r4
 80032da:	461c      	mov	r4, r3
 80032dc:	69b8      	ldr	r0, [r7, #24]
 80032de:	f7fd f94b 	bl	8000578 <__aeabi_f2d>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4620      	mov	r0, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	f7fd fac7 	bl	800087c <__aeabi_ddiv>
 80032ee:	4603      	mov	r3, r0
 80032f0:	460c      	mov	r4, r1
 80032f2:	4618      	mov	r0, r3
 80032f4:	4621      	mov	r1, r4
 80032f6:	f7fd fc8f 	bl	8000c18 <__aeabi_d2f>
 80032fa:	4603      	mov	r3, r0
 80032fc:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80032fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8003302:	ed97 7a05 	vldr	s14, [r7, #20]
 8003306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800330e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003312:	edd7 7a02 	vldr	s15, [r7, #8]
 8003316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	dd37      	ble.n	8003390 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003320:	8bfb      	ldrh	r3, [r7, #30]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003328:	3304      	adds	r3, #4
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd f921 	bl	8000578 <__aeabi_f2d>
 8003336:	4604      	mov	r4, r0
 8003338:	460d      	mov	r5, r1
 800333a:	8bfb      	ldrh	r3, [r7, #30]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	ed93 7a00 	vldr	s14, [r3]
 8003346:	edd7 7a02 	vldr	s15, [r7, #8]
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	ee17 0a90 	vmov	r0, s15
 8003352:	f7fd f911 	bl	8000578 <__aeabi_f2d>
 8003356:	a312      	add	r3, pc, #72	; (adr r3, 80033a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f7fd f964 	bl	8000628 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fc ffa8 	bl	80002bc <__adddf3>
 800336c:	4603      	mov	r3, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4619      	mov	r1, r3
 8003372:	4622      	mov	r2, r4
 8003374:	8bfb      	ldrh	r3, [r7, #30]
 8003376:	1c5c      	adds	r4, r3, #1
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	f7fd fc4c 	bl	8000c18 <__aeabi_d2f>
 8003380:	4601      	mov	r1, r0
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003388:	3304      	adds	r3, #4
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	3301      	adds	r3, #1
 8003394:	83fb      	strh	r3, [r7, #30]
 8003396:	e76c      	b.n	8003272 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003398:	bf00      	nop
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}
 80033a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033a4:	3f50624d 	.word	0x3f50624d

080033a8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe f9a3 	bl	8001700 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033c0:	3350      	adds	r3, #80	; 0x50
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033dc:	3350      	adds	r3, #80	; 0x50
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033e8:	3352      	adds	r3, #82	; 0x52
 80033ea:	2200      	movs	r2, #0
 80033ec:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80033f4:	330c      	adds	r3, #12
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <_ZN9LineTrace11isCrossLineEv>:

	return ret;
}

bool LineTrace::isCrossLine()
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003424:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342c:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8003440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003444:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800344c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003450:	4a3e      	ldr	r2, [pc, #248]	; (800354c <_ZN9LineTrace11isCrossLineEv+0x144>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003456:	4a3e      	ldr	r2, [pc, #248]	; (8003550 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f083 0301 	eor.w	r3, r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d041      	beq.n	80034ee <_ZN9LineTrace11isCrossLineEv+0xe6>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800346a:	edd7 7a03 	vldr	s15, [r7, #12]
 800346e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003558 <_ZN9LineTrace11isCrossLineEv+0x150>
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d50f      	bpl.n	800349c <_ZN9LineTrace11isCrossLineEv+0x94>
 800347c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003480:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003558 <_ZN9LineTrace11isCrossLineEv+0x150>
 8003484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d506      	bpl.n	800349c <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003498:	801a      	strh	r2, [r3, #0]
 800349a:	e002      	b.n	80034a2 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 800349e:	2200      	movs	r2, #0
 80034a0:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d94a      	bls.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = true;
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <_ZN9LineTrace11isCrossLineEv+0x158>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034c2:	3390      	adds	r3, #144	; 0x90
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ce:	3354      	adds	r3, #84	; 0x54
 80034d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fd31 	bl	8002f40 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80034de:	e02f      	b.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			}
			else{
				//errectionTotalDistanceFromCrossLine();
				correction_check_cnt_ = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034e6:	33a4      	adds	r3, #164	; 0xa4
 80034e8:	2200      	movs	r2, #0
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e028      	b.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 80034ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003564 <_ZN9LineTrace11isCrossLineEv+0x15c>
 80034f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	dd0f      	ble.n	8003520 <_ZN9LineTrace11isCrossLineEv+0x118>
 8003500:	edd7 7a02 	vldr	s15, [r7, #8]
 8003504:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003564 <_ZN9LineTrace11isCrossLineEv+0x15c>
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	dd06      	ble.n	8003520 <_ZN9LineTrace11isCrossLineEv+0x118>
			cnt++;
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	e002      	b.n	8003526 <_ZN9LineTrace11isCrossLineEv+0x11e>
		}
		else{
			cnt = 0;
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003522:	2200      	movs	r2, #0
 8003524:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2b09      	cmp	r3, #9
 800352c:	d908      	bls.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = false;
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 800353c:	2200      	movs	r2, #0
 800353e:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003542:	781b      	ldrb	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000260 	.word	0x20000260
 8003550:	20000264 	.word	0x20000264
 8003554:	20000273 	.word	0x20000273
 8003558:	44160000 	.word	0x44160000
 800355c:	20000270 	.word	0x20000270
 8003560:	20000272 	.word	0x20000272
 8003564:	43fa0000 	.word	0x43fa0000

08003568 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	; 0x48
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003570:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003574:	2201      	movs	r2, #1
 8003576:	4963      	ldr	r1, [pc, #396]	; (8003704 <_ZN9LineTrace4initEv+0x19c>)
 8003578:	4863      	ldr	r0, [pc, #396]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 800357a:	f7fe f9c7 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800357e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003582:	2201      	movs	r2, #1
 8003584:	4961      	ldr	r1, [pc, #388]	; (800370c <_ZN9LineTrace4initEv+0x1a4>)
 8003586:	4860      	ldr	r0, [pc, #384]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003588:	f7fe f9c0 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800358c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003590:	2201      	movs	r2, #1
 8003592:	495f      	ldr	r1, [pc, #380]	; (8003710 <_ZN9LineTrace4initEv+0x1a8>)
 8003594:	485c      	ldr	r0, [pc, #368]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003596:	f7fe f9b9 	bl	800190c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800359a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800359e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80035a2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80035a6:	eeb0 1a66 	vmov.f32	s2, s13
 80035aa:	eef0 0a47 	vmov.f32	s1, s14
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8c6 	bl	8003744 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 80035b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035bc:	2201      	movs	r2, #1
 80035be:	4955      	ldr	r1, [pc, #340]	; (8003714 <_ZN9LineTrace4initEv+0x1ac>)
 80035c0:	4851      	ldr	r0, [pc, #324]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80035c2:	f7fe f9a3 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 80035c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035ca:	2201      	movs	r2, #1
 80035cc:	4952      	ldr	r1, [pc, #328]	; (8003718 <_ZN9LineTrace4initEv+0x1b0>)
 80035ce:	484e      	ldr	r0, [pc, #312]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80035d0:	f7fe f99c 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 80035d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d8:	2201      	movs	r2, #1
 80035da:	4950      	ldr	r1, [pc, #320]	; (800371c <_ZN9LineTrace4initEv+0x1b4>)
 80035dc:	484a      	ldr	r0, [pc, #296]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80035de:	f7fe f995 	bl	800190c <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 80035e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80035ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80035ee:	eeb0 1a66 	vmov.f32	s2, s13
 80035f2:	eef0 0a47 	vmov.f32	s1, s14
 80035f6:	eeb0 0a67 	vmov.f32	s0, s15
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8e8 	bl	80037d0 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	2201      	movs	r2, #1
 8003606:	4946      	ldr	r1, [pc, #280]	; (8003720 <_ZN9LineTrace4initEv+0x1b8>)
 8003608:	483f      	ldr	r0, [pc, #252]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 800360a:	f7fe f97f 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800360e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003612:	2201      	movs	r2, #1
 8003614:	4943      	ldr	r1, [pc, #268]	; (8003724 <_ZN9LineTrace4initEv+0x1bc>)
 8003616:	483c      	ldr	r0, [pc, #240]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003618:	f7fe f978 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 800361c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003620:	2201      	movs	r2, #1
 8003622:	4941      	ldr	r1, [pc, #260]	; (8003728 <_ZN9LineTrace4initEv+0x1c0>)
 8003624:	4838      	ldr	r0, [pc, #224]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003626:	f7fe f971 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800362a:	f107 0320 	add.w	r3, r7, #32
 800362e:	2201      	movs	r2, #1
 8003630:	493e      	ldr	r1, [pc, #248]	; (800372c <_ZN9LineTrace4initEv+0x1c4>)
 8003632:	4835      	ldr	r0, [pc, #212]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003634:	f7fe f96a 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	2201      	movs	r2, #1
 800363e:	493c      	ldr	r1, [pc, #240]	; (8003730 <_ZN9LineTrace4initEv+0x1c8>)
 8003640:	4831      	ldr	r0, [pc, #196]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003642:	f7fe f963 	bl	800190c <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003646:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800364a:	eeb0 0a67 	vmov.f32	s0, s15
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f913 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003654:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003658:	eeb0 0a67 	vmov.f32	s0, s15
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f91c 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003662:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003666:	eeb0 0a67 	vmov.f32	s0, s15
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f925 	bl	80038ba <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003670:	edd7 7a08 	vldr	s15, [r7, #32]
 8003674:	eeb0 0a67 	vmov.f32	s0, s15
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f92e 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 800367e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003682:	eeb0 0a67 	vmov.f32	s0, s15
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f937 	bl	80038fa <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	2201      	movs	r2, #1
 8003692:	4928      	ldr	r1, [pc, #160]	; (8003734 <_ZN9LineTrace4initEv+0x1cc>)
 8003694:	481c      	ldr	r0, [pc, #112]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003696:	f7fe f939 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	2201      	movs	r2, #1
 80036a0:	4925      	ldr	r1, [pc, #148]	; (8003738 <_ZN9LineTrace4initEv+0x1d0>)
 80036a2:	4819      	ldr	r0, [pc, #100]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80036a4:	f7fe f932 	bl	800190c <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80036a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80036b0:	eef0 0a47 	vmov.f32	s1, s14
 80036b4:	eeb0 0a67 	vmov.f32	s0, s15
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f97e 	bl	80039ba <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 80036ca:	f107 0310 	add.w	r3, r7, #16
 80036ce:	2201      	movs	r2, #1
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <_ZN9LineTrace4initEv+0x1d4>)
 80036d2:	480d      	ldr	r0, [pc, #52]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80036d4:	f7fe f91a 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	2201      	movs	r2, #1
 80036de:	4918      	ldr	r1, [pc, #96]	; (8003740 <_ZN9LineTrace4initEv+0x1d8>)
 80036e0:	4809      	ldr	r0, [pc, #36]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80036e2:	f7fe f913 	bl	800190c <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80036e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80036ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80036ee:	eef0 0a47 	vmov.f32	s1, s14
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f979 	bl	80039ee <_ZN9LineTrace13setMaxAccDec2Eff>
}
 80036fc:	bf00      	nop
 80036fe:	3748      	adds	r7, #72	; 0x48
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	08019650 	.word	0x08019650
 8003708:	08019658 	.word	0x08019658
 800370c:	08019660 	.word	0x08019660
 8003710:	08019668 	.word	0x08019668
 8003714:	08019670 	.word	0x08019670
 8003718:	0801967c 	.word	0x0801967c
 800371c:	08019688 	.word	0x08019688
 8003720:	08019694 	.word	0x08019694
 8003724:	080196a0 	.word	0x080196a0
 8003728:	080196ac 	.word	0x080196ac
 800372c:	080196b8 	.word	0x080196b8
 8003730:	080196c4 	.word	0x080196c4
 8003734:	080196d0 	.word	0x080196d0
 8003738:	080196d8 	.word	0x080196d8
 800373c:	080196e0 	.word	0x080196e0
 8003740:	080196ec 	.word	0x080196ec

08003744 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003750:	edc7 0a01 	vstr	s1, [r7, #4]
 8003754:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	return kp_;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	ee07 3a90 	vmov	s15, r3
}
 8003786:	eeb0 0a67 	vmov.f32	s0, s15
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	return ki_;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	ee07 3a90 	vmov	s15, r3
}
 80037a4:	eeb0 0a67 	vmov.f32	s0, s15
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	return kd_;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	ee07 3a90 	vmov	s15, r3
}
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80037dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80037e0:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	ee07 3a90 	vmov	s15, r3
}
 8003812:	eeb0 0a67 	vmov.f32	s0, s15
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	ee07 3a90 	vmov	s15, r3
}
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	ee07 3a90 	vmov	s15, r3
}
 800384e:	eeb0 0a67 	vmov.f32	s0, s15
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003928:	ee07 3a90 	vmov	s15, r3
}
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003948:	ee07 3a90 	vmov	s15, r3
}
 800394c:	eeb0 0a67 	vmov.f32	s0, s15
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003968:	ee07 3a90 	vmov	s15, r3
}
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003988:	ee07 3a90 	vmov	s15, r3
}
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039a8:	ee07 3a90 	vmov	s15, r3
}
 80039ac:	eeb0 0a67 	vmov.f32	s0, s15
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80039c6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039d0:	3394      	adds	r3, #148	; 0x94
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039dc:	3398      	adds	r3, #152	; 0x98
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80039fa:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a04:	339c      	adds	r3, #156	; 0x9c
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a10:	33a0      	adds	r3, #160	; 0xa0
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a30:	3394      	adds	r3, #148	; 0x94
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	ee07 3a90 	vmov	s15, r3
}
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a54:	33a0      	adds	r3, #160	; 0xa0
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	ee07 3a90 	vmov	s15, r3
}
 8003a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a78:	339c      	adds	r3, #156	; 0x9c
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	ee07 3a90 	vmov	s15, r3
}
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a9c:	3398      	adds	r3, #152	; 0x98
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	ee07 3a90 	vmov	s15, r3
}
 8003aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d07c      	beq.n	8003bc0 <_ZN9LineTrace4flipEv+0x10c>
		// ---- line following processing -----//
		pidTrace();
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff f92e 	bl	8002d28 <_ZN9LineTrace8pidTraceEv>
			stable_cnt_reset_flag_ = true;
		}
		*/

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fc9b 	bl	8003408 <_ZN9LineTrace11isCrossLineEv>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <_ZN9LineTrace4flipEv+0x38>
			side_sensor_->enableIgnore();
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 faa7 	bl	8005030 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd fe27 	bl	800173a <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fab7 	bl	8005064 <_ZN10SideSensor13getIgnoreFlagEv>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <_ZN9LineTrace4flipEv+0x68>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fe0b 	bl	800171c <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003b06:	eeb0 7a40 	vmov.f32	s14, s0
 8003b0a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003bc8 <_ZN9LineTrace4flipEv+0x114>
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	db01      	blt.n	8003b1c <_ZN9LineTrace4flipEv+0x68>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <_ZN9LineTrace4flipEv+0x6a>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <_ZN9LineTrace4flipEv+0x78>
			side_sensor_->disableIgnore();
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fa8f 	bl	800504a <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe ff4b 	bl	80029cc <_ZN10LineSensor13emergencyStopEv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <_ZN9LineTrace4flipEv+0xa4>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003bcc <_ZN9LineTrace4flipEv+0x118>
 8003b44:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003bcc <_ZN9LineTrace4flipEv+0x118>
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fdf9 	bl	8005740 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fc16 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b5e:	33a4      	adds	r3, #164	; 0xa4
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b6c:	33a4      	adds	r3, #164	; 0xa4
 8003b6e:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b76:	33a4      	adds	r3, #164	; 0xa4
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d906      	bls.n	8003b90 <_ZN9LineTrace4flipEv+0xdc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b88:	33a4      	adds	r3, #164	; 0xa4
 8003b8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b8e:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b96:	33a4      	adds	r3, #164	; 0xa4
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b50      	cmp	r3, #80	; 0x50
 8003b9c:	d808      	bhi.n	8003bb0 <_ZN9LineTrace4flipEv+0xfc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fbef 	bl	800238c <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003bae:	e007      	b.n	8003bc0 <_ZN9LineTrace4flipEv+0x10c>
		else led_.LR(-1, 0);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fbe6 	bl	800238c <_ZN3LED2LREaa>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	428c0000 	.word	0x428c0000
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003be2:	3354      	adds	r3, #84	; 0x54
 8003be4:	887a      	ldrh	r2, [r7, #2]
 8003be6:	801a      	strh	r2, [r3, #0]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fdee 	bl	80057f2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 f9f8 	bl	8005010 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c26:	3388      	adds	r3, #136	; 0x88
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c32:	338a      	adds	r3, #138	; 0x8a
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c3e:	338c      	adds	r3, #140	; 0x8c
 8003c40:	2200      	movs	r2, #0
 8003c42:	801a      	strh	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	737b      	strb	r3, [r7, #13]
	start();
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ffc9 	bl	8003bf4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003c62:	7b7b      	ldrb	r3, [r7, #13]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d15b      	bne.n	8003d20 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003c68:	89fb      	ldrh	r3, [r7, #14]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <_ZN9LineTrace7runningEv+0x28>
 8003c6e:	2b0a      	cmp	r3, #10
 8003c70:	d030      	beq.n	8003cd4 <_ZN9LineTrace7runningEv+0x88>
 8003c72:	e054      	b.n	8003d1e <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f9bd 	bl	8004ff8 <_ZN10SideSensor16getWhiteLineCntREv>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d044      	beq.n	8003d18 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff f92a 	bl	8002ee8 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c9a:	3354      	adds	r3, #84	; 0x54
 8003c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fb7f 	bl	80033a8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd fd43 	bl	800173a <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd fd21 	bl	8001700 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fb5f 	bl	800238c <_ZN3LED2LREaa>
				stage = 10;
 8003cce:	230a      	movs	r3, #10
 8003cd0:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003cd2:	e021      	b.n	8003d18 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f98d 	bl	8004ff8 <_ZN10SideSensor16getWhiteLineCntREv>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff f915 	bl	8002f1e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fb6a 	bl	80033ce <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003cfa:	2064      	movs	r0, #100	; 0x64
 8003cfc:	f005 fd08 	bl	8009710 <HAL_Delay>

				setTargetVelocity(0);
 8003d00:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003d30 <_ZN9LineTrace7runningEv+0xe4>
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fdb8 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003d0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d0e:	f005 fcff 	bl	8009710 <HAL_Delay>

				goal_flag = true;
 8003d12:	2301      	movs	r3, #1
 8003d14:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003d16:	e001      	b.n	8003d1c <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003d18:	bf00      	nop
 8003d1a:	e7a2      	b.n	8003c62 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003d1c:	bf00      	nop
	while(goal_flag == false){
 8003d1e:	e7a0      	b.n	8003c62 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f807 	bl	8003d34 <_ZN9LineTrace4stopEv>
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	00000000 	.word	0x00000000

08003d34 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fd65 	bl	8005818 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	330c      	adds	r3, #12
 8003d52:	2201      	movs	r2, #1
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fb17 	bl	800238c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d64:	3354      	adds	r3, #84	; 0x54
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69d8      	ldr	r0, [r3, #28]
 8003d72:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <_ZN9LineTrace4stopEv+0xcc>)
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <_ZN9LineTrace4stopEv+0xd0>)
 8003d76:	4924      	ldr	r1, [pc, #144]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003d78:	f000 fb56 	bl	8004428 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003d7c:	e006      	b.n	8003d8c <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69d8      	ldr	r0, [r3, #28]
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <_ZN9LineTrace4stopEv+0xd8>)
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <_ZN9LineTrace4stopEv+0xdc>)
 8003d86:	4920      	ldr	r1, [pc, #128]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003d88:	f000 fb71 	bl	800446e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d92:	3358      	adds	r3, #88	; 0x58
 8003d94:	2200      	movs	r2, #0
 8003d96:	9200      	str	r2, [sp, #0]
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	491e      	ldr	r1, [pc, #120]	; (8003e14 <_ZN9LineTrace4stopEv+0xe0>)
 8003d9c:	481a      	ldr	r0, [pc, #104]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003d9e:	f7fd fd4f 	bl	8001840 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003da8:	33e8      	adds	r3, #232	; 0xe8
 8003daa:	2200      	movs	r2, #0
 8003dac:	9200      	str	r2, [sp, #0]
 8003dae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003db2:	4919      	ldr	r1, [pc, #100]	; (8003e18 <_ZN9LineTrace4stopEv+0xe4>)
 8003db4:	4814      	ldr	r0, [pc, #80]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003db6:	f7fd fd43 	bl	8001840 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8003dc0:	33b8      	adds	r3, #184	; 0xb8
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	9200      	str	r2, [sp, #0]
 8003dc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <_ZN9LineTrace4stopEv+0xe8>)
 8003dcc:	480e      	ldr	r0, [pc, #56]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003dce:	f7fd fd37 	bl	8001840 <sd_write_array_float>

	led_.LR(-1, 0);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fad5 	bl	800238c <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fbd1 	bl	800458e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fb80 	bl	80044f6 <_ZN6Logger10resetLogs2Ev>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	080196f8 	.word	0x080196f8
 8003e04:	08019704 	.word	0x08019704
 8003e08:	08019714 	.word	0x08019714
 8003e0c:	08019720 	.word	0x08019720
 8003e10:	0801972c 	.word	0x0801972c
 8003e14:	0801973c 	.word	0x0801973c
 8003e18:	0801974c 	.word	0x0801974c
 8003e1c:	08019758 	.word	0x08019758

08003e20 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b08b      	sub	sp, #44	; 0x2c
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fa9f 	bl	8004370 <_ZN6Logger23getDistanceArrayPointerEv>
 8003e32:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 faa7 	bl	800438c <_ZN6Logger20getThetaArrayPointerEv>
 8003e3e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003e40:	2300      	movs	r3, #0
 8003e42:	837b      	strh	r3, [r7, #26]
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	f241 726f 	movw	r2, #5999	; 0x176f
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d84b      	bhi.n	8003ee6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8003e4e:	8b7b      	ldrh	r3, [r7, #26]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003e5a:	8b7b      	ldrh	r3, [r7, #26]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003e66:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	d101      	bne.n	8003e78 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8003e74:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8003e76:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8003e78:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e84:	eeb0 0a66 	vmov.f32	s0, s13
 8003e88:	f7fe fdf0 	bl	8002a6c <_ZSt3absf>
 8003e8c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8003e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e94:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003fac <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8003e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	db01      	blt.n	8003ea6 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8003ea2:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8003ea4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8003ea6:	8b7c      	ldrh	r4, [r7, #26]
 8003ea8:	ed97 0a05 	vldr	s0, [r7, #20]
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff f87d 	bl	8002fac <_ZN9LineTrace15radius2VelocityEf>
 8003eb2:	eef0 7a40 	vmov.f32	s15, s0
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003ec6:	8b7b      	ldrh	r3, [r7, #26]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	441a      	add	r2, r3
 8003ece:	8b7b      	ldrh	r3, [r7, #26]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	3332      	adds	r3, #50	; 0x32
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3304      	adds	r3, #4
 8003edc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003ede:	8b7b      	ldrh	r3, [r7, #26]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	837b      	strh	r3, [r7, #26]
 8003ee4:	e7ae      	b.n	8003e44 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003eec:	3354      	adds	r3, #84	; 0x54
 8003eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d120      	bne.n	8003f38 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003f02:	3310      	adds	r3, #16
 8003f04:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f0c:	3398      	adds	r3, #152	; 0x98
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	eeb0 0a67 	vmov.f32	s0, s15
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff f8fd 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f24:	3394      	adds	r3, #148	; 0x94
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff f995 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003f36:	e027      	b.n	8003f88 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f3e:	3354      	adds	r3, #84	; 0x54
 8003f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11f      	bne.n	8003f88 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003f54:	3310      	adds	r3, #16
 8003f56:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f5e:	33a0      	adds	r3, #160	; 0xa0
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff f8d4 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f76:	339c      	adds	r3, #156	; 0x9c
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	6939      	ldr	r1, [r7, #16]
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff f96c 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003f8e:	3310      	adds	r3, #16
 8003f90:	2200      	movs	r2, #0
 8003f92:	9200      	str	r2, [sp, #0]
 8003f94:	f241 7270 	movw	r2, #6000	; 0x1770
 8003f98:	4906      	ldr	r1, [pc, #24]	; (8003fb4 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8003f9a:	4807      	ldr	r0, [pc, #28]	; (8003fb8 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8003f9c:	f7fd fc50 	bl	8001840 <sd_write_array_float>

}
 8003fa0:	bf00      	nop
 8003fa2:	3724      	adds	r7, #36	; 0x24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	3727c5ac 	.word	0x3727c5ac
 8003fac:	459c4000 	.word	0x459c4000
 8003fb0:	459c4000 	.word	0x459c4000
 8003fb4:	08019768 	.word	0x08019768
 8003fb8:	08019714 	.word	0x08019714

08003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b08b      	sub	sp, #44	; 0x2c
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69d8      	ldr	r0, [r3, #28]
 8003fc8:	4b6b      	ldr	r3, [pc, #428]	; (8004178 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8003fca:	4a6c      	ldr	r2, [pc, #432]	; (800417c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003fcc:	496c      	ldr	r1, [pc, #432]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003fce:	f000 fa73 	bl	80044b8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fd8:	3358      	adds	r3, #88	; 0x58
 8003fda:	2264      	movs	r2, #100	; 0x64
 8003fdc:	4969      	ldr	r1, [pc, #420]	; (8004184 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8003fde:	4868      	ldr	r0, [pc, #416]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003fe0:	f7fd fc94 	bl	800190c <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003fea:	33e8      	adds	r3, #232	; 0xe8
 8003fec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ff0:	4965      	ldr	r1, [pc, #404]	; (8004188 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8003ff2:	4863      	ldr	r0, [pc, #396]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003ff4:	f7fd fc8a 	bl	800190c <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f9b7 	bl	8004370 <_ZN6Logger23getDistanceArrayPointerEv>
 8004002:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9bf 	bl	800438c <_ZN6Logger20getThetaArrayPointerEv>
 800400e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004010:	2300      	movs	r3, #0
 8004012:	837b      	strh	r3, [r7, #26]
 8004014:	8b7b      	ldrh	r3, [r7, #26]
 8004016:	f241 726f 	movw	r2, #5999	; 0x176f
 800401a:	4293      	cmp	r3, r2
 800401c:	d84b      	bhi.n	80040b6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800401e:	8b7b      	ldrh	r3, [r7, #26]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800402a:	8b7b      	ldrh	r3, [r7, #26]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004036:	edd7 7a07 	vldr	s15, [r7, #28]
 800403a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	d101      	bne.n	8004048 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004044:	4b51      	ldr	r3, [pc, #324]	; (800418c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004046:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004048:	ed97 7a02 	vldr	s14, [r7, #8]
 800404c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004054:	eeb0 0a66 	vmov.f32	s0, s13
 8004058:	f7fe fd08 	bl	8002a6c <_ZSt3absf>
 800405c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004060:	edd7 7a05 	vldr	s15, [r7, #20]
 8004064:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004190 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004070:	db01      	blt.n	8004076 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004072:	4b48      	ldr	r3, [pc, #288]	; (8004194 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004074:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004076:	8b7c      	ldrh	r4, [r7, #26]
 8004078:	ed97 0a05 	vldr	s0, [r7, #20]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fe ff95 	bl	8002fac <_ZN9LineTrace15radius2VelocityEf>
 8004082:	eef0 7a40 	vmov.f32	s15, s0
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800408c:	3304      	adds	r3, #4
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	441a      	add	r2, r3
 800409e:	8b7b      	ldrh	r3, [r7, #26]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3304      	adds	r3, #4
 80040ac:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80040ae:	8b7b      	ldrh	r3, [r7, #26]
 80040b0:	3301      	adds	r3, #1
 80040b2:	837b      	strh	r3, [r7, #26]
 80040b4:	e7ae      	b.n	8004014 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040bc:	3354      	adds	r3, #84	; 0x54
 80040be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d120      	bne.n	8004108 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80040d2:	3310      	adds	r3, #16
 80040d4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040dc:	3398      	adds	r3, #152	; 0x98
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	eeb0 0a67 	vmov.f32	s0, s15
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff f815 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040f4:	3394      	adds	r3, #148	; 0x94
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff f8ad 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004106:	e027      	b.n	8004158 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800410e:	3354      	adds	r3, #84	; 0x54
 8004110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11f      	bne.n	8004158 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004124:	3310      	adds	r3, #16
 8004126:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800412e:	33a0      	adds	r3, #160	; 0xa0
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe ffec 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004146:	339c      	adds	r3, #156	; 0x9c
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	6939      	ldr	r1, [r7, #16]
 800414e:	eeb0 0a67 	vmov.f32	s0, s15
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff f884 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800415e:	3310      	adds	r3, #16
 8004160:	2200      	movs	r2, #0
 8004162:	9200      	str	r2, [sp, #0]
 8004164:	f241 7270 	movw	r2, #6000	; 0x1770
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800416a:	4805      	ldr	r0, [pc, #20]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800416c:	f7fd fb68 	bl	8001840 <sd_write_array_float>

}
 8004170:	bf00      	nop
 8004172:	3724      	adds	r7, #36	; 0x24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}
 8004178:	080196f8 	.word	0x080196f8
 800417c:	08019704 	.word	0x08019704
 8004180:	08019714 	.word	0x08019714
 8004184:	0801973c 	.word	0x0801973c
 8004188:	0801974c 	.word	0x0801974c
 800418c:	3727c5ac 	.word	0x3727c5ac
 8004190:	459c4000 	.word	0x459c4000
 8004194:	459c4000 	.word	0x459c4000
 8004198:	08019768 	.word	0x08019768

0800419c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041aa:	33c0      	adds	r3, #192	; 0xc0
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041b6:	33c2      	adds	r3, #194	; 0xc2
 80041b8:	2200      	movs	r2, #0
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041c2:	33c4      	adds	r3, #196	; 0xc4
 80041c4:	2200      	movs	r2, #0
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041ce:	33c6      	adds	r3, #198	; 0xc6
 80041d0:	2200      	movs	r2, #0
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041da:	33c8      	adds	r3, #200	; 0xc8
 80041dc:	2200      	movs	r2, #0
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041e6:	33ca      	adds	r3, #202	; 0xca
 80041e8:	2200      	movs	r2, #0
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004208:	f7fd fc6c 	bl	8001ae4 <sd_mount>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d016      	beq.n	800424a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800421c:	f7fc ff40 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004220:	2100      	movs	r1, #0
 8004222:	2000      	movs	r0, #0
 8004224:	f7fc ff4c 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004228:	4815      	ldr	r0, [pc, #84]	; (8004280 <_ZN6Logger10sdCardInitEv+0x84>)
 800422a:	f7fc ff73 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800422e:	2101      	movs	r1, #1
 8004230:	2000      	movs	r0, #0
 8004232:	f7fc ff45 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004236:	4813      	ldr	r0, [pc, #76]	; (8004284 <_ZN6Logger10sdCardInitEv+0x88>)
 8004238:	f7fc ff6c 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800423c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004240:	f005 fa66 	bl	8009710 <HAL_Delay>

	  ret = true;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e015      	b.n	8004276 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800424a:	f7fc ff29 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800424e:	2100      	movs	r1, #0
 8004250:	2000      	movs	r0, #0
 8004252:	f7fc ff35 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004256:	480a      	ldr	r0, [pc, #40]	; (8004280 <_ZN6Logger10sdCardInitEv+0x84>)
 8004258:	f7fc ff5c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800425c:	2101      	movs	r1, #1
 800425e:	2000      	movs	r0, #0
 8004260:	f7fc ff2e 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004264:	4808      	ldr	r0, [pc, #32]	; (8004288 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004266:	f7fc ff55 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800426a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800426e:	f005 fa4f 	bl	8009710 <HAL_Delay>

	  ret = false;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	08019778 	.word	0x08019778
 8004284:	08019784 	.word	0x08019784
 8004288:	0801978c 	.word	0x0801978c

0800428c <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800429e:	33c0      	adds	r3, #192	; 0xc0
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d025      	beq.n	80042f2 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042ac:	33c6      	adds	r3, #198	; 0xc6
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80042b8:	8879      	ldrh	r1, [r7, #2]
 80042ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042c4:	33c6      	adds	r3, #198	; 0xc6
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042d2:	33c6      	adds	r3, #198	; 0xc6
 80042d4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042dc:	33c6      	adds	r3, #198	; 0xc6
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042e4:	d305      	bcc.n	80042f2 <_ZN6Logger11storeLogIntEs+0x66>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042ec:	33c6      	adds	r3, #198	; 0xc6
 80042ee:	2200      	movs	r2, #0
 80042f0:	801a      	strh	r2, [r3, #0]
	}

}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004310:	33c0      	adds	r3, #192	; 0xc0
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d025      	beq.n	8004364 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800431e:	33c8      	adds	r3, #200	; 0xc8
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004328:	3310      	adds	r3, #16
 800432a:	8879      	ldrh	r1, [r7, #2]
 800432c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004336:	33c8      	adds	r3, #200	; 0xc8
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004344:	33c8      	adds	r3, #200	; 0xc8
 8004346:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800434e:	33c8      	adds	r3, #200	; 0xc8
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004356:	d305      	bcc.n	8004364 <_ZN6Logger12storeLog2IntEs+0x66>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800435e:	33c8      	adds	r3, #200	; 0xc8
 8004360:	2200      	movs	r2, #0
 8004362:	801a      	strh	r2, [r3, #0]
	}

}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800437e:	3340      	adds	r3, #64	; 0x40
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800439a:	3380      	adds	r3, #128	; 0x80
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f7fd fa3c 	bl	8001840 <sd_write_array_float>
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80043e2:	2300      	movs	r3, #0
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68b8      	ldr	r0, [r7, #8]
 80043f0:	f7fd fb18 	bl	8001a24 <sd_write_array_int>
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800440e:	3320      	adds	r3, #32
 8004410:	2200      	movs	r2, #0
 8004412:	9200      	str	r2, [sp, #0]
 8004414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	68b8      	ldr	r0, [r7, #8]
 800441c:	f7fd fb02 	bl	8001a24 <sd_write_array_int>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800443c:	3340      	adds	r3, #64	; 0x40
 800443e:	2200      	movs	r2, #0
 8004440:	9200      	str	r2, [sp, #0]
 8004442:	f241 7270 	movw	r2, #6000	; 0x1770
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	68b8      	ldr	r0, [r7, #8]
 800444a:	f7fd f9f9 	bl	8001840 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004454:	3380      	adds	r3, #128	; 0x80
 8004456:	2200      	movs	r2, #0
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	f241 7270 	movw	r2, #6000	; 0x1770
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	68b8      	ldr	r0, [r7, #8]
 8004462:	f7fd f9ed 	bl	8001840 <sd_write_array_float>
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af02      	add	r7, sp, #8
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004482:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004486:	2200      	movs	r2, #0
 8004488:	9200      	str	r2, [sp, #0]
 800448a:	f241 7270 	movw	r2, #6000	; 0x1770
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	68b8      	ldr	r0, [r7, #8]
 8004492:	f7fd f9d5 	bl	8001840 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800449c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80044a0:	2200      	movs	r2, #0
 80044a2:	9200      	str	r2, [sp, #0]
 80044a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	68b8      	ldr	r0, [r7, #8]
 80044ac:	f7fd f9c8 	bl	8001840 <sd_write_array_float>
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80044cc:	3340      	adds	r3, #64	; 0x40
 80044ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68b8      	ldr	r0, [r7, #8]
 80044d6:	f7fd fa19 	bl	800190c <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80044e0:	3380      	adds	r3, #128	; 0x80
 80044e2:	f241 7270 	movw	r2, #6000	; 0x1770
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f7fd fa0f 	bl	800190c <sd_read_array_float>
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80044f6:	b480      	push	{r7}
 80044f8:	b08b      	sub	sp, #44	; 0x2c
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004504:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004514:	3340      	adds	r3, #64	; 0x40
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d009      	beq.n	8004534 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	617b      	str	r3, [r7, #20]
		log = 0;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	3304      	adds	r3, #4
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e7f1      	b.n	8004518 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800453a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800454a:	3340      	adds	r3, #64	; 0x40
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	429a      	cmp	r2, r3
 8004554:	d009      	beq.n	800456a <_ZN6Logger10resetLogs2Ev+0x74>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	60bb      	str	r3, [r7, #8]
		log = 0;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	3304      	adds	r3, #4
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	e7f1      	b.n	800454e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004570:	33c2      	adds	r3, #194	; 0xc2
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800457c:	33ca      	adds	r3, #202	; 0xca
 800457e:	2200      	movs	r2, #0
 8004580:	801a      	strh	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	372c      	adds	r7, #44	; 0x2c
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800459c:	33c2      	adds	r3, #194	; 0xc2
 800459e:	2200      	movs	r2, #0
 80045a0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80045a8:	33ca      	adds	r3, #202	; 0xca
 80045aa:	2200      	movs	r2, #0
 80045ac:	801a      	strh	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <_ZN6Logger5startEv>:

void Logger::start()
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80045c8:	33c0      	adds	r3, #192	; 0xc0
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80045e8:	33c0      	adds	r3, #192	; 0xc0
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	805a      	strh	r2, [r3, #2]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_ZN5Motor4initEv>:

void Motor::init()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004624:	2108      	movs	r1, #8
 8004626:	4805      	ldr	r0, [pc, #20]	; (800463c <_ZN5Motor4initEv+0x20>)
 8004628:	f00a fa22 	bl	800ea70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800462c:	210c      	movs	r1, #12
 800462e:	4803      	ldr	r0, [pc, #12]	; (800463c <_ZN5Motor4initEv+0x20>)
 8004630:	f00a fa1e 	bl	800ea70 <HAL_TIM_PWM_Start>

}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	200446f8 	.word	0x200446f8

08004640 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da0d      	bge.n	800466e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004652:	2200      	movs	r2, #0
 8004654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004658:	481f      	ldr	r0, [pc, #124]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 800465a:	f006 faef 	bl	800ac3c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004664:	b29b      	uxth	r3, r3
 8004666:	425b      	negs	r3, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	81fb      	strh	r3, [r7, #14]
 800466c:	e00a      	b.n	8004684 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800466e:	2201      	movs	r2, #1
 8004670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004674:	4818      	ldr	r0, [pc, #96]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004676:	f006 fae1 	bl	800ac3c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004680:	b29b      	uxth	r3, r3
 8004682:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da0d      	bge.n	80046aa <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800468e:	2201      	movs	r2, #1
 8004690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004694:	4810      	ldr	r0, [pc, #64]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004696:	f006 fad1 	bl	800ac3c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	425b      	negs	r3, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	81bb      	strh	r3, [r7, #12]
 80046a8:	e00a      	b.n	80046c0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80046aa:	2200      	movs	r2, #0
 80046ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046b0:	4809      	ldr	r0, [pc, #36]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 80046b2:	f006 fac3 	bl	800ac3c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80046c0:	89fa      	ldrh	r2, [r7, #14]
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80046c8:	89ba      	ldrh	r2, [r7, #12]
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40020c00 	.word	0x40020c00
 80046dc:	200446f8 	.word	0x200446f8

080046e0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6178      	str	r0, [r7, #20]
 80046e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80046ec:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 80046f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046fa:	f7fc fa25 	bl	8000b48 <__aeabi_dcmpgt>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <_ZN5Motor8setRatioEdd+0x30>
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	4c2b      	ldr	r4, [pc, #172]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 800470a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800470e:	e00e      	b.n	800472e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	4b29      	ldr	r3, [pc, #164]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 8004716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800471a:	f7fc f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <_ZN5Motor8setRatioEdd+0x4e>
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	4c24      	ldr	r4, [pc, #144]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 800472a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004734:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004738:	f7fc fa06 	bl	8000b48 <__aeabi_dcmpgt>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <_ZN5Motor8setRatioEdd+0x6e>
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	4c1c      	ldr	r4, [pc, #112]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004748:	e9c7 3400 	strd	r3, r4, [r7]
 800474c:	e00e      	b.n	800476c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 8004754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004758:	f7fc f9d8 	bl	8000b0c <__aeabi_dcmplt>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <_ZN5Motor8setRatioEdd+0x8c>
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	4c15      	ldr	r4, [pc, #84]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 8004768:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004776:	f7fb ff57 	bl	8000628 <__aeabi_dmul>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	4618      	mov	r0, r3
 8004780:	4621      	mov	r1, r4
 8004782:	f7fc fa01 	bl	8000b88 <__aeabi_d2iz>
 8004786:	4603      	mov	r3, r0
 8004788:	b21a      	sxth	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004798:	f7fb ff46 	bl	8000628 <__aeabi_dmul>
 800479c:	4603      	mov	r3, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	4618      	mov	r0, r3
 80047a2:	4621      	mov	r1, r4
 80047a4:	f7fc f9f0 	bl	8000b88 <__aeabi_d2iz>
 80047a8:	4603      	mov	r3, r0
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	805a      	strh	r2, [r3, #2]

}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	3ff00000 	.word	0x3ff00000
 80047bc:	bff00000 	.word	0xbff00000
 80047c0:	409c2000 	.word	0x409c2000

080047c4 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80047f8:	b490      	push	{r4, r7}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	f04f 0400 	mov.w	r4, #0
 8004810:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	f04f 0400 	mov.w	r4, #0
 800483a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bc90      	pop	{r4, r7}
 8004868:	4770      	bx	lr
 800486a:	0000      	movs	r0, r0
 800486c:	0000      	movs	r0, r0
	...

08004870 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fb06 	bl	8001e90 <_ZN3IMU8getOmegaEv>
 8004884:	ee10 3a10 	vmov	r3, s0
 8004888:	4618      	mov	r0, r3
 800488a:	f7fb fe75 	bl	8000578 <__aeabi_f2d>
 800488e:	4603      	mov	r3, r0
 8004890:	460c      	mov	r4, r1
 8004892:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc ff04 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80048a0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80048a4:	a376      	add	r3, pc, #472	; (adr r3, 8004a80 <_ZN8Odometry12calcPotitionEv+0x210>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ae:	f7fb febb 	bl	8000628 <__aeabi_dmul>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7fb fe58 	bl	8000578 <__aeabi_f2d>
 80048c8:	4682      	mov	sl, r0
 80048ca:	468b      	mov	fp, r1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e0:	f7fb ffcc 	bl	800087c <__aeabi_ddiv>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fb fce6 	bl	80002bc <__adddf3>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	ec43 2b17 	vmov	d7, r2, r3
 80048f8:	eeb0 0a47 	vmov.f32	s0, s14
 80048fc:	eef0 0a67 	vmov.f32	s1, s15
 8004900:	f00f fbfa 	bl	80140f8 <cos>
 8004904:	ec53 2b10 	vmov	r2, r3, d0
 8004908:	4650      	mov	r0, sl
 800490a:	4659      	mov	r1, fp
 800490c:	f7fb fe8c 	bl	8000628 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4620      	mov	r0, r4
 8004916:	4629      	mov	r1, r5
 8004918:	f7fb fcd0 	bl	80002bc <__adddf3>
 800491c:	4603      	mov	r3, r0
 800491e:	460c      	mov	r4, r1
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7fb fe23 	bl	8000578 <__aeabi_f2d>
 8004932:	4682      	mov	sl, r0
 8004934:	468b      	mov	fp, r1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800494a:	f7fb ff97 	bl	800087c <__aeabi_ddiv>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fb fcb1 	bl	80002bc <__adddf3>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	ec43 2b17 	vmov	d7, r2, r3
 8004962:	eeb0 0a47 	vmov.f32	s0, s14
 8004966:	eef0 0a67 	vmov.f32	s1, s15
 800496a:	f00f fc09 	bl	8014180 <sin>
 800496e:	ec53 2b10 	vmov	r2, r3, d0
 8004972:	4650      	mov	r0, sl
 8004974:	4659      	mov	r1, fp
 8004976:	f7fb fe57 	bl	8000628 <__aeabi_dmul>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fb fc9b 	bl	80002bc <__adddf3>
 8004986:	4603      	mov	r3, r0
 8004988:	460c      	mov	r4, r1
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800499c:	461a      	mov	r2, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	f7fb fc8c 	bl	80002bc <__adddf3>
 80049a4:	4603      	mov	r3, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	ed93 7b08 	vldr	d7, [r3, #32]
 80049ba:	eeb0 0a47 	vmov.f32	s0, s14
 80049be:	eef0 0a67 	vmov.f32	s1, s15
 80049c2:	f00f fb99 	bl	80140f8 <cos>
 80049c6:	ec51 0b10 	vmov	r0, r1, d0
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <_ZN8Odometry12calcPotitionEv+0x200>)
 80049d0:	f7fb fe2a 	bl	8000628 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4620      	mov	r0, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	f7fb fc6e 	bl	80002bc <__adddf3>
 80049e0:	4603      	mov	r3, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	ed93 7b08 	vldr	d7, [r3, #32]
 80049f6:	eeb0 0a47 	vmov.f32	s0, s14
 80049fa:	eef0 0a67 	vmov.f32	s1, s15
 80049fe:	f00f fbbf 	bl	8014180 <sin>
 8004a02:	ec51 0b10 	vmov	r0, r1, d0
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004a0c:	f7fb fe0c 	bl	8000628 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fc50 	bl	80002bc <__adddf3>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	460c      	mov	r4, r1
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	4621      	mov	r1, r4
 8004a30:	f7fc f8f2 	bl	8000c18 <__aeabi_d2f>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004a38:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004a40:	4618      	mov	r0, r3
 8004a42:	4621      	mov	r1, r4
 8004a44:	f7fc f8e8 	bl	8000c18 <__aeabi_d2f>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004a4c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a54:	4618      	mov	r0, r3
 8004a56:	4621      	mov	r1, r4
 8004a58:	f7fc f8de 	bl	8000c18 <__aeabi_d2f>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6c:	f3af 8000 	nop.w
 8004a70:	405b8000 	.word	0x405b8000
 8004a74:	20000274 	.word	0x20000274
 8004a78:	20000278 	.word	0x20000278
 8004a7c:	2000027c 	.word	0x2000027c
 8004a80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a84:	3f50624d 	.word	0x3f50624d

08004a88 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff feed 	bl	8004870 <_ZN8Odometry12calcPotitionEv>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004a9e:	b490      	push	{r4, r7}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	f04f 0400 	mov.w	r4, #0
 8004acc:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc90      	pop	{r4, r7}
 8004ad8:	4770      	bx	lr
	...

08004adc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004adc:	b490      	push	{r4, r7}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	f04f 0400 	mov.w	r4, #0
 8004b02:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b1a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004b1e:	2200      	movs	r2, #0
 8004b20:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004b22:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	f04f 0400 	mov.w	r4, #0
 8004b72:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	f04f 0400 	mov.w	r4, #0
 8004b8e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004bae:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f04f 0400 	mov.w	r4, #0
 8004bb8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc90      	pop	{r4, r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	20044bf8 	.word	0x20044bf8
 8004bcc:	20044b88 	.word	0x20044b88
 8004bd0:	20044be8 	.word	0x20044be8

08004bd4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004bdc:	f001 fdb2 	bl	8006744 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004be0:	f107 0318 	add.w	r3, r7, #24
 8004be4:	2201      	movs	r2, #1
 8004be6:	4915      	ldr	r1, [pc, #84]	; (8004c3c <_ZN13PathFollowing4initEv+0x68>)
 8004be8:	4815      	ldr	r0, [pc, #84]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004bea:	f7fc fed5 	bl	8001998 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4913      	ldr	r1, [pc, #76]	; (8004c44 <_ZN13PathFollowing4initEv+0x70>)
 8004bf6:	4812      	ldr	r0, [pc, #72]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004bf8:	f7fc fece 	bl	8001998 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	2201      	movs	r2, #1
 8004c02:	4911      	ldr	r1, [pc, #68]	; (8004c48 <_ZN13PathFollowing4initEv+0x74>)
 8004c04:	480e      	ldr	r0, [pc, #56]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004c06:	f7fc fec7 	bl	8001998 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004c0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c0e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004c12:	ed97 5b02 	vldr	d5, [r7, #8]
 8004c16:	eeb0 2a45 	vmov.f32	s4, s10
 8004c1a:	eef0 2a65 	vmov.f32	s5, s11
 8004c1e:	eeb0 1a46 	vmov.f32	s2, s12
 8004c22:	eef0 1a66 	vmov.f32	s3, s13
 8004c26:	eeb0 0a47 	vmov.f32	s0, s14
 8004c2a:	eef0 0a67 	vmov.f32	s1, s15
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f80c 	bl	8004c4c <_ZN13PathFollowing7setGainEddd>
}
 8004c34:	bf00      	nop
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	08019794 	.word	0x08019794
 8004c40:	0801979c 	.word	0x0801979c
 8004c44:	080197a4 	.word	0x080197a4
 8004c48:	080197ac 	.word	0x080197ac

08004c4c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004c4c:	b490      	push	{r4, r7}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	61f8      	str	r0, [r7, #28]
 8004c54:	ed87 0b04 	vstr	d0, [r7, #16]
 8004c58:	ed87 1b02 	vstr	d1, [r7, #8]
 8004c5c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004c60:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c66:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c70:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004c7e:	bf00      	nop
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc90      	pop	{r4, r7}
 8004c86:	4770      	bx	lr
 8004c88:	20044bf8 	.word	0x20044bf8

08004c8c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004c94:	2088      	movs	r0, #136	; 0x88
 8004c96:	f7fd fa3e 	bl	8002116 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004c9a:	2080      	movs	r0, #128	; 0x80
 8004c9c:	f7fd fa3b 	bl	8002116 <INA260_init>
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004cb0:	2188      	movs	r1, #136	; 0x88
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fd f9cc 	bl	8002050 <INA260_read>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fc4a 	bl	8000554 <__aeabi_i2d>
 8004cc0:	a30c      	add	r3, pc, #48	; (adr r3, 8004cf4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fcaf 	bl	8000628 <__aeabi_dmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f7fb ffa1 	bl	8000c18 <__aeabi_d2f>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	f3af 8000 	nop.w
 8004cf0:	20000280 	.word	0x20000280
 8004cf4:	47ae147b 	.word	0x47ae147b
 8004cf8:	3f547ae1 	.word	0x3f547ae1

08004cfc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	ee07 3a90 	vmov	s15, r3

}
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4822      	ldr	r0, [pc, #136]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d2c:	f005 ff6e 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004d48:	2108      	movs	r1, #8
 8004d4a:	481a      	ldr	r0, [pc, #104]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d4c:	f005 ff5e 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004d68:	2110      	movs	r1, #16
 8004d6a:	4812      	ldr	r0, [pc, #72]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d6c:	f005 ff4e 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	480a      	ldr	r0, [pc, #40]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d8c:	f005 ff3e 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004da0:	89fb      	ldrh	r3, [r7, #14]
 8004da2:	f043 0308 	orr.w	r3, r3, #8
 8004da6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004da8:	89fb      	ldrh	r3, [r7, #14]

}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40020c00 	.word	0x40020c00

08004db8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	709a      	strb	r2, [r3, #2]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	70da      	strb	r2, [r3, #3]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	809a      	strh	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	80da      	strh	r2, [r3, #6]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	721a      	strb	r2, [r3, #8]
{

}
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7a1b      	ldrb	r3, [r3, #8]
 8004e00:	f083 0301 	eor.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80db 	beq.w	8004fc2 <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02a      	beq.n	8004e70 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	486c      	ldr	r0, [pc, #432]	; (8004fd0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8004e1e:	f005 fef5 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004e32:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	4b66      	ldr	r3, [pc, #408]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004e40:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004e46:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d945      	bls.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8004e62:	4b5a      	ldr	r3, [pc, #360]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004e68:	4b5a      	ldr	r3, [pc, #360]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	e034      	b.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 8004e70:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d030      	beq.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004e78:	2104      	movs	r1, #4
 8004e7a:	4855      	ldr	r0, [pc, #340]	; (8004fd0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8004e7c:	f005 fec6 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d006      	beq.n	8004e9e <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e002      	b.n	8004ea4 <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 8004e9e:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d916      	bls.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	f083 0301 	eor.w	r3, r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8004ec0:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	88db      	ldrh	r3, [r3, #6]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	88da      	ldrh	r2, [r3, #6]
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8004ed8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02a      	beq.n	8004f3e <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eec:	483c      	ldr	r0, [pc, #240]	; (8004fe0 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8004eee:	f005 fe8d 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 8004f02:	4b38      	ldr	r3, [pc, #224]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	e002      	b.n	8004f16 <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 8004f10:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004f16:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d90f      	bls.n	8004f3e <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f043 0302 	orr.w	r3, r3, #2
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004f38:	4b2a      	ldr	r3, [pc, #168]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004f3e:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d031      	beq.n	8004faa <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f4a:	4825      	ldr	r0, [pc, #148]	; (8004fe0 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8004f4c:	f005 fe5e 	bl	800ac0c <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf14      	ite	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	2300      	moveq	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	e002      	b.n	8004f74 <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d916      	bls.n	8004faa <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	f083 0302 	eor.w	r3, r3, #2
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	889b      	ldrh	r3, [r3, #4]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	889a      	ldrh	r2, [r3, #4]
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8004fa8:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8004fb0:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	789a      	ldrb	r2, [r3, #2]
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8004fb8:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	78da      	ldrb	r2, [r3, #3]
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8004fc0:	701a      	strb	r2, [r3, #0]
	}

}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000028c 	.word	0x2000028c
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	20000290 	.word	0x20000290
 8004fd8:	2000028a 	.word	0x2000028a
 8004fdc:	2000028d 	.word	0x2000028d
 8004fe0:	40020c00 	.word	0x40020c00
 8004fe4:	2000028e 	.word	0x2000028e
 8004fe8:	20000288 	.word	0x20000288
 8004fec:	20000284 	.word	0x20000284
 8004ff0:	20000286 	.word	0x20000286
 8004ff4:	20000287 	.word	0x20000287

08004ff8 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	88db      	ldrh	r3, [r3, #6]
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	80da      	strh	r2, [r3, #6]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	721a      	strb	r2, [r3, #8]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	721a      	strb	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7a1b      	ldrb	r3, [r3, #8]
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3308      	adds	r3, #8
 800508c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f010 f8b0 	bl	80151f8 <memset>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509e:	811a      	strh	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050a6:	815a      	strh	r2, [r3, #10]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ae:	819a      	strh	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b6:	81da      	strh	r2, [r3, #14]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050be:	821a      	strh	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c6:	825a      	strh	r2, [r3, #18]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	829a      	strh	r2, [r3, #20]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	82da      	strh	r2, [r3, #22]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	831a      	strh	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	835a      	strh	r2, [r3, #26]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	839a      	strh	r2, [r3, #28]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	83da      	strh	r2, [r3, #30]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	841a      	strh	r2, [r3, #32]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050f8:	845a      	strh	r2, [r3, #34]	; 0x22
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	849a      	strh	r2, [r3, #36]	; 0x24
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005106:	84da      	strh	r2, [r3, #38]	; 0x26
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005122:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800512a:	861a      	strh	r2, [r3, #48]	; 0x30
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	865a      	strh	r2, [r3, #50]	; 0x32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	869a      	strh	r2, [r3, #52]	; 0x34
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800513e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005146:	871a      	strh	r2, [r3, #56]	; 0x38
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005194:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800519e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005222:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005268:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005282:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800528c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800529e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ba:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052c4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ce:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052fa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005304:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800530e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005320:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005352:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800535c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800536e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005380:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ac:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053c6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 800540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800541a:	2b00      	cmp	r3, #0
 800541c:	d042      	beq.n	80054a4 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3204      	adds	r2, #4
 8005430:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800543c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800544c:	3301      	adds	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 800545e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005466:	2bf9      	cmp	r3, #249	; 0xf9
 8005468:	d903      	bls.n	8005472 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	22fa      	movs	r2, #250	; 0xfa
 800546e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685c      	ldr	r4, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800547c:	4618      	mov	r0, r3
 800547e:	f7fb f87b 	bl	8000578 <__aeabi_f2d>
 8005482:	4605      	mov	r5, r0
 8005484:	460e      	mov	r6, r1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f873 	bl	8000578 <__aeabi_f2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	ec43 2b11 	vmov	d1, r2, r3
 800549a:	ec46 5b10 	vmov	d0, r5, r6
 800549e:	4620      	mov	r0, r4
 80054a0:	f7ff f91e 	bl	80046e0 <_ZN5Motor8setRatioEdd>

	}

}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ac:	20000294 	.word	0x20000294

080054b0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	615a      	str	r2, [r3, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	619a      	str	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	621a      	str	r2, [r3, #32]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	625a      	str	r2, [r3, #36]	; 0x24
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	f107 020c 	add.w	r2, r7, #12
 8005558:	f107 0110 	add.w	r1, r7, #16
 800555c:	4618      	mov	r0, r3
 800555e:	f7fc f88f 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005562:	ed97 7a04 	vldr	s14, [r7, #16]
 8005566:	edd7 7a03 	vldr	s15, [r7, #12]
 800556a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800556e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005576:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7fa fffc 	bl	8000578 <__aeabi_f2d>
 8005580:	a30e      	add	r3, pc, #56	; (adr r3, 80055bc <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fb f84f 	bl	8000628 <__aeabi_dmul>
 800558a:	4603      	mov	r3, r0
 800558c:	460c      	mov	r4, r1
 800558e:	4618      	mov	r0, r3
 8005590:	4621      	mov	r1, r4
 8005592:	f7fb fb41 	bl	8000c18 <__aeabi_d2f>
 8005596:	4602      	mov	r2, r0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 80055a2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	ee07 3a90 	vmov	s15, r3
}
 80055ac:	eeb0 0a67 	vmov.f32	s0, s15
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000298 	.word	0x20000298
 80055bc:	1ab1d998 	.word	0x1ab1d998
 80055c0:	3f7830b5 	.word	0x3f7830b5
 80055c4:	00000000 	.word	0x00000000

080055c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80055c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	ed93 7a00 	vldr	s14, [r3]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80055dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80055ee:	4b48      	ldr	r3, [pc, #288]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	edd3 7a04 	vldr	s15, [r3, #16]
 8005604:	ed97 7a05 	vldr	s14, [r7, #20]
 8005608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005610:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fa ffaf 	bl	8000578 <__aeabi_f2d>
 800561a:	4604      	mov	r4, r0
 800561c:	460d      	mov	r5, r1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ed93 7a06 	vldr	s14, [r3, #24]
 8005624:	edd7 7a05 	vldr	s15, [r7, #20]
 8005628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562c:	ee17 0a90 	vmov	r0, s15
 8005630:	f7fa ffa2 	bl	8000578 <__aeabi_f2d>
 8005634:	a334      	add	r3, pc, #208	; (adr r3, 8005708 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa fff5 	bl	8000628 <__aeabi_dmul>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4620      	mov	r0, r4
 8005644:	4629      	mov	r1, r5
 8005646:	f7fa fe39 	bl	80002bc <__adddf3>
 800564a:	4603      	mov	r3, r0
 800564c:	460c      	mov	r4, r1
 800564e:	4618      	mov	r0, r3
 8005650:	4621      	mov	r1, r4
 8005652:	f7fb fae1 	bl	8000c18 <__aeabi_d2f>
 8005656:	4602      	mov	r2, r0
 8005658:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800565a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005662:	4b2c      	ldr	r3, [pc, #176]	; (8005714 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	edd7 6a05 	vldr	s13, [r7, #20]
 800566c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	ee17 0a90 	vmov	r0, s15
 8005678:	f7fa ff7e 	bl	8000578 <__aeabi_f2d>
 800567c:	a322      	add	r3, pc, #136	; (adr r3, 8005708 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fb f8fb 	bl	800087c <__aeabi_ddiv>
 8005686:	4603      	mov	r3, r0
 8005688:	460c      	mov	r4, r1
 800568a:	4618      	mov	r0, r3
 800568c:	4621      	mov	r1, r4
 800568e:	f7fb fac3 	bl	8000c18 <__aeabi_d2f>
 8005692:	4603      	mov	r3, r0
 8005694:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005696:	ed97 7a04 	vldr	s14, [r7, #16]
 800569a:	edd7 7a03 	vldr	s15, [r7, #12]
 800569e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80056a4:	edd3 7a00 	vldr	s15, [r3]
 80056a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ac:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80056ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80056be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c2:	ee17 0a90 	vmov	r0, s15
 80056c6:	f7fa ff57 	bl	8000578 <__aeabi_f2d>
 80056ca:	4605      	mov	r5, r0
 80056cc:	460e      	mov	r6, r1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80056d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80056d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056dc:	ee17 0a90 	vmov	r0, s15
 80056e0:	f7fa ff4a 	bl	8000578 <__aeabi_f2d>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	ec43 2b11 	vmov	d1, r2, r3
 80056ec:	ec46 5b10 	vmov	d0, r5, r6
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7fe fff5 	bl	80046e0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80056f6:	4a07      	ldr	r2, [pc, #28]	; (8005714 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6013      	str	r3, [r2, #0]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005704:	f3af 8000 	nop.w
 8005708:	d2f1a9fc 	.word	0xd2f1a9fc
 800570c:	3f50624d 	.word	0x3f50624d
 8005710:	200002a0 	.word	0x200002a0
 8005714:	2000029c 	.word	0x2000029c

08005718 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	ed87 0a02 	vstr	s0, [r7, #8]
 8005724:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	ed87 0a02 	vstr	s0, [r7, #8]
 800574c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	ed87 0a02 	vstr	s0, [r7, #8]
 8005774:	edc7 0a01 	vstr	s1, [r7, #4]
 8005778:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80057a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80057aa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff feb7 	bl	8005548 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff feef 	bl	80055c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005848 <_ZN12VelocityCtrl4stopEv+0x30>
 8005830:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005848 <_ZN12VelocityCtrl4stopEv+0x30>
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe ff53 	bl	80046e0 <_ZN5Motor8setRatioEdd>

}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	f3af 8000 	nop.w
	...

08005850 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005862:	f001 fe11 	bl	8007488 <cppFlip100ns>

		tim7_timer++;
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800586e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005870:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d902      	bls.n	8005880 <HAL_TIM_PeriodElapsedCallback+0x30>
 800587a:	4b18      	ldr	r3, [pc, #96]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800588a:	f001 fdcd 	bl	8007428 <cppFlip1ms>

		tim6_timer++;
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005896:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005898:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d902      	bls.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a0f      	ldr	r2, [pc, #60]	; (80058ec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80058b2:	f001 fdf3 	bl	800749c <cppFlip10ms>

		tim13_timer++;
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058be:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a06      	ldr	r2, [pc, #24]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d902      	bls.n	80058d0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
	}

}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40001400 	.word	0x40001400
 80058dc:	200448ac 	.word	0x200448ac
 80058e0:	0001869f 	.word	0x0001869f
 80058e4:	40001000 	.word	0x40001000
 80058e8:	20044868 	.word	0x20044868
 80058ec:	40001c00 	.word	0x40001c00
 80058f0:	200448b0 	.word	0x200448b0

080058f4 <init>:

void init()
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80058f8:	2201      	movs	r2, #1
 80058fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058fe:	4808      	ldr	r0, [pc, #32]	; (8005920 <init+0x2c>)
 8005900:	f005 f99c 	bl	800ac3c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005904:	4807      	ldr	r0, [pc, #28]	; (8005924 <init+0x30>)
 8005906:	f009 f864 	bl	800e9d2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800590a:	4807      	ldr	r0, [pc, #28]	; (8005928 <init+0x34>)
 800590c:	f009 f861 	bl	800e9d2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005910:	4806      	ldr	r0, [pc, #24]	; (800592c <init+0x38>)
 8005912:	f009 f85e 	bl	800e9d2 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005916:	f001 fce3 	bl	80072e0 <cppInit>

	//path_following_initialize();

}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	20044994 	.word	0x20044994
 8005928:	20044b38 	.word	0x20044b38
 800592c:	200448b4 	.word	0x200448b4

08005930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005934:	f003 fe7a 	bl	800962c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005938:	f000 f82a 	bl	8005990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800593c:	f000 fdbc 	bl	80064b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005940:	f000 fd8a 	bl	8006458 <MX_DMA_Init>
  MX_I2C2_Init();
 8005944:	f000 f9e8 	bl	8005d18 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005948:	f000 fa14 	bl	8005d74 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800594c:	f000 fa32 	bl	8005db4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005950:	f000 fa66 	bl	8005e20 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005954:	f000 fb70 	bl	8006038 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005958:	f000 fc3c 	bl	80061d4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800595c:	f000 fd52 	bl	8006404 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005960:	f00b f80a 	bl	8010978 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005964:	f000 fbcc 	bl	8006100 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005968:	f000 f9a8 	bl	8005cbc <MX_I2C1_Init>
  MX_TIM3_Init();
 800596c:	f000 fb00 	bl	8005f70 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005970:	f000 fc88 	bl	8006284 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005974:	f000 fcd4 	bl	8006320 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005978:	f000 f898 	bl	8005aac <MX_ADC2_Init>
  MX_TIM7_Init();
 800597c:	f000 fbf6 	bl	800616c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005980:	f000 fd1c 	bl	80063bc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005984:	f7ff ffb6 	bl	80058f4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005988:	f001 fdb6 	bl	80074f8 <cppLoop>
 800598c:	e7fc      	b.n	8005988 <main+0x58>
	...

08005990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b0a4      	sub	sp, #144	; 0x90
 8005994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005996:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800599a:	2234      	movs	r2, #52	; 0x34
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f00f fc2a 	bl	80151f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	223c      	movs	r2, #60	; 0x3c
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f00f fc1b 	bl	80151f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	4b37      	ldr	r3, [pc, #220]	; (8005aa4 <SystemClock_Config+0x114>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a36      	ldr	r2, [pc, #216]	; (8005aa4 <SystemClock_Config+0x114>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b34      	ldr	r3, [pc, #208]	; (8005aa4 <SystemClock_Config+0x114>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	4b31      	ldr	r3, [pc, #196]	; (8005aa8 <SystemClock_Config+0x118>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <SystemClock_Config+0x118>)
 80059e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <SystemClock_Config+0x118>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a04:	2302      	movs	r3, #2
 8005a06:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a0c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a0e:	2308      	movs	r3, #8
 8005a10:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005a12:	23b4      	movs	r3, #180	; 0xb4
 8005a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005a1e:	2308      	movs	r3, #8
 8005a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005a24:	2302      	movs	r3, #2
 8005a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f006 fd26 	bl	800c480 <HAL_RCC_OscConfig>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005a3a:	f000 fe7f 	bl	800673c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a3e:	f006 f8a1 	bl	800bb84 <HAL_PWREx_EnableOverDrive>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005a48:	f000 fe78 	bl	800673c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a4c:	230f      	movs	r3, #15
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a50:	2302      	movs	r3, #2
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a54:	2300      	movs	r3, #0
 8005a56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a62:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a68:	2105      	movs	r1, #5
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f006 f8da 	bl	800bc24 <HAL_RCC_ClockConfig>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005a76:	f000 fe61 	bl	800673c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005a7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005a7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005a80:	2300      	movs	r3, #0
 8005a82:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005a84:	2300      	movs	r3, #0
 8005a86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f006 fab9 	bl	800c004 <HAL_RCCEx_PeriphCLKConfig>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005a98:	f000 fe50 	bl	800673c <Error_Handler>
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3790      	adds	r7, #144	; 0x90
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	40007000 	.word	0x40007000

08005aac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005abe:	4b7c      	ldr	r3, [pc, #496]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ac0:	4a7c      	ldr	r2, [pc, #496]	; (8005cb4 <MX_ADC2_Init+0x208>)
 8005ac2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005ac4:	4b7a      	ldr	r3, [pc, #488]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005aca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005acc:	4b78      	ldr	r3, [pc, #480]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005ad2:	4b77      	ldr	r3, [pc, #476]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005ad8:	4b75      	ldr	r3, [pc, #468]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ae6:	4b72      	ldr	r3, [pc, #456]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005aec:	4b70      	ldr	r3, [pc, #448]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005aee:	4a72      	ldr	r2, [pc, #456]	; (8005cb8 <MX_ADC2_Init+0x20c>)
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005af2:	4b6f      	ldr	r3, [pc, #444]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005af8:	4b6d      	ldr	r3, [pc, #436]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005afa:	220e      	movs	r2, #14
 8005afc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005afe:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005b0c:	4868      	ldr	r0, [pc, #416]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b0e:	f003 fe21 	bl	8009754 <HAL_ADC_Init>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005b18:	f000 fe10 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005b1c:	230a      	movs	r3, #10
 8005b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b20:	2301      	movs	r3, #1
 8005b22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005b24:	2306      	movs	r3, #6
 8005b26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4860      	ldr	r0, [pc, #384]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b2e:	f003 ff65 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005b38:	f000 fe00 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005b3c:	230b      	movs	r3, #11
 8005b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005b40:	2302      	movs	r3, #2
 8005b42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b44:	463b      	mov	r3, r7
 8005b46:	4619      	mov	r1, r3
 8005b48:	4859      	ldr	r0, [pc, #356]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b4a:	f003 ff57 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005b54:	f000 fdf2 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005b58:	230c      	movs	r3, #12
 8005b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b60:	463b      	mov	r3, r7
 8005b62:	4619      	mov	r1, r3
 8005b64:	4852      	ldr	r0, [pc, #328]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b66:	f003 ff49 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005b70:	f000 fde4 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005b74:	230d      	movs	r3, #13
 8005b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	4619      	mov	r1, r3
 8005b80:	484b      	ldr	r0, [pc, #300]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b82:	f003 ff3b 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005b8c:	f000 fdd6 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005b94:	2305      	movs	r3, #5
 8005b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b98:	463b      	mov	r3, r7
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4844      	ldr	r0, [pc, #272]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b9e:	f003 ff2d 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005ba8:	f000 fdc8 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005bac:	2301      	movs	r3, #1
 8005bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005bb0:	2306      	movs	r3, #6
 8005bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	483d      	ldr	r0, [pc, #244]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005bba:	f003 ff1f 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005bc4:	f000 fdba 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005bcc:	2307      	movs	r3, #7
 8005bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4836      	ldr	r0, [pc, #216]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005bd6:	f003 ff11 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005be0:	f000 fdac 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005be4:	2303      	movs	r3, #3
 8005be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005be8:	2308      	movs	r3, #8
 8005bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bec:	463b      	mov	r3, r7
 8005bee:	4619      	mov	r1, r3
 8005bf0:	482f      	ldr	r0, [pc, #188]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005bf2:	f003 ff03 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005bfc:	f000 fd9e 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005c00:	2304      	movs	r3, #4
 8005c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005c04:	2309      	movs	r3, #9
 8005c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c08:	463b      	mov	r3, r7
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4828      	ldr	r0, [pc, #160]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c0e:	f003 fef5 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005c18:	f000 fd90 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005c1c:	2305      	movs	r3, #5
 8005c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005c20:	230a      	movs	r3, #10
 8005c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c24:	463b      	mov	r3, r7
 8005c26:	4619      	mov	r1, r3
 8005c28:	4821      	ldr	r0, [pc, #132]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c2a:	f003 fee7 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005c34:	f000 fd82 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005c38:	2306      	movs	r3, #6
 8005c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005c3c:	230b      	movs	r3, #11
 8005c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c40:	463b      	mov	r3, r7
 8005c42:	4619      	mov	r1, r3
 8005c44:	481a      	ldr	r0, [pc, #104]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c46:	f003 fed9 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005c50:	f000 fd74 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005c54:	2307      	movs	r3, #7
 8005c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005c58:	230c      	movs	r3, #12
 8005c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c62:	f003 fecb 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005c6c:	f000 fd66 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005c70:	2308      	movs	r3, #8
 8005c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005c74:	230d      	movs	r3, #13
 8005c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c78:	463b      	mov	r3, r7
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c7e:	f003 febd 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005c88:	f000 fd58 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005c8c:	2309      	movs	r3, #9
 8005c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005c90:	230e      	movs	r3, #14
 8005c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c94:	463b      	mov	r3, r7
 8005c96:	4619      	mov	r1, r3
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c9a:	f003 feaf 	bl	80099fc <HAL_ADC_ConfigChannel>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005ca4:	f000 fd4a 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20044738 	.word	0x20044738
 8005cb4:	40012100 	.word	0x40012100
 8005cb8:	0f000001 	.word	0x0f000001

08005cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <MX_I2C1_Init+0x54>)
 8005cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <MX_I2C1_Init+0x58>)
 8005cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005cf8:	4804      	ldr	r0, [pc, #16]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cfa:	f004 ffb9 	bl	800ac70 <HAL_I2C_Init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d04:	f000 fd1a 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d08:	bf00      	nop
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20044780 	.word	0x20044780
 8005d10:	40005400 	.word	0x40005400
 8005d14:	000186a0 	.word	0x000186a0

08005d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005d1c:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d1e:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <MX_I2C2_Init+0x54>)
 8005d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d24:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <MX_I2C2_Init+0x58>)
 8005d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d54:	4804      	ldr	r0, [pc, #16]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d56:	f004 ff8b 	bl	800ac70 <HAL_I2C_Init>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005d60:	f000 fcec 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005d64:	bf00      	nop
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20044814 	.word	0x20044814
 8005d6c:	40005800 	.word	0x40005800
 8005d70:	000186a0 	.word	0x000186a0

08005d74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	; (8005db0 <MX_SDIO_SD_Init+0x3c>)
 8005d7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d9e:	2202      	movs	r2, #2
 8005da0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005da2:	bf00      	nop
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20044a14 	.word	0x20044a14
 8005db0:	40012c00 	.word	0x40012c00

08005db4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005db8:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dba:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <MX_SPI2_Init+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005dc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005dc6:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005dd2:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005dde:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005de8:	2228      	movs	r2, #40	; 0x28
 8005dea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005e00:	220a      	movs	r2, #10
 8005e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e04:	4804      	ldr	r0, [pc, #16]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005e06:	f008 f865 	bl	800ded4 <HAL_SPI_Init>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005e10:	f000 fc94 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20044660 	.word	0x20044660
 8005e1c:	40003800 	.word	0x40003800

08005e20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b09a      	sub	sp, #104	; 0x68
 8005e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f00f f9e2 	bl	80151f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e3e:	f107 0320 	add.w	r3, r7, #32
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	611a      	str	r2, [r3, #16]
 8005e4e:	615a      	str	r2, [r3, #20]
 8005e50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e52:	463b      	mov	r3, r7
 8005e54:	2220      	movs	r2, #32
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f00f f9cd 	bl	80151f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005e5e:	4b42      	ldr	r3, [pc, #264]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <MX_TIM1_Init+0x14c>)
 8005e62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005e64:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005e70:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e78:	4b3b      	ldr	r3, [pc, #236]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e84:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005e8a:	4837      	ldr	r0, [pc, #220]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e8c:	f008 fdc5 	bl	800ea1a <HAL_TIM_PWM_Init>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005e96:	f000 fc51 	bl	800673c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005ebe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4828      	ldr	r0, [pc, #160]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005ec6:	f008 fe11 	bl	800eaec <HAL_TIM_Encoder_Init>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005ed0:	f000 fc34 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005edc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4821      	ldr	r0, [pc, #132]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005ee4:	f009 fb38 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005eee:	f000 fc25 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ef2:	2360      	movs	r3, #96	; 0x60
 8005ef4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005efa:	2300      	movs	r3, #0
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f06:	2300      	movs	r3, #0
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f0e:	f107 0320 	add.w	r3, r7, #32
 8005f12:	2208      	movs	r2, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	4814      	ldr	r0, [pc, #80]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005f18:	f008 ffba 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005f22:	f000 fc0b 	bl	800673c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005f44:	463b      	mov	r3, r7
 8005f46:	4619      	mov	r1, r3
 8005f48:	4807      	ldr	r0, [pc, #28]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005f4a:	f009 fb81 	bl	800f650 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005f54:	f000 fbf2 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005f58:	4803      	ldr	r0, [pc, #12]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005f5a:	f000 ffdf 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 8005f5e:	bf00      	nop
 8005f60:	3768      	adds	r7, #104	; 0x68
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200449d4 	.word	0x200449d4
 8005f6c:	40010000 	.word	0x40010000

08005f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f76:	f107 0320 	add.w	r3, r7, #32
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	60da      	str	r2, [r3, #12]
 8005f8c:	611a      	str	r2, [r3, #16]
 8005f8e:	615a      	str	r2, [r3, #20]
 8005f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f92:	4b27      	ldr	r3, [pc, #156]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005f94:	4a27      	ldr	r2, [pc, #156]	; (8006034 <MX_TIM3_Init+0xc4>)
 8005f96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8005fa4:	4b22      	ldr	r3, [pc, #136]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fa6:	f241 1293 	movw	r2, #4499	; 0x1193
 8005faa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005fb8:	481d      	ldr	r0, [pc, #116]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fba:	f008 fd2e 	bl	800ea1a <HAL_TIM_PWM_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005fc4:	f000 fbba 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005fd0:	f107 0320 	add.w	r3, r7, #32
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4816      	ldr	r0, [pc, #88]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fd8:	f009 fabe 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005fe2:	f000 fbab 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fe6:	2360      	movs	r3, #96	; 0x60
 8005fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	480c      	ldr	r0, [pc, #48]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005ffe:	f008 ff47 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006008:	f000 fb98 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	2204      	movs	r2, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4807      	ldr	r0, [pc, #28]	; (8006030 <MX_TIM3_Init+0xc0>)
 8006014:	f008 ff3c 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800601e:	f000 fb8d 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006022:	4803      	ldr	r0, [pc, #12]	; (8006030 <MX_TIM3_Init+0xc0>)
 8006024:	f000 ff7a 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 8006028:	bf00      	nop
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	2004486c 	.word	0x2004486c
 8006034:	40000400 	.word	0x40000400

08006038 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800603e:	f107 0320 	add.w	r3, r7, #32
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	611a      	str	r2, [r3, #16]
 8006056:	615a      	str	r2, [r3, #20]
 8006058:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800605a:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <MX_TIM4_Init+0xc0>)
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <MX_TIM4_Init+0xc4>)
 800605e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006062:	2200      	movs	r2, #0
 8006064:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006068:	2200      	movs	r2, #0
 800606a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800606c:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <MX_TIM4_Init+0xc0>)
 800606e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006072:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006074:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <MX_TIM4_Init+0xc0>)
 800607c:	2200      	movs	r2, #0
 800607e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006080:	481d      	ldr	r0, [pc, #116]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006082:	f008 fcca 	bl	800ea1a <HAL_TIM_PWM_Init>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800608c:	f000 fb56 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006094:	2300      	movs	r3, #0
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006098:	f107 0320 	add.w	r3, r7, #32
 800609c:	4619      	mov	r1, r3
 800609e:	4816      	ldr	r0, [pc, #88]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060a0:	f009 fa5a 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80060aa:	f000 fb47 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060ae:	2360      	movs	r3, #96	; 0x60
 80060b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	2208      	movs	r2, #8
 80060c2:	4619      	mov	r1, r3
 80060c4:	480c      	ldr	r0, [pc, #48]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060c6:	f008 fee3 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80060d0:	f000 fb34 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	220c      	movs	r2, #12
 80060d8:	4619      	mov	r1, r3
 80060da:	4807      	ldr	r0, [pc, #28]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060dc:	f008 fed8 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80060e6:	f000 fb29 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80060ea:	4803      	ldr	r0, [pc, #12]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060ec:	f000 ff16 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 80060f0:	bf00      	nop
 80060f2:	3728      	adds	r7, #40	; 0x28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200446f8 	.word	0x200446f8
 80060fc:	40000800 	.word	0x40000800

08006100 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006106:	463b      	mov	r3, r7
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <MX_TIM6_Init+0x64>)
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <MX_TIM6_Init+0x68>)
 8006112:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <MX_TIM6_Init+0x64>)
 8006116:	2259      	movs	r2, #89	; 0x59
 8006118:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <MX_TIM6_Init+0x64>)
 800611c:	2200      	movs	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <MX_TIM6_Init+0x64>)
 8006122:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006126:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <MX_TIM6_Init+0x64>)
 800612a:	2280      	movs	r2, #128	; 0x80
 800612c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800612e:	480d      	ldr	r0, [pc, #52]	; (8006164 <MX_TIM6_Init+0x64>)
 8006130:	f008 fc24 	bl	800e97c <HAL_TIM_Base_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800613a:	f000 faff 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800613e:	2300      	movs	r3, #0
 8006140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006146:	463b      	mov	r3, r7
 8006148:	4619      	mov	r1, r3
 800614a:	4806      	ldr	r0, [pc, #24]	; (8006164 <MX_TIM6_Init+0x64>)
 800614c:	f009 fa04 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006156:	f000 faf1 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20044994 	.word	0x20044994
 8006168:	40001000 	.word	0x40001000

0800616c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006172:	463b      	mov	r3, r7
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <MX_TIM7_Init+0x60>)
 800617c:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <MX_TIM7_Init+0x64>)
 800617e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <MX_TIM7_Init+0x60>)
 8006182:	22b3      	movs	r2, #179	; 0xb3
 8006184:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <MX_TIM7_Init+0x60>)
 8006188:	2200      	movs	r2, #0
 800618a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <MX_TIM7_Init+0x60>)
 800618e:	2231      	movs	r2, #49	; 0x31
 8006190:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006192:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <MX_TIM7_Init+0x60>)
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006198:	480c      	ldr	r0, [pc, #48]	; (80061cc <MX_TIM7_Init+0x60>)
 800619a:	f008 fbef 	bl	800e97c <HAL_TIM_Base_Init>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80061a4:	f000 faca 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061a8:	2300      	movs	r3, #0
 80061aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80061b0:	463b      	mov	r3, r7
 80061b2:	4619      	mov	r1, r3
 80061b4:	4805      	ldr	r0, [pc, #20]	; (80061cc <MX_TIM7_Init+0x60>)
 80061b6:	f009 f9cf 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80061c0:	f000 fabc 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20044b38 	.word	0x20044b38
 80061d0:	40001400 	.word	0x40001400

080061d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80061da:	f107 030c 	add.w	r3, r7, #12
 80061de:	2224      	movs	r2, #36	; 0x24
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f00f f808 	bl	80151f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80061f0:	4b22      	ldr	r3, [pc, #136]	; (800627c <MX_TIM8_Init+0xa8>)
 80061f2:	4a23      	ldr	r2, [pc, #140]	; (8006280 <MX_TIM8_Init+0xac>)
 80061f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80061f6:	4b21      	ldr	r3, [pc, #132]	; (800627c <MX_TIM8_Init+0xa8>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80061fc:	4b1f      	ldr	r3, [pc, #124]	; (800627c <MX_TIM8_Init+0xa8>)
 80061fe:	2210      	movs	r2, #16
 8006200:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006202:	4b1e      	ldr	r3, [pc, #120]	; (800627c <MX_TIM8_Init+0xa8>)
 8006204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006208:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <MX_TIM8_Init+0xa8>)
 800620c:	2200      	movs	r2, #0
 800620e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <MX_TIM8_Init+0xa8>)
 8006212:	2200      	movs	r2, #0
 8006214:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006216:	4b19      	ldr	r3, [pc, #100]	; (800627c <MX_TIM8_Init+0xa8>)
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800621c:	2303      	movs	r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006224:	2301      	movs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006230:	2300      	movs	r3, #0
 8006232:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006234:	2301      	movs	r3, #1
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006238:	2300      	movs	r3, #0
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	4619      	mov	r1, r3
 8006246:	480d      	ldr	r0, [pc, #52]	; (800627c <MX_TIM8_Init+0xa8>)
 8006248:	f008 fc50 	bl	800eaec <HAL_TIM_Encoder_Init>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006252:	f000 fa73 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4806      	ldr	r0, [pc, #24]	; (800627c <MX_TIM8_Init+0xa8>)
 8006264:	f009 f978 	bl	800f558 <HAL_TIMEx_MasterConfigSynchronization>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800626e:	f000 fa65 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006272:	bf00      	nop
 8006274:	3730      	adds	r7, #48	; 0x30
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200446b8 	.word	0x200446b8
 8006280:	40010400 	.word	0x40010400

08006284 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	611a      	str	r2, [r3, #16]
 8006298:	615a      	str	r2, [r3, #20]
 800629a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <MX_TIM10_Init+0x94>)
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <MX_TIM10_Init+0x98>)
 80062a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <MX_TIM10_Init+0x94>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <MX_TIM10_Init+0x94>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80062ae:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <MX_TIM10_Init+0x94>)
 80062b0:	f242 3227 	movw	r2, #8999	; 0x2327
 80062b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <MX_TIM10_Init+0x94>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <MX_TIM10_Init+0x94>)
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80062c2:	4815      	ldr	r0, [pc, #84]	; (8006318 <MX_TIM10_Init+0x94>)
 80062c4:	f008 fb5a 	bl	800e97c <HAL_TIM_Base_Init>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80062ce:	f000 fa35 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80062d2:	4811      	ldr	r0, [pc, #68]	; (8006318 <MX_TIM10_Init+0x94>)
 80062d4:	f008 fba1 	bl	800ea1a <HAL_TIM_PWM_Init>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80062de:	f000 fa2d 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062e2:	2360      	movs	r3, #96	; 0x60
 80062e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062f2:	1d3b      	adds	r3, r7, #4
 80062f4:	2200      	movs	r2, #0
 80062f6:	4619      	mov	r1, r3
 80062f8:	4807      	ldr	r0, [pc, #28]	; (8006318 <MX_TIM10_Init+0x94>)
 80062fa:	f008 fdc9 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006304:	f000 fa1a 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006308:	4803      	ldr	r0, [pc, #12]	; (8006318 <MX_TIM10_Init+0x94>)
 800630a:	f000 fe07 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 800630e:	bf00      	nop
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200447d4 	.word	0x200447d4
 800631c:	40014400 	.word	0x40014400

08006320 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	611a      	str	r2, [r3, #16]
 8006334:	615a      	str	r2, [r3, #20]
 8006336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006338:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <MX_TIM11_Init+0x94>)
 800633a:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <MX_TIM11_Init+0x98>)
 800633c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800633e:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006340:	2201      	movs	r2, #1
 8006342:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800634a:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <MX_TIM11_Init+0x94>)
 800634c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006350:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006354:	2200      	movs	r2, #0
 8006356:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <MX_TIM11_Init+0x94>)
 800635a:	2200      	movs	r2, #0
 800635c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800635e:	4815      	ldr	r0, [pc, #84]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006360:	f008 fb0c 	bl	800e97c <HAL_TIM_Base_Init>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800636a:	f000 f9e7 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800636e:	4811      	ldr	r0, [pc, #68]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006370:	f008 fb53 	bl	800ea1a <HAL_TIM_PWM_Init>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800637a:	f000 f9df 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800637e:	2360      	movs	r3, #96	; 0x60
 8006380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	2200      	movs	r2, #0
 8006392:	4619      	mov	r1, r3
 8006394:	4807      	ldr	r0, [pc, #28]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006396:	f008 fd7b 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80063a0:	f000 f9cc 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80063a4:	4803      	ldr	r0, [pc, #12]	; (80063b4 <MX_TIM11_Init+0x94>)
 80063a6:	f000 fdb9 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 80063aa:	bf00      	nop
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200448f4 	.word	0x200448f4
 80063b8:	40014800 	.word	0x40014800

080063bc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80063c0:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <MX_TIM13_Init+0x40>)
 80063c2:	4a0f      	ldr	r2, [pc, #60]	; (8006400 <MX_TIM13_Init+0x44>)
 80063c4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <MX_TIM13_Init+0x40>)
 80063c8:	2259      	movs	r2, #89	; 0x59
 80063ca:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <MX_TIM13_Init+0x40>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <MX_TIM13_Init+0x40>)
 80063d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80063d8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <MX_TIM13_Init+0x40>)
 80063dc:	2200      	movs	r2, #0
 80063de:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <MX_TIM13_Init+0x40>)
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80063e6:	4805      	ldr	r0, [pc, #20]	; (80063fc <MX_TIM13_Init+0x40>)
 80063e8:	f008 fac8 	bl	800e97c <HAL_TIM_Base_Init>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80063f2:	f000 f9a3 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80063f6:	bf00      	nop
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200448b4 	.word	0x200448b4
 8006400:	40001c00 	.word	0x40001c00

08006404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800640a:	4a12      	ldr	r2, [pc, #72]	; (8006454 <MX_USART2_UART_Init+0x50>)
 800640c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800641e:	2200      	movs	r2, #0
 8006420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006424:	2200      	movs	r2, #0
 8006426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800642a:	220c      	movs	r2, #12
 800642c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006430:	2200      	movs	r2, #0
 8006432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006436:	2200      	movs	r2, #0
 8006438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800643a:	4805      	ldr	r0, [pc, #20]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800643c:	f009 f96e 	bl	800f71c <HAL_UART_Init>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006446:	f000 f979 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20044a98 	.word	0x20044a98
 8006454:	40004400 	.word	0x40004400

08006458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <MX_DMA_Init+0x5c>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <MX_DMA_Init+0x5c>)
 8006468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800646c:	6313      	str	r3, [r2, #48]	; 0x30
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <MX_DMA_Init+0x5c>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	203a      	movs	r0, #58	; 0x3a
 8006480:	f003 fe47 	bl	800a112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006484:	203a      	movs	r0, #58	; 0x3a
 8006486:	f003 fe60 	bl	800a14a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	203b      	movs	r0, #59	; 0x3b
 8006490:	f003 fe3f 	bl	800a112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006494:	203b      	movs	r0, #59	; 0x3b
 8006496:	f003 fe58 	bl	800a14a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800649a:	2200      	movs	r2, #0
 800649c:	2100      	movs	r1, #0
 800649e:	2045      	movs	r0, #69	; 0x45
 80064a0:	f003 fe37 	bl	800a112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80064a4:	2045      	movs	r0, #69	; 0x45
 80064a6:	f003 fe50 	bl	800a14a <HAL_NVIC_EnableIRQ>

}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800

080064b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	; 0x30
 80064bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064be:	f107 031c 	add.w	r3, r7, #28
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	609a      	str	r2, [r3, #8]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	4b94      	ldr	r3, [pc, #592]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	4a93      	ldr	r2, [pc, #588]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064d8:	f043 0310 	orr.w	r3, r3, #16
 80064dc:	6313      	str	r3, [r2, #48]	; 0x30
 80064de:	4b91      	ldr	r3, [pc, #580]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	4b8d      	ldr	r3, [pc, #564]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a8c      	ldr	r2, [pc, #560]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b8a      	ldr	r3, [pc, #552]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	4b86      	ldr	r3, [pc, #536]	; (8006724 <MX_GPIO_Init+0x26c>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	4a85      	ldr	r2, [pc, #532]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006510:	f043 0304 	orr.w	r3, r3, #4
 8006514:	6313      	str	r3, [r2, #48]	; 0x30
 8006516:	4b83      	ldr	r3, [pc, #524]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	4b7f      	ldr	r3, [pc, #508]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a7e      	ldr	r2, [pc, #504]	; (8006724 <MX_GPIO_Init+0x26c>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	4b7c      	ldr	r3, [pc, #496]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	4b78      	ldr	r3, [pc, #480]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	4a77      	ldr	r2, [pc, #476]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	6313      	str	r3, [r2, #48]	; 0x30
 800654e:	4b75      	ldr	r3, [pc, #468]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	60bb      	str	r3, [r7, #8]
 8006558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	4b71      	ldr	r3, [pc, #452]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	4a70      	ldr	r2, [pc, #448]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	6313      	str	r3, [r2, #48]	; 0x30
 800656a:	4b6e      	ldr	r3, [pc, #440]	; (8006724 <MX_GPIO_Init+0x26c>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006576:	2200      	movs	r2, #0
 8006578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800657c:	486a      	ldr	r0, [pc, #424]	; (8006728 <MX_GPIO_Init+0x270>)
 800657e:	f004 fb5d 	bl	800ac3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006582:	2200      	movs	r2, #0
 8006584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006588:	4868      	ldr	r0, [pc, #416]	; (800672c <MX_GPIO_Init+0x274>)
 800658a:	f004 fb57 	bl	800ac3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800658e:	2200      	movs	r2, #0
 8006590:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006594:	4866      	ldr	r0, [pc, #408]	; (8006730 <MX_GPIO_Init+0x278>)
 8006596:	f004 fb51 	bl	800ac3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800659a:	2200      	movs	r2, #0
 800659c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80065a0:	4864      	ldr	r0, [pc, #400]	; (8006734 <MX_GPIO_Init+0x27c>)
 80065a2:	f004 fb4b 	bl	800ac3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065a6:	2304      	movs	r3, #4
 80065a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065aa:	2300      	movs	r3, #0
 80065ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065b2:	f107 031c 	add.w	r3, r7, #28
 80065b6:	4619      	mov	r1, r3
 80065b8:	485b      	ldr	r0, [pc, #364]	; (8006728 <MX_GPIO_Init+0x270>)
 80065ba:	f004 f97d 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80065be:	230f      	movs	r3, #15
 80065c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065c2:	2303      	movs	r3, #3
 80065c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065ca:	f107 031c 	add.w	r3, r7, #28
 80065ce:	4619      	mov	r1, r3
 80065d0:	4859      	ldr	r0, [pc, #356]	; (8006738 <MX_GPIO_Init+0x280>)
 80065d2:	f004 f971 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80065d6:	23e1      	movs	r3, #225	; 0xe1
 80065d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065da:	2303      	movs	r3, #3
 80065dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e2:	f107 031c 	add.w	r3, r7, #28
 80065e6:	4619      	mov	r1, r3
 80065e8:	4852      	ldr	r0, [pc, #328]	; (8006734 <MX_GPIO_Init+0x27c>)
 80065ea:	f004 f965 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065ee:	2303      	movs	r3, #3
 80065f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065f2:	2303      	movs	r3, #3
 80065f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065fa:	f107 031c 	add.w	r3, r7, #28
 80065fe:	4619      	mov	r1, r3
 8006600:	484a      	ldr	r0, [pc, #296]	; (800672c <MX_GPIO_Init+0x274>)
 8006602:	f004 f959 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006606:	2304      	movs	r3, #4
 8006608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800660a:	2300      	movs	r3, #0
 800660c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800660e:	2301      	movs	r3, #1
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006612:	f107 031c 	add.w	r3, r7, #28
 8006616:	4619      	mov	r1, r3
 8006618:	4844      	ldr	r0, [pc, #272]	; (800672c <MX_GPIO_Init+0x274>)
 800661a:	f004 f94d 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800661e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006624:	2300      	movs	r3, #0
 8006626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006628:	2301      	movs	r3, #1
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800662c:	f107 031c 	add.w	r3, r7, #28
 8006630:	4619      	mov	r1, r3
 8006632:	483d      	ldr	r0, [pc, #244]	; (8006728 <MX_GPIO_Init+0x270>)
 8006634:	f004 f940 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800663c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800663e:	2301      	movs	r3, #1
 8006640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006646:	2300      	movs	r3, #0
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800664a:	f107 031c 	add.w	r3, r7, #28
 800664e:	4619      	mov	r1, r3
 8006650:	4835      	ldr	r0, [pc, #212]	; (8006728 <MX_GPIO_Init+0x270>)
 8006652:	f004 f931 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800665a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665c:	2301      	movs	r3, #1
 800665e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006664:	2300      	movs	r3, #0
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006668:	f107 031c 	add.w	r3, r7, #28
 800666c:	4619      	mov	r1, r3
 800666e:	482f      	ldr	r0, [pc, #188]	; (800672c <MX_GPIO_Init+0x274>)
 8006670:	f004 f922 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667e:	2300      	movs	r3, #0
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006682:	f107 031c 	add.w	r3, r7, #28
 8006686:	4619      	mov	r1, r3
 8006688:	4829      	ldr	r0, [pc, #164]	; (8006730 <MX_GPIO_Init+0x278>)
 800668a:	f004 f915 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800668e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006694:	2301      	movs	r3, #1
 8006696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669c:	2300      	movs	r3, #0
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	4619      	mov	r1, r3
 80066a6:	4822      	ldr	r0, [pc, #136]	; (8006730 <MX_GPIO_Init+0x278>)
 80066a8:	f004 f906 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066b2:	2301      	movs	r3, #1
 80066b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066b6:	2301      	movs	r3, #1
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066be:	f107 031c 	add.w	r3, r7, #28
 80066c2:	4619      	mov	r1, r3
 80066c4:	481a      	ldr	r0, [pc, #104]	; (8006730 <MX_GPIO_Init+0x278>)
 80066c6:	f004 f8f7 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80066ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80066ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066d0:	2301      	movs	r3, #1
 80066d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d8:	2300      	movs	r3, #0
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066dc:	f107 031c 	add.w	r3, r7, #28
 80066e0:	4619      	mov	r1, r3
 80066e2:	4814      	ldr	r0, [pc, #80]	; (8006734 <MX_GPIO_Init+0x27c>)
 80066e4:	f004 f8e8 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80066e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066ee:	2300      	movs	r3, #0
 80066f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066f6:	f107 031c 	add.w	r3, r7, #28
 80066fa:	4619      	mov	r1, r3
 80066fc:	480d      	ldr	r0, [pc, #52]	; (8006734 <MX_GPIO_Init+0x27c>)
 80066fe:	f004 f8db 	bl	800a8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006702:	239b      	movs	r3, #155	; 0x9b
 8006704:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006706:	2300      	movs	r3, #0
 8006708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800670a:	2301      	movs	r3, #1
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800670e:	f107 031c 	add.w	r3, r7, #28
 8006712:	4619      	mov	r1, r3
 8006714:	4806      	ldr	r0, [pc, #24]	; (8006730 <MX_GPIO_Init+0x278>)
 8006716:	f004 f8cf 	bl	800a8b8 <HAL_GPIO_Init>

}
 800671a:	bf00      	nop
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
 8006728:	40021000 	.word	0x40021000
 800672c:	40020400 	.word	0x40020400
 8006730:	40020c00 	.word	0x40020c00
 8006734:	40020000 	.word	0x40020000
 8006738:	40020800 	.word	0x40020800

0800673c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006740:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006742:	e7fe      	b.n	8006742 <Error_Handler+0x6>

08006744 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006748:	bf00      	nop
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <HAL_MspInit+0x4c>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	4a0f      	ldr	r2, [pc, #60]	; (80067a0 <HAL_MspInit+0x4c>)
 8006764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006768:	6453      	str	r3, [r2, #68]	; 0x44
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <HAL_MspInit+0x4c>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <HAL_MspInit+0x4c>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <HAL_MspInit+0x4c>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6413      	str	r3, [r2, #64]	; 0x40
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_MspInit+0x4c>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800

080067a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08c      	sub	sp, #48	; 0x30
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ac:	f107 031c 	add.w	r3, r7, #28
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a4a      	ldr	r2, [pc, #296]	; (80068ec <HAL_ADC_MspInit+0x148>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f040 808e 	bne.w	80068e4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	4b48      	ldr	r3, [pc, #288]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	4a47      	ldr	r2, [pc, #284]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067d6:	6453      	str	r3, [r2, #68]	; 0x44
 80067d8:	4b45      	ldr	r3, [pc, #276]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	4b41      	ldr	r3, [pc, #260]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	4a40      	ldr	r2, [pc, #256]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	6313      	str	r3, [r2, #48]	; 0x30
 80067f4:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	4a39      	ldr	r2, [pc, #228]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6313      	str	r3, [r2, #48]	; 0x30
 8006810:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	4b33      	ldr	r3, [pc, #204]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	4a32      	ldr	r2, [pc, #200]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	6313      	str	r3, [r2, #48]	; 0x30
 800682c:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006838:	230f      	movs	r3, #15
 800683a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800683c:	2303      	movs	r3, #3
 800683e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006844:	f107 031c 	add.w	r3, r7, #28
 8006848:	4619      	mov	r1, r3
 800684a:	482a      	ldr	r0, [pc, #168]	; (80068f4 <HAL_ADC_MspInit+0x150>)
 800684c:	f004 f834 	bl	800a8b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006854:	2303      	movs	r3, #3
 8006856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800685c:	f107 031c 	add.w	r3, r7, #28
 8006860:	4619      	mov	r1, r3
 8006862:	4825      	ldr	r0, [pc, #148]	; (80068f8 <HAL_ADC_MspInit+0x154>)
 8006864:	f004 f828 	bl	800a8b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006868:	2303      	movs	r3, #3
 800686a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800686c:	2303      	movs	r3, #3
 800686e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006870:	2300      	movs	r3, #0
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006874:	f107 031c 	add.w	r3, r7, #28
 8006878:	4619      	mov	r1, r3
 800687a:	4820      	ldr	r0, [pc, #128]	; (80068fc <HAL_ADC_MspInit+0x158>)
 800687c:	f004 f81c 	bl	800a8b8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006880:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006882:	4a20      	ldr	r2, [pc, #128]	; (8006904 <HAL_ADC_MspInit+0x160>)
 8006884:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006886:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800688c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800688e:	4b1c      	ldr	r3, [pc, #112]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006894:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800689a:	4b19      	ldr	r3, [pc, #100]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 800689c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068b0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80068b2:	4b13      	ldr	r3, [pc, #76]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068c0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80068c8:	480d      	ldr	r0, [pc, #52]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068ca:	f003 fc59 	bl	800a180 <HAL_DMA_Init>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80068d4:	f7ff ff32 	bl	800673c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a09      	ldr	r2, [pc, #36]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80068e4:	bf00      	nop
 80068e6:	3730      	adds	r7, #48	; 0x30
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40012100 	.word	0x40012100
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40020800 	.word	0x40020800
 80068f8:	40020000 	.word	0x40020000
 80068fc:	40020400 	.word	0x40020400
 8006900:	20044ad8 	.word	0x20044ad8
 8006904:	40026440 	.word	0x40026440

08006908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006910:	f107 031c 	add.w	r3, r7, #28
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	609a      	str	r2, [r3, #8]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a32      	ldr	r2, [pc, #200]	; (80069f0 <HAL_I2C_MspInit+0xe8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d12c      	bne.n	8006984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	4b31      	ldr	r3, [pc, #196]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	4a30      	ldr	r2, [pc, #192]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	6313      	str	r3, [r2, #48]	; 0x30
 800693a:	4b2e      	ldr	r3, [pc, #184]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006946:	23c0      	movs	r3, #192	; 0xc0
 8006948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800694a:	2312      	movs	r3, #18
 800694c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800694e:	2301      	movs	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006952:	2303      	movs	r3, #3
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006956:	2304      	movs	r3, #4
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800695a:	f107 031c 	add.w	r3, r7, #28
 800695e:	4619      	mov	r1, r3
 8006960:	4825      	ldr	r0, [pc, #148]	; (80069f8 <HAL_I2C_MspInit+0xf0>)
 8006962:	f003 ffa9 	bl	800a8b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	4b22      	ldr	r3, [pc, #136]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006974:	6413      	str	r3, [r2, #64]	; 0x40
 8006976:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006982:	e031      	b.n	80069e8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_I2C_MspInit+0xf4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d12c      	bne.n	80069e8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6313      	str	r3, [r2, #48]	; 0x30
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80069aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069b0:	2312      	movs	r3, #18
 80069b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069b4:	2301      	movs	r3, #1
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b8:	2303      	movs	r3, #3
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80069bc:	2304      	movs	r3, #4
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c0:	f107 031c 	add.w	r3, r7, #28
 80069c4:	4619      	mov	r1, r3
 80069c6:	480c      	ldr	r0, [pc, #48]	; (80069f8 <HAL_I2C_MspInit+0xf0>)
 80069c8:	f003 ff76 	bl	800a8b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069da:	6413      	str	r3, [r2, #64]	; 0x40
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40005400 	.word	0x40005400
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40020400 	.word	0x40020400
 80069fc:	40005800 	.word	0x40005800

08006a00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a69      	ldr	r2, [pc, #420]	; (8006bc4 <HAL_SD_MspInit+0x1c4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f040 80cb 	bne.w	8006bba <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	4b67      	ldr	r3, [pc, #412]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2c:	4a66      	ldr	r2, [pc, #408]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a32:	6453      	str	r3, [r2, #68]	; 0x44
 8006a34:	4b64      	ldr	r3, [pc, #400]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	4b60      	ldr	r3, [pc, #384]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4a5f      	ldr	r2, [pc, #380]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a50:	4b5d      	ldr	r3, [pc, #372]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	4b59      	ldr	r3, [pc, #356]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	4a58      	ldr	r2, [pc, #352]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a66:	f043 0308 	orr.w	r3, r3, #8
 8006a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6c:	4b56      	ldr	r3, [pc, #344]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a78:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006a7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a86:	2303      	movs	r3, #3
 8006a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4619      	mov	r1, r3
 8006a94:	484d      	ldr	r0, [pc, #308]	; (8006bcc <HAL_SD_MspInit+0x1cc>)
 8006a96:	f003 ff0f 	bl	800a8b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006aaa:	230c      	movs	r3, #12
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006aae:	f107 0314 	add.w	r3, r7, #20
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4846      	ldr	r0, [pc, #280]	; (8006bd0 <HAL_SD_MspInit+0x1d0>)
 8006ab6:	f003 feff 	bl	800a8b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006aba:	4b46      	ldr	r3, [pc, #280]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006abc:	4a46      	ldr	r2, [pc, #280]	; (8006bd8 <HAL_SD_MspInit+0x1d8>)
 8006abe:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006ac0:	4b44      	ldr	r3, [pc, #272]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ac6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ac8:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ace:	4b41      	ldr	r3, [pc, #260]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ada:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006adc:	4b3d      	ldr	r3, [pc, #244]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ae4:	4b3b      	ldr	r3, [pc, #236]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006aea:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006aec:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006aee:	2220      	movs	r2, #32
 8006af0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006af2:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006af4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006af8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006afa:	4b36      	ldr	r3, [pc, #216]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006afc:	2204      	movs	r2, #4
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b00:	4b34      	ldr	r3, [pc, #208]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b02:	2203      	movs	r2, #3
 8006b04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006b06:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006b0e:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006b16:	482f      	ldr	r0, [pc, #188]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b18:	f003 fb32 	bl	800a180 <HAL_DMA_Init>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006b22:	f7ff fe0b 	bl	800673c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8006b2c:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006b32:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b34:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_SD_MspInit+0x1e0>)
 8006b36:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006b38:	4b28      	ldr	r3, [pc, #160]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b40:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b42:	2240      	movs	r2, #64	; 0x40
 8006b44:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b46:	4b25      	ldr	r3, [pc, #148]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b4c:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b52:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b54:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b62:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b66:	2220      	movs	r2, #32
 8006b68:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006b70:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b74:	2204      	movs	r2, #4
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b78:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006b7e:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006b8e:	4813      	ldr	r0, [pc, #76]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b90:	f003 faf6 	bl	800a180 <HAL_DMA_Init>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006b9a:	f7ff fdcf 	bl	800673c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a0e      	ldr	r2, [pc, #56]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006ba2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	2031      	movs	r0, #49	; 0x31
 8006bb0:	f003 faaf 	bl	800a112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006bb4:	2031      	movs	r0, #49	; 0x31
 8006bb6:	f003 fac8 	bl	800a14a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006bba:	bf00      	nop
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40020800 	.word	0x40020800
 8006bd0:	40020c00 	.word	0x40020c00
 8006bd4:	20044600 	.word	0x20044600
 8006bd8:	40026458 	.word	0x40026458
 8006bdc:	20044934 	.word	0x20044934
 8006be0:	400264a0 	.word	0x400264a0

08006be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_SPI_MspInit+0x84>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d12c      	bne.n	8006c60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c14:	6413      	str	r3, [r2, #64]	; 0x40
 8006c16:	4b15      	ldr	r3, [pc, #84]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	6313      	str	r3, [r2, #48]	; 0x30
 8006c32:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006c3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c44:	2302      	movs	r3, #2
 8006c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c50:	2305      	movs	r3, #5
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4805      	ldr	r0, [pc, #20]	; (8006c70 <HAL_SPI_MspInit+0x8c>)
 8006c5c:	f003 fe2c 	bl	800a8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006c60:	bf00      	nop
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40003800 	.word	0x40003800
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40020400 	.word	0x40020400

08006c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08c      	sub	sp, #48	; 0x30
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c7c:	f107 031c 	add.w	r3, r7, #28
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	609a      	str	r2, [r3, #8]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <HAL_TIM_PWM_MspInit+0xd4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d12d      	bne.n	8006cf2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ca6:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006cbc:	f043 0310 	orr.w	r3, r3, #16
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f003 0310 	and.w	r3, r3, #16
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006cce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ce4:	f107 031c 	add.w	r3, r7, #28
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4819      	ldr	r0, [pc, #100]	; (8006d50 <HAL_TIM_PWM_MspInit+0xdc>)
 8006cec:	f003 fde4 	bl	800a8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006cf0:	e026      	b.n	8006d40 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <HAL_TIM_PWM_MspInit+0xe0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10e      	bne.n	8006d1a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]
}
 8006d18:	e012      	b.n	8006d40 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <HAL_TIM_PWM_MspInit+0xe4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10d      	bne.n	8006d40 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	6413      	str	r3, [r2, #64]	; 0x40
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
}
 8006d40:	bf00      	nop
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800

08006d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a3e      	ldr	r2, [pc, #248]	; (8006e64 <HAL_TIM_Base_MspInit+0x108>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d116      	bne.n	8006d9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006d78:	f043 0310 	orr.w	r3, r3, #16
 8006d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7e:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	2036      	movs	r0, #54	; 0x36
 8006d90:	f003 f9bf 	bl	800a112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006d94:	2036      	movs	r0, #54	; 0x36
 8006d96:	f003 f9d8 	bl	800a14a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006d9a:	e05e      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a32      	ldr	r2, [pc, #200]	; (8006e6c <HAL_TIM_Base_MspInit+0x110>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d116      	bne.n	8006dd4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	4b2f      	ldr	r3, [pc, #188]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	4a2e      	ldr	r2, [pc, #184]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	6413      	str	r3, [r2, #64]	; 0x40
 8006db6:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2037      	movs	r0, #55	; 0x37
 8006dc8:	f003 f9a3 	bl	800a112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006dcc:	2037      	movs	r0, #55	; 0x37
 8006dce:	f003 f9bc 	bl	800a14a <HAL_NVIC_EnableIRQ>
}
 8006dd2:	e042      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a25      	ldr	r2, [pc, #148]	; (8006e70 <HAL_TIM_Base_MspInit+0x114>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	4a20      	ldr	r2, [pc, #128]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dec:	6453      	str	r3, [r2, #68]	; 0x44
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	697b      	ldr	r3, [r7, #20]
}
 8006dfa:	e02e      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <HAL_TIM_Base_MspInit+0x118>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	4a16      	ldr	r2, [pc, #88]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e14:	6453      	str	r3, [r2, #68]	; 0x44
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
}
 8006e22:	e01a      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a13      	ldr	r2, [pc, #76]	; (8006e78 <HAL_TIM_Base_MspInit+0x11c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d115      	bne.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	202c      	movs	r0, #44	; 0x2c
 8006e50:	f003 f95f 	bl	800a112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006e54:	202c      	movs	r0, #44	; 0x2c
 8006e56:	f003 f978 	bl	800a14a <HAL_NVIC_EnableIRQ>
}
 8006e5a:	bf00      	nop
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40001000 	.word	0x40001000
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40001400 	.word	0x40001400
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800
 8006e78:	40001c00 	.word	0x40001c00

08006e7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e84:	f107 0314 	add.w	r3, r7, #20
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	605a      	str	r2, [r3, #4]
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	60da      	str	r2, [r3, #12]
 8006e92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <HAL_TIM_Encoder_MspInit+0x94>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d133      	bne.n	8006f06 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea6:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ea8:	f043 0302 	orr.w	r3, r3, #2
 8006eac:	6453      	str	r3, [r2, #68]	; 0x44
 8006eae:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ed6:	23c0      	movs	r3, #192	; 0xc0
 8006ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eda:	2302      	movs	r3, #2
 8006edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4809      	ldr	r0, [pc, #36]	; (8006f18 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006ef2:	f003 fce1 	bl	800a8b8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2100      	movs	r1, #0
 8006efa:	202c      	movs	r0, #44	; 0x2c
 8006efc:	f003 f909 	bl	800a112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006f00:	202c      	movs	r0, #44	; 0x2c
 8006f02:	f003 f922 	bl	800a14a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006f06:	bf00      	nop
 8006f08:	3728      	adds	r7, #40	; 0x28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40010400 	.word	0x40010400
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40020800 	.word	0x40020800

08006f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08c      	sub	sp, #48	; 0x30
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f24:	f107 031c 	add.w	r3, r7, #28
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	605a      	str	r2, [r3, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a5c      	ldr	r2, [pc, #368]	; (80070ac <HAL_TIM_MspPostInit+0x190>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d11f      	bne.n	8006f7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	4b5b      	ldr	r3, [pc, #364]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	4a5a      	ldr	r2, [pc, #360]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f48:	f043 0310 	orr.w	r3, r3, #16
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4e:	4b58      	ldr	r3, [pc, #352]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f60:	2302      	movs	r3, #2
 8006f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f70:	f107 031c 	add.w	r3, r7, #28
 8006f74:	4619      	mov	r1, r3
 8006f76:	484f      	ldr	r0, [pc, #316]	; (80070b4 <HAL_TIM_MspPostInit+0x198>)
 8006f78:	f003 fc9e 	bl	800a8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006f7c:	e091      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a4d      	ldr	r2, [pc, #308]	; (80070b8 <HAL_TIM_MspPostInit+0x19c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d11e      	bne.n	8006fc6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	4b48      	ldr	r3, [pc, #288]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	4a47      	ldr	r2, [pc, #284]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	6313      	str	r3, [r2, #48]	; 0x30
 8006f98:	4b45      	ldr	r3, [pc, #276]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fa4:	2330      	movs	r3, #48	; 0x30
 8006fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb8:	f107 031c 	add.w	r3, r7, #28
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	483f      	ldr	r0, [pc, #252]	; (80070bc <HAL_TIM_MspPostInit+0x1a0>)
 8006fc0:	f003 fc7a 	bl	800a8b8 <HAL_GPIO_Init>
}
 8006fc4:	e06d      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3d      	ldr	r2, [pc, #244]	; (80070c0 <HAL_TIM_MspPostInit+0x1a4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d11f      	bne.n	8007010 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006fda:	f043 0308 	orr.w	r3, r3, #8
 8006fde:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe0:	4b33      	ldr	r3, [pc, #204]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006fec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006ffe:	2302      	movs	r3, #2
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007002:	f107 031c 	add.w	r3, r7, #28
 8007006:	4619      	mov	r1, r3
 8007008:	482e      	ldr	r0, [pc, #184]	; (80070c4 <HAL_TIM_MspPostInit+0x1a8>)
 800700a:	f003 fc55 	bl	800a8b8 <HAL_GPIO_Init>
}
 800700e:	e048      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <HAL_TIM_MspPostInit+0x1ac>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d11f      	bne.n	800705a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	4a23      	ldr	r2, [pc, #140]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	6313      	str	r3, [r2, #48]	; 0x30
 800702a:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800703a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800703c:	2302      	movs	r3, #2
 800703e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007044:	2300      	movs	r3, #0
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007048:	2303      	movs	r3, #3
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800704c:	f107 031c 	add.w	r3, r7, #28
 8007050:	4619      	mov	r1, r3
 8007052:	481a      	ldr	r0, [pc, #104]	; (80070bc <HAL_TIM_MspPostInit+0x1a0>)
 8007054:	f003 fc30 	bl	800a8b8 <HAL_GPIO_Init>
}
 8007058:	e023      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <HAL_TIM_MspPostInit+0x1b0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d11e      	bne.n	80070a2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	4a10      	ldr	r2, [pc, #64]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 800706e:	f043 0302 	orr.w	r3, r3, #2
 8007072:	6313      	str	r3, [r2, #48]	; 0x30
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007086:	2302      	movs	r3, #2
 8007088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800708e:	2300      	movs	r3, #0
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007092:	2303      	movs	r3, #3
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007096:	f107 031c 	add.w	r3, r7, #28
 800709a:	4619      	mov	r1, r3
 800709c:	4807      	ldr	r0, [pc, #28]	; (80070bc <HAL_TIM_MspPostInit+0x1a0>)
 800709e:	f003 fc0b 	bl	800a8b8 <HAL_GPIO_Init>
}
 80070a2:	bf00      	nop
 80070a4:	3730      	adds	r7, #48	; 0x30
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40020400 	.word	0x40020400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40020c00 	.word	0x40020c00
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d8:	f107 0314 	add.w	r3, r7, #20
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a19      	ldr	r2, [pc, #100]	; (8007154 <HAL_UART_MspInit+0x84>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d12b      	bne.n	800714a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	4b18      	ldr	r3, [pc, #96]	; (8007158 <HAL_UART_MspInit+0x88>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_UART_MspInit+0x88>)
 80070fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007100:	6413      	str	r3, [r2, #64]	; 0x40
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007118:	f043 0308 	orr.w	r3, r3, #8
 800711c:	6313      	str	r3, [r2, #48]	; 0x30
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800712a:	2360      	movs	r3, #96	; 0x60
 800712c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712e:	2302      	movs	r3, #2
 8007130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007136:	2303      	movs	r3, #3
 8007138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800713a:	2307      	movs	r3, #7
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	4619      	mov	r1, r3
 8007144:	4805      	ldr	r0, [pc, #20]	; (800715c <HAL_UART_MspInit+0x8c>)
 8007146:	f003 fbb7 	bl	800a8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800714a:	bf00      	nop
 800714c:	3728      	adds	r7, #40	; 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40004400 	.word	0x40004400
 8007158:	40023800 	.word	0x40023800
 800715c:	40020c00 	.word	0x40020c00

08007160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007164:	e7fe      	b.n	8007164 <NMI_Handler+0x4>

08007166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800716a:	e7fe      	b.n	800716a <HardFault_Handler+0x4>

0800716c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007170:	e7fe      	b.n	8007170 <MemManage_Handler+0x4>

08007172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007172:	b480      	push	{r7}
 8007174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007176:	e7fe      	b.n	8007176 <BusFault_Handler+0x4>

08007178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800717c:	e7fe      	b.n	800717c <UsageFault_Handler+0x4>

0800717e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800717e:	b480      	push	{r7}
 8007180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007182:	bf00      	nop
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800719a:	b480      	push	{r7}
 800719c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071ac:	f002 fa90 	bl	80096d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80071b8:	4803      	ldr	r0, [pc, #12]	; (80071c8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80071ba:	f007 fd60 	bl	800ec7e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80071be:	4803      	ldr	r0, [pc, #12]	; (80071cc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80071c0:	f007 fd5d 	bl	800ec7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80071c4:	bf00      	nop
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200446b8 	.word	0x200446b8
 80071cc:	200448b4 	.word	0x200448b4

080071d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80071d4:	4802      	ldr	r0, [pc, #8]	; (80071e0 <SDIO_IRQHandler+0x10>)
 80071d6:	f005 fdf9 	bl	800cdcc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20044a14 	.word	0x20044a14

080071e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80071e8:	4802      	ldr	r0, [pc, #8]	; (80071f4 <TIM6_DAC_IRQHandler+0x10>)
 80071ea:	f007 fd48 	bl	800ec7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20044994 	.word	0x20044994

080071f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <TIM7_IRQHandler+0x10>)
 80071fe:	f007 fd3e 	bl	800ec7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20044b38 	.word	0x20044b38

0800720c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007210:	4802      	ldr	r0, [pc, #8]	; (800721c <DMA2_Stream2_IRQHandler+0x10>)
 8007212:	f003 f8dd 	bl	800a3d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007216:	bf00      	nop
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20044ad8 	.word	0x20044ad8

08007220 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007224:	4802      	ldr	r0, [pc, #8]	; (8007230 <DMA2_Stream3_IRQHandler+0x10>)
 8007226:	f003 f8d3 	bl	800a3d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20044600 	.word	0x20044600

08007234 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007238:	4802      	ldr	r0, [pc, #8]	; (8007244 <DMA2_Stream6_IRQHandler+0x10>)
 800723a:	f003 f8c9 	bl	800a3d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20044934 	.word	0x20044934

08007248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007250:	4a14      	ldr	r2, [pc, #80]	; (80072a4 <_sbrk+0x5c>)
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <_sbrk+0x60>)
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <_sbrk+0x64>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007264:	4b11      	ldr	r3, [pc, #68]	; (80072ac <_sbrk+0x64>)
 8007266:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <_sbrk+0x68>)
 8007268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800726a:	4b10      	ldr	r3, [pc, #64]	; (80072ac <_sbrk+0x64>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d207      	bcs.n	8007288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007278:	f00d ff94 	bl	80151a4 <__errno>
 800727c:	4602      	mov	r2, r0
 800727e:	230c      	movs	r3, #12
 8007280:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	e009      	b.n	800729c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <_sbrk+0x64>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <_sbrk+0x64>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	4a05      	ldr	r2, [pc, #20]	; (80072ac <_sbrk+0x64>)
 8007298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20050000 	.word	0x20050000
 80072a8:	00000800 	.word	0x00000800
 80072ac:	200002a4 	.word	0x200002a4
 80072b0:	20046c88 	.word	0x20046c88

080072b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <SystemInit+0x28>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <SystemInit+0x28>)
 80072c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <SystemInit+0x28>)
 80072ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072ce:	609a      	str	r2, [r3, #8]
#endif
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000ed00 	.word	0xe000ed00

080072e0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80072e0:	b598      	push	{r3, r4, r7, lr}
 80072e2:	af00      	add	r7, sp, #0
	lcd_init();
 80072e4:	f7f9 fe98 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80072e8:	483b      	ldr	r0, [pc, #236]	; (80073d8 <cppInit+0xf8>)
 80072ea:	f7fd fccf 	bl	8004c8c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80072ee:	2064      	movs	r0, #100	; 0x64
 80072f0:	f002 fa0e 	bl	8009710 <HAL_Delay>
	power_sensor.updateValues();
 80072f4:	4838      	ldr	r0, [pc, #224]	; (80073d8 <cppInit+0xf8>)
 80072f6:	f7fd fcd7 	bl	8004ca8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80072fa:	f7f9 fed1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80072fe:	2100      	movs	r1, #0
 8007300:	2000      	movs	r0, #0
 8007302:	f7f9 fedd 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007306:	4835      	ldr	r0, [pc, #212]	; (80073dc <cppInit+0xfc>)
 8007308:	f7f9 ff04 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800730c:	2101      	movs	r1, #1
 800730e:	2000      	movs	r0, #0
 8007310:	f7f9 fed6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007314:	4830      	ldr	r0, [pc, #192]	; (80073d8 <cppInit+0xf8>)
 8007316:	f7fd fcf1 	bl	8004cfc <_ZN11PowerSensor17getButteryVoltageEv>
 800731a:	ee10 3a10 	vmov	r3, s0
 800731e:	4618      	mov	r0, r3
 8007320:	f7f9 f92a 	bl	8000578 <__aeabi_f2d>
 8007324:	4603      	mov	r3, r0
 8007326:	460c      	mov	r4, r1
 8007328:	461a      	mov	r2, r3
 800732a:	4623      	mov	r3, r4
 800732c:	482c      	ldr	r0, [pc, #176]	; (80073e0 <cppInit+0x100>)
 800732e:	f7f9 fef1 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007336:	f002 f9eb 	bl	8009710 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800733a:	482a      	ldr	r0, [pc, #168]	; (80073e4 <cppInit+0x104>)
 800733c:	f7fc ff5e 	bl	80041fc <_ZN6Logger10sdCardInitEv>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <cppInit+0x76>
		led.fullColor('G');
 8007346:	2147      	movs	r1, #71	; 0x47
 8007348:	4827      	ldr	r0, [pc, #156]	; (80073e8 <cppInit+0x108>)
 800734a:	f7fa ff63 	bl	8002214 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800734e:	2064      	movs	r0, #100	; 0x64
 8007350:	f002 f9de 	bl	8009710 <HAL_Delay>
 8007354:	e006      	b.n	8007364 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007356:	2152      	movs	r1, #82	; 0x52
 8007358:	4823      	ldr	r0, [pc, #140]	; (80073e8 <cppInit+0x108>)
 800735a:	f7fa ff5b 	bl	8002214 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800735e:	2064      	movs	r0, #100	; 0x64
 8007360:	f002 f9d6 	bl	8009710 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007364:	4821      	ldr	r0, [pc, #132]	; (80073ec <cppInit+0x10c>)
 8007366:	f7fb f8b1 	bl	80024cc <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800736a:	4821      	ldr	r0, [pc, #132]	; (80073f0 <cppInit+0x110>)
 800736c:	f7fd f956 	bl	800461c <_ZN5Motor4initEv>
	encoder.init();
 8007370:	4820      	ldr	r0, [pc, #128]	; (80073f4 <cppInit+0x114>)
 8007372:	f7fa f857 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007376:	4820      	ldr	r0, [pc, #128]	; (80073f8 <cppInit+0x118>)
 8007378:	f7fa fcfc 	bl	8001d74 <_ZN3IMU4initEv>
	line_trace.init();
 800737c:	481f      	ldr	r0, [pc, #124]	; (80073fc <cppInit+0x11c>)
 800737e:	f7fc f8f3 	bl	8003568 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007382:	481a      	ldr	r0, [pc, #104]	; (80073ec <cppInit+0x10c>)
 8007384:	f7fb fa02 	bl	800278c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800738c:	f002 f9c0 	bl	8009710 <HAL_Delay>

	led.fullColor('M');
 8007390:	214d      	movs	r1, #77	; 0x4d
 8007392:	4815      	ldr	r0, [pc, #84]	; (80073e8 <cppInit+0x108>)
 8007394:	f7fa ff3e 	bl	8002214 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007398:	4817      	ldr	r0, [pc, #92]	; (80073f8 <cppInit+0x118>)
 800739a:	f7fa fdc3 	bl	8001f24 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 800739e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007400 <cppInit+0x120>
 80073a2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007404 <cppInit+0x124>
 80073a6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007408 <cppInit+0x128>
 80073aa:	4818      	ldr	r0, [pc, #96]	; (800740c <cppInit+0x12c>)
 80073ac:	f7fe f9dc 	bl	8005768 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80073b0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007410 <cppInit+0x130>
 80073b4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007414 <cppInit+0x134>
 80073b8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007418 <cppInit+0x138>
 80073bc:	4813      	ldr	r0, [pc, #76]	; (800740c <cppInit+0x12c>)
 80073be:	f7fe f9ec 	bl	800579a <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 80073c2:	4816      	ldr	r0, [pc, #88]	; (800741c <cppInit+0x13c>)
 80073c4:	f7fd fb6b 	bl	8004a9e <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80073c8:	4815      	ldr	r0, [pc, #84]	; (8007420 <cppInit+0x140>)
 80073ca:	f7fd fc03 	bl	8004bd4 <_ZN13PathFollowing4initEv>

	esc.init();
 80073ce:	4815      	ldr	r0, [pc, #84]	; (8007424 <cppInit+0x144>)
 80073d0:	f7f9 ff0c 	bl	80011ec <_ZN3ESC4initEv>

}
 80073d4:	bf00      	nop
 80073d6:	bd98      	pop	{r3, r4, r7, pc}
 80073d8:	200005bc 	.word	0x200005bc
 80073dc:	080197dc 	.word	0x080197dc
 80073e0:	080197e4 	.word	0x080197e4
 80073e4:	200005dc 	.word	0x200005dc
 80073e8:	200005b8 	.word	0x200005b8
 80073ec:	200002a8 	.word	0x200002a8
 80073f0:	200005b4 	.word	0x200005b4
 80073f4:	2001daa8 	.word	0x2001daa8
 80073f8:	200005c8 	.word	0x200005c8
 80073fc:	2001db4c 	.word	0x2001db4c
 8007400:	3a8439b6 	.word	0x3a8439b6
 8007404:	40d1a29c 	.word	0x40d1a29c
 8007408:	3f81f8a1 	.word	0x3f81f8a1
 800740c:	2001dac8 	.word	0x2001dac8
 8007410:	00000000 	.word	0x00000000
 8007414:	3f5e3fbc 	.word	0x3f5e3fbc
 8007418:	3d75c28f 	.word	0x3d75c28f
 800741c:	2001db08 	.word	0x2001db08
 8007420:	2002ab00 	.word	0x2002ab00
 8007424:	2001db48 	.word	0x2001db48

08007428 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800742c:	480e      	ldr	r0, [pc, #56]	; (8007468 <cppFlip1ms+0x40>)
 800742e:	f7fb f8ab 	bl	8002588 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007432:	480e      	ldr	r0, [pc, #56]	; (800746c <cppFlip1ms+0x44>)
 8007434:	f7fa fcc4 	bl	8001dc0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007438:	480d      	ldr	r0, [pc, #52]	; (8007470 <cppFlip1ms+0x48>)
 800743a:	f7fa f815 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800743e:	480d      	ldr	r0, [pc, #52]	; (8007474 <cppFlip1ms+0x4c>)
 8007440:	f7fc fb38 	bl	8003ab4 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007444:	480c      	ldr	r0, [pc, #48]	; (8007478 <cppFlip1ms+0x50>)
 8007446:	f7fe f9c1 	bl	80057cc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800744a:	480c      	ldr	r0, [pc, #48]	; (800747c <cppFlip1ms+0x54>)
 800744c:	f7fd fb1c 	bl	8004a88 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007450:	480b      	ldr	r0, [pc, #44]	; (8007480 <cppFlip1ms+0x58>)
 8007452:	f7fd fccf 	bl	8004df4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007456:	480b      	ldr	r0, [pc, #44]	; (8007484 <cppFlip1ms+0x5c>)
 8007458:	f7fd f8f2 	bl	8004640 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 800745c:	4804      	ldr	r0, [pc, #16]	; (8007470 <cppFlip1ms+0x48>)
 800745e:	f7fa f8ed 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007462:	bf00      	nop
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	200002a8 	.word	0x200002a8
 800746c:	200005c8 	.word	0x200005c8
 8007470:	2001daa8 	.word	0x2001daa8
 8007474:	2001db4c 	.word	0x2001db4c
 8007478:	2001dac8 	.word	0x2001dac8
 800747c:	2001db08 	.word	0x2001db08
 8007480:	200005a0 	.word	0x200005a0
 8007484:	200005b4 	.word	0x200005b4

08007488 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800748c:	4802      	ldr	r0, [pc, #8]	; (8007498 <cppFlip100ns+0x10>)
 800748e:	f7fb f82d 	bl	80024ec <_ZN10LineSensor17storeSensorValuesEv>
}
 8007492:	bf00      	nop
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200002a8 	.word	0x200002a8

0800749c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <cppFlip10ms+0x48>)
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <cppFlip10ms+0x48>)
 80074aa:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 80074ac:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <cppFlip10ms+0x48>)
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d905      	bls.n	80074c0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80074b4:	480c      	ldr	r0, [pc, #48]	; (80074e8 <cppFlip10ms+0x4c>)
 80074b6:	f7fd ffa9 	bl	800540c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <cppFlip10ms+0x48>)
 80074bc:	2200      	movs	r2, #0
 80074be:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 80074c0:	480a      	ldr	r0, [pc, #40]	; (80074ec <cppFlip10ms+0x50>)
 80074c2:	f7fd f97f 	bl	80047c4 <_ZN5Motor20getLeftCounterPeriodEv>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4619      	mov	r1, r3
 80074ca:	4809      	ldr	r0, [pc, #36]	; (80074f0 <cppFlip10ms+0x54>)
 80074cc:	f7fc fede 	bl	800428c <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 80074d0:	4806      	ldr	r0, [pc, #24]	; (80074ec <cppFlip10ms+0x50>)
 80074d2:	f7fd f984 	bl	80047de <_ZN5Motor21getRightCounterPeriodEv>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4619      	mov	r1, r3
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <cppFlip10ms+0x54>)
 80074dc:	f7fc ff0f 	bl	80042fe <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20042228 	.word	0x20042228
 80074e8:	2002a8f4 	.word	0x2002a8f4
 80074ec:	200005b4 	.word	0x200005b4
 80074f0:	200005dc 	.word	0x200005dc
 80074f4:	00000000 	.word	0x00000000

080074f8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80074fe:	4baf      	ldr	r3, [pc, #700]	; (80077bc <cppLoop+0x2c4>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	f3bf 8f5b 	dmb	ish
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d015      	beq.n	8007546 <cppLoop+0x4e>
 800751a:	48a8      	ldr	r0, [pc, #672]	; (80077bc <cppLoop+0x2c4>)
 800751c:	f00c fddd 	bl	80140da <__cxa_guard_acquire>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <cppLoop+0x4e>
 8007530:	48a3      	ldr	r0, [pc, #652]	; (80077c0 <cppLoop+0x2c8>)
 8007532:	f7fc f920 	bl	8003776 <_ZN9LineTrace5getKpEv>
 8007536:	eef0 7a40 	vmov.f32	s15, s0
 800753a:	4ba2      	ldr	r3, [pc, #648]	; (80077c4 <cppLoop+0x2cc>)
 800753c:	edc3 7a00 	vstr	s15, [r3]
 8007540:	489e      	ldr	r0, [pc, #632]	; (80077bc <cppLoop+0x2c4>)
 8007542:	f00c fdd6 	bl	80140f2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007546:	4ba0      	ldr	r3, [pc, #640]	; (80077c8 <cppLoop+0x2d0>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f3bf 8f5b 	dmb	ish
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d015      	beq.n	800758e <cppLoop+0x96>
 8007562:	4899      	ldr	r0, [pc, #612]	; (80077c8 <cppLoop+0x2d0>)
 8007564:	f00c fdb9 	bl	80140da <__cxa_guard_acquire>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <cppLoop+0x96>
 8007578:	4891      	ldr	r0, [pc, #580]	; (80077c0 <cppLoop+0x2c8>)
 800757a:	f7fc f90b 	bl	8003794 <_ZN9LineTrace5getKiEv>
 800757e:	eef0 7a40 	vmov.f32	s15, s0
 8007582:	4b92      	ldr	r3, [pc, #584]	; (80077cc <cppLoop+0x2d4>)
 8007584:	edc3 7a00 	vstr	s15, [r3]
 8007588:	488f      	ldr	r0, [pc, #572]	; (80077c8 <cppLoop+0x2d0>)
 800758a:	f00c fdb2 	bl	80140f2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800758e:	4b90      	ldr	r3, [pc, #576]	; (80077d0 <cppLoop+0x2d8>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f3bf 8f5b 	dmb	ish
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	bf0c      	ite	eq
 80075a0:	2301      	moveq	r3, #1
 80075a2:	2300      	movne	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d015      	beq.n	80075d6 <cppLoop+0xde>
 80075aa:	4889      	ldr	r0, [pc, #548]	; (80077d0 <cppLoop+0x2d8>)
 80075ac:	f00c fd95 	bl	80140da <__cxa_guard_acquire>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <cppLoop+0xde>
 80075c0:	487f      	ldr	r0, [pc, #508]	; (80077c0 <cppLoop+0x2c8>)
 80075c2:	f7fc f8f6 	bl	80037b2 <_ZN9LineTrace5getKdEv>
 80075c6:	eef0 7a40 	vmov.f32	s15, s0
 80075ca:	4b82      	ldr	r3, [pc, #520]	; (80077d4 <cppLoop+0x2dc>)
 80075cc:	edc3 7a00 	vstr	s15, [r3]
 80075d0:	487f      	ldr	r0, [pc, #508]	; (80077d0 <cppLoop+0x2d8>)
 80075d2:	f00c fd8e 	bl	80140f2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 80075d6:	4b80      	ldr	r3, [pc, #512]	; (80077d8 <cppLoop+0x2e0>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f3bf 8f5b 	dmb	ish
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d015      	beq.n	800761e <cppLoop+0x126>
 80075f2:	4879      	ldr	r0, [pc, #484]	; (80077d8 <cppLoop+0x2e0>)
 80075f4:	f00c fd71 	bl	80140da <__cxa_guard_acquire>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <cppLoop+0x126>
 8007608:	486d      	ldr	r0, [pc, #436]	; (80077c0 <cppLoop+0x2c8>)
 800760a:	f7fc f8fa 	bl	8003802 <_ZN9LineTrace9getKpSlowEv>
 800760e:	eef0 7a40 	vmov.f32	s15, s0
 8007612:	4b72      	ldr	r3, [pc, #456]	; (80077dc <cppLoop+0x2e4>)
 8007614:	edc3 7a00 	vstr	s15, [r3]
 8007618:	486f      	ldr	r0, [pc, #444]	; (80077d8 <cppLoop+0x2e0>)
 800761a:	f00c fd6a 	bl	80140f2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 800761e:	4b70      	ldr	r3, [pc, #448]	; (80077e0 <cppLoop+0x2e8>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	f3bf 8f5b 	dmb	ish
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	bf0c      	ite	eq
 8007630:	2301      	moveq	r3, #1
 8007632:	2300      	movne	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d015      	beq.n	8007666 <cppLoop+0x16e>
 800763a:	4869      	ldr	r0, [pc, #420]	; (80077e0 <cppLoop+0x2e8>)
 800763c:	f00c fd4d 	bl	80140da <__cxa_guard_acquire>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <cppLoop+0x16e>
 8007650:	485b      	ldr	r0, [pc, #364]	; (80077c0 <cppLoop+0x2c8>)
 8007652:	f7fc f8e5 	bl	8003820 <_ZN9LineTrace9getKiSlowEv>
 8007656:	eef0 7a40 	vmov.f32	s15, s0
 800765a:	4b62      	ldr	r3, [pc, #392]	; (80077e4 <cppLoop+0x2ec>)
 800765c:	edc3 7a00 	vstr	s15, [r3]
 8007660:	485f      	ldr	r0, [pc, #380]	; (80077e0 <cppLoop+0x2e8>)
 8007662:	f00c fd46 	bl	80140f2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007666:	4b60      	ldr	r3, [pc, #384]	; (80077e8 <cppLoop+0x2f0>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f3bf 8f5b 	dmb	ish
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d015      	beq.n	80076ae <cppLoop+0x1b6>
 8007682:	4859      	ldr	r0, [pc, #356]	; (80077e8 <cppLoop+0x2f0>)
 8007684:	f00c fd29 	bl	80140da <__cxa_guard_acquire>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <cppLoop+0x1b6>
 8007698:	4849      	ldr	r0, [pc, #292]	; (80077c0 <cppLoop+0x2c8>)
 800769a:	f7fc f8d0 	bl	800383e <_ZN9LineTrace9getKdSlowEv>
 800769e:	eef0 7a40 	vmov.f32	s15, s0
 80076a2:	4b52      	ldr	r3, [pc, #328]	; (80077ec <cppLoop+0x2f4>)
 80076a4:	edc3 7a00 	vstr	s15, [r3]
 80076a8:	484f      	ldr	r0, [pc, #316]	; (80077e8 <cppLoop+0x2f0>)
 80076aa:	f00c fd22 	bl	80140f2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80076ae:	4b50      	ldr	r3, [pc, #320]	; (80077f0 <cppLoop+0x2f8>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f3bf 8f5b 	dmb	ish
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d015      	beq.n	80076f6 <cppLoop+0x1fe>
 80076ca:	4849      	ldr	r0, [pc, #292]	; (80077f0 <cppLoop+0x2f8>)
 80076cc:	f00c fd05 	bl	80140da <__cxa_guard_acquire>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bf14      	ite	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	2300      	moveq	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <cppLoop+0x1fe>
 80076e0:	4837      	ldr	r0, [pc, #220]	; (80077c0 <cppLoop+0x2c8>)
 80076e2:	f7fc f91a 	bl	800391a <_ZN9LineTrace17getTargetVelocityEv>
 80076e6:	eef0 7a40 	vmov.f32	s15, s0
 80076ea:	4b42      	ldr	r3, [pc, #264]	; (80077f4 <cppLoop+0x2fc>)
 80076ec:	edc3 7a00 	vstr	s15, [r3]
 80076f0:	483f      	ldr	r0, [pc, #252]	; (80077f0 <cppLoop+0x2f8>)
 80076f2:	f00c fcfe 	bl	80140f2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80076f6:	4b40      	ldr	r3, [pc, #256]	; (80077f8 <cppLoop+0x300>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f3bf 8f5b 	dmb	ish
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d015      	beq.n	800773e <cppLoop+0x246>
 8007712:	4839      	ldr	r0, [pc, #228]	; (80077f8 <cppLoop+0x300>)
 8007714:	f00c fce1 	bl	80140da <__cxa_guard_acquire>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <cppLoop+0x246>
 8007728:	4825      	ldr	r0, [pc, #148]	; (80077c0 <cppLoop+0x2c8>)
 800772a:	f7fc f906 	bl	800393a <_ZN9LineTrace14getMaxVelocityEv>
 800772e:	eef0 7a40 	vmov.f32	s15, s0
 8007732:	4b32      	ldr	r3, [pc, #200]	; (80077fc <cppLoop+0x304>)
 8007734:	edc3 7a00 	vstr	s15, [r3]
 8007738:	482f      	ldr	r0, [pc, #188]	; (80077f8 <cppLoop+0x300>)
 800773a:	f00c fcda 	bl	80140f2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800773e:	4b30      	ldr	r3, [pc, #192]	; (8007800 <cppLoop+0x308>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f3bf 8f5b 	dmb	ish
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d015      	beq.n	8007786 <cppLoop+0x28e>
 800775a:	4829      	ldr	r0, [pc, #164]	; (8007800 <cppLoop+0x308>)
 800775c:	f00c fcbd 	bl	80140da <__cxa_guard_acquire>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <cppLoop+0x28e>
 8007770:	4813      	ldr	r0, [pc, #76]	; (80077c0 <cppLoop+0x2c8>)
 8007772:	f7fc f8f2 	bl	800395a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007776:	eef0 7a40 	vmov.f32	s15, s0
 800777a:	4b22      	ldr	r3, [pc, #136]	; (8007804 <cppLoop+0x30c>)
 800777c:	edc3 7a00 	vstr	s15, [r3]
 8007780:	481f      	ldr	r0, [pc, #124]	; (8007800 <cppLoop+0x308>)
 8007782:	f00c fcb6 	bl	80140f2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007786:	4b20      	ldr	r3, [pc, #128]	; (8007808 <cppLoop+0x310>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f3bf 8f5b 	dmb	ish
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d03f      	beq.n	8007822 <cppLoop+0x32a>
 80077a2:	4819      	ldr	r0, [pc, #100]	; (8007808 <cppLoop+0x310>)
 80077a4:	f00c fc99 	bl	80140da <__cxa_guard_acquire>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d034      	beq.n	8007822 <cppLoop+0x32a>
 80077b8:	e028      	b.n	800780c <cppLoop+0x314>
 80077ba:	bf00      	nop
 80077bc:	20042238 	.word	0x20042238
 80077c0:	2001db4c 	.word	0x2001db4c
 80077c4:	20042234 	.word	0x20042234
 80077c8:	20042240 	.word	0x20042240
 80077cc:	2004223c 	.word	0x2004223c
 80077d0:	20042248 	.word	0x20042248
 80077d4:	20042244 	.word	0x20042244
 80077d8:	20042250 	.word	0x20042250
 80077dc:	2004224c 	.word	0x2004224c
 80077e0:	20042258 	.word	0x20042258
 80077e4:	20042254 	.word	0x20042254
 80077e8:	20042260 	.word	0x20042260
 80077ec:	2004225c 	.word	0x2004225c
 80077f0:	20042268 	.word	0x20042268
 80077f4:	20042264 	.word	0x20042264
 80077f8:	20042270 	.word	0x20042270
 80077fc:	2004226c 	.word	0x2004226c
 8007800:	20042278 	.word	0x20042278
 8007804:	20042274 	.word	0x20042274
 8007808:	20042280 	.word	0x20042280
 800780c:	48b6      	ldr	r0, [pc, #728]	; (8007ae8 <cppLoop+0x5f0>)
 800780e:	f7fc f8b4 	bl	800397a <_ZN9LineTrace14getMinVelocityEv>
 8007812:	eef0 7a40 	vmov.f32	s15, s0
 8007816:	4bb5      	ldr	r3, [pc, #724]	; (8007aec <cppLoop+0x5f4>)
 8007818:	edc3 7a00 	vstr	s15, [r3]
 800781c:	48b4      	ldr	r0, [pc, #720]	; (8007af0 <cppLoop+0x5f8>)
 800781e:	f00c fc68 	bl	80140f2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007822:	4bb4      	ldr	r3, [pc, #720]	; (8007af4 <cppLoop+0x5fc>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f3bf 8f5b 	dmb	ish
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d015      	beq.n	800786a <cppLoop+0x372>
 800783e:	48ad      	ldr	r0, [pc, #692]	; (8007af4 <cppLoop+0x5fc>)
 8007840:	f00c fc4b 	bl	80140da <__cxa_guard_acquire>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <cppLoop+0x372>
 8007854:	48a4      	ldr	r0, [pc, #656]	; (8007ae8 <cppLoop+0x5f0>)
 8007856:	f7fc f8a0 	bl	800399a <_ZN9LineTrace15getMinVelocity2Ev>
 800785a:	eef0 7a40 	vmov.f32	s15, s0
 800785e:	4ba6      	ldr	r3, [pc, #664]	; (8007af8 <cppLoop+0x600>)
 8007860:	edc3 7a00 	vstr	s15, [r3]
 8007864:	48a3      	ldr	r0, [pc, #652]	; (8007af4 <cppLoop+0x5fc>)
 8007866:	f00c fc44 	bl	80140f2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800786a:	4ba4      	ldr	r3, [pc, #656]	; (8007afc <cppLoop+0x604>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f3bf 8f5b 	dmb	ish
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d015      	beq.n	80078b2 <cppLoop+0x3ba>
 8007886:	489d      	ldr	r0, [pc, #628]	; (8007afc <cppLoop+0x604>)
 8007888:	f00c fc27 	bl	80140da <__cxa_guard_acquire>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <cppLoop+0x3ba>
 800789c:	4892      	ldr	r0, [pc, #584]	; (8007ae8 <cppLoop+0x5f0>)
 800789e:	f7fc f8c0 	bl	8003a22 <_ZN9LineTrace9getMaxAccEv>
 80078a2:	eef0 7a40 	vmov.f32	s15, s0
 80078a6:	4b96      	ldr	r3, [pc, #600]	; (8007b00 <cppLoop+0x608>)
 80078a8:	edc3 7a00 	vstr	s15, [r3]
 80078ac:	4893      	ldr	r0, [pc, #588]	; (8007afc <cppLoop+0x604>)
 80078ae:	f00c fc20 	bl	80140f2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80078b2:	4b94      	ldr	r3, [pc, #592]	; (8007b04 <cppLoop+0x60c>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f3bf 8f5b 	dmb	ish
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d015      	beq.n	80078fa <cppLoop+0x402>
 80078ce:	488d      	ldr	r0, [pc, #564]	; (8007b04 <cppLoop+0x60c>)
 80078d0:	f00c fc03 	bl	80140da <__cxa_guard_acquire>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bf14      	ite	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	2300      	moveq	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <cppLoop+0x402>
 80078e4:	4880      	ldr	r0, [pc, #512]	; (8007ae8 <cppLoop+0x5f0>)
 80078e6:	f7fc f8d2 	bl	8003a8e <_ZN9LineTrace9getMaxDecEv>
 80078ea:	eef0 7a40 	vmov.f32	s15, s0
 80078ee:	4b86      	ldr	r3, [pc, #536]	; (8007b08 <cppLoop+0x610>)
 80078f0:	edc3 7a00 	vstr	s15, [r3]
 80078f4:	4883      	ldr	r0, [pc, #524]	; (8007b04 <cppLoop+0x60c>)
 80078f6:	f00c fbfc 	bl	80140f2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 80078fa:	4b84      	ldr	r3, [pc, #528]	; (8007b0c <cppLoop+0x614>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f3bf 8f5b 	dmb	ish
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d015      	beq.n	8007942 <cppLoop+0x44a>
 8007916:	487d      	ldr	r0, [pc, #500]	; (8007b0c <cppLoop+0x614>)
 8007918:	f00c fbdf 	bl	80140da <__cxa_guard_acquire>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	bf14      	ite	ne
 8007922:	2301      	movne	r3, #1
 8007924:	2300      	moveq	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <cppLoop+0x44a>
 800792c:	486e      	ldr	r0, [pc, #440]	; (8007ae8 <cppLoop+0x5f0>)
 800792e:	f7fc f89c 	bl	8003a6a <_ZN9LineTrace10getMaxAcc2Ev>
 8007932:	eef0 7a40 	vmov.f32	s15, s0
 8007936:	4b76      	ldr	r3, [pc, #472]	; (8007b10 <cppLoop+0x618>)
 8007938:	edc3 7a00 	vstr	s15, [r3]
 800793c:	4873      	ldr	r0, [pc, #460]	; (8007b0c <cppLoop+0x614>)
 800793e:	f00c fbd8 	bl	80140f2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007942:	4b74      	ldr	r3, [pc, #464]	; (8007b14 <cppLoop+0x61c>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f3bf 8f5b 	dmb	ish
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	bf0c      	ite	eq
 8007954:	2301      	moveq	r3, #1
 8007956:	2300      	movne	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d015      	beq.n	800798a <cppLoop+0x492>
 800795e:	486d      	ldr	r0, [pc, #436]	; (8007b14 <cppLoop+0x61c>)
 8007960:	f00c fbbb 	bl	80140da <__cxa_guard_acquire>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	bf14      	ite	ne
 800796a:	2301      	movne	r3, #1
 800796c:	2300      	moveq	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <cppLoop+0x492>
 8007974:	485c      	ldr	r0, [pc, #368]	; (8007ae8 <cppLoop+0x5f0>)
 8007976:	f7fc f866 	bl	8003a46 <_ZN9LineTrace10getMaxDec2Ev>
 800797a:	eef0 7a40 	vmov.f32	s15, s0
 800797e:	4b66      	ldr	r3, [pc, #408]	; (8007b18 <cppLoop+0x620>)
 8007980:	edc3 7a00 	vstr	s15, [r3]
 8007984:	4863      	ldr	r0, [pc, #396]	; (8007b14 <cppLoop+0x61c>)
 8007986:	f00c fbb4 	bl	80140f2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800798a:	4864      	ldr	r0, [pc, #400]	; (8007b1c <cppLoop+0x624>)
 800798c:	f7fd f9c6 	bl	8004d1c <_ZN12RotarySwitch8getValueEv>
 8007990:	4603      	mov	r3, r0
 8007992:	2b0f      	cmp	r3, #15
 8007994:	f201 8572 	bhi.w	800947c <cppLoop+0x1f84>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <cppLoop+0x4a8>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079e1 	.word	0x080079e1
 80079a4:	08007d65 	.word	0x08007d65
 80079a8:	08007e81 	.word	0x08007e81
 80079ac:	08007fd3 	.word	0x08007fd3
 80079b0:	080080cb 	.word	0x080080cb
 80079b4:	08008361 	.word	0x08008361
 80079b8:	08008499 	.word	0x08008499
 80079bc:	0800871d 	.word	0x0800871d
 80079c0:	08008967 	.word	0x08008967
 80079c4:	08008bf7 	.word	0x08008bf7
 80079c8:	08008cb3 	.word	0x08008cb3
 80079cc:	08008da9 	.word	0x08008da9
 80079d0:	08008e2f 	.word	0x08008e2f
 80079d4:	08008ef5 	.word	0x08008ef5
 80079d8:	08008fd9 	.word	0x08008fd9
 80079dc:	08009111 	.word	0x08009111
	case 0:
		led.fullColor('W');
 80079e0:	2157      	movs	r1, #87	; 0x57
 80079e2:	484f      	ldr	r0, [pc, #316]	; (8007b20 <cppLoop+0x628>)
 80079e4:	f7fa fc16 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 80079e8:	f7f9 fb5a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80079ec:	2100      	movs	r1, #0
 80079ee:	2000      	movs	r0, #0
 80079f0:	f7f9 fb66 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 80079f4:	483c      	ldr	r0, [pc, #240]	; (8007ae8 <cppLoop+0x5f0>)
 80079f6:	f7fb ff04 	bl	8003802 <_ZN9LineTrace9getKpSlowEv>
 80079fa:	eeb0 7a40 	vmov.f32	s14, s0
 80079fe:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007b24 <cppLoop+0x62c>
 8007a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a06:	eeb0 0a67 	vmov.f32	s0, s15
 8007a0a:	f7fb f82f 	bl	8002a6c <_ZSt3absf>
 8007a0e:	ee10 3a10 	vmov	r3, s0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7f8 fdb0 	bl	8000578 <__aeabi_f2d>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4623      	mov	r3, r4
 8007a20:	4841      	ldr	r0, [pc, #260]	; (8007b28 <cppLoop+0x630>)
 8007a22:	f7f9 fb77 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a26:	2101      	movs	r1, #1
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7f9 fb49 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 8007a2e:	482e      	ldr	r0, [pc, #184]	; (8007ae8 <cppLoop+0x5f0>)
 8007a30:	f7fb fef6 	bl	8003820 <_ZN9LineTrace9getKiSlowEv>
 8007a34:	eeb0 7a40 	vmov.f32	s14, s0
 8007a38:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8007b2c <cppLoop+0x634>
 8007a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a40:	eeb0 0a67 	vmov.f32	s0, s15
 8007a44:	f7fb f812 	bl	8002a6c <_ZSt3absf>
 8007a48:	ee10 3a10 	vmov	r3, s0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7f8 fd93 	bl	8000578 <__aeabi_f2d>
 8007a52:	4605      	mov	r5, r0
 8007a54:	460e      	mov	r6, r1
 8007a56:	4824      	ldr	r0, [pc, #144]	; (8007ae8 <cppLoop+0x5f0>)
 8007a58:	f7fb fef1 	bl	800383e <_ZN9LineTrace9getKdSlowEv>
 8007a5c:	eeb0 7a40 	vmov.f32	s14, s0
 8007a60:	eddf 7a33 	vldr	s15, [pc, #204]	; 8007b30 <cppLoop+0x638>
 8007a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a68:	eeb0 0a67 	vmov.f32	s0, s15
 8007a6c:	f7fa fffe 	bl	8002a6c <_ZSt3absf>
 8007a70:	ee10 3a10 	vmov	r3, s0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7f8 fd7f 	bl	8000578 <__aeabi_f2d>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	e9cd 3400 	strd	r3, r4, [sp]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4633      	mov	r3, r6
 8007a86:	482b      	ldr	r0, [pc, #172]	; (8007b34 <cppLoop+0x63c>)
 8007a88:	f7f9 fb44 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007a8c:	482a      	ldr	r0, [pc, #168]	; (8007b38 <cppLoop+0x640>)
 8007a8e:	f7fa fb5d 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	bf0c      	ite	eq
 8007a98:	2301      	moveq	r3, #1
 8007a9a:	2300      	movne	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04e      	beq.n	8007b40 <cppLoop+0x648>
			led.LR(-1, 1);
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa8:	481d      	ldr	r0, [pc, #116]	; (8007b20 <cppLoop+0x628>)
 8007aaa:	f7fa fc6f 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007aae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ab2:	f001 fe2d 	bl	8009710 <HAL_Delay>

			selector++;
 8007ab6:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <cppLoop+0x644>)
 8007ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3301      	adds	r3, #1
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	b21a      	sxth	r2, r3
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <cppLoop+0x644>)
 8007ac6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007ac8:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <cppLoop+0x644>)
 8007aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	dd02      	ble.n	8007ad8 <cppLoop+0x5e0>
 8007ad2:	4b1a      	ldr	r3, [pc, #104]	; (8007b3c <cppLoop+0x644>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f04f 31ff 	mov.w	r1, #4294967295
 8007ade:	4810      	ldr	r0, [pc, #64]	; (8007b20 <cppLoop+0x628>)
 8007ae0:	f7fa fc54 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8007ae4:	f001 bccc 	b.w	8009480 <cppLoop+0x1f88>
 8007ae8:	2001db4c 	.word	0x2001db4c
 8007aec:	2004227c 	.word	0x2004227c
 8007af0:	20042280 	.word	0x20042280
 8007af4:	20042288 	.word	0x20042288
 8007af8:	20042284 	.word	0x20042284
 8007afc:	20042290 	.word	0x20042290
 8007b00:	2004228c 	.word	0x2004228c
 8007b04:	20042298 	.word	0x20042298
 8007b08:	20042294 	.word	0x20042294
 8007b0c:	200422a0 	.word	0x200422a0
 8007b10:	2004229c 	.word	0x2004229c
 8007b14:	200422a8 	.word	0x200422a8
 8007b18:	200422a4 	.word	0x200422a4
 8007b1c:	200005b0 	.word	0x200005b0
 8007b20:	200005b8 	.word	0x200005b8
 8007b24:	447a0000 	.word	0x447a0000
 8007b28:	080197e8 	.word	0x080197e8
 8007b2c:	42c80000 	.word	0x42c80000
 8007b30:	461c4000 	.word	0x461c4000
 8007b34:	080197f4 	.word	0x080197f4
 8007b38:	200005ac 	.word	0x200005ac
 8007b3c:	2004222a 	.word	0x2004222a
		else if(joy_stick.getValue() == JOY_R){
 8007b40:	48bd      	ldr	r0, [pc, #756]	; (8007e38 <cppLoop+0x940>)
 8007b42:	f7fa fb03 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d059      	beq.n	8007c0a <cppLoop+0x712>
			led.LR(-1, 1);
 8007b56:	2201      	movs	r2, #1
 8007b58:	f04f 31ff 	mov.w	r1, #4294967295
 8007b5c:	48b7      	ldr	r0, [pc, #732]	; (8007e3c <cppLoop+0x944>)
 8007b5e:	f7fa fc15 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b62:	2064      	movs	r0, #100	; 0x64
 8007b64:	f001 fdd4 	bl	8009710 <HAL_Delay>
			if(selector == 0){
 8007b68:	4bb5      	ldr	r3, [pc, #724]	; (8007e40 <cppLoop+0x948>)
 8007b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d113      	bne.n	8007b9a <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 8007b72:	4bb4      	ldr	r3, [pc, #720]	; (8007e44 <cppLoop+0x94c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7f8 fcfe 	bl	8000578 <__aeabi_f2d>
 8007b7c:	a3a8      	add	r3, pc, #672	; (adr r3, 8007e20 <cppLoop+0x928>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fb9b 	bl	80002bc <__adddf3>
 8007b86:	4603      	mov	r3, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	f7f9 f843 	bl	8000c18 <__aeabi_d2f>
 8007b92:	4602      	mov	r2, r0
 8007b94:	4bab      	ldr	r3, [pc, #684]	; (8007e44 <cppLoop+0x94c>)
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e02b      	b.n	8007bf2 <cppLoop+0x6fa>
			else if(selector == 1){
 8007b9a:	4ba9      	ldr	r3, [pc, #676]	; (8007e40 <cppLoop+0x948>)
 8007b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d113      	bne.n	8007bcc <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 8007ba4:	4ba8      	ldr	r3, [pc, #672]	; (8007e48 <cppLoop+0x950>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7f8 fce5 	bl	8000578 <__aeabi_f2d>
 8007bae:	a39e      	add	r3, pc, #632	; (adr r3, 8007e28 <cppLoop+0x930>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fb82 	bl	80002bc <__adddf3>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f7f9 f82a 	bl	8000c18 <__aeabi_d2f>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4ba0      	ldr	r3, [pc, #640]	; (8007e48 <cppLoop+0x950>)
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e012      	b.n	8007bf2 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 8007bcc:	4b9f      	ldr	r3, [pc, #636]	; (8007e4c <cppLoop+0x954>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f8 fcd1 	bl	8000578 <__aeabi_f2d>
 8007bd6:	a396      	add	r3, pc, #600	; (adr r3, 8007e30 <cppLoop+0x938>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fb6e 	bl	80002bc <__adddf3>
 8007be0:	4603      	mov	r3, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	4618      	mov	r0, r3
 8007be6:	4621      	mov	r1, r4
 8007be8:	f7f9 f816 	bl	8000c18 <__aeabi_d2f>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b97      	ldr	r3, [pc, #604]	; (8007e4c <cppLoop+0x954>)
 8007bf0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007bf2:	2152      	movs	r1, #82	; 0x52
 8007bf4:	4891      	ldr	r0, [pc, #580]	; (8007e3c <cppLoop+0x944>)
 8007bf6:	f7fa fb0d 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8007c00:	488e      	ldr	r0, [pc, #568]	; (8007e3c <cppLoop+0x944>)
 8007c02:	f7fa fbc3 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007c06:	f001 bc3b 	b.w	8009480 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_L){
 8007c0a:	488b      	ldr	r0, [pc, #556]	; (8007e38 <cppLoop+0x940>)
 8007c0c:	f7fa fa9e 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d059      	beq.n	8007cd4 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8007c20:	2201      	movs	r2, #1
 8007c22:	f04f 31ff 	mov.w	r1, #4294967295
 8007c26:	4885      	ldr	r0, [pc, #532]	; (8007e3c <cppLoop+0x944>)
 8007c28:	f7fa fbb0 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c2c:	2064      	movs	r0, #100	; 0x64
 8007c2e:	f001 fd6f 	bl	8009710 <HAL_Delay>
			if(selector == 0){
 8007c32:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <cppLoop+0x948>)
 8007c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d113      	bne.n	8007c64 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 8007c3c:	4b81      	ldr	r3, [pc, #516]	; (8007e44 <cppLoop+0x94c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7f8 fc99 	bl	8000578 <__aeabi_f2d>
 8007c46:	a376      	add	r3, pc, #472	; (adr r3, 8007e20 <cppLoop+0x928>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fb34 	bl	80002b8 <__aeabi_dsub>
 8007c50:	4603      	mov	r3, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	4618      	mov	r0, r3
 8007c56:	4621      	mov	r1, r4
 8007c58:	f7f8 ffde 	bl	8000c18 <__aeabi_d2f>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	4b79      	ldr	r3, [pc, #484]	; (8007e44 <cppLoop+0x94c>)
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	e02b      	b.n	8007cbc <cppLoop+0x7c4>
			else if(selector == 1){
 8007c64:	4b76      	ldr	r3, [pc, #472]	; (8007e40 <cppLoop+0x948>)
 8007c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d113      	bne.n	8007c96 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 8007c6e:	4b76      	ldr	r3, [pc, #472]	; (8007e48 <cppLoop+0x950>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f8 fc80 	bl	8000578 <__aeabi_f2d>
 8007c78:	a36b      	add	r3, pc, #428	; (adr r3, 8007e28 <cppLoop+0x930>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fb1b 	bl	80002b8 <__aeabi_dsub>
 8007c82:	4603      	mov	r3, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	4618      	mov	r0, r3
 8007c88:	4621      	mov	r1, r4
 8007c8a:	f7f8 ffc5 	bl	8000c18 <__aeabi_d2f>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4b6d      	ldr	r3, [pc, #436]	; (8007e48 <cppLoop+0x950>)
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e012      	b.n	8007cbc <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8007c96:	4b6d      	ldr	r3, [pc, #436]	; (8007e4c <cppLoop+0x954>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7f8 fc6c 	bl	8000578 <__aeabi_f2d>
 8007ca0:	a363      	add	r3, pc, #396	; (adr r3, 8007e30 <cppLoop+0x938>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fb07 	bl	80002b8 <__aeabi_dsub>
 8007caa:	4603      	mov	r3, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	4618      	mov	r0, r3
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f7f8 ffb1 	bl	8000c18 <__aeabi_d2f>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	4b64      	ldr	r3, [pc, #400]	; (8007e4c <cppLoop+0x954>)
 8007cba:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007cbc:	2152      	movs	r1, #82	; 0x52
 8007cbe:	485f      	ldr	r0, [pc, #380]	; (8007e3c <cppLoop+0x944>)
 8007cc0:	f7fa faa8 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8007cca:	485c      	ldr	r0, [pc, #368]	; (8007e3c <cppLoop+0x944>)
 8007ccc:	f7fa fb5e 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007cd0:	f001 bbd6 	b.w	8009480 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_C){
 8007cd4:	4858      	ldr	r0, [pc, #352]	; (8007e38 <cppLoop+0x940>)
 8007cd6:	f7fa fa39 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	bf0c      	ite	eq
 8007ce0:	2301      	moveq	r3, #1
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f001 83ca 	beq.w	8009480 <cppLoop+0x1f88>
			led.LR(-1, 1);
 8007cec:	2201      	movs	r2, #1
 8007cee:	f04f 31ff 	mov.w	r1, #4294967295
 8007cf2:	4852      	ldr	r0, [pc, #328]	; (8007e3c <cppLoop+0x944>)
 8007cf4:	f7fa fb4a 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007cf8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007cfc:	f001 fd08 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8007d00:	2300      	movs	r3, #0
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	4b4f      	ldr	r3, [pc, #316]	; (8007e44 <cppLoop+0x94c>)
 8007d06:	2201      	movs	r2, #1
 8007d08:	4951      	ldr	r1, [pc, #324]	; (8007e50 <cppLoop+0x958>)
 8007d0a:	4852      	ldr	r0, [pc, #328]	; (8007e54 <cppLoop+0x95c>)
 8007d0c:	f7f9 fd98 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4b4c      	ldr	r3, [pc, #304]	; (8007e48 <cppLoop+0x950>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	494f      	ldr	r1, [pc, #316]	; (8007e58 <cppLoop+0x960>)
 8007d1a:	484e      	ldr	r0, [pc, #312]	; (8007e54 <cppLoop+0x95c>)
 8007d1c:	f7f9 fd90 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8007d20:	2300      	movs	r3, #0
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	4b49      	ldr	r3, [pc, #292]	; (8007e4c <cppLoop+0x954>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	494c      	ldr	r1, [pc, #304]	; (8007e5c <cppLoop+0x964>)
 8007d2a:	484a      	ldr	r0, [pc, #296]	; (8007e54 <cppLoop+0x95c>)
 8007d2c:	f7f9 fd88 	bl	8001840 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8007d30:	4b44      	ldr	r3, [pc, #272]	; (8007e44 <cppLoop+0x94c>)
 8007d32:	edd3 7a00 	vldr	s15, [r3]
 8007d36:	4b44      	ldr	r3, [pc, #272]	; (8007e48 <cppLoop+0x950>)
 8007d38:	ed93 7a00 	vldr	s14, [r3]
 8007d3c:	4b43      	ldr	r3, [pc, #268]	; (8007e4c <cppLoop+0x954>)
 8007d3e:	edd3 6a00 	vldr	s13, [r3]
 8007d42:	eeb0 1a66 	vmov.f32	s2, s13
 8007d46:	eef0 0a47 	vmov.f32	s1, s14
 8007d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d4e:	4844      	ldr	r0, [pc, #272]	; (8007e60 <cppLoop+0x968>)
 8007d50:	f7fb fd3e 	bl	80037d0 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8007d54:	2200      	movs	r2, #0
 8007d56:	f04f 31ff 	mov.w	r1, #4294967295
 8007d5a:	4838      	ldr	r0, [pc, #224]	; (8007e3c <cppLoop+0x944>)
 8007d5c:	f7fa fb16 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007d60:	f001 bb8e 	b.w	8009480 <cppLoop+0x1f88>

	case 1:
		led.fullColor('C');
 8007d64:	2143      	movs	r1, #67	; 0x43
 8007d66:	4835      	ldr	r0, [pc, #212]	; (8007e3c <cppLoop+0x944>)
 8007d68:	f7fa fa54 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d6c:	f7f9 f998 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d70:	2100      	movs	r1, #0
 8007d72:	2000      	movs	r0, #0
 8007d74:	f7f9 f9a4 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007d78:	483a      	ldr	r0, [pc, #232]	; (8007e64 <cppLoop+0x96c>)
 8007d7a:	f7f9 f9cb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d7e:	2101      	movs	r1, #1
 8007d80:	2000      	movs	r0, #0
 8007d82:	f7f9 f99d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007d86:	4b38      	ldr	r3, [pc, #224]	; (8007e68 <cppLoop+0x970>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f8 fbf4 	bl	8000578 <__aeabi_f2d>
 8007d90:	4603      	mov	r3, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	461a      	mov	r2, r3
 8007d96:	4623      	mov	r3, r4
 8007d98:	4834      	ldr	r0, [pc, #208]	; (8007e6c <cppLoop+0x974>)
 8007d9a:	f7f9 f9bb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007d9e:	4826      	ldr	r0, [pc, #152]	; (8007e38 <cppLoop+0x940>)
 8007da0:	f7fa f9d4 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	bf0c      	ite	eq
 8007daa:	2301      	moveq	r3, #1
 8007dac:	2300      	movne	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f001 8367 	beq.w	8009484 <cppLoop+0x1f8c>
			HAL_Delay(500);
 8007db6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dba:	f001 fca9 	bl	8009710 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007dbe:	4b2a      	ldr	r3, [pc, #168]	; (8007e68 <cppLoop+0x970>)
 8007dc0:	edd3 7a00 	vldr	s15, [r3]
 8007dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc8:	4825      	ldr	r0, [pc, #148]	; (8007e60 <cppLoop+0x968>)
 8007dca:	f7fb fd56 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	4819      	ldr	r0, [pc, #100]	; (8007e3c <cppLoop+0x944>)
 8007dd6:	f7fa fad9 	bl	800238c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(0.35, 0.35, 0.35, 0.35);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 8007dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dde:	f001 fc97 	bl	8009710 <HAL_Delay>
			logger.start();
 8007de2:	4823      	ldr	r0, [pc, #140]	; (8007e70 <cppLoop+0x978>)
 8007de4:	f7fc fbe9 	bl	80045ba <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8007de8:	2100      	movs	r1, #0
 8007dea:	481d      	ldr	r0, [pc, #116]	; (8007e60 <cppLoop+0x968>)
 8007dec:	f7fb fef0 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007df0:	481b      	ldr	r0, [pc, #108]	; (8007e60 <cppLoop+0x968>)
 8007df2:	f7fb ff2b 	bl	8003c4c <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 8007df6:	481e      	ldr	r0, [pc, #120]	; (8007e70 <cppLoop+0x978>)
 8007df8:	f7fc fbef 	bl	80045da <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <cppLoop+0x97c>)
 8007dfe:	491e      	ldr	r1, [pc, #120]	; (8007e78 <cppLoop+0x980>)
 8007e00:	481b      	ldr	r0, [pc, #108]	; (8007e70 <cppLoop+0x978>)
 8007e02:	f7fc fae5 	bl	80043d0 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 8007e06:	4a1d      	ldr	r2, [pc, #116]	; (8007e7c <cppLoop+0x984>)
 8007e08:	491b      	ldr	r1, [pc, #108]	; (8007e78 <cppLoop+0x980>)
 8007e0a:	4819      	ldr	r0, [pc, #100]	; (8007e70 <cppLoop+0x978>)
 8007e0c:	f7fc faf6 	bl	80043fc <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295
 8007e14:	2100      	movs	r1, #0
 8007e16:	4809      	ldr	r0, [pc, #36]	; (8007e3c <cppLoop+0x944>)
 8007e18:	f7fa fab8 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 8007e1c:	f001 bb32 	b.w	8009484 <cppLoop+0x1f8c>
 8007e20:	88e368f1 	.word	0x88e368f1
 8007e24:	3ee4f8b5 	.word	0x3ee4f8b5
 8007e28:	eb1c432d 	.word	0xeb1c432d
 8007e2c:	3f1a36e2 	.word	0x3f1a36e2
 8007e30:	a0b5ed8d 	.word	0xa0b5ed8d
 8007e34:	3eb0c6f7 	.word	0x3eb0c6f7
 8007e38:	200005ac 	.word	0x200005ac
 8007e3c:	200005b8 	.word	0x200005b8
 8007e40:	2004222a 	.word	0x2004222a
 8007e44:	2004224c 	.word	0x2004224c
 8007e48:	20042254 	.word	0x20042254
 8007e4c:	2004225c 	.word	0x2004225c
 8007e50:	08019804 	.word	0x08019804
 8007e54:	08019810 	.word	0x08019810
 8007e58:	08019818 	.word	0x08019818
 8007e5c:	08019824 	.word	0x08019824
 8007e60:	2001db4c 	.word	0x2001db4c
 8007e64:	08019830 	.word	0x08019830
 8007e68:	20042264 	.word	0x20042264
 8007e6c:	0801983c 	.word	0x0801983c
 8007e70:	200005dc 	.word	0x200005dc
 8007e74:	08019848 	.word	0x08019848
 8007e78:	08019854 	.word	0x08019854
 8007e7c:	08019860 	.word	0x08019860

	case 2:
		led.fullColor('B');
 8007e80:	2142      	movs	r1, #66	; 0x42
 8007e82:	48c1      	ldr	r0, [pc, #772]	; (8008188 <cppLoop+0xc90>)
 8007e84:	f7fa f9c6 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e88:	f7f9 f90a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f7f9 f916 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007e94:	48bd      	ldr	r0, [pc, #756]	; (800818c <cppLoop+0xc94>)
 8007e96:	f7f9 f93d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f7f9 f90f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007ea2:	4bbb      	ldr	r3, [pc, #748]	; (8008190 <cppLoop+0xc98>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f8 fb66 	bl	8000578 <__aeabi_f2d>
 8007eac:	4603      	mov	r3, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	48b7      	ldr	r0, [pc, #732]	; (8008194 <cppLoop+0xc9c>)
 8007eb6:	f7f9 f92d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007eba:	48b7      	ldr	r0, [pc, #732]	; (8008198 <cppLoop+0xca0>)
 8007ebc:	f7fa f946 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	bf0c      	ite	eq
 8007ec6:	2301      	moveq	r3, #1
 8007ec8:	2300      	movne	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d023      	beq.n	8007f18 <cppLoop+0xa20>
			led.LR(-1, 1);
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed6:	48ac      	ldr	r0, [pc, #688]	; (8008188 <cppLoop+0xc90>)
 8007ed8:	f7fa fa58 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007edc:	2064      	movs	r0, #100	; 0x64
 8007ede:	f001 fc17 	bl	8009710 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007ee2:	4bab      	ldr	r3, [pc, #684]	; (8008190 <cppLoop+0xc98>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7f8 fb46 	bl	8000578 <__aeabi_f2d>
 8007eec:	a3a4      	add	r3, pc, #656	; (adr r3, 8008180 <cppLoop+0xc88>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	f7f8 f9e3 	bl	80002bc <__adddf3>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	4618      	mov	r0, r3
 8007efc:	4621      	mov	r1, r4
 8007efe:	f7f8 fe8b 	bl	8000c18 <__aeabi_d2f>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4ba2      	ldr	r3, [pc, #648]	; (8008190 <cppLoop+0xc98>)
 8007f06:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f0e:	489e      	ldr	r0, [pc, #632]	; (8008188 <cppLoop+0xc90>)
 8007f10:	f7fa fa3c 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007f14:	f001 bab8 	b.w	8009488 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_L){
 8007f18:	489f      	ldr	r0, [pc, #636]	; (8008198 <cppLoop+0xca0>)
 8007f1a:	f7fa f917 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	bf0c      	ite	eq
 8007f24:	2301      	moveq	r3, #1
 8007f26:	2300      	movne	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d023      	beq.n	8007f76 <cppLoop+0xa7e>
			led.LR(-1, 1);
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f04f 31ff 	mov.w	r1, #4294967295
 8007f34:	4894      	ldr	r0, [pc, #592]	; (8008188 <cppLoop+0xc90>)
 8007f36:	f7fa fa29 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f3a:	2064      	movs	r0, #100	; 0x64
 8007f3c:	f001 fbe8 	bl	8009710 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007f40:	4b93      	ldr	r3, [pc, #588]	; (8008190 <cppLoop+0xc98>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f8 fb17 	bl	8000578 <__aeabi_f2d>
 8007f4a:	a38d      	add	r3, pc, #564	; (adr r3, 8008180 <cppLoop+0xc88>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f9b2 	bl	80002b8 <__aeabi_dsub>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f7f8 fe5c 	bl	8000c18 <__aeabi_d2f>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4b8b      	ldr	r3, [pc, #556]	; (8008190 <cppLoop+0xc98>)
 8007f64:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007f66:	2200      	movs	r2, #0
 8007f68:	f04f 31ff 	mov.w	r1, #4294967295
 8007f6c:	4886      	ldr	r0, [pc, #536]	; (8008188 <cppLoop+0xc90>)
 8007f6e:	f7fa fa0d 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007f72:	f001 ba89 	b.w	8009488 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_C){
 8007f76:	4888      	ldr	r0, [pc, #544]	; (8008198 <cppLoop+0xca0>)
 8007f78:	f7fa f8e8 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	bf0c      	ite	eq
 8007f82:	2301      	moveq	r3, #1
 8007f84:	2300      	movne	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f001 827d 	beq.w	8009488 <cppLoop+0x1f90>
			led.LR(-1, 1);
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f04f 31ff 	mov.w	r1, #4294967295
 8007f94:	487c      	ldr	r0, [pc, #496]	; (8008188 <cppLoop+0xc90>)
 8007f96:	f7fa f9f9 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f9e:	f001 fbb7 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4b7a      	ldr	r3, [pc, #488]	; (8008190 <cppLoop+0xc98>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	497c      	ldr	r1, [pc, #496]	; (800819c <cppLoop+0xca4>)
 8007fac:	487c      	ldr	r0, [pc, #496]	; (80081a0 <cppLoop+0xca8>)
 8007fae:	f7f9 fc47 	bl	8001840 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007fb2:	4b77      	ldr	r3, [pc, #476]	; (8008190 <cppLoop+0xc98>)
 8007fb4:	edd3 7a00 	vldr	s15, [r3]
 8007fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fbc:	4879      	ldr	r0, [pc, #484]	; (80081a4 <cppLoop+0xcac>)
 8007fbe:	f7fb fc5c 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc8:	486f      	ldr	r0, [pc, #444]	; (8008188 <cppLoop+0xc90>)
 8007fca:	f7fa f9df 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007fce:	f001 ba5b 	b.w	8009488 <cppLoop+0x1f90>

	case 3:
		led.fullColor('Y');
 8007fd2:	2159      	movs	r1, #89	; 0x59
 8007fd4:	486c      	ldr	r0, [pc, #432]	; (8008188 <cppLoop+0xc90>)
 8007fd6:	f7fa f91d 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fda:	f7f9 f861 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fde:	2100      	movs	r1, #0
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f7f9 f86d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007fe6:	4b70      	ldr	r3, [pc, #448]	; (80081a8 <cppLoop+0xcb0>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7f8 fac4 	bl	8000578 <__aeabi_f2d>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	486c      	ldr	r0, [pc, #432]	; (80081ac <cppLoop+0xcb4>)
 8007ffa:	f7f9 f88b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ffe:	2101      	movs	r1, #1
 8008000:	2000      	movs	r0, #0
 8008002:	f7f9 f85d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008006:	4b6a      	ldr	r3, [pc, #424]	; (80081b0 <cppLoop+0xcb8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f7f8 fab4 	bl	8000578 <__aeabi_f2d>
 8008010:	4603      	mov	r3, r0
 8008012:	460c      	mov	r4, r1
 8008014:	461a      	mov	r2, r3
 8008016:	4623      	mov	r3, r4
 8008018:	4866      	ldr	r0, [pc, #408]	; (80081b4 <cppLoop+0xcbc>)
 800801a:	f7f9 f87b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800801e:	485e      	ldr	r0, [pc, #376]	; (8008198 <cppLoop+0xca0>)
 8008020:	f7fa f894 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008024:	4603      	mov	r3, r0
 8008026:	2b02      	cmp	r3, #2
 8008028:	bf0c      	ite	eq
 800802a:	2301      	moveq	r3, #1
 800802c:	2300      	movne	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	f001 822b 	beq.w	800948c <cppLoop+0x1f94>
			HAL_Delay(500);
 8008036:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800803a:	f001 fb69 	bl	8009710 <HAL_Delay>

			led.LR(1, -1);
 800803e:	f04f 32ff 	mov.w	r2, #4294967295
 8008042:	2101      	movs	r1, #1
 8008044:	4850      	ldr	r0, [pc, #320]	; (8008188 <cppLoop+0xc90>)
 8008046:	f7fa f9a1 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800804a:	2101      	movs	r1, #1
 800804c:	4855      	ldr	r0, [pc, #340]	; (80081a4 <cppLoop+0xcac>)
 800804e:	f7fb fdbf 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008052:	4b57      	ldr	r3, [pc, #348]	; (80081b0 <cppLoop+0xcb8>)
 8008054:	edd3 7a00 	vldr	s15, [r3]
 8008058:	eeb0 0a67 	vmov.f32	s0, s15
 800805c:	4851      	ldr	r0, [pc, #324]	; (80081a4 <cppLoop+0xcac>)
 800805e:	f7fb fc0c 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008062:	4b51      	ldr	r3, [pc, #324]	; (80081a8 <cppLoop+0xcb0>)
 8008064:	edd3 7a00 	vldr	s15, [r3]
 8008068:	eeb0 0a67 	vmov.f32	s0, s15
 800806c:	484d      	ldr	r0, [pc, #308]	; (80081a4 <cppLoop+0xcac>)
 800806e:	f7fb fc14 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008072:	4b4f      	ldr	r3, [pc, #316]	; (80081b0 <cppLoop+0xcb8>)
 8008074:	edd3 7a00 	vldr	s15, [r3]
 8008078:	eeb0 0a67 	vmov.f32	s0, s15
 800807c:	4849      	ldr	r0, [pc, #292]	; (80081a4 <cppLoop+0xcac>)
 800807e:	f7fb fc2c 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008082:	4848      	ldr	r0, [pc, #288]	; (80081a4 <cppLoop+0xcac>)
 8008084:	f7fb fecc 	bl	8003e20 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(3000);
 8008088:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800808c:	f001 fb40 	bl	8009710 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008090:	eddf 1a49 	vldr	s3, [pc, #292]	; 80081b8 <cppLoop+0xcc0>
 8008094:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80081b8 <cppLoop+0xcc0>
 8008098:	eddf 0a47 	vldr	s1, [pc, #284]	; 80081b8 <cppLoop+0xcc0>
 800809c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80081b8 <cppLoop+0xcc0>
 80080a0:	4846      	ldr	r0, [pc, #280]	; (80081bc <cppLoop+0xcc4>)
 80080a2:	f7f9 f8d5 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80080a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080aa:	f001 fb31 	bl	8009710 <HAL_Delay>

			line_trace.running();
 80080ae:	483d      	ldr	r0, [pc, #244]	; (80081a4 <cppLoop+0xcac>)
 80080b0:	f7fb fdcc 	bl	8003c4c <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80080b4:	4841      	ldr	r0, [pc, #260]	; (80081bc <cppLoop+0xcc4>)
 80080b6:	f7f9 f965 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	2100      	movs	r1, #0
 80080c0:	4831      	ldr	r0, [pc, #196]	; (8008188 <cppLoop+0xc90>)
 80080c2:	f7fa f963 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 80080c6:	f001 b9e1 	b.w	800948c <cppLoop+0x1f94>

	case 4:
		led.fullColor('G');
 80080ca:	2147      	movs	r1, #71	; 0x47
 80080cc:	482e      	ldr	r0, [pc, #184]	; (8008188 <cppLoop+0xc90>)
 80080ce:	f7fa f8a1 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 80080d2:	f7f8 ffe5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080d6:	2100      	movs	r1, #0
 80080d8:	2000      	movs	r0, #0
 80080da:	f7f8 fff1 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80080de:	4831      	ldr	r0, [pc, #196]	; (80081a4 <cppLoop+0xcac>)
 80080e0:	f7fb fc2b 	bl	800393a <_ZN9LineTrace14getMaxVelocityEv>
 80080e4:	ee10 3a10 	vmov	r3, s0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7f8 fa45 	bl	8000578 <__aeabi_f2d>
 80080ee:	4603      	mov	r3, r0
 80080f0:	460c      	mov	r4, r1
 80080f2:	461a      	mov	r2, r3
 80080f4:	4623      	mov	r3, r4
 80080f6:	482d      	ldr	r0, [pc, #180]	; (80081ac <cppLoop+0xcb4>)
 80080f8:	f7f9 f80c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080fc:	2101      	movs	r1, #1
 80080fe:	2000      	movs	r0, #0
 8008100:	f7f8 ffde 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008104:	4827      	ldr	r0, [pc, #156]	; (80081a4 <cppLoop+0xcac>)
 8008106:	f7fb fc38 	bl	800397a <_ZN9LineTrace14getMinVelocityEv>
 800810a:	ee10 3a10 	vmov	r3, s0
 800810e:	4618      	mov	r0, r3
 8008110:	f7f8 fa32 	bl	8000578 <__aeabi_f2d>
 8008114:	4603      	mov	r3, r0
 8008116:	460c      	mov	r4, r1
 8008118:	461a      	mov	r2, r3
 800811a:	4623      	mov	r3, r4
 800811c:	481d      	ldr	r0, [pc, #116]	; (8008194 <cppLoop+0xc9c>)
 800811e:	f7f8 fff9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008122:	481d      	ldr	r0, [pc, #116]	; (8008198 <cppLoop+0xca0>)
 8008124:	f7fa f812 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008128:	4603      	mov	r3, r0
 800812a:	2b08      	cmp	r3, #8
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d045      	beq.n	80081c4 <cppLoop+0xccc>
			led.LR(-1, 1);
 8008138:	2201      	movs	r2, #1
 800813a:	f04f 31ff 	mov.w	r1, #4294967295
 800813e:	4812      	ldr	r0, [pc, #72]	; (8008188 <cppLoop+0xc90>)
 8008140:	f7fa f924 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008144:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008148:	f001 fae2 	bl	8009710 <HAL_Delay>

			selector_vel++;
 800814c:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <cppLoop+0xcc8>)
 800814e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008152:	b29b      	uxth	r3, r3
 8008154:	3301      	adds	r3, #1
 8008156:	b29b      	uxth	r3, r3
 8008158:	b21a      	sxth	r2, r3
 800815a:	4b19      	ldr	r3, [pc, #100]	; (80081c0 <cppLoop+0xcc8>)
 800815c:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <cppLoop+0xcc8>)
 8008160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008164:	2b01      	cmp	r3, #1
 8008166:	dd02      	ble.n	800816e <cppLoop+0xc76>
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <cppLoop+0xcc8>)
 800816a:	2200      	movs	r2, #0
 800816c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800816e:	2200      	movs	r2, #0
 8008170:	f04f 31ff 	mov.w	r1, #4294967295
 8008174:	4804      	ldr	r0, [pc, #16]	; (8008188 <cppLoop+0xc90>)
 8008176:	f7fa f909 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800817a:	f001 b989 	b.w	8009490 <cppLoop+0x1f98>
 800817e:	bf00      	nop
 8008180:	9999999a 	.word	0x9999999a
 8008184:	3fb99999 	.word	0x3fb99999
 8008188:	200005b8 	.word	0x200005b8
 800818c:	08019830 	.word	0x08019830
 8008190:	20042264 	.word	0x20042264
 8008194:	0801986c 	.word	0x0801986c
 8008198:	200005ac 	.word	0x200005ac
 800819c:	08019878 	.word	0x08019878
 80081a0:	08019810 	.word	0x08019810
 80081a4:	2001db4c 	.word	0x2001db4c
 80081a8:	2004226c 	.word	0x2004226c
 80081ac:	08019884 	.word	0x08019884
 80081b0:	2004227c 	.word	0x2004227c
 80081b4:	0801983c 	.word	0x0801983c
 80081b8:	3eb33333 	.word	0x3eb33333
 80081bc:	2001db48 	.word	0x2001db48
 80081c0:	20042230 	.word	0x20042230
		else if(joy_stick.getValue() == JOY_R){
 80081c4:	48a4      	ldr	r0, [pc, #656]	; (8008458 <cppLoop+0xf60>)
 80081c6:	f7f9 ffc1 	bl	800214c <_ZN8JoyStick8getValueEv>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	bf0c      	ite	eq
 80081d0:	2301      	moveq	r3, #1
 80081d2:	2300      	movne	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d03c      	beq.n	8008254 <cppLoop+0xd5c>
			led.LR(-1, 1);
 80081da:	2201      	movs	r2, #1
 80081dc:	f04f 31ff 	mov.w	r1, #4294967295
 80081e0:	489e      	ldr	r0, [pc, #632]	; (800845c <cppLoop+0xf64>)
 80081e2:	f7fa f8d3 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081e6:	2064      	movs	r0, #100	; 0x64
 80081e8:	f001 fa92 	bl	8009710 <HAL_Delay>
			if(selector_vel == 0)
 80081ec:	4b9c      	ldr	r3, [pc, #624]	; (8008460 <cppLoop+0xf68>)
 80081ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d113      	bne.n	800821e <cppLoop+0xd26>
				adj_max_velocity = adj_max_velocity + 0.1;
 80081f6:	4b9b      	ldr	r3, [pc, #620]	; (8008464 <cppLoop+0xf6c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7f8 f9bc 	bl	8000578 <__aeabi_f2d>
 8008200:	a393      	add	r3, pc, #588	; (adr r3, 8008450 <cppLoop+0xf58>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f8 f859 	bl	80002bc <__adddf3>
 800820a:	4603      	mov	r3, r0
 800820c:	460c      	mov	r4, r1
 800820e:	4618      	mov	r0, r3
 8008210:	4621      	mov	r1, r4
 8008212:	f7f8 fd01 	bl	8000c18 <__aeabi_d2f>
 8008216:	4602      	mov	r2, r0
 8008218:	4b92      	ldr	r3, [pc, #584]	; (8008464 <cppLoop+0xf6c>)
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	e012      	b.n	8008244 <cppLoop+0xd4c>
				adj_min_velocity = adj_min_velocity + 0.1;
 800821e:	4b92      	ldr	r3, [pc, #584]	; (8008468 <cppLoop+0xf70>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f7f8 f9a8 	bl	8000578 <__aeabi_f2d>
 8008228:	a389      	add	r3, pc, #548	; (adr r3, 8008450 <cppLoop+0xf58>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 f845 	bl	80002bc <__adddf3>
 8008232:	4603      	mov	r3, r0
 8008234:	460c      	mov	r4, r1
 8008236:	4618      	mov	r0, r3
 8008238:	4621      	mov	r1, r4
 800823a:	f7f8 fced 	bl	8000c18 <__aeabi_d2f>
 800823e:	4602      	mov	r2, r0
 8008240:	4b89      	ldr	r3, [pc, #548]	; (8008468 <cppLoop+0xf70>)
 8008242:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008244:	2200      	movs	r2, #0
 8008246:	f04f 31ff 	mov.w	r1, #4294967295
 800824a:	4884      	ldr	r0, [pc, #528]	; (800845c <cppLoop+0xf64>)
 800824c:	f7fa f89e 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008250:	f001 b91e 	b.w	8009490 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_L){
 8008254:	4880      	ldr	r0, [pc, #512]	; (8008458 <cppLoop+0xf60>)
 8008256:	f7f9 ff79 	bl	800214c <_ZN8JoyStick8getValueEv>
 800825a:	4603      	mov	r3, r0
 800825c:	2b01      	cmp	r3, #1
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d03c      	beq.n	80082e4 <cppLoop+0xdec>
			led.LR(-1, 1);
 800826a:	2201      	movs	r2, #1
 800826c:	f04f 31ff 	mov.w	r1, #4294967295
 8008270:	487a      	ldr	r0, [pc, #488]	; (800845c <cppLoop+0xf64>)
 8008272:	f7fa f88b 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008276:	2064      	movs	r0, #100	; 0x64
 8008278:	f001 fa4a 	bl	8009710 <HAL_Delay>
			if(selector_vel == 0)
 800827c:	4b78      	ldr	r3, [pc, #480]	; (8008460 <cppLoop+0xf68>)
 800827e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d113      	bne.n	80082ae <cppLoop+0xdb6>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008286:	4b77      	ldr	r3, [pc, #476]	; (8008464 <cppLoop+0xf6c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7f8 f974 	bl	8000578 <__aeabi_f2d>
 8008290:	a36f      	add	r3, pc, #444	; (adr r3, 8008450 <cppLoop+0xf58>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f80f 	bl	80002b8 <__aeabi_dsub>
 800829a:	4603      	mov	r3, r0
 800829c:	460c      	mov	r4, r1
 800829e:	4618      	mov	r0, r3
 80082a0:	4621      	mov	r1, r4
 80082a2:	f7f8 fcb9 	bl	8000c18 <__aeabi_d2f>
 80082a6:	4602      	mov	r2, r0
 80082a8:	4b6e      	ldr	r3, [pc, #440]	; (8008464 <cppLoop+0xf6c>)
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e012      	b.n	80082d4 <cppLoop+0xddc>
				adj_min_velocity = adj_min_velocity - 0.1;
 80082ae:	4b6e      	ldr	r3, [pc, #440]	; (8008468 <cppLoop+0xf70>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f8 f960 	bl	8000578 <__aeabi_f2d>
 80082b8:	a365      	add	r3, pc, #404	; (adr r3, 8008450 <cppLoop+0xf58>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f7 fffb 	bl	80002b8 <__aeabi_dsub>
 80082c2:	4603      	mov	r3, r0
 80082c4:	460c      	mov	r4, r1
 80082c6:	4618      	mov	r0, r3
 80082c8:	4621      	mov	r1, r4
 80082ca:	f7f8 fca5 	bl	8000c18 <__aeabi_d2f>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b65      	ldr	r3, [pc, #404]	; (8008468 <cppLoop+0xf70>)
 80082d2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80082d4:	2200      	movs	r2, #0
 80082d6:	f04f 31ff 	mov.w	r1, #4294967295
 80082da:	4860      	ldr	r0, [pc, #384]	; (800845c <cppLoop+0xf64>)
 80082dc:	f7fa f856 	bl	800238c <_ZN3LED2LREaa>
		break;
 80082e0:	f001 b8d6 	b.w	8009490 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_C){
 80082e4:	485c      	ldr	r0, [pc, #368]	; (8008458 <cppLoop+0xf60>)
 80082e6:	f7f9 ff31 	bl	800214c <_ZN8JoyStick8getValueEv>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f001 80ca 	beq.w	8009490 <cppLoop+0x1f98>
			led.LR(-1, 1);
 80082fc:	2201      	movs	r2, #1
 80082fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008302:	4856      	ldr	r0, [pc, #344]	; (800845c <cppLoop+0xf64>)
 8008304:	f7fa f842 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008308:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800830c:	f001 fa00 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008310:	2300      	movs	r3, #0
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4b53      	ldr	r3, [pc, #332]	; (8008464 <cppLoop+0xf6c>)
 8008316:	2201      	movs	r2, #1
 8008318:	4954      	ldr	r1, [pc, #336]	; (800846c <cppLoop+0xf74>)
 800831a:	4855      	ldr	r0, [pc, #340]	; (8008470 <cppLoop+0xf78>)
 800831c:	f7f9 fa90 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008320:	2300      	movs	r3, #0
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4b50      	ldr	r3, [pc, #320]	; (8008468 <cppLoop+0xf70>)
 8008326:	2201      	movs	r2, #1
 8008328:	4952      	ldr	r1, [pc, #328]	; (8008474 <cppLoop+0xf7c>)
 800832a:	4851      	ldr	r0, [pc, #324]	; (8008470 <cppLoop+0xf78>)
 800832c:	f7f9 fa88 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008330:	4b4c      	ldr	r3, [pc, #304]	; (8008464 <cppLoop+0xf6c>)
 8008332:	edd3 7a00 	vldr	s15, [r3]
 8008336:	eeb0 0a67 	vmov.f32	s0, s15
 800833a:	484f      	ldr	r0, [pc, #316]	; (8008478 <cppLoop+0xf80>)
 800833c:	f7fb faad 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008340:	4b49      	ldr	r3, [pc, #292]	; (8008468 <cppLoop+0xf70>)
 8008342:	edd3 7a00 	vldr	s15, [r3]
 8008346:	eeb0 0a67 	vmov.f32	s0, s15
 800834a:	484b      	ldr	r0, [pc, #300]	; (8008478 <cppLoop+0xf80>)
 800834c:	f7fb fac5 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008350:	2200      	movs	r2, #0
 8008352:	f04f 31ff 	mov.w	r1, #4294967295
 8008356:	4841      	ldr	r0, [pc, #260]	; (800845c <cppLoop+0xf64>)
 8008358:	f7fa f818 	bl	800238c <_ZN3LED2LREaa>
		break;
 800835c:	f001 b898 	b.w	8009490 <cppLoop+0x1f98>

	case 5:
		led.fullColor('M');
 8008360:	214d      	movs	r1, #77	; 0x4d
 8008362:	483e      	ldr	r0, [pc, #248]	; (800845c <cppLoop+0xf64>)
 8008364:	f7f9 ff56 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008368:	f7f8 fe9a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800836c:	2100      	movs	r1, #0
 800836e:	2000      	movs	r0, #0
 8008370:	f7f8 fea6 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008374:	4b41      	ldr	r3, [pc, #260]	; (800847c <cppLoop+0xf84>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4618      	mov	r0, r3
 800837a:	f7f8 f8fd 	bl	8000578 <__aeabi_f2d>
 800837e:	4603      	mov	r3, r0
 8008380:	460c      	mov	r4, r1
 8008382:	461a      	mov	r2, r3
 8008384:	4623      	mov	r3, r4
 8008386:	483e      	ldr	r0, [pc, #248]	; (8008480 <cppLoop+0xf88>)
 8008388:	f7f8 fec4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800838c:	2101      	movs	r1, #1
 800838e:	2000      	movs	r0, #0
 8008390:	f7f8 fe96 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008394:	4b3b      	ldr	r3, [pc, #236]	; (8008484 <cppLoop+0xf8c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7f8 f8ed 	bl	8000578 <__aeabi_f2d>
 800839e:	4603      	mov	r3, r0
 80083a0:	460c      	mov	r4, r1
 80083a2:	461a      	mov	r2, r3
 80083a4:	4623      	mov	r3, r4
 80083a6:	4838      	ldr	r0, [pc, #224]	; (8008488 <cppLoop+0xf90>)
 80083a8:	f7f8 feb4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083ac:	482a      	ldr	r0, [pc, #168]	; (8008458 <cppLoop+0xf60>)
 80083ae:	f7f9 fecd 	bl	800214c <_ZN8JoyStick8getValueEv>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f001 8068 	beq.w	8009494 <cppLoop+0x1f9c>
			HAL_Delay(500);
 80083c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083c8:	f001 f9a2 	bl	8009710 <HAL_Delay>

			led.LR(1, -1);
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	2101      	movs	r1, #1
 80083d2:	4822      	ldr	r0, [pc, #136]	; (800845c <cppLoop+0xf64>)
 80083d4:	f7f9 ffda 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80083d8:	4b2c      	ldr	r3, [pc, #176]	; (800848c <cppLoop+0xf94>)
 80083da:	edd3 7a00 	vldr	s15, [r3]
 80083de:	4b2c      	ldr	r3, [pc, #176]	; (8008490 <cppLoop+0xf98>)
 80083e0:	ed93 7a00 	vldr	s14, [r3]
 80083e4:	4b2b      	ldr	r3, [pc, #172]	; (8008494 <cppLoop+0xf9c>)
 80083e6:	edd3 6a00 	vldr	s13, [r3]
 80083ea:	eeb0 1a66 	vmov.f32	s2, s13
 80083ee:	eef0 0a47 	vmov.f32	s1, s14
 80083f2:	eeb0 0a67 	vmov.f32	s0, s15
 80083f6:	4820      	ldr	r0, [pc, #128]	; (8008478 <cppLoop+0xf80>)
 80083f8:	f7fb f9a4 	bl	8003744 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 80083fc:	2102      	movs	r1, #2
 80083fe:	481e      	ldr	r0, [pc, #120]	; (8008478 <cppLoop+0xf80>)
 8008400:	f7fb fbe6 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008404:	4b1f      	ldr	r3, [pc, #124]	; (8008484 <cppLoop+0xf8c>)
 8008406:	edd3 7a00 	vldr	s15, [r3]
 800840a:	eeb0 0a67 	vmov.f32	s0, s15
 800840e:	481a      	ldr	r0, [pc, #104]	; (8008478 <cppLoop+0xf80>)
 8008410:	f7fb fa33 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008414:	4b19      	ldr	r3, [pc, #100]	; (800847c <cppLoop+0xf84>)
 8008416:	edd3 7a00 	vldr	s15, [r3]
 800841a:	eeb0 0a67 	vmov.f32	s0, s15
 800841e:	4816      	ldr	r0, [pc, #88]	; (8008478 <cppLoop+0xf80>)
 8008420:	f7fb fa4b 	bl	80038ba <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008424:	4b17      	ldr	r3, [pc, #92]	; (8008484 <cppLoop+0xf8c>)
 8008426:	edd3 7a00 	vldr	s15, [r3]
 800842a:	eeb0 0a67 	vmov.f32	s0, s15
 800842e:	4812      	ldr	r0, [pc, #72]	; (8008478 <cppLoop+0xf80>)
 8008430:	f7fb fa63 	bl	80038fa <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008434:	4810      	ldr	r0, [pc, #64]	; (8008478 <cppLoop+0xf80>)
 8008436:	f7fb fcf3 	bl	8003e20 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800843a:	480f      	ldr	r0, [pc, #60]	; (8008478 <cppLoop+0xf80>)
 800843c:	f7fb fc06 	bl	8003c4c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008440:	f04f 32ff 	mov.w	r2, #4294967295
 8008444:	2100      	movs	r1, #0
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <cppLoop+0xf64>)
 8008448:	f7f9 ffa0 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 800844c:	f001 b822 	b.w	8009494 <cppLoop+0x1f9c>
 8008450:	9999999a 	.word	0x9999999a
 8008454:	3fb99999 	.word	0x3fb99999
 8008458:	200005ac 	.word	0x200005ac
 800845c:	200005b8 	.word	0x200005b8
 8008460:	20042230 	.word	0x20042230
 8008464:	2004226c 	.word	0x2004226c
 8008468:	2004227c 	.word	0x2004227c
 800846c:	08019890 	.word	0x08019890
 8008470:	08019810 	.word	0x08019810
 8008474:	0801989c 	.word	0x0801989c
 8008478:	2001db4c 	.word	0x2001db4c
 800847c:	20042274 	.word	0x20042274
 8008480:	080198a8 	.word	0x080198a8
 8008484:	20042284 	.word	0x20042284
 8008488:	0801983c 	.word	0x0801983c
 800848c:	20042234 	.word	0x20042234
 8008490:	2004223c 	.word	0x2004223c
 8008494:	20042244 	.word	0x20042244

	case 6:
		led.fullColor('R');
 8008498:	2152      	movs	r1, #82	; 0x52
 800849a:	4895      	ldr	r0, [pc, #596]	; (80086f0 <cppLoop+0x11f8>)
 800849c:	f7f9 feba 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084a0:	f7f8 fdfe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084a4:	2100      	movs	r1, #0
 80084a6:	2000      	movs	r0, #0
 80084a8:	f7f8 fe0a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80084ac:	4891      	ldr	r0, [pc, #580]	; (80086f4 <cppLoop+0x11fc>)
 80084ae:	f7fb fa54 	bl	800395a <_ZN9LineTrace15getMaxVelocity2Ev>
 80084b2:	ee10 3a10 	vmov	r3, s0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f8 f85e 	bl	8000578 <__aeabi_f2d>
 80084bc:	4603      	mov	r3, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	461a      	mov	r2, r3
 80084c2:	4623      	mov	r3, r4
 80084c4:	488c      	ldr	r0, [pc, #560]	; (80086f8 <cppLoop+0x1200>)
 80084c6:	f7f8 fe25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084ca:	2101      	movs	r1, #1
 80084cc:	2000      	movs	r0, #0
 80084ce:	f7f8 fdf7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80084d2:	4888      	ldr	r0, [pc, #544]	; (80086f4 <cppLoop+0x11fc>)
 80084d4:	f7fb fa61 	bl	800399a <_ZN9LineTrace15getMinVelocity2Ev>
 80084d8:	ee10 3a10 	vmov	r3, s0
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f84b 	bl	8000578 <__aeabi_f2d>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	461a      	mov	r2, r3
 80084e8:	4623      	mov	r3, r4
 80084ea:	4884      	ldr	r0, [pc, #528]	; (80086fc <cppLoop+0x1204>)
 80084ec:	f7f8 fe12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084f0:	4883      	ldr	r0, [pc, #524]	; (8008700 <cppLoop+0x1208>)
 80084f2:	f7f9 fe2b 	bl	800214c <_ZN8JoyStick8getValueEv>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d022      	beq.n	800854c <cppLoop+0x1054>
			led.LR(-1, 1);
 8008506:	2201      	movs	r2, #1
 8008508:	f04f 31ff 	mov.w	r1, #4294967295
 800850c:	4878      	ldr	r0, [pc, #480]	; (80086f0 <cppLoop+0x11f8>)
 800850e:	f7f9 ff3d 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008512:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008516:	f001 f8fb 	bl	8009710 <HAL_Delay>

			selector_vel2++;
 800851a:	4b7a      	ldr	r3, [pc, #488]	; (8008704 <cppLoop+0x120c>)
 800851c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008520:	b29b      	uxth	r3, r3
 8008522:	3301      	adds	r3, #1
 8008524:	b29b      	uxth	r3, r3
 8008526:	b21a      	sxth	r2, r3
 8008528:	4b76      	ldr	r3, [pc, #472]	; (8008704 <cppLoop+0x120c>)
 800852a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 800852c:	4b75      	ldr	r3, [pc, #468]	; (8008704 <cppLoop+0x120c>)
 800852e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008532:	2b01      	cmp	r3, #1
 8008534:	dd02      	ble.n	800853c <cppLoop+0x1044>
 8008536:	4b73      	ldr	r3, [pc, #460]	; (8008704 <cppLoop+0x120c>)
 8008538:	2200      	movs	r2, #0
 800853a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800853c:	2200      	movs	r2, #0
 800853e:	f04f 31ff 	mov.w	r1, #4294967295
 8008542:	486b      	ldr	r0, [pc, #428]	; (80086f0 <cppLoop+0x11f8>)
 8008544:	f7f9 ff22 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008548:	f000 bfa6 	b.w	8009498 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_R){
 800854c:	486c      	ldr	r0, [pc, #432]	; (8008700 <cppLoop+0x1208>)
 800854e:	f7f9 fdfd 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008552:	4603      	mov	r3, r0
 8008554:	2b10      	cmp	r3, #16
 8008556:	bf0c      	ite	eq
 8008558:	2301      	moveq	r3, #1
 800855a:	2300      	movne	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d03c      	beq.n	80085dc <cppLoop+0x10e4>
			led.LR(-1, 1);
 8008562:	2201      	movs	r2, #1
 8008564:	f04f 31ff 	mov.w	r1, #4294967295
 8008568:	4861      	ldr	r0, [pc, #388]	; (80086f0 <cppLoop+0x11f8>)
 800856a:	f7f9 ff0f 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800856e:	2064      	movs	r0, #100	; 0x64
 8008570:	f001 f8ce 	bl	8009710 <HAL_Delay>
			if(selector_vel2 == 0)
 8008574:	4b63      	ldr	r3, [pc, #396]	; (8008704 <cppLoop+0x120c>)
 8008576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d113      	bne.n	80085a6 <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800857e:	4b62      	ldr	r3, [pc, #392]	; (8008708 <cppLoop+0x1210>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7f7 fff8 	bl	8000578 <__aeabi_f2d>
 8008588:	a357      	add	r3, pc, #348	; (adr r3, 80086e8 <cppLoop+0x11f0>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f7 fe95 	bl	80002bc <__adddf3>
 8008592:	4603      	mov	r3, r0
 8008594:	460c      	mov	r4, r1
 8008596:	4618      	mov	r0, r3
 8008598:	4621      	mov	r1, r4
 800859a:	f7f8 fb3d 	bl	8000c18 <__aeabi_d2f>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b59      	ldr	r3, [pc, #356]	; (8008708 <cppLoop+0x1210>)
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e012      	b.n	80085cc <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80085a6:	4b59      	ldr	r3, [pc, #356]	; (800870c <cppLoop+0x1214>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f7 ffe4 	bl	8000578 <__aeabi_f2d>
 80085b0:	a34d      	add	r3, pc, #308	; (adr r3, 80086e8 <cppLoop+0x11f0>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 fe81 	bl	80002bc <__adddf3>
 80085ba:	4603      	mov	r3, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	4618      	mov	r0, r3
 80085c0:	4621      	mov	r1, r4
 80085c2:	f7f8 fb29 	bl	8000c18 <__aeabi_d2f>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b50      	ldr	r3, [pc, #320]	; (800870c <cppLoop+0x1214>)
 80085ca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085cc:	2200      	movs	r2, #0
 80085ce:	f04f 31ff 	mov.w	r1, #4294967295
 80085d2:	4847      	ldr	r0, [pc, #284]	; (80086f0 <cppLoop+0x11f8>)
 80085d4:	f7f9 feda 	bl	800238c <_ZN3LED2LREaa>
		break;
 80085d8:	f000 bf5e 	b.w	8009498 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_L){
 80085dc:	4848      	ldr	r0, [pc, #288]	; (8008700 <cppLoop+0x1208>)
 80085de:	f7f9 fdb5 	bl	800214c <_ZN8JoyStick8getValueEv>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	bf0c      	ite	eq
 80085e8:	2301      	moveq	r3, #1
 80085ea:	2300      	movne	r3, #0
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d03c      	beq.n	800866c <cppLoop+0x1174>
			led.LR(-1, 1);
 80085f2:	2201      	movs	r2, #1
 80085f4:	f04f 31ff 	mov.w	r1, #4294967295
 80085f8:	483d      	ldr	r0, [pc, #244]	; (80086f0 <cppLoop+0x11f8>)
 80085fa:	f7f9 fec7 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085fe:	2064      	movs	r0, #100	; 0x64
 8008600:	f001 f886 	bl	8009710 <HAL_Delay>
			if(selector_vel2 == 0)
 8008604:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <cppLoop+0x120c>)
 8008606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d113      	bne.n	8008636 <cppLoop+0x113e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800860e:	4b3e      	ldr	r3, [pc, #248]	; (8008708 <cppLoop+0x1210>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f7f7 ffb0 	bl	8000578 <__aeabi_f2d>
 8008618:	a333      	add	r3, pc, #204	; (adr r3, 80086e8 <cppLoop+0x11f0>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fe4b 	bl	80002b8 <__aeabi_dsub>
 8008622:	4603      	mov	r3, r0
 8008624:	460c      	mov	r4, r1
 8008626:	4618      	mov	r0, r3
 8008628:	4621      	mov	r1, r4
 800862a:	f7f8 faf5 	bl	8000c18 <__aeabi_d2f>
 800862e:	4602      	mov	r2, r0
 8008630:	4b35      	ldr	r3, [pc, #212]	; (8008708 <cppLoop+0x1210>)
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e012      	b.n	800865c <cppLoop+0x1164>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008636:	4b35      	ldr	r3, [pc, #212]	; (800870c <cppLoop+0x1214>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f7f7 ff9c 	bl	8000578 <__aeabi_f2d>
 8008640:	a329      	add	r3, pc, #164	; (adr r3, 80086e8 <cppLoop+0x11f0>)
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f7f7 fe37 	bl	80002b8 <__aeabi_dsub>
 800864a:	4603      	mov	r3, r0
 800864c:	460c      	mov	r4, r1
 800864e:	4618      	mov	r0, r3
 8008650:	4621      	mov	r1, r4
 8008652:	f7f8 fae1 	bl	8000c18 <__aeabi_d2f>
 8008656:	4602      	mov	r2, r0
 8008658:	4b2c      	ldr	r3, [pc, #176]	; (800870c <cppLoop+0x1214>)
 800865a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800865c:	2200      	movs	r2, #0
 800865e:	f04f 31ff 	mov.w	r1, #4294967295
 8008662:	4823      	ldr	r0, [pc, #140]	; (80086f0 <cppLoop+0x11f8>)
 8008664:	f7f9 fe92 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008668:	f000 bf16 	b.w	8009498 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_C){
 800866c:	4824      	ldr	r0, [pc, #144]	; (8008700 <cppLoop+0x1208>)
 800866e:	f7f9 fd6d 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008672:	4603      	mov	r3, r0
 8008674:	2b02      	cmp	r3, #2
 8008676:	bf0c      	ite	eq
 8008678:	2301      	moveq	r3, #1
 800867a:	2300      	movne	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 870a 	beq.w	8009498 <cppLoop+0x1fa0>
			led.LR(-1, 1);
 8008684:	2201      	movs	r2, #1
 8008686:	f04f 31ff 	mov.w	r1, #4294967295
 800868a:	4819      	ldr	r0, [pc, #100]	; (80086f0 <cppLoop+0x11f8>)
 800868c:	f7f9 fe7e 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008690:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008694:	f001 f83c 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008698:	2300      	movs	r3, #0
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <cppLoop+0x1210>)
 800869e:	2201      	movs	r2, #1
 80086a0:	491b      	ldr	r1, [pc, #108]	; (8008710 <cppLoop+0x1218>)
 80086a2:	481c      	ldr	r0, [pc, #112]	; (8008714 <cppLoop+0x121c>)
 80086a4:	f7f9 f8cc 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <cppLoop+0x1214>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	4919      	ldr	r1, [pc, #100]	; (8008718 <cppLoop+0x1220>)
 80086b2:	4818      	ldr	r0, [pc, #96]	; (8008714 <cppLoop+0x121c>)
 80086b4:	f7f9 f8c4 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80086b8:	4b13      	ldr	r3, [pc, #76]	; (8008708 <cppLoop+0x1210>)
 80086ba:	edd3 7a00 	vldr	s15, [r3]
 80086be:	eeb0 0a67 	vmov.f32	s0, s15
 80086c2:	480c      	ldr	r0, [pc, #48]	; (80086f4 <cppLoop+0x11fc>)
 80086c4:	f7fb f8f9 	bl	80038ba <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80086c8:	4b10      	ldr	r3, [pc, #64]	; (800870c <cppLoop+0x1214>)
 80086ca:	edd3 7a00 	vldr	s15, [r3]
 80086ce:	eeb0 0a67 	vmov.f32	s0, s15
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <cppLoop+0x11fc>)
 80086d4:	f7fb f911 	bl	80038fa <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80086d8:	2200      	movs	r2, #0
 80086da:	f04f 31ff 	mov.w	r1, #4294967295
 80086de:	4804      	ldr	r0, [pc, #16]	; (80086f0 <cppLoop+0x11f8>)
 80086e0:	f7f9 fe54 	bl	800238c <_ZN3LED2LREaa>
		break;
 80086e4:	f000 bed8 	b.w	8009498 <cppLoop+0x1fa0>
 80086e8:	9999999a 	.word	0x9999999a
 80086ec:	3fb99999 	.word	0x3fb99999
 80086f0:	200005b8 	.word	0x200005b8
 80086f4:	2001db4c 	.word	0x2001db4c
 80086f8:	080198a8 	.word	0x080198a8
 80086fc:	0801986c 	.word	0x0801986c
 8008700:	200005ac 	.word	0x200005ac
 8008704:	20042232 	.word	0x20042232
 8008708:	20042274 	.word	0x20042274
 800870c:	20042284 	.word	0x20042284
 8008710:	080198b4 	.word	0x080198b4
 8008714:	08019810 	.word	0x08019810
 8008718:	080198c0 	.word	0x080198c0

	case 7:
		led.fullColor('W');
 800871c:	2157      	movs	r1, #87	; 0x57
 800871e:	48c2      	ldr	r0, [pc, #776]	; (8008a28 <cppLoop+0x1530>)
 8008720:	f7f9 fd78 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008724:	f7f8 fcbc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008728:	2100      	movs	r1, #0
 800872a:	2000      	movs	r0, #0
 800872c:	f7f8 fcc8 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008730:	48be      	ldr	r0, [pc, #760]	; (8008a2c <cppLoop+0x1534>)
 8008732:	f7fb f976 	bl	8003a22 <_ZN9LineTrace9getMaxAccEv>
 8008736:	ee10 3a10 	vmov	r3, s0
 800873a:	4618      	mov	r0, r3
 800873c:	f7f7 ff1c 	bl	8000578 <__aeabi_f2d>
 8008740:	4603      	mov	r3, r0
 8008742:	460c      	mov	r4, r1
 8008744:	461a      	mov	r2, r3
 8008746:	4623      	mov	r3, r4
 8008748:	48b9      	ldr	r0, [pc, #740]	; (8008a30 <cppLoop+0x1538>)
 800874a:	f7f8 fce3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800874e:	2101      	movs	r1, #1
 8008750:	2000      	movs	r0, #0
 8008752:	f7f8 fcb5 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008756:	48b5      	ldr	r0, [pc, #724]	; (8008a2c <cppLoop+0x1534>)
 8008758:	f7fb f999 	bl	8003a8e <_ZN9LineTrace9getMaxDecEv>
 800875c:	ee10 3a10 	vmov	r3, s0
 8008760:	4618      	mov	r0, r3
 8008762:	f7f7 ff09 	bl	8000578 <__aeabi_f2d>
 8008766:	4603      	mov	r3, r0
 8008768:	460c      	mov	r4, r1
 800876a:	461a      	mov	r2, r3
 800876c:	4623      	mov	r3, r4
 800876e:	48b1      	ldr	r0, [pc, #708]	; (8008a34 <cppLoop+0x153c>)
 8008770:	f7f8 fcd0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008774:	48b0      	ldr	r0, [pc, #704]	; (8008a38 <cppLoop+0x1540>)
 8008776:	f7f9 fce9 	bl	800214c <_ZN8JoyStick8getValueEv>
 800877a:	4603      	mov	r3, r0
 800877c:	2b08      	cmp	r3, #8
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d022      	beq.n	80087d0 <cppLoop+0x12d8>
			led.LR(-1, 1);
 800878a:	2201      	movs	r2, #1
 800878c:	f04f 31ff 	mov.w	r1, #4294967295
 8008790:	48a5      	ldr	r0, [pc, #660]	; (8008a28 <cppLoop+0x1530>)
 8008792:	f7f9 fdfb 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800879a:	f000 ffb9 	bl	8009710 <HAL_Delay>

			selector_acc++;
 800879e:	4ba7      	ldr	r3, [pc, #668]	; (8008a3c <cppLoop+0x1544>)
 80087a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3301      	adds	r3, #1
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	b21a      	sxth	r2, r3
 80087ac:	4ba3      	ldr	r3, [pc, #652]	; (8008a3c <cppLoop+0x1544>)
 80087ae:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80087b0:	4ba2      	ldr	r3, [pc, #648]	; (8008a3c <cppLoop+0x1544>)
 80087b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	dd02      	ble.n	80087c0 <cppLoop+0x12c8>
 80087ba:	4ba0      	ldr	r3, [pc, #640]	; (8008a3c <cppLoop+0x1544>)
 80087bc:	2200      	movs	r2, #0
 80087be:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80087c0:	2200      	movs	r2, #0
 80087c2:	f04f 31ff 	mov.w	r1, #4294967295
 80087c6:	4898      	ldr	r0, [pc, #608]	; (8008a28 <cppLoop+0x1530>)
 80087c8:	f7f9 fde0 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80087cc:	f000 be66 	b.w	800949c <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_R){
 80087d0:	4899      	ldr	r0, [pc, #612]	; (8008a38 <cppLoop+0x1540>)
 80087d2:	f7f9 fcbb 	bl	800214c <_ZN8JoyStick8getValueEv>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b10      	cmp	r3, #16
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d03c      	beq.n	8008860 <cppLoop+0x1368>
			led.LR(-1, 1);
 80087e6:	2201      	movs	r2, #1
 80087e8:	f04f 31ff 	mov.w	r1, #4294967295
 80087ec:	488e      	ldr	r0, [pc, #568]	; (8008a28 <cppLoop+0x1530>)
 80087ee:	f7f9 fdcd 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087f2:	2064      	movs	r0, #100	; 0x64
 80087f4:	f000 ff8c 	bl	8009710 <HAL_Delay>
			if(selector_acc == 0){
 80087f8:	4b90      	ldr	r3, [pc, #576]	; (8008a3c <cppLoop+0x1544>)
 80087fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d113      	bne.n	800882a <cppLoop+0x1332>
				adj_acc = adj_acc + 0.1;
 8008802:	4b8f      	ldr	r3, [pc, #572]	; (8008a40 <cppLoop+0x1548>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f7f7 feb6 	bl	8000578 <__aeabi_f2d>
 800880c:	a384      	add	r3, pc, #528	; (adr r3, 8008a20 <cppLoop+0x1528>)
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f7f7 fd53 	bl	80002bc <__adddf3>
 8008816:	4603      	mov	r3, r0
 8008818:	460c      	mov	r4, r1
 800881a:	4618      	mov	r0, r3
 800881c:	4621      	mov	r1, r4
 800881e:	f7f8 f9fb 	bl	8000c18 <__aeabi_d2f>
 8008822:	4602      	mov	r2, r0
 8008824:	4b86      	ldr	r3, [pc, #536]	; (8008a40 <cppLoop+0x1548>)
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e012      	b.n	8008850 <cppLoop+0x1358>
				adj_dec = adj_dec + 0.1;
 800882a:	4b86      	ldr	r3, [pc, #536]	; (8008a44 <cppLoop+0x154c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f7f7 fea2 	bl	8000578 <__aeabi_f2d>
 8008834:	a37a      	add	r3, pc, #488	; (adr r3, 8008a20 <cppLoop+0x1528>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd3f 	bl	80002bc <__adddf3>
 800883e:	4603      	mov	r3, r0
 8008840:	460c      	mov	r4, r1
 8008842:	4618      	mov	r0, r3
 8008844:	4621      	mov	r1, r4
 8008846:	f7f8 f9e7 	bl	8000c18 <__aeabi_d2f>
 800884a:	4602      	mov	r2, r0
 800884c:	4b7d      	ldr	r3, [pc, #500]	; (8008a44 <cppLoop+0x154c>)
 800884e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008850:	2200      	movs	r2, #0
 8008852:	f04f 31ff 	mov.w	r1, #4294967295
 8008856:	4874      	ldr	r0, [pc, #464]	; (8008a28 <cppLoop+0x1530>)
 8008858:	f7f9 fd98 	bl	800238c <_ZN3LED2LREaa>
		break;
 800885c:	f000 be1e 	b.w	800949c <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_L){
 8008860:	4875      	ldr	r0, [pc, #468]	; (8008a38 <cppLoop+0x1540>)
 8008862:	f7f9 fc73 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008866:	4603      	mov	r3, r0
 8008868:	2b01      	cmp	r3, #1
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d03c      	beq.n	80088f0 <cppLoop+0x13f8>
			led.LR(-1, 1);
 8008876:	2201      	movs	r2, #1
 8008878:	f04f 31ff 	mov.w	r1, #4294967295
 800887c:	486a      	ldr	r0, [pc, #424]	; (8008a28 <cppLoop+0x1530>)
 800887e:	f7f9 fd85 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008882:	2064      	movs	r0, #100	; 0x64
 8008884:	f000 ff44 	bl	8009710 <HAL_Delay>
			if(selector_acc == 0){
 8008888:	4b6c      	ldr	r3, [pc, #432]	; (8008a3c <cppLoop+0x1544>)
 800888a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d113      	bne.n	80088ba <cppLoop+0x13c2>
				adj_acc = adj_acc - 0.1;
 8008892:	4b6b      	ldr	r3, [pc, #428]	; (8008a40 <cppLoop+0x1548>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f7 fe6e 	bl	8000578 <__aeabi_f2d>
 800889c:	a360      	add	r3, pc, #384	; (adr r3, 8008a20 <cppLoop+0x1528>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fd09 	bl	80002b8 <__aeabi_dsub>
 80088a6:	4603      	mov	r3, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	4618      	mov	r0, r3
 80088ac:	4621      	mov	r1, r4
 80088ae:	f7f8 f9b3 	bl	8000c18 <__aeabi_d2f>
 80088b2:	4602      	mov	r2, r0
 80088b4:	4b62      	ldr	r3, [pc, #392]	; (8008a40 <cppLoop+0x1548>)
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e012      	b.n	80088e0 <cppLoop+0x13e8>
				adj_dec = adj_dec - 0.1;
 80088ba:	4b62      	ldr	r3, [pc, #392]	; (8008a44 <cppLoop+0x154c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f7 fe5a 	bl	8000578 <__aeabi_f2d>
 80088c4:	a356      	add	r3, pc, #344	; (adr r3, 8008a20 <cppLoop+0x1528>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fcf5 	bl	80002b8 <__aeabi_dsub>
 80088ce:	4603      	mov	r3, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	4618      	mov	r0, r3
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7f8 f99f 	bl	8000c18 <__aeabi_d2f>
 80088da:	4602      	mov	r2, r0
 80088dc:	4b59      	ldr	r3, [pc, #356]	; (8008a44 <cppLoop+0x154c>)
 80088de:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088e0:	2200      	movs	r2, #0
 80088e2:	f04f 31ff 	mov.w	r1, #4294967295
 80088e6:	4850      	ldr	r0, [pc, #320]	; (8008a28 <cppLoop+0x1530>)
 80088e8:	f7f9 fd50 	bl	800238c <_ZN3LED2LREaa>
		break;
 80088ec:	f000 bdd6 	b.w	800949c <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_C){
 80088f0:	4851      	ldr	r0, [pc, #324]	; (8008a38 <cppLoop+0x1540>)
 80088f2:	f7f9 fc2b 	bl	800214c <_ZN8JoyStick8getValueEv>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	bf0c      	ite	eq
 80088fc:	2301      	moveq	r3, #1
 80088fe:	2300      	movne	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 85ca 	beq.w	800949c <cppLoop+0x1fa4>
			led.LR(-1, 1);
 8008908:	2201      	movs	r2, #1
 800890a:	f04f 31ff 	mov.w	r1, #4294967295
 800890e:	4846      	ldr	r0, [pc, #280]	; (8008a28 <cppLoop+0x1530>)
 8008910:	f7f9 fd3c 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008914:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008918:	f000 fefa 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800891c:	2300      	movs	r3, #0
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	4b47      	ldr	r3, [pc, #284]	; (8008a40 <cppLoop+0x1548>)
 8008922:	2201      	movs	r2, #1
 8008924:	4948      	ldr	r1, [pc, #288]	; (8008a48 <cppLoop+0x1550>)
 8008926:	4849      	ldr	r0, [pc, #292]	; (8008a4c <cppLoop+0x1554>)
 8008928:	f7f8 ff8a 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800892c:	2300      	movs	r3, #0
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	4b44      	ldr	r3, [pc, #272]	; (8008a44 <cppLoop+0x154c>)
 8008932:	2201      	movs	r2, #1
 8008934:	4946      	ldr	r1, [pc, #280]	; (8008a50 <cppLoop+0x1558>)
 8008936:	4845      	ldr	r0, [pc, #276]	; (8008a4c <cppLoop+0x1554>)
 8008938:	f7f8 ff82 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800893c:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <cppLoop+0x1548>)
 800893e:	edd3 7a00 	vldr	s15, [r3]
 8008942:	4b40      	ldr	r3, [pc, #256]	; (8008a44 <cppLoop+0x154c>)
 8008944:	ed93 7a00 	vldr	s14, [r3]
 8008948:	eef0 0a47 	vmov.f32	s1, s14
 800894c:	eeb0 0a67 	vmov.f32	s0, s15
 8008950:	4836      	ldr	r0, [pc, #216]	; (8008a2c <cppLoop+0x1534>)
 8008952:	f7fb f832 	bl	80039ba <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008956:	2200      	movs	r2, #0
 8008958:	f04f 31ff 	mov.w	r1, #4294967295
 800895c:	4832      	ldr	r0, [pc, #200]	; (8008a28 <cppLoop+0x1530>)
 800895e:	f7f9 fd15 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008962:	f000 bd9b 	b.w	800949c <cppLoop+0x1fa4>

	case 8:
		led.fullColor('W');
 8008966:	2157      	movs	r1, #87	; 0x57
 8008968:	482f      	ldr	r0, [pc, #188]	; (8008a28 <cppLoop+0x1530>)
 800896a:	f7f9 fc53 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 800896e:	f7f8 fb97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008972:	2100      	movs	r1, #0
 8008974:	2000      	movs	r0, #0
 8008976:	f7f8 fba3 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800897a:	482c      	ldr	r0, [pc, #176]	; (8008a2c <cppLoop+0x1534>)
 800897c:	f7fb f875 	bl	8003a6a <_ZN9LineTrace10getMaxAcc2Ev>
 8008980:	ee10 3a10 	vmov	r3, s0
 8008984:	4618      	mov	r0, r3
 8008986:	f7f7 fdf7 	bl	8000578 <__aeabi_f2d>
 800898a:	4603      	mov	r3, r0
 800898c:	460c      	mov	r4, r1
 800898e:	461a      	mov	r2, r3
 8008990:	4623      	mov	r3, r4
 8008992:	4830      	ldr	r0, [pc, #192]	; (8008a54 <cppLoop+0x155c>)
 8008994:	f7f8 fbbe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008998:	2101      	movs	r1, #1
 800899a:	2000      	movs	r0, #0
 800899c:	f7f8 fb90 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80089a0:	4822      	ldr	r0, [pc, #136]	; (8008a2c <cppLoop+0x1534>)
 80089a2:	f7fb f850 	bl	8003a46 <_ZN9LineTrace10getMaxDec2Ev>
 80089a6:	ee10 3a10 	vmov	r3, s0
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7f7 fde4 	bl	8000578 <__aeabi_f2d>
 80089b0:	4603      	mov	r3, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	461a      	mov	r2, r3
 80089b6:	4623      	mov	r3, r4
 80089b8:	4827      	ldr	r0, [pc, #156]	; (8008a58 <cppLoop+0x1560>)
 80089ba:	f7f8 fbab 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80089be:	481e      	ldr	r0, [pc, #120]	; (8008a38 <cppLoop+0x1540>)
 80089c0:	f7f9 fbc4 	bl	800214c <_ZN8JoyStick8getValueEv>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b08      	cmp	r3, #8
 80089c8:	bf0c      	ite	eq
 80089ca:	2301      	moveq	r3, #1
 80089cc:	2300      	movne	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d045      	beq.n	8008a60 <cppLoop+0x1568>
			led.LR(-1, 1);
 80089d4:	2201      	movs	r2, #1
 80089d6:	f04f 31ff 	mov.w	r1, #4294967295
 80089da:	4813      	ldr	r0, [pc, #76]	; (8008a28 <cppLoop+0x1530>)
 80089dc:	f7f9 fcd6 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089e4:	f000 fe94 	bl	8009710 <HAL_Delay>

			selector_acc2++;
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <cppLoop+0x1564>)
 80089ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	3301      	adds	r3, #1
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	b21a      	sxth	r2, r3
 80089f6:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <cppLoop+0x1564>)
 80089f8:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 80089fa:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <cppLoop+0x1564>)
 80089fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	dd02      	ble.n	8008a0a <cppLoop+0x1512>
 8008a04:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <cppLoop+0x1564>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a10:	4805      	ldr	r0, [pc, #20]	; (8008a28 <cppLoop+0x1530>)
 8008a12:	f7f9 fcbb 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008a16:	f000 bd43 	b.w	80094a0 <cppLoop+0x1fa8>
 8008a1a:	bf00      	nop
 8008a1c:	f3af 8000 	nop.w
 8008a20:	9999999a 	.word	0x9999999a
 8008a24:	3fb99999 	.word	0x3fb99999
 8008a28:	200005b8 	.word	0x200005b8
 8008a2c:	2001db4c 	.word	0x2001db4c
 8008a30:	080198cc 	.word	0x080198cc
 8008a34:	080198d8 	.word	0x080198d8
 8008a38:	200005ac 	.word	0x200005ac
 8008a3c:	2004222c 	.word	0x2004222c
 8008a40:	2004228c 	.word	0x2004228c
 8008a44:	20042294 	.word	0x20042294
 8008a48:	080198e4 	.word	0x080198e4
 8008a4c:	08019810 	.word	0x08019810
 8008a50:	080198ec 	.word	0x080198ec
 8008a54:	080198f4 	.word	0x080198f4
 8008a58:	08019900 	.word	0x08019900
 8008a5c:	2004222e 	.word	0x2004222e
		else if(joy_stick.getValue() == JOY_R){
 8008a60:	48bf      	ldr	r0, [pc, #764]	; (8008d60 <cppLoop+0x1868>)
 8008a62:	f7f9 fb73 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	bf0c      	ite	eq
 8008a6c:	2301      	moveq	r3, #1
 8008a6e:	2300      	movne	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d03c      	beq.n	8008af0 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8008a76:	2201      	movs	r2, #1
 8008a78:	f04f 31ff 	mov.w	r1, #4294967295
 8008a7c:	48b9      	ldr	r0, [pc, #740]	; (8008d64 <cppLoop+0x186c>)
 8008a7e:	f7f9 fc85 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a82:	2064      	movs	r0, #100	; 0x64
 8008a84:	f000 fe44 	bl	8009710 <HAL_Delay>
			if(selector_acc2 == 0){
 8008a88:	4bb7      	ldr	r3, [pc, #732]	; (8008d68 <cppLoop+0x1870>)
 8008a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d113      	bne.n	8008aba <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 + 0.1;
 8008a92:	4bb6      	ldr	r3, [pc, #728]	; (8008d6c <cppLoop+0x1874>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f7 fd6e 	bl	8000578 <__aeabi_f2d>
 8008a9c:	a3ae      	add	r3, pc, #696	; (adr r3, 8008d58 <cppLoop+0x1860>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fc0b 	bl	80002bc <__adddf3>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	4618      	mov	r0, r3
 8008aac:	4621      	mov	r1, r4
 8008aae:	f7f8 f8b3 	bl	8000c18 <__aeabi_d2f>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4bad      	ldr	r3, [pc, #692]	; (8008d6c <cppLoop+0x1874>)
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e012      	b.n	8008ae0 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 + 0.1;
 8008aba:	4bad      	ldr	r3, [pc, #692]	; (8008d70 <cppLoop+0x1878>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f7 fd5a 	bl	8000578 <__aeabi_f2d>
 8008ac4:	a3a4      	add	r3, pc, #656	; (adr r3, 8008d58 <cppLoop+0x1860>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fbf7 	bl	80002bc <__adddf3>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f7f8 f89f 	bl	8000c18 <__aeabi_d2f>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4ba4      	ldr	r3, [pc, #656]	; (8008d70 <cppLoop+0x1878>)
 8008ade:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae6:	489f      	ldr	r0, [pc, #636]	; (8008d64 <cppLoop+0x186c>)
 8008ae8:	f7f9 fc50 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008aec:	f000 bcd8 	b.w	80094a0 <cppLoop+0x1fa8>
		else if(joy_stick.getValue() == JOY_L){
 8008af0:	489b      	ldr	r0, [pc, #620]	; (8008d60 <cppLoop+0x1868>)
 8008af2:	f7f9 fb2b 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	bf0c      	ite	eq
 8008afc:	2301      	moveq	r3, #1
 8008afe:	2300      	movne	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d03c      	beq.n	8008b80 <cppLoop+0x1688>
			led.LR(-1, 1);
 8008b06:	2201      	movs	r2, #1
 8008b08:	f04f 31ff 	mov.w	r1, #4294967295
 8008b0c:	4895      	ldr	r0, [pc, #596]	; (8008d64 <cppLoop+0x186c>)
 8008b0e:	f7f9 fc3d 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b12:	2064      	movs	r0, #100	; 0x64
 8008b14:	f000 fdfc 	bl	8009710 <HAL_Delay>
			if(selector_acc2 == 0){
 8008b18:	4b93      	ldr	r3, [pc, #588]	; (8008d68 <cppLoop+0x1870>)
 8008b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d113      	bne.n	8008b4a <cppLoop+0x1652>
				adj_acc2 = adj_acc2 - 0.1;
 8008b22:	4b92      	ldr	r3, [pc, #584]	; (8008d6c <cppLoop+0x1874>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f7 fd26 	bl	8000578 <__aeabi_f2d>
 8008b2c:	a38a      	add	r3, pc, #552	; (adr r3, 8008d58 <cppLoop+0x1860>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f7f7 fbc1 	bl	80002b8 <__aeabi_dsub>
 8008b36:	4603      	mov	r3, r0
 8008b38:	460c      	mov	r4, r1
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	f7f8 f86b 	bl	8000c18 <__aeabi_d2f>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b89      	ldr	r3, [pc, #548]	; (8008d6c <cppLoop+0x1874>)
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	e012      	b.n	8008b70 <cppLoop+0x1678>
				adj_dec2 = adj_dec2 - 0.1;
 8008b4a:	4b89      	ldr	r3, [pc, #548]	; (8008d70 <cppLoop+0x1878>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7f7 fd12 	bl	8000578 <__aeabi_f2d>
 8008b54:	a380      	add	r3, pc, #512	; (adr r3, 8008d58 <cppLoop+0x1860>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f7f7 fbad 	bl	80002b8 <__aeabi_dsub>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	460c      	mov	r4, r1
 8008b62:	4618      	mov	r0, r3
 8008b64:	4621      	mov	r1, r4
 8008b66:	f7f8 f857 	bl	8000c18 <__aeabi_d2f>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	4b80      	ldr	r3, [pc, #512]	; (8008d70 <cppLoop+0x1878>)
 8008b6e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b70:	2200      	movs	r2, #0
 8008b72:	f04f 31ff 	mov.w	r1, #4294967295
 8008b76:	487b      	ldr	r0, [pc, #492]	; (8008d64 <cppLoop+0x186c>)
 8008b78:	f7f9 fc08 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008b7c:	f000 bc90 	b.w	80094a0 <cppLoop+0x1fa8>
		else if(joy_stick.getValue() == JOY_C){
 8008b80:	4877      	ldr	r0, [pc, #476]	; (8008d60 <cppLoop+0x1868>)
 8008b82:	f7f9 fae3 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	bf0c      	ite	eq
 8008b8c:	2301      	moveq	r3, #1
 8008b8e:	2300      	movne	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 8484 	beq.w	80094a0 <cppLoop+0x1fa8>
			led.LR(-1, 1);
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b9e:	4871      	ldr	r0, [pc, #452]	; (8008d64 <cppLoop+0x186c>)
 8008ba0:	f7f9 fbf4 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ba4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ba8:	f000 fdb2 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008bac:	2300      	movs	r3, #0
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4b6e      	ldr	r3, [pc, #440]	; (8008d6c <cppLoop+0x1874>)
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	496f      	ldr	r1, [pc, #444]	; (8008d74 <cppLoop+0x187c>)
 8008bb6:	4870      	ldr	r0, [pc, #448]	; (8008d78 <cppLoop+0x1880>)
 8008bb8:	f7f8 fe42 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	4b6b      	ldr	r3, [pc, #428]	; (8008d70 <cppLoop+0x1878>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	496d      	ldr	r1, [pc, #436]	; (8008d7c <cppLoop+0x1884>)
 8008bc6:	486c      	ldr	r0, [pc, #432]	; (8008d78 <cppLoop+0x1880>)
 8008bc8:	f7f8 fe3a 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008bcc:	4b67      	ldr	r3, [pc, #412]	; (8008d6c <cppLoop+0x1874>)
 8008bce:	edd3 7a00 	vldr	s15, [r3]
 8008bd2:	4b67      	ldr	r3, [pc, #412]	; (8008d70 <cppLoop+0x1878>)
 8008bd4:	ed93 7a00 	vldr	s14, [r3]
 8008bd8:	eef0 0a47 	vmov.f32	s1, s14
 8008bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8008be0:	4867      	ldr	r0, [pc, #412]	; (8008d80 <cppLoop+0x1888>)
 8008be2:	f7fa ff04 	bl	80039ee <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008be6:	2200      	movs	r2, #0
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	485d      	ldr	r0, [pc, #372]	; (8008d64 <cppLoop+0x186c>)
 8008bee:	f7f9 fbcd 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008bf2:	f000 bc55 	b.w	80094a0 <cppLoop+0x1fa8>

	case 9:
		led.fullColor('~');
 8008bf6:	217e      	movs	r1, #126	; 0x7e
 8008bf8:	485a      	ldr	r0, [pc, #360]	; (8008d64 <cppLoop+0x186c>)
 8008bfa:	f7f9 fb0b 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bfe:	f7f8 fa4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c02:	2100      	movs	r1, #0
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7f8 fa5b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008c0a:	485e      	ldr	r0, [pc, #376]	; (8008d84 <cppLoop+0x188c>)
 8008c0c:	f7f8 fa82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c10:	2101      	movs	r1, #1
 8008c12:	2000      	movs	r0, #0
 8008c14:	f7f8 fa54 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008c18:	485b      	ldr	r0, [pc, #364]	; (8008d88 <cppLoop+0x1890>)
 8008c1a:	f7f8 fa7b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008c1e:	4850      	ldr	r0, [pc, #320]	; (8008d60 <cppLoop+0x1868>)
 8008c20:	f7f9 fa94 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	bf0c      	ite	eq
 8008c2a:	2301      	moveq	r3, #1
 8008c2c:	2300      	movne	r3, #0
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8437 	beq.w	80094a4 <cppLoop+0x1fac>
			led.LR(-1, 1);
 8008c36:	2201      	movs	r2, #1
 8008c38:	f04f 31ff 	mov.w	r1, #4294967295
 8008c3c:	4849      	ldr	r0, [pc, #292]	; (8008d64 <cppLoop+0x186c>)
 8008c3e:	f7f9 fba5 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c46:	f000 fd63 	bl	8009710 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008c4a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8008d8c <cppLoop+0x1894>
 8008c4e:	484c      	ldr	r0, [pc, #304]	; (8008d80 <cppLoop+0x1888>)
 8008c50:	f7fa fe04 	bl	800385c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008c54:	484a      	ldr	r0, [pc, #296]	; (8008d80 <cppLoop+0x1888>)
 8008c56:	f7fa ffcd 	bl	8003bf4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c5e:	f000 fd57 	bl	8009710 <HAL_Delay>

			led.fullColor('R');
 8008c62:	2152      	movs	r1, #82	; 0x52
 8008c64:	483f      	ldr	r0, [pc, #252]	; (8008d64 <cppLoop+0x186c>)
 8008c66:	f7f9 fad5 	bl	8002214 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008c6a:	4849      	ldr	r0, [pc, #292]	; (8008d90 <cppLoop+0x1898>)
 8008c6c:	f7f8 fd3a 	bl	80016e4 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008c70:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c74:	f000 fd4c 	bl	8009710 <HAL_Delay>

			line_trace.stop();
 8008c78:	4841      	ldr	r0, [pc, #260]	; (8008d80 <cppLoop+0x1888>)
 8008c7a:	f7fb f85b 	bl	8003d34 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8008c7e:	4945      	ldr	r1, [pc, #276]	; (8008d94 <cppLoop+0x189c>)
 8008c80:	4845      	ldr	r0, [pc, #276]	; (8008d98 <cppLoop+0x18a0>)
 8008c82:	f7f8 fd68 	bl	8001756 <user_fopen>
			float d = encoder.getDistance();
 8008c86:	4842      	ldr	r0, [pc, #264]	; (8008d90 <cppLoop+0x1898>)
 8008c88:	f7f8 fd0e 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8008c8c:	eef0 7a40 	vmov.f32	s15, s0
 8008c90:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008c94:	1d3b      	adds	r3, r7, #4
 8008c96:	2201      	movs	r2, #1
 8008c98:	4619      	mov	r1, r3
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	f7f8 fd7e 	bl	800179c <sd_write_float>
			user_fclose();
 8008ca0:	f7f8 fd6c 	bl	800177c <user_fclose>

			led.LR(-1, 0);
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8008caa:	482e      	ldr	r0, [pc, #184]	; (8008d64 <cppLoop+0x186c>)
 8008cac:	f7f9 fb6e 	bl	800238c <_ZN3LED2LREaa>
		}
		break;
 8008cb0:	e3f8      	b.n	80094a4 <cppLoop+0x1fac>

	case 10:
		led.fullColor('~');
 8008cb2:	217e      	movs	r1, #126	; 0x7e
 8008cb4:	482b      	ldr	r0, [pc, #172]	; (8008d64 <cppLoop+0x186c>)
 8008cb6:	f7f9 faad 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008cba:	f7f8 f9f1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f7f8 f9fd 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008cc6:	4835      	ldr	r0, [pc, #212]	; (8008d9c <cppLoop+0x18a4>)
 8008cc8:	f7f8 fa24 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ccc:	2101      	movs	r1, #1
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f7f8 f9f6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008cd4:	4832      	ldr	r0, [pc, #200]	; (8008da0 <cppLoop+0x18a8>)
 8008cd6:	f7f8 fa1d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008cda:	4821      	ldr	r0, [pc, #132]	; (8008d60 <cppLoop+0x1868>)
 8008cdc:	f7f9 fa36 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 83db 	beq.w	80094a8 <cppLoop+0x1fb0>
			HAL_Delay(500);
 8008cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cf6:	f000 fd0b 	bl	8009710 <HAL_Delay>
			led.LR(-1, 1);
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8008d00:	4818      	ldr	r0, [pc, #96]	; (8008d64 <cppLoop+0x186c>)
 8008d02:	f7f9 fb43 	bl	800238c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8008d06:	2102      	movs	r1, #2
 8008d08:	481d      	ldr	r0, [pc, #116]	; (8008d80 <cppLoop+0x1888>)
 8008d0a:	f7fa ff61 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008d0e:	4b25      	ldr	r3, [pc, #148]	; (8008da4 <cppLoop+0x18ac>)
 8008d10:	edd3 7a00 	vldr	s15, [r3]
 8008d14:	eeb0 0a67 	vmov.f32	s0, s15
 8008d18:	4819      	ldr	r0, [pc, #100]	; (8008d80 <cppLoop+0x1888>)
 8008d1a:	f7fa fdae 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008d1e:	4b21      	ldr	r3, [pc, #132]	; (8008da4 <cppLoop+0x18ac>)
 8008d20:	edd3 7a00 	vldr	s15, [r3]
 8008d24:	eeb0 0a67 	vmov.f32	s0, s15
 8008d28:	4815      	ldr	r0, [pc, #84]	; (8008d80 <cppLoop+0x1888>)
 8008d2a:	f7fa fdb6 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <cppLoop+0x18ac>)
 8008d30:	edd3 7a00 	vldr	s15, [r3]
 8008d34:	eeb0 0a67 	vmov.f32	s0, s15
 8008d38:	4811      	ldr	r0, [pc, #68]	; (8008d80 <cppLoop+0x1888>)
 8008d3a:	f7fa fdce 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008d3e:	4810      	ldr	r0, [pc, #64]	; (8008d80 <cppLoop+0x1888>)
 8008d40:	f7fb f93c 	bl	8003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008d44:	2200      	movs	r2, #0
 8008d46:	f04f 31ff 	mov.w	r1, #4294967295
 8008d4a:	4806      	ldr	r0, [pc, #24]	; (8008d64 <cppLoop+0x186c>)
 8008d4c:	f7f9 fb1e 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 8008d50:	e3aa      	b.n	80094a8 <cppLoop+0x1fb0>
 8008d52:	bf00      	nop
 8008d54:	f3af 8000 	nop.w
 8008d58:	9999999a 	.word	0x9999999a
 8008d5c:	3fb99999 	.word	0x3fb99999
 8008d60:	200005ac 	.word	0x200005ac
 8008d64:	200005b8 	.word	0x200005b8
 8008d68:	2004222e 	.word	0x2004222e
 8008d6c:	2004229c 	.word	0x2004229c
 8008d70:	200422a4 	.word	0x200422a4
 8008d74:	0801990c 	.word	0x0801990c
 8008d78:	08019810 	.word	0x08019810
 8008d7c:	08019918 	.word	0x08019918
 8008d80:	2001db4c 	.word	0x2001db4c
 8008d84:	08019924 	.word	0x08019924
 8008d88:	0801992c 	.word	0x0801992c
 8008d8c:	00000000 	.word	0x00000000
 8008d90:	2001daa8 	.word	0x2001daa8
 8008d94:	08019938 	.word	0x08019938
 8008d98:	08019940 	.word	0x08019940
 8008d9c:	0801994c 	.word	0x0801994c
 8008da0:	08019958 	.word	0x08019958
 8008da4:	20042274 	.word	0x20042274

	case 11:
		led.fullColor('~');
 8008da8:	217e      	movs	r1, #126	; 0x7e
 8008daa:	48c4      	ldr	r0, [pc, #784]	; (80090bc <cppLoop+0x1bc4>)
 8008dac:	f7f9 fa32 	bl	8002214 <_ZN3LED9fullColorEc>

lcd_clear();
 8008db0:	f7f8 f976 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008db4:	2100      	movs	r1, #0
 8008db6:	2000      	movs	r0, #0
 8008db8:	f7f8 f982 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8008dbc:	48c0      	ldr	r0, [pc, #768]	; (80090c0 <cppLoop+0x1bc8>)
 8008dbe:	f7f8 f9a9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f7f8 f97b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8008dca:	48be      	ldr	r0, [pc, #760]	; (80090c4 <cppLoop+0x1bcc>)
 8008dcc:	f7f8 f9a2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008dd0:	48bd      	ldr	r0, [pc, #756]	; (80090c8 <cppLoop+0x1bd0>)
 8008dd2:	f7f9 f9bb 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	bf0c      	ite	eq
 8008ddc:	2301      	moveq	r3, #1
 8008dde:	2300      	movne	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8362 	beq.w	80094ac <cppLoop+0x1fb4>
			HAL_Delay(1000);
 8008de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008dec:	f000 fc90 	bl	8009710 <HAL_Delay>
			led.LR(-1, 1);
 8008df0:	2201      	movs	r2, #1
 8008df2:	f04f 31ff 	mov.w	r1, #4294967295
 8008df6:	48b1      	ldr	r0, [pc, #708]	; (80090bc <cppLoop+0x1bc4>)
 8008df8:	f7f9 fac8 	bl	800238c <_ZN3LED2LREaa>

			esc.on(0.35, 0.35, 0.35, 0.35);
 8008dfc:	eddf 1ab3 	vldr	s3, [pc, #716]	; 80090cc <cppLoop+0x1bd4>
 8008e00:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 80090cc <cppLoop+0x1bd4>
 8008e04:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80090cc <cppLoop+0x1bd4>
 8008e08:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80090cc <cppLoop+0x1bd4>
 8008e0c:	48b0      	ldr	r0, [pc, #704]	; (80090d0 <cppLoop+0x1bd8>)
 8008e0e:	f7f8 fa1f 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8008e12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008e16:	f000 fc7b 	bl	8009710 <HAL_Delay>
			esc.off();
 8008e1a:	48ad      	ldr	r0, [pc, #692]	; (80090d0 <cppLoop+0x1bd8>)
 8008e1c:	f7f8 fab2 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8008e20:	2200      	movs	r2, #0
 8008e22:	f04f 31ff 	mov.w	r1, #4294967295
 8008e26:	48a5      	ldr	r0, [pc, #660]	; (80090bc <cppLoop+0x1bc4>)
 8008e28:	f7f9 fab0 	bl	800238c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8008e2c:	e33e      	b.n	80094ac <cppLoop+0x1fb4>

	case 12:
		led.fullColor('~');
 8008e2e:	217e      	movs	r1, #126	; 0x7e
 8008e30:	48a2      	ldr	r0, [pc, #648]	; (80090bc <cppLoop+0x1bc4>)
 8008e32:	f7f9 f9ef 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e36:	f7f8 f933 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f7f8 f93f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008e42:	48a4      	ldr	r0, [pc, #656]	; (80090d4 <cppLoop+0x1bdc>)
 8008e44:	f7f8 f966 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e48:	2101      	movs	r1, #1
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f7f8 f938 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008e50:	48a1      	ldr	r0, [pc, #644]	; (80090d8 <cppLoop+0x1be0>)
 8008e52:	f7f8 f95f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008e56:	489c      	ldr	r0, [pc, #624]	; (80090c8 <cppLoop+0x1bd0>)
 8008e58:	f7f9 f978 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8321 	beq.w	80094b0 <cppLoop+0x1fb8>
			HAL_Delay(1500);
 8008e6e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008e72:	f000 fc4d 	bl	8009710 <HAL_Delay>
			led.LR(-1, 1);
 8008e76:	2201      	movs	r2, #1
 8008e78:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7c:	488f      	ldr	r0, [pc, #572]	; (80090bc <cppLoop+0x1bc4>)
 8008e7e:	f7f9 fa85 	bl	800238c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8008e82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008e86:	f000 fc43 	bl	8009710 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008e8a:	eddf 1a90 	vldr	s3, [pc, #576]	; 80090cc <cppLoop+0x1bd4>
 8008e8e:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80090cc <cppLoop+0x1bd4>
 8008e92:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80090cc <cppLoop+0x1bd4>
 8008e96:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80090cc <cppLoop+0x1bd4>
 8008e9a:	488d      	ldr	r0, [pc, #564]	; (80090d0 <cppLoop+0x1bd8>)
 8008e9c:	f7f8 f9d8 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8008ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ea4:	f000 fc34 	bl	8009710 <HAL_Delay>

			logger.start();
 8008ea8:	488c      	ldr	r0, [pc, #560]	; (80090dc <cppLoop+0x1be4>)
 8008eaa:	f7fb fb86 	bl	80045ba <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8008eae:	488c      	ldr	r0, [pc, #560]	; (80090e0 <cppLoop+0x1be8>)
 8008eb0:	f7fc fc9f 	bl	80057f2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8008eb4:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80090e4 <cppLoop+0x1bec>
 8008eb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008ebc:	4888      	ldr	r0, [pc, #544]	; (80090e0 <cppLoop+0x1be8>)
 8008ebe:	f7fc fc2b 	bl	8005718 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8008ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ec6:	f000 fc23 	bl	8009710 <HAL_Delay>

			logger.stop();
 8008eca:	4884      	ldr	r0, [pc, #528]	; (80090dc <cppLoop+0x1be4>)
 8008ecc:	f7fb fb85 	bl	80045da <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8008ed0:	4883      	ldr	r0, [pc, #524]	; (80090e0 <cppLoop+0x1be8>)
 8008ed2:	f7fc fca1 	bl	8005818 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8008ed6:	487e      	ldr	r0, [pc, #504]	; (80090d0 <cppLoop+0x1bd8>)
 8008ed8:	f7f8 fa54 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008edc:	4a82      	ldr	r2, [pc, #520]	; (80090e8 <cppLoop+0x1bf0>)
 8008ede:	4983      	ldr	r1, [pc, #524]	; (80090ec <cppLoop+0x1bf4>)
 8008ee0:	487e      	ldr	r0, [pc, #504]	; (80090dc <cppLoop+0x1be4>)
 8008ee2:	f7fb fa61 	bl	80043a8 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8008eec:	4873      	ldr	r0, [pc, #460]	; (80090bc <cppLoop+0x1bc4>)
 8008eee:	f7f9 fa4d 	bl	800238c <_ZN3LED2LREaa>
		}
		break;
 8008ef2:	e2dd      	b.n	80094b0 <cppLoop+0x1fb8>

	case 13:

		led.fullColor('W');
 8008ef4:	2157      	movs	r1, #87	; 0x57
 8008ef6:	4871      	ldr	r0, [pc, #452]	; (80090bc <cppLoop+0x1bc4>)
 8008ef8:	f7f9 f98c 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008efc:	f7f8 f8d0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f00:	2100      	movs	r1, #0
 8008f02:	2000      	movs	r0, #0
 8008f04:	f7f8 f8dc 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008f08:	4879      	ldr	r0, [pc, #484]	; (80090f0 <cppLoop+0x1bf8>)
 8008f0a:	f7f8 f903 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f0e:	2101      	movs	r1, #1
 8008f10:	2000      	movs	r0, #0
 8008f12:	f7f8 f8d5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008f16:	4b77      	ldr	r3, [pc, #476]	; (80090f4 <cppLoop+0x1bfc>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f7 fb2c 	bl	8000578 <__aeabi_f2d>
 8008f20:	4603      	mov	r3, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	461a      	mov	r2, r3
 8008f26:	4623      	mov	r3, r4
 8008f28:	4873      	ldr	r0, [pc, #460]	; (80090f8 <cppLoop+0x1c00>)
 8008f2a:	f7f8 f8f3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008f2e:	4866      	ldr	r0, [pc, #408]	; (80090c8 <cppLoop+0x1bd0>)
 8008f30:	f7f9 f90c 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	bf0c      	ite	eq
 8008f3a:	2301      	moveq	r3, #1
 8008f3c:	2300      	movne	r3, #0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 82b7 	beq.w	80094b4 <cppLoop+0x1fbc>
			HAL_Delay(500);
 8008f46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f4a:	f000 fbe1 	bl	8009710 <HAL_Delay>

			led.LR(1, -1);
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f52:	2101      	movs	r1, #1
 8008f54:	4859      	ldr	r0, [pc, #356]	; (80090bc <cppLoop+0x1bc4>)
 8008f56:	f7f9 fa19 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008f5a:	2102      	movs	r1, #2
 8008f5c:	4867      	ldr	r0, [pc, #412]	; (80090fc <cppLoop+0x1c04>)
 8008f5e:	f7fa fe37 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008f62:	4b67      	ldr	r3, [pc, #412]	; (8009100 <cppLoop+0x1c08>)
 8008f64:	edd3 7a00 	vldr	s15, [r3]
 8008f68:	eeb0 0a67 	vmov.f32	s0, s15
 8008f6c:	4863      	ldr	r0, [pc, #396]	; (80090fc <cppLoop+0x1c04>)
 8008f6e:	f7fa fc84 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008f72:	4b60      	ldr	r3, [pc, #384]	; (80090f4 <cppLoop+0x1bfc>)
 8008f74:	edd3 7a00 	vldr	s15, [r3]
 8008f78:	eeb0 0a67 	vmov.f32	s0, s15
 8008f7c:	485f      	ldr	r0, [pc, #380]	; (80090fc <cppLoop+0x1c04>)
 8008f7e:	f7fa fc8c 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008f82:	4b5c      	ldr	r3, [pc, #368]	; (80090f4 <cppLoop+0x1bfc>)
 8008f84:	edd3 7a00 	vldr	s15, [r3]
 8008f88:	eeb0 0a67 	vmov.f32	s0, s15
 8008f8c:	485b      	ldr	r0, [pc, #364]	; (80090fc <cppLoop+0x1c04>)
 8008f8e:	f7fa fca4 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008f92:	485a      	ldr	r0, [pc, #360]	; (80090fc <cppLoop+0x1c04>)
 8008f94:	f7fb f812 	bl	8003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 8008f98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008f9c:	f000 fbb8 	bl	8009710 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008fa0:	eddf 1a4a 	vldr	s3, [pc, #296]	; 80090cc <cppLoop+0x1bd4>
 8008fa4:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80090cc <cppLoop+0x1bd4>
 8008fa8:	eddf 0a48 	vldr	s1, [pc, #288]	; 80090cc <cppLoop+0x1bd4>
 8008fac:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80090cc <cppLoop+0x1bd4>
 8008fb0:	4847      	ldr	r0, [pc, #284]	; (80090d0 <cppLoop+0x1bd8>)
 8008fb2:	f7f8 f94d 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8008fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fba:	f000 fba9 	bl	8009710 <HAL_Delay>

			line_trace.running();
 8008fbe:	484f      	ldr	r0, [pc, #316]	; (80090fc <cppLoop+0x1c04>)
 8008fc0:	f7fa fe44 	bl	8003c4c <_ZN9LineTrace7runningEv>

			esc.off();
 8008fc4:	4842      	ldr	r0, [pc, #264]	; (80090d0 <cppLoop+0x1bd8>)
 8008fc6:	f7f8 f9dd 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8008fca:	f04f 32ff 	mov.w	r2, #4294967295
 8008fce:	2100      	movs	r1, #0
 8008fd0:	483a      	ldr	r0, [pc, #232]	; (80090bc <cppLoop+0x1bc4>)
 8008fd2:	f7f9 f9db 	bl	800238c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8008fd6:	e26d      	b.n	80094b4 <cppLoop+0x1fbc>

	case 14:
		led.fullColor('W');
 8008fd8:	2157      	movs	r1, #87	; 0x57
 8008fda:	4838      	ldr	r0, [pc, #224]	; (80090bc <cppLoop+0x1bc4>)
 8008fdc:	f7f9 f91a 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fe0:	f7f8 f85e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f7f8 f86a 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008fec:	4845      	ldr	r0, [pc, #276]	; (8009104 <cppLoop+0x1c0c>)
 8008fee:	f7f8 f891 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7f8 f863 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008ffa:	4b43      	ldr	r3, [pc, #268]	; (8009108 <cppLoop+0x1c10>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f7 faba 	bl	8000578 <__aeabi_f2d>
 8009004:	4603      	mov	r3, r0
 8009006:	460c      	mov	r4, r1
 8009008:	461a      	mov	r2, r3
 800900a:	4623      	mov	r3, r4
 800900c:	483a      	ldr	r0, [pc, #232]	; (80090f8 <cppLoop+0x1c00>)
 800900e:	f7f8 f881 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009012:	482d      	ldr	r0, [pc, #180]	; (80090c8 <cppLoop+0x1bd0>)
 8009014:	f7f9 f89a 	bl	800214c <_ZN8JoyStick8getValueEv>
 8009018:	4603      	mov	r3, r0
 800901a:	2b02      	cmp	r3, #2
 800901c:	bf0c      	ite	eq
 800901e:	2301      	moveq	r3, #1
 8009020:	2300      	movne	r3, #0
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8247 	beq.w	80094b8 <cppLoop+0x1fc0>
			HAL_Delay(500);
 800902a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800902e:	f000 fb6f 	bl	8009710 <HAL_Delay>

			led.LR(1, -1);
 8009032:	f04f 32ff 	mov.w	r2, #4294967295
 8009036:	2101      	movs	r1, #1
 8009038:	4820      	ldr	r0, [pc, #128]	; (80090bc <cppLoop+0x1bc4>)
 800903a:	f7f9 f9a7 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800903e:	2101      	movs	r1, #1
 8009040:	482e      	ldr	r0, [pc, #184]	; (80090fc <cppLoop+0x1c04>)
 8009042:	f7fa fdc5 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009046:	4b31      	ldr	r3, [pc, #196]	; (800910c <cppLoop+0x1c14>)
 8009048:	edd3 7a00 	vldr	s15, [r3]
 800904c:	eeb0 0a67 	vmov.f32	s0, s15
 8009050:	482a      	ldr	r0, [pc, #168]	; (80090fc <cppLoop+0x1c04>)
 8009052:	f7fa fc12 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009056:	4b2c      	ldr	r3, [pc, #176]	; (8009108 <cppLoop+0x1c10>)
 8009058:	edd3 7a00 	vldr	s15, [r3]
 800905c:	eeb0 0a67 	vmov.f32	s0, s15
 8009060:	4826      	ldr	r0, [pc, #152]	; (80090fc <cppLoop+0x1c04>)
 8009062:	f7fa fc1a 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009066:	4b29      	ldr	r3, [pc, #164]	; (800910c <cppLoop+0x1c14>)
 8009068:	edd3 7a00 	vldr	s15, [r3]
 800906c:	eeb0 0a67 	vmov.f32	s0, s15
 8009070:	4822      	ldr	r0, [pc, #136]	; (80090fc <cppLoop+0x1c04>)
 8009072:	f7fa fc32 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009076:	4821      	ldr	r0, [pc, #132]	; (80090fc <cppLoop+0x1c04>)
 8009078:	f7fa ffa0 	bl	8003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 800907c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009080:	f000 fb46 	bl	8009710 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8009084:	eddf 1a11 	vldr	s3, [pc, #68]	; 80090cc <cppLoop+0x1bd4>
 8009088:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80090cc <cppLoop+0x1bd4>
 800908c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80090cc <cppLoop+0x1bd4>
 8009090:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80090cc <cppLoop+0x1bd4>
 8009094:	480e      	ldr	r0, [pc, #56]	; (80090d0 <cppLoop+0x1bd8>)
 8009096:	f7f8 f8db 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800909a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800909e:	f000 fb37 	bl	8009710 <HAL_Delay>

			line_trace.running();
 80090a2:	4816      	ldr	r0, [pc, #88]	; (80090fc <cppLoop+0x1c04>)
 80090a4:	f7fa fdd2 	bl	8003c4c <_ZN9LineTrace7runningEv>

			esc.off();
 80090a8:	4809      	ldr	r0, [pc, #36]	; (80090d0 <cppLoop+0x1bd8>)
 80090aa:	f7f8 f96b 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	2100      	movs	r1, #0
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <cppLoop+0x1bc4>)
 80090b6:	f7f9 f969 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 80090ba:	e1fd      	b.n	80094b8 <cppLoop+0x1fc0>
 80090bc:	200005b8 	.word	0x200005b8
 80090c0:	08019964 	.word	0x08019964
 80090c4:	08019968 	.word	0x08019968
 80090c8:	200005ac 	.word	0x200005ac
 80090cc:	3eb33333 	.word	0x3eb33333
 80090d0:	2001db48 	.word	0x2001db48
 80090d4:	08019970 	.word	0x08019970
 80090d8:	08019974 	.word	0x08019974
 80090dc:	200005dc 	.word	0x200005dc
 80090e0:	2001dac8 	.word	0x2001dac8
 80090e4:	00000000 	.word	0x00000000
 80090e8:	08019980 	.word	0x08019980
 80090ec:	0801998c 	.word	0x0801998c
 80090f0:	08019998 	.word	0x08019998
 80090f4:	20042274 	.word	0x20042274
 80090f8:	0801983c 	.word	0x0801983c
 80090fc:	2001db4c 	.word	0x2001db4c
 8009100:	20042284 	.word	0x20042284
 8009104:	080199a4 	.word	0x080199a4
 8009108:	2004226c 	.word	0x2004226c
 800910c:	2004227c 	.word	0x2004227c

	case 15:
		led.fullColor('W');
 8009110:	2157      	movs	r1, #87	; 0x57
 8009112:	48ab      	ldr	r0, [pc, #684]	; (80093c0 <cppLoop+0x1ec8>)
 8009114:	f7f9 f87e 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009118:	f7f7 ffc2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800911c:	2100      	movs	r1, #0
 800911e:	2000      	movs	r0, #0
 8009120:	f7f7 ffce 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009124:	48a7      	ldr	r0, [pc, #668]	; (80093c4 <cppLoop+0x1ecc>)
 8009126:	f7fa fb26 	bl	8003776 <_ZN9LineTrace5getKpEv>
 800912a:	eeb0 7a40 	vmov.f32	s14, s0
 800912e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80093c8 <cppLoop+0x1ed0>
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	eeb0 0a67 	vmov.f32	s0, s15
 800913a:	f7f9 fc97 	bl	8002a6c <_ZSt3absf>
 800913e:	ee10 3a10 	vmov	r3, s0
 8009142:	4618      	mov	r0, r3
 8009144:	f7f7 fa18 	bl	8000578 <__aeabi_f2d>
 8009148:	4603      	mov	r3, r0
 800914a:	460c      	mov	r4, r1
 800914c:	461a      	mov	r2, r3
 800914e:	4623      	mov	r3, r4
 8009150:	489e      	ldr	r0, [pc, #632]	; (80093cc <cppLoop+0x1ed4>)
 8009152:	f7f7 ffdf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009156:	2101      	movs	r1, #1
 8009158:	2000      	movs	r0, #0
 800915a:	f7f7 ffb1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800915e:	4899      	ldr	r0, [pc, #612]	; (80093c4 <cppLoop+0x1ecc>)
 8009160:	f7fa fb18 	bl	8003794 <_ZN9LineTrace5getKiEv>
 8009164:	eeb0 7a40 	vmov.f32	s14, s0
 8009168:	eddf 7a99 	vldr	s15, [pc, #612]	; 80093d0 <cppLoop+0x1ed8>
 800916c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009170:	eeb0 0a67 	vmov.f32	s0, s15
 8009174:	f7f9 fc7a 	bl	8002a6c <_ZSt3absf>
 8009178:	ee10 3a10 	vmov	r3, s0
 800917c:	4618      	mov	r0, r3
 800917e:	f7f7 f9fb 	bl	8000578 <__aeabi_f2d>
 8009182:	4605      	mov	r5, r0
 8009184:	460e      	mov	r6, r1
 8009186:	488f      	ldr	r0, [pc, #572]	; (80093c4 <cppLoop+0x1ecc>)
 8009188:	f7fa fb13 	bl	80037b2 <_ZN9LineTrace5getKdEv>
 800918c:	eeb0 7a40 	vmov.f32	s14, s0
 8009190:	eddf 7a90 	vldr	s15, [pc, #576]	; 80093d4 <cppLoop+0x1edc>
 8009194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009198:	eeb0 0a67 	vmov.f32	s0, s15
 800919c:	f7f9 fc66 	bl	8002a6c <_ZSt3absf>
 80091a0:	ee10 3a10 	vmov	r3, s0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7f7 f9e7 	bl	8000578 <__aeabi_f2d>
 80091aa:	4603      	mov	r3, r0
 80091ac:	460c      	mov	r4, r1
 80091ae:	e9cd 3400 	strd	r3, r4, [sp]
 80091b2:	462a      	mov	r2, r5
 80091b4:	4633      	mov	r3, r6
 80091b6:	4888      	ldr	r0, [pc, #544]	; (80093d8 <cppLoop+0x1ee0>)
 80091b8:	f7f7 ffac 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80091bc:	4887      	ldr	r0, [pc, #540]	; (80093dc <cppLoop+0x1ee4>)
 80091be:	f7f8 ffc5 	bl	800214c <_ZN8JoyStick8getValueEv>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	bf0c      	ite	eq
 80091c8:	2301      	moveq	r3, #1
 80091ca:	2300      	movne	r3, #0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d021      	beq.n	8009216 <cppLoop+0x1d1e>
			led.LR(-1, 1);
 80091d2:	2201      	movs	r2, #1
 80091d4:	f04f 31ff 	mov.w	r1, #4294967295
 80091d8:	4879      	ldr	r0, [pc, #484]	; (80093c0 <cppLoop+0x1ec8>)
 80091da:	f7f9 f8d7 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091e2:	f000 fa95 	bl	8009710 <HAL_Delay>

			selector++;
 80091e6:	4b7e      	ldr	r3, [pc, #504]	; (80093e0 <cppLoop+0x1ee8>)
 80091e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3301      	adds	r3, #1
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	b21a      	sxth	r2, r3
 80091f4:	4b7a      	ldr	r3, [pc, #488]	; (80093e0 <cppLoop+0x1ee8>)
 80091f6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80091f8:	4b79      	ldr	r3, [pc, #484]	; (80093e0 <cppLoop+0x1ee8>)
 80091fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	dd02      	ble.n	8009208 <cppLoop+0x1d10>
 8009202:	4b77      	ldr	r3, [pc, #476]	; (80093e0 <cppLoop+0x1ee8>)
 8009204:	2200      	movs	r2, #0
 8009206:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009208:	2200      	movs	r2, #0
 800920a:	f04f 31ff 	mov.w	r1, #4294967295
 800920e:	486c      	ldr	r0, [pc, #432]	; (80093c0 <cppLoop+0x1ec8>)
 8009210:	f7f9 f8bc 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009214:	e152      	b.n	80094bc <cppLoop+0x1fc4>
		else if(joy_stick.getValue() == JOY_R){
 8009216:	4871      	ldr	r0, [pc, #452]	; (80093dc <cppLoop+0x1ee4>)
 8009218:	f7f8 ff98 	bl	800214c <_ZN8JoyStick8getValueEv>
 800921c:	4603      	mov	r3, r0
 800921e:	2b10      	cmp	r3, #16
 8009220:	bf0c      	ite	eq
 8009222:	2301      	moveq	r3, #1
 8009224:	2300      	movne	r3, #0
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d058      	beq.n	80092de <cppLoop+0x1de6>
			led.LR(-1, 1);
 800922c:	2201      	movs	r2, #1
 800922e:	f04f 31ff 	mov.w	r1, #4294967295
 8009232:	4863      	ldr	r0, [pc, #396]	; (80093c0 <cppLoop+0x1ec8>)
 8009234:	f7f9 f8aa 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009238:	2064      	movs	r0, #100	; 0x64
 800923a:	f000 fa69 	bl	8009710 <HAL_Delay>
			if(selector == 0){
 800923e:	4b68      	ldr	r3, [pc, #416]	; (80093e0 <cppLoop+0x1ee8>)
 8009240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d113      	bne.n	8009270 <cppLoop+0x1d78>
				adj_kp = adj_kp + 0.00001;
 8009248:	4b66      	ldr	r3, [pc, #408]	; (80093e4 <cppLoop+0x1eec>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f7f7 f993 	bl	8000578 <__aeabi_f2d>
 8009252:	a355      	add	r3, pc, #340	; (adr r3, 80093a8 <cppLoop+0x1eb0>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f7 f830 	bl	80002bc <__adddf3>
 800925c:	4603      	mov	r3, r0
 800925e:	460c      	mov	r4, r1
 8009260:	4618      	mov	r0, r3
 8009262:	4621      	mov	r1, r4
 8009264:	f7f7 fcd8 	bl	8000c18 <__aeabi_d2f>
 8009268:	4602      	mov	r2, r0
 800926a:	4b5e      	ldr	r3, [pc, #376]	; (80093e4 <cppLoop+0x1eec>)
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e02b      	b.n	80092c8 <cppLoop+0x1dd0>
			else if(selector == 1){
 8009270:	4b5b      	ldr	r3, [pc, #364]	; (80093e0 <cppLoop+0x1ee8>)
 8009272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d113      	bne.n	80092a2 <cppLoop+0x1daa>
				adj_ki = adj_ki + 0.0001;
 800927a:	4b5b      	ldr	r3, [pc, #364]	; (80093e8 <cppLoop+0x1ef0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7f7 f97a 	bl	8000578 <__aeabi_f2d>
 8009284:	a34a      	add	r3, pc, #296	; (adr r3, 80093b0 <cppLoop+0x1eb8>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f7 f817 	bl	80002bc <__adddf3>
 800928e:	4603      	mov	r3, r0
 8009290:	460c      	mov	r4, r1
 8009292:	4618      	mov	r0, r3
 8009294:	4621      	mov	r1, r4
 8009296:	f7f7 fcbf 	bl	8000c18 <__aeabi_d2f>
 800929a:	4602      	mov	r2, r0
 800929c:	4b52      	ldr	r3, [pc, #328]	; (80093e8 <cppLoop+0x1ef0>)
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	e012      	b.n	80092c8 <cppLoop+0x1dd0>
				adj_kd = adj_kd + 0.000001;
 80092a2:	4b52      	ldr	r3, [pc, #328]	; (80093ec <cppLoop+0x1ef4>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7f7 f966 	bl	8000578 <__aeabi_f2d>
 80092ac:	a342      	add	r3, pc, #264	; (adr r3, 80093b8 <cppLoop+0x1ec0>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f7 f803 	bl	80002bc <__adddf3>
 80092b6:	4603      	mov	r3, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	4618      	mov	r0, r3
 80092bc:	4621      	mov	r1, r4
 80092be:	f7f7 fcab 	bl	8000c18 <__aeabi_d2f>
 80092c2:	4602      	mov	r2, r0
 80092c4:	4b49      	ldr	r3, [pc, #292]	; (80093ec <cppLoop+0x1ef4>)
 80092c6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80092c8:	2152      	movs	r1, #82	; 0x52
 80092ca:	483d      	ldr	r0, [pc, #244]	; (80093c0 <cppLoop+0x1ec8>)
 80092cc:	f7f8 ffa2 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80092d0:	2200      	movs	r2, #0
 80092d2:	f04f 31ff 	mov.w	r1, #4294967295
 80092d6:	483a      	ldr	r0, [pc, #232]	; (80093c0 <cppLoop+0x1ec8>)
 80092d8:	f7f9 f858 	bl	800238c <_ZN3LED2LREaa>
		break;
 80092dc:	e0ee      	b.n	80094bc <cppLoop+0x1fc4>
		else if(joy_stick.getValue() == JOY_L){
 80092de:	483f      	ldr	r0, [pc, #252]	; (80093dc <cppLoop+0x1ee4>)
 80092e0:	f7f8 ff34 	bl	800214c <_ZN8JoyStick8getValueEv>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	bf0c      	ite	eq
 80092ea:	2301      	moveq	r3, #1
 80092ec:	2300      	movne	r3, #0
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d07d      	beq.n	80093f0 <cppLoop+0x1ef8>
			led.LR(-1, 1);
 80092f4:	2201      	movs	r2, #1
 80092f6:	f04f 31ff 	mov.w	r1, #4294967295
 80092fa:	4831      	ldr	r0, [pc, #196]	; (80093c0 <cppLoop+0x1ec8>)
 80092fc:	f7f9 f846 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009300:	2064      	movs	r0, #100	; 0x64
 8009302:	f000 fa05 	bl	8009710 <HAL_Delay>
			if(selector == 0){
 8009306:	4b36      	ldr	r3, [pc, #216]	; (80093e0 <cppLoop+0x1ee8>)
 8009308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d113      	bne.n	8009338 <cppLoop+0x1e40>
				adj_kp = adj_kp - 0.00001;
 8009310:	4b34      	ldr	r3, [pc, #208]	; (80093e4 <cppLoop+0x1eec>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4618      	mov	r0, r3
 8009316:	f7f7 f92f 	bl	8000578 <__aeabi_f2d>
 800931a:	a323      	add	r3, pc, #140	; (adr r3, 80093a8 <cppLoop+0x1eb0>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f6 ffca 	bl	80002b8 <__aeabi_dsub>
 8009324:	4603      	mov	r3, r0
 8009326:	460c      	mov	r4, r1
 8009328:	4618      	mov	r0, r3
 800932a:	4621      	mov	r1, r4
 800932c:	f7f7 fc74 	bl	8000c18 <__aeabi_d2f>
 8009330:	4602      	mov	r2, r0
 8009332:	4b2c      	ldr	r3, [pc, #176]	; (80093e4 <cppLoop+0x1eec>)
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	e02b      	b.n	8009390 <cppLoop+0x1e98>
			else if(selector == 1){
 8009338:	4b29      	ldr	r3, [pc, #164]	; (80093e0 <cppLoop+0x1ee8>)
 800933a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d113      	bne.n	800936a <cppLoop+0x1e72>
				adj_ki = adj_ki - 0.0001;
 8009342:	4b29      	ldr	r3, [pc, #164]	; (80093e8 <cppLoop+0x1ef0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f7f7 f916 	bl	8000578 <__aeabi_f2d>
 800934c:	a318      	add	r3, pc, #96	; (adr r3, 80093b0 <cppLoop+0x1eb8>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ffb1 	bl	80002b8 <__aeabi_dsub>
 8009356:	4603      	mov	r3, r0
 8009358:	460c      	mov	r4, r1
 800935a:	4618      	mov	r0, r3
 800935c:	4621      	mov	r1, r4
 800935e:	f7f7 fc5b 	bl	8000c18 <__aeabi_d2f>
 8009362:	4602      	mov	r2, r0
 8009364:	4b20      	ldr	r3, [pc, #128]	; (80093e8 <cppLoop+0x1ef0>)
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	e012      	b.n	8009390 <cppLoop+0x1e98>
				adj_kd = adj_kd - 0.000001;
 800936a:	4b20      	ldr	r3, [pc, #128]	; (80093ec <cppLoop+0x1ef4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f7f7 f902 	bl	8000578 <__aeabi_f2d>
 8009374:	a310      	add	r3, pc, #64	; (adr r3, 80093b8 <cppLoop+0x1ec0>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff9d 	bl	80002b8 <__aeabi_dsub>
 800937e:	4603      	mov	r3, r0
 8009380:	460c      	mov	r4, r1
 8009382:	4618      	mov	r0, r3
 8009384:	4621      	mov	r1, r4
 8009386:	f7f7 fc47 	bl	8000c18 <__aeabi_d2f>
 800938a:	4602      	mov	r2, r0
 800938c:	4b17      	ldr	r3, [pc, #92]	; (80093ec <cppLoop+0x1ef4>)
 800938e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009390:	2152      	movs	r1, #82	; 0x52
 8009392:	480b      	ldr	r0, [pc, #44]	; (80093c0 <cppLoop+0x1ec8>)
 8009394:	f7f8 ff3e 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009398:	2200      	movs	r2, #0
 800939a:	f04f 31ff 	mov.w	r1, #4294967295
 800939e:	4808      	ldr	r0, [pc, #32]	; (80093c0 <cppLoop+0x1ec8>)
 80093a0:	f7f8 fff4 	bl	800238c <_ZN3LED2LREaa>
		break;
 80093a4:	e08a      	b.n	80094bc <cppLoop+0x1fc4>
 80093a6:	bf00      	nop
 80093a8:	88e368f1 	.word	0x88e368f1
 80093ac:	3ee4f8b5 	.word	0x3ee4f8b5
 80093b0:	eb1c432d 	.word	0xeb1c432d
 80093b4:	3f1a36e2 	.word	0x3f1a36e2
 80093b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80093bc:	3eb0c6f7 	.word	0x3eb0c6f7
 80093c0:	200005b8 	.word	0x200005b8
 80093c4:	2001db4c 	.word	0x2001db4c
 80093c8:	447a0000 	.word	0x447a0000
 80093cc:	080199b0 	.word	0x080199b0
 80093d0:	42c80000 	.word	0x42c80000
 80093d4:	461c4000 	.word	0x461c4000
 80093d8:	080197f4 	.word	0x080197f4
 80093dc:	200005ac 	.word	0x200005ac
 80093e0:	2004222a 	.word	0x2004222a
 80093e4:	20042234 	.word	0x20042234
 80093e8:	2004223c 	.word	0x2004223c
 80093ec:	20042244 	.word	0x20042244
		else if(joy_stick.getValue() == JOY_C){
 80093f0:	4836      	ldr	r0, [pc, #216]	; (80094cc <cppLoop+0x1fd4>)
 80093f2:	f7f8 feab 	bl	800214c <_ZN8JoyStick8getValueEv>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	bf0c      	ite	eq
 80093fc:	2301      	moveq	r3, #1
 80093fe:	2300      	movne	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d05a      	beq.n	80094bc <cppLoop+0x1fc4>
			led.LR(-1, 1);
 8009406:	2201      	movs	r2, #1
 8009408:	f04f 31ff 	mov.w	r1, #4294967295
 800940c:	4830      	ldr	r0, [pc, #192]	; (80094d0 <cppLoop+0x1fd8>)
 800940e:	f7f8 ffbd 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009412:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009416:	f000 f97b 	bl	8009710 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800941a:	2300      	movs	r3, #0
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	4b2d      	ldr	r3, [pc, #180]	; (80094d4 <cppLoop+0x1fdc>)
 8009420:	2201      	movs	r2, #1
 8009422:	492d      	ldr	r1, [pc, #180]	; (80094d8 <cppLoop+0x1fe0>)
 8009424:	482d      	ldr	r0, [pc, #180]	; (80094dc <cppLoop+0x1fe4>)
 8009426:	f7f8 fa0b 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800942a:	2300      	movs	r3, #0
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4b2c      	ldr	r3, [pc, #176]	; (80094e0 <cppLoop+0x1fe8>)
 8009430:	2201      	movs	r2, #1
 8009432:	492c      	ldr	r1, [pc, #176]	; (80094e4 <cppLoop+0x1fec>)
 8009434:	4829      	ldr	r0, [pc, #164]	; (80094dc <cppLoop+0x1fe4>)
 8009436:	f7f8 fa03 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800943a:	2300      	movs	r3, #0
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4b2a      	ldr	r3, [pc, #168]	; (80094e8 <cppLoop+0x1ff0>)
 8009440:	2201      	movs	r2, #1
 8009442:	492a      	ldr	r1, [pc, #168]	; (80094ec <cppLoop+0x1ff4>)
 8009444:	4825      	ldr	r0, [pc, #148]	; (80094dc <cppLoop+0x1fe4>)
 8009446:	f7f8 f9fb 	bl	8001840 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800944a:	4b22      	ldr	r3, [pc, #136]	; (80094d4 <cppLoop+0x1fdc>)
 800944c:	edd3 7a00 	vldr	s15, [r3]
 8009450:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <cppLoop+0x1fe8>)
 8009452:	ed93 7a00 	vldr	s14, [r3]
 8009456:	4b24      	ldr	r3, [pc, #144]	; (80094e8 <cppLoop+0x1ff0>)
 8009458:	edd3 6a00 	vldr	s13, [r3]
 800945c:	eeb0 1a66 	vmov.f32	s2, s13
 8009460:	eef0 0a47 	vmov.f32	s1, s14
 8009464:	eeb0 0a67 	vmov.f32	s0, s15
 8009468:	4821      	ldr	r0, [pc, #132]	; (80094f0 <cppLoop+0x1ff8>)
 800946a:	f7fa f96b 	bl	8003744 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800946e:	2200      	movs	r2, #0
 8009470:	f04f 31ff 	mov.w	r1, #4294967295
 8009474:	4816      	ldr	r0, [pc, #88]	; (80094d0 <cppLoop+0x1fd8>)
 8009476:	f7f8 ff89 	bl	800238c <_ZN3LED2LREaa>
		break;
 800947a:	e01f      	b.n	80094bc <cppLoop+0x1fc4>

	default:
		break;
 800947c:	bf00      	nop
 800947e:	e01e      	b.n	80094be <cppLoop+0x1fc6>
		break;
 8009480:	bf00      	nop
 8009482:	e01c      	b.n	80094be <cppLoop+0x1fc6>
		break;
 8009484:	bf00      	nop
 8009486:	e01a      	b.n	80094be <cppLoop+0x1fc6>
		break;
 8009488:	bf00      	nop
 800948a:	e018      	b.n	80094be <cppLoop+0x1fc6>
		break;
 800948c:	bf00      	nop
 800948e:	e016      	b.n	80094be <cppLoop+0x1fc6>
		break;
 8009490:	bf00      	nop
 8009492:	e014      	b.n	80094be <cppLoop+0x1fc6>
		break;
 8009494:	bf00      	nop
 8009496:	e012      	b.n	80094be <cppLoop+0x1fc6>
		break;
 8009498:	bf00      	nop
 800949a:	e010      	b.n	80094be <cppLoop+0x1fc6>
		break;
 800949c:	bf00      	nop
 800949e:	e00e      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094a0:	bf00      	nop
 80094a2:	e00c      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094a4:	bf00      	nop
 80094a6:	e00a      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094a8:	bf00      	nop
 80094aa:	e008      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094ac:	bf00      	nop
 80094ae:	e006      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094b0:	bf00      	nop
 80094b2:	e004      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094b4:	bf00      	nop
 80094b6:	e002      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094b8:	bf00      	nop
 80094ba:	e000      	b.n	80094be <cppLoop+0x1fc6>
		break;
 80094bc:	bf00      	nop

	}

	HAL_Delay(30);
 80094be:	201e      	movs	r0, #30
 80094c0:	f000 f926 	bl	8009710 <HAL_Delay>

}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094cc:	200005ac 	.word	0x200005ac
 80094d0:	200005b8 	.word	0x200005b8
 80094d4:	20042234 	.word	0x20042234
 80094d8:	080199bc 	.word	0x080199bc
 80094dc:	08019810 	.word	0x08019810
 80094e0:	2004223c 	.word	0x2004223c
 80094e4:	080199c4 	.word	0x080199c4
 80094e8:	20042244 	.word	0x20042244
 80094ec:	080199cc 	.word	0x080199cc
 80094f0:	2001db4c 	.word	0x2001db4c

080094f4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af06      	add	r7, sp, #24
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d142      	bne.n	800958a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800950a:	4293      	cmp	r3, r2
 800950c:	d13d      	bne.n	800958a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 800950e:	4821      	ldr	r0, [pc, #132]	; (8009594 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009510:	f7f8 ff74 	bl	80023fc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009514:	4820      	ldr	r0, [pc, #128]	; (8009598 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009516:	f7fb fc4f 	bl	8004db8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800951a:	4820      	ldr	r0, [pc, #128]	; (800959c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800951c:	f7f8 fe0a 	bl	8002134 <_ZN8JoyStickC1Ev>
Motor motor;
 8009520:	481f      	ldr	r0, [pc, #124]	; (80095a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009522:	f7fb f86a 	bl	80045fa <_ZN5MotorC1Ev>
IMU imu;
 8009526:	481f      	ldr	r0, [pc, #124]	; (80095a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009528:	f7f8 fc02 	bl	8001d30 <_ZN3IMUC1Ev>
Logger logger;
 800952c:	481e      	ldr	r0, [pc, #120]	; (80095a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800952e:	f7fa fe35 	bl	800419c <_ZN6LoggerC1Ev>
Encoder encoder;
 8009532:	481e      	ldr	r0, [pc, #120]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009534:	f7f7 ff4a 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800953a:	4a1c      	ldr	r2, [pc, #112]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800953c:	4918      	ldr	r1, [pc, #96]	; (80095a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800953e:	481c      	ldr	r0, [pc, #112]	; (80095b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009540:	f7fb ffb6 	bl	80054b0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009544:	4b1a      	ldr	r3, [pc, #104]	; (80095b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009546:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009548:	4918      	ldr	r1, [pc, #96]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800954a:	481a      	ldr	r0, [pc, #104]	; (80095b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800954c:	f7fb f954 	bl	80047f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009550:	4819      	ldr	r0, [pc, #100]	; (80095b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009552:	f7f7 fe3f 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009556:	4b18      	ldr	r3, [pc, #96]	; (80095b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	4b12      	ldr	r3, [pc, #72]	; (80095a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009560:	9303      	str	r3, [sp, #12]
 8009562:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009564:	9302      	str	r3, [sp, #8]
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009570:	4a08      	ldr	r2, [pc, #32]	; (8009594 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009572:	490b      	ldr	r1, [pc, #44]	; (80095a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009574:	4811      	ldr	r0, [pc, #68]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009576:	f7f9 fa89 	bl	8002a8c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 800957a:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800957c:	490a      	ldr	r1, [pc, #40]	; (80095a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800957e:	4810      	ldr	r0, [pc, #64]	; (80095c0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009580:	f7fb fd7c 	bl	800507c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009584:	480f      	ldr	r0, [pc, #60]	; (80095c4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009586:	f7fb faa9 	bl	8004adc <_ZN13PathFollowingC1Ev>
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	200002a8 	.word	0x200002a8
 8009598:	200005a0 	.word	0x200005a0
 800959c:	200005ac 	.word	0x200005ac
 80095a0:	200005b4 	.word	0x200005b4
 80095a4:	200005c8 	.word	0x200005c8
 80095a8:	200005dc 	.word	0x200005dc
 80095ac:	2001daa8 	.word	0x2001daa8
 80095b0:	2001dac8 	.word	0x2001dac8
 80095b4:	2001db08 	.word	0x2001db08
 80095b8:	2001db48 	.word	0x2001db48
 80095bc:	2001db4c 	.word	0x2001db4c
 80095c0:	2002a8f4 	.word	0x2002a8f4
 80095c4:	2002ab00 	.word	0x2002ab00

080095c8 <_GLOBAL__sub_I_line_sensor>:
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80095d0:	2001      	movs	r0, #1
 80095d2:	f7ff ff8f 	bl	80094f4 <_Z41__static_initialization_and_destruction_0ii>
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80095d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80095dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80095de:	e003      	b.n	80095e8 <LoopCopyDataInit>

080095e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80095e0:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80095e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80095e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80095e6:	3104      	adds	r1, #4

080095e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80095e8:	480b      	ldr	r0, [pc, #44]	; (8009618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80095ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80095ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80095f0:	d3f6      	bcc.n	80095e0 <CopyDataInit>
  ldr  r2, =_sbss
 80095f2:	4a0b      	ldr	r2, [pc, #44]	; (8009620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80095f4:	e002      	b.n	80095fc <LoopFillZerobss>

080095f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80095f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80095f8:	f842 3b04 	str.w	r3, [r2], #4

080095fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80095fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009600:	d3f9      	bcc.n	80095f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009602:	f7fd fe57 	bl	80072b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009606:	f00b fdd3 	bl	80151b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800960a:	f7fc f991 	bl	8005930 <main>
  bx  lr    
 800960e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009610:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009614:	08019fc0 	.word	0x08019fc0
  ldr  r0, =_sdata
 8009618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800961c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009620:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009624:	20046c88 	.word	0x20046c88

08009628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009628:	e7fe      	b.n	8009628 <ADC_IRQHandler>
	...

0800962c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009630:	4b0e      	ldr	r3, [pc, #56]	; (800966c <HAL_Init+0x40>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a0d      	ldr	r2, [pc, #52]	; (800966c <HAL_Init+0x40>)
 8009636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800963a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <HAL_Init+0x40>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <HAL_Init+0x40>)
 8009642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009648:	4b08      	ldr	r3, [pc, #32]	; (800966c <HAL_Init+0x40>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a07      	ldr	r2, [pc, #28]	; (800966c <HAL_Init+0x40>)
 800964e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009654:	2003      	movs	r0, #3
 8009656:	f000 fd51 	bl	800a0fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800965a:	2000      	movs	r0, #0
 800965c:	f000 f808 	bl	8009670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009660:	f7fd f878 	bl	8006754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	40023c00 	.word	0x40023c00

08009670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009678:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <HAL_InitTick+0x54>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b12      	ldr	r3, [pc, #72]	; (80096c8 <HAL_InitTick+0x58>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	4619      	mov	r1, r3
 8009682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009686:	fbb3 f3f1 	udiv	r3, r3, r1
 800968a:	fbb2 f3f3 	udiv	r3, r2, r3
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fd69 	bl	800a166 <HAL_SYSTICK_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e00e      	b.n	80096bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b0f      	cmp	r3, #15
 80096a2:	d80a      	bhi.n	80096ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096a4:	2200      	movs	r2, #0
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	f000 fd31 	bl	800a112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80096b0:	4a06      	ldr	r2, [pc, #24]	; (80096cc <HAL_InitTick+0x5c>)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	e000      	b.n	80096bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000000 	.word	0x20000000
 80096c8:	20000008 	.word	0x20000008
 80096cc:	20000004 	.word	0x20000004

080096d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80096d4:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <HAL_IncTick+0x20>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <HAL_IncTick+0x24>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4413      	add	r3, r2
 80096e0:	4a04      	ldr	r2, [pc, #16]	; (80096f4 <HAL_IncTick+0x24>)
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	20000008 	.word	0x20000008
 80096f4:	20044c10 	.word	0x20044c10

080096f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  return uwTick;
 80096fc:	4b03      	ldr	r3, [pc, #12]	; (800970c <HAL_GetTick+0x14>)
 80096fe:	681b      	ldr	r3, [r3, #0]
}
 8009700:	4618      	mov	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20044c10 	.word	0x20044c10

08009710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009718:	f7ff ffee 	bl	80096f8 <HAL_GetTick>
 800971c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d005      	beq.n	8009736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <HAL_Delay+0x40>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009736:	bf00      	nop
 8009738:	f7ff ffde 	bl	80096f8 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	429a      	cmp	r2, r3
 8009746:	d8f7      	bhi.n	8009738 <HAL_Delay+0x28>
  {
  }
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000008 	.word	0x20000008

08009754 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e033      	b.n	80097d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fd f816 	bl	80067a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	2b00      	cmp	r3, #0
 8009790:	d118      	bne.n	80097c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800979a:	f023 0302 	bic.w	r3, r3, #2
 800979e:	f043 0202 	orr.w	r2, r3, #2
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa5a 	bl	8009c60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	f043 0201 	orr.w	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	641a      	str	r2, [r3, #64]	; 0x40
 80097c2:	e001      	b.n	80097c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <HAL_ADC_Start_DMA+0x1e>
 80097f6:	2302      	movs	r3, #2
 80097f8:	e0cc      	b.n	8009994 <HAL_ADC_Start_DMA+0x1b8>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b01      	cmp	r3, #1
 800980e:	d018      	beq.n	8009842 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f042 0201 	orr.w	r2, r2, #1
 800981e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009820:	4b5e      	ldr	r3, [pc, #376]	; (800999c <HAL_ADC_Start_DMA+0x1c0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a5e      	ldr	r2, [pc, #376]	; (80099a0 <HAL_ADC_Start_DMA+0x1c4>)
 8009826:	fba2 2303 	umull	r2, r3, r2, r3
 800982a:	0c9a      	lsrs	r2, r3, #18
 800982c:	4613      	mov	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	4413      	add	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009834:	e002      	b.n	800983c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	3b01      	subs	r3, #1
 800983a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f9      	bne.n	8009836 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b01      	cmp	r3, #1
 800984e:	f040 80a0 	bne.w	8009992 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800987c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800988c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009890:	d106      	bne.n	80098a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	f023 0206 	bic.w	r2, r3, #6
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	645a      	str	r2, [r3, #68]	; 0x44
 800989e:	e002      	b.n	80098a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80098ae:	4b3d      	ldr	r3, [pc, #244]	; (80099a4 <HAL_ADC_Start_DMA+0x1c8>)
 80098b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	4a3c      	ldr	r2, [pc, #240]	; (80099a8 <HAL_ADC_Start_DMA+0x1cc>)
 80098b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	4a3b      	ldr	r2, [pc, #236]	; (80099ac <HAL_ADC_Start_DMA+0x1d0>)
 80098c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	4a3a      	ldr	r2, [pc, #232]	; (80099b0 <HAL_ADC_Start_DMA+0x1d4>)
 80098c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80098d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80098e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	334c      	adds	r3, #76	; 0x4c
 80098fe:	4619      	mov	r1, r3
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f000 fcea 	bl	800a2dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2b00      	cmp	r3, #0
 8009912:	d12a      	bne.n	800996a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a26      	ldr	r2, [pc, #152]	; (80099b4 <HAL_ADC_Start_DMA+0x1d8>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d015      	beq.n	800994a <HAL_ADC_Start_DMA+0x16e>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a25      	ldr	r2, [pc, #148]	; (80099b8 <HAL_ADC_Start_DMA+0x1dc>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d105      	bne.n	8009934 <HAL_ADC_Start_DMA+0x158>
 8009928:	4b1e      	ldr	r3, [pc, #120]	; (80099a4 <HAL_ADC_Start_DMA+0x1c8>)
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a20      	ldr	r2, [pc, #128]	; (80099bc <HAL_ADC_Start_DMA+0x1e0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d129      	bne.n	8009992 <HAL_ADC_Start_DMA+0x1b6>
 800993e:	4b19      	ldr	r3, [pc, #100]	; (80099a4 <HAL_ADC_Start_DMA+0x1c8>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f003 031f 	and.w	r3, r3, #31
 8009946:	2b0f      	cmp	r3, #15
 8009948:	d823      	bhi.n	8009992 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11c      	bne.n	8009992 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689a      	ldr	r2, [r3, #8]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009966:	609a      	str	r2, [r3, #8]
 8009968:	e013      	b.n	8009992 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a11      	ldr	r2, [pc, #68]	; (80099b4 <HAL_ADC_Start_DMA+0x1d8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d10e      	bne.n	8009992 <HAL_ADC_Start_DMA+0x1b6>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d107      	bne.n	8009992 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009990:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000000 	.word	0x20000000
 80099a0:	431bde83 	.word	0x431bde83
 80099a4:	40012300 	.word	0x40012300
 80099a8:	08009e59 	.word	0x08009e59
 80099ac:	08009f13 	.word	0x08009f13
 80099b0:	08009f2f 	.word	0x08009f2f
 80099b4:	40012000 	.word	0x40012000
 80099b8:	40012100 	.word	0x40012100
 80099bc:	40012200 	.word	0x40012200

080099c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d101      	bne.n	8009a18 <HAL_ADC_ConfigChannel+0x1c>
 8009a14:	2302      	movs	r3, #2
 8009a16:	e113      	b.n	8009c40 <HAL_ADC_ConfigChannel+0x244>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d925      	bls.n	8009a74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68d9      	ldr	r1, [r3, #12]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	4613      	mov	r3, r2
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3b1e      	subs	r3, #30
 8009a3e:	2207      	movs	r2, #7
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	43da      	mvns	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	400a      	ands	r2, r1
 8009a4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68d9      	ldr	r1, [r3, #12]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	4618      	mov	r0, r3
 8009a60:	4603      	mov	r3, r0
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	4403      	add	r3, r0
 8009a66:	3b1e      	subs	r3, #30
 8009a68:	409a      	lsls	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e022      	b.n	8009aba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6919      	ldr	r1, [r3, #16]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	4613      	mov	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4413      	add	r3, r2
 8009a88:	2207      	movs	r2, #7
 8009a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8e:	43da      	mvns	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	400a      	ands	r2, r1
 8009a96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6919      	ldr	r1, [r3, #16]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4403      	add	r3, r0
 8009ab0:	409a      	lsls	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d824      	bhi.n	8009b0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3b05      	subs	r3, #5
 8009ad4:	221f      	movs	r2, #31
 8009ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ada:	43da      	mvns	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	4618      	mov	r0, r3
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	3b05      	subs	r3, #5
 8009afe:	fa00 f203 	lsl.w	r2, r0, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	635a      	str	r2, [r3, #52]	; 0x34
 8009b0a:	e04c      	b.n	8009ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2b0c      	cmp	r3, #12
 8009b12:	d824      	bhi.n	8009b5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	3b23      	subs	r3, #35	; 0x23
 8009b26:	221f      	movs	r2, #31
 8009b28:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2c:	43da      	mvns	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	400a      	ands	r2, r1
 8009b34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	4618      	mov	r0, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	3b23      	subs	r3, #35	; 0x23
 8009b50:	fa00 f203 	lsl.w	r2, r0, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009b5c:	e023      	b.n	8009ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	3b41      	subs	r3, #65	; 0x41
 8009b70:	221f      	movs	r2, #31
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	43da      	mvns	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	400a      	ands	r2, r1
 8009b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	3b41      	subs	r3, #65	; 0x41
 8009b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ba6:	4b29      	ldr	r3, [pc, #164]	; (8009c4c <HAL_ADC_ConfigChannel+0x250>)
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a28      	ldr	r2, [pc, #160]	; (8009c50 <HAL_ADC_ConfigChannel+0x254>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d10f      	bne.n	8009bd4 <HAL_ADC_ConfigChannel+0x1d8>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b12      	cmp	r3, #18
 8009bba:	d10b      	bne.n	8009bd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1d      	ldr	r2, [pc, #116]	; (8009c50 <HAL_ADC_ConfigChannel+0x254>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d12b      	bne.n	8009c36 <HAL_ADC_ConfigChannel+0x23a>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a1c      	ldr	r2, [pc, #112]	; (8009c54 <HAL_ADC_ConfigChannel+0x258>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d003      	beq.n	8009bf0 <HAL_ADC_ConfigChannel+0x1f4>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b11      	cmp	r3, #17
 8009bee:	d122      	bne.n	8009c36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a11      	ldr	r2, [pc, #68]	; (8009c54 <HAL_ADC_ConfigChannel+0x258>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d111      	bne.n	8009c36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009c12:	4b11      	ldr	r3, [pc, #68]	; (8009c58 <HAL_ADC_ConfigChannel+0x25c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a11      	ldr	r2, [pc, #68]	; (8009c5c <HAL_ADC_ConfigChannel+0x260>)
 8009c18:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1c:	0c9a      	lsrs	r2, r3, #18
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	005b      	lsls	r3, r3, #1
 8009c26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c28:	e002      	b.n	8009c30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1f9      	bne.n	8009c2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40012300 	.word	0x40012300
 8009c50:	40012000 	.word	0x40012000
 8009c54:	10000012 	.word	0x10000012
 8009c58:	20000000 	.word	0x20000000
 8009c5c:	431bde83 	.word	0x431bde83

08009c60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009c68:	4b79      	ldr	r3, [pc, #484]	; (8009e50 <ADC_Init+0x1f0>)
 8009c6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6859      	ldr	r1, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	021a      	lsls	r2, r3, #8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6859      	ldr	r1, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6899      	ldr	r1, [r3, #8]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf2:	4a58      	ldr	r2, [pc, #352]	; (8009e54 <ADC_Init+0x1f4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d022      	beq.n	8009d3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6899      	ldr	r1, [r3, #8]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6899      	ldr	r1, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	609a      	str	r2, [r3, #8]
 8009d3c:	e00f      	b.n	8009d5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0202 	bic.w	r2, r2, #2
 8009d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6899      	ldr	r1, [r3, #8]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7e1b      	ldrb	r3, [r3, #24]
 8009d78:	005a      	lsls	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01b      	beq.n	8009dc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009daa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6859      	ldr	r1, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	3b01      	subs	r3, #1
 8009db8:	035a      	lsls	r2, r3, #13
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	e007      	b.n	8009dd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	051a      	lsls	r2, r3, #20
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6899      	ldr	r1, [r3, #8]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e16:	025a      	lsls	r2, r3, #9
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6899      	ldr	r1, [r3, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	029a      	lsls	r2, r3, #10
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	609a      	str	r2, [r3, #8]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	40012300 	.word	0x40012300
 8009e54:	0f000001 	.word	0x0f000001

08009e58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d13c      	bne.n	8009eec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d12b      	bne.n	8009ee4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d127      	bne.n	8009ee4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d006      	beq.n	8009eb0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d119      	bne.n	8009ee4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0220 	bic.w	r2, r2, #32
 8009ebe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d105      	bne.n	8009ee4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009edc:	f043 0201 	orr.w	r2, r3, #1
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff fd6b 	bl	80099c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009eea:	e00e      	b.n	8009f0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	f003 0310 	and.w	r3, r3, #16
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff fd75 	bl	80099e8 <HAL_ADC_ErrorCallback>
}
 8009efe:	e004      	b.n	8009f0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f7ff fd57 	bl	80099d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2240      	movs	r2, #64	; 0x40
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f46:	f043 0204 	orr.w	r2, r3, #4
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff fd4a 	bl	80099e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f6c:	4b0c      	ldr	r3, [pc, #48]	; (8009fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f78:	4013      	ands	r3, r2
 8009f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f8e:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	60d3      	str	r3, [r2, #12]
}
 8009f94:	bf00      	nop
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	e000ed00 	.word	0xe000ed00

08009fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fa8:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <__NVIC_GetPriorityGrouping+0x18>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	0a1b      	lsrs	r3, r3, #8
 8009fae:	f003 0307 	and.w	r3, r3, #7
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	e000ed00 	.word	0xe000ed00

08009fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	db0b      	blt.n	8009fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	f003 021f 	and.w	r2, r3, #31
 8009fd8:	4907      	ldr	r1, [pc, #28]	; (8009ff8 <__NVIC_EnableIRQ+0x38>)
 8009fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fde:	095b      	lsrs	r3, r3, #5
 8009fe0:	2001      	movs	r0, #1
 8009fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8009fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009fea:	bf00      	nop
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	e000e100 	.word	0xe000e100

08009ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	db0a      	blt.n	800a026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	b2da      	uxtb	r2, r3
 800a014:	490c      	ldr	r1, [pc, #48]	; (800a048 <__NVIC_SetPriority+0x4c>)
 800a016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01a:	0112      	lsls	r2, r2, #4
 800a01c:	b2d2      	uxtb	r2, r2
 800a01e:	440b      	add	r3, r1
 800a020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a024:	e00a      	b.n	800a03c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	4908      	ldr	r1, [pc, #32]	; (800a04c <__NVIC_SetPriority+0x50>)
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	f003 030f 	and.w	r3, r3, #15
 800a032:	3b04      	subs	r3, #4
 800a034:	0112      	lsls	r2, r2, #4
 800a036:	b2d2      	uxtb	r2, r2
 800a038:	440b      	add	r3, r1
 800a03a:	761a      	strb	r2, [r3, #24]
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	e000e100 	.word	0xe000e100
 800a04c:	e000ed00 	.word	0xe000ed00

0800a050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a050:	b480      	push	{r7}
 800a052:	b089      	sub	sp, #36	; 0x24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f003 0307 	and.w	r3, r3, #7
 800a062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f1c3 0307 	rsb	r3, r3, #7
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	bf28      	it	cs
 800a06e:	2304      	movcs	r3, #4
 800a070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	3304      	adds	r3, #4
 800a076:	2b06      	cmp	r3, #6
 800a078:	d902      	bls.n	800a080 <NVIC_EncodePriority+0x30>
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	3b03      	subs	r3, #3
 800a07e:	e000      	b.n	800a082 <NVIC_EncodePriority+0x32>
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a084:	f04f 32ff 	mov.w	r2, #4294967295
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	fa02 f303 	lsl.w	r3, r2, r3
 800a08e:	43da      	mvns	r2, r3
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	401a      	ands	r2, r3
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a098:	f04f 31ff 	mov.w	r1, #4294967295
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	fa01 f303 	lsl.w	r3, r1, r3
 800a0a2:	43d9      	mvns	r1, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0a8:	4313      	orrs	r3, r2
         );
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3724      	adds	r7, #36	; 0x24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0c8:	d301      	bcc.n	800a0ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e00f      	b.n	800a0ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a0ce:	4a0a      	ldr	r2, [pc, #40]	; (800a0f8 <SysTick_Config+0x40>)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a0d6:	210f      	movs	r1, #15
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	f7ff ff8e 	bl	8009ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <SysTick_Config+0x40>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0e6:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <SysTick_Config+0x40>)
 800a0e8:	2207      	movs	r2, #7
 800a0ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	e000e010 	.word	0xe000e010

0800a0fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff ff29 	bl	8009f5c <__NVIC_SetPriorityGrouping>
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a112:	b580      	push	{r7, lr}
 800a114:	b086      	sub	sp, #24
 800a116:	af00      	add	r7, sp, #0
 800a118:	4603      	mov	r3, r0
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a124:	f7ff ff3e 	bl	8009fa4 <__NVIC_GetPriorityGrouping>
 800a128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	6978      	ldr	r0, [r7, #20]
 800a130:	f7ff ff8e 	bl	800a050 <NVIC_EncodePriority>
 800a134:	4602      	mov	r2, r0
 800a136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff ff5d 	bl	8009ffc <__NVIC_SetPriority>
}
 800a142:	bf00      	nop
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	4603      	mov	r3, r0
 800a152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff ff31 	bl	8009fc0 <__NVIC_EnableIRQ>
}
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff ffa2 	bl	800a0b8 <SysTick_Config>
 800a174:	4603      	mov	r3, r0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a18c:	f7ff fab4 	bl	80096f8 <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e099      	b.n	800a2d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f022 0201 	bic.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1bc:	e00f      	b.n	800a1de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1be:	f7ff fa9b 	bl	80096f8 <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	2b05      	cmp	r3, #5
 800a1ca:	d908      	bls.n	800a1de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e078      	b.n	800a2d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e8      	bne.n	800a1be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	4b38      	ldr	r3, [pc, #224]	; (800a2d8 <HAL_DMA_Init+0x158>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a20a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	2b04      	cmp	r3, #4
 800a236:	d107      	bne.n	800a248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a240:	4313      	orrs	r3, r2
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4313      	orrs	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	4313      	orrs	r3, r2
 800a268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d117      	bne.n	800a2a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00e      	beq.n	800a2a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fa9d 	bl	800a7c4 <DMA_CheckFifoParam>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d008      	beq.n	800a2a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2240      	movs	r2, #64	; 0x40
 800a294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e016      	b.n	800a2d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa54 	bl	800a758 <DMA_CalcBaseAndBitshift>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b8:	223f      	movs	r2, #63	; 0x3f
 800a2ba:	409a      	lsls	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	f010803f 	.word	0xf010803f

0800a2dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <HAL_DMA_Start_IT+0x26>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e040      	b.n	800a384 <HAL_DMA_Start_IT+0xa8>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b01      	cmp	r3, #1
 800a314:	d12f      	bne.n	800a376 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2202      	movs	r2, #2
 800a31a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f9e6 	bl	800a6fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a334:	223f      	movs	r2, #63	; 0x3f
 800a336:	409a      	lsls	r2, r3
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0216 	orr.w	r2, r2, #22
 800a34a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d007      	beq.n	800a364 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0208 	orr.w	r2, r2, #8
 800a362:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f042 0201 	orr.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	e005      	b.n	800a382 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a37e:	2302      	movs	r3, #2
 800a380:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d004      	beq.n	800a3aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2280      	movs	r2, #128	; 0x80
 800a3a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e00c      	b.n	800a3c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2205      	movs	r2, #5
 800a3ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f022 0201 	bic.w	r2, r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3dc:	4b92      	ldr	r3, [pc, #584]	; (800a628 <HAL_DMA_IRQHandler+0x258>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a92      	ldr	r2, [pc, #584]	; (800a62c <HAL_DMA_IRQHandler+0x25c>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	0a9b      	lsrs	r3, r3, #10
 800a3e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fa:	2208      	movs	r2, #8
 800a3fc:	409a      	lsls	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	4013      	ands	r3, r2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01a      	beq.n	800a43c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d013      	beq.n	800a43c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0204 	bic.w	r2, r2, #4
 800a422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a428:	2208      	movs	r2, #8
 800a42a:	409a      	lsls	r2, r3
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a434:	f043 0201 	orr.w	r2, r3, #1
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a440:	2201      	movs	r2, #1
 800a442:	409a      	lsls	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4013      	ands	r3, r2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d012      	beq.n	800a472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00b      	beq.n	800a472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45e:	2201      	movs	r2, #1
 800a460:	409a      	lsls	r2, r3
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46a:	f043 0202 	orr.w	r2, r3, #2
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a476:	2204      	movs	r2, #4
 800a478:	409a      	lsls	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4013      	ands	r3, r2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d012      	beq.n	800a4a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0302 	and.w	r3, r3, #2
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a494:	2204      	movs	r2, #4
 800a496:	409a      	lsls	r2, r3
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a0:	f043 0204 	orr.w	r2, r3, #4
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ac:	2210      	movs	r2, #16
 800a4ae:	409a      	lsls	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d043      	beq.n	800a540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d03c      	beq.n	800a540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ca:	2210      	movs	r2, #16
 800a4cc:	409a      	lsls	r2, r3
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d018      	beq.n	800a512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d108      	bne.n	800a500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d024      	beq.n	800a540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
 800a4fe:	e01f      	b.n	800a540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01b      	beq.n	800a540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	4798      	blx	r3
 800a510:	e016      	b.n	800a540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d107      	bne.n	800a530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0208 	bic.w	r2, r2, #8
 800a52e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a544:	2220      	movs	r2, #32
 800a546:	409a      	lsls	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4013      	ands	r3, r2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 808e 	beq.w	800a66e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8086 	beq.w	800a66e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a566:	2220      	movs	r2, #32
 800a568:	409a      	lsls	r2, r3
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b05      	cmp	r3, #5
 800a578:	d136      	bne.n	800a5e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0216 	bic.w	r2, r2, #22
 800a588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	695a      	ldr	r2, [r3, #20]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d103      	bne.n	800a5aa <HAL_DMA_IRQHandler+0x1da>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0208 	bic.w	r2, r2, #8
 800a5b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5be:	223f      	movs	r2, #63	; 0x3f
 800a5c0:	409a      	lsls	r2, r3
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d07d      	beq.n	800a6da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
        }
        return;
 800a5e6:	e078      	b.n	800a6da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d01c      	beq.n	800a630 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d108      	bne.n	800a616 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d030      	beq.n	800a66e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
 800a614:	e02b      	b.n	800a66e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d027      	beq.n	800a66e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	4798      	blx	r3
 800a626:	e022      	b.n	800a66e <HAL_DMA_IRQHandler+0x29e>
 800a628:	20000000 	.word	0x20000000
 800a62c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10f      	bne.n	800a65e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0210 	bic.w	r2, r2, #16
 800a64c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a672:	2b00      	cmp	r3, #0
 800a674:	d032      	beq.n	800a6dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d022      	beq.n	800a6c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2205      	movs	r2, #5
 800a686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0201 	bic.w	r2, r2, #1
 800a698:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	3301      	adds	r3, #1
 800a69e:	60bb      	str	r3, [r7, #8]
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d307      	bcc.n	800a6b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1f2      	bne.n	800a69a <HAL_DMA_IRQHandler+0x2ca>
 800a6b4:	e000      	b.n	800a6b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a6b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
 800a6d8:	e000      	b.n	800a6dc <HAL_DMA_IRQHandler+0x30c>
        return;
 800a6da:	bf00      	nop
    }
  }
}
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop

0800a6e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a718:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d108      	bne.n	800a73c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a73a:	e007      	b.n	800a74c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	60da      	str	r2, [r3, #12]
}
 800a74c:	bf00      	nop
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	3b10      	subs	r3, #16
 800a768:	4a14      	ldr	r2, [pc, #80]	; (800a7bc <DMA_CalcBaseAndBitshift+0x64>)
 800a76a:	fba2 2303 	umull	r2, r3, r2, r3
 800a76e:	091b      	lsrs	r3, r3, #4
 800a770:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a772:	4a13      	ldr	r2, [pc, #76]	; (800a7c0 <DMA_CalcBaseAndBitshift+0x68>)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b03      	cmp	r3, #3
 800a784:	d909      	bls.n	800a79a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a78e:	f023 0303 	bic.w	r3, r3, #3
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	659a      	str	r2, [r3, #88]	; 0x58
 800a798:	e007      	b.n	800a7aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	aaaaaaab 	.word	0xaaaaaaab
 800a7c0:	08019a08 	.word	0x08019a08

0800a7c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d11f      	bne.n	800a81e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d855      	bhi.n	800a890 <DMA_CheckFifoParam+0xcc>
 800a7e4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <DMA_CheckFifoParam+0x28>)
 800a7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ea:	bf00      	nop
 800a7ec:	0800a7fd 	.word	0x0800a7fd
 800a7f0:	0800a80f 	.word	0x0800a80f
 800a7f4:	0800a7fd 	.word	0x0800a7fd
 800a7f8:	0800a891 	.word	0x0800a891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d045      	beq.n	800a894 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a80c:	e042      	b.n	800a894 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a816:	d13f      	bne.n	800a898 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a81c:	e03c      	b.n	800a898 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a826:	d121      	bne.n	800a86c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d836      	bhi.n	800a89c <DMA_CheckFifoParam+0xd8>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <DMA_CheckFifoParam+0x70>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a845 	.word	0x0800a845
 800a838:	0800a84b 	.word	0x0800a84b
 800a83c:	0800a845 	.word	0x0800a845
 800a840:	0800a85d 	.word	0x0800a85d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
      break;
 800a848:	e02f      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d024      	beq.n	800a8a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a85a:	e021      	b.n	800a8a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a864:	d11e      	bne.n	800a8a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a86a:	e01b      	b.n	800a8a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d902      	bls.n	800a878 <DMA_CheckFifoParam+0xb4>
 800a872:	2b03      	cmp	r3, #3
 800a874:	d003      	beq.n	800a87e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a876:	e018      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	73fb      	strb	r3, [r7, #15]
      break;
 800a87c:	e015      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00e      	beq.n	800a8a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	73fb      	strb	r3, [r7, #15]
      break;
 800a88e:	e00b      	b.n	800a8a8 <DMA_CheckFifoParam+0xe4>
      break;
 800a890:	bf00      	nop
 800a892:	e00a      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      break;
 800a894:	bf00      	nop
 800a896:	e008      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      break;
 800a898:	bf00      	nop
 800a89a:	e006      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      break;
 800a89c:	bf00      	nop
 800a89e:	e004      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      break;
 800a8a0:	bf00      	nop
 800a8a2:	e002      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      break;   
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <DMA_CheckFifoParam+0xe6>
      break;
 800a8a8:	bf00      	nop
    }
  } 
  
  return status; 
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b089      	sub	sp, #36	; 0x24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	e177      	b.n	800abc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	f040 8166 	bne.w	800abbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d00b      	beq.n	800a912 <HAL_GPIO_Init+0x5a>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d007      	beq.n	800a912 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a906:	2b11      	cmp	r3, #17
 800a908:	d003      	beq.n	800a912 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2b12      	cmp	r3, #18
 800a910:	d130      	bne.n	800a974 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	2203      	movs	r2, #3
 800a91e:	fa02 f303 	lsl.w	r3, r2, r3
 800a922:	43db      	mvns	r3, r3
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	4013      	ands	r3, r2
 800a928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68da      	ldr	r2, [r3, #12]
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	fa02 f303 	lsl.w	r3, r2, r3
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	4313      	orrs	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a948:	2201      	movs	r2, #1
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	fa02 f303 	lsl.w	r3, r2, r3
 800a950:	43db      	mvns	r3, r3
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	4013      	ands	r3, r2
 800a956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	091b      	lsrs	r3, r3, #4
 800a95e:	f003 0201 	and.w	r2, r3, #1
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	fa02 f303 	lsl.w	r3, r2, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	2203      	movs	r2, #3
 800a980:	fa02 f303 	lsl.w	r3, r2, r3
 800a984:	43db      	mvns	r3, r3
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	4013      	ands	r3, r2
 800a98a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d003      	beq.n	800a9b4 <HAL_GPIO_Init+0xfc>
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	2b12      	cmp	r3, #18
 800a9b2:	d123      	bne.n	800a9fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	08da      	lsrs	r2, r3, #3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3208      	adds	r2, #8
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	220f      	movs	r2, #15
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	691a      	ldr	r2, [r3, #16]
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	f003 0307 	and.w	r3, r3, #7
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	08da      	lsrs	r2, r3, #3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3208      	adds	r2, #8
 800a9f6:	69b9      	ldr	r1, [r7, #24]
 800a9f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	2203      	movs	r2, #3
 800aa08:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0c:	43db      	mvns	r3, r3
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	4013      	ands	r3, r2
 800aa12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f003 0203 	and.w	r2, r3, #3
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	fa02 f303 	lsl.w	r3, r2, r3
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 80c0 	beq.w	800abbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	4b65      	ldr	r3, [pc, #404]	; (800abd8 <HAL_GPIO_Init+0x320>)
 800aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa46:	4a64      	ldr	r2, [pc, #400]	; (800abd8 <HAL_GPIO_Init+0x320>)
 800aa48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa4c:	6453      	str	r3, [r2, #68]	; 0x44
 800aa4e:	4b62      	ldr	r3, [pc, #392]	; (800abd8 <HAL_GPIO_Init+0x320>)
 800aa50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa5a:	4a60      	ldr	r2, [pc, #384]	; (800abdc <HAL_GPIO_Init+0x324>)
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	089b      	lsrs	r3, r3, #2
 800aa60:	3302      	adds	r3, #2
 800aa62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	220f      	movs	r2, #15
 800aa72:	fa02 f303 	lsl.w	r3, r2, r3
 800aa76:	43db      	mvns	r3, r3
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a57      	ldr	r2, [pc, #348]	; (800abe0 <HAL_GPIO_Init+0x328>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d037      	beq.n	800aaf6 <HAL_GPIO_Init+0x23e>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a56      	ldr	r2, [pc, #344]	; (800abe4 <HAL_GPIO_Init+0x32c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d031      	beq.n	800aaf2 <HAL_GPIO_Init+0x23a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a55      	ldr	r2, [pc, #340]	; (800abe8 <HAL_GPIO_Init+0x330>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d02b      	beq.n	800aaee <HAL_GPIO_Init+0x236>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a54      	ldr	r2, [pc, #336]	; (800abec <HAL_GPIO_Init+0x334>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d025      	beq.n	800aaea <HAL_GPIO_Init+0x232>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a53      	ldr	r2, [pc, #332]	; (800abf0 <HAL_GPIO_Init+0x338>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d01f      	beq.n	800aae6 <HAL_GPIO_Init+0x22e>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a52      	ldr	r2, [pc, #328]	; (800abf4 <HAL_GPIO_Init+0x33c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d019      	beq.n	800aae2 <HAL_GPIO_Init+0x22a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a51      	ldr	r2, [pc, #324]	; (800abf8 <HAL_GPIO_Init+0x340>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d013      	beq.n	800aade <HAL_GPIO_Init+0x226>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a50      	ldr	r2, [pc, #320]	; (800abfc <HAL_GPIO_Init+0x344>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00d      	beq.n	800aada <HAL_GPIO_Init+0x222>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a4f      	ldr	r2, [pc, #316]	; (800ac00 <HAL_GPIO_Init+0x348>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d007      	beq.n	800aad6 <HAL_GPIO_Init+0x21e>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a4e      	ldr	r2, [pc, #312]	; (800ac04 <HAL_GPIO_Init+0x34c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d101      	bne.n	800aad2 <HAL_GPIO_Init+0x21a>
 800aace:	2309      	movs	r3, #9
 800aad0:	e012      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aad2:	230a      	movs	r3, #10
 800aad4:	e010      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aad6:	2308      	movs	r3, #8
 800aad8:	e00e      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aada:	2307      	movs	r3, #7
 800aadc:	e00c      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aade:	2306      	movs	r3, #6
 800aae0:	e00a      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aae2:	2305      	movs	r3, #5
 800aae4:	e008      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aae6:	2304      	movs	r3, #4
 800aae8:	e006      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aaea:	2303      	movs	r3, #3
 800aaec:	e004      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e002      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <HAL_GPIO_Init+0x240>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	f002 0203 	and.w	r2, r2, #3
 800aafe:	0092      	lsls	r2, r2, #2
 800ab00:	4093      	lsls	r3, r2
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab08:	4934      	ldr	r1, [pc, #208]	; (800abdc <HAL_GPIO_Init+0x324>)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	089b      	lsrs	r3, r3, #2
 800ab0e:	3302      	adds	r3, #2
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab16:	4b3c      	ldr	r3, [pc, #240]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	43db      	mvns	r3, r3
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	4013      	ands	r3, r2
 800ab24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab3a:	4a33      	ldr	r2, [pc, #204]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab40:	4b31      	ldr	r3, [pc, #196]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	43db      	mvns	r3, r3
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab64:	4a28      	ldr	r2, [pc, #160]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab6a:	4b27      	ldr	r3, [pc, #156]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	43db      	mvns	r3, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4013      	ands	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab8e:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab94:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	4013      	ands	r3, r2
 800aba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800abb8:	4a13      	ldr	r2, [pc, #76]	; (800ac08 <HAL_GPIO_Init+0x350>)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	3301      	adds	r3, #1
 800abc2:	61fb      	str	r3, [r7, #28]
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2b0f      	cmp	r3, #15
 800abc8:	f67f ae84 	bls.w	800a8d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800abcc:	bf00      	nop
 800abce:	3724      	adds	r7, #36	; 0x24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	40023800 	.word	0x40023800
 800abdc:	40013800 	.word	0x40013800
 800abe0:	40020000 	.word	0x40020000
 800abe4:	40020400 	.word	0x40020400
 800abe8:	40020800 	.word	0x40020800
 800abec:	40020c00 	.word	0x40020c00
 800abf0:	40021000 	.word	0x40021000
 800abf4:	40021400 	.word	0x40021400
 800abf8:	40021800 	.word	0x40021800
 800abfc:	40021c00 	.word	0x40021c00
 800ac00:	40022000 	.word	0x40022000
 800ac04:	40022400 	.word	0x40022400
 800ac08:	40013c00 	.word	0x40013c00

0800ac0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691a      	ldr	r2, [r3, #16]
 800ac1c:	887b      	ldrh	r3, [r7, #2]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac24:	2301      	movs	r3, #1
 800ac26:	73fb      	strb	r3, [r7, #15]
 800ac28:	e001      	b.n	800ac2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	807b      	strh	r3, [r7, #2]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac4c:	787b      	ldrb	r3, [r7, #1]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac52:	887a      	ldrh	r2, [r7, #2]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac58:	e003      	b.n	800ac62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac5a:	887b      	ldrh	r3, [r7, #2]
 800ac5c:	041a      	lsls	r2, r3, #16
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	619a      	str	r2, [r3, #24]
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
	...

0800ac70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e11f      	b.n	800aec2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d106      	bne.n	800ac9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7fb fe36 	bl	8006908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2224      	movs	r2, #36	; 0x24
 800aca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0201 	bic.w	r2, r2, #1
 800acb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800acd4:	f001 f96e 	bl	800bfb4 <HAL_RCC_GetPCLK1Freq>
 800acd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	4a7b      	ldr	r2, [pc, #492]	; (800aecc <HAL_I2C_Init+0x25c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d807      	bhi.n	800acf4 <HAL_I2C_Init+0x84>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4a7a      	ldr	r2, [pc, #488]	; (800aed0 <HAL_I2C_Init+0x260>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	bf94      	ite	ls
 800acec:	2301      	movls	r3, #1
 800acee:	2300      	movhi	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	e006      	b.n	800ad02 <HAL_I2C_Init+0x92>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4a77      	ldr	r2, [pc, #476]	; (800aed4 <HAL_I2C_Init+0x264>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	bf94      	ite	ls
 800acfc:	2301      	movls	r3, #1
 800acfe:	2300      	movhi	r3, #0
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e0db      	b.n	800aec2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4a72      	ldr	r2, [pc, #456]	; (800aed8 <HAL_I2C_Init+0x268>)
 800ad0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad12:	0c9b      	lsrs	r3, r3, #18
 800ad14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4a64      	ldr	r2, [pc, #400]	; (800aecc <HAL_I2C_Init+0x25c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d802      	bhi.n	800ad44 <HAL_I2C_Init+0xd4>
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	3301      	adds	r3, #1
 800ad42:	e009      	b.n	800ad58 <HAL_I2C_Init+0xe8>
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad4a:	fb02 f303 	mul.w	r3, r2, r3
 800ad4e:	4a63      	ldr	r2, [pc, #396]	; (800aedc <HAL_I2C_Init+0x26c>)
 800ad50:	fba2 2303 	umull	r2, r3, r2, r3
 800ad54:	099b      	lsrs	r3, r3, #6
 800ad56:	3301      	adds	r3, #1
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	6812      	ldr	r2, [r2, #0]
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	69db      	ldr	r3, [r3, #28]
 800ad66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ad6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	4956      	ldr	r1, [pc, #344]	; (800aecc <HAL_I2C_Init+0x25c>)
 800ad74:	428b      	cmp	r3, r1
 800ad76:	d80d      	bhi.n	800ad94 <HAL_I2C_Init+0x124>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	1e59      	subs	r1, r3, #1
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	005b      	lsls	r3, r3, #1
 800ad82:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad86:	3301      	adds	r3, #1
 800ad88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	bf38      	it	cc
 800ad90:	2304      	movcc	r3, #4
 800ad92:	e04f      	b.n	800ae34 <HAL_I2C_Init+0x1c4>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d111      	bne.n	800adc0 <HAL_I2C_Init+0x150>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	1e58      	subs	r0, r3, #1
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6859      	ldr	r1, [r3, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	440b      	add	r3, r1
 800adaa:	fbb0 f3f3 	udiv	r3, r0, r3
 800adae:	3301      	adds	r3, #1
 800adb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bf0c      	ite	eq
 800adb8:	2301      	moveq	r3, #1
 800adba:	2300      	movne	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	e012      	b.n	800ade6 <HAL_I2C_Init+0x176>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	1e58      	subs	r0, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6859      	ldr	r1, [r3, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	0099      	lsls	r1, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	fbb0 f3f3 	udiv	r3, r0, r3
 800add6:	3301      	adds	r3, #1
 800add8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800addc:	2b00      	cmp	r3, #0
 800adde:	bf0c      	ite	eq
 800ade0:	2301      	moveq	r3, #1
 800ade2:	2300      	movne	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <HAL_I2C_Init+0x17e>
 800adea:	2301      	movs	r3, #1
 800adec:	e022      	b.n	800ae34 <HAL_I2C_Init+0x1c4>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10e      	bne.n	800ae14 <HAL_I2C_Init+0x1a4>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	1e58      	subs	r0, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6859      	ldr	r1, [r3, #4]
 800adfe:	460b      	mov	r3, r1
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	440b      	add	r3, r1
 800ae04:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae08:	3301      	adds	r3, #1
 800ae0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae12:	e00f      	b.n	800ae34 <HAL_I2C_Init+0x1c4>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	1e58      	subs	r0, r3, #1
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6859      	ldr	r1, [r3, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	0099      	lsls	r1, r3, #2
 800ae24:	440b      	add	r3, r1
 800ae26:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	6809      	ldr	r1, [r1, #0]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69da      	ldr	r2, [r3, #28]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ae62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	6911      	ldr	r1, [r2, #16]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68d2      	ldr	r2, [r2, #12]
 800ae6e:	4311      	orrs	r1, r2
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	430b      	orrs	r3, r1
 800ae76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695a      	ldr	r2, [r3, #20]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f042 0201 	orr.w	r2, r2, #1
 800aea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	000186a0 	.word	0x000186a0
 800aed0:	001e847f 	.word	0x001e847f
 800aed4:	003d08ff 	.word	0x003d08ff
 800aed8:	431bde83 	.word	0x431bde83
 800aedc:	10624dd3 	.word	0x10624dd3

0800aee0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	461a      	mov	r2, r3
 800aeec:	460b      	mov	r3, r1
 800aeee:	817b      	strh	r3, [r7, #10]
 800aef0:	4613      	mov	r3, r2
 800aef2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aef4:	f7fe fc00 	bl	80096f8 <HAL_GetTick>
 800aef8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b20      	cmp	r3, #32
 800af04:	f040 80e0 	bne.w	800b0c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	2319      	movs	r3, #25
 800af0e:	2201      	movs	r2, #1
 800af10:	4970      	ldr	r1, [pc, #448]	; (800b0d4 <HAL_I2C_Master_Transmit+0x1f4>)
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 fc58 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
 800af20:	e0d3      	b.n	800b0ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_I2C_Master_Transmit+0x50>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e0cc      	b.n	800b0ca <HAL_I2C_Master_Transmit+0x1ea>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b01      	cmp	r3, #1
 800af44:	d007      	beq.n	800af56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f042 0201 	orr.w	r2, r2, #1
 800af54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2221      	movs	r2, #33	; 0x21
 800af6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2210      	movs	r2, #16
 800af72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	893a      	ldrh	r2, [r7, #8]
 800af86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4a50      	ldr	r2, [pc, #320]	; (800b0d8 <HAL_I2C_Master_Transmit+0x1f8>)
 800af96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800af98:	8979      	ldrh	r1, [r7, #10]
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	6a3a      	ldr	r2, [r7, #32]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fac2 	bl	800b528 <I2C_MasterRequestWrite>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e08d      	b.n	800b0ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afae:	2300      	movs	r3, #0
 800afb0:	613b      	str	r3, [r7, #16]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	613b      	str	r3, [r7, #16]
 800afc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800afc4:	e066      	b.n	800b094 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	6a39      	ldr	r1, [r7, #32]
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 fcd2 	bl	800b974 <I2C_WaitOnTXEFlagUntilTimeout>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00d      	beq.n	800aff2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d107      	bne.n	800afee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e06b      	b.n	800b0ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff6:	781a      	ldrb	r2, [r3, #0]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b01a:	3b01      	subs	r3, #1
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d11b      	bne.n	800b068 <HAL_I2C_Master_Transmit+0x188>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b034:	2b00      	cmp	r3, #0
 800b036:	d017      	beq.n	800b068 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b052:	b29b      	uxth	r3, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	b29a      	uxth	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b060:	3b01      	subs	r3, #1
 800b062:	b29a      	uxth	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	6a39      	ldr	r1, [r7, #32]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 fcc2 	bl	800b9f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00d      	beq.n	800b094 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d107      	bne.n	800b090 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b08e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e01a      	b.n	800b0ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d194      	bne.n	800afc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e000      	b.n	800b0ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b0c8:	2302      	movs	r3, #2
  }
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	00100002 	.word	0x00100002
 800b0d8:	ffff0000 	.word	0xffff0000

0800b0dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08c      	sub	sp, #48	; 0x30
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	817b      	strh	r3, [r7, #10]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b0f0:	f7fe fb02 	bl	80096f8 <HAL_GetTick>
 800b0f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	f040 820b 	bne.w	800b51a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	2319      	movs	r3, #25
 800b10a:	2201      	movs	r2, #1
 800b10c:	497c      	ldr	r1, [pc, #496]	; (800b300 <HAL_I2C_Master_Receive+0x224>)
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f000 fb5a 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b11a:	2302      	movs	r3, #2
 800b11c:	e1fe      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_I2C_Master_Receive+0x50>
 800b128:	2302      	movs	r3, #2
 800b12a:	e1f7      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d007      	beq.n	800b152 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f042 0201 	orr.w	r2, r2, #1
 800b150:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b160:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2222      	movs	r2, #34	; 0x22
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2210      	movs	r2, #16
 800b16e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	893a      	ldrh	r2, [r7, #8]
 800b182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b188:	b29a      	uxth	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	4a5c      	ldr	r2, [pc, #368]	; (800b304 <HAL_I2C_Master_Receive+0x228>)
 800b192:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b194:	8979      	ldrh	r1, [r7, #10]
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 fa46 	bl	800b62c <I2C_MasterRequestRead>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e1b8      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d113      	bne.n	800b1da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	623b      	str	r3, [r7, #32]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	623b      	str	r3, [r7, #32]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	623b      	str	r3, [r7, #32]
 800b1c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	e18c      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d11b      	bne.n	800b21a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	61fb      	str	r3, [r7, #28]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	61fb      	str	r3, [r7, #28]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	61fb      	str	r3, [r7, #28]
 800b206:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	e16c      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d11b      	bne.n	800b25a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b230:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b242:	2300      	movs	r3, #0
 800b244:	61bb      	str	r3, [r7, #24]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	61bb      	str	r3, [r7, #24]
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	e14c      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	617b      	str	r3, [r7, #20]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b280:	e138      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b286:	2b03      	cmp	r3, #3
 800b288:	f200 80f1 	bhi.w	800b46e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b290:	2b01      	cmp	r3, #1
 800b292:	d123      	bne.n	800b2dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fbed 	bl	800ba78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e139      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	691a      	ldr	r2, [r3, #16]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2da:	e10b      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d14e      	bne.n	800b382 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4906      	ldr	r1, [pc, #24]	; (800b308 <HAL_I2C_Master_Receive+0x22c>)
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f000 fa6a 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d008      	beq.n	800b30c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e10e      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
 800b2fe:	bf00      	nop
 800b300:	00100002 	.word	0x00100002
 800b304:	ffff0000 	.word	0xffff0000
 800b308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b31a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	691a      	ldr	r2, [r3, #16]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b338:	3b01      	subs	r3, #1
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b344:	b29b      	uxth	r3, r3
 800b346:	3b01      	subs	r3, #1
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	691a      	ldr	r2, [r3, #16]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b36a:	3b01      	subs	r3, #1
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b376:	b29b      	uxth	r3, r3
 800b378:	3b01      	subs	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b380:	e0b8      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	2200      	movs	r2, #0
 800b38a:	4966      	ldr	r1, [pc, #408]	; (800b524 <HAL_I2C_Master_Receive+0x448>)
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 fa1b 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e0bf      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	691a      	ldr	r2, [r3, #16]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	494f      	ldr	r1, [pc, #316]	; (800b524 <HAL_I2C_Master_Receive+0x448>)
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f9ed 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e091      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	691a      	ldr	r2, [r3, #16]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b424:	3b01      	subs	r3, #1
 800b426:	b29a      	uxth	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b430:	b29b      	uxth	r3, r3
 800b432:	3b01      	subs	r3, #1
 800b434:	b29a      	uxth	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b456:	3b01      	subs	r3, #1
 800b458:	b29a      	uxth	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b462:	b29b      	uxth	r3, r3
 800b464:	3b01      	subs	r3, #1
 800b466:	b29a      	uxth	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b46c:	e042      	b.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 fb00 	bl	800ba78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e04c      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	691a      	ldr	r2, [r3, #16]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	f003 0304 	and.w	r3, r3, #4
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d118      	bne.n	800b4f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	691a      	ldr	r2, [r3, #16]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f47f aec2 	bne.w	800b282 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2220      	movs	r2, #32
 800b502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	e000      	b.n	800b51c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b51a:	2302      	movs	r3, #2
  }
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3728      	adds	r7, #40	; 0x28
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	00010004 	.word	0x00010004

0800b528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	607a      	str	r2, [r7, #4]
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	460b      	mov	r3, r1
 800b536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2b08      	cmp	r3, #8
 800b542:	d006      	beq.n	800b552 <I2C_MasterRequestWrite+0x2a>
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d003      	beq.n	800b552 <I2C_MasterRequestWrite+0x2a>
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b550:	d108      	bne.n	800b564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	e00b      	b.n	800b57c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b568:	2b12      	cmp	r3, #18
 800b56a:	d107      	bne.n	800b57c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b57a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f91d 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00d      	beq.n	800b5b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a2:	d103      	bne.n	800b5ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e035      	b.n	800b61c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b8:	d108      	bne.n	800b5cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b5ba:	897b      	ldrh	r3, [r7, #10]
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	461a      	mov	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b5c8:	611a      	str	r2, [r3, #16]
 800b5ca:	e01b      	b.n	800b604 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b5cc:	897b      	ldrh	r3, [r7, #10]
 800b5ce:	11db      	asrs	r3, r3, #7
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	f003 0306 	and.w	r3, r3, #6
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	f063 030f 	orn	r3, r3, #15
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	490e      	ldr	r1, [pc, #56]	; (800b624 <I2C_MasterRequestWrite+0xfc>)
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 f943 	bl	800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e010      	b.n	800b61c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5fa:	897b      	ldrh	r3, [r7, #10]
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	4907      	ldr	r1, [pc, #28]	; (800b628 <I2C_MasterRequestWrite+0x100>)
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 f933 	bl	800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e000      	b.n	800b61c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	00010008 	.word	0x00010008
 800b628:	00010002 	.word	0x00010002

0800b62c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b088      	sub	sp, #32
 800b630:	af02      	add	r7, sp, #8
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	460b      	mov	r3, r1
 800b63a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b650:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b08      	cmp	r3, #8
 800b656:	d006      	beq.n	800b666 <I2C_MasterRequestRead+0x3a>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d003      	beq.n	800b666 <I2C_MasterRequestRead+0x3a>
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b664:	d108      	bne.n	800b678 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	e00b      	b.n	800b690 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67c:	2b11      	cmp	r3, #17
 800b67e:	d107      	bne.n	800b690 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b68e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f893 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00d      	beq.n	800b6c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b6:	d103      	bne.n	800b6c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e079      	b.n	800b7b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6cc:	d108      	bne.n	800b6e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b6ce:	897b      	ldrh	r3, [r7, #10]
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f043 0301 	orr.w	r3, r3, #1
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	611a      	str	r2, [r3, #16]
 800b6de:	e05f      	b.n	800b7a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b6e0:	897b      	ldrh	r3, [r7, #10]
 800b6e2:	11db      	asrs	r3, r3, #7
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	f003 0306 	and.w	r3, r3, #6
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	f063 030f 	orn	r3, r3, #15
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	4930      	ldr	r1, [pc, #192]	; (800b7c0 <I2C_MasterRequestRead+0x194>)
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 f8b9 	bl	800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e054      	b.n	800b7b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b70e:	897b      	ldrh	r3, [r7, #10]
 800b710:	b2da      	uxtb	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4929      	ldr	r1, [pc, #164]	; (800b7c4 <I2C_MasterRequestRead+0x198>)
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 f8a9 	bl	800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e044      	b.n	800b7b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b72e:	2300      	movs	r3, #0
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	613b      	str	r3, [r7, #16]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b752:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 f831 	bl	800b7c8 <I2C_WaitOnFlagUntilTimeout>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00d      	beq.n	800b788 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77a:	d103      	bne.n	800b784 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b782:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e017      	b.n	800b7b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b788:	897b      	ldrh	r3, [r7, #10]
 800b78a:	11db      	asrs	r3, r3, #7
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	f003 0306 	and.w	r3, r3, #6
 800b792:	b2db      	uxtb	r3, r3
 800b794:	f063 030e 	orn	r3, r3, #14
 800b798:	b2da      	uxtb	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	4907      	ldr	r1, [pc, #28]	; (800b7c4 <I2C_MasterRequestRead+0x198>)
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 f865 	bl	800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	00010008 	.word	0x00010008
 800b7c4:	00010002 	.word	0x00010002

0800b7c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	603b      	str	r3, [r7, #0]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7d8:	e025      	b.n	800b826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d021      	beq.n	800b826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7e2:	f7fd ff89 	bl	80096f8 <HAL_GetTick>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d302      	bcc.n	800b7f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d116      	bne.n	800b826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2220      	movs	r2, #32
 800b802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	f043 0220 	orr.w	r2, r3, #32
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e023      	b.n	800b86e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d10d      	bne.n	800b84c <I2C_WaitOnFlagUntilTimeout+0x84>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	43da      	mvns	r2, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	4013      	ands	r3, r2
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bf0c      	ite	eq
 800b842:	2301      	moveq	r3, #1
 800b844:	2300      	movne	r3, #0
 800b846:	b2db      	uxtb	r3, r3
 800b848:	461a      	mov	r2, r3
 800b84a:	e00c      	b.n	800b866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	43da      	mvns	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	4013      	ands	r3, r2
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bf0c      	ite	eq
 800b85e:	2301      	moveq	r3, #1
 800b860:	2300      	movne	r3, #0
 800b862:	b2db      	uxtb	r3, r3
 800b864:	461a      	mov	r2, r3
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d0b6      	beq.n	800b7da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	607a      	str	r2, [r7, #4]
 800b882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b884:	e051      	b.n	800b92a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b894:	d123      	bne.n	800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b8ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	f043 0204 	orr.w	r2, r3, #4
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e046      	b.n	800b96c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e4:	d021      	beq.n	800b92a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8e6:	f7fd ff07 	bl	80096f8 <HAL_GetTick>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d302      	bcc.n	800b8fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d116      	bne.n	800b92a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2220      	movs	r2, #32
 800b906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b916:	f043 0220 	orr.w	r2, r3, #32
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e020      	b.n	800b96c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	0c1b      	lsrs	r3, r3, #16
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b01      	cmp	r3, #1
 800b932:	d10c      	bne.n	800b94e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	43da      	mvns	r2, r3
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4013      	ands	r3, r2
 800b940:	b29b      	uxth	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	bf14      	ite	ne
 800b946:	2301      	movne	r3, #1
 800b948:	2300      	moveq	r3, #0
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	e00b      	b.n	800b966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	43da      	mvns	r2, r3
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	4013      	ands	r3, r2
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bf14      	ite	ne
 800b960:	2301      	movne	r3, #1
 800b962:	2300      	moveq	r3, #0
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d18d      	bne.n	800b886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b980:	e02d      	b.n	800b9de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f000 f8ce 	bl	800bb24 <I2C_IsAcknowledgeFailed>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e02d      	b.n	800b9ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d021      	beq.n	800b9de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b99a:	f7fd fead 	bl	80096f8 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d302      	bcc.n	800b9b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d116      	bne.n	800b9de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ca:	f043 0220 	orr.w	r2, r3, #32
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e007      	b.n	800b9ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e8:	2b80      	cmp	r3, #128	; 0x80
 800b9ea:	d1ca      	bne.n	800b982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba02:	e02d      	b.n	800ba60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f88d 	bl	800bb24 <I2C_IsAcknowledgeFailed>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e02d      	b.n	800ba70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d021      	beq.n	800ba60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba1c:	f7fd fe6c 	bl	80096f8 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d302      	bcc.n	800ba32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d116      	bne.n	800ba60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4c:	f043 0220 	orr.w	r2, r3, #32
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e007      	b.n	800ba70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	f003 0304 	and.w	r3, r3, #4
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	d1ca      	bne.n	800ba04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba84:	e042      	b.n	800bb0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	f003 0310 	and.w	r3, r3, #16
 800ba90:	2b10      	cmp	r3, #16
 800ba92:	d119      	bne.n	800bac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f06f 0210 	mvn.w	r2, #16
 800ba9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e029      	b.n	800bb1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bac8:	f7fd fe16 	bl	80096f8 <HAL_GetTick>
 800bacc:	4602      	mov	r2, r0
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d302      	bcc.n	800bade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d116      	bne.n	800bb0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf8:	f043 0220 	orr.w	r2, r3, #32
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e007      	b.n	800bb1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d1b5      	bne.n	800ba86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb3a:	d11b      	bne.n	800bb74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	f043 0204 	orr.w	r2, r3, #4
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e000      	b.n	800bb76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
	...

0800bb84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bb8e:	2300      	movs	r3, #0
 800bb90:	603b      	str	r3, [r7, #0]
 800bb92:	4b20      	ldr	r3, [pc, #128]	; (800bc14 <HAL_PWREx_EnableOverDrive+0x90>)
 800bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb96:	4a1f      	ldr	r2, [pc, #124]	; (800bc14 <HAL_PWREx_EnableOverDrive+0x90>)
 800bb98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb9c:	6413      	str	r3, [r2, #64]	; 0x40
 800bb9e:	4b1d      	ldr	r3, [pc, #116]	; (800bc14 <HAL_PWREx_EnableOverDrive+0x90>)
 800bba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bba6:	603b      	str	r3, [r7, #0]
 800bba8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bbaa:	4b1b      	ldr	r3, [pc, #108]	; (800bc18 <HAL_PWREx_EnableOverDrive+0x94>)
 800bbac:	2201      	movs	r2, #1
 800bbae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bbb0:	f7fd fda2 	bl	80096f8 <HAL_GetTick>
 800bbb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bbb6:	e009      	b.n	800bbcc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbb8:	f7fd fd9e 	bl	80096f8 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbc6:	d901      	bls.n	800bbcc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e01f      	b.n	800bc0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bbcc:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <HAL_PWREx_EnableOverDrive+0x98>)
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbd8:	d1ee      	bne.n	800bbb8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bbda:	4b11      	ldr	r3, [pc, #68]	; (800bc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbdc:	2201      	movs	r2, #1
 800bbde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bbe0:	f7fd fd8a 	bl	80096f8 <HAL_GetTick>
 800bbe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbe6:	e009      	b.n	800bbfc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbe8:	f7fd fd86 	bl	80096f8 <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbf6:	d901      	bls.n	800bbfc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e007      	b.n	800bc0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbfc:	4b07      	ldr	r3, [pc, #28]	; (800bc1c <HAL_PWREx_EnableOverDrive+0x98>)
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc08:	d1ee      	bne.n	800bbe8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	40023800 	.word	0x40023800
 800bc18:	420e0040 	.word	0x420e0040
 800bc1c:	40007000 	.word	0x40007000
 800bc20:	420e0044 	.word	0x420e0044

0800bc24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e0cc      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc38:	4b68      	ldr	r3, [pc, #416]	; (800bddc <HAL_RCC_ClockConfig+0x1b8>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 030f 	and.w	r3, r3, #15
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d90c      	bls.n	800bc60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc46:	4b65      	ldr	r3, [pc, #404]	; (800bddc <HAL_RCC_ClockConfig+0x1b8>)
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	b2d2      	uxtb	r2, r2
 800bc4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc4e:	4b63      	ldr	r3, [pc, #396]	; (800bddc <HAL_RCC_ClockConfig+0x1b8>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 030f 	and.w	r3, r3, #15
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d001      	beq.n	800bc60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e0b8      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 0302 	and.w	r3, r3, #2
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d020      	beq.n	800bcae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d005      	beq.n	800bc84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bc78:	4b59      	ldr	r3, [pc, #356]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	4a58      	ldr	r2, [pc, #352]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bc7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bc82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0308 	and.w	r3, r3, #8
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc90:	4b53      	ldr	r3, [pc, #332]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	4a52      	ldr	r2, [pc, #328]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bc96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bc9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc9c:	4b50      	ldr	r3, [pc, #320]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	494d      	ldr	r1, [pc, #308]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d044      	beq.n	800bd44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d107      	bne.n	800bcd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcc2:	4b47      	ldr	r3, [pc, #284]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d119      	bne.n	800bd02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e07f      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d003      	beq.n	800bce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d107      	bne.n	800bcf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bce2:	4b3f      	ldr	r3, [pc, #252]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e06f      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcf2:	4b3b      	ldr	r3, [pc, #236]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e067      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd02:	4b37      	ldr	r3, [pc, #220]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f023 0203 	bic.w	r2, r3, #3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	4934      	ldr	r1, [pc, #208]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bd10:	4313      	orrs	r3, r2
 800bd12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd14:	f7fd fcf0 	bl	80096f8 <HAL_GetTick>
 800bd18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd1a:	e00a      	b.n	800bd32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd1c:	f7fd fcec 	bl	80096f8 <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d901      	bls.n	800bd32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e04f      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd32:	4b2b      	ldr	r3, [pc, #172]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 020c 	and.w	r2, r3, #12
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d1eb      	bne.n	800bd1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd44:	4b25      	ldr	r3, [pc, #148]	; (800bddc <HAL_RCC_ClockConfig+0x1b8>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d20c      	bcs.n	800bd6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd52:	4b22      	ldr	r3, [pc, #136]	; (800bddc <HAL_RCC_ClockConfig+0x1b8>)
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	b2d2      	uxtb	r2, r2
 800bd58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd5a:	4b20      	ldr	r3, [pc, #128]	; (800bddc <HAL_RCC_ClockConfig+0x1b8>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 030f 	and.w	r3, r3, #15
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d001      	beq.n	800bd6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e032      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0304 	and.w	r3, r3, #4
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d008      	beq.n	800bd8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bd78:	4b19      	ldr	r3, [pc, #100]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	4916      	ldr	r1, [pc, #88]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 0308 	and.w	r3, r3, #8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d009      	beq.n	800bdaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	490e      	ldr	r1, [pc, #56]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bda6:	4313      	orrs	r3, r2
 800bda8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bdaa:	f000 f821 	bl	800bdf0 <HAL_RCC_GetSysClockFreq>
 800bdae:	4601      	mov	r1, r0
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <HAL_RCC_ClockConfig+0x1bc>)
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	091b      	lsrs	r3, r3, #4
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	4a0a      	ldr	r2, [pc, #40]	; (800bde4 <HAL_RCC_ClockConfig+0x1c0>)
 800bdbc:	5cd3      	ldrb	r3, [r2, r3]
 800bdbe:	fa21 f303 	lsr.w	r3, r1, r3
 800bdc2:	4a09      	ldr	r2, [pc, #36]	; (800bde8 <HAL_RCC_ClockConfig+0x1c4>)
 800bdc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <HAL_RCC_ClockConfig+0x1c8>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fc50 	bl	8009670 <HAL_InitTick>

  return HAL_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	40023c00 	.word	0x40023c00
 800bde0:	40023800 	.word	0x40023800
 800bde4:	080199f0 	.word	0x080199f0
 800bde8:	20000000 	.word	0x20000000
 800bdec:	20000004 	.word	0x20000004

0800bdf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	607b      	str	r3, [r7, #4]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	2300      	movs	r3, #0
 800be00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800be02:	2300      	movs	r3, #0
 800be04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be06:	4b63      	ldr	r3, [pc, #396]	; (800bf94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f003 030c 	and.w	r3, r3, #12
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d007      	beq.n	800be22 <HAL_RCC_GetSysClockFreq+0x32>
 800be12:	2b08      	cmp	r3, #8
 800be14:	d008      	beq.n	800be28 <HAL_RCC_GetSysClockFreq+0x38>
 800be16:	2b00      	cmp	r3, #0
 800be18:	f040 80b4 	bne.w	800bf84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800be1c:	4b5e      	ldr	r3, [pc, #376]	; (800bf98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be1e:	60bb      	str	r3, [r7, #8]
       break;
 800be20:	e0b3      	b.n	800bf8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800be22:	4b5d      	ldr	r3, [pc, #372]	; (800bf98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be24:	60bb      	str	r3, [r7, #8]
      break;
 800be26:	e0b0      	b.n	800bf8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be28:	4b5a      	ldr	r3, [pc, #360]	; (800bf94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800be32:	4b58      	ldr	r3, [pc, #352]	; (800bf94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d04a      	beq.n	800bed4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be3e:	4b55      	ldr	r3, [pc, #340]	; (800bf94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	099b      	lsrs	r3, r3, #6
 800be44:	f04f 0400 	mov.w	r4, #0
 800be48:	f240 11ff 	movw	r1, #511	; 0x1ff
 800be4c:	f04f 0200 	mov.w	r2, #0
 800be50:	ea03 0501 	and.w	r5, r3, r1
 800be54:	ea04 0602 	and.w	r6, r4, r2
 800be58:	4629      	mov	r1, r5
 800be5a:	4632      	mov	r2, r6
 800be5c:	f04f 0300 	mov.w	r3, #0
 800be60:	f04f 0400 	mov.w	r4, #0
 800be64:	0154      	lsls	r4, r2, #5
 800be66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800be6a:	014b      	lsls	r3, r1, #5
 800be6c:	4619      	mov	r1, r3
 800be6e:	4622      	mov	r2, r4
 800be70:	1b49      	subs	r1, r1, r5
 800be72:	eb62 0206 	sbc.w	r2, r2, r6
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	f04f 0400 	mov.w	r4, #0
 800be7e:	0194      	lsls	r4, r2, #6
 800be80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800be84:	018b      	lsls	r3, r1, #6
 800be86:	1a5b      	subs	r3, r3, r1
 800be88:	eb64 0402 	sbc.w	r4, r4, r2
 800be8c:	f04f 0100 	mov.w	r1, #0
 800be90:	f04f 0200 	mov.w	r2, #0
 800be94:	00e2      	lsls	r2, r4, #3
 800be96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800be9a:	00d9      	lsls	r1, r3, #3
 800be9c:	460b      	mov	r3, r1
 800be9e:	4614      	mov	r4, r2
 800bea0:	195b      	adds	r3, r3, r5
 800bea2:	eb44 0406 	adc.w	r4, r4, r6
 800bea6:	f04f 0100 	mov.w	r1, #0
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	02a2      	lsls	r2, r4, #10
 800beb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800beb4:	0299      	lsls	r1, r3, #10
 800beb6:	460b      	mov	r3, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	4621      	mov	r1, r4
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f04f 0400 	mov.w	r4, #0
 800bec4:	461a      	mov	r2, r3
 800bec6:	4623      	mov	r3, r4
 800bec8:	f7f4 fef6 	bl	8000cb8 <__aeabi_uldivmod>
 800becc:	4603      	mov	r3, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	e049      	b.n	800bf68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bed4:	4b2f      	ldr	r3, [pc, #188]	; (800bf94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	099b      	lsrs	r3, r3, #6
 800beda:	f04f 0400 	mov.w	r4, #0
 800bede:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	ea03 0501 	and.w	r5, r3, r1
 800beea:	ea04 0602 	and.w	r6, r4, r2
 800beee:	4629      	mov	r1, r5
 800bef0:	4632      	mov	r2, r6
 800bef2:	f04f 0300 	mov.w	r3, #0
 800bef6:	f04f 0400 	mov.w	r4, #0
 800befa:	0154      	lsls	r4, r2, #5
 800befc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf00:	014b      	lsls	r3, r1, #5
 800bf02:	4619      	mov	r1, r3
 800bf04:	4622      	mov	r2, r4
 800bf06:	1b49      	subs	r1, r1, r5
 800bf08:	eb62 0206 	sbc.w	r2, r2, r6
 800bf0c:	f04f 0300 	mov.w	r3, #0
 800bf10:	f04f 0400 	mov.w	r4, #0
 800bf14:	0194      	lsls	r4, r2, #6
 800bf16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bf1a:	018b      	lsls	r3, r1, #6
 800bf1c:	1a5b      	subs	r3, r3, r1
 800bf1e:	eb64 0402 	sbc.w	r4, r4, r2
 800bf22:	f04f 0100 	mov.w	r1, #0
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	00e2      	lsls	r2, r4, #3
 800bf2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bf30:	00d9      	lsls	r1, r3, #3
 800bf32:	460b      	mov	r3, r1
 800bf34:	4614      	mov	r4, r2
 800bf36:	195b      	adds	r3, r3, r5
 800bf38:	eb44 0406 	adc.w	r4, r4, r6
 800bf3c:	f04f 0100 	mov.w	r1, #0
 800bf40:	f04f 0200 	mov.w	r2, #0
 800bf44:	02a2      	lsls	r2, r4, #10
 800bf46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf4a:	0299      	lsls	r1, r3, #10
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4614      	mov	r4, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	4621      	mov	r1, r4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f04f 0400 	mov.w	r4, #0
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	4623      	mov	r3, r4
 800bf5e:	f7f4 feab 	bl	8000cb8 <__aeabi_uldivmod>
 800bf62:	4603      	mov	r3, r0
 800bf64:	460c      	mov	r4, r1
 800bf66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bf68:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	0c1b      	lsrs	r3, r3, #16
 800bf6e:	f003 0303 	and.w	r3, r3, #3
 800bf72:	3301      	adds	r3, #1
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf80:	60bb      	str	r3, [r7, #8]
      break;
 800bf82:	e002      	b.n	800bf8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bf86:	60bb      	str	r3, [r7, #8]
      break;
 800bf88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf94:	40023800 	.word	0x40023800
 800bf98:	00f42400 	.word	0x00f42400

0800bf9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bfa0:	4b03      	ldr	r3, [pc, #12]	; (800bfb0 <HAL_RCC_GetHCLKFreq+0x14>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	20000000 	.word	0x20000000

0800bfb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bfb8:	f7ff fff0 	bl	800bf9c <HAL_RCC_GetHCLKFreq>
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	0a9b      	lsrs	r3, r3, #10
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	4a03      	ldr	r2, [pc, #12]	; (800bfd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfca:	5cd3      	ldrb	r3, [r2, r3]
 800bfcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	40023800 	.word	0x40023800
 800bfd8:	08019a00 	.word	0x08019a00

0800bfdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bfe0:	f7ff ffdc 	bl	800bf9c <HAL_RCC_GetHCLKFreq>
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	4b05      	ldr	r3, [pc, #20]	; (800bffc <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	0b5b      	lsrs	r3, r3, #13
 800bfec:	f003 0307 	and.w	r3, r3, #7
 800bff0:	4a03      	ldr	r2, [pc, #12]	; (800c000 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bff2:	5cd3      	ldrb	r3, [r2, r3]
 800bff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	40023800 	.word	0x40023800
 800c000:	08019a00 	.word	0x08019a00

0800c004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c010:	2300      	movs	r3, #0
 800c012:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c018:	2300      	movs	r3, #0
 800c01a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00a      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c02c:	4b66      	ldr	r3, [pc, #408]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c032:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03a:	4963      	ldr	r1, [pc, #396]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c03c:	4313      	orrs	r3, r2
 800c03e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00a      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c04e:	4b5e      	ldr	r3, [pc, #376]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c054:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05c:	495a      	ldr	r1, [pc, #360]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c05e:	4313      	orrs	r3, r2
 800c060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10b      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d105      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c084:	2b00      	cmp	r3, #0
 800c086:	d075      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c088:	4b50      	ldr	r3, [pc, #320]	; (800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c08e:	f7fd fb33 	bl	80096f8 <HAL_GetTick>
 800c092:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c094:	e008      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c096:	f7fd fb2f 	bl	80096f8 <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d901      	bls.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e1dc      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0a8:	4b47      	ldr	r3, [pc, #284]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1f0      	bne.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d009      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	019a      	lsls	r2, r3, #6
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	071b      	lsls	r3, r3, #28
 800c0cc:	493e      	ldr	r1, [pc, #248]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0302 	and.w	r3, r3, #2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01f      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c0e0:	4b39      	ldr	r3, [pc, #228]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0e6:	0f1b      	lsrs	r3, r3, #28
 800c0e8:	f003 0307 	and.w	r3, r3, #7
 800c0ec:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	019a      	lsls	r2, r3, #6
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	061b      	lsls	r3, r3, #24
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	071b      	lsls	r3, r3, #28
 800c100:	4931      	ldr	r1, [pc, #196]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c102:	4313      	orrs	r3, r2
 800c104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c108:	4b2f      	ldr	r3, [pc, #188]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c10a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c10e:	f023 021f 	bic.w	r2, r3, #31
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	3b01      	subs	r3, #1
 800c118:	492b      	ldr	r1, [pc, #172]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00d      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	019a      	lsls	r2, r3, #6
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	061b      	lsls	r3, r3, #24
 800c138:	431a      	orrs	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	071b      	lsls	r3, r3, #28
 800c140:	4921      	ldr	r1, [pc, #132]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c142:	4313      	orrs	r3, r2
 800c144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c148:	4b20      	ldr	r3, [pc, #128]	; (800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c14e:	f7fd fad3 	bl	80096f8 <HAL_GetTick>
 800c152:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c154:	e008      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c156:	f7fd facf 	bl	80096f8 <HAL_GetTick>
 800c15a:	4602      	mov	r2, r0
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	2b02      	cmp	r3, #2
 800c162:	d901      	bls.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c164:	2303      	movs	r3, #3
 800c166:	e17c      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c168:	4b17      	ldr	r3, [pc, #92]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0f0      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d112      	bne.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10c      	bne.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 80ce 	beq.w	800c336 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c19e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1a2:	f040 80c8 	bne.w	800c336 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1ac:	f7fd faa4 	bl	80096f8 <HAL_GetTick>
 800c1b0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c1b2:	e00f      	b.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c1b4:	f7fd faa0 	bl	80096f8 <HAL_GetTick>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d908      	bls.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e14d      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c1c6:	bf00      	nop
 800c1c8:	40023800 	.word	0x40023800
 800c1cc:	42470068 	.word	0x42470068
 800c1d0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c1d4:	4ba5      	ldr	r3, [pc, #660]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1e0:	d0e8      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0304 	and.w	r3, r3, #4
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d02e      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c1ee:	4b9f      	ldr	r3, [pc, #636]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f4:	0c1b      	lsrs	r3, r3, #16
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c200:	4b9a      	ldr	r3, [pc, #616]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c206:	0f1b      	lsrs	r3, r3, #28
 800c208:	f003 0307 	and.w	r3, r3, #7
 800c20c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	019a      	lsls	r2, r3, #6
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	085b      	lsrs	r3, r3, #1
 800c218:	3b01      	subs	r3, #1
 800c21a:	041b      	lsls	r3, r3, #16
 800c21c:	431a      	orrs	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	061b      	lsls	r3, r3, #24
 800c224:	431a      	orrs	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	071b      	lsls	r3, r3, #28
 800c22a:	4990      	ldr	r1, [pc, #576]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c22c:	4313      	orrs	r3, r2
 800c22e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c232:	4b8e      	ldr	r3, [pc, #568]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c238:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	3b01      	subs	r3, #1
 800c242:	021b      	lsls	r3, r3, #8
 800c244:	4989      	ldr	r1, [pc, #548]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c246:	4313      	orrs	r3, r2
 800c248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0308 	and.w	r3, r3, #8
 800c254:	2b00      	cmp	r3, #0
 800c256:	d02c      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c258:	4b84      	ldr	r3, [pc, #528]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25e:	0c1b      	lsrs	r3, r3, #16
 800c260:	f003 0303 	and.w	r3, r3, #3
 800c264:	3301      	adds	r3, #1
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c26a:	4b80      	ldr	r3, [pc, #512]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c270:	0e1b      	lsrs	r3, r3, #24
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	019a      	lsls	r2, r3, #6
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	085b      	lsrs	r3, r3, #1
 800c282:	3b01      	subs	r3, #1
 800c284:	041b      	lsls	r3, r3, #16
 800c286:	431a      	orrs	r2, r3
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	061b      	lsls	r3, r3, #24
 800c28c:	431a      	orrs	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	69db      	ldr	r3, [r3, #28]
 800c292:	071b      	lsls	r3, r3, #28
 800c294:	4975      	ldr	r1, [pc, #468]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c296:	4313      	orrs	r3, r2
 800c298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c29c:	4b73      	ldr	r3, [pc, #460]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c29e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2aa:	4970      	ldr	r1, [pc, #448]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d024      	beq.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c2c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2c6:	d11f      	bne.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c2c8:	4b68      	ldr	r3, [pc, #416]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ce:	0e1b      	lsrs	r3, r3, #24
 800c2d0:	f003 030f 	and.w	r3, r3, #15
 800c2d4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c2d6:	4b65      	ldr	r3, [pc, #404]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2dc:	0f1b      	lsrs	r3, r3, #28
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	019a      	lsls	r2, r3, #6
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	085b      	lsrs	r3, r3, #1
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	041b      	lsls	r3, r3, #16
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	061b      	lsls	r3, r3, #24
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	071b      	lsls	r3, r3, #28
 800c300:	495a      	ldr	r1, [pc, #360]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c302:	4313      	orrs	r3, r2
 800c304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c308:	4b59      	ldr	r3, [pc, #356]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c30e:	f7fd f9f3 	bl	80096f8 <HAL_GetTick>
 800c312:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c314:	e008      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c316:	f7fd f9ef 	bl	80096f8 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d901      	bls.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e09c      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c328:	4b50      	ldr	r3, [pc, #320]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c334:	d1ef      	bne.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0320 	and.w	r3, r3, #32
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 8083 	beq.w	800c44a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c344:	2300      	movs	r3, #0
 800c346:	60bb      	str	r3, [r7, #8]
 800c348:	4b48      	ldr	r3, [pc, #288]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34c:	4a47      	ldr	r2, [pc, #284]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c34e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c352:	6413      	str	r3, [r2, #64]	; 0x40
 800c354:	4b45      	ldr	r3, [pc, #276]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c35c:	60bb      	str	r3, [r7, #8]
 800c35e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c360:	4b44      	ldr	r3, [pc, #272]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a43      	ldr	r2, [pc, #268]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c36a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c36c:	f7fd f9c4 	bl	80096f8 <HAL_GetTick>
 800c370:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c372:	e008      	b.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c374:	f7fd f9c0 	bl	80096f8 <HAL_GetTick>
 800c378:	4602      	mov	r2, r0
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d901      	bls.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c382:	2303      	movs	r3, #3
 800c384:	e06d      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c386:	4b3b      	ldr	r3, [pc, #236]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0f0      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c392:	4b36      	ldr	r3, [pc, #216]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c39a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d02f      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d028      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3b0:	4b2e      	ldr	r3, [pc, #184]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3b8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c3ba:	4b2f      	ldr	r3, [pc, #188]	; (800c478 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c3c0:	4b2d      	ldr	r3, [pc, #180]	; (800c478 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c3c6:	4a29      	ldr	r2, [pc, #164]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c3cc:	4b27      	ldr	r3, [pc, #156]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d114      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c3d8:	f7fd f98e 	bl	80096f8 <HAL_GetTick>
 800c3dc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3de:	e00a      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3e0:	f7fd f98a 	bl	80096f8 <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d901      	bls.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	e035      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3f6:	4b1d      	ldr	r3, [pc, #116]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0ee      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c40a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c40e:	d10d      	bne.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c410:	4b16      	ldr	r3, [pc, #88]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c424:	4911      	ldr	r1, [pc, #68]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c426:	4313      	orrs	r3, r2
 800c428:	608b      	str	r3, [r1, #8]
 800c42a:	e005      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c42c:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	4a0e      	ldr	r2, [pc, #56]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c432:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c436:	6093      	str	r3, [r2, #8]
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c43a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c444:	4909      	ldr	r1, [pc, #36]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c446:	4313      	orrs	r3, r2
 800c448:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f003 0310 	and.w	r3, r3, #16
 800c452:	2b00      	cmp	r3, #0
 800c454:	d004      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c45e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3720      	adds	r7, #32
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	40023800 	.word	0x40023800
 800c470:	42470070 	.word	0x42470070
 800c474:	40007000 	.word	0x40007000
 800c478:	42470e40 	.word	0x42470e40
 800c47c:	424711e0 	.word	0x424711e0

0800c480 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d075      	beq.n	800c584 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c498:	4ba2      	ldr	r3, [pc, #648]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f003 030c 	and.w	r3, r3, #12
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d00c      	beq.n	800c4be <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c4a4:	4b9f      	ldr	r3, [pc, #636]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d112      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c4b0:	4b9c      	ldr	r3, [pc, #624]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4bc:	d10b      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4be:	4b99      	ldr	r3, [pc, #612]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d05b      	beq.n	800c582 <HAL_RCC_OscConfig+0x102>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d157      	bne.n	800c582 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e20b      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4de:	d106      	bne.n	800c4ee <HAL_RCC_OscConfig+0x6e>
 800c4e0:	4b90      	ldr	r3, [pc, #576]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a8f      	ldr	r2, [pc, #572]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	e01d      	b.n	800c52a <HAL_RCC_OscConfig+0xaa>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4f6:	d10c      	bne.n	800c512 <HAL_RCC_OscConfig+0x92>
 800c4f8:	4b8a      	ldr	r3, [pc, #552]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a89      	ldr	r2, [pc, #548]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c4fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	4b87      	ldr	r3, [pc, #540]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a86      	ldr	r2, [pc, #536]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c50a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c50e:	6013      	str	r3, [r2, #0]
 800c510:	e00b      	b.n	800c52a <HAL_RCC_OscConfig+0xaa>
 800c512:	4b84      	ldr	r3, [pc, #528]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a83      	ldr	r2, [pc, #524]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	4b81      	ldr	r3, [pc, #516]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a80      	ldr	r2, [pc, #512]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c528:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d013      	beq.n	800c55a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c532:	f7fd f8e1 	bl	80096f8 <HAL_GetTick>
 800c536:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c538:	e008      	b.n	800c54c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c53a:	f7fd f8dd 	bl	80096f8 <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	2b64      	cmp	r3, #100	; 0x64
 800c546:	d901      	bls.n	800c54c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e1d0      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c54c:	4b75      	ldr	r3, [pc, #468]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0f0      	beq.n	800c53a <HAL_RCC_OscConfig+0xba>
 800c558:	e014      	b.n	800c584 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c55a:	f7fd f8cd 	bl	80096f8 <HAL_GetTick>
 800c55e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c560:	e008      	b.n	800c574 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c562:	f7fd f8c9 	bl	80096f8 <HAL_GetTick>
 800c566:	4602      	mov	r2, r0
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	2b64      	cmp	r3, #100	; 0x64
 800c56e:	d901      	bls.n	800c574 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	e1bc      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c574:	4b6b      	ldr	r3, [pc, #428]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1f0      	bne.n	800c562 <HAL_RCC_OscConfig+0xe2>
 800c580:	e000      	b.n	800c584 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c582:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0302 	and.w	r3, r3, #2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d063      	beq.n	800c658 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c590:	4b64      	ldr	r3, [pc, #400]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f003 030c 	and.w	r3, r3, #12
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c59c:	4b61      	ldr	r3, [pc, #388]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c5a4:	2b08      	cmp	r3, #8
 800c5a6:	d11c      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5a8:	4b5e      	ldr	r3, [pc, #376]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d116      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5b4:	4b5b      	ldr	r3, [pc, #364]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <HAL_RCC_OscConfig+0x14c>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d001      	beq.n	800c5cc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e190      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5cc:	4b55      	ldr	r3, [pc, #340]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	4952      	ldr	r1, [pc, #328]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5e0:	e03a      	b.n	800c658 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d020      	beq.n	800c62c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5ea:	4b4f      	ldr	r3, [pc, #316]	; (800c728 <HAL_RCC_OscConfig+0x2a8>)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f0:	f7fd f882 	bl	80096f8 <HAL_GetTick>
 800c5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5f6:	e008      	b.n	800c60a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c5f8:	f7fd f87e 	bl	80096f8 <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b02      	cmp	r3, #2
 800c604:	d901      	bls.n	800c60a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e171      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c60a:	4b46      	ldr	r3, [pc, #280]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0f0      	beq.n	800c5f8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c616:	4b43      	ldr	r3, [pc, #268]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	493f      	ldr	r1, [pc, #252]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c626:	4313      	orrs	r3, r2
 800c628:	600b      	str	r3, [r1, #0]
 800c62a:	e015      	b.n	800c658 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c62c:	4b3e      	ldr	r3, [pc, #248]	; (800c728 <HAL_RCC_OscConfig+0x2a8>)
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c632:	f7fd f861 	bl	80096f8 <HAL_GetTick>
 800c636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c638:	e008      	b.n	800c64c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c63a:	f7fd f85d 	bl	80096f8 <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	2b02      	cmp	r3, #2
 800c646:	d901      	bls.n	800c64c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c648:	2303      	movs	r3, #3
 800c64a:	e150      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c64c:	4b35      	ldr	r3, [pc, #212]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1f0      	bne.n	800c63a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0308 	and.w	r3, r3, #8
 800c660:	2b00      	cmp	r3, #0
 800c662:	d030      	beq.n	800c6c6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d016      	beq.n	800c69a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c66c:	4b2f      	ldr	r3, [pc, #188]	; (800c72c <HAL_RCC_OscConfig+0x2ac>)
 800c66e:	2201      	movs	r2, #1
 800c670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c672:	f7fd f841 	bl	80096f8 <HAL_GetTick>
 800c676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c678:	e008      	b.n	800c68c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c67a:	f7fd f83d 	bl	80096f8 <HAL_GetTick>
 800c67e:	4602      	mov	r2, r0
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	2b02      	cmp	r3, #2
 800c686:	d901      	bls.n	800c68c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	e130      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c68c:	4b25      	ldr	r3, [pc, #148]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c68e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0f0      	beq.n	800c67a <HAL_RCC_OscConfig+0x1fa>
 800c698:	e015      	b.n	800c6c6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c69a:	4b24      	ldr	r3, [pc, #144]	; (800c72c <HAL_RCC_OscConfig+0x2ac>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a0:	f7fd f82a 	bl	80096f8 <HAL_GetTick>
 800c6a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6a6:	e008      	b.n	800c6ba <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6a8:	f7fd f826 	bl	80096f8 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d901      	bls.n	800c6ba <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e119      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6ba:	4b1a      	ldr	r3, [pc, #104]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f0      	bne.n	800c6a8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 809f 	beq.w	800c812 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6d8:	4b12      	ldr	r3, [pc, #72]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10f      	bne.n	800c704 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	4b0e      	ldr	r3, [pc, #56]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ec:	4a0d      	ldr	r2, [pc, #52]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c6ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6f2:	6413      	str	r3, [r2, #64]	; 0x40
 800c6f4:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <HAL_RCC_OscConfig+0x2a4>)
 800c6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c700:	2301      	movs	r3, #1
 800c702:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c704:	4b0a      	ldr	r3, [pc, #40]	; (800c730 <HAL_RCC_OscConfig+0x2b0>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d120      	bne.n	800c752 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <HAL_RCC_OscConfig+0x2b0>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a06      	ldr	r2, [pc, #24]	; (800c730 <HAL_RCC_OscConfig+0x2b0>)
 800c716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c71a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c71c:	f7fc ffec 	bl	80096f8 <HAL_GetTick>
 800c720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c722:	e010      	b.n	800c746 <HAL_RCC_OscConfig+0x2c6>
 800c724:	40023800 	.word	0x40023800
 800c728:	42470000 	.word	0x42470000
 800c72c:	42470e80 	.word	0x42470e80
 800c730:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c734:	f7fc ffe0 	bl	80096f8 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d901      	bls.n	800c746 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e0d3      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c746:	4b6c      	ldr	r3, [pc, #432]	; (800c8f8 <HAL_RCC_OscConfig+0x478>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0f0      	beq.n	800c734 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d106      	bne.n	800c768 <HAL_RCC_OscConfig+0x2e8>
 800c75a:	4b68      	ldr	r3, [pc, #416]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75e:	4a67      	ldr	r2, [pc, #412]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c760:	f043 0301 	orr.w	r3, r3, #1
 800c764:	6713      	str	r3, [r2, #112]	; 0x70
 800c766:	e01c      	b.n	800c7a2 <HAL_RCC_OscConfig+0x322>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	2b05      	cmp	r3, #5
 800c76e:	d10c      	bne.n	800c78a <HAL_RCC_OscConfig+0x30a>
 800c770:	4b62      	ldr	r3, [pc, #392]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c774:	4a61      	ldr	r2, [pc, #388]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c776:	f043 0304 	orr.w	r3, r3, #4
 800c77a:	6713      	str	r3, [r2, #112]	; 0x70
 800c77c:	4b5f      	ldr	r3, [pc, #380]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c780:	4a5e      	ldr	r2, [pc, #376]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	6713      	str	r3, [r2, #112]	; 0x70
 800c788:	e00b      	b.n	800c7a2 <HAL_RCC_OscConfig+0x322>
 800c78a:	4b5c      	ldr	r3, [pc, #368]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c78e:	4a5b      	ldr	r2, [pc, #364]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c790:	f023 0301 	bic.w	r3, r3, #1
 800c794:	6713      	str	r3, [r2, #112]	; 0x70
 800c796:	4b59      	ldr	r3, [pc, #356]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c79a:	4a58      	ldr	r2, [pc, #352]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c79c:	f023 0304 	bic.w	r3, r3, #4
 800c7a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d015      	beq.n	800c7d6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7aa:	f7fc ffa5 	bl	80096f8 <HAL_GetTick>
 800c7ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7b0:	e00a      	b.n	800c7c8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7b2:	f7fc ffa1 	bl	80096f8 <HAL_GetTick>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d901      	bls.n	800c7c8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e092      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7c8:	4b4c      	ldr	r3, [pc, #304]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7cc:	f003 0302 	and.w	r3, r3, #2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d0ee      	beq.n	800c7b2 <HAL_RCC_OscConfig+0x332>
 800c7d4:	e014      	b.n	800c800 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7d6:	f7fc ff8f 	bl	80096f8 <HAL_GetTick>
 800c7da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7dc:	e00a      	b.n	800c7f4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7de:	f7fc ff8b 	bl	80096f8 <HAL_GetTick>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d901      	bls.n	800c7f4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e07c      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7f4:	4b41      	ldr	r3, [pc, #260]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7f8:	f003 0302 	and.w	r3, r3, #2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1ee      	bne.n	800c7de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d105      	bne.n	800c812 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c806:	4b3d      	ldr	r3, [pc, #244]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	4a3c      	ldr	r2, [pc, #240]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c80c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d068      	beq.n	800c8ec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c81a:	4b38      	ldr	r3, [pc, #224]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f003 030c 	and.w	r3, r3, #12
 800c822:	2b08      	cmp	r3, #8
 800c824:	d060      	beq.n	800c8e8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d145      	bne.n	800c8ba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c82e:	4b34      	ldr	r3, [pc, #208]	; (800c900 <HAL_RCC_OscConfig+0x480>)
 800c830:	2200      	movs	r2, #0
 800c832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c834:	f7fc ff60 	bl	80096f8 <HAL_GetTick>
 800c838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c83a:	e008      	b.n	800c84e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c83c:	f7fc ff5c 	bl	80096f8 <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e04f      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c84e:	4b2b      	ldr	r3, [pc, #172]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1f0      	bne.n	800c83c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69da      	ldr	r2, [r3, #28]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c868:	019b      	lsls	r3, r3, #6
 800c86a:	431a      	orrs	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	085b      	lsrs	r3, r3, #1
 800c872:	3b01      	subs	r3, #1
 800c874:	041b      	lsls	r3, r3, #16
 800c876:	431a      	orrs	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	061b      	lsls	r3, r3, #24
 800c87e:	431a      	orrs	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c884:	071b      	lsls	r3, r3, #28
 800c886:	491d      	ldr	r1, [pc, #116]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c888:	4313      	orrs	r3, r2
 800c88a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c88c:	4b1c      	ldr	r3, [pc, #112]	; (800c900 <HAL_RCC_OscConfig+0x480>)
 800c88e:	2201      	movs	r2, #1
 800c890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c892:	f7fc ff31 	bl	80096f8 <HAL_GetTick>
 800c896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c898:	e008      	b.n	800c8ac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c89a:	f7fc ff2d 	bl	80096f8 <HAL_GetTick>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d901      	bls.n	800c8ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e020      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8ac:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0f0      	beq.n	800c89a <HAL_RCC_OscConfig+0x41a>
 800c8b8:	e018      	b.n	800c8ec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8ba:	4b11      	ldr	r3, [pc, #68]	; (800c900 <HAL_RCC_OscConfig+0x480>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c0:	f7fc ff1a 	bl	80096f8 <HAL_GetTick>
 800c8c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8c6:	e008      	b.n	800c8da <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8c8:	f7fc ff16 	bl	80096f8 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d901      	bls.n	800c8da <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c8d6:	2303      	movs	r3, #3
 800c8d8:	e009      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8da:	4b08      	ldr	r3, [pc, #32]	; (800c8fc <HAL_RCC_OscConfig+0x47c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1f0      	bne.n	800c8c8 <HAL_RCC_OscConfig+0x448>
 800c8e6:	e001      	b.n	800c8ec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e000      	b.n	800c8ee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	40007000 	.word	0x40007000
 800c8fc:	40023800 	.word	0x40023800
 800c900:	42470060 	.word	0x42470060

0800c904 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e022      	b.n	800c95c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d105      	bne.n	800c92e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7fa f869 	bl	8006a00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2203      	movs	r2, #3
 800c932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f814 	bl	800c964 <HAL_SD_InitCard>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e00a      	b.n	800c95c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c964:	b5b0      	push	{r4, r5, r7, lr}
 800c966:	b08e      	sub	sp, #56	; 0x38
 800c968:	af04      	add	r7, sp, #16
 800c96a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c96c:	2300      	movs	r3, #0
 800c96e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c974:	2300      	movs	r3, #0
 800c976:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c97c:	2300      	movs	r3, #0
 800c97e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c980:	2376      	movs	r3, #118	; 0x76
 800c982:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681d      	ldr	r5, [r3, #0]
 800c988:	466c      	mov	r4, sp
 800c98a:	f107 0314 	add.w	r3, r7, #20
 800c98e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c99c:	4628      	mov	r0, r5
 800c99e:	f003 fa87 	bl	800feb0 <SDIO_Init>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d001      	beq.n	800c9b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e031      	b.n	800ca18 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c9b4:	4b1a      	ldr	r3, [pc, #104]	; (800ca20 <HAL_SD_InitCard+0xbc>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f003 fabf 	bl	800ff42 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c9c4:	4b16      	ldr	r3, [pc, #88]	; (800ca20 <HAL_SD_InitCard+0xbc>)
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 ffc6 	bl	800d95c <SD_PowerON>
 800c9d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00b      	beq.n	800c9f0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e013      	b.n	800ca18 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fee5 	bl	800d7c0 <SD_InitCard>
 800c9f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9f8:	6a3b      	ldr	r3, [r7, #32]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00b      	beq.n	800ca16 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca0a:	6a3b      	ldr	r3, [r7, #32]
 800ca0c:	431a      	orrs	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e000      	b.n	800ca18 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3728      	adds	r7, #40	; 0x28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca20:	422580a0 	.word	0x422580a0

0800ca24 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08c      	sub	sp, #48	; 0x30
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d107      	bne.n	800ca4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e0c7      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	f040 80c0 	bne.w	800cbda <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	441a      	add	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d907      	bls.n	800ca7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e0ae      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2203      	movs	r2, #3
 800ca82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ca9c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	4a50      	ldr	r2, [pc, #320]	; (800cbe4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800caa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	4a4f      	ldr	r2, [pc, #316]	; (800cbe8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800caac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab2:	2200      	movs	r2, #0
 800cab4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3380      	adds	r3, #128	; 0x80
 800cac0:	4619      	mov	r1, r3
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	025b      	lsls	r3, r3, #9
 800cac8:	089b      	lsrs	r3, r3, #2
 800caca:	f7fd fc07 	bl	800a2dc <HAL_DMA_Start_IT>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d017      	beq.n	800cb04 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cae2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a40      	ldr	r2, [pc, #256]	; (800cbec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800caea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e06b      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cb04:	4b3a      	ldr	r3, [pc, #232]	; (800cbf0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cb06:	2201      	movs	r2, #1
 800cb08:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d002      	beq.n	800cb18 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	025b      	lsls	r3, r3, #9
 800cb16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb20:	4618      	mov	r0, r3
 800cb22:	f003 faa1 	bl	8010068 <SDMMC_CmdBlockLength>
 800cb26:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00f      	beq.n	800cb4e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a2e      	ldr	r2, [pc, #184]	; (800cbec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cb34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e046      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb52:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	025b      	lsls	r3, r3, #9
 800cb58:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cb5a:	2390      	movs	r3, #144	; 0x90
 800cb5c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cb5e:	2302      	movs	r3, #2
 800cb60:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cb66:	2301      	movs	r3, #1
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f107 0210 	add.w	r2, r7, #16
 800cb72:	4611      	mov	r1, r2
 800cb74:	4618      	mov	r0, r3
 800cb76:	f003 fa4b 	bl	8010010 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d90a      	bls.n	800cb96 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2282      	movs	r2, #130	; 0x82
 800cb84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f003 faaf 	bl	80100f0 <SDMMC_CmdReadMultiBlock>
 800cb92:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb94:	e009      	b.n	800cbaa <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2281      	movs	r2, #129	; 0x81
 800cb9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cba2:	4618      	mov	r0, r3
 800cba4:	f003 fa82 	bl	80100ac <SDMMC_CmdReadSingleBlock>
 800cba8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d012      	beq.n	800cbd6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a0d      	ldr	r2, [pc, #52]	; (800cbec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cbb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e002      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e000      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cbda:	2302      	movs	r3, #2
  }
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3730      	adds	r7, #48	; 0x30
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	0800d5cf 	.word	0x0800d5cf
 800cbe8:	0800d641 	.word	0x0800d641
 800cbec:	004005ff 	.word	0x004005ff
 800cbf0:	4225858c 	.word	0x4225858c

0800cbf4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08c      	sub	sp, #48	; 0x30
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d107      	bne.n	800cc1c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e0ca      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	f040 80c3 	bne.w	800cdb0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	441a      	add	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d907      	bls.n	800cc4e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e0b1      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2203      	movs	r2, #3
 800cc52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f042 021a 	orr.w	r2, r2, #26
 800cc6c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc72:	4a52      	ldr	r2, [pc, #328]	; (800cdbc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cc74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7a:	4a51      	ldr	r2, [pc, #324]	; (800cdc0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cc7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc82:	2200      	movs	r2, #0
 800cc84:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d002      	beq.n	800cc94 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc90:	025b      	lsls	r3, r3, #9
 800cc92:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f003 f9e3 	bl	8010068 <SDMMC_CmdBlockLength>
 800cca2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00f      	beq.n	800ccca <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a45      	ldr	r2, [pc, #276]	; (800cdc4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ccb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	431a      	orrs	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e073      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d90a      	bls.n	800cce6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	22a0      	movs	r2, #160	; 0xa0
 800ccd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f003 fa4b 	bl	8010178 <SDMMC_CmdWriteMultiBlock>
 800cce2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cce4:	e009      	b.n	800ccfa <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2290      	movs	r2, #144	; 0x90
 800ccea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f003 fa1e 	bl	8010134 <SDMMC_CmdWriteSingleBlock>
 800ccf8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d012      	beq.n	800cd26 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a2f      	ldr	r2, [pc, #188]	; (800cdc4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e045      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cd26:	4b28      	ldr	r3, [pc, #160]	; (800cdc8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cd28:	2201      	movs	r2, #1
 800cd2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3380      	adds	r3, #128	; 0x80
 800cd38:	461a      	mov	r2, r3
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	025b      	lsls	r3, r3, #9
 800cd3e:	089b      	lsrs	r3, r3, #2
 800cd40:	f7fd facc 	bl	800a2dc <HAL_DMA_Start_IT>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d01a      	beq.n	800cd80 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f022 021a 	bic.w	r2, r2, #26
 800cd58:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a19      	ldr	r2, [pc, #100]	; (800cdc4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e018      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd80:	f04f 33ff 	mov.w	r3, #4294967295
 800cd84:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	025b      	lsls	r3, r3, #9
 800cd8a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cd8c:	2390      	movs	r3, #144	; 0x90
 800cd8e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cd90:	2300      	movs	r3, #0
 800cd92:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f107 0210 	add.w	r2, r7, #16
 800cda4:	4611      	mov	r1, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f003 f932 	bl	8010010 <SDIO_ConfigData>

      return HAL_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	e000      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cdb0:	2302      	movs	r3, #2
  }
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3730      	adds	r7, #48	; 0x30
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	0800d5a5 	.word	0x0800d5a5
 800cdc0:	0800d641 	.word	0x0800d641
 800cdc4:	004005ff 	.word	0x004005ff
 800cdc8:	4225858c 	.word	0x4225858c

0800cdcc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d008      	beq.n	800cdfa <HAL_SD_IRQHandler+0x2e>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f003 0308 	and.w	r3, r3, #8
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 ffc8 	bl	800dd88 <SD_Read_IT>
 800cdf8:	e155      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 808f 	beq.w	800cf28 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6812      	ldr	r2, [r2, #0]
 800ce1e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ce22:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ce26:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 0201 	bic.w	r2, r2, #1
 800ce36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f003 0308 	and.w	r3, r3, #8
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d039      	beq.n	800ceb6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f003 0302 	and.w	r3, r3, #2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <HAL_SD_IRQHandler+0x8a>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f003 0320 	and.w	r3, r3, #32
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d011      	beq.n	800ce7a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f003 f9ae 	bl	80101bc <SDMMC_CmdStopTransfer>
 800ce60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d008      	beq.n	800ce7a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f91f 	bl	800d0b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d104      	bne.n	800cea6 <HAL_SD_IRQHandler+0xda>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f003 0302 	and.w	r3, r3, #2
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f003 fe04 	bl	8010ab4 <HAL_SD_RxCpltCallback>
 800ceac:	e0fb      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f003 fdf6 	bl	8010aa0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ceb4:	e0f7      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 80f2 	beq.w	800d0a6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d011      	beq.n	800cef0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f003 f973 	bl	80101bc <SDMMC_CmdStopTransfer>
 800ced6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d008      	beq.n	800cef0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	431a      	orrs	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 f8e4 	bl	800d0b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f040 80d5 	bne.w	800d0a6 <HAL_SD_IRQHandler+0x2da>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f040 80cf 	bne.w	800d0a6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f022 0208 	bic.w	r2, r2, #8
 800cf16:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f003 fdbd 	bl	8010aa0 <HAL_SD_TxCpltCallback>
}
 800cf26:	e0be      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d008      	beq.n	800cf48 <HAL_SD_IRQHandler+0x17c>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f003 0308 	and.w	r3, r3, #8
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 ff72 	bl	800de2a <SD_Write_IT>
 800cf46:	e0ae      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf4e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 80a7 	beq.w	800d0a6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d005      	beq.n	800cf72 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	f043 0202 	orr.w	r2, r3, #2
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf78:	f003 0308 	and.w	r3, r3, #8
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d005      	beq.n	800cf8c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf84:	f043 0208 	orr.w	r2, r3, #8
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf92:	f003 0320 	and.w	r3, r3, #32
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d005      	beq.n	800cfa6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	f043 0220 	orr.w	r2, r3, #32
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfac:	f003 0310 	and.w	r3, r3, #16
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb8:	f043 0210 	orr.w	r2, r3, #16
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f240 523a 	movw	r2, #1338	; 0x53a
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cfd8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f003 f8ec 	bl	80101bc <SDMMC_CmdStopTransfer>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfea:	431a      	orrs	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f003 0308 	and.w	r3, r3, #8
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f855 	bl	800d0b8 <HAL_SD_ErrorCallback>
}
 800d00e:	e04a      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d016:	2b00      	cmp	r3, #0
 800d018:	d045      	beq.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f003 0310 	and.w	r3, r3, #16
 800d020:	2b00      	cmp	r3, #0
 800d022:	d104      	bne.n	800d02e <HAL_SD_IRQHandler+0x262>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f003 0320 	and.w	r3, r3, #32
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d011      	beq.n	800d052 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d032:	4a1f      	ldr	r2, [pc, #124]	; (800d0b0 <HAL_SD_IRQHandler+0x2e4>)
 800d034:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd f9a6 	bl	800a38c <HAL_DMA_Abort_IT>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d02f      	beq.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 fb4a 	bl	800d6e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d050:	e029      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d104      	bne.n	800d066 <HAL_SD_IRQHandler+0x29a>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d011      	beq.n	800d08a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06a:	4a12      	ldr	r2, [pc, #72]	; (800d0b4 <HAL_SD_IRQHandler+0x2e8>)
 800d06c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d072:	4618      	mov	r0, r3
 800d074:	f7fd f98a 	bl	800a38c <HAL_DMA_Abort_IT>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d013      	beq.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d082:	4618      	mov	r0, r3
 800d084:	f000 fb65 	bl	800d752 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d088:	e00d      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f003 fcf4 	bl	8010a8c <HAL_SD_AbortCallback>
}
 800d0a4:	e7ff      	b.n	800d0a6 <HAL_SD_IRQHandler+0x2da>
 800d0a6:	bf00      	nop
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	0800d6e5 	.word	0x0800d6e5
 800d0b4:	0800d753 	.word	0x0800d753

0800d0b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0da:	0f9b      	lsrs	r3, r3, #30
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0e6:	0e9b      	lsrs	r3, r3, #26
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	f003 030f 	and.w	r3, r3, #15
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0f8:	0e1b      	lsrs	r3, r3, #24
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	f003 0303 	and.w	r3, r3, #3
 800d100:	b2da      	uxtb	r2, r3
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d10a:	0c1b      	lsrs	r3, r3, #16
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d116:	0a1b      	lsrs	r3, r3, #8
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d122:	b2da      	uxtb	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d12c:	0d1b      	lsrs	r3, r3, #20
 800d12e:	b29a      	uxth	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d138:	0c1b      	lsrs	r3, r3, #16
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	b2da      	uxtb	r2, r3
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d14a:	0bdb      	lsrs	r3, r3, #15
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	b2da      	uxtb	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d15c:	0b9b      	lsrs	r3, r3, #14
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	f003 0301 	and.w	r3, r3, #1
 800d164:	b2da      	uxtb	r2, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d16e:	0b5b      	lsrs	r3, r3, #13
 800d170:	b2db      	uxtb	r3, r3
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d180:	0b1b      	lsrs	r3, r3, #12
 800d182:	b2db      	uxtb	r3, r3
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	b2da      	uxtb	r2, r3
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	2200      	movs	r2, #0
 800d192:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d163      	bne.n	800d264 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1a0:	009a      	lsls	r2, r3, #2
 800d1a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d1ac:	0f92      	lsrs	r2, r2, #30
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b8:	0edb      	lsrs	r3, r3, #27
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	f003 0307 	and.w	r3, r3, #7
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ca:	0e1b      	lsrs	r3, r3, #24
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0307 	and.w	r3, r3, #7
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1dc:	0d5b      	lsrs	r3, r3, #21
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	f003 0307 	and.w	r3, r3, #7
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ee:	0c9b      	lsrs	r3, r3, #18
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d200:	0bdb      	lsrs	r3, r3, #15
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 0307 	and.w	r3, r3, #7
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	7e1b      	ldrb	r3, [r3, #24]
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	f003 0307 	and.w	r3, r3, #7
 800d222:	3302      	adds	r3, #2
 800d224:	2201      	movs	r2, #1
 800d226:	fa02 f303 	lsl.w	r3, r2, r3
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d22e:	fb02 f203 	mul.w	r2, r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	7a1b      	ldrb	r3, [r3, #8]
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 030f 	and.w	r3, r3, #15
 800d240:	2201      	movs	r2, #1
 800d242:	409a      	lsls	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d250:	0a52      	lsrs	r2, r2, #9
 800d252:	fb02 f203 	mul.w	r2, r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d260:	661a      	str	r2, [r3, #96]	; 0x60
 800d262:	e031      	b.n	800d2c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d11d      	bne.n	800d2a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d270:	041b      	lsls	r3, r3, #16
 800d272:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27a:	0c1b      	lsrs	r3, r3, #16
 800d27c:	431a      	orrs	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	3301      	adds	r3, #1
 800d288:	029a      	lsls	r2, r3, #10
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d29c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	661a      	str	r2, [r3, #96]	; 0x60
 800d2a6:	e00f      	b.n	800d2c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a58      	ldr	r2, [pc, #352]	; (800d410 <HAL_SD_GetCardCSD+0x344>)
 800d2ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e09d      	b.n	800d404 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2cc:	0b9b      	lsrs	r3, r3, #14
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2de:	09db      	lsrs	r3, r3, #7
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d300:	0fdb      	lsrs	r3, r3, #31
 800d302:	b2da      	uxtb	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30c:	0f5b      	lsrs	r3, r3, #29
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	b2da      	uxtb	r2, r3
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31e:	0e9b      	lsrs	r3, r3, #26
 800d320:	b2db      	uxtb	r3, r3
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	b2da      	uxtb	r2, r3
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d330:	0d9b      	lsrs	r3, r3, #22
 800d332:	b2db      	uxtb	r3, r3
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d342:	0d5b      	lsrs	r3, r3, #21
 800d344:	b2db      	uxtb	r3, r3
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35e:	0c1b      	lsrs	r3, r3, #16
 800d360:	b2db      	uxtb	r3, r3
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	b2da      	uxtb	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	0bdb      	lsrs	r3, r3, #15
 800d374:	b2db      	uxtb	r3, r3
 800d376:	f003 0301 	and.w	r3, r3, #1
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d386:	0b9b      	lsrs	r3, r3, #14
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39a:	0b5b      	lsrs	r3, r3, #13
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	f003 0301 	and.w	r3, r3, #1
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ae:	0b1b      	lsrs	r3, r3, #12
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c2:	0a9b      	lsrs	r3, r3, #10
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	f003 0303 	and.w	r3, r3, #3
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d6:	0a1b      	lsrs	r3, r3, #8
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	f003 0303 	and.w	r3, r3, #3
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ea:	085b      	lsrs	r3, r3, #1
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	004005ff 	.word	0x004005ff

0800d414 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d46c:	b5b0      	push	{r4, r5, r7, lr}
 800d46e:	b08e      	sub	sp, #56	; 0x38
 800d470:	af04      	add	r7, sp, #16
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2203      	movs	r2, #3
 800d47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d482:	2b03      	cmp	r3, #3
 800d484:	d02e      	beq.n	800d4e4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d48c:	d106      	bne.n	800d49c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	639a      	str	r2, [r3, #56]	; 0x38
 800d49a:	e029      	b.n	800d4f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4a2:	d10a      	bne.n	800d4ba <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fb0f 	bl	800dac8 <SD_WideBus_Enable>
 800d4aa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
 800d4b8:	e01a      	b.n	800d4f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fb4c 	bl	800db5e <SD_WideBus_Disable>
 800d4c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	431a      	orrs	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	639a      	str	r2, [r3, #56]	; 0x38
 800d4d4:	e00c      	b.n	800d4f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
 800d4e2:	e005      	b.n	800d4f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a18      	ldr	r2, [pc, #96]	; (800d560 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d4fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	e024      	b.n	800d556 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681d      	ldr	r5, [r3, #0]
 800d532:	466c      	mov	r4, sp
 800d534:	f107 0318 	add.w	r3, r7, #24
 800d538:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d53c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d540:	f107 030c 	add.w	r3, r7, #12
 800d544:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d546:	4628      	mov	r0, r5
 800d548:	f002 fcb2 	bl	800feb0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3728      	adds	r7, #40	; 0x28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bdb0      	pop	{r4, r5, r7, pc}
 800d55e:	bf00      	nop
 800d560:	004005ff 	.word	0x004005ff

0800d564 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d570:	f107 030c 	add.w	r3, r7, #12
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fa7e 	bl	800da78 <SD_SendStatus>
 800d57c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	431a      	orrs	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	0a5b      	lsrs	r3, r3, #9
 800d594:	f003 030f 	and.w	r3, r3, #15
 800d598:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d59a:	693b      	ldr	r3, [r7, #16]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d5c2:	bf00      	nop
 800d5c4:	3714      	adds	r7, #20
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b084      	sub	sp, #16
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e0:	2b82      	cmp	r3, #130	; 0x82
 800d5e2:	d111      	bne.n	800d608 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f002 fde7 	bl	80101bc <SDMMC_CmdStopTransfer>
 800d5ee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d008      	beq.n	800d608 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f7ff fd58 	bl	800d0b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f022 0208 	bic.w	r2, r2, #8
 800d616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d620:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2201      	movs	r2, #1
 800d626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f003 fa3f 	bl	8010ab4 <HAL_SD_RxCpltCallback>
#endif
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7fd f848 	bl	800a6e4 <HAL_DMA_GetError>
 800d654:	4603      	mov	r3, r0
 800d656:	2b02      	cmp	r3, #2
 800d658:	d03e      	beq.n	800d6d8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d660:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d668:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d002      	beq.n	800d676 <SD_DMAError+0x36>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d12d      	bne.n	800d6d2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a19      	ldr	r2, [pc, #100]	; (800d6e0 <SD_DMAError+0xa0>)
 800d67c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d68c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d69a:	6978      	ldr	r0, [r7, #20]
 800d69c:	f7ff ff62 	bl	800d564 <HAL_SD_GetCardState>
 800d6a0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b06      	cmp	r3, #6
 800d6a6:	d002      	beq.n	800d6ae <SD_DMAError+0x6e>
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b05      	cmp	r3, #5
 800d6ac:	d10a      	bne.n	800d6c4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f002 fd82 	bl	80101bc <SDMMC_CmdStopTransfer>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6be:	431a      	orrs	r2, r3
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d6d2:	6978      	ldr	r0, [r7, #20]
 800d6d4:	f7ff fcf0 	bl	800d0b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d6d8:	bf00      	nop
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	004005ff 	.word	0x004005ff

0800d6e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f7ff ff31 	bl	800d564 <HAL_SD_GetCardState>
 800d702:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2b06      	cmp	r3, #6
 800d716:	d002      	beq.n	800d71e <SD_DMATxAbort+0x3a>
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b05      	cmp	r3, #5
 800d71c:	d10a      	bne.n	800d734 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4618      	mov	r0, r3
 800d724:	f002 fd4a 	bl	80101bc <SDMMC_CmdStopTransfer>
 800d728:	4602      	mov	r2, r0
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72e:	431a      	orrs	r2, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d103      	bne.n	800d744 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f003 f9a5 	bl	8010a8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d742:	e002      	b.n	800d74a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fcb7 	bl	800d0b8 <HAL_SD_ErrorCallback>
}
 800d74a:	bf00      	nop
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b084      	sub	sp, #16
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f240 523a 	movw	r2, #1338	; 0x53a
 800d768:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7ff fefa 	bl	800d564 <HAL_SD_GetCardState>
 800d770:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b06      	cmp	r3, #6
 800d784:	d002      	beq.n	800d78c <SD_DMARxAbort+0x3a>
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2b05      	cmp	r3, #5
 800d78a:	d10a      	bne.n	800d7a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4618      	mov	r0, r3
 800d792:	f002 fd13 	bl	80101bc <SDMMC_CmdStopTransfer>
 800d796:	4602      	mov	r2, r0
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79c:	431a      	orrs	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d103      	bne.n	800d7b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f003 f96e 	bl	8010a8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d7b0:	e002      	b.n	800d7b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f7ff fc80 	bl	800d0b8 <HAL_SD_ErrorCallback>
}
 800d7b8:	bf00      	nop
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d7c0:	b5b0      	push	{r4, r5, r7, lr}
 800d7c2:	b094      	sub	sp, #80	; 0x50
 800d7c4:	af04      	add	r7, sp, #16
 800d7c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f002 fbc5 	bl	800ff60 <SDIO_GetPowerState>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d102      	bne.n	800d7e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d7e0:	e0b7      	b.n	800d952 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d02f      	beq.n	800d84a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f002 fdee 	bl	80103d0 <SDMMC_CmdSendCID>
 800d7f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <SD_InitCard+0x40>
    {
      return errorstate;
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fe:	e0a8      	b.n	800d952 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2100      	movs	r1, #0
 800d806:	4618      	mov	r0, r3
 800d808:	f002 fbef 	bl	800ffea <SDIO_GetResponse>
 800d80c:	4602      	mov	r2, r0
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2104      	movs	r1, #4
 800d818:	4618      	mov	r0, r3
 800d81a:	f002 fbe6 	bl	800ffea <SDIO_GetResponse>
 800d81e:	4602      	mov	r2, r0
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2108      	movs	r1, #8
 800d82a:	4618      	mov	r0, r3
 800d82c:	f002 fbdd 	bl	800ffea <SDIO_GetResponse>
 800d830:	4602      	mov	r2, r0
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	210c      	movs	r1, #12
 800d83c:	4618      	mov	r0, r3
 800d83e:	f002 fbd4 	bl	800ffea <SDIO_GetResponse>
 800d842:	4602      	mov	r2, r0
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d00d      	beq.n	800d86e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f107 020e 	add.w	r2, r7, #14
 800d85a:	4611      	mov	r1, r2
 800d85c:	4618      	mov	r0, r3
 800d85e:	f002 fdf4 	bl	801044a <SDMMC_CmdSetRelAdd>
 800d862:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <SD_InitCard+0xae>
    {
      return errorstate;
 800d86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86c:	e071      	b.n	800d952 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d872:	2b03      	cmp	r3, #3
 800d874:	d036      	beq.n	800d8e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d876:	89fb      	ldrh	r3, [r7, #14]
 800d878:	461a      	mov	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d886:	041b      	lsls	r3, r3, #16
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f002 fdbe 	bl	801040c <SDMMC_CmdSendCSD>
 800d890:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <SD_InitCard+0xdc>
    {
      return errorstate;
 800d898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d89a:	e05a      	b.n	800d952 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f002 fba1 	bl	800ffea <SDIO_GetResponse>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2104      	movs	r1, #4
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 fb98 	bl	800ffea <SDIO_GetResponse>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2108      	movs	r1, #8
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f002 fb8f 	bl	800ffea <SDIO_GetResponse>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	210c      	movs	r1, #12
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f002 fb86 	bl	800ffea <SDIO_GetResponse>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2104      	movs	r1, #4
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f002 fb7d 	bl	800ffea <SDIO_GetResponse>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	0d1a      	lsrs	r2, r3, #20
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d8f8:	f107 0310 	add.w	r3, r7, #16
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff fbe4 	bl	800d0cc <HAL_SD_GetCardCSD>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d90a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d90e:	e020      	b.n	800d952 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6819      	ldr	r1, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d918:	041b      	lsls	r3, r3, #16
 800d91a:	f04f 0400 	mov.w	r4, #0
 800d91e:	461a      	mov	r2, r3
 800d920:	4623      	mov	r3, r4
 800d922:	4608      	mov	r0, r1
 800d924:	f002 fc6c 	bl	8010200 <SDMMC_CmdSelDesel>
 800d928:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <SD_InitCard+0x174>
  {
    return errorstate;
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d932:	e00e      	b.n	800d952 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681d      	ldr	r5, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	466c      	mov	r4, sp
 800d93c:	f103 0210 	add.w	r2, r3, #16
 800d940:	ca07      	ldmia	r2, {r0, r1, r2}
 800d942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d946:	3304      	adds	r3, #4
 800d948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d94a:	4628      	mov	r0, r5
 800d94c:	f002 fab0 	bl	800feb0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3740      	adds	r7, #64	; 0x40
 800d956:	46bd      	mov	sp, r7
 800d958:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d95c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d964:	2300      	movs	r3, #0
 800d966:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	2300      	movs	r3, #0
 800d96e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f002 fc66 	bl	8010246 <SDMMC_CmdGoIdleState>
 800d97a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	e072      	b.n	800da6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f002 fc79 	bl	8010282 <SDMMC_CmdOperCond>
 800d990:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00d      	beq.n	800d9b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fc4f 	bl	8010246 <SDMMC_CmdGoIdleState>
 800d9a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <SD_PowerON+0x5e>
    {
      return errorstate;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	e05b      	b.n	800da6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d137      	bne.n	800da32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 fc79 	bl	80102c0 <SDMMC_CmdAppCommand>
 800d9ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d02d      	beq.n	800da32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9da:	e047      	b.n	800da6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f002 fc6c 	bl	80102c0 <SDMMC_CmdAppCommand>
 800d9e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <SD_PowerON+0x98>
    {
      return errorstate;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	e03b      	b.n	800da6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	491e      	ldr	r1, [pc, #120]	; (800da74 <SD_PowerON+0x118>)
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f002 fc82 	bl	8010304 <SDMMC_CmdAppOperCommand>
 800da00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da0c:	e02e      	b.n	800da6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2100      	movs	r1, #0
 800da14:	4618      	mov	r0, r3
 800da16:	f002 fae8 	bl	800ffea <SDIO_GetResponse>
 800da1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	0fdb      	lsrs	r3, r3, #31
 800da20:	2b01      	cmp	r3, #1
 800da22:	d101      	bne.n	800da28 <SD_PowerON+0xcc>
 800da24:	2301      	movs	r3, #1
 800da26:	e000      	b.n	800da2a <SD_PowerON+0xce>
 800da28:	2300      	movs	r3, #0
 800da2a:	613b      	str	r3, [r7, #16]

    count++;
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	3301      	adds	r3, #1
 800da30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da38:	4293      	cmp	r3, r2
 800da3a:	d802      	bhi.n	800da42 <SD_PowerON+0xe6>
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d0cc      	beq.n	800d9dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da48:	4293      	cmp	r3, r2
 800da4a:	d902      	bls.n	800da52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800da4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da50:	e00c      	b.n	800da6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d003      	beq.n	800da64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	645a      	str	r2, [r3, #68]	; 0x44
 800da62:	e002      	b.n	800da6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3718      	adds	r7, #24
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	c1100000 	.word	0xc1100000

0800da78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d102      	bne.n	800da8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800da88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da8c:	e018      	b.n	800dac0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da96:	041b      	lsls	r3, r3, #16
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	f002 fcf6 	bl	801048c <SDMMC_CmdSendStatus>
 800daa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <SD_SendStatus+0x34>
  {
    return errorstate;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	e009      	b.n	800dac0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2100      	movs	r1, #0
 800dab2:	4618      	mov	r0, r3
 800dab4:	f002 fa99 	bl	800ffea <SDIO_GetResponse>
 800dab8:	4602      	mov	r2, r0
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	2300      	movs	r3, #0
 800dad6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2100      	movs	r1, #0
 800dade:	4618      	mov	r0, r3
 800dae0:	f002 fa83 	bl	800ffea <SDIO_GetResponse>
 800dae4:	4603      	mov	r3, r0
 800dae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800daee:	d102      	bne.n	800daf6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800daf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800daf4:	e02f      	b.n	800db56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800daf6:	f107 030c 	add.w	r3, r7, #12
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 f879 	bl	800dbf4 <SD_FindSCR>
 800db02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	e023      	b.n	800db56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d01c      	beq.n	800db52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db20:	041b      	lsls	r3, r3, #16
 800db22:	4619      	mov	r1, r3
 800db24:	4610      	mov	r0, r2
 800db26:	f002 fbcb 	bl	80102c0 <SDMMC_CmdAppCommand>
 800db2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	e00f      	b.n	800db56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2102      	movs	r1, #2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f002 fc04 	bl	801034a <SDMMC_CmdBusWidth>
 800db42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	e003      	b.n	800db56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db4e:	2300      	movs	r3, #0
 800db50:	e001      	b.n	800db56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db56:	4618      	mov	r0, r3
 800db58:	3718      	adds	r7, #24
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b086      	sub	sp, #24
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db66:	2300      	movs	r3, #0
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	2300      	movs	r3, #0
 800db6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2100      	movs	r1, #0
 800db74:	4618      	mov	r0, r3
 800db76:	f002 fa38 	bl	800ffea <SDIO_GetResponse>
 800db7a:	4603      	mov	r3, r0
 800db7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db84:	d102      	bne.n	800db8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db8a:	e02f      	b.n	800dbec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db8c:	f107 030c 	add.w	r3, r7, #12
 800db90:	4619      	mov	r1, r3
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f82e 	bl	800dbf4 <SD_FindSCR>
 800db98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	e023      	b.n	800dbec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d01c      	beq.n	800dbe8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb6:	041b      	lsls	r3, r3, #16
 800dbb8:	4619      	mov	r1, r3
 800dbba:	4610      	mov	r0, r2
 800dbbc:	f002 fb80 	bl	80102c0 <SDMMC_CmdAppCommand>
 800dbc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	e00f      	b.n	800dbec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f002 fbb9 	bl	801034a <SDMMC_CmdBusWidth>
 800dbd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	e003      	b.n	800dbec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e001      	b.n	800dbec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b08f      	sub	sp, #60	; 0x3c
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dbfe:	f7fb fd7b 	bl	80096f8 <HAL_GetTick>
 800dc02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dc04:	2300      	movs	r3, #0
 800dc06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc08:	2300      	movs	r3, #0
 800dc0a:	60bb      	str	r3, [r7, #8]
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2108      	movs	r1, #8
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f002 fa24 	bl	8010068 <SDMMC_CmdBlockLength>
 800dc20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d001      	beq.n	800dc2c <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	e0a9      	b.n	800dd80 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc34:	041b      	lsls	r3, r3, #16
 800dc36:	4619      	mov	r1, r3
 800dc38:	4610      	mov	r0, r2
 800dc3a:	f002 fb41 	bl	80102c0 <SDMMC_CmdAppCommand>
 800dc3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	e09a      	b.n	800dd80 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc50:	2308      	movs	r3, #8
 800dc52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dc54:	2330      	movs	r3, #48	; 0x30
 800dc56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dc58:	2302      	movs	r3, #2
 800dc5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dc60:	2301      	movs	r3, #1
 800dc62:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f107 0210 	add.w	r2, r7, #16
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f002 f9ce 	bl	8010010 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f002 fb88 	bl	801038e <SDMMC_CmdSendSCR>
 800dc7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d022      	beq.n	800dccc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	e07a      	b.n	800dd80 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00e      	beq.n	800dcb6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6819      	ldr	r1, [r3, #0]
 800dc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	f107 0208 	add.w	r2, r7, #8
 800dca4:	18d4      	adds	r4, r2, r3
 800dca6:	4608      	mov	r0, r1
 800dca8:	f002 f92d 	bl	800ff06 <SDIO_ReadFIFO>
 800dcac:	4603      	mov	r3, r0
 800dcae:	6023      	str	r3, [r4, #0]
      index++;
 800dcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dcb6:	f7fb fd1f 	bl	80096f8 <HAL_GetTick>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc4:	d102      	bne.n	800dccc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dcc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcca:	e059      	b.n	800dd80 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcd2:	f240 432a 	movw	r3, #1066	; 0x42a
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d0d6      	beq.n	800dc8a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce2:	f003 0308 	and.w	r3, r3, #8
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d005      	beq.n	800dcf6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2208      	movs	r2, #8
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dcf2:	2308      	movs	r3, #8
 800dcf4:	e044      	b.n	800dd80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d005      	beq.n	800dd10 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2202      	movs	r2, #2
 800dd0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	e037      	b.n	800dd80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd16:	f003 0320 	and.w	r3, r3, #32
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d005      	beq.n	800dd2a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2220      	movs	r2, #32
 800dd24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd26:	2320      	movs	r3, #32
 800dd28:	e02a      	b.n	800dd80 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	061a      	lsls	r2, r3, #24
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	021b      	lsls	r3, r3, #8
 800dd3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	0a1b      	lsrs	r3, r3, #8
 800dd46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	0e1b      	lsrs	r3, r3, #24
 800dd50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	601a      	str	r2, [r3, #0]
    scr++;
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	3304      	adds	r3, #4
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	061a      	lsls	r2, r3, #24
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	021b      	lsls	r3, r3, #8
 800dd64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	0a1b      	lsrs	r3, r3, #8
 800dd6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	0e1b      	lsrs	r3, r3, #24
 800dd78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	373c      	adds	r7, #60	; 0x3c
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd90      	pop	{r4, r7, pc}

0800dd88 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd94:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d03f      	beq.n	800de22 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
 800dda6:	e033      	b.n	800de10 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f002 f8aa 	bl	800ff06 <SDIO_ReadFIFO>
 800ddb2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	0a1b      	lsrs	r3, r3, #8
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	0c1b      	lsrs	r3, r3, #16
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	3301      	adds	r3, #1
 800ddec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	0e1b      	lsrs	r3, r3, #24
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3301      	adds	r3, #1
 800de02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	3b01      	subs	r3, #1
 800de08:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	3301      	adds	r3, #1
 800de0e:	617b      	str	r3, [r7, #20]
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b07      	cmp	r3, #7
 800de14:	d9c8      	bls.n	800dda8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de22:	bf00      	nop
 800de24:	3718      	adds	r7, #24
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b086      	sub	sp, #24
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a1b      	ldr	r3, [r3, #32]
 800de36:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d043      	beq.n	800decc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800de44:	2300      	movs	r3, #0
 800de46:	617b      	str	r3, [r7, #20]
 800de48:	e037      	b.n	800deba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3301      	adds	r3, #1
 800de54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	3b01      	subs	r3, #1
 800de5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	021a      	lsls	r2, r3, #8
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	4313      	orrs	r3, r2
 800de66:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	3301      	adds	r3, #1
 800de6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	3b01      	subs	r3, #1
 800de72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	041a      	lsls	r2, r3, #16
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3301      	adds	r3, #1
 800de84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	3b01      	subs	r3, #1
 800de8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	061a      	lsls	r2, r3, #24
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	4313      	orrs	r3, r2
 800de96:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3301      	adds	r3, #1
 800de9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f107 0208 	add.w	r2, r7, #8
 800deac:	4611      	mov	r1, r2
 800deae:	4618      	mov	r0, r3
 800deb0:	f002 f836 	bl	800ff20 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	3301      	adds	r3, #1
 800deb8:	617b      	str	r3, [r7, #20]
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b07      	cmp	r3, #7
 800debe:	d9c4      	bls.n	800de4a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800decc:	bf00      	nop
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e056      	b.n	800df94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7f8 fe6f 	bl	8006be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2202      	movs	r2, #2
 800df0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685a      	ldr	r2, [r3, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	431a      	orrs	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	431a      	orrs	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	431a      	orrs	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	431a      	orrs	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df42:	431a      	orrs	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	69db      	ldr	r3, [r3, #28]
 800df48:	431a      	orrs	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a1b      	ldr	r3, [r3, #32]
 800df4e:	ea42 0103 	orr.w	r1, r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	430a      	orrs	r2, r1
 800df5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	0c1b      	lsrs	r3, r3, #16
 800df64:	f003 0104 	and.w	r1, r3, #4
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	430a      	orrs	r2, r1
 800df72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	69da      	ldr	r2, [r3, #28]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	603b      	str	r3, [r7, #0]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d101      	bne.n	800dfbe <HAL_SPI_Transmit+0x22>
 800dfba:	2302      	movs	r3, #2
 800dfbc:	e11e      	b.n	800e1fc <HAL_SPI_Transmit+0x260>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfc6:	f7fb fb97 	bl	80096f8 <HAL_GetTick>
 800dfca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d002      	beq.n	800dfe2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800dfdc:	2302      	movs	r3, #2
 800dfde:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dfe0:	e103      	b.n	800e1ea <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <HAL_SPI_Transmit+0x52>
 800dfe8:	88fb      	ldrh	r3, [r7, #6]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dff2:	e0fa      	b.n	800e1ea <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2203      	movs	r2, #3
 800dff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2200      	movs	r2, #0
 800e000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	88fa      	ldrh	r2, [r7, #6]
 800e00c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	88fa      	ldrh	r2, [r7, #6]
 800e012:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2200      	movs	r2, #0
 800e018:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e03a:	d107      	bne.n	800e04c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e04a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e056:	2b40      	cmp	r3, #64	; 0x40
 800e058:	d007      	beq.n	800e06a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e068:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e072:	d14b      	bne.n	800e10c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d002      	beq.n	800e082 <HAL_SPI_Transmit+0xe6>
 800e07c:	8afb      	ldrh	r3, [r7, #22]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d13e      	bne.n	800e100 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e086:	881a      	ldrh	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e092:	1c9a      	adds	r2, r3, #2
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e0a6:	e02b      	b.n	800e100 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	f003 0302 	and.w	r3, r3, #2
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d112      	bne.n	800e0dc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ba:	881a      	ldrh	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c6:	1c9a      	adds	r2, r3, #2
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e0da:	e011      	b.n	800e100 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0dc:	f7fb fb0c 	bl	80096f8 <HAL_GetTick>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	1ad3      	subs	r3, r2, r3
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d803      	bhi.n	800e0f4 <HAL_SPI_Transmit+0x158>
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f2:	d102      	bne.n	800e0fa <HAL_SPI_Transmit+0x15e>
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d102      	bne.n	800e100 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e0fe:	e074      	b.n	800e1ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e104:	b29b      	uxth	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1ce      	bne.n	800e0a8 <HAL_SPI_Transmit+0x10c>
 800e10a:	e04c      	b.n	800e1a6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <HAL_SPI_Transmit+0x17e>
 800e114:	8afb      	ldrh	r3, [r7, #22]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d140      	bne.n	800e19c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	330c      	adds	r3, #12
 800e124:	7812      	ldrb	r2, [r2, #0]
 800e126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e136:	b29b      	uxth	r3, r3
 800e138:	3b01      	subs	r3, #1
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e140:	e02c      	b.n	800e19c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	f003 0302 	and.w	r3, r3, #2
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d113      	bne.n	800e178 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	330c      	adds	r3, #12
 800e15a:	7812      	ldrb	r2, [r2, #0]
 800e15c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	3b01      	subs	r3, #1
 800e170:	b29a      	uxth	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	86da      	strh	r2, [r3, #54]	; 0x36
 800e176:	e011      	b.n	800e19c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e178:	f7fb fabe 	bl	80096f8 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	429a      	cmp	r2, r3
 800e186:	d803      	bhi.n	800e190 <HAL_SPI_Transmit+0x1f4>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18e:	d102      	bne.n	800e196 <HAL_SPI_Transmit+0x1fa>
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e19a:	e026      	b.n	800e1ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1cd      	bne.n	800e142 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 fba4 	bl	800e8f8 <SPI_EndRxTxTransaction>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d002      	beq.n	800e1bc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	613b      	str	r3, [r7, #16]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	613b      	str	r3, [r7, #16]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	613b      	str	r3, [r7, #16]
 800e1d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	77fb      	strb	r3, [r7, #31]
 800e1e6:	e000      	b.n	800e1ea <HAL_SPI_Transmit+0x24e>
  }

error:
 800e1e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e1fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3720      	adds	r7, #32
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b088      	sub	sp, #32
 800e208:	af02      	add	r7, sp, #8
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	603b      	str	r3, [r7, #0]
 800e210:	4613      	mov	r3, r2
 800e212:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e220:	d112      	bne.n	800e248 <HAL_SPI_Receive+0x44>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d10e      	bne.n	800e248 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2204      	movs	r2, #4
 800e22e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e232:	88fa      	ldrh	r2, [r7, #6]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	4613      	mov	r3, r2
 800e23a:	68ba      	ldr	r2, [r7, #8]
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f000 f8e9 	bl	800e416 <HAL_SPI_TransmitReceive>
 800e244:	4603      	mov	r3, r0
 800e246:	e0e2      	b.n	800e40e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d101      	bne.n	800e256 <HAL_SPI_Receive+0x52>
 800e252:	2302      	movs	r3, #2
 800e254:	e0db      	b.n	800e40e <HAL_SPI_Receive+0x20a>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e25e:	f7fb fa4b 	bl	80096f8 <HAL_GetTick>
 800e262:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d002      	beq.n	800e276 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e270:	2302      	movs	r3, #2
 800e272:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e274:	e0c2      	b.n	800e3fc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <HAL_SPI_Receive+0x7e>
 800e27c:	88fb      	ldrh	r3, [r7, #6]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e286:	e0b9      	b.n	800e3fc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2204      	movs	r2, #4
 800e28c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	88fa      	ldrh	r2, [r7, #6]
 800e2a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	88fa      	ldrh	r2, [r7, #6]
 800e2a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ce:	d107      	bne.n	800e2e0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e2de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ea:	2b40      	cmp	r3, #64	; 0x40
 800e2ec:	d007      	beq.n	800e2fe <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68db      	ldr	r3, [r3, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d162      	bne.n	800e3cc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e306:	e02e      	b.n	800e366 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	2b01      	cmp	r3, #1
 800e314:	d115      	bne.n	800e342 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f103 020c 	add.w	r2, r3, #12
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e322:	7812      	ldrb	r2, [r2, #0]
 800e324:	b2d2      	uxtb	r2, r2
 800e326:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32c:	1c5a      	adds	r2, r3, #1
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e336:	b29b      	uxth	r3, r3
 800e338:	3b01      	subs	r3, #1
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e340:	e011      	b.n	800e366 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e342:	f7fb f9d9 	bl	80096f8 <HAL_GetTick>
 800e346:	4602      	mov	r2, r0
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	1ad3      	subs	r3, r2, r3
 800e34c:	683a      	ldr	r2, [r7, #0]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d803      	bhi.n	800e35a <HAL_SPI_Receive+0x156>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e358:	d102      	bne.n	800e360 <HAL_SPI_Receive+0x15c>
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d102      	bne.n	800e366 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e360:	2303      	movs	r3, #3
 800e362:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e364:	e04a      	b.n	800e3fc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1cb      	bne.n	800e308 <HAL_SPI_Receive+0x104>
 800e370:	e031      	b.n	800e3d6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d113      	bne.n	800e3a8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68da      	ldr	r2, [r3, #12]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38a:	b292      	uxth	r2, r2
 800e38c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e392:	1c9a      	adds	r2, r3, #2
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3a6:	e011      	b.n	800e3cc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3a8:	f7fb f9a6 	bl	80096f8 <HAL_GetTick>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d803      	bhi.n	800e3c0 <HAL_SPI_Receive+0x1bc>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3be:	d102      	bne.n	800e3c6 <HAL_SPI_Receive+0x1c2>
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e3ca:	e017      	b.n	800e3fc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1cd      	bne.n	800e372 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e3d6:	693a      	ldr	r2, [r7, #16]
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f000 fa27 	bl	800e82e <SPI_EndRxTransaction>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d002      	beq.n	800e3ec <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2220      	movs	r2, #32
 800e3ea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	75fb      	strb	r3, [r7, #23]
 800e3f8:	e000      	b.n	800e3fc <HAL_SPI_Receive+0x1f8>
  }

error :
 800e3fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b08c      	sub	sp, #48	; 0x30
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
 800e422:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e424:	2301      	movs	r3, #1
 800e426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e434:	2b01      	cmp	r3, #1
 800e436:	d101      	bne.n	800e43c <HAL_SPI_TransmitReceive+0x26>
 800e438:	2302      	movs	r3, #2
 800e43a:	e18a      	b.n	800e752 <HAL_SPI_TransmitReceive+0x33c>
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2201      	movs	r2, #1
 800e440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e444:	f7fb f958 	bl	80096f8 <HAL_GetTick>
 800e448:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e45a:	887b      	ldrh	r3, [r7, #2]
 800e45c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e45e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e462:	2b01      	cmp	r3, #1
 800e464:	d00f      	beq.n	800e486 <HAL_SPI_TransmitReceive+0x70>
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e46c:	d107      	bne.n	800e47e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d103      	bne.n	800e47e <HAL_SPI_TransmitReceive+0x68>
 800e476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e47a:	2b04      	cmp	r3, #4
 800e47c:	d003      	beq.n	800e486 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e47e:	2302      	movs	r3, #2
 800e480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e484:	e15b      	b.n	800e73e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d005      	beq.n	800e498 <HAL_SPI_TransmitReceive+0x82>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d002      	beq.n	800e498 <HAL_SPI_TransmitReceive+0x82>
 800e492:	887b      	ldrh	r3, [r7, #2]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d103      	bne.n	800e4a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e498:	2301      	movs	r3, #1
 800e49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e49e:	e14e      	b.n	800e73e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b04      	cmp	r3, #4
 800e4aa:	d003      	beq.n	800e4b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2205      	movs	r2, #5
 800e4b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	887a      	ldrh	r2, [r7, #2]
 800e4c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	887a      	ldrh	r2, [r7, #2]
 800e4ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	887a      	ldrh	r2, [r7, #2]
 800e4d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	887a      	ldrh	r2, [r7, #2]
 800e4dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f4:	2b40      	cmp	r3, #64	; 0x40
 800e4f6:	d007      	beq.n	800e508 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e510:	d178      	bne.n	800e604 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <HAL_SPI_TransmitReceive+0x10a>
 800e51a:	8b7b      	ldrh	r3, [r7, #26]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d166      	bne.n	800e5ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e524:	881a      	ldrh	r2, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e530:	1c9a      	adds	r2, r3, #2
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	3b01      	subs	r3, #1
 800e53e:	b29a      	uxth	r2, r3
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e544:	e053      	b.n	800e5ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	f003 0302 	and.w	r3, r3, #2
 800e550:	2b02      	cmp	r3, #2
 800e552:	d11b      	bne.n	800e58c <HAL_SPI_TransmitReceive+0x176>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e558:	b29b      	uxth	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d016      	beq.n	800e58c <HAL_SPI_TransmitReceive+0x176>
 800e55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e560:	2b01      	cmp	r3, #1
 800e562:	d113      	bne.n	800e58c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e568:	881a      	ldrh	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e574:	1c9a      	adds	r2, r3, #2
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e588:	2300      	movs	r3, #0
 800e58a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	f003 0301 	and.w	r3, r3, #1
 800e596:	2b01      	cmp	r3, #1
 800e598:	d119      	bne.n	800e5ce <HAL_SPI_TransmitReceive+0x1b8>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d014      	beq.n	800e5ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ae:	b292      	uxth	r2, r2
 800e5b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b6:	1c9a      	adds	r2, r3, #2
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e5ce:	f7fb f893 	bl	80096f8 <HAL_GetTick>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d807      	bhi.n	800e5ee <HAL_SPI_TransmitReceive+0x1d8>
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e4:	d003      	beq.n	800e5ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e5ec:	e0a7      	b.n	800e73e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1a6      	bne.n	800e546 <HAL_SPI_TransmitReceive+0x130>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1a1      	bne.n	800e546 <HAL_SPI_TransmitReceive+0x130>
 800e602:	e07c      	b.n	800e6fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <HAL_SPI_TransmitReceive+0x1fc>
 800e60c:	8b7b      	ldrh	r3, [r7, #26]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d16b      	bne.n	800e6ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	330c      	adds	r3, #12
 800e61c:	7812      	ldrb	r2, [r2, #0]
 800e61e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e624:	1c5a      	adds	r2, r3, #1
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e62e:	b29b      	uxth	r3, r3
 800e630:	3b01      	subs	r3, #1
 800e632:	b29a      	uxth	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e638:	e057      	b.n	800e6ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f003 0302 	and.w	r3, r3, #2
 800e644:	2b02      	cmp	r3, #2
 800e646:	d11c      	bne.n	800e682 <HAL_SPI_TransmitReceive+0x26c>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d017      	beq.n	800e682 <HAL_SPI_TransmitReceive+0x26c>
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	2b01      	cmp	r3, #1
 800e656:	d114      	bne.n	800e682 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	330c      	adds	r3, #12
 800e662:	7812      	ldrb	r2, [r2, #0]
 800e664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e674:	b29b      	uxth	r3, r3
 800e676:	3b01      	subs	r3, #1
 800e678:	b29a      	uxth	r2, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e67e:	2300      	movs	r3, #0
 800e680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f003 0301 	and.w	r3, r3, #1
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d119      	bne.n	800e6c4 <HAL_SPI_TransmitReceive+0x2ae>
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e694:	b29b      	uxth	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d014      	beq.n	800e6c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	b2d2      	uxtb	r2, r2
 800e6a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e6c4:	f7fb f818 	bl	80096f8 <HAL_GetTick>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d803      	bhi.n	800e6dc <HAL_SPI_TransmitReceive+0x2c6>
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6da:	d102      	bne.n	800e6e2 <HAL_SPI_TransmitReceive+0x2cc>
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d103      	bne.n	800e6ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e6e2:	2303      	movs	r3, #3
 800e6e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e6e8:	e029      	b.n	800e73e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1a2      	bne.n	800e63a <HAL_SPI_TransmitReceive+0x224>
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d19d      	bne.n	800e63a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f000 f8f8 	bl	800e8f8 <SPI_EndRxTxTransaction>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d006      	beq.n	800e71c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2220      	movs	r2, #32
 800e718:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e71a:	e010      	b.n	800e73e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10b      	bne.n	800e73c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e724:	2300      	movs	r3, #0
 800e726:	617b      	str	r3, [r7, #20]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	617b      	str	r3, [r7, #20]
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	e000      	b.n	800e73e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e73c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e74e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e752:	4618      	mov	r0, r3
 800e754:	3730      	adds	r7, #48	; 0x30
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b084      	sub	sp, #16
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
 800e762:	60b9      	str	r1, [r7, #8]
 800e764:	603b      	str	r3, [r7, #0]
 800e766:	4613      	mov	r3, r2
 800e768:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e76a:	e04c      	b.n	800e806 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e772:	d048      	beq.n	800e806 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e774:	f7fa ffc0 	bl	80096f8 <HAL_GetTick>
 800e778:	4602      	mov	r2, r0
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	683a      	ldr	r2, [r7, #0]
 800e780:	429a      	cmp	r2, r3
 800e782:	d902      	bls.n	800e78a <SPI_WaitFlagStateUntilTimeout+0x30>
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d13d      	bne.n	800e806 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7a2:	d111      	bne.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7ac:	d004      	beq.n	800e7b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7b6:	d107      	bne.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7d0:	d10f      	bne.n	800e7f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e802:	2303      	movs	r3, #3
 800e804:	e00f      	b.n	800e826 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	689a      	ldr	r2, [r3, #8]
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	4013      	ands	r3, r2
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	429a      	cmp	r2, r3
 800e814:	bf0c      	ite	eq
 800e816:	2301      	moveq	r3, #1
 800e818:	2300      	movne	r3, #0
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	461a      	mov	r2, r3
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	429a      	cmp	r2, r3
 800e822:	d1a3      	bne.n	800e76c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b086      	sub	sp, #24
 800e832:	af02      	add	r7, sp, #8
 800e834:	60f8      	str	r0, [r7, #12]
 800e836:	60b9      	str	r1, [r7, #8]
 800e838:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e842:	d111      	bne.n	800e868 <SPI_EndRxTransaction+0x3a>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e84c:	d004      	beq.n	800e858 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e856:	d107      	bne.n	800e868 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e866:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e870:	d12a      	bne.n	800e8c8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e87a:	d012      	beq.n	800e8a2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2200      	movs	r2, #0
 800e884:	2180      	movs	r1, #128	; 0x80
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff ff67 	bl	800e75a <SPI_WaitFlagStateUntilTimeout>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d02d      	beq.n	800e8ee <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e896:	f043 0220 	orr.w	r2, r3, #32
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e89e:	2303      	movs	r3, #3
 800e8a0:	e026      	b.n	800e8f0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	2101      	movs	r1, #1
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7ff ff54 	bl	800e75a <SPI_WaitFlagStateUntilTimeout>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d01a      	beq.n	800e8ee <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8bc:	f043 0220 	orr.w	r2, r3, #32
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e8c4:	2303      	movs	r3, #3
 800e8c6:	e013      	b.n	800e8f0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f7ff ff41 	bl	800e75a <SPI_WaitFlagStateUntilTimeout>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d007      	beq.n	800e8ee <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e2:	f043 0220 	orr.w	r2, r3, #32
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	e000      	b.n	800e8f0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b088      	sub	sp, #32
 800e8fc:	af02      	add	r7, sp, #8
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e904:	4b1b      	ldr	r3, [pc, #108]	; (800e974 <SPI_EndRxTxTransaction+0x7c>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a1b      	ldr	r2, [pc, #108]	; (800e978 <SPI_EndRxTxTransaction+0x80>)
 800e90a:	fba2 2303 	umull	r2, r3, r2, r3
 800e90e:	0d5b      	lsrs	r3, r3, #21
 800e910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e914:	fb02 f303 	mul.w	r3, r2, r3
 800e918:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e922:	d112      	bne.n	800e94a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	2200      	movs	r2, #0
 800e92c:	2180      	movs	r1, #128	; 0x80
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f7ff ff13 	bl	800e75a <SPI_WaitFlagStateUntilTimeout>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d016      	beq.n	800e968 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e93e:	f043 0220 	orr.w	r2, r3, #32
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e946:	2303      	movs	r3, #3
 800e948:	e00f      	b.n	800e96a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00a      	beq.n	800e966 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	3b01      	subs	r3, #1
 800e954:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e960:	2b80      	cmp	r3, #128	; 0x80
 800e962:	d0f2      	beq.n	800e94a <SPI_EndRxTxTransaction+0x52>
 800e964:	e000      	b.n	800e968 <SPI_EndRxTxTransaction+0x70>
        break;
 800e966:	bf00      	nop
  }

  return HAL_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000000 	.word	0x20000000
 800e978:	165e9f81 	.word	0x165e9f81

0800e97c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d101      	bne.n	800e98e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e01d      	b.n	800e9ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7f8 f9da 	bl	8006d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f000 fb56 	bl	800f06c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b085      	sub	sp, #20
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68da      	ldr	r2, [r3, #12]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f042 0201 	orr.w	r2, r2, #1
 800e9e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f003 0307 	and.w	r3, r3, #7
 800e9f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2b06      	cmp	r3, #6
 800e9fa:	d007      	beq.n	800ea0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f042 0201 	orr.w	r2, r2, #1
 800ea0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b082      	sub	sp, #8
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d101      	bne.n	800ea2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e01d      	b.n	800ea68 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d106      	bne.n	800ea46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7f8 f917 	bl	8006c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2202      	movs	r2, #2
 800ea4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3304      	adds	r3, #4
 800ea56:	4619      	mov	r1, r3
 800ea58:	4610      	mov	r0, r2
 800ea5a:	f000 fb07 	bl	800f06c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f000 fd42 	bl	800f50c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a15      	ldr	r2, [pc, #84]	; (800eae4 <HAL_TIM_PWM_Start+0x74>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d004      	beq.n	800ea9c <HAL_TIM_PWM_Start+0x2c>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a14      	ldr	r2, [pc, #80]	; (800eae8 <HAL_TIM_PWM_Start+0x78>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d101      	bne.n	800eaa0 <HAL_TIM_PWM_Start+0x30>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e000      	b.n	800eaa2 <HAL_TIM_PWM_Start+0x32>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d007      	beq.n	800eab6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	f003 0307 	and.w	r3, r3, #7
 800eac0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b06      	cmp	r3, #6
 800eac6:	d007      	beq.n	800ead8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f042 0201 	orr.w	r2, r2, #1
 800ead6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	40010000 	.word	0x40010000
 800eae8:	40010400 	.word	0x40010400

0800eaec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d101      	bne.n	800eb00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	e083      	b.n	800ec08 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7f8 f9b1 	bl	8006e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	6812      	ldr	r2, [r2, #0]
 800eb2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb30:	f023 0307 	bic.w	r3, r3, #7
 800eb34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	4619      	mov	r1, r3
 800eb40:	4610      	mov	r0, r2
 800eb42:	f000 fa93 	bl	800f06c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	689b      	ldr	r3, [r3, #8]
 800eb4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6a1b      	ldr	r3, [r3, #32]
 800eb5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb6e:	f023 0303 	bic.w	r3, r3, #3
 800eb72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	689a      	ldr	r2, [r3, #8]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	021b      	lsls	r3, r3, #8
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800eb8c:	f023 030c 	bic.w	r3, r3, #12
 800eb90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eb98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	69db      	ldr	r3, [r3, #28]
 800eba6:	021b      	lsls	r3, r3, #8
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	011a      	lsls	r2, r3, #4
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	6a1b      	ldr	r3, [r3, #32]
 800ebba:	031b      	lsls	r3, r3, #12
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ebca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ebd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	011b      	lsls	r3, r3, #4
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2201      	movs	r2, #1
 800ec02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d002      	beq.n	800ec26 <HAL_TIM_Encoder_Start+0x16>
 800ec20:	2b04      	cmp	r3, #4
 800ec22:	d008      	beq.n	800ec36 <HAL_TIM_Encoder_Start+0x26>
 800ec24:	e00f      	b.n	800ec46 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 fc6c 	bl	800f50c <TIM_CCxChannelCmd>
      break;
 800ec34:	e016      	b.n	800ec64 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	2104      	movs	r1, #4
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 fc64 	bl	800f50c <TIM_CCxChannelCmd>
      break;
 800ec44:	e00e      	b.n	800ec64 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 fc5c 	bl	800f50c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	2104      	movs	r1, #4
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 fc55 	bl	800f50c <TIM_CCxChannelCmd>
      break;
 800ec62:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f042 0201 	orr.w	r2, r2, #1
 800ec72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b082      	sub	sp, #8
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d122      	bne.n	800ecda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	f003 0302 	and.w	r3, r3, #2
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	d11b      	bne.n	800ecda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f06f 0202 	mvn.w	r2, #2
 800ecaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	699b      	ldr	r3, [r3, #24]
 800ecb8:	f003 0303 	and.w	r3, r3, #3
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d003      	beq.n	800ecc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f9b5 	bl	800f030 <HAL_TIM_IC_CaptureCallback>
 800ecc6:	e005      	b.n	800ecd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f9a7 	bl	800f01c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f9b8 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	f003 0304 	and.w	r3, r3, #4
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d122      	bne.n	800ed2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	f003 0304 	and.w	r3, r3, #4
 800ecf2:	2b04      	cmp	r3, #4
 800ecf4:	d11b      	bne.n	800ed2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f06f 0204 	mvn.w	r2, #4
 800ecfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2202      	movs	r2, #2
 800ed04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f98b 	bl	800f030 <HAL_TIM_IC_CaptureCallback>
 800ed1a:	e005      	b.n	800ed28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f97d 	bl	800f01c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f98e 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	f003 0308 	and.w	r3, r3, #8
 800ed38:	2b08      	cmp	r3, #8
 800ed3a:	d122      	bne.n	800ed82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	f003 0308 	and.w	r3, r3, #8
 800ed46:	2b08      	cmp	r3, #8
 800ed48:	d11b      	bne.n	800ed82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f06f 0208 	mvn.w	r2, #8
 800ed52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2204      	movs	r2, #4
 800ed58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	69db      	ldr	r3, [r3, #28]
 800ed60:	f003 0303 	and.w	r3, r3, #3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d003      	beq.n	800ed70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f961 	bl	800f030 <HAL_TIM_IC_CaptureCallback>
 800ed6e:	e005      	b.n	800ed7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 f953 	bl	800f01c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f964 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b10      	cmp	r3, #16
 800ed8e:	d122      	bne.n	800edd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	f003 0310 	and.w	r3, r3, #16
 800ed9a:	2b10      	cmp	r3, #16
 800ed9c:	d11b      	bne.n	800edd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f06f 0210 	mvn.w	r2, #16
 800eda6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2208      	movs	r2, #8
 800edac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	69db      	ldr	r3, [r3, #28]
 800edb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d003      	beq.n	800edc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f937 	bl	800f030 <HAL_TIM_IC_CaptureCallback>
 800edc2:	e005      	b.n	800edd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f929 	bl	800f01c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f93a 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	f003 0301 	and.w	r3, r3, #1
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d10e      	bne.n	800ee02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d107      	bne.n	800ee02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f06f 0201 	mvn.w	r2, #1
 800edfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7f6 fd27 	bl	8005850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee0c:	2b80      	cmp	r3, #128	; 0x80
 800ee0e:	d10e      	bne.n	800ee2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1a:	2b80      	cmp	r3, #128	; 0x80
 800ee1c:	d107      	bne.n	800ee2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 fc6d 	bl	800f708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee38:	2b40      	cmp	r3, #64	; 0x40
 800ee3a:	d10e      	bne.n	800ee5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee46:	2b40      	cmp	r3, #64	; 0x40
 800ee48:	d107      	bne.n	800ee5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f8ff 	bl	800f058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	f003 0320 	and.w	r3, r3, #32
 800ee64:	2b20      	cmp	r3, #32
 800ee66:	d10e      	bne.n	800ee86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	f003 0320 	and.w	r3, r3, #32
 800ee72:	2b20      	cmp	r3, #32
 800ee74:	d107      	bne.n	800ee86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f06f 0220 	mvn.w	r2, #32
 800ee7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fc37 	bl	800f6f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
	...

0800ee90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d101      	bne.n	800eeaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800eea6:	2302      	movs	r3, #2
 800eea8:	e0b4      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x184>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2201      	movs	r2, #1
 800eeae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2202      	movs	r2, #2
 800eeb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b0c      	cmp	r3, #12
 800eebe:	f200 809f 	bhi.w	800f000 <HAL_TIM_PWM_ConfigChannel+0x170>
 800eec2:	a201      	add	r2, pc, #4	; (adr r2, 800eec8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800eec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec8:	0800eefd 	.word	0x0800eefd
 800eecc:	0800f001 	.word	0x0800f001
 800eed0:	0800f001 	.word	0x0800f001
 800eed4:	0800f001 	.word	0x0800f001
 800eed8:	0800ef3d 	.word	0x0800ef3d
 800eedc:	0800f001 	.word	0x0800f001
 800eee0:	0800f001 	.word	0x0800f001
 800eee4:	0800f001 	.word	0x0800f001
 800eee8:	0800ef7f 	.word	0x0800ef7f
 800eeec:	0800f001 	.word	0x0800f001
 800eef0:	0800f001 	.word	0x0800f001
 800eef4:	0800f001 	.word	0x0800f001
 800eef8:	0800efbf 	.word	0x0800efbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68b9      	ldr	r1, [r7, #8]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 f952 	bl	800f1ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	699a      	ldr	r2, [r3, #24]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f042 0208 	orr.w	r2, r2, #8
 800ef16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	699a      	ldr	r2, [r3, #24]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f022 0204 	bic.w	r2, r2, #4
 800ef26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	6999      	ldr	r1, [r3, #24]
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	691a      	ldr	r2, [r3, #16]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	430a      	orrs	r2, r1
 800ef38:	619a      	str	r2, [r3, #24]
      break;
 800ef3a:	e062      	b.n	800f002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68b9      	ldr	r1, [r7, #8]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 f9a2 	bl	800f28c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	699a      	ldr	r2, [r3, #24]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	699a      	ldr	r2, [r3, #24]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6999      	ldr	r1, [r3, #24]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	021a      	lsls	r2, r3, #8
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	430a      	orrs	r2, r1
 800ef7a:	619a      	str	r2, [r3, #24]
      break;
 800ef7c:	e041      	b.n	800f002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68b9      	ldr	r1, [r7, #8]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f000 f9f7 	bl	800f378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	69da      	ldr	r2, [r3, #28]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f042 0208 	orr.w	r2, r2, #8
 800ef98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	69da      	ldr	r2, [r3, #28]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0204 	bic.w	r2, r2, #4
 800efa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	69d9      	ldr	r1, [r3, #28]
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	430a      	orrs	r2, r1
 800efba:	61da      	str	r2, [r3, #28]
      break;
 800efbc:	e021      	b.n	800f002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	68b9      	ldr	r1, [r7, #8]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fa4b 	bl	800f460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	69da      	ldr	r2, [r3, #28]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69da      	ldr	r2, [r3, #28]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	69d9      	ldr	r1, [r3, #28]
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	021a      	lsls	r2, r3, #8
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	430a      	orrs	r2, r1
 800effc:	61da      	str	r2, [r3, #28]
      break;
 800effe:	e000      	b.n	800f002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f000:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2201      	movs	r2, #1
 800f006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f012:	2300      	movs	r3, #0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3710      	adds	r7, #16
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a40      	ldr	r2, [pc, #256]	; (800f180 <TIM_Base_SetConfig+0x114>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d013      	beq.n	800f0ac <TIM_Base_SetConfig+0x40>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f08a:	d00f      	beq.n	800f0ac <TIM_Base_SetConfig+0x40>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a3d      	ldr	r2, [pc, #244]	; (800f184 <TIM_Base_SetConfig+0x118>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d00b      	beq.n	800f0ac <TIM_Base_SetConfig+0x40>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a3c      	ldr	r2, [pc, #240]	; (800f188 <TIM_Base_SetConfig+0x11c>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d007      	beq.n	800f0ac <TIM_Base_SetConfig+0x40>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a3b      	ldr	r2, [pc, #236]	; (800f18c <TIM_Base_SetConfig+0x120>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d003      	beq.n	800f0ac <TIM_Base_SetConfig+0x40>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a3a      	ldr	r2, [pc, #232]	; (800f190 <TIM_Base_SetConfig+0x124>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d108      	bne.n	800f0be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a2f      	ldr	r2, [pc, #188]	; (800f180 <TIM_Base_SetConfig+0x114>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d02b      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0cc:	d027      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a2c      	ldr	r2, [pc, #176]	; (800f184 <TIM_Base_SetConfig+0x118>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d023      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a2b      	ldr	r2, [pc, #172]	; (800f188 <TIM_Base_SetConfig+0x11c>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d01f      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a2a      	ldr	r2, [pc, #168]	; (800f18c <TIM_Base_SetConfig+0x120>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d01b      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a29      	ldr	r2, [pc, #164]	; (800f190 <TIM_Base_SetConfig+0x124>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d017      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4a28      	ldr	r2, [pc, #160]	; (800f194 <TIM_Base_SetConfig+0x128>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d013      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a27      	ldr	r2, [pc, #156]	; (800f198 <TIM_Base_SetConfig+0x12c>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d00f      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a26      	ldr	r2, [pc, #152]	; (800f19c <TIM_Base_SetConfig+0x130>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d00b      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4a25      	ldr	r2, [pc, #148]	; (800f1a0 <TIM_Base_SetConfig+0x134>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d007      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a24      	ldr	r2, [pc, #144]	; (800f1a4 <TIM_Base_SetConfig+0x138>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d003      	beq.n	800f11e <TIM_Base_SetConfig+0xb2>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4a23      	ldr	r2, [pc, #140]	; (800f1a8 <TIM_Base_SetConfig+0x13c>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d108      	bne.n	800f130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	4313      	orrs	r3, r2
 800f12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	695b      	ldr	r3, [r3, #20]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	689a      	ldr	r2, [r3, #8]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a0a      	ldr	r2, [pc, #40]	; (800f180 <TIM_Base_SetConfig+0x114>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d003      	beq.n	800f164 <TIM_Base_SetConfig+0xf8>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a0c      	ldr	r2, [pc, #48]	; (800f190 <TIM_Base_SetConfig+0x124>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d103      	bne.n	800f16c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	691a      	ldr	r2, [r3, #16]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2201      	movs	r2, #1
 800f170:	615a      	str	r2, [r3, #20]
}
 800f172:	bf00      	nop
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	40010000 	.word	0x40010000
 800f184:	40000400 	.word	0x40000400
 800f188:	40000800 	.word	0x40000800
 800f18c:	40000c00 	.word	0x40000c00
 800f190:	40010400 	.word	0x40010400
 800f194:	40014000 	.word	0x40014000
 800f198:	40014400 	.word	0x40014400
 800f19c:	40014800 	.word	0x40014800
 800f1a0:	40001800 	.word	0x40001800
 800f1a4:	40001c00 	.word	0x40001c00
 800f1a8:	40002000 	.word	0x40002000

0800f1ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b087      	sub	sp, #28
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	f023 0201 	bic.w	r2, r3, #1
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a1b      	ldr	r3, [r3, #32]
 800f1c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f023 0303 	bic.w	r3, r3, #3
 800f1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	f023 0302 	bic.w	r3, r3, #2
 800f1f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	697a      	ldr	r2, [r7, #20]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a20      	ldr	r2, [pc, #128]	; (800f284 <TIM_OC1_SetConfig+0xd8>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d003      	beq.n	800f210 <TIM_OC1_SetConfig+0x64>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4a1f      	ldr	r2, [pc, #124]	; (800f288 <TIM_OC1_SetConfig+0xdc>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d10c      	bne.n	800f22a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	f023 0308 	bic.w	r3, r3, #8
 800f216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	697a      	ldr	r2, [r7, #20]
 800f21e:	4313      	orrs	r3, r2
 800f220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f023 0304 	bic.w	r3, r3, #4
 800f228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a15      	ldr	r2, [pc, #84]	; (800f284 <TIM_OC1_SetConfig+0xd8>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d003      	beq.n	800f23a <TIM_OC1_SetConfig+0x8e>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4a14      	ldr	r2, [pc, #80]	; (800f288 <TIM_OC1_SetConfig+0xdc>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d111      	bne.n	800f25e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	695b      	ldr	r3, [r3, #20]
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	4313      	orrs	r3, r2
 800f252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	4313      	orrs	r3, r2
 800f25c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	693a      	ldr	r2, [r7, #16]
 800f262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	621a      	str	r2, [r3, #32]
}
 800f278:	bf00      	nop
 800f27a:	371c      	adds	r7, #28
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	40010000 	.word	0x40010000
 800f288:	40010400 	.word	0x40010400

0800f28c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	f023 0210 	bic.w	r2, r3, #16
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	021b      	lsls	r3, r3, #8
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f023 0320 	bic.w	r3, r3, #32
 800f2d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	011b      	lsls	r3, r3, #4
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a22      	ldr	r2, [pc, #136]	; (800f370 <TIM_OC2_SetConfig+0xe4>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d003      	beq.n	800f2f4 <TIM_OC2_SetConfig+0x68>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4a21      	ldr	r2, [pc, #132]	; (800f374 <TIM_OC2_SetConfig+0xe8>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d10d      	bne.n	800f310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	011b      	lsls	r3, r3, #4
 800f302:	697a      	ldr	r2, [r7, #20]
 800f304:	4313      	orrs	r3, r2
 800f306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f30e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a17      	ldr	r2, [pc, #92]	; (800f370 <TIM_OC2_SetConfig+0xe4>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d003      	beq.n	800f320 <TIM_OC2_SetConfig+0x94>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a16      	ldr	r2, [pc, #88]	; (800f374 <TIM_OC2_SetConfig+0xe8>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d113      	bne.n	800f348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f32e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	695b      	ldr	r3, [r3, #20]
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	4313      	orrs	r3, r2
 800f33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	699b      	ldr	r3, [r3, #24]
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	693a      	ldr	r2, [r7, #16]
 800f344:	4313      	orrs	r3, r2
 800f346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	685a      	ldr	r2, [r3, #4]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	621a      	str	r2, [r3, #32]
}
 800f362:	bf00      	nop
 800f364:	371c      	adds	r7, #28
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	40010000 	.word	0x40010000
 800f374:	40010400 	.word	0x40010400

0800f378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f378:	b480      	push	{r7}
 800f37a:	b087      	sub	sp, #28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a1b      	ldr	r3, [r3, #32]
 800f392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	69db      	ldr	r3, [r3, #28]
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f023 0303 	bic.w	r3, r3, #3
 800f3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	021b      	lsls	r3, r3, #8
 800f3c8:	697a      	ldr	r2, [r7, #20]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a21      	ldr	r2, [pc, #132]	; (800f458 <TIM_OC3_SetConfig+0xe0>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d003      	beq.n	800f3de <TIM_OC3_SetConfig+0x66>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a20      	ldr	r2, [pc, #128]	; (800f45c <TIM_OC3_SetConfig+0xe4>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d10d      	bne.n	800f3fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a16      	ldr	r2, [pc, #88]	; (800f458 <TIM_OC3_SetConfig+0xe0>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d003      	beq.n	800f40a <TIM_OC3_SetConfig+0x92>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a15      	ldr	r2, [pc, #84]	; (800f45c <TIM_OC3_SetConfig+0xe4>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d113      	bne.n	800f432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	011b      	lsls	r3, r3, #4
 800f420:	693a      	ldr	r2, [r7, #16]
 800f422:	4313      	orrs	r3, r2
 800f424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	011b      	lsls	r3, r3, #4
 800f42c:	693a      	ldr	r2, [r7, #16]
 800f42e:	4313      	orrs	r3, r2
 800f430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	621a      	str	r2, [r3, #32]
}
 800f44c:	bf00      	nop
 800f44e:	371c      	adds	r7, #28
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr
 800f458:	40010000 	.word	0x40010000
 800f45c:	40010400 	.word	0x40010400

0800f460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f460:	b480      	push	{r7}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	69db      	ldr	r3, [r3, #28]
 800f486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f48e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	021b      	lsls	r3, r3, #8
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	031b      	lsls	r3, r3, #12
 800f4b2:	693a      	ldr	r2, [r7, #16]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a12      	ldr	r2, [pc, #72]	; (800f504 <TIM_OC4_SetConfig+0xa4>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d003      	beq.n	800f4c8 <TIM_OC4_SetConfig+0x68>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a11      	ldr	r2, [pc, #68]	; (800f508 <TIM_OC4_SetConfig+0xa8>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d109      	bne.n	800f4dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	695b      	ldr	r3, [r3, #20]
 800f4d4:	019b      	lsls	r3, r3, #6
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	621a      	str	r2, [r3, #32]
}
 800f4f6:	bf00      	nop
 800f4f8:	371c      	adds	r7, #28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	40010000 	.word	0x40010000
 800f508:	40010400 	.word	0x40010400

0800f50c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b087      	sub	sp, #28
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f003 031f 	and.w	r3, r3, #31
 800f51e:	2201      	movs	r2, #1
 800f520:	fa02 f303 	lsl.w	r3, r2, r3
 800f524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6a1a      	ldr	r2, [r3, #32]
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	43db      	mvns	r3, r3
 800f52e:	401a      	ands	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6a1a      	ldr	r2, [r3, #32]
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	f003 031f 	and.w	r3, r3, #31
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	fa01 f303 	lsl.w	r3, r1, r3
 800f544:	431a      	orrs	r2, r3
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	621a      	str	r2, [r3, #32]
}
 800f54a:	bf00      	nop
 800f54c:	371c      	adds	r7, #28
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
	...

0800f558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e05a      	b.n	800f626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2202      	movs	r2, #2
 800f57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a21      	ldr	r2, [pc, #132]	; (800f634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d022      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5bc:	d01d      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a1d      	ldr	r2, [pc, #116]	; (800f638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d018      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a1b      	ldr	r2, [pc, #108]	; (800f63c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d013      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a1a      	ldr	r2, [pc, #104]	; (800f640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d00e      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a18      	ldr	r2, [pc, #96]	; (800f644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d009      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4a17      	ldr	r2, [pc, #92]	; (800f648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d004      	beq.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a15      	ldr	r2, [pc, #84]	; (800f64c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d10c      	bne.n	800f614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	4313      	orrs	r3, r2
 800f60a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3714      	adds	r7, #20
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	40010000 	.word	0x40010000
 800f638:	40000400 	.word	0x40000400
 800f63c:	40000800 	.word	0x40000800
 800f640:	40000c00 	.word	0x40000c00
 800f644:	40010400 	.word	0x40010400
 800f648:	40014000 	.word	0x40014000
 800f64c:	40001800 	.word	0x40001800

0800f650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f65a:	2300      	movs	r3, #0
 800f65c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f664:	2b01      	cmp	r3, #1
 800f666:	d101      	bne.n	800f66c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f668:	2302      	movs	r3, #2
 800f66a:	e03d      	b.n	800f6e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	4313      	orrs	r3, r2
 800f680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	695b      	ldr	r3, [r3, #20]
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	69db      	ldr	r3, [r3, #28]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3714      	adds	r7, #20
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6fc:	bf00      	nop
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d101      	bne.n	800f72e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e03f      	b.n	800f7ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f7f7 fcc4 	bl	80070d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2224      	movs	r2, #36	; 0x24
 800f74c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68da      	ldr	r2, [r3, #12]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f75e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f829 	bl	800f7b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	691a      	ldr	r2, [r3, #16]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	695a      	ldr	r2, [r3, #20]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68da      	ldr	r2, [r3, #12]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2220      	movs	r2, #32
 800f7a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2220      	movs	r2, #32
 800f7a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
	...

0800f7b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	b085      	sub	sp, #20
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	691b      	ldr	r3, [r3, #16]
 800f7c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68da      	ldr	r2, [r3, #12]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	430a      	orrs	r2, r1
 800f7d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	689a      	ldr	r2, [r3, #8]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	691b      	ldr	r3, [r3, #16]
 800f7e0:	431a      	orrs	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	695b      	ldr	r3, [r3, #20]
 800f7e6:	431a      	orrs	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f7fa:	f023 030c 	bic.w	r3, r3, #12
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	6812      	ldr	r2, [r2, #0]
 800f802:	68f9      	ldr	r1, [r7, #12]
 800f804:	430b      	orrs	r3, r1
 800f806:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	695b      	ldr	r3, [r3, #20]
 800f80e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	699a      	ldr	r2, [r3, #24]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	430a      	orrs	r2, r1
 800f81c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	69db      	ldr	r3, [r3, #28]
 800f822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f826:	f040 818b 	bne.w	800fb40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4ac1      	ldr	r2, [pc, #772]	; (800fb34 <UART_SetConfig+0x37c>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d005      	beq.n	800f840 <UART_SetConfig+0x88>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4abf      	ldr	r2, [pc, #764]	; (800fb38 <UART_SetConfig+0x380>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	f040 80bd 	bne.w	800f9ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f840:	f7fc fbcc 	bl	800bfdc <HAL_RCC_GetPCLK2Freq>
 800f844:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	461d      	mov	r5, r3
 800f84a:	f04f 0600 	mov.w	r6, #0
 800f84e:	46a8      	mov	r8, r5
 800f850:	46b1      	mov	r9, r6
 800f852:	eb18 0308 	adds.w	r3, r8, r8
 800f856:	eb49 0409 	adc.w	r4, r9, r9
 800f85a:	4698      	mov	r8, r3
 800f85c:	46a1      	mov	r9, r4
 800f85e:	eb18 0805 	adds.w	r8, r8, r5
 800f862:	eb49 0906 	adc.w	r9, r9, r6
 800f866:	f04f 0100 	mov.w	r1, #0
 800f86a:	f04f 0200 	mov.w	r2, #0
 800f86e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f872:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f876:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f87a:	4688      	mov	r8, r1
 800f87c:	4691      	mov	r9, r2
 800f87e:	eb18 0005 	adds.w	r0, r8, r5
 800f882:	eb49 0106 	adc.w	r1, r9, r6
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	461d      	mov	r5, r3
 800f88c:	f04f 0600 	mov.w	r6, #0
 800f890:	196b      	adds	r3, r5, r5
 800f892:	eb46 0406 	adc.w	r4, r6, r6
 800f896:	461a      	mov	r2, r3
 800f898:	4623      	mov	r3, r4
 800f89a:	f7f1 fa0d 	bl	8000cb8 <__aeabi_uldivmod>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	460c      	mov	r4, r1
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	4ba5      	ldr	r3, [pc, #660]	; (800fb3c <UART_SetConfig+0x384>)
 800f8a6:	fba3 2302 	umull	r2, r3, r3, r2
 800f8aa:	095b      	lsrs	r3, r3, #5
 800f8ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	461d      	mov	r5, r3
 800f8b4:	f04f 0600 	mov.w	r6, #0
 800f8b8:	46a9      	mov	r9, r5
 800f8ba:	46b2      	mov	sl, r6
 800f8bc:	eb19 0309 	adds.w	r3, r9, r9
 800f8c0:	eb4a 040a 	adc.w	r4, sl, sl
 800f8c4:	4699      	mov	r9, r3
 800f8c6:	46a2      	mov	sl, r4
 800f8c8:	eb19 0905 	adds.w	r9, r9, r5
 800f8cc:	eb4a 0a06 	adc.w	sl, sl, r6
 800f8d0:	f04f 0100 	mov.w	r1, #0
 800f8d4:	f04f 0200 	mov.w	r2, #0
 800f8d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f8dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f8e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f8e4:	4689      	mov	r9, r1
 800f8e6:	4692      	mov	sl, r2
 800f8e8:	eb19 0005 	adds.w	r0, r9, r5
 800f8ec:	eb4a 0106 	adc.w	r1, sl, r6
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	461d      	mov	r5, r3
 800f8f6:	f04f 0600 	mov.w	r6, #0
 800f8fa:	196b      	adds	r3, r5, r5
 800f8fc:	eb46 0406 	adc.w	r4, r6, r6
 800f900:	461a      	mov	r2, r3
 800f902:	4623      	mov	r3, r4
 800f904:	f7f1 f9d8 	bl	8000cb8 <__aeabi_uldivmod>
 800f908:	4603      	mov	r3, r0
 800f90a:	460c      	mov	r4, r1
 800f90c:	461a      	mov	r2, r3
 800f90e:	4b8b      	ldr	r3, [pc, #556]	; (800fb3c <UART_SetConfig+0x384>)
 800f910:	fba3 1302 	umull	r1, r3, r3, r2
 800f914:	095b      	lsrs	r3, r3, #5
 800f916:	2164      	movs	r1, #100	; 0x64
 800f918:	fb01 f303 	mul.w	r3, r1, r3
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	00db      	lsls	r3, r3, #3
 800f920:	3332      	adds	r3, #50	; 0x32
 800f922:	4a86      	ldr	r2, [pc, #536]	; (800fb3c <UART_SetConfig+0x384>)
 800f924:	fba2 2303 	umull	r2, r3, r2, r3
 800f928:	095b      	lsrs	r3, r3, #5
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f930:	4498      	add	r8, r3
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	461d      	mov	r5, r3
 800f936:	f04f 0600 	mov.w	r6, #0
 800f93a:	46a9      	mov	r9, r5
 800f93c:	46b2      	mov	sl, r6
 800f93e:	eb19 0309 	adds.w	r3, r9, r9
 800f942:	eb4a 040a 	adc.w	r4, sl, sl
 800f946:	4699      	mov	r9, r3
 800f948:	46a2      	mov	sl, r4
 800f94a:	eb19 0905 	adds.w	r9, r9, r5
 800f94e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f952:	f04f 0100 	mov.w	r1, #0
 800f956:	f04f 0200 	mov.w	r2, #0
 800f95a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f95e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f962:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f966:	4689      	mov	r9, r1
 800f968:	4692      	mov	sl, r2
 800f96a:	eb19 0005 	adds.w	r0, r9, r5
 800f96e:	eb4a 0106 	adc.w	r1, sl, r6
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	461d      	mov	r5, r3
 800f978:	f04f 0600 	mov.w	r6, #0
 800f97c:	196b      	adds	r3, r5, r5
 800f97e:	eb46 0406 	adc.w	r4, r6, r6
 800f982:	461a      	mov	r2, r3
 800f984:	4623      	mov	r3, r4
 800f986:	f7f1 f997 	bl	8000cb8 <__aeabi_uldivmod>
 800f98a:	4603      	mov	r3, r0
 800f98c:	460c      	mov	r4, r1
 800f98e:	461a      	mov	r2, r3
 800f990:	4b6a      	ldr	r3, [pc, #424]	; (800fb3c <UART_SetConfig+0x384>)
 800f992:	fba3 1302 	umull	r1, r3, r3, r2
 800f996:	095b      	lsrs	r3, r3, #5
 800f998:	2164      	movs	r1, #100	; 0x64
 800f99a:	fb01 f303 	mul.w	r3, r1, r3
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	3332      	adds	r3, #50	; 0x32
 800f9a4:	4a65      	ldr	r2, [pc, #404]	; (800fb3c <UART_SetConfig+0x384>)
 800f9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f9aa:	095b      	lsrs	r3, r3, #5
 800f9ac:	f003 0207 	and.w	r2, r3, #7
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4442      	add	r2, r8
 800f9b6:	609a      	str	r2, [r3, #8]
 800f9b8:	e26f      	b.n	800fe9a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f9ba:	f7fc fafb 	bl	800bfb4 <HAL_RCC_GetPCLK1Freq>
 800f9be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	461d      	mov	r5, r3
 800f9c4:	f04f 0600 	mov.w	r6, #0
 800f9c8:	46a8      	mov	r8, r5
 800f9ca:	46b1      	mov	r9, r6
 800f9cc:	eb18 0308 	adds.w	r3, r8, r8
 800f9d0:	eb49 0409 	adc.w	r4, r9, r9
 800f9d4:	4698      	mov	r8, r3
 800f9d6:	46a1      	mov	r9, r4
 800f9d8:	eb18 0805 	adds.w	r8, r8, r5
 800f9dc:	eb49 0906 	adc.w	r9, r9, r6
 800f9e0:	f04f 0100 	mov.w	r1, #0
 800f9e4:	f04f 0200 	mov.w	r2, #0
 800f9e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f9ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f9f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f9f4:	4688      	mov	r8, r1
 800f9f6:	4691      	mov	r9, r2
 800f9f8:	eb18 0005 	adds.w	r0, r8, r5
 800f9fc:	eb49 0106 	adc.w	r1, r9, r6
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	461d      	mov	r5, r3
 800fa06:	f04f 0600 	mov.w	r6, #0
 800fa0a:	196b      	adds	r3, r5, r5
 800fa0c:	eb46 0406 	adc.w	r4, r6, r6
 800fa10:	461a      	mov	r2, r3
 800fa12:	4623      	mov	r3, r4
 800fa14:	f7f1 f950 	bl	8000cb8 <__aeabi_uldivmod>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	4b47      	ldr	r3, [pc, #284]	; (800fb3c <UART_SetConfig+0x384>)
 800fa20:	fba3 2302 	umull	r2, r3, r3, r2
 800fa24:	095b      	lsrs	r3, r3, #5
 800fa26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	461d      	mov	r5, r3
 800fa2e:	f04f 0600 	mov.w	r6, #0
 800fa32:	46a9      	mov	r9, r5
 800fa34:	46b2      	mov	sl, r6
 800fa36:	eb19 0309 	adds.w	r3, r9, r9
 800fa3a:	eb4a 040a 	adc.w	r4, sl, sl
 800fa3e:	4699      	mov	r9, r3
 800fa40:	46a2      	mov	sl, r4
 800fa42:	eb19 0905 	adds.w	r9, r9, r5
 800fa46:	eb4a 0a06 	adc.w	sl, sl, r6
 800fa4a:	f04f 0100 	mov.w	r1, #0
 800fa4e:	f04f 0200 	mov.w	r2, #0
 800fa52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa5e:	4689      	mov	r9, r1
 800fa60:	4692      	mov	sl, r2
 800fa62:	eb19 0005 	adds.w	r0, r9, r5
 800fa66:	eb4a 0106 	adc.w	r1, sl, r6
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	461d      	mov	r5, r3
 800fa70:	f04f 0600 	mov.w	r6, #0
 800fa74:	196b      	adds	r3, r5, r5
 800fa76:	eb46 0406 	adc.w	r4, r6, r6
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	4623      	mov	r3, r4
 800fa7e:	f7f1 f91b 	bl	8000cb8 <__aeabi_uldivmod>
 800fa82:	4603      	mov	r3, r0
 800fa84:	460c      	mov	r4, r1
 800fa86:	461a      	mov	r2, r3
 800fa88:	4b2c      	ldr	r3, [pc, #176]	; (800fb3c <UART_SetConfig+0x384>)
 800fa8a:	fba3 1302 	umull	r1, r3, r3, r2
 800fa8e:	095b      	lsrs	r3, r3, #5
 800fa90:	2164      	movs	r1, #100	; 0x64
 800fa92:	fb01 f303 	mul.w	r3, r1, r3
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	00db      	lsls	r3, r3, #3
 800fa9a:	3332      	adds	r3, #50	; 0x32
 800fa9c:	4a27      	ldr	r2, [pc, #156]	; (800fb3c <UART_SetConfig+0x384>)
 800fa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800faa2:	095b      	lsrs	r3, r3, #5
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800faaa:	4498      	add	r8, r3
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	461d      	mov	r5, r3
 800fab0:	f04f 0600 	mov.w	r6, #0
 800fab4:	46a9      	mov	r9, r5
 800fab6:	46b2      	mov	sl, r6
 800fab8:	eb19 0309 	adds.w	r3, r9, r9
 800fabc:	eb4a 040a 	adc.w	r4, sl, sl
 800fac0:	4699      	mov	r9, r3
 800fac2:	46a2      	mov	sl, r4
 800fac4:	eb19 0905 	adds.w	r9, r9, r5
 800fac8:	eb4a 0a06 	adc.w	sl, sl, r6
 800facc:	f04f 0100 	mov.w	r1, #0
 800fad0:	f04f 0200 	mov.w	r2, #0
 800fad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fadc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fae0:	4689      	mov	r9, r1
 800fae2:	4692      	mov	sl, r2
 800fae4:	eb19 0005 	adds.w	r0, r9, r5
 800fae8:	eb4a 0106 	adc.w	r1, sl, r6
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	461d      	mov	r5, r3
 800faf2:	f04f 0600 	mov.w	r6, #0
 800faf6:	196b      	adds	r3, r5, r5
 800faf8:	eb46 0406 	adc.w	r4, r6, r6
 800fafc:	461a      	mov	r2, r3
 800fafe:	4623      	mov	r3, r4
 800fb00:	f7f1 f8da 	bl	8000cb8 <__aeabi_uldivmod>
 800fb04:	4603      	mov	r3, r0
 800fb06:	460c      	mov	r4, r1
 800fb08:	461a      	mov	r2, r3
 800fb0a:	4b0c      	ldr	r3, [pc, #48]	; (800fb3c <UART_SetConfig+0x384>)
 800fb0c:	fba3 1302 	umull	r1, r3, r3, r2
 800fb10:	095b      	lsrs	r3, r3, #5
 800fb12:	2164      	movs	r1, #100	; 0x64
 800fb14:	fb01 f303 	mul.w	r3, r1, r3
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	00db      	lsls	r3, r3, #3
 800fb1c:	3332      	adds	r3, #50	; 0x32
 800fb1e:	4a07      	ldr	r2, [pc, #28]	; (800fb3c <UART_SetConfig+0x384>)
 800fb20:	fba2 2303 	umull	r2, r3, r2, r3
 800fb24:	095b      	lsrs	r3, r3, #5
 800fb26:	f003 0207 	and.w	r2, r3, #7
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4442      	add	r2, r8
 800fb30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fb32:	e1b2      	b.n	800fe9a <UART_SetConfig+0x6e2>
 800fb34:	40011000 	.word	0x40011000
 800fb38:	40011400 	.word	0x40011400
 800fb3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4ad7      	ldr	r2, [pc, #860]	; (800fea4 <UART_SetConfig+0x6ec>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d005      	beq.n	800fb56 <UART_SetConfig+0x39e>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4ad6      	ldr	r2, [pc, #856]	; (800fea8 <UART_SetConfig+0x6f0>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	f040 80d1 	bne.w	800fcf8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fb56:	f7fc fa41 	bl	800bfdc <HAL_RCC_GetPCLK2Freq>
 800fb5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	469a      	mov	sl, r3
 800fb60:	f04f 0b00 	mov.w	fp, #0
 800fb64:	46d0      	mov	r8, sl
 800fb66:	46d9      	mov	r9, fp
 800fb68:	eb18 0308 	adds.w	r3, r8, r8
 800fb6c:	eb49 0409 	adc.w	r4, r9, r9
 800fb70:	4698      	mov	r8, r3
 800fb72:	46a1      	mov	r9, r4
 800fb74:	eb18 080a 	adds.w	r8, r8, sl
 800fb78:	eb49 090b 	adc.w	r9, r9, fp
 800fb7c:	f04f 0100 	mov.w	r1, #0
 800fb80:	f04f 0200 	mov.w	r2, #0
 800fb84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fb88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fb8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fb90:	4688      	mov	r8, r1
 800fb92:	4691      	mov	r9, r2
 800fb94:	eb1a 0508 	adds.w	r5, sl, r8
 800fb98:	eb4b 0609 	adc.w	r6, fp, r9
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	4619      	mov	r1, r3
 800fba2:	f04f 0200 	mov.w	r2, #0
 800fba6:	f04f 0300 	mov.w	r3, #0
 800fbaa:	f04f 0400 	mov.w	r4, #0
 800fbae:	0094      	lsls	r4, r2, #2
 800fbb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fbb4:	008b      	lsls	r3, r1, #2
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	4623      	mov	r3, r4
 800fbba:	4628      	mov	r0, r5
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	f7f1 f87b 	bl	8000cb8 <__aeabi_uldivmod>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	460c      	mov	r4, r1
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	4bb8      	ldr	r3, [pc, #736]	; (800feac <UART_SetConfig+0x6f4>)
 800fbca:	fba3 2302 	umull	r2, r3, r3, r2
 800fbce:	095b      	lsrs	r3, r3, #5
 800fbd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	469b      	mov	fp, r3
 800fbd8:	f04f 0c00 	mov.w	ip, #0
 800fbdc:	46d9      	mov	r9, fp
 800fbde:	46e2      	mov	sl, ip
 800fbe0:	eb19 0309 	adds.w	r3, r9, r9
 800fbe4:	eb4a 040a 	adc.w	r4, sl, sl
 800fbe8:	4699      	mov	r9, r3
 800fbea:	46a2      	mov	sl, r4
 800fbec:	eb19 090b 	adds.w	r9, r9, fp
 800fbf0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fbf4:	f04f 0100 	mov.w	r1, #0
 800fbf8:	f04f 0200 	mov.w	r2, #0
 800fbfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc08:	4689      	mov	r9, r1
 800fc0a:	4692      	mov	sl, r2
 800fc0c:	eb1b 0509 	adds.w	r5, fp, r9
 800fc10:	eb4c 060a 	adc.w	r6, ip, sl
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	4619      	mov	r1, r3
 800fc1a:	f04f 0200 	mov.w	r2, #0
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	f04f 0400 	mov.w	r4, #0
 800fc26:	0094      	lsls	r4, r2, #2
 800fc28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc2c:	008b      	lsls	r3, r1, #2
 800fc2e:	461a      	mov	r2, r3
 800fc30:	4623      	mov	r3, r4
 800fc32:	4628      	mov	r0, r5
 800fc34:	4631      	mov	r1, r6
 800fc36:	f7f1 f83f 	bl	8000cb8 <__aeabi_uldivmod>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	460c      	mov	r4, r1
 800fc3e:	461a      	mov	r2, r3
 800fc40:	4b9a      	ldr	r3, [pc, #616]	; (800feac <UART_SetConfig+0x6f4>)
 800fc42:	fba3 1302 	umull	r1, r3, r3, r2
 800fc46:	095b      	lsrs	r3, r3, #5
 800fc48:	2164      	movs	r1, #100	; 0x64
 800fc4a:	fb01 f303 	mul.w	r3, r1, r3
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	011b      	lsls	r3, r3, #4
 800fc52:	3332      	adds	r3, #50	; 0x32
 800fc54:	4a95      	ldr	r2, [pc, #596]	; (800feac <UART_SetConfig+0x6f4>)
 800fc56:	fba2 2303 	umull	r2, r3, r2, r3
 800fc5a:	095b      	lsrs	r3, r3, #5
 800fc5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc60:	4498      	add	r8, r3
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	469b      	mov	fp, r3
 800fc66:	f04f 0c00 	mov.w	ip, #0
 800fc6a:	46d9      	mov	r9, fp
 800fc6c:	46e2      	mov	sl, ip
 800fc6e:	eb19 0309 	adds.w	r3, r9, r9
 800fc72:	eb4a 040a 	adc.w	r4, sl, sl
 800fc76:	4699      	mov	r9, r3
 800fc78:	46a2      	mov	sl, r4
 800fc7a:	eb19 090b 	adds.w	r9, r9, fp
 800fc7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc82:	f04f 0100 	mov.w	r1, #0
 800fc86:	f04f 0200 	mov.w	r2, #0
 800fc8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc96:	4689      	mov	r9, r1
 800fc98:	4692      	mov	sl, r2
 800fc9a:	eb1b 0509 	adds.w	r5, fp, r9
 800fc9e:	eb4c 060a 	adc.w	r6, ip, sl
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	4619      	mov	r1, r3
 800fca8:	f04f 0200 	mov.w	r2, #0
 800fcac:	f04f 0300 	mov.w	r3, #0
 800fcb0:	f04f 0400 	mov.w	r4, #0
 800fcb4:	0094      	lsls	r4, r2, #2
 800fcb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fcba:	008b      	lsls	r3, r1, #2
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	4623      	mov	r3, r4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	4631      	mov	r1, r6
 800fcc4:	f7f0 fff8 	bl	8000cb8 <__aeabi_uldivmod>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	460c      	mov	r4, r1
 800fccc:	461a      	mov	r2, r3
 800fcce:	4b77      	ldr	r3, [pc, #476]	; (800feac <UART_SetConfig+0x6f4>)
 800fcd0:	fba3 1302 	umull	r1, r3, r3, r2
 800fcd4:	095b      	lsrs	r3, r3, #5
 800fcd6:	2164      	movs	r1, #100	; 0x64
 800fcd8:	fb01 f303 	mul.w	r3, r1, r3
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	011b      	lsls	r3, r3, #4
 800fce0:	3332      	adds	r3, #50	; 0x32
 800fce2:	4a72      	ldr	r2, [pc, #456]	; (800feac <UART_SetConfig+0x6f4>)
 800fce4:	fba2 2303 	umull	r2, r3, r2, r3
 800fce8:	095b      	lsrs	r3, r3, #5
 800fcea:	f003 020f 	and.w	r2, r3, #15
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4442      	add	r2, r8
 800fcf4:	609a      	str	r2, [r3, #8]
 800fcf6:	e0d0      	b.n	800fe9a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fcf8:	f7fc f95c 	bl	800bfb4 <HAL_RCC_GetPCLK1Freq>
 800fcfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	469a      	mov	sl, r3
 800fd02:	f04f 0b00 	mov.w	fp, #0
 800fd06:	46d0      	mov	r8, sl
 800fd08:	46d9      	mov	r9, fp
 800fd0a:	eb18 0308 	adds.w	r3, r8, r8
 800fd0e:	eb49 0409 	adc.w	r4, r9, r9
 800fd12:	4698      	mov	r8, r3
 800fd14:	46a1      	mov	r9, r4
 800fd16:	eb18 080a 	adds.w	r8, r8, sl
 800fd1a:	eb49 090b 	adc.w	r9, r9, fp
 800fd1e:	f04f 0100 	mov.w	r1, #0
 800fd22:	f04f 0200 	mov.w	r2, #0
 800fd26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd32:	4688      	mov	r8, r1
 800fd34:	4691      	mov	r9, r2
 800fd36:	eb1a 0508 	adds.w	r5, sl, r8
 800fd3a:	eb4b 0609 	adc.w	r6, fp, r9
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	4619      	mov	r1, r3
 800fd44:	f04f 0200 	mov.w	r2, #0
 800fd48:	f04f 0300 	mov.w	r3, #0
 800fd4c:	f04f 0400 	mov.w	r4, #0
 800fd50:	0094      	lsls	r4, r2, #2
 800fd52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd56:	008b      	lsls	r3, r1, #2
 800fd58:	461a      	mov	r2, r3
 800fd5a:	4623      	mov	r3, r4
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	4631      	mov	r1, r6
 800fd60:	f7f0 ffaa 	bl	8000cb8 <__aeabi_uldivmod>
 800fd64:	4603      	mov	r3, r0
 800fd66:	460c      	mov	r4, r1
 800fd68:	461a      	mov	r2, r3
 800fd6a:	4b50      	ldr	r3, [pc, #320]	; (800feac <UART_SetConfig+0x6f4>)
 800fd6c:	fba3 2302 	umull	r2, r3, r3, r2
 800fd70:	095b      	lsrs	r3, r3, #5
 800fd72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	469b      	mov	fp, r3
 800fd7a:	f04f 0c00 	mov.w	ip, #0
 800fd7e:	46d9      	mov	r9, fp
 800fd80:	46e2      	mov	sl, ip
 800fd82:	eb19 0309 	adds.w	r3, r9, r9
 800fd86:	eb4a 040a 	adc.w	r4, sl, sl
 800fd8a:	4699      	mov	r9, r3
 800fd8c:	46a2      	mov	sl, r4
 800fd8e:	eb19 090b 	adds.w	r9, r9, fp
 800fd92:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fd96:	f04f 0100 	mov.w	r1, #0
 800fd9a:	f04f 0200 	mov.w	r2, #0
 800fd9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fda2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fda6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdaa:	4689      	mov	r9, r1
 800fdac:	4692      	mov	sl, r2
 800fdae:	eb1b 0509 	adds.w	r5, fp, r9
 800fdb2:	eb4c 060a 	adc.w	r6, ip, sl
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	f04f 0200 	mov.w	r2, #0
 800fdc0:	f04f 0300 	mov.w	r3, #0
 800fdc4:	f04f 0400 	mov.w	r4, #0
 800fdc8:	0094      	lsls	r4, r2, #2
 800fdca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fdce:	008b      	lsls	r3, r1, #2
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	f7f0 ff6e 	bl	8000cb8 <__aeabi_uldivmod>
 800fddc:	4603      	mov	r3, r0
 800fdde:	460c      	mov	r4, r1
 800fde0:	461a      	mov	r2, r3
 800fde2:	4b32      	ldr	r3, [pc, #200]	; (800feac <UART_SetConfig+0x6f4>)
 800fde4:	fba3 1302 	umull	r1, r3, r3, r2
 800fde8:	095b      	lsrs	r3, r3, #5
 800fdea:	2164      	movs	r1, #100	; 0x64
 800fdec:	fb01 f303 	mul.w	r3, r1, r3
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	3332      	adds	r3, #50	; 0x32
 800fdf6:	4a2d      	ldr	r2, [pc, #180]	; (800feac <UART_SetConfig+0x6f4>)
 800fdf8:	fba2 2303 	umull	r2, r3, r2, r3
 800fdfc:	095b      	lsrs	r3, r3, #5
 800fdfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe02:	4498      	add	r8, r3
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	469b      	mov	fp, r3
 800fe08:	f04f 0c00 	mov.w	ip, #0
 800fe0c:	46d9      	mov	r9, fp
 800fe0e:	46e2      	mov	sl, ip
 800fe10:	eb19 0309 	adds.w	r3, r9, r9
 800fe14:	eb4a 040a 	adc.w	r4, sl, sl
 800fe18:	4699      	mov	r9, r3
 800fe1a:	46a2      	mov	sl, r4
 800fe1c:	eb19 090b 	adds.w	r9, r9, fp
 800fe20:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fe24:	f04f 0100 	mov.w	r1, #0
 800fe28:	f04f 0200 	mov.w	r2, #0
 800fe2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe38:	4689      	mov	r9, r1
 800fe3a:	4692      	mov	sl, r2
 800fe3c:	eb1b 0509 	adds.w	r5, fp, r9
 800fe40:	eb4c 060a 	adc.w	r6, ip, sl
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	f04f 0200 	mov.w	r2, #0
 800fe4e:	f04f 0300 	mov.w	r3, #0
 800fe52:	f04f 0400 	mov.w	r4, #0
 800fe56:	0094      	lsls	r4, r2, #2
 800fe58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe5c:	008b      	lsls	r3, r1, #2
 800fe5e:	461a      	mov	r2, r3
 800fe60:	4623      	mov	r3, r4
 800fe62:	4628      	mov	r0, r5
 800fe64:	4631      	mov	r1, r6
 800fe66:	f7f0 ff27 	bl	8000cb8 <__aeabi_uldivmod>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	460c      	mov	r4, r1
 800fe6e:	461a      	mov	r2, r3
 800fe70:	4b0e      	ldr	r3, [pc, #56]	; (800feac <UART_SetConfig+0x6f4>)
 800fe72:	fba3 1302 	umull	r1, r3, r3, r2
 800fe76:	095b      	lsrs	r3, r3, #5
 800fe78:	2164      	movs	r1, #100	; 0x64
 800fe7a:	fb01 f303 	mul.w	r3, r1, r3
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	011b      	lsls	r3, r3, #4
 800fe82:	3332      	adds	r3, #50	; 0x32
 800fe84:	4a09      	ldr	r2, [pc, #36]	; (800feac <UART_SetConfig+0x6f4>)
 800fe86:	fba2 2303 	umull	r2, r3, r2, r3
 800fe8a:	095b      	lsrs	r3, r3, #5
 800fe8c:	f003 020f 	and.w	r2, r3, #15
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4442      	add	r2, r8
 800fe96:	609a      	str	r2, [r3, #8]
}
 800fe98:	e7ff      	b.n	800fe9a <UART_SetConfig+0x6e2>
 800fe9a:	bf00      	nop
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea4:	40011000 	.word	0x40011000
 800fea8:	40011400 	.word	0x40011400
 800feac:	51eb851f 	.word	0x51eb851f

0800feb0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800feb0:	b084      	sub	sp, #16
 800feb2:	b480      	push	{r7}
 800feb4:	b085      	sub	sp, #20
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
 800feba:	f107 001c 	add.w	r0, r7, #28
 800febe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fec6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fec8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800feca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fece:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fed2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800fed6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800feda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	4313      	orrs	r3, r2
 800fee0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800feea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	431a      	orrs	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	b004      	add	sp, #16
 800ff04:	4770      	bx	lr

0800ff06 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ff06:	b480      	push	{r7}
 800ff08:	b083      	sub	sp, #12
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b082      	sub	sp, #8
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2203      	movs	r2, #3
 800ff4e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ff50:	2002      	movs	r0, #2
 800ff52:	f7f9 fbdd 	bl	8009710 <HAL_Delay>
  
  return HAL_OK;
 800ff56:	2300      	movs	r3, #0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f003 0303 	and.w	r3, r3, #3
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b085      	sub	sp, #20
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ffa0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ffa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ffb6:	f023 030f 	bic.w	r3, r3, #15
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	431a      	orrs	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ffc2:	2300      	movs	r3, #0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3714      	adds	r7, #20
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	b2db      	uxtb	r3, r3
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	370c      	adds	r7, #12
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr

0800ffea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ffea:	b480      	push	{r7}
 800ffec:	b085      	sub	sp, #20
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
 800fff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	3314      	adds	r3, #20
 800fff8:	461a      	mov	r2, r3
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	4413      	add	r3, r2
 800fffe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
}  
 8010004:	4618      	mov	r0, r3
 8010006:	3714      	adds	r7, #20
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	685a      	ldr	r2, [r3, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010036:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801003c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010042:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	4313      	orrs	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	431a      	orrs	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801005a:	2300      	movs	r3, #0

}
 801005c:	4618      	mov	r0, r3
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b088      	sub	sp, #32
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010076:	2310      	movs	r3, #16
 8010078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801007a:	2340      	movs	r3, #64	; 0x40
 801007c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010088:	f107 0308 	add.w	r3, r7, #8
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff ff74 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010094:	f241 3288 	movw	r2, #5000	; 0x1388
 8010098:	2110      	movs	r1, #16
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fa40 	bl	8010520 <SDMMC_GetCmdResp1>
 80100a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100a2:	69fb      	ldr	r3, [r7, #28]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3720      	adds	r7, #32
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b088      	sub	sp, #32
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80100ba:	2311      	movs	r3, #17
 80100bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100be:	2340      	movs	r3, #64	; 0x40
 80100c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100c2:	2300      	movs	r3, #0
 80100c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100cc:	f107 0308 	add.w	r3, r7, #8
 80100d0:	4619      	mov	r1, r3
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7ff ff52 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80100d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80100dc:	2111      	movs	r1, #17
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fa1e 	bl	8010520 <SDMMC_GetCmdResp1>
 80100e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100e6:	69fb      	ldr	r3, [r7, #28]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3720      	adds	r7, #32
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b088      	sub	sp, #32
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80100fe:	2312      	movs	r3, #18
 8010100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010102:	2340      	movs	r3, #64	; 0x40
 8010104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010106:	2300      	movs	r3, #0
 8010108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801010a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801010e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010110:	f107 0308 	add.w	r3, r7, #8
 8010114:	4619      	mov	r1, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f7ff ff30 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801011c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010120:	2112      	movs	r1, #18
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 f9fc 	bl	8010520 <SDMMC_GetCmdResp1>
 8010128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801012a:	69fb      	ldr	r3, [r7, #28]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3720      	adds	r7, #32
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b088      	sub	sp, #32
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010142:	2318      	movs	r3, #24
 8010144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010146:	2340      	movs	r3, #64	; 0x40
 8010148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801014a:	2300      	movs	r3, #0
 801014c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801014e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010152:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010154:	f107 0308 	add.w	r3, r7, #8
 8010158:	4619      	mov	r1, r3
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff ff0e 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010160:	f241 3288 	movw	r2, #5000	; 0x1388
 8010164:	2118      	movs	r1, #24
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f9da 	bl	8010520 <SDMMC_GetCmdResp1>
 801016c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801016e:	69fb      	ldr	r3, [r7, #28]
}
 8010170:	4618      	mov	r0, r3
 8010172:	3720      	adds	r7, #32
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b088      	sub	sp, #32
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010186:	2319      	movs	r3, #25
 8010188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801018a:	2340      	movs	r3, #64	; 0x40
 801018c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801018e:	2300      	movs	r3, #0
 8010190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010198:	f107 0308 	add.w	r3, r7, #8
 801019c:	4619      	mov	r1, r3
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7ff feec 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80101a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80101a8:	2119      	movs	r1, #25
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f9b8 	bl	8010520 <SDMMC_GetCmdResp1>
 80101b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101b2:	69fb      	ldr	r3, [r7, #28]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3720      	adds	r7, #32
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b088      	sub	sp, #32
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80101c4:	2300      	movs	r3, #0
 80101c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80101c8:	230c      	movs	r3, #12
 80101ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101cc:	2340      	movs	r3, #64	; 0x40
 80101ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101d0:	2300      	movs	r3, #0
 80101d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101da:	f107 0308 	add.w	r3, r7, #8
 80101de:	4619      	mov	r1, r3
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f7ff fecb 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80101e6:	4a05      	ldr	r2, [pc, #20]	; (80101fc <SDMMC_CmdStopTransfer+0x40>)
 80101e8:	210c      	movs	r1, #12
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 f998 	bl	8010520 <SDMMC_GetCmdResp1>
 80101f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101f2:	69fb      	ldr	r3, [r7, #28]
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3720      	adds	r7, #32
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	05f5e100 	.word	0x05f5e100

08010200 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08a      	sub	sp, #40	; 0x28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010210:	2307      	movs	r3, #7
 8010212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010214:	2340      	movs	r3, #64	; 0x40
 8010216:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010218:	2300      	movs	r3, #0
 801021a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010220:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	4619      	mov	r1, r3
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff fea7 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801022e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010232:	2107      	movs	r1, #7
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f000 f973 	bl	8010520 <SDMMC_GetCmdResp1>
 801023a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801023e:	4618      	mov	r0, r3
 8010240:	3728      	adds	r7, #40	; 0x28
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010246:	b580      	push	{r7, lr}
 8010248:	b088      	sub	sp, #32
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801024e:	2300      	movs	r3, #0
 8010250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010252:	2300      	movs	r3, #0
 8010254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010256:	2300      	movs	r3, #0
 8010258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801025a:	2300      	movs	r3, #0
 801025c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010264:	f107 0308 	add.w	r3, r7, #8
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff fe86 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 f92d 	bl	80104d0 <SDMMC_GetCmdError>
 8010276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010278:	69fb      	ldr	r3, [r7, #28]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3720      	adds	r7, #32
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b088      	sub	sp, #32
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801028a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801028e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010290:	2308      	movs	r3, #8
 8010292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010294:	2340      	movs	r3, #64	; 0x40
 8010296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010298:	2300      	movs	r3, #0
 801029a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102a2:	f107 0308 	add.w	r3, r7, #8
 80102a6:	4619      	mov	r1, r3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7ff fe67 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 fb16 	bl	80108e0 <SDMMC_GetCmdResp7>
 80102b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102b6:	69fb      	ldr	r3, [r7, #28]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3720      	adds	r7, #32
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80102ce:	2337      	movs	r3, #55	; 0x37
 80102d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102d2:	2340      	movs	r3, #64	; 0x40
 80102d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102d6:	2300      	movs	r3, #0
 80102d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102e0:	f107 0308 	add.w	r3, r7, #8
 80102e4:	4619      	mov	r1, r3
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff fe48 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80102ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80102f0:	2137      	movs	r1, #55	; 0x37
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 f914 	bl	8010520 <SDMMC_GetCmdResp1>
 80102f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102fa:	69fb      	ldr	r3, [r7, #28]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3720      	adds	r7, #32
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b088      	sub	sp, #32
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801031a:	2329      	movs	r3, #41	; 0x29
 801031c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801031e:	2340      	movs	r3, #64	; 0x40
 8010320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010322:	2300      	movs	r3, #0
 8010324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801032a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801032c:	f107 0308 	add.w	r3, r7, #8
 8010330:	4619      	mov	r1, r3
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f7ff fe22 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fa23 	bl	8010784 <SDMMC_GetCmdResp3>
 801033e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010340:	69fb      	ldr	r3, [r7, #28]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3720      	adds	r7, #32
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b088      	sub	sp, #32
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
 8010352:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010358:	2306      	movs	r3, #6
 801035a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801035c:	2340      	movs	r3, #64	; 0x40
 801035e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010360:	2300      	movs	r3, #0
 8010362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010368:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801036a:	f107 0308 	add.w	r3, r7, #8
 801036e:	4619      	mov	r1, r3
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7ff fe03 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010376:	f241 3288 	movw	r2, #5000	; 0x1388
 801037a:	2106      	movs	r1, #6
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 f8cf 	bl	8010520 <SDMMC_GetCmdResp1>
 8010382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010384:	69fb      	ldr	r3, [r7, #28]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3720      	adds	r7, #32
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b088      	sub	sp, #32
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010396:	2300      	movs	r3, #0
 8010398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801039a:	2333      	movs	r3, #51	; 0x33
 801039c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801039e:	2340      	movs	r3, #64	; 0x40
 80103a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103a2:	2300      	movs	r3, #0
 80103a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103ac:	f107 0308 	add.w	r3, r7, #8
 80103b0:	4619      	mov	r1, r3
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7ff fde2 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80103b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103bc:	2133      	movs	r1, #51	; 0x33
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 f8ae 	bl	8010520 <SDMMC_GetCmdResp1>
 80103c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103c6:	69fb      	ldr	r3, [r7, #28]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3720      	adds	r7, #32
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b088      	sub	sp, #32
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80103d8:	2300      	movs	r3, #0
 80103da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80103dc:	2302      	movs	r3, #2
 80103de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80103e0:	23c0      	movs	r3, #192	; 0xc0
 80103e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103e4:	2300      	movs	r3, #0
 80103e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103ee:	f107 0308 	add.w	r3, r7, #8
 80103f2:	4619      	mov	r1, r3
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7ff fdc1 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 f97c 	bl	80106f8 <SDMMC_GetCmdResp2>
 8010400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010402:	69fb      	ldr	r3, [r7, #28]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3720      	adds	r7, #32
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b088      	sub	sp, #32
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801041a:	2309      	movs	r3, #9
 801041c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801041e:	23c0      	movs	r3, #192	; 0xc0
 8010420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010422:	2300      	movs	r3, #0
 8010424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801042a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff fda2 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 f95d 	bl	80106f8 <SDMMC_GetCmdResp2>
 801043e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010440:	69fb      	ldr	r3, [r7, #28]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3720      	adds	r7, #32
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b088      	sub	sp, #32
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010454:	2300      	movs	r3, #0
 8010456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010458:	2303      	movs	r3, #3
 801045a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801045c:	2340      	movs	r3, #64	; 0x40
 801045e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010460:	2300      	movs	r3, #0
 8010462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010468:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801046a:	f107 0308 	add.w	r3, r7, #8
 801046e:	4619      	mov	r1, r3
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff fd83 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	2103      	movs	r1, #3
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f9bc 	bl	80107f8 <SDMMC_GetCmdResp6>
 8010480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010482:	69fb      	ldr	r3, [r7, #28]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3720      	adds	r7, #32
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b088      	sub	sp, #32
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801049a:	230d      	movs	r3, #13
 801049c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801049e:	2340      	movs	r3, #64	; 0x40
 80104a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104ac:	f107 0308 	add.w	r3, r7, #8
 80104b0:	4619      	mov	r1, r3
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f7ff fd62 	bl	800ff7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80104b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80104bc:	210d      	movs	r1, #13
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 f82e 	bl	8010520 <SDMMC_GetCmdResp1>
 80104c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c6:	69fb      	ldr	r3, [r7, #28]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3720      	adds	r7, #32
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80104d0:	b490      	push	{r4, r7}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80104d8:	4b0f      	ldr	r3, [pc, #60]	; (8010518 <SDMMC_GetCmdError+0x48>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a0f      	ldr	r2, [pc, #60]	; (801051c <SDMMC_GetCmdError+0x4c>)
 80104de:	fba2 2303 	umull	r2, r3, r2, r3
 80104e2:	0a5b      	lsrs	r3, r3, #9
 80104e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80104ec:	4623      	mov	r3, r4
 80104ee:	1e5c      	subs	r4, r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d102      	bne.n	80104fa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80104f8:	e009      	b.n	801050e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010502:	2b00      	cmp	r3, #0
 8010504:	d0f2      	beq.n	80104ec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	22c5      	movs	r2, #197	; 0xc5
 801050a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bc90      	pop	{r4, r7}
 8010516:	4770      	bx	lr
 8010518:	20000000 	.word	0x20000000
 801051c:	10624dd3 	.word	0x10624dd3

08010520 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010520:	b590      	push	{r4, r7, lr}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	460b      	mov	r3, r1
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801052e:	4b6f      	ldr	r3, [pc, #444]	; (80106ec <SDMMC_GetCmdResp1+0x1cc>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a6f      	ldr	r2, [pc, #444]	; (80106f0 <SDMMC_GetCmdResp1+0x1d0>)
 8010534:	fba2 2303 	umull	r2, r3, r2, r3
 8010538:	0a5b      	lsrs	r3, r3, #9
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010540:	4623      	mov	r3, r4
 8010542:	1e5c      	subs	r4, r3, #1
 8010544:	2b00      	cmp	r3, #0
 8010546:	d102      	bne.n	801054e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801054c:	e0c9      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010552:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801055a:	2b00      	cmp	r3, #0
 801055c:	d0f0      	beq.n	8010540 <SDMMC_GetCmdResp1+0x20>
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1eb      	bne.n	8010540 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801056c:	f003 0304 	and.w	r3, r3, #4
 8010570:	2b00      	cmp	r3, #0
 8010572:	d004      	beq.n	801057e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2204      	movs	r2, #4
 8010578:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801057a:	2304      	movs	r3, #4
 801057c:	e0b1      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d004      	beq.n	8010594 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2201      	movs	r2, #1
 801058e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010590:	2301      	movs	r3, #1
 8010592:	e0a6      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	22c5      	movs	r2, #197	; 0xc5
 8010598:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f7ff fd18 	bl	800ffd0 <SDIO_GetCommandResponse>
 80105a0:	4603      	mov	r3, r0
 80105a2:	461a      	mov	r2, r3
 80105a4:	7afb      	ldrb	r3, [r7, #11]
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d001      	beq.n	80105ae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e099      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80105ae:	2100      	movs	r1, #0
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f7ff fd1a 	bl	800ffea <SDIO_GetResponse>
 80105b6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80105b8:	693a      	ldr	r2, [r7, #16]
 80105ba:	4b4e      	ldr	r3, [pc, #312]	; (80106f4 <SDMMC_GetCmdResp1+0x1d4>)
 80105bc:	4013      	ands	r3, r2
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d101      	bne.n	80105c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80105c2:	2300      	movs	r3, #0
 80105c4:	e08d      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	da02      	bge.n	80105d2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80105cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80105d0:	e087      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80105dc:	2340      	movs	r3, #64	; 0x40
 80105de:	e080      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d001      	beq.n	80105ee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80105ea:	2380      	movs	r3, #128	; 0x80
 80105ec:	e079      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80105f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105fc:	e071      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010604:	2b00      	cmp	r3, #0
 8010606:	d002      	beq.n	801060e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010608:	f44f 7300 	mov.w	r3, #512	; 0x200
 801060c:	e069      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061c:	e061      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010624:	2b00      	cmp	r3, #0
 8010626:	d002      	beq.n	801062e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801062c:	e059      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d002      	beq.n	801063e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801063c:	e051      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010644:	2b00      	cmp	r3, #0
 8010646:	d002      	beq.n	801064e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801064c:	e049      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010658:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801065c:	e041      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010664:	2b00      	cmp	r3, #0
 8010666:	d002      	beq.n	801066e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801066c:	e039      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010674:	2b00      	cmp	r3, #0
 8010676:	d002      	beq.n	801067e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801067c:	e031      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010688:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801068c:	e029      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010694:	2b00      	cmp	r3, #0
 8010696:	d002      	beq.n	801069e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010698:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801069c:	e021      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d002      	beq.n	80106ae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80106a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80106ac:	e019      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d002      	beq.n	80106be <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80106b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80106bc:	e011      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d002      	beq.n	80106ce <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80106c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80106cc:	e009      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	f003 0308 	and.w	r3, r3, #8
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80106d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80106dc:	e001      	b.n	80106e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80106de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	371c      	adds	r7, #28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd90      	pop	{r4, r7, pc}
 80106ea:	bf00      	nop
 80106ec:	20000000 	.word	0x20000000
 80106f0:	10624dd3 	.word	0x10624dd3
 80106f4:	fdffe008 	.word	0xfdffe008

080106f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80106f8:	b490      	push	{r4, r7}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010700:	4b1e      	ldr	r3, [pc, #120]	; (801077c <SDMMC_GetCmdResp2+0x84>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4a1e      	ldr	r2, [pc, #120]	; (8010780 <SDMMC_GetCmdResp2+0x88>)
 8010706:	fba2 2303 	umull	r2, r3, r2, r3
 801070a:	0a5b      	lsrs	r3, r3, #9
 801070c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010710:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010714:	4623      	mov	r3, r4
 8010716:	1e5c      	subs	r4, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d102      	bne.n	8010722 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801071c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010720:	e026      	b.n	8010770 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010726:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801072e:	2b00      	cmp	r3, #0
 8010730:	d0f0      	beq.n	8010714 <SDMMC_GetCmdResp2+0x1c>
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1eb      	bne.n	8010714 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010740:	f003 0304 	and.w	r3, r3, #4
 8010744:	2b00      	cmp	r3, #0
 8010746:	d004      	beq.n	8010752 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2204      	movs	r2, #4
 801074c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801074e:	2304      	movs	r3, #4
 8010750:	e00e      	b.n	8010770 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010756:	f003 0301 	and.w	r3, r3, #1
 801075a:	2b00      	cmp	r3, #0
 801075c:	d004      	beq.n	8010768 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2201      	movs	r2, #1
 8010762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010764:	2301      	movs	r3, #1
 8010766:	e003      	b.n	8010770 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	22c5      	movs	r2, #197	; 0xc5
 801076c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bc90      	pop	{r4, r7}
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	20000000 	.word	0x20000000
 8010780:	10624dd3 	.word	0x10624dd3

08010784 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010784:	b490      	push	{r4, r7}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801078c:	4b18      	ldr	r3, [pc, #96]	; (80107f0 <SDMMC_GetCmdResp3+0x6c>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4a18      	ldr	r2, [pc, #96]	; (80107f4 <SDMMC_GetCmdResp3+0x70>)
 8010792:	fba2 2303 	umull	r2, r3, r2, r3
 8010796:	0a5b      	lsrs	r3, r3, #9
 8010798:	f241 3288 	movw	r2, #5000	; 0x1388
 801079c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107a0:	4623      	mov	r3, r4
 80107a2:	1e5c      	subs	r4, r3, #1
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d102      	bne.n	80107ae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107ac:	e01b      	b.n	80107e6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d0f0      	beq.n	80107a0 <SDMMC_GetCmdResp3+0x1c>
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1eb      	bne.n	80107a0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107cc:	f003 0304 	and.w	r3, r3, #4
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d004      	beq.n	80107de <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2204      	movs	r2, #4
 80107d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107da:	2304      	movs	r3, #4
 80107dc:	e003      	b.n	80107e6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	22c5      	movs	r2, #197	; 0xc5
 80107e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bc90      	pop	{r4, r7}
 80107ee:	4770      	bx	lr
 80107f0:	20000000 	.word	0x20000000
 80107f4:	10624dd3 	.word	0x10624dd3

080107f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80107f8:	b590      	push	{r4, r7, lr}
 80107fa:	b087      	sub	sp, #28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	460b      	mov	r3, r1
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010806:	4b34      	ldr	r3, [pc, #208]	; (80108d8 <SDMMC_GetCmdResp6+0xe0>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a34      	ldr	r2, [pc, #208]	; (80108dc <SDMMC_GetCmdResp6+0xe4>)
 801080c:	fba2 2303 	umull	r2, r3, r2, r3
 8010810:	0a5b      	lsrs	r3, r3, #9
 8010812:	f241 3288 	movw	r2, #5000	; 0x1388
 8010816:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801081a:	4623      	mov	r3, r4
 801081c:	1e5c      	subs	r4, r3, #1
 801081e:	2b00      	cmp	r3, #0
 8010820:	d102      	bne.n	8010828 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010822:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010826:	e052      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801082c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010834:	2b00      	cmp	r3, #0
 8010836:	d0f0      	beq.n	801081a <SDMMC_GetCmdResp6+0x22>
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1eb      	bne.n	801081a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010846:	f003 0304 	and.w	r3, r3, #4
 801084a:	2b00      	cmp	r3, #0
 801084c:	d004      	beq.n	8010858 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2204      	movs	r2, #4
 8010852:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010854:	2304      	movs	r3, #4
 8010856:	e03a      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	2b00      	cmp	r3, #0
 8010862:	d004      	beq.n	801086e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2201      	movs	r2, #1
 8010868:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801086a:	2301      	movs	r3, #1
 801086c:	e02f      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f7ff fbae 	bl	800ffd0 <SDIO_GetCommandResponse>
 8010874:	4603      	mov	r3, r0
 8010876:	461a      	mov	r2, r3
 8010878:	7afb      	ldrb	r3, [r7, #11]
 801087a:	4293      	cmp	r3, r2
 801087c:	d001      	beq.n	8010882 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801087e:	2301      	movs	r3, #1
 8010880:	e025      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	22c5      	movs	r2, #197	; 0xc5
 8010886:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010888:	2100      	movs	r1, #0
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f7ff fbad 	bl	800ffea <SDIO_GetResponse>
 8010890:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	0c1b      	lsrs	r3, r3, #16
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80108a6:	2300      	movs	r3, #0
 80108a8:	e011      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d002      	beq.n	80108ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108b8:	e009      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108c8:	e001      	b.n	80108ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80108ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	371c      	adds	r7, #28
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd90      	pop	{r4, r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20000000 	.word	0x20000000
 80108dc:	10624dd3 	.word	0x10624dd3

080108e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80108e0:	b490      	push	{r4, r7}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108e8:	4b21      	ldr	r3, [pc, #132]	; (8010970 <SDMMC_GetCmdResp7+0x90>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a21      	ldr	r2, [pc, #132]	; (8010974 <SDMMC_GetCmdResp7+0x94>)
 80108ee:	fba2 2303 	umull	r2, r3, r2, r3
 80108f2:	0a5b      	lsrs	r3, r3, #9
 80108f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80108fc:	4623      	mov	r3, r4
 80108fe:	1e5c      	subs	r4, r3, #1
 8010900:	2b00      	cmp	r3, #0
 8010902:	d102      	bne.n	801090a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010908:	e02c      	b.n	8010964 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801090e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010916:	2b00      	cmp	r3, #0
 8010918:	d0f0      	beq.n	80108fc <SDMMC_GetCmdResp7+0x1c>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1eb      	bne.n	80108fc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010928:	f003 0304 	and.w	r3, r3, #4
 801092c:	2b00      	cmp	r3, #0
 801092e:	d004      	beq.n	801093a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2204      	movs	r2, #4
 8010934:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010936:	2304      	movs	r3, #4
 8010938:	e014      	b.n	8010964 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801093e:	f003 0301 	and.w	r3, r3, #1
 8010942:	2b00      	cmp	r3, #0
 8010944:	d004      	beq.n	8010950 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801094c:	2301      	movs	r3, #1
 801094e:	e009      	b.n	8010964 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2240      	movs	r2, #64	; 0x40
 8010960:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010962:	2300      	movs	r3, #0
  
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bc90      	pop	{r4, r7}
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	20000000 	.word	0x20000000
 8010974:	10624dd3 	.word	0x10624dd3

08010978 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801097c:	4904      	ldr	r1, [pc, #16]	; (8010990 <MX_FATFS_Init+0x18>)
 801097e:	4805      	ldr	r0, [pc, #20]	; (8010994 <MX_FATFS_Init+0x1c>)
 8010980:	f003 fb9c 	bl	80140bc <FATFS_LinkDriver>
 8010984:	4603      	mov	r3, r0
 8010986:	461a      	mov	r2, r3
 8010988:	4b03      	ldr	r3, [pc, #12]	; (8010998 <MX_FATFS_Init+0x20>)
 801098a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801098c:	bf00      	nop
 801098e:	bd80      	pop	{r7, pc}
 8010990:	20044c18 	.word	0x20044c18
 8010994:	08019a10 	.word	0x08019a10
 8010998:	20044c14 	.word	0x20044c14

0801099c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80109a2:	2300      	movs	r3, #0
 80109a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80109a6:	f000 f896 	bl	8010ad6 <BSP_SD_IsDetected>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d001      	beq.n	80109b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80109b0:	2301      	movs	r3, #1
 80109b2:	e012      	b.n	80109da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80109b4:	480b      	ldr	r0, [pc, #44]	; (80109e4 <BSP_SD_Init+0x48>)
 80109b6:	f7fb ffa5 	bl	800c904 <HAL_SD_Init>
 80109ba:	4603      	mov	r3, r0
 80109bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80109be:	79fb      	ldrb	r3, [r7, #7]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d109      	bne.n	80109d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80109c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80109c8:	4806      	ldr	r0, [pc, #24]	; (80109e4 <BSP_SD_Init+0x48>)
 80109ca:	f7fc fd4f 	bl	800d46c <HAL_SD_ConfigWideBusOperation>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80109d4:	2301      	movs	r3, #1
 80109d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80109d8:	79fb      	ldrb	r3, [r7, #7]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3708      	adds	r7, #8
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	20044a14 	.word	0x20044a14

080109e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	68f9      	ldr	r1, [r7, #12]
 80109fe:	4806      	ldr	r0, [pc, #24]	; (8010a18 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010a00:	f7fc f810 	bl	800ca24 <HAL_SD_ReadBlocks_DMA>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d001      	beq.n	8010a0e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3718      	adds	r7, #24
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	20044a14 	.word	0x20044a14

08010a1c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	68ba      	ldr	r2, [r7, #8]
 8010a30:	68f9      	ldr	r1, [r7, #12]
 8010a32:	4806      	ldr	r0, [pc, #24]	; (8010a4c <BSP_SD_WriteBlocks_DMA+0x30>)
 8010a34:	f7fc f8de 	bl	800cbf4 <HAL_SD_WriteBlocks_DMA>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d001      	beq.n	8010a42 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3718      	adds	r7, #24
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	20044a14 	.word	0x20044a14

08010a50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010a54:	4805      	ldr	r0, [pc, #20]	; (8010a6c <BSP_SD_GetCardState+0x1c>)
 8010a56:	f7fc fd85 	bl	800d564 <HAL_SD_GetCardState>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b04      	cmp	r3, #4
 8010a5e:	bf14      	ite	ne
 8010a60:	2301      	movne	r3, #1
 8010a62:	2300      	moveq	r3, #0
 8010a64:	b2db      	uxtb	r3, r3
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	20044a14 	.word	0x20044a14

08010a70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	4803      	ldr	r0, [pc, #12]	; (8010a88 <BSP_SD_GetCardInfo+0x18>)
 8010a7c:	f7fc fcca 	bl	800d414 <HAL_SD_GetCardInfo>
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	20044a14 	.word	0x20044a14

08010a8c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010a94:	f000 f818 	bl	8010ac8 <BSP_SD_AbortCallback>
}
 8010a98:	bf00      	nop
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010aa8:	f000 f9a8 	bl	8010dfc <BSP_SD_WriteCpltCallback>
}
 8010aac:	bf00      	nop
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010abc:	f000 f9aa 	bl	8010e14 <BSP_SD_ReadCpltCallback>
}
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	af00      	add	r7, sp, #0

}
 8010acc:	bf00      	nop
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b082      	sub	sp, #8
 8010ada:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010adc:	2301      	movs	r3, #1
 8010ade:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010ae0:	f000 f80c 	bl	8010afc <BSP_PlatformIsDetected>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d101      	bne.n	8010aee <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010aea:	2300      	movs	r3, #0
 8010aec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010aee:	79fb      	ldrb	r3, [r7, #7]
 8010af0:	b2db      	uxtb	r3, r3
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
	...

08010afc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010b02:	2301      	movs	r3, #1
 8010b04:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010b0a:	4806      	ldr	r0, [pc, #24]	; (8010b24 <BSP_PlatformIsDetected+0x28>)
 8010b0c:	f7fa f87e 	bl	800ac0c <HAL_GPIO_ReadPin>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010b16:	2300      	movs	r3, #0
 8010b18:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	40020000 	.word	0x40020000

08010b28 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010b30:	f7f8 fde2 	bl	80096f8 <HAL_GetTick>
 8010b34:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010b36:	e006      	b.n	8010b46 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b38:	f7ff ff8a 	bl	8010a50 <BSP_SD_GetCardState>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d101      	bne.n	8010b46 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	e009      	b.n	8010b5a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010b46:	f7f8 fdd7 	bl	80096f8 <HAL_GetTick>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d8f0      	bhi.n	8010b38 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
	...

08010b64 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010b6e:	4b0b      	ldr	r3, [pc, #44]	; (8010b9c <SD_CheckStatus+0x38>)
 8010b70:	2201      	movs	r2, #1
 8010b72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010b74:	f7ff ff6c 	bl	8010a50 <BSP_SD_GetCardState>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d107      	bne.n	8010b8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010b7e:	4b07      	ldr	r3, [pc, #28]	; (8010b9c <SD_CheckStatus+0x38>)
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	f023 0301 	bic.w	r3, r3, #1
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	4b04      	ldr	r3, [pc, #16]	; (8010b9c <SD_CheckStatus+0x38>)
 8010b8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010b8e:	4b03      	ldr	r3, [pc, #12]	; (8010b9c <SD_CheckStatus+0x38>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	b2db      	uxtb	r3, r3
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	20000009 	.word	0x20000009

08010ba0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010baa:	f7ff fef7 	bl	801099c <BSP_SD_Init>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d107      	bne.n	8010bc4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010bb4:	79fb      	ldrb	r3, [r7, #7]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff ffd4 	bl	8010b64 <SD_CheckStatus>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	4b04      	ldr	r3, [pc, #16]	; (8010bd4 <SD_initialize+0x34>)
 8010bc2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010bc4:	4b03      	ldr	r3, [pc, #12]	; (8010bd4 <SD_initialize+0x34>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	b2db      	uxtb	r3, r3
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20000009 	.word	0x20000009

08010bd8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010be2:	79fb      	ldrb	r3, [r7, #7]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7ff ffbd 	bl	8010b64 <SD_CheckStatus>
 8010bea:	4603      	mov	r3, r0
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b086      	sub	sp, #24
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	60b9      	str	r1, [r7, #8]
 8010bfc:	607a      	str	r2, [r7, #4]
 8010bfe:	603b      	str	r3, [r7, #0]
 8010c00:	4603      	mov	r3, r0
 8010c02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010c08:	f247 5030 	movw	r0, #30000	; 0x7530
 8010c0c:	f7ff ff8c 	bl	8010b28 <SD_CheckStatusWithTimeout>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	da01      	bge.n	8010c1a <SD_read+0x26>
  {
    return res;
 8010c16:	7dfb      	ldrb	r3, [r7, #23]
 8010c18:	e03b      	b.n	8010c92 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010c1a:	683a      	ldr	r2, [r7, #0]
 8010c1c:	6879      	ldr	r1, [r7, #4]
 8010c1e:	68b8      	ldr	r0, [r7, #8]
 8010c20:	f7ff fee2 	bl	80109e8 <BSP_SD_ReadBlocks_DMA>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d132      	bne.n	8010c90 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010c2a:	4b1c      	ldr	r3, [pc, #112]	; (8010c9c <SD_read+0xa8>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010c30:	f7f8 fd62 	bl	80096f8 <HAL_GetTick>
 8010c34:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010c36:	bf00      	nop
 8010c38:	4b18      	ldr	r3, [pc, #96]	; (8010c9c <SD_read+0xa8>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d108      	bne.n	8010c52 <SD_read+0x5e>
 8010c40:	f7f8 fd5a 	bl	80096f8 <HAL_GetTick>
 8010c44:	4602      	mov	r2, r0
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d9f2      	bls.n	8010c38 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010c52:	4b12      	ldr	r3, [pc, #72]	; (8010c9c <SD_read+0xa8>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d102      	bne.n	8010c60 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	75fb      	strb	r3, [r7, #23]
 8010c5e:	e017      	b.n	8010c90 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010c60:	4b0e      	ldr	r3, [pc, #56]	; (8010c9c <SD_read+0xa8>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010c66:	f7f8 fd47 	bl	80096f8 <HAL_GetTick>
 8010c6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c6c:	e007      	b.n	8010c7e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c6e:	f7ff feef 	bl	8010a50 <BSP_SD_GetCardState>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <SD_read+0x8a>
          {
            res = RES_OK;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010c7c:	e008      	b.n	8010c90 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c7e:	f7f8 fd3b 	bl	80096f8 <HAL_GetTick>
 8010c82:	4602      	mov	r2, r0
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	f247 522f 	movw	r2, #29999	; 0x752f
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d9ee      	bls.n	8010c6e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3718      	adds	r7, #24
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	200422b0 	.word	0x200422b0

08010ca0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60b9      	str	r1, [r7, #8]
 8010ca8:	607a      	str	r2, [r7, #4]
 8010caa:	603b      	str	r3, [r7, #0]
 8010cac:	4603      	mov	r3, r0
 8010cae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010cb4:	4b24      	ldr	r3, [pc, #144]	; (8010d48 <SD_write+0xa8>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010cba:	f247 5030 	movw	r0, #30000	; 0x7530
 8010cbe:	f7ff ff33 	bl	8010b28 <SD_CheckStatusWithTimeout>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	da01      	bge.n	8010ccc <SD_write+0x2c>
  {
    return res;
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
 8010cca:	e038      	b.n	8010d3e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010ccc:	683a      	ldr	r2, [r7, #0]
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	68b8      	ldr	r0, [r7, #8]
 8010cd2:	f7ff fea3 	bl	8010a1c <BSP_SD_WriteBlocks_DMA>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d12f      	bne.n	8010d3c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010cdc:	f7f8 fd0c 	bl	80096f8 <HAL_GetTick>
 8010ce0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010ce2:	bf00      	nop
 8010ce4:	4b18      	ldr	r3, [pc, #96]	; (8010d48 <SD_write+0xa8>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d108      	bne.n	8010cfe <SD_write+0x5e>
 8010cec:	f7f8 fd04 	bl	80096f8 <HAL_GetTick>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	f247 522f 	movw	r2, #29999	; 0x752f
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d9f2      	bls.n	8010ce4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010cfe:	4b12      	ldr	r3, [pc, #72]	; (8010d48 <SD_write+0xa8>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d102      	bne.n	8010d0c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	75fb      	strb	r3, [r7, #23]
 8010d0a:	e017      	b.n	8010d3c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010d0c:	4b0e      	ldr	r3, [pc, #56]	; (8010d48 <SD_write+0xa8>)
 8010d0e:	2200      	movs	r2, #0
 8010d10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d12:	f7f8 fcf1 	bl	80096f8 <HAL_GetTick>
 8010d16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d18:	e007      	b.n	8010d2a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d1a:	f7ff fe99 	bl	8010a50 <BSP_SD_GetCardState>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d102      	bne.n	8010d2a <SD_write+0x8a>
          {
            res = RES_OK;
 8010d24:	2300      	movs	r3, #0
 8010d26:	75fb      	strb	r3, [r7, #23]
            break;
 8010d28:	e008      	b.n	8010d3c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d2a:	f7f8 fce5 	bl	80096f8 <HAL_GetTick>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d9ee      	bls.n	8010d1a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3718      	adds	r7, #24
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	200422ac 	.word	0x200422ac

08010d4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b08c      	sub	sp, #48	; 0x30
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	4603      	mov	r3, r0
 8010d54:	603a      	str	r2, [r7, #0]
 8010d56:	71fb      	strb	r3, [r7, #7]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010d62:	4b25      	ldr	r3, [pc, #148]	; (8010df8 <SD_ioctl+0xac>)
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	f003 0301 	and.w	r3, r3, #1
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d001      	beq.n	8010d74 <SD_ioctl+0x28>
 8010d70:	2303      	movs	r3, #3
 8010d72:	e03c      	b.n	8010dee <SD_ioctl+0xa2>

  switch (cmd)
 8010d74:	79bb      	ldrb	r3, [r7, #6]
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d834      	bhi.n	8010de4 <SD_ioctl+0x98>
 8010d7a:	a201      	add	r2, pc, #4	; (adr r2, 8010d80 <SD_ioctl+0x34>)
 8010d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d80:	08010d91 	.word	0x08010d91
 8010d84:	08010d99 	.word	0x08010d99
 8010d88:	08010db1 	.word	0x08010db1
 8010d8c:	08010dcb 	.word	0x08010dcb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d96:	e028      	b.n	8010dea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d98:	f107 030c 	add.w	r3, r7, #12
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff fe67 	bl	8010a70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010da8:	2300      	movs	r3, #0
 8010daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010dae:	e01c      	b.n	8010dea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010db0:	f107 030c 	add.w	r3, r7, #12
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fe5b 	bl	8010a70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010dc8:	e00f      	b.n	8010dea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010dca:	f107 030c 	add.w	r3, r7, #12
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7ff fe4e 	bl	8010a70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd6:	0a5a      	lsrs	r2, r3, #9
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010de2:	e002      	b.n	8010dea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010de4:	2304      	movs	r3, #4
 8010de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3730      	adds	r7, #48	; 0x30
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop
 8010df8:	20000009 	.word	0x20000009

08010dfc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010e00:	4b03      	ldr	r3, [pc, #12]	; (8010e10 <BSP_SD_WriteCpltCallback+0x14>)
 8010e02:	2201      	movs	r2, #1
 8010e04:	601a      	str	r2, [r3, #0]
}
 8010e06:	bf00      	nop
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr
 8010e10:	200422ac 	.word	0x200422ac

08010e14 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010e14:	b480      	push	{r7}
 8010e16:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010e18:	4b03      	ldr	r3, [pc, #12]	; (8010e28 <BSP_SD_ReadCpltCallback+0x14>)
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	601a      	str	r2, [r3, #0]
}
 8010e1e:	bf00      	nop
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	200422b0 	.word	0x200422b0

08010e2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	4603      	mov	r3, r0
 8010e34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	4a08      	ldr	r2, [pc, #32]	; (8010e5c <disk_status+0x30>)
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	4413      	add	r3, r2
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	79fa      	ldrb	r2, [r7, #7]
 8010e44:	4905      	ldr	r1, [pc, #20]	; (8010e5c <disk_status+0x30>)
 8010e46:	440a      	add	r2, r1
 8010e48:	7a12      	ldrb	r2, [r2, #8]
 8010e4a:	4610      	mov	r0, r2
 8010e4c:	4798      	blx	r3
 8010e4e:	4603      	mov	r3, r0
 8010e50:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3710      	adds	r7, #16
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	200422dc 	.word	0x200422dc

08010e60 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	4a0d      	ldr	r2, [pc, #52]	; (8010ea8 <disk_initialize+0x48>)
 8010e72:	5cd3      	ldrb	r3, [r2, r3]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d111      	bne.n	8010e9c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010e78:	79fb      	ldrb	r3, [r7, #7]
 8010e7a:	4a0b      	ldr	r2, [pc, #44]	; (8010ea8 <disk_initialize+0x48>)
 8010e7c:	2101      	movs	r1, #1
 8010e7e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010e80:	79fb      	ldrb	r3, [r7, #7]
 8010e82:	4a09      	ldr	r2, [pc, #36]	; (8010ea8 <disk_initialize+0x48>)
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	4413      	add	r3, r2
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	79fa      	ldrb	r2, [r7, #7]
 8010e8e:	4906      	ldr	r1, [pc, #24]	; (8010ea8 <disk_initialize+0x48>)
 8010e90:	440a      	add	r2, r1
 8010e92:	7a12      	ldrb	r2, [r2, #8]
 8010e94:	4610      	mov	r0, r2
 8010e96:	4798      	blx	r3
 8010e98:	4603      	mov	r3, r0
 8010e9a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	200422dc 	.word	0x200422dc

08010eac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010eac:	b590      	push	{r4, r7, lr}
 8010eae:	b087      	sub	sp, #28
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	607a      	str	r2, [r7, #4]
 8010eb6:	603b      	str	r3, [r7, #0]
 8010eb8:	4603      	mov	r3, r0
 8010eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010ebc:	7bfb      	ldrb	r3, [r7, #15]
 8010ebe:	4a0a      	ldr	r2, [pc, #40]	; (8010ee8 <disk_read+0x3c>)
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	689c      	ldr	r4, [r3, #8]
 8010ec8:	7bfb      	ldrb	r3, [r7, #15]
 8010eca:	4a07      	ldr	r2, [pc, #28]	; (8010ee8 <disk_read+0x3c>)
 8010ecc:	4413      	add	r3, r2
 8010ece:	7a18      	ldrb	r0, [r3, #8]
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	68b9      	ldr	r1, [r7, #8]
 8010ed6:	47a0      	blx	r4
 8010ed8:	4603      	mov	r3, r0
 8010eda:	75fb      	strb	r3, [r7, #23]
  return res;
 8010edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	371c      	adds	r7, #28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd90      	pop	{r4, r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	200422dc 	.word	0x200422dc

08010eec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b087      	sub	sp, #28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60b9      	str	r1, [r7, #8]
 8010ef4:	607a      	str	r2, [r7, #4]
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	4603      	mov	r3, r0
 8010efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010efc:	7bfb      	ldrb	r3, [r7, #15]
 8010efe:	4a0a      	ldr	r2, [pc, #40]	; (8010f28 <disk_write+0x3c>)
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	68dc      	ldr	r4, [r3, #12]
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	4a07      	ldr	r2, [pc, #28]	; (8010f28 <disk_write+0x3c>)
 8010f0c:	4413      	add	r3, r2
 8010f0e:	7a18      	ldrb	r0, [r3, #8]
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	68b9      	ldr	r1, [r7, #8]
 8010f16:	47a0      	blx	r4
 8010f18:	4603      	mov	r3, r0
 8010f1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	371c      	adds	r7, #28
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd90      	pop	{r4, r7, pc}
 8010f26:	bf00      	nop
 8010f28:	200422dc 	.word	0x200422dc

08010f2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	4603      	mov	r3, r0
 8010f34:	603a      	str	r2, [r7, #0]
 8010f36:	71fb      	strb	r3, [r7, #7]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010f3c:	79fb      	ldrb	r3, [r7, #7]
 8010f3e:	4a09      	ldr	r2, [pc, #36]	; (8010f64 <disk_ioctl+0x38>)
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	4413      	add	r3, r2
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	79fa      	ldrb	r2, [r7, #7]
 8010f4a:	4906      	ldr	r1, [pc, #24]	; (8010f64 <disk_ioctl+0x38>)
 8010f4c:	440a      	add	r2, r1
 8010f4e:	7a10      	ldrb	r0, [r2, #8]
 8010f50:	79b9      	ldrb	r1, [r7, #6]
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	4798      	blx	r3
 8010f56:	4603      	mov	r3, r0
 8010f58:	73fb      	strb	r3, [r7, #15]
  return res;
 8010f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3710      	adds	r7, #16
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	200422dc 	.word	0x200422dc

08010f68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	3301      	adds	r3, #1
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010f78:	89fb      	ldrh	r3, [r7, #14]
 8010f7a:	021b      	lsls	r3, r3, #8
 8010f7c:	b21a      	sxth	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	b21b      	sxth	r3, r3
 8010f84:	4313      	orrs	r3, r2
 8010f86:	b21b      	sxth	r3, r3
 8010f88:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3714      	adds	r7, #20
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	3303      	adds	r3, #3
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	021b      	lsls	r3, r3, #8
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	3202      	adds	r2, #2
 8010fb0:	7812      	ldrb	r2, [r2, #0]
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	021b      	lsls	r3, r3, #8
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	3201      	adds	r2, #1
 8010fbe:	7812      	ldrb	r2, [r2, #0]
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	021b      	lsls	r3, r3, #8
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	7812      	ldrb	r2, [r2, #0]
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	60fb      	str	r3, [r7, #12]
	return rv;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr

08010fde <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010fde:	b480      	push	{r7}
 8010fe0:	b083      	sub	sp, #12
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	1c5a      	adds	r2, r3, #1
 8010fee:	607a      	str	r2, [r7, #4]
 8010ff0:	887a      	ldrh	r2, [r7, #2]
 8010ff2:	b2d2      	uxtb	r2, r2
 8010ff4:	701a      	strb	r2, [r3, #0]
 8010ff6:	887b      	ldrh	r3, [r7, #2]
 8010ff8:	0a1b      	lsrs	r3, r3, #8
 8010ffa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	1c5a      	adds	r2, r3, #1
 8011000:	607a      	str	r2, [r7, #4]
 8011002:	887a      	ldrh	r2, [r7, #2]
 8011004:	b2d2      	uxtb	r2, r2
 8011006:	701a      	strb	r2, [r3, #0]
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr

08011014 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	1c5a      	adds	r2, r3, #1
 8011022:	607a      	str	r2, [r7, #4]
 8011024:	683a      	ldr	r2, [r7, #0]
 8011026:	b2d2      	uxtb	r2, r2
 8011028:	701a      	strb	r2, [r3, #0]
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	0a1b      	lsrs	r3, r3, #8
 801102e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	1c5a      	adds	r2, r3, #1
 8011034:	607a      	str	r2, [r7, #4]
 8011036:	683a      	ldr	r2, [r7, #0]
 8011038:	b2d2      	uxtb	r2, r2
 801103a:	701a      	strb	r2, [r3, #0]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	0a1b      	lsrs	r3, r3, #8
 8011040:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	1c5a      	adds	r2, r3, #1
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	683a      	ldr	r2, [r7, #0]
 801104a:	b2d2      	uxtb	r2, r2
 801104c:	701a      	strb	r2, [r3, #0]
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	0a1b      	lsrs	r3, r3, #8
 8011052:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	607a      	str	r2, [r7, #4]
 801105a:	683a      	ldr	r2, [r7, #0]
 801105c:	b2d2      	uxtb	r2, r2
 801105e:	701a      	strb	r2, [r3, #0]
}
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801106c:	b480      	push	{r7}
 801106e:	b087      	sub	sp, #28
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00d      	beq.n	80110a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	1c53      	adds	r3, r2, #1
 801108a:	613b      	str	r3, [r7, #16]
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	1c59      	adds	r1, r3, #1
 8011090:	6179      	str	r1, [r7, #20]
 8011092:	7812      	ldrb	r2, [r2, #0]
 8011094:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	3b01      	subs	r3, #1
 801109a:	607b      	str	r3, [r7, #4]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d1f1      	bne.n	8011086 <mem_cpy+0x1a>
	}
}
 80110a2:	bf00      	nop
 80110a4:	371c      	adds	r7, #28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80110ae:	b480      	push	{r7}
 80110b0:	b087      	sub	sp, #28
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	60f8      	str	r0, [r7, #12]
 80110b6:	60b9      	str	r1, [r7, #8]
 80110b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	1c5a      	adds	r2, r3, #1
 80110c2:	617a      	str	r2, [r7, #20]
 80110c4:	68ba      	ldr	r2, [r7, #8]
 80110c6:	b2d2      	uxtb	r2, r2
 80110c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	3b01      	subs	r3, #1
 80110ce:	607b      	str	r3, [r7, #4]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1f3      	bne.n	80110be <mem_set+0x10>
}
 80110d6:	bf00      	nop
 80110d8:	371c      	adds	r7, #28
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr

080110e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80110e2:	b480      	push	{r7}
 80110e4:	b089      	sub	sp, #36	; 0x24
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	60f8      	str	r0, [r7, #12]
 80110ea:	60b9      	str	r1, [r7, #8]
 80110ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	61fb      	str	r3, [r7, #28]
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	61fa      	str	r2, [r7, #28]
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	4619      	mov	r1, r3
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	1c5a      	adds	r2, r3, #1
 8011108:	61ba      	str	r2, [r7, #24]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	1acb      	subs	r3, r1, r3
 801110e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	3b01      	subs	r3, #1
 8011114:	607b      	str	r3, [r7, #4]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d002      	beq.n	8011122 <mem_cmp+0x40>
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d0eb      	beq.n	80110fa <mem_cmp+0x18>

	return r;
 8011122:	697b      	ldr	r3, [r7, #20]
}
 8011124:	4618      	mov	r0, r3
 8011126:	3724      	adds	r7, #36	; 0x24
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801113a:	e002      	b.n	8011142 <chk_chr+0x12>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3301      	adds	r3, #1
 8011140:	607b      	str	r3, [r7, #4]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d005      	beq.n	8011156 <chk_chr+0x26>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	461a      	mov	r2, r3
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	4293      	cmp	r3, r2
 8011154:	d1f2      	bne.n	801113c <chk_chr+0xc>
	return *str;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	781b      	ldrb	r3, [r3, #0]
}
 801115a:	4618      	mov	r0, r3
 801115c:	370c      	adds	r7, #12
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
	...

08011168 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011172:	2300      	movs	r3, #0
 8011174:	60bb      	str	r3, [r7, #8]
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	60fb      	str	r3, [r7, #12]
 801117a:	e029      	b.n	80111d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801117c:	4a27      	ldr	r2, [pc, #156]	; (801121c <chk_lock+0xb4>)
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	011b      	lsls	r3, r3, #4
 8011182:	4413      	add	r3, r2
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d01d      	beq.n	80111c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801118a:	4a24      	ldr	r2, [pc, #144]	; (801121c <chk_lock+0xb4>)
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	011b      	lsls	r3, r3, #4
 8011190:	4413      	add	r3, r2
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	429a      	cmp	r2, r3
 801119a:	d116      	bne.n	80111ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801119c:	4a1f      	ldr	r2, [pc, #124]	; (801121c <chk_lock+0xb4>)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	011b      	lsls	r3, r3, #4
 80111a2:	4413      	add	r3, r2
 80111a4:	3304      	adds	r3, #4
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d10c      	bne.n	80111ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80111b0:	4a1a      	ldr	r2, [pc, #104]	; (801121c <chk_lock+0xb4>)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	011b      	lsls	r3, r3, #4
 80111b6:	4413      	add	r3, r2
 80111b8:	3308      	adds	r3, #8
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d102      	bne.n	80111ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80111c4:	e007      	b.n	80111d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80111c6:	2301      	movs	r3, #1
 80111c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3301      	adds	r3, #1
 80111ce:	60fb      	str	r3, [r7, #12]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d9d2      	bls.n	801117c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d109      	bne.n	80111f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d102      	bne.n	80111e8 <chk_lock+0x80>
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	d101      	bne.n	80111ec <chk_lock+0x84>
 80111e8:	2300      	movs	r3, #0
 80111ea:	e010      	b.n	801120e <chk_lock+0xa6>
 80111ec:	2312      	movs	r3, #18
 80111ee:	e00e      	b.n	801120e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d108      	bne.n	8011208 <chk_lock+0xa0>
 80111f6:	4a09      	ldr	r2, [pc, #36]	; (801121c <chk_lock+0xb4>)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	011b      	lsls	r3, r3, #4
 80111fc:	4413      	add	r3, r2
 80111fe:	330c      	adds	r3, #12
 8011200:	881b      	ldrh	r3, [r3, #0]
 8011202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011206:	d101      	bne.n	801120c <chk_lock+0xa4>
 8011208:	2310      	movs	r3, #16
 801120a:	e000      	b.n	801120e <chk_lock+0xa6>
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop
 801121c:	200422bc 	.word	0x200422bc

08011220 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011220:	b480      	push	{r7}
 8011222:	b083      	sub	sp, #12
 8011224:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011226:	2300      	movs	r3, #0
 8011228:	607b      	str	r3, [r7, #4]
 801122a:	e002      	b.n	8011232 <enq_lock+0x12>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	3301      	adds	r3, #1
 8011230:	607b      	str	r3, [r7, #4]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d806      	bhi.n	8011246 <enq_lock+0x26>
 8011238:	4a09      	ldr	r2, [pc, #36]	; (8011260 <enq_lock+0x40>)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	011b      	lsls	r3, r3, #4
 801123e:	4413      	add	r3, r2
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1f2      	bne.n	801122c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b02      	cmp	r3, #2
 801124a:	bf14      	ite	ne
 801124c:	2301      	movne	r3, #1
 801124e:	2300      	moveq	r3, #0
 8011250:	b2db      	uxtb	r3, r3
}
 8011252:	4618      	mov	r0, r3
 8011254:	370c      	adds	r7, #12
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	200422bc 	.word	0x200422bc

08011264 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801126e:	2300      	movs	r3, #0
 8011270:	60fb      	str	r3, [r7, #12]
 8011272:	e01f      	b.n	80112b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011274:	4a41      	ldr	r2, [pc, #260]	; (801137c <inc_lock+0x118>)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	011b      	lsls	r3, r3, #4
 801127a:	4413      	add	r3, r2
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	429a      	cmp	r2, r3
 8011284:	d113      	bne.n	80112ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011286:	4a3d      	ldr	r2, [pc, #244]	; (801137c <inc_lock+0x118>)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	011b      	lsls	r3, r3, #4
 801128c:	4413      	add	r3, r2
 801128e:	3304      	adds	r3, #4
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011296:	429a      	cmp	r2, r3
 8011298:	d109      	bne.n	80112ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801129a:	4a38      	ldr	r2, [pc, #224]	; (801137c <inc_lock+0x118>)
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	011b      	lsls	r3, r3, #4
 80112a0:	4413      	add	r3, r2
 80112a2:	3308      	adds	r3, #8
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d006      	beq.n	80112bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	3301      	adds	r3, #1
 80112b2:	60fb      	str	r3, [r7, #12]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d9dc      	bls.n	8011274 <inc_lock+0x10>
 80112ba:	e000      	b.n	80112be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80112bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	d132      	bne.n	801132a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80112c4:	2300      	movs	r3, #0
 80112c6:	60fb      	str	r3, [r7, #12]
 80112c8:	e002      	b.n	80112d0 <inc_lock+0x6c>
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	3301      	adds	r3, #1
 80112ce:	60fb      	str	r3, [r7, #12]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d806      	bhi.n	80112e4 <inc_lock+0x80>
 80112d6:	4a29      	ldr	r2, [pc, #164]	; (801137c <inc_lock+0x118>)
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	011b      	lsls	r3, r3, #4
 80112dc:	4413      	add	r3, r2
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1f2      	bne.n	80112ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	d101      	bne.n	80112ee <inc_lock+0x8a>
 80112ea:	2300      	movs	r3, #0
 80112ec:	e040      	b.n	8011370 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	4922      	ldr	r1, [pc, #136]	; (801137c <inc_lock+0x118>)
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	011b      	lsls	r3, r3, #4
 80112f8:	440b      	add	r3, r1
 80112fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	689a      	ldr	r2, [r3, #8]
 8011300:	491e      	ldr	r1, [pc, #120]	; (801137c <inc_lock+0x118>)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	011b      	lsls	r3, r3, #4
 8011306:	440b      	add	r3, r1
 8011308:	3304      	adds	r3, #4
 801130a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	695a      	ldr	r2, [r3, #20]
 8011310:	491a      	ldr	r1, [pc, #104]	; (801137c <inc_lock+0x118>)
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	011b      	lsls	r3, r3, #4
 8011316:	440b      	add	r3, r1
 8011318:	3308      	adds	r3, #8
 801131a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801131c:	4a17      	ldr	r2, [pc, #92]	; (801137c <inc_lock+0x118>)
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	011b      	lsls	r3, r3, #4
 8011322:	4413      	add	r3, r2
 8011324:	330c      	adds	r3, #12
 8011326:	2200      	movs	r2, #0
 8011328:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d009      	beq.n	8011344 <inc_lock+0xe0>
 8011330:	4a12      	ldr	r2, [pc, #72]	; (801137c <inc_lock+0x118>)
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	011b      	lsls	r3, r3, #4
 8011336:	4413      	add	r3, r2
 8011338:	330c      	adds	r3, #12
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <inc_lock+0xe0>
 8011340:	2300      	movs	r3, #0
 8011342:	e015      	b.n	8011370 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d108      	bne.n	801135c <inc_lock+0xf8>
 801134a:	4a0c      	ldr	r2, [pc, #48]	; (801137c <inc_lock+0x118>)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	011b      	lsls	r3, r3, #4
 8011350:	4413      	add	r3, r2
 8011352:	330c      	adds	r3, #12
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	3301      	adds	r3, #1
 8011358:	b29a      	uxth	r2, r3
 801135a:	e001      	b.n	8011360 <inc_lock+0xfc>
 801135c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011360:	4906      	ldr	r1, [pc, #24]	; (801137c <inc_lock+0x118>)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	011b      	lsls	r3, r3, #4
 8011366:	440b      	add	r3, r1
 8011368:	330c      	adds	r3, #12
 801136a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	3301      	adds	r3, #1
}
 8011370:	4618      	mov	r0, r3
 8011372:	3714      	adds	r7, #20
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	200422bc 	.word	0x200422bc

08011380 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011380:	b480      	push	{r7}
 8011382:	b085      	sub	sp, #20
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3b01      	subs	r3, #1
 801138c:	607b      	str	r3, [r7, #4]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d825      	bhi.n	80113e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011394:	4a17      	ldr	r2, [pc, #92]	; (80113f4 <dec_lock+0x74>)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	011b      	lsls	r3, r3, #4
 801139a:	4413      	add	r3, r2
 801139c:	330c      	adds	r3, #12
 801139e:	881b      	ldrh	r3, [r3, #0]
 80113a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80113a2:	89fb      	ldrh	r3, [r7, #14]
 80113a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113a8:	d101      	bne.n	80113ae <dec_lock+0x2e>
 80113aa:	2300      	movs	r3, #0
 80113ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80113ae:	89fb      	ldrh	r3, [r7, #14]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <dec_lock+0x3a>
 80113b4:	89fb      	ldrh	r3, [r7, #14]
 80113b6:	3b01      	subs	r3, #1
 80113b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80113ba:	4a0e      	ldr	r2, [pc, #56]	; (80113f4 <dec_lock+0x74>)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	011b      	lsls	r3, r3, #4
 80113c0:	4413      	add	r3, r2
 80113c2:	330c      	adds	r3, #12
 80113c4:	89fa      	ldrh	r2, [r7, #14]
 80113c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80113c8:	89fb      	ldrh	r3, [r7, #14]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d105      	bne.n	80113da <dec_lock+0x5a>
 80113ce:	4a09      	ldr	r2, [pc, #36]	; (80113f4 <dec_lock+0x74>)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	011b      	lsls	r3, r3, #4
 80113d4:	4413      	add	r3, r2
 80113d6:	2200      	movs	r2, #0
 80113d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	737b      	strb	r3, [r7, #13]
 80113de:	e001      	b.n	80113e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80113e0:	2302      	movs	r3, #2
 80113e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80113e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3714      	adds	r7, #20
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	200422bc 	.word	0x200422bc

080113f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011400:	2300      	movs	r3, #0
 8011402:	60fb      	str	r3, [r7, #12]
 8011404:	e010      	b.n	8011428 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011406:	4a0d      	ldr	r2, [pc, #52]	; (801143c <clear_lock+0x44>)
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	011b      	lsls	r3, r3, #4
 801140c:	4413      	add	r3, r2
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	429a      	cmp	r2, r3
 8011414:	d105      	bne.n	8011422 <clear_lock+0x2a>
 8011416:	4a09      	ldr	r2, [pc, #36]	; (801143c <clear_lock+0x44>)
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	011b      	lsls	r3, r3, #4
 801141c:	4413      	add	r3, r2
 801141e:	2200      	movs	r2, #0
 8011420:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	3301      	adds	r3, #1
 8011426:	60fb      	str	r3, [r7, #12]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d9eb      	bls.n	8011406 <clear_lock+0xe>
	}
}
 801142e:	bf00      	nop
 8011430:	3714      	adds	r7, #20
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	200422bc 	.word	0x200422bc

08011440 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b086      	sub	sp, #24
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	78db      	ldrb	r3, [r3, #3]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d034      	beq.n	80114be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011458:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7858      	ldrb	r0, [r3, #1]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011464:	2301      	movs	r3, #1
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	f7ff fd40 	bl	8010eec <disk_write>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d002      	beq.n	8011478 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011472:	2301      	movs	r3, #1
 8011474:	73fb      	strb	r3, [r7, #15]
 8011476:	e022      	b.n	80114be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2200      	movs	r2, #0
 801147c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011482:	697a      	ldr	r2, [r7, #20]
 8011484:	1ad2      	subs	r2, r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	429a      	cmp	r2, r3
 801148c:	d217      	bcs.n	80114be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	789b      	ldrb	r3, [r3, #2]
 8011492:	613b      	str	r3, [r7, #16]
 8011494:	e010      	b.n	80114b8 <sync_window+0x78>
					wsect += fs->fsize;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	4413      	add	r3, r2
 801149e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7858      	ldrb	r0, [r3, #1]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114aa:	2301      	movs	r3, #1
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	f7ff fd1d 	bl	8010eec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	3b01      	subs	r3, #1
 80114b6:	613b      	str	r3, [r7, #16]
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d8eb      	bhi.n	8011496 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80114be:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3718      	adds	r7, #24
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80114d2:	2300      	movs	r3, #0
 80114d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114da:	683a      	ldr	r2, [r7, #0]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d01b      	beq.n	8011518 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f7ff ffad 	bl	8011440 <sync_window>
 80114e6:	4603      	mov	r3, r0
 80114e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80114ea:	7bfb      	ldrb	r3, [r7, #15]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d113      	bne.n	8011518 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	7858      	ldrb	r0, [r3, #1]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114fa:	2301      	movs	r3, #1
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	f7ff fcd5 	bl	8010eac <disk_read>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d004      	beq.n	8011512 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011508:	f04f 33ff 	mov.w	r3, #4294967295
 801150c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801150e:	2301      	movs	r3, #1
 8011510:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011518:	7bfb      	ldrb	r3, [r7, #15]
}
 801151a:	4618      	mov	r0, r3
 801151c:	3710      	adds	r7, #16
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
	...

08011524 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7ff ff87 	bl	8011440 <sync_window>
 8011532:	4603      	mov	r3, r0
 8011534:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011536:	7bfb      	ldrb	r3, [r7, #15]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d159      	bne.n	80115f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	2b03      	cmp	r3, #3
 8011542:	d149      	bne.n	80115d8 <sync_fs+0xb4>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	791b      	ldrb	r3, [r3, #4]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d145      	bne.n	80115d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	899b      	ldrh	r3, [r3, #12]
 8011556:	461a      	mov	r2, r3
 8011558:	2100      	movs	r1, #0
 801155a:	f7ff fda8 	bl	80110ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3338      	adds	r3, #56	; 0x38
 8011562:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011566:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff fd37 	bl	8010fde <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	3338      	adds	r3, #56	; 0x38
 8011574:	4921      	ldr	r1, [pc, #132]	; (80115fc <sync_fs+0xd8>)
 8011576:	4618      	mov	r0, r3
 8011578:	f7ff fd4c 	bl	8011014 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	3338      	adds	r3, #56	; 0x38
 8011580:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011584:	491e      	ldr	r1, [pc, #120]	; (8011600 <sync_fs+0xdc>)
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff fd44 	bl	8011014 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	3338      	adds	r3, #56	; 0x38
 8011590:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	695b      	ldr	r3, [r3, #20]
 8011598:	4619      	mov	r1, r3
 801159a:	4610      	mov	r0, r2
 801159c:	f7ff fd3a 	bl	8011014 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	3338      	adds	r3, #56	; 0x38
 80115a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	4619      	mov	r1, r3
 80115ae:	4610      	mov	r0, r2
 80115b0:	f7ff fd30 	bl	8011014 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b8:	1c5a      	adds	r2, r3, #1
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	7858      	ldrb	r0, [r3, #1]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115cc:	2301      	movs	r3, #1
 80115ce:	f7ff fc8d 	bl	8010eec <disk_write>
			fs->fsi_flag = 0;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	785b      	ldrb	r3, [r3, #1]
 80115dc:	2200      	movs	r2, #0
 80115de:	2100      	movs	r1, #0
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff fca3 	bl	8010f2c <disk_ioctl>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <sync_fs+0xcc>
 80115ec:	2301      	movs	r3, #1
 80115ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	41615252 	.word	0x41615252
 8011600:	61417272 	.word	0x61417272

08011604 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	3b02      	subs	r3, #2
 8011612:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	69db      	ldr	r3, [r3, #28]
 8011618:	3b02      	subs	r3, #2
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	429a      	cmp	r2, r3
 801161e:	d301      	bcc.n	8011624 <clust2sect+0x20>
 8011620:	2300      	movs	r3, #0
 8011622:	e008      	b.n	8011636 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	895b      	ldrh	r3, [r3, #10]
 8011628:	461a      	mov	r2, r3
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	fb03 f202 	mul.w	r2, r3, r2
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011634:	4413      	add	r3, r2
}
 8011636:	4618      	mov	r0, r3
 8011638:	370c      	adds	r7, #12
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr

08011642 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011642:	b580      	push	{r7, lr}
 8011644:	b086      	sub	sp, #24
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d904      	bls.n	8011662 <get_fat+0x20>
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	69db      	ldr	r3, [r3, #28]
 801165c:	683a      	ldr	r2, [r7, #0]
 801165e:	429a      	cmp	r2, r3
 8011660:	d302      	bcc.n	8011668 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011662:	2301      	movs	r3, #1
 8011664:	617b      	str	r3, [r7, #20]
 8011666:	e0b7      	b.n	80117d8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011668:	f04f 33ff 	mov.w	r3, #4294967295
 801166c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b02      	cmp	r3, #2
 8011674:	d05a      	beq.n	801172c <get_fat+0xea>
 8011676:	2b03      	cmp	r3, #3
 8011678:	d07d      	beq.n	8011776 <get_fat+0x134>
 801167a:	2b01      	cmp	r3, #1
 801167c:	f040 80a2 	bne.w	80117c4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	60fb      	str	r3, [r7, #12]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	085b      	lsrs	r3, r3, #1
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	4413      	add	r3, r2
 801168c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	899b      	ldrh	r3, [r3, #12]
 8011696:	4619      	mov	r1, r3
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	fbb3 f3f1 	udiv	r3, r3, r1
 801169e:	4413      	add	r3, r2
 80116a0:	4619      	mov	r1, r3
 80116a2:	6938      	ldr	r0, [r7, #16]
 80116a4:	f7ff ff10 	bl	80114c8 <move_window>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f040 808d 	bne.w	80117ca <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	1c5a      	adds	r2, r3, #1
 80116b4:	60fa      	str	r2, [r7, #12]
 80116b6:	693a      	ldr	r2, [r7, #16]
 80116b8:	8992      	ldrh	r2, [r2, #12]
 80116ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80116be:	fb02 f201 	mul.w	r2, r2, r1
 80116c2:	1a9b      	subs	r3, r3, r2
 80116c4:	693a      	ldr	r2, [r7, #16]
 80116c6:	4413      	add	r3, r2
 80116c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80116cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	899b      	ldrh	r3, [r3, #12]
 80116d6:	4619      	mov	r1, r3
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	fbb3 f3f1 	udiv	r3, r3, r1
 80116de:	4413      	add	r3, r2
 80116e0:	4619      	mov	r1, r3
 80116e2:	6938      	ldr	r0, [r7, #16]
 80116e4:	f7ff fef0 	bl	80114c8 <move_window>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d16f      	bne.n	80117ce <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	461a      	mov	r2, r3
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80116fa:	fb02 f201 	mul.w	r2, r2, r1
 80116fe:	1a9b      	subs	r3, r3, r2
 8011700:	693a      	ldr	r2, [r7, #16]
 8011702:	4413      	add	r3, r2
 8011704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011708:	021b      	lsls	r3, r3, #8
 801170a:	461a      	mov	r2, r3
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	4313      	orrs	r3, r2
 8011710:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	f003 0301 	and.w	r3, r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	d002      	beq.n	8011722 <get_fat+0xe0>
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	091b      	lsrs	r3, r3, #4
 8011720:	e002      	b.n	8011728 <get_fat+0xe6>
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011728:	617b      	str	r3, [r7, #20]
			break;
 801172a:	e055      	b.n	80117d8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	899b      	ldrh	r3, [r3, #12]
 8011734:	085b      	lsrs	r3, r3, #1
 8011736:	b29b      	uxth	r3, r3
 8011738:	4619      	mov	r1, r3
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011740:	4413      	add	r3, r2
 8011742:	4619      	mov	r1, r3
 8011744:	6938      	ldr	r0, [r7, #16]
 8011746:	f7ff febf 	bl	80114c8 <move_window>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d140      	bne.n	80117d2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	693a      	ldr	r2, [r7, #16]
 801175c:	8992      	ldrh	r2, [r2, #12]
 801175e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011762:	fb02 f200 	mul.w	r2, r2, r0
 8011766:	1a9b      	subs	r3, r3, r2
 8011768:	440b      	add	r3, r1
 801176a:	4618      	mov	r0, r3
 801176c:	f7ff fbfc 	bl	8010f68 <ld_word>
 8011770:	4603      	mov	r3, r0
 8011772:	617b      	str	r3, [r7, #20]
			break;
 8011774:	e030      	b.n	80117d8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	899b      	ldrh	r3, [r3, #12]
 801177e:	089b      	lsrs	r3, r3, #2
 8011780:	b29b      	uxth	r3, r3
 8011782:	4619      	mov	r1, r3
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	fbb3 f3f1 	udiv	r3, r3, r1
 801178a:	4413      	add	r3, r2
 801178c:	4619      	mov	r1, r3
 801178e:	6938      	ldr	r0, [r7, #16]
 8011790:	f7ff fe9a 	bl	80114c8 <move_window>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d11d      	bne.n	80117d6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	693a      	ldr	r2, [r7, #16]
 80117a6:	8992      	ldrh	r2, [r2, #12]
 80117a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80117ac:	fb02 f200 	mul.w	r2, r2, r0
 80117b0:	1a9b      	subs	r3, r3, r2
 80117b2:	440b      	add	r3, r1
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff fbef 	bl	8010f98 <ld_dword>
 80117ba:	4603      	mov	r3, r0
 80117bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80117c0:	617b      	str	r3, [r7, #20]
			break;
 80117c2:	e009      	b.n	80117d8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80117c4:	2301      	movs	r3, #1
 80117c6:	617b      	str	r3, [r7, #20]
 80117c8:	e006      	b.n	80117d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117ca:	bf00      	nop
 80117cc:	e004      	b.n	80117d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117ce:	bf00      	nop
 80117d0:	e002      	b.n	80117d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80117d2:	bf00      	nop
 80117d4:	e000      	b.n	80117d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117d6:	bf00      	nop
		}
	}

	return val;
 80117d8:	697b      	ldr	r3, [r7, #20]
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3718      	adds	r7, #24
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80117e2:	b590      	push	{r4, r7, lr}
 80117e4:	b089      	sub	sp, #36	; 0x24
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	60f8      	str	r0, [r7, #12]
 80117ea:	60b9      	str	r1, [r7, #8]
 80117ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80117ee:	2302      	movs	r3, #2
 80117f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	f240 8106 	bls.w	8011a06 <put_fat+0x224>
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	69db      	ldr	r3, [r3, #28]
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	429a      	cmp	r2, r3
 8011802:	f080 8100 	bcs.w	8011a06 <put_fat+0x224>
		switch (fs->fs_type) {
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	2b02      	cmp	r3, #2
 801180c:	f000 8088 	beq.w	8011920 <put_fat+0x13e>
 8011810:	2b03      	cmp	r3, #3
 8011812:	f000 80b0 	beq.w	8011976 <put_fat+0x194>
 8011816:	2b01      	cmp	r3, #1
 8011818:	f040 80f5 	bne.w	8011a06 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	61bb      	str	r3, [r7, #24]
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	085b      	lsrs	r3, r3, #1
 8011824:	69ba      	ldr	r2, [r7, #24]
 8011826:	4413      	add	r3, r2
 8011828:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	899b      	ldrh	r3, [r3, #12]
 8011832:	4619      	mov	r1, r3
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	fbb3 f3f1 	udiv	r3, r3, r1
 801183a:	4413      	add	r3, r2
 801183c:	4619      	mov	r1, r3
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fe42 	bl	80114c8 <move_window>
 8011844:	4603      	mov	r3, r0
 8011846:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011848:	7ffb      	ldrb	r3, [r7, #31]
 801184a:	2b00      	cmp	r3, #0
 801184c:	f040 80d4 	bne.w	80119f8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	61ba      	str	r2, [r7, #24]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	8992      	ldrh	r2, [r2, #12]
 8011860:	fbb3 f0f2 	udiv	r0, r3, r2
 8011864:	fb02 f200 	mul.w	r2, r2, r0
 8011868:	1a9b      	subs	r3, r3, r2
 801186a:	440b      	add	r3, r1
 801186c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	f003 0301 	and.w	r3, r3, #1
 8011874:	2b00      	cmp	r3, #0
 8011876:	d00d      	beq.n	8011894 <put_fat+0xb2>
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	b25b      	sxtb	r3, r3
 801187e:	f003 030f 	and.w	r3, r3, #15
 8011882:	b25a      	sxtb	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	b2db      	uxtb	r3, r3
 8011888:	011b      	lsls	r3, r3, #4
 801188a:	b25b      	sxtb	r3, r3
 801188c:	4313      	orrs	r3, r2
 801188e:	b25b      	sxtb	r3, r3
 8011890:	b2db      	uxtb	r3, r3
 8011892:	e001      	b.n	8011898 <put_fat+0xb6>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	b2db      	uxtb	r3, r3
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2201      	movs	r2, #1
 80118a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	899b      	ldrh	r3, [r3, #12]
 80118aa:	4619      	mov	r1, r3
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80118b2:	4413      	add	r3, r2
 80118b4:	4619      	mov	r1, r3
 80118b6:	68f8      	ldr	r0, [r7, #12]
 80118b8:	f7ff fe06 	bl	80114c8 <move_window>
 80118bc:	4603      	mov	r3, r0
 80118be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80118c0:	7ffb      	ldrb	r3, [r7, #31]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f040 809a 	bne.w	80119fc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	899b      	ldrh	r3, [r3, #12]
 80118d2:	461a      	mov	r2, r3
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80118da:	fb02 f200 	mul.w	r2, r2, r0
 80118de:	1a9b      	subs	r3, r3, r2
 80118e0:	440b      	add	r3, r1
 80118e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	f003 0301 	and.w	r3, r3, #1
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d003      	beq.n	80118f6 <put_fat+0x114>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	091b      	lsrs	r3, r3, #4
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	e00e      	b.n	8011914 <put_fat+0x132>
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	b25b      	sxtb	r3, r3
 80118fc:	f023 030f 	bic.w	r3, r3, #15
 8011900:	b25a      	sxtb	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	0a1b      	lsrs	r3, r3, #8
 8011906:	b25b      	sxtb	r3, r3
 8011908:	f003 030f 	and.w	r3, r3, #15
 801190c:	b25b      	sxtb	r3, r3
 801190e:	4313      	orrs	r3, r2
 8011910:	b25b      	sxtb	r3, r3
 8011912:	b2db      	uxtb	r3, r3
 8011914:	697a      	ldr	r2, [r7, #20]
 8011916:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2201      	movs	r2, #1
 801191c:	70da      	strb	r2, [r3, #3]
			break;
 801191e:	e072      	b.n	8011a06 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	899b      	ldrh	r3, [r3, #12]
 8011928:	085b      	lsrs	r3, r3, #1
 801192a:	b29b      	uxth	r3, r3
 801192c:	4619      	mov	r1, r3
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	fbb3 f3f1 	udiv	r3, r3, r1
 8011934:	4413      	add	r3, r2
 8011936:	4619      	mov	r1, r3
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	f7ff fdc5 	bl	80114c8 <move_window>
 801193e:	4603      	mov	r3, r0
 8011940:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011942:	7ffb      	ldrb	r3, [r7, #31]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d15b      	bne.n	8011a00 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	8992      	ldrh	r2, [r2, #12]
 8011956:	fbb3 f0f2 	udiv	r0, r3, r2
 801195a:	fb02 f200 	mul.w	r2, r2, r0
 801195e:	1a9b      	subs	r3, r3, r2
 8011960:	440b      	add	r3, r1
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	b292      	uxth	r2, r2
 8011966:	4611      	mov	r1, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f7ff fb38 	bl	8010fde <st_word>
			fs->wflag = 1;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2201      	movs	r2, #1
 8011972:	70da      	strb	r2, [r3, #3]
			break;
 8011974:	e047      	b.n	8011a06 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	899b      	ldrh	r3, [r3, #12]
 801197e:	089b      	lsrs	r3, r3, #2
 8011980:	b29b      	uxth	r3, r3
 8011982:	4619      	mov	r1, r3
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	fbb3 f3f1 	udiv	r3, r3, r1
 801198a:	4413      	add	r3, r2
 801198c:	4619      	mov	r1, r3
 801198e:	68f8      	ldr	r0, [r7, #12]
 8011990:	f7ff fd9a 	bl	80114c8 <move_window>
 8011994:	4603      	mov	r3, r0
 8011996:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011998:	7ffb      	ldrb	r3, [r7, #31]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d132      	bne.n	8011a04 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	8992      	ldrh	r2, [r2, #12]
 80119b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80119b6:	fb02 f200 	mul.w	r2, r2, r0
 80119ba:	1a9b      	subs	r3, r3, r2
 80119bc:	440b      	add	r3, r1
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff faea 	bl	8010f98 <ld_dword>
 80119c4:	4603      	mov	r3, r0
 80119c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80119ca:	4323      	orrs	r3, r4
 80119cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	68fa      	ldr	r2, [r7, #12]
 80119da:	8992      	ldrh	r2, [r2, #12]
 80119dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80119e0:	fb02 f200 	mul.w	r2, r2, r0
 80119e4:	1a9b      	subs	r3, r3, r2
 80119e6:	440b      	add	r3, r1
 80119e8:	6879      	ldr	r1, [r7, #4]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fb12 	bl	8011014 <st_dword>
			fs->wflag = 1;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2201      	movs	r2, #1
 80119f4:	70da      	strb	r2, [r3, #3]
			break;
 80119f6:	e006      	b.n	8011a06 <put_fat+0x224>
			if (res != FR_OK) break;
 80119f8:	bf00      	nop
 80119fa:	e004      	b.n	8011a06 <put_fat+0x224>
			if (res != FR_OK) break;
 80119fc:	bf00      	nop
 80119fe:	e002      	b.n	8011a06 <put_fat+0x224>
			if (res != FR_OK) break;
 8011a00:	bf00      	nop
 8011a02:	e000      	b.n	8011a06 <put_fat+0x224>
			if (res != FR_OK) break;
 8011a04:	bf00      	nop
		}
	}
	return res;
 8011a06:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3724      	adds	r7, #36	; 0x24
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd90      	pop	{r4, r7, pc}

08011a10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b088      	sub	sp, #32
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	60f8      	str	r0, [r7, #12]
 8011a18:	60b9      	str	r1, [r7, #8]
 8011a1a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d904      	bls.n	8011a36 <remove_chain+0x26>
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	69db      	ldr	r3, [r3, #28]
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d301      	bcc.n	8011a3a <remove_chain+0x2a>
 8011a36:	2302      	movs	r3, #2
 8011a38:	e04b      	b.n	8011ad2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00c      	beq.n	8011a5a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011a40:	f04f 32ff 	mov.w	r2, #4294967295
 8011a44:	6879      	ldr	r1, [r7, #4]
 8011a46:	69b8      	ldr	r0, [r7, #24]
 8011a48:	f7ff fecb 	bl	80117e2 <put_fat>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011a50:	7ffb      	ldrb	r3, [r7, #31]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <remove_chain+0x4a>
 8011a56:	7ffb      	ldrb	r3, [r7, #31]
 8011a58:	e03b      	b.n	8011ad2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011a5a:	68b9      	ldr	r1, [r7, #8]
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f7ff fdf0 	bl	8011642 <get_fat>
 8011a62:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d031      	beq.n	8011ace <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d101      	bne.n	8011a74 <remove_chain+0x64>
 8011a70:	2302      	movs	r3, #2
 8011a72:	e02e      	b.n	8011ad2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a7a:	d101      	bne.n	8011a80 <remove_chain+0x70>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e028      	b.n	8011ad2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011a80:	2200      	movs	r2, #0
 8011a82:	68b9      	ldr	r1, [r7, #8]
 8011a84:	69b8      	ldr	r0, [r7, #24]
 8011a86:	f7ff feac 	bl	80117e2 <put_fat>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011a8e:	7ffb      	ldrb	r3, [r7, #31]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d001      	beq.n	8011a98 <remove_chain+0x88>
 8011a94:	7ffb      	ldrb	r3, [r7, #31]
 8011a96:	e01c      	b.n	8011ad2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	695a      	ldr	r2, [r3, #20]
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	69db      	ldr	r3, [r3, #28]
 8011aa0:	3b02      	subs	r3, #2
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d20b      	bcs.n	8011abe <remove_chain+0xae>
			fs->free_clst++;
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	695b      	ldr	r3, [r3, #20]
 8011aaa:	1c5a      	adds	r2, r3, #1
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	791b      	ldrb	r3, [r3, #4]
 8011ab4:	f043 0301 	orr.w	r3, r3, #1
 8011ab8:	b2da      	uxtb	r2, r3
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	69db      	ldr	r3, [r3, #28]
 8011ac6:	68ba      	ldr	r2, [r7, #8]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d3c6      	bcc.n	8011a5a <remove_chain+0x4a>
 8011acc:	e000      	b.n	8011ad0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011ace:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011ad0:	2300      	movs	r3, #0
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3720      	adds	r7, #32
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b088      	sub	sp, #32
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10d      	bne.n	8011b0c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d004      	beq.n	8011b06 <create_chain+0x2c>
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	69db      	ldr	r3, [r3, #28]
 8011b00:	69ba      	ldr	r2, [r7, #24]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d31b      	bcc.n	8011b3e <create_chain+0x64>
 8011b06:	2301      	movs	r3, #1
 8011b08:	61bb      	str	r3, [r7, #24]
 8011b0a:	e018      	b.n	8011b3e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011b0c:	6839      	ldr	r1, [r7, #0]
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f7ff fd97 	bl	8011642 <get_fat>
 8011b14:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d801      	bhi.n	8011b20 <create_chain+0x46>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e070      	b.n	8011c02 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b26:	d101      	bne.n	8011b2c <create_chain+0x52>
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	e06a      	b.n	8011c02 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	69db      	ldr	r3, [r3, #28]
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d201      	bcs.n	8011b3a <create_chain+0x60>
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	e063      	b.n	8011c02 <create_chain+0x128>
		scl = clst;
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	3301      	adds	r3, #1
 8011b46:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	69db      	ldr	r3, [r3, #28]
 8011b4c:	69fa      	ldr	r2, [r7, #28]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d307      	bcc.n	8011b62 <create_chain+0x88>
				ncl = 2;
 8011b52:	2302      	movs	r3, #2
 8011b54:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011b56:	69fa      	ldr	r2, [r7, #28]
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d901      	bls.n	8011b62 <create_chain+0x88>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e04f      	b.n	8011c02 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011b62:	69f9      	ldr	r1, [r7, #28]
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7ff fd6c 	bl	8011642 <get_fat>
 8011b6a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d00e      	beq.n	8011b90 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d003      	beq.n	8011b80 <create_chain+0xa6>
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7e:	d101      	bne.n	8011b84 <create_chain+0xaa>
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	e03e      	b.n	8011c02 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011b84:	69fa      	ldr	r2, [r7, #28]
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d1da      	bne.n	8011b42 <create_chain+0x68>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	e038      	b.n	8011c02 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011b90:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011b92:	f04f 32ff 	mov.w	r2, #4294967295
 8011b96:	69f9      	ldr	r1, [r7, #28]
 8011b98:	6938      	ldr	r0, [r7, #16]
 8011b9a:	f7ff fe22 	bl	80117e2 <put_fat>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011ba2:	7dfb      	ldrb	r3, [r7, #23]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d109      	bne.n	8011bbc <create_chain+0xe2>
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d006      	beq.n	8011bbc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011bae:	69fa      	ldr	r2, [r7, #28]
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	6938      	ldr	r0, [r7, #16]
 8011bb4:	f7ff fe15 	bl	80117e2 <put_fat>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011bbc:	7dfb      	ldrb	r3, [r7, #23]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d116      	bne.n	8011bf0 <create_chain+0x116>
		fs->last_clst = ncl;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	69fa      	ldr	r2, [r7, #28]
 8011bc6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	695a      	ldr	r2, [r3, #20]
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	3b02      	subs	r3, #2
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d804      	bhi.n	8011be0 <create_chain+0x106>
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	695b      	ldr	r3, [r3, #20]
 8011bda:	1e5a      	subs	r2, r3, #1
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	791b      	ldrb	r3, [r3, #4]
 8011be4:	f043 0301 	orr.w	r3, r3, #1
 8011be8:	b2da      	uxtb	r2, r3
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	711a      	strb	r2, [r3, #4]
 8011bee:	e007      	b.n	8011c00 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011bf0:	7dfb      	ldrb	r3, [r7, #23]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d102      	bne.n	8011bfc <create_chain+0x122>
 8011bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bfa:	e000      	b.n	8011bfe <create_chain+0x124>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011c00:	69fb      	ldr	r3, [r7, #28]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3720      	adds	r7, #32
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	b087      	sub	sp, #28
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1e:	3304      	adds	r3, #4
 8011c20:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	899b      	ldrh	r3, [r3, #12]
 8011c26:	461a      	mov	r2, r3
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	8952      	ldrh	r2, [r2, #10]
 8011c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	1d1a      	adds	r2, r3, #4
 8011c3c:	613a      	str	r2, [r7, #16]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <clmt_clust+0x42>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	e010      	b.n	8011c6e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011c4c:	697a      	ldr	r2, [r7, #20]
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d307      	bcc.n	8011c64 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011c54:	697a      	ldr	r2, [r7, #20]
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	1ad3      	subs	r3, r2, r3
 8011c5a:	617b      	str	r3, [r7, #20]
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c62:	e7e9      	b.n	8011c38 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011c64:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	4413      	add	r3, r2
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	371c      	adds	r7, #28
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr

08011c7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b086      	sub	sp, #24
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c90:	d204      	bcs.n	8011c9c <dir_sdi+0x22>
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	f003 031f 	and.w	r3, r3, #31
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d001      	beq.n	8011ca0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	e071      	b.n	8011d84 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d106      	bne.n	8011cc0 <dir_sdi+0x46>
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	d902      	bls.n	8011cc0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cbe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10c      	bne.n	8011ce0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	095b      	lsrs	r3, r3, #5
 8011cca:	693a      	ldr	r2, [r7, #16]
 8011ccc:	8912      	ldrh	r2, [r2, #8]
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d301      	bcc.n	8011cd6 <dir_sdi+0x5c>
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	e056      	b.n	8011d84 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	61da      	str	r2, [r3, #28]
 8011cde:	e02d      	b.n	8011d3c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	895b      	ldrh	r3, [r3, #10]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	899b      	ldrh	r3, [r3, #12]
 8011cea:	fb03 f302 	mul.w	r3, r3, r2
 8011cee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011cf0:	e019      	b.n	8011d26 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6979      	ldr	r1, [r7, #20]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7ff fca3 	bl	8011642 <get_fat>
 8011cfc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d04:	d101      	bne.n	8011d0a <dir_sdi+0x90>
 8011d06:	2301      	movs	r3, #1
 8011d08:	e03c      	b.n	8011d84 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d904      	bls.n	8011d1a <dir_sdi+0xa0>
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	69db      	ldr	r3, [r3, #28]
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d301      	bcc.n	8011d1e <dir_sdi+0xa4>
 8011d1a:	2302      	movs	r3, #2
 8011d1c:	e032      	b.n	8011d84 <dir_sdi+0x10a>
			ofs -= csz;
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d26:	683a      	ldr	r2, [r7, #0]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d2e1      	bcs.n	8011cf2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011d2e:	6979      	ldr	r1, [r7, #20]
 8011d30:	6938      	ldr	r0, [r7, #16]
 8011d32:	f7ff fc67 	bl	8011604 <clust2sect>
 8011d36:	4602      	mov	r2, r0
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	697a      	ldr	r2, [r7, #20]
 8011d40:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	69db      	ldr	r3, [r3, #28]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d101      	bne.n	8011d4e <dir_sdi+0xd4>
 8011d4a:	2302      	movs	r3, #2
 8011d4c:	e01a      	b.n	8011d84 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	69da      	ldr	r2, [r3, #28]
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	899b      	ldrh	r3, [r3, #12]
 8011d56:	4619      	mov	r1, r3
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d5e:	441a      	add	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	899b      	ldrh	r3, [r3, #12]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d76:	fb02 f200 	mul.w	r2, r2, r0
 8011d7a:	1a9b      	subs	r3, r3, r2
 8011d7c:	18ca      	adds	r2, r1, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3718      	adds	r7, #24
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	3320      	adds	r3, #32
 8011da2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	69db      	ldr	r3, [r3, #28]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d003      	beq.n	8011db4 <dir_next+0x28>
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011db2:	d301      	bcc.n	8011db8 <dir_next+0x2c>
 8011db4:	2304      	movs	r3, #4
 8011db6:	e0bb      	b.n	8011f30 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	899b      	ldrh	r3, [r3, #12]
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dc4:	fb02 f201 	mul.w	r2, r2, r1
 8011dc8:	1a9b      	subs	r3, r3, r2
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f040 809d 	bne.w	8011f0a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	69db      	ldr	r3, [r3, #28]
 8011dd4:	1c5a      	adds	r2, r3, #1
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	699b      	ldr	r3, [r3, #24]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d10b      	bne.n	8011dfa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	095b      	lsrs	r3, r3, #5
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	8912      	ldrh	r2, [r2, #8]
 8011dea:	4293      	cmp	r3, r2
 8011dec:	f0c0 808d 	bcc.w	8011f0a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2200      	movs	r2, #0
 8011df4:	61da      	str	r2, [r3, #28]
 8011df6:	2304      	movs	r3, #4
 8011df8:	e09a      	b.n	8011f30 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	899b      	ldrh	r3, [r3, #12]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	8952      	ldrh	r2, [r2, #10]
 8011e0a:	3a01      	subs	r2, #1
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d17b      	bne.n	8011f0a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	699b      	ldr	r3, [r3, #24]
 8011e18:	4619      	mov	r1, r3
 8011e1a:	4610      	mov	r0, r2
 8011e1c:	f7ff fc11 	bl	8011642 <get_fat>
 8011e20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d801      	bhi.n	8011e2c <dir_next+0xa0>
 8011e28:	2302      	movs	r3, #2
 8011e2a:	e081      	b.n	8011f30 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e32:	d101      	bne.n	8011e38 <dir_next+0xac>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e07b      	b.n	8011f30 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	69db      	ldr	r3, [r3, #28]
 8011e3c:	697a      	ldr	r2, [r7, #20]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d359      	bcc.n	8011ef6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d104      	bne.n	8011e52 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	61da      	str	r2, [r3, #28]
 8011e4e:	2304      	movs	r3, #4
 8011e50:	e06e      	b.n	8011f30 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	699b      	ldr	r3, [r3, #24]
 8011e58:	4619      	mov	r1, r3
 8011e5a:	4610      	mov	r0, r2
 8011e5c:	f7ff fe3d 	bl	8011ada <create_chain>
 8011e60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d101      	bne.n	8011e6c <dir_next+0xe0>
 8011e68:	2307      	movs	r3, #7
 8011e6a:	e061      	b.n	8011f30 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d101      	bne.n	8011e76 <dir_next+0xea>
 8011e72:	2302      	movs	r3, #2
 8011e74:	e05c      	b.n	8011f30 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e7c:	d101      	bne.n	8011e82 <dir_next+0xf6>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e056      	b.n	8011f30 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011e82:	68f8      	ldr	r0, [r7, #12]
 8011e84:	f7ff fadc 	bl	8011440 <sync_window>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d001      	beq.n	8011e92 <dir_next+0x106>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e04e      	b.n	8011f30 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	899b      	ldrh	r3, [r3, #12]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	2100      	movs	r1, #0
 8011ea0:	f7ff f905 	bl	80110ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	613b      	str	r3, [r7, #16]
 8011ea8:	6979      	ldr	r1, [r7, #20]
 8011eaa:	68f8      	ldr	r0, [r7, #12]
 8011eac:	f7ff fbaa 	bl	8011604 <clust2sect>
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8011eb6:	e012      	b.n	8011ede <dir_next+0x152>
						fs->wflag = 1;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f7ff fabe 	bl	8011440 <sync_window>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <dir_next+0x142>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e030      	b.n	8011f30 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	613b      	str	r3, [r7, #16]
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ed8:	1c5a      	adds	r2, r3, #1
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	635a      	str	r2, [r3, #52]	; 0x34
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	895b      	ldrh	r3, [r3, #10]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d3e6      	bcc.n	8011eb8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	1ad2      	subs	r2, r2, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	697a      	ldr	r2, [r7, #20]
 8011efa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011efc:	6979      	ldr	r1, [r7, #20]
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f7ff fb80 	bl	8011604 <clust2sect>
 8011f04:	4602      	mov	r2, r0
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	899b      	ldrh	r3, [r3, #12]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f22:	fb02 f200 	mul.w	r2, r2, r0
 8011f26:	1a9b      	subs	r3, r3, r2
 8011f28:	18ca      	adds	r2, r1, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3718      	adds	r7, #24
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b086      	sub	sp, #24
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011f48:	2100      	movs	r1, #0
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7ff fe95 	bl	8011c7a <dir_sdi>
 8011f50:	4603      	mov	r3, r0
 8011f52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f54:	7dfb      	ldrb	r3, [r7, #23]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d12b      	bne.n	8011fb2 <dir_alloc+0x7a>
		n = 0;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	69db      	ldr	r3, [r3, #28]
 8011f62:	4619      	mov	r1, r3
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f7ff faaf 	bl	80114c8 <move_window>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f6e:	7dfb      	ldrb	r3, [r7, #23]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d11d      	bne.n	8011fb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6a1b      	ldr	r3, [r3, #32]
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2be5      	cmp	r3, #229	; 0xe5
 8011f7c:	d004      	beq.n	8011f88 <dir_alloc+0x50>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6a1b      	ldr	r3, [r3, #32]
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d107      	bne.n	8011f98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	613b      	str	r3, [r7, #16]
 8011f8e:	693a      	ldr	r2, [r7, #16]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d102      	bne.n	8011f9c <dir_alloc+0x64>
 8011f96:	e00c      	b.n	8011fb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011f98:	2300      	movs	r3, #0
 8011f9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011f9c:	2101      	movs	r1, #1
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ff fef4 	bl	8011d8c <dir_next>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011fa8:	7dfb      	ldrb	r3, [r7, #23]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d0d7      	beq.n	8011f5e <dir_alloc+0x26>
 8011fae:	e000      	b.n	8011fb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011fb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011fb2:	7dfb      	ldrb	r3, [r7, #23]
 8011fb4:	2b04      	cmp	r3, #4
 8011fb6:	d101      	bne.n	8011fbc <dir_alloc+0x84>
 8011fb8:	2307      	movs	r3, #7
 8011fba:	75fb      	strb	r3, [r7, #23]
	return res;
 8011fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3718      	adds	r7, #24
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}

08011fc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011fc6:	b580      	push	{r7, lr}
 8011fc8:	b084      	sub	sp, #16
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
 8011fce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	331a      	adds	r3, #26
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fe ffc7 	bl	8010f68 <ld_word>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	2b03      	cmp	r3, #3
 8011fe4:	d109      	bne.n	8011ffa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	3314      	adds	r3, #20
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fe ffbc 	bl	8010f68 <ld_word>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	041b      	lsls	r3, r3, #16
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	331a      	adds	r3, #26
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	b292      	uxth	r2, r2
 8012018:	4611      	mov	r1, r2
 801201a:	4618      	mov	r0, r3
 801201c:	f7fe ffdf 	bl	8010fde <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	2b03      	cmp	r3, #3
 8012026:	d109      	bne.n	801203c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	f103 0214 	add.w	r2, r3, #20
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	0c1b      	lsrs	r3, r3, #16
 8012032:	b29b      	uxth	r3, r3
 8012034:	4619      	mov	r1, r3
 8012036:	4610      	mov	r0, r2
 8012038:	f7fe ffd1 	bl	8010fde <st_word>
	}
}
 801203c:	bf00      	nop
 801203e:	3710      	adds	r7, #16
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b086      	sub	sp, #24
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801204e:	2304      	movs	r3, #4
 8012050:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012058:	e03c      	b.n	80120d4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	69db      	ldr	r3, [r3, #28]
 801205e:	4619      	mov	r1, r3
 8012060:	6938      	ldr	r0, [r7, #16]
 8012062:	f7ff fa31 	bl	80114c8 <move_window>
 8012066:	4603      	mov	r3, r0
 8012068:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801206a:	7dfb      	ldrb	r3, [r7, #23]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d136      	bne.n	80120de <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6a1b      	ldr	r3, [r3, #32]
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012078:	7bfb      	ldrb	r3, [r7, #15]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d102      	bne.n	8012084 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801207e:	2304      	movs	r3, #4
 8012080:	75fb      	strb	r3, [r7, #23]
 8012082:	e031      	b.n	80120e8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6a1b      	ldr	r3, [r3, #32]
 8012088:	330b      	adds	r3, #11
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012090:	73bb      	strb	r3, [r7, #14]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	7bba      	ldrb	r2, [r7, #14]
 8012096:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012098:	7bfb      	ldrb	r3, [r7, #15]
 801209a:	2be5      	cmp	r3, #229	; 0xe5
 801209c:	d011      	beq.n	80120c2 <dir_read+0x7e>
 801209e:	7bfb      	ldrb	r3, [r7, #15]
 80120a0:	2b2e      	cmp	r3, #46	; 0x2e
 80120a2:	d00e      	beq.n	80120c2 <dir_read+0x7e>
 80120a4:	7bbb      	ldrb	r3, [r7, #14]
 80120a6:	2b0f      	cmp	r3, #15
 80120a8:	d00b      	beq.n	80120c2 <dir_read+0x7e>
 80120aa:	7bbb      	ldrb	r3, [r7, #14]
 80120ac:	f023 0320 	bic.w	r3, r3, #32
 80120b0:	2b08      	cmp	r3, #8
 80120b2:	bf0c      	ite	eq
 80120b4:	2301      	moveq	r3, #1
 80120b6:	2300      	movne	r3, #0
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	461a      	mov	r2, r3
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	4293      	cmp	r3, r2
 80120c0:	d00f      	beq.n	80120e2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80120c2:	2100      	movs	r1, #0
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f7ff fe61 	bl	8011d8c <dir_next>
 80120ca:	4603      	mov	r3, r0
 80120cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120ce:	7dfb      	ldrb	r3, [r7, #23]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d108      	bne.n	80120e6 <dir_read+0xa2>
	while (dp->sect) {
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	69db      	ldr	r3, [r3, #28]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1be      	bne.n	801205a <dir_read+0x16>
 80120dc:	e004      	b.n	80120e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80120de:	bf00      	nop
 80120e0:	e002      	b.n	80120e8 <dir_read+0xa4>
				break;
 80120e2:	bf00      	nop
 80120e4:	e000      	b.n	80120e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80120e6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80120e8:	7dfb      	ldrb	r3, [r7, #23]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d002      	beq.n	80120f4 <dir_read+0xb0>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	61da      	str	r2, [r3, #28]
	return res;
 80120f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3718      	adds	r7, #24
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}

080120fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80120fe:	b580      	push	{r7, lr}
 8012100:	b086      	sub	sp, #24
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801210c:	2100      	movs	r1, #0
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff fdb3 	bl	8011c7a <dir_sdi>
 8012114:	4603      	mov	r3, r0
 8012116:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d001      	beq.n	8012122 <dir_find+0x24>
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	e03e      	b.n	80121a0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	69db      	ldr	r3, [r3, #28]
 8012126:	4619      	mov	r1, r3
 8012128:	6938      	ldr	r0, [r7, #16]
 801212a:	f7ff f9cd 	bl	80114c8 <move_window>
 801212e:	4603      	mov	r3, r0
 8012130:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012132:	7dfb      	ldrb	r3, [r7, #23]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d12f      	bne.n	8012198 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a1b      	ldr	r3, [r3, #32]
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d102      	bne.n	801214c <dir_find+0x4e>
 8012146:	2304      	movs	r3, #4
 8012148:	75fb      	strb	r3, [r7, #23]
 801214a:	e028      	b.n	801219e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a1b      	ldr	r3, [r3, #32]
 8012150:	330b      	adds	r3, #11
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012158:	b2da      	uxtb	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6a1b      	ldr	r3, [r3, #32]
 8012162:	330b      	adds	r3, #11
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	f003 0308 	and.w	r3, r3, #8
 801216a:	2b00      	cmp	r3, #0
 801216c:	d10a      	bne.n	8012184 <dir_find+0x86>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6a18      	ldr	r0, [r3, #32]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	3324      	adds	r3, #36	; 0x24
 8012176:	220b      	movs	r2, #11
 8012178:	4619      	mov	r1, r3
 801217a:	f7fe ffb2 	bl	80110e2 <mem_cmp>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d00b      	beq.n	801219c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012184:	2100      	movs	r1, #0
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff fe00 	bl	8011d8c <dir_next>
 801218c:	4603      	mov	r3, r0
 801218e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012190:	7dfb      	ldrb	r3, [r7, #23]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d0c5      	beq.n	8012122 <dir_find+0x24>
 8012196:	e002      	b.n	801219e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012198:	bf00      	nop
 801219a:	e000      	b.n	801219e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801219c:	bf00      	nop

	return res;
 801219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3718      	adds	r7, #24
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80121b6:	2101      	movs	r1, #1
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff febd 	bl	8011f38 <dir_alloc>
 80121be:	4603      	mov	r3, r0
 80121c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80121c2:	7bfb      	ldrb	r3, [r7, #15]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d11c      	bne.n	8012202 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	69db      	ldr	r3, [r3, #28]
 80121cc:	4619      	mov	r1, r3
 80121ce:	68b8      	ldr	r0, [r7, #8]
 80121d0:	f7ff f97a 	bl	80114c8 <move_window>
 80121d4:	4603      	mov	r3, r0
 80121d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80121d8:	7bfb      	ldrb	r3, [r7, #15]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d111      	bne.n	8012202 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6a1b      	ldr	r3, [r3, #32]
 80121e2:	2220      	movs	r2, #32
 80121e4:	2100      	movs	r1, #0
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7fe ff61 	bl	80110ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6a18      	ldr	r0, [r3, #32]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	3324      	adds	r3, #36	; 0x24
 80121f4:	220b      	movs	r2, #11
 80121f6:	4619      	mov	r1, r3
 80121f8:	f7fe ff38 	bl	801106c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	2201      	movs	r2, #1
 8012200:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012202:	7bfb      	ldrb	r3, [r7, #15]
}
 8012204:	4618      	mov	r0, r3
 8012206:	3710      	adds	r7, #16
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	69db      	ldr	r3, [r3, #28]
 801221e:	4619      	mov	r1, r3
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f7ff f951 	bl	80114c8 <move_window>
 8012226:	4603      	mov	r3, r0
 8012228:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801222a:	7afb      	ldrb	r3, [r7, #11]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d106      	bne.n	801223e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	6a1b      	ldr	r3, [r3, #32]
 8012234:	22e5      	movs	r2, #229	; 0xe5
 8012236:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2201      	movs	r2, #1
 801223c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801223e:	7afb      	ldrb	r3, [r7, #11]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b088      	sub	sp, #32
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	60fb      	str	r3, [r7, #12]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	3324      	adds	r3, #36	; 0x24
 801225c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801225e:	220b      	movs	r2, #11
 8012260:	2120      	movs	r1, #32
 8012262:	68b8      	ldr	r0, [r7, #8]
 8012264:	f7fe ff23 	bl	80110ae <mem_set>
	si = i = 0; ni = 8;
 8012268:	2300      	movs	r3, #0
 801226a:	613b      	str	r3, [r7, #16]
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	617b      	str	r3, [r7, #20]
 8012270:	2308      	movs	r3, #8
 8012272:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	4413      	add	r3, r2
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b2e      	cmp	r3, #46	; 0x2e
 801227e:	d12f      	bne.n	80122e0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	617a      	str	r2, [r7, #20]
 8012286:	68fa      	ldr	r2, [r7, #12]
 8012288:	4413      	add	r3, r2
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801228e:	7ffb      	ldrb	r3, [r7, #31]
 8012290:	2b2e      	cmp	r3, #46	; 0x2e
 8012292:	d10a      	bne.n	80122aa <create_name+0x62>
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	2b02      	cmp	r3, #2
 8012298:	d807      	bhi.n	80122aa <create_name+0x62>
			sfn[i++] = c;
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	1c5a      	adds	r2, r3, #1
 801229e:	613a      	str	r2, [r7, #16]
 80122a0:	68ba      	ldr	r2, [r7, #8]
 80122a2:	4413      	add	r3, r2
 80122a4:	7ffa      	ldrb	r2, [r7, #31]
 80122a6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80122a8:	e7ea      	b.n	8012280 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80122aa:	7ffb      	ldrb	r3, [r7, #31]
 80122ac:	2b2f      	cmp	r3, #47	; 0x2f
 80122ae:	d007      	beq.n	80122c0 <create_name+0x78>
 80122b0:	7ffb      	ldrb	r3, [r7, #31]
 80122b2:	2b5c      	cmp	r3, #92	; 0x5c
 80122b4:	d004      	beq.n	80122c0 <create_name+0x78>
 80122b6:	7ffb      	ldrb	r3, [r7, #31]
 80122b8:	2b20      	cmp	r3, #32
 80122ba:	d901      	bls.n	80122c0 <create_name+0x78>
 80122bc:	2306      	movs	r3, #6
 80122be:	e084      	b.n	80123ca <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	441a      	add	r2, r3
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80122ca:	7ffb      	ldrb	r3, [r7, #31]
 80122cc:	2b20      	cmp	r3, #32
 80122ce:	d801      	bhi.n	80122d4 <create_name+0x8c>
 80122d0:	2224      	movs	r2, #36	; 0x24
 80122d2:	e000      	b.n	80122d6 <create_name+0x8e>
 80122d4:	2220      	movs	r2, #32
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	330b      	adds	r3, #11
 80122da:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	e074      	b.n	80123ca <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	1c5a      	adds	r2, r3, #1
 80122e4:	617a      	str	r2, [r7, #20]
 80122e6:	68fa      	ldr	r2, [r7, #12]
 80122e8:	4413      	add	r3, r2
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80122ee:	7ffb      	ldrb	r3, [r7, #31]
 80122f0:	2b20      	cmp	r3, #32
 80122f2:	d94e      	bls.n	8012392 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80122f4:	7ffb      	ldrb	r3, [r7, #31]
 80122f6:	2b2f      	cmp	r3, #47	; 0x2f
 80122f8:	d006      	beq.n	8012308 <create_name+0xc0>
 80122fa:	7ffb      	ldrb	r3, [r7, #31]
 80122fc:	2b5c      	cmp	r3, #92	; 0x5c
 80122fe:	d110      	bne.n	8012322 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012300:	e002      	b.n	8012308 <create_name+0xc0>
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	3301      	adds	r3, #1
 8012306:	617b      	str	r3, [r7, #20]
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	4413      	add	r3, r2
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	2b2f      	cmp	r3, #47	; 0x2f
 8012312:	d0f6      	beq.n	8012302 <create_name+0xba>
 8012314:	68fa      	ldr	r2, [r7, #12]
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	4413      	add	r3, r2
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b5c      	cmp	r3, #92	; 0x5c
 801231e:	d0f0      	beq.n	8012302 <create_name+0xba>
			break;
 8012320:	e038      	b.n	8012394 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012322:	7ffb      	ldrb	r3, [r7, #31]
 8012324:	2b2e      	cmp	r3, #46	; 0x2e
 8012326:	d003      	beq.n	8012330 <create_name+0xe8>
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	69bb      	ldr	r3, [r7, #24]
 801232c:	429a      	cmp	r2, r3
 801232e:	d30c      	bcc.n	801234a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	2b0b      	cmp	r3, #11
 8012334:	d002      	beq.n	801233c <create_name+0xf4>
 8012336:	7ffb      	ldrb	r3, [r7, #31]
 8012338:	2b2e      	cmp	r3, #46	; 0x2e
 801233a:	d001      	beq.n	8012340 <create_name+0xf8>
 801233c:	2306      	movs	r3, #6
 801233e:	e044      	b.n	80123ca <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012340:	2308      	movs	r3, #8
 8012342:	613b      	str	r3, [r7, #16]
 8012344:	230b      	movs	r3, #11
 8012346:	61bb      	str	r3, [r7, #24]
			continue;
 8012348:	e022      	b.n	8012390 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801234a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801234e:	2b00      	cmp	r3, #0
 8012350:	da04      	bge.n	801235c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012352:	7ffb      	ldrb	r3, [r7, #31]
 8012354:	3b80      	subs	r3, #128	; 0x80
 8012356:	4a1f      	ldr	r2, [pc, #124]	; (80123d4 <create_name+0x18c>)
 8012358:	5cd3      	ldrb	r3, [r2, r3]
 801235a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801235c:	7ffb      	ldrb	r3, [r7, #31]
 801235e:	4619      	mov	r1, r3
 8012360:	481d      	ldr	r0, [pc, #116]	; (80123d8 <create_name+0x190>)
 8012362:	f7fe fee5 	bl	8011130 <chk_chr>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <create_name+0x128>
 801236c:	2306      	movs	r3, #6
 801236e:	e02c      	b.n	80123ca <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012370:	7ffb      	ldrb	r3, [r7, #31]
 8012372:	2b60      	cmp	r3, #96	; 0x60
 8012374:	d905      	bls.n	8012382 <create_name+0x13a>
 8012376:	7ffb      	ldrb	r3, [r7, #31]
 8012378:	2b7a      	cmp	r3, #122	; 0x7a
 801237a:	d802      	bhi.n	8012382 <create_name+0x13a>
 801237c:	7ffb      	ldrb	r3, [r7, #31]
 801237e:	3b20      	subs	r3, #32
 8012380:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	1c5a      	adds	r2, r3, #1
 8012386:	613a      	str	r2, [r7, #16]
 8012388:	68ba      	ldr	r2, [r7, #8]
 801238a:	4413      	add	r3, r2
 801238c:	7ffa      	ldrb	r2, [r7, #31]
 801238e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012390:	e7a6      	b.n	80122e0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012392:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012394:	68fa      	ldr	r2, [r7, #12]
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	441a      	add	r2, r3
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d101      	bne.n	80123a8 <create_name+0x160>
 80123a4:	2306      	movs	r3, #6
 80123a6:	e010      	b.n	80123ca <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	2be5      	cmp	r3, #229	; 0xe5
 80123ae:	d102      	bne.n	80123b6 <create_name+0x16e>
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2205      	movs	r2, #5
 80123b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80123b6:	7ffb      	ldrb	r3, [r7, #31]
 80123b8:	2b20      	cmp	r3, #32
 80123ba:	d801      	bhi.n	80123c0 <create_name+0x178>
 80123bc:	2204      	movs	r2, #4
 80123be:	e000      	b.n	80123c2 <create_name+0x17a>
 80123c0:	2200      	movs	r2, #0
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	330b      	adds	r3, #11
 80123c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80123c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3720      	adds	r7, #32
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	08019a24 	.word	0x08019a24
 80123d8:	080199d4 	.word	0x080199d4

080123dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b2f      	cmp	r3, #47	; 0x2f
 80123f6:	d00b      	beq.n	8012410 <follow_path+0x34>
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	2b5c      	cmp	r3, #92	; 0x5c
 80123fe:	d007      	beq.n	8012410 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	699a      	ldr	r2, [r3, #24]
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	609a      	str	r2, [r3, #8]
 8012408:	e00d      	b.n	8012426 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	3301      	adds	r3, #1
 801240e:	603b      	str	r3, [r7, #0]
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	2b2f      	cmp	r3, #47	; 0x2f
 8012416:	d0f8      	beq.n	801240a <follow_path+0x2e>
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	2b5c      	cmp	r3, #92	; 0x5c
 801241e:	d0f4      	beq.n	801240a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	2200      	movs	r2, #0
 8012424:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	2b1f      	cmp	r3, #31
 801242c:	d80a      	bhi.n	8012444 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2280      	movs	r2, #128	; 0x80
 8012432:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012436:	2100      	movs	r1, #0
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff fc1e 	bl	8011c7a <dir_sdi>
 801243e:	4603      	mov	r3, r0
 8012440:	75fb      	strb	r3, [r7, #23]
 8012442:	e05b      	b.n	80124fc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012444:	463b      	mov	r3, r7
 8012446:	4619      	mov	r1, r3
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff fefd 	bl	8012248 <create_name>
 801244e:	4603      	mov	r3, r0
 8012450:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012452:	7dfb      	ldrb	r3, [r7, #23]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d14c      	bne.n	80124f2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7ff fe50 	bl	80120fe <dir_find>
 801245e:	4603      	mov	r3, r0
 8012460:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012468:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801246a:	7dfb      	ldrb	r3, [r7, #23]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d01b      	beq.n	80124a8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012470:	7dfb      	ldrb	r3, [r7, #23]
 8012472:	2b04      	cmp	r3, #4
 8012474:	d13f      	bne.n	80124f6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012476:	7afb      	ldrb	r3, [r7, #11]
 8012478:	f003 0320 	and.w	r3, r3, #32
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00b      	beq.n	8012498 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012480:	7afb      	ldrb	r3, [r7, #11]
 8012482:	f003 0304 	and.w	r3, r3, #4
 8012486:	2b00      	cmp	r3, #0
 8012488:	d031      	beq.n	80124ee <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2280      	movs	r2, #128	; 0x80
 801248e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012496:	e02e      	b.n	80124f6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012498:	7afb      	ldrb	r3, [r7, #11]
 801249a:	f003 0304 	and.w	r3, r3, #4
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d129      	bne.n	80124f6 <follow_path+0x11a>
 80124a2:	2305      	movs	r3, #5
 80124a4:	75fb      	strb	r3, [r7, #23]
				break;
 80124a6:	e026      	b.n	80124f6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124a8:	7afb      	ldrb	r3, [r7, #11]
 80124aa:	f003 0304 	and.w	r3, r3, #4
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d123      	bne.n	80124fa <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	799b      	ldrb	r3, [r3, #6]
 80124b6:	f003 0310 	and.w	r3, r3, #16
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d102      	bne.n	80124c4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80124be:	2305      	movs	r3, #5
 80124c0:	75fb      	strb	r3, [r7, #23]
 80124c2:	e01b      	b.n	80124fc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	8992      	ldrh	r2, [r2, #12]
 80124d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80124d6:	fb02 f200 	mul.w	r2, r2, r0
 80124da:	1a9b      	subs	r3, r3, r2
 80124dc:	440b      	add	r3, r1
 80124de:	4619      	mov	r1, r3
 80124e0:	68f8      	ldr	r0, [r7, #12]
 80124e2:	f7ff fd70 	bl	8011fc6 <ld_clust>
 80124e6:	4602      	mov	r2, r0
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	609a      	str	r2, [r3, #8]
 80124ec:	e7aa      	b.n	8012444 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80124ee:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124f0:	e7a8      	b.n	8012444 <follow_path+0x68>
			if (res != FR_OK) break;
 80124f2:	bf00      	nop
 80124f4:	e002      	b.n	80124fc <follow_path+0x120>
				break;
 80124f6:	bf00      	nop
 80124f8:	e000      	b.n	80124fc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124fa:	bf00      	nop
			}
		}
	}

	return res;
 80124fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3718      	adds	r7, #24
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012506:	b480      	push	{r7}
 8012508:	b087      	sub	sp, #28
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801250e:	f04f 33ff 	mov.w	r3, #4294967295
 8012512:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d031      	beq.n	8012580 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	617b      	str	r3, [r7, #20]
 8012522:	e002      	b.n	801252a <get_ldnumber+0x24>
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	3301      	adds	r3, #1
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	2b20      	cmp	r3, #32
 8012530:	d903      	bls.n	801253a <get_ldnumber+0x34>
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b3a      	cmp	r3, #58	; 0x3a
 8012538:	d1f4      	bne.n	8012524 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	2b3a      	cmp	r3, #58	; 0x3a
 8012540:	d11c      	bne.n	801257c <get_ldnumber+0x76>
			tp = *path;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	1c5a      	adds	r2, r3, #1
 801254c:	60fa      	str	r2, [r7, #12]
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	3b30      	subs	r3, #48	; 0x30
 8012552:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	2b09      	cmp	r3, #9
 8012558:	d80e      	bhi.n	8012578 <get_ldnumber+0x72>
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	429a      	cmp	r2, r3
 8012560:	d10a      	bne.n	8012578 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d107      	bne.n	8012578 <get_ldnumber+0x72>
					vol = (int)i;
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	3301      	adds	r3, #1
 8012570:	617b      	str	r3, [r7, #20]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	697a      	ldr	r2, [r7, #20]
 8012576:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	e002      	b.n	8012582 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801257c:	2300      	movs	r3, #0
 801257e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012580:	693b      	ldr	r3, [r7, #16]
}
 8012582:	4618      	mov	r0, r3
 8012584:	371c      	adds	r7, #28
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
	...

08012590 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2200      	movs	r2, #0
 801259e:	70da      	strb	r2, [r3, #3]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f04f 32ff 	mov.w	r2, #4294967295
 80125a6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80125a8:	6839      	ldr	r1, [r7, #0]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7fe ff8c 	bl	80114c8 <move_window>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <check_fs+0x2a>
 80125b6:	2304      	movs	r3, #4
 80125b8:	e038      	b.n	801262c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	3338      	adds	r3, #56	; 0x38
 80125be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fe fcd0 	bl	8010f68 <ld_word>
 80125c8:	4603      	mov	r3, r0
 80125ca:	461a      	mov	r2, r3
 80125cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d001      	beq.n	80125d8 <check_fs+0x48>
 80125d4:	2303      	movs	r3, #3
 80125d6:	e029      	b.n	801262c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125de:	2be9      	cmp	r3, #233	; 0xe9
 80125e0:	d009      	beq.n	80125f6 <check_fs+0x66>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125e8:	2beb      	cmp	r3, #235	; 0xeb
 80125ea:	d11e      	bne.n	801262a <check_fs+0x9a>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80125f2:	2b90      	cmp	r3, #144	; 0x90
 80125f4:	d119      	bne.n	801262a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	3338      	adds	r3, #56	; 0x38
 80125fa:	3336      	adds	r3, #54	; 0x36
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7fe fccb 	bl	8010f98 <ld_dword>
 8012602:	4603      	mov	r3, r0
 8012604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012608:	4a0a      	ldr	r2, [pc, #40]	; (8012634 <check_fs+0xa4>)
 801260a:	4293      	cmp	r3, r2
 801260c:	d101      	bne.n	8012612 <check_fs+0x82>
 801260e:	2300      	movs	r3, #0
 8012610:	e00c      	b.n	801262c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3338      	adds	r3, #56	; 0x38
 8012616:	3352      	adds	r3, #82	; 0x52
 8012618:	4618      	mov	r0, r3
 801261a:	f7fe fcbd 	bl	8010f98 <ld_dword>
 801261e:	4602      	mov	r2, r0
 8012620:	4b05      	ldr	r3, [pc, #20]	; (8012638 <check_fs+0xa8>)
 8012622:	429a      	cmp	r2, r3
 8012624:	d101      	bne.n	801262a <check_fs+0x9a>
 8012626:	2300      	movs	r3, #0
 8012628:	e000      	b.n	801262c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801262a:	2302      	movs	r3, #2
}
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	00544146 	.word	0x00544146
 8012638:	33544146 	.word	0x33544146

0801263c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b096      	sub	sp, #88	; 0x58
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	4613      	mov	r3, r2
 8012648:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2200      	movs	r2, #0
 801264e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012650:	68f8      	ldr	r0, [r7, #12]
 8012652:	f7ff ff58 	bl	8012506 <get_ldnumber>
 8012656:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801265a:	2b00      	cmp	r3, #0
 801265c:	da01      	bge.n	8012662 <find_volume+0x26>
 801265e:	230b      	movs	r3, #11
 8012660:	e268      	b.n	8012b34 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012662:	4ab0      	ldr	r2, [pc, #704]	; (8012924 <find_volume+0x2e8>)
 8012664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801266a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <find_volume+0x3a>
 8012672:	230c      	movs	r3, #12
 8012674:	e25e      	b.n	8012b34 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801267a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801267c:	79fb      	ldrb	r3, [r7, #7]
 801267e:	f023 0301 	bic.w	r3, r3, #1
 8012682:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d01a      	beq.n	80126c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268e:	785b      	ldrb	r3, [r3, #1]
 8012690:	4618      	mov	r0, r3
 8012692:	f7fe fbcb 	bl	8010e2c <disk_status>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801269c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126a0:	f003 0301 	and.w	r3, r3, #1
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d10c      	bne.n	80126c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80126a8:	79fb      	ldrb	r3, [r7, #7]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d007      	beq.n	80126be <find_volume+0x82>
 80126ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126b2:	f003 0304 	and.w	r3, r3, #4
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d001      	beq.n	80126be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80126ba:	230a      	movs	r3, #10
 80126bc:	e23a      	b.n	8012b34 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80126be:	2300      	movs	r3, #0
 80126c0:	e238      	b.n	8012b34 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80126c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c4:	2200      	movs	r2, #0
 80126c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80126c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80126d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d2:	785b      	ldrb	r3, [r3, #1]
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fe fbc3 	bl	8010e60 <disk_initialize>
 80126da:	4603      	mov	r3, r0
 80126dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80126e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126e4:	f003 0301 	and.w	r3, r3, #1
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80126ec:	2303      	movs	r3, #3
 80126ee:	e221      	b.n	8012b34 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80126f0:	79fb      	ldrb	r3, [r7, #7]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d007      	beq.n	8012706 <find_volume+0xca>
 80126f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d001      	beq.n	8012706 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012702:	230a      	movs	r3, #10
 8012704:	e216      	b.n	8012b34 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012708:	7858      	ldrb	r0, [r3, #1]
 801270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270c:	330c      	adds	r3, #12
 801270e:	461a      	mov	r2, r3
 8012710:	2102      	movs	r1, #2
 8012712:	f7fe fc0b 	bl	8010f2c <disk_ioctl>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d001      	beq.n	8012720 <find_volume+0xe4>
 801271c:	2301      	movs	r3, #1
 801271e:	e209      	b.n	8012b34 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012722:	899b      	ldrh	r3, [r3, #12]
 8012724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012728:	d80d      	bhi.n	8012746 <find_volume+0x10a>
 801272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272c:	899b      	ldrh	r3, [r3, #12]
 801272e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012732:	d308      	bcc.n	8012746 <find_volume+0x10a>
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	461a      	mov	r2, r3
 801273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273c:	899b      	ldrh	r3, [r3, #12]
 801273e:	3b01      	subs	r3, #1
 8012740:	4013      	ands	r3, r2
 8012742:	2b00      	cmp	r3, #0
 8012744:	d001      	beq.n	801274a <find_volume+0x10e>
 8012746:	2301      	movs	r3, #1
 8012748:	e1f4      	b.n	8012b34 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801274a:	2300      	movs	r3, #0
 801274c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801274e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012752:	f7ff ff1d 	bl	8012590 <check_fs>
 8012756:	4603      	mov	r3, r0
 8012758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801275c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012760:	2b02      	cmp	r3, #2
 8012762:	d14b      	bne.n	80127fc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012764:	2300      	movs	r3, #0
 8012766:	643b      	str	r3, [r7, #64]	; 0x40
 8012768:	e01f      	b.n	80127aa <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012772:	011b      	lsls	r3, r3, #4
 8012774:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012778:	4413      	add	r3, r2
 801277a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	3304      	adds	r3, #4
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d006      	beq.n	8012794 <find_volume+0x158>
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	3308      	adds	r3, #8
 801278a:	4618      	mov	r0, r3
 801278c:	f7fe fc04 	bl	8010f98 <ld_dword>
 8012790:	4602      	mov	r2, r0
 8012792:	e000      	b.n	8012796 <find_volume+0x15a>
 8012794:	2200      	movs	r2, #0
 8012796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012798:	009b      	lsls	r3, r3, #2
 801279a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801279e:	440b      	add	r3, r1
 80127a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127a6:	3301      	adds	r3, #1
 80127a8:	643b      	str	r3, [r7, #64]	; 0x40
 80127aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ac:	2b03      	cmp	r3, #3
 80127ae:	d9dc      	bls.n	801276a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80127b0:	2300      	movs	r3, #0
 80127b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80127b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d002      	beq.n	80127c0 <find_volume+0x184>
 80127ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127bc:	3b01      	subs	r3, #1
 80127be:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80127c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80127c8:	4413      	add	r3, r2
 80127ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80127ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80127d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d005      	beq.n	80127e2 <find_volume+0x1a6>
 80127d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127da:	f7ff fed9 	bl	8012590 <check_fs>
 80127de:	4603      	mov	r3, r0
 80127e0:	e000      	b.n	80127e4 <find_volume+0x1a8>
 80127e2:	2303      	movs	r3, #3
 80127e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80127e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d905      	bls.n	80127fc <find_volume+0x1c0>
 80127f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127f2:	3301      	adds	r3, #1
 80127f4:	643b      	str	r3, [r7, #64]	; 0x40
 80127f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127f8:	2b03      	cmp	r3, #3
 80127fa:	d9e1      	bls.n	80127c0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80127fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012800:	2b04      	cmp	r3, #4
 8012802:	d101      	bne.n	8012808 <find_volume+0x1cc>
 8012804:	2301      	movs	r3, #1
 8012806:	e195      	b.n	8012b34 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801280c:	2b01      	cmp	r3, #1
 801280e:	d901      	bls.n	8012814 <find_volume+0x1d8>
 8012810:	230d      	movs	r3, #13
 8012812:	e18f      	b.n	8012b34 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	3338      	adds	r3, #56	; 0x38
 8012818:	330b      	adds	r3, #11
 801281a:	4618      	mov	r0, r3
 801281c:	f7fe fba4 	bl	8010f68 <ld_word>
 8012820:	4603      	mov	r3, r0
 8012822:	461a      	mov	r2, r3
 8012824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012826:	899b      	ldrh	r3, [r3, #12]
 8012828:	429a      	cmp	r2, r3
 801282a:	d001      	beq.n	8012830 <find_volume+0x1f4>
 801282c:	230d      	movs	r3, #13
 801282e:	e181      	b.n	8012b34 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012832:	3338      	adds	r3, #56	; 0x38
 8012834:	3316      	adds	r3, #22
 8012836:	4618      	mov	r0, r3
 8012838:	f7fe fb96 	bl	8010f68 <ld_word>
 801283c:	4603      	mov	r3, r0
 801283e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012842:	2b00      	cmp	r3, #0
 8012844:	d106      	bne.n	8012854 <find_volume+0x218>
 8012846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012848:	3338      	adds	r3, #56	; 0x38
 801284a:	3324      	adds	r3, #36	; 0x24
 801284c:	4618      	mov	r0, r3
 801284e:	f7fe fba3 	bl	8010f98 <ld_dword>
 8012852:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012858:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012866:	789b      	ldrb	r3, [r3, #2]
 8012868:	2b01      	cmp	r3, #1
 801286a:	d005      	beq.n	8012878 <find_volume+0x23c>
 801286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286e:	789b      	ldrb	r3, [r3, #2]
 8012870:	2b02      	cmp	r3, #2
 8012872:	d001      	beq.n	8012878 <find_volume+0x23c>
 8012874:	230d      	movs	r3, #13
 8012876:	e15d      	b.n	8012b34 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	789b      	ldrb	r3, [r3, #2]
 801287c:	461a      	mov	r2, r3
 801287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012880:	fb02 f303 	mul.w	r3, r2, r3
 8012884:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801288c:	b29a      	uxth	r2, r3
 801288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012890:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012894:	895b      	ldrh	r3, [r3, #10]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d008      	beq.n	80128ac <find_volume+0x270>
 801289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289c:	895b      	ldrh	r3, [r3, #10]
 801289e:	461a      	mov	r2, r3
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	895b      	ldrh	r3, [r3, #10]
 80128a4:	3b01      	subs	r3, #1
 80128a6:	4013      	ands	r3, r2
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d001      	beq.n	80128b0 <find_volume+0x274>
 80128ac:	230d      	movs	r3, #13
 80128ae:	e141      	b.n	8012b34 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	3338      	adds	r3, #56	; 0x38
 80128b4:	3311      	adds	r3, #17
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fe fb56 	bl	8010f68 <ld_word>
 80128bc:	4603      	mov	r3, r0
 80128be:	461a      	mov	r2, r3
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80128c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c6:	891b      	ldrh	r3, [r3, #8]
 80128c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128ca:	8992      	ldrh	r2, [r2, #12]
 80128cc:	0952      	lsrs	r2, r2, #5
 80128ce:	b292      	uxth	r2, r2
 80128d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80128d4:	fb02 f201 	mul.w	r2, r2, r1
 80128d8:	1a9b      	subs	r3, r3, r2
 80128da:	b29b      	uxth	r3, r3
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d001      	beq.n	80128e4 <find_volume+0x2a8>
 80128e0:	230d      	movs	r3, #13
 80128e2:	e127      	b.n	8012b34 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80128e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e6:	3338      	adds	r3, #56	; 0x38
 80128e8:	3313      	adds	r3, #19
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe fb3c 	bl	8010f68 <ld_word>
 80128f0:	4603      	mov	r3, r0
 80128f2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80128f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d106      	bne.n	8012908 <find_volume+0x2cc>
 80128fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fc:	3338      	adds	r3, #56	; 0x38
 80128fe:	3320      	adds	r3, #32
 8012900:	4618      	mov	r0, r3
 8012902:	f7fe fb49 	bl	8010f98 <ld_dword>
 8012906:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290a:	3338      	adds	r3, #56	; 0x38
 801290c:	330e      	adds	r3, #14
 801290e:	4618      	mov	r0, r3
 8012910:	f7fe fb2a 	bl	8010f68 <ld_word>
 8012914:	4603      	mov	r3, r0
 8012916:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012918:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801291a:	2b00      	cmp	r3, #0
 801291c:	d104      	bne.n	8012928 <find_volume+0x2ec>
 801291e:	230d      	movs	r3, #13
 8012920:	e108      	b.n	8012b34 <find_volume+0x4f8>
 8012922:	bf00      	nop
 8012924:	200422b4 	.word	0x200422b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012928:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801292c:	4413      	add	r3, r2
 801292e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012930:	8911      	ldrh	r1, [r2, #8]
 8012932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012934:	8992      	ldrh	r2, [r2, #12]
 8012936:	0952      	lsrs	r2, r2, #5
 8012938:	b292      	uxth	r2, r2
 801293a:	fbb1 f2f2 	udiv	r2, r1, r2
 801293e:	b292      	uxth	r2, r2
 8012940:	4413      	add	r3, r2
 8012942:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	429a      	cmp	r2, r3
 801294a:	d201      	bcs.n	8012950 <find_volume+0x314>
 801294c:	230d      	movs	r3, #13
 801294e:	e0f1      	b.n	8012b34 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012958:	8952      	ldrh	r2, [r2, #10]
 801295a:	fbb3 f3f2 	udiv	r3, r3, r2
 801295e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	2b00      	cmp	r3, #0
 8012964:	d101      	bne.n	801296a <find_volume+0x32e>
 8012966:	230d      	movs	r3, #13
 8012968:	e0e4      	b.n	8012b34 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801296a:	2303      	movs	r3, #3
 801296c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012972:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012976:	4293      	cmp	r3, r2
 8012978:	d802      	bhi.n	8012980 <find_volume+0x344>
 801297a:	2302      	movs	r3, #2
 801297c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012982:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012986:	4293      	cmp	r3, r2
 8012988:	d802      	bhi.n	8012990 <find_volume+0x354>
 801298a:	2301      	movs	r3, #1
 801298c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	1c9a      	adds	r2, r3, #2
 8012994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012996:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801299c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801299e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80129a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129a2:	441a      	add	r2, r3
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80129a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ac:	441a      	add	r2, r3
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80129b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129b6:	2b03      	cmp	r3, #3
 80129b8:	d11e      	bne.n	80129f8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	3338      	adds	r3, #56	; 0x38
 80129be:	332a      	adds	r3, #42	; 0x2a
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7fe fad1 	bl	8010f68 <ld_word>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d001      	beq.n	80129d0 <find_volume+0x394>
 80129cc:	230d      	movs	r3, #13
 80129ce:	e0b1      	b.n	8012b34 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80129d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d2:	891b      	ldrh	r3, [r3, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d001      	beq.n	80129dc <find_volume+0x3a0>
 80129d8:	230d      	movs	r3, #13
 80129da:	e0ab      	b.n	8012b34 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	3338      	adds	r3, #56	; 0x38
 80129e0:	332c      	adds	r3, #44	; 0x2c
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7fe fad8 	bl	8010f98 <ld_dword>
 80129e8:	4602      	mov	r2, r0
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	69db      	ldr	r3, [r3, #28]
 80129f2:	009b      	lsls	r3, r3, #2
 80129f4:	647b      	str	r3, [r7, #68]	; 0x44
 80129f6:	e01f      	b.n	8012a38 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80129f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fa:	891b      	ldrh	r3, [r3, #8]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <find_volume+0x3c8>
 8012a00:	230d      	movs	r3, #13
 8012a02:	e097      	b.n	8012b34 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a0a:	441a      	add	r2, r3
 8012a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a14:	2b02      	cmp	r3, #2
 8012a16:	d103      	bne.n	8012a20 <find_volume+0x3e4>
 8012a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	005b      	lsls	r3, r3, #1
 8012a1e:	e00a      	b.n	8012a36 <find_volume+0x3fa>
 8012a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a22:	69da      	ldr	r2, [r3, #28]
 8012a24:	4613      	mov	r3, r2
 8012a26:	005b      	lsls	r3, r3, #1
 8012a28:	4413      	add	r3, r2
 8012a2a:	085a      	lsrs	r2, r3, #1
 8012a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2e:	69db      	ldr	r3, [r3, #28]
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a36:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3a:	6a1a      	ldr	r2, [r3, #32]
 8012a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3e:	899b      	ldrh	r3, [r3, #12]
 8012a40:	4619      	mov	r1, r3
 8012a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a44:	440b      	add	r3, r1
 8012a46:	3b01      	subs	r3, #1
 8012a48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a4a:	8989      	ldrh	r1, [r1, #12]
 8012a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d201      	bcs.n	8012a58 <find_volume+0x41c>
 8012a54:	230d      	movs	r3, #13
 8012a56:	e06d      	b.n	8012b34 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012a5e:	615a      	str	r2, [r3, #20]
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	695a      	ldr	r2, [r3, #20]
 8012a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a66:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6a:	2280      	movs	r2, #128	; 0x80
 8012a6c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a72:	2b03      	cmp	r3, #3
 8012a74:	d149      	bne.n	8012b0a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a78:	3338      	adds	r3, #56	; 0x38
 8012a7a:	3330      	adds	r3, #48	; 0x30
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fe fa73 	bl	8010f68 <ld_word>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d140      	bne.n	8012b0a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a90:	f7fe fd1a 	bl	80114c8 <move_window>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d137      	bne.n	8012b0a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa2:	3338      	adds	r3, #56	; 0x38
 8012aa4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fe fa5d 	bl	8010f68 <ld_word>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d127      	bne.n	8012b0a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abc:	3338      	adds	r3, #56	; 0x38
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7fe fa6a 	bl	8010f98 <ld_dword>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	4b1d      	ldr	r3, [pc, #116]	; (8012b3c <find_volume+0x500>)
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d11e      	bne.n	8012b0a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ace:	3338      	adds	r3, #56	; 0x38
 8012ad0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fe fa5f 	bl	8010f98 <ld_dword>
 8012ada:	4602      	mov	r2, r0
 8012adc:	4b18      	ldr	r3, [pc, #96]	; (8012b40 <find_volume+0x504>)
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d113      	bne.n	8012b0a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae4:	3338      	adds	r3, #56	; 0x38
 8012ae6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7fe fa54 	bl	8010f98 <ld_dword>
 8012af0:	4602      	mov	r2, r0
 8012af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af8:	3338      	adds	r3, #56	; 0x38
 8012afa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fe fa4a 	bl	8010f98 <ld_dword>
 8012b04:	4602      	mov	r2, r0
 8012b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b08:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012b10:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012b12:	4b0c      	ldr	r3, [pc, #48]	; (8012b44 <find_volume+0x508>)
 8012b14:	881b      	ldrh	r3, [r3, #0]
 8012b16:	3301      	adds	r3, #1
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	4b0a      	ldr	r3, [pc, #40]	; (8012b44 <find_volume+0x508>)
 8012b1c:	801a      	strh	r2, [r3, #0]
 8012b1e:	4b09      	ldr	r3, [pc, #36]	; (8012b44 <find_volume+0x508>)
 8012b20:	881a      	ldrh	r2, [r3, #0]
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b28:	2200      	movs	r2, #0
 8012b2a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b2e:	f7fe fc63 	bl	80113f8 <clear_lock>
#endif
	return FR_OK;
 8012b32:	2300      	movs	r3, #0
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3758      	adds	r7, #88	; 0x58
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	41615252 	.word	0x41615252
 8012b40:	61417272 	.word	0x61417272
 8012b44:	200422b8 	.word	0x200422b8

08012b48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012b52:	2309      	movs	r3, #9
 8012b54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d01c      	beq.n	8012b96 <validate+0x4e>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d018      	beq.n	8012b96 <validate+0x4e>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d013      	beq.n	8012b96 <validate+0x4e>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	889a      	ldrh	r2, [r3, #4]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	88db      	ldrh	r3, [r3, #6]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d10c      	bne.n	8012b96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	785b      	ldrb	r3, [r3, #1]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7fe f952 	bl	8010e2c <disk_status>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	f003 0301 	and.w	r3, r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d101      	bne.n	8012b96 <validate+0x4e>
			res = FR_OK;
 8012b92:	2300      	movs	r3, #0
 8012b94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012b96:	7bfb      	ldrb	r3, [r7, #15]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d102      	bne.n	8012ba2 <validate+0x5a>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	e000      	b.n	8012ba4 <validate+0x5c>
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	683a      	ldr	r2, [r7, #0]
 8012ba6:	6013      	str	r3, [r2, #0]
	return res;
 8012ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3710      	adds	r7, #16
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
	...

08012bb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b088      	sub	sp, #32
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	4613      	mov	r3, r2
 8012bc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012bc6:	f107 0310 	add.w	r3, r7, #16
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7ff fc9b 	bl	8012506 <get_ldnumber>
 8012bd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	da01      	bge.n	8012bdc <f_mount+0x28>
 8012bd8:	230b      	movs	r3, #11
 8012bda:	e02b      	b.n	8012c34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012bdc:	4a17      	ldr	r2, [pc, #92]	; (8012c3c <f_mount+0x88>)
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012be4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012bec:	69b8      	ldr	r0, [r7, #24]
 8012bee:	f7fe fc03 	bl	80113f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012bf2:	69bb      	ldr	r3, [r7, #24]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d002      	beq.n	8012c04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	2200      	movs	r2, #0
 8012c02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	490d      	ldr	r1, [pc, #52]	; (8012c3c <f_mount+0x88>)
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d002      	beq.n	8012c1a <f_mount+0x66>
 8012c14:	79fb      	ldrb	r3, [r7, #7]
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d001      	beq.n	8012c1e <f_mount+0x6a>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	e00a      	b.n	8012c34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012c1e:	f107 010c 	add.w	r1, r7, #12
 8012c22:	f107 0308 	add.w	r3, r7, #8
 8012c26:	2200      	movs	r2, #0
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7ff fd07 	bl	801263c <find_volume>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3720      	adds	r7, #32
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	200422b4 	.word	0x200422b4

08012c40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b098      	sub	sp, #96	; 0x60
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d101      	bne.n	8012c58 <f_open+0x18>
 8012c54:	2309      	movs	r3, #9
 8012c56:	e1ba      	b.n	8012fce <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012c58:	79fb      	ldrb	r3, [r7, #7]
 8012c5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012c60:	79fa      	ldrb	r2, [r7, #7]
 8012c62:	f107 0110 	add.w	r1, r7, #16
 8012c66:	f107 0308 	add.w	r3, r7, #8
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff fce6 	bl	801263c <find_volume>
 8012c70:	4603      	mov	r3, r0
 8012c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f040 819e 	bne.w	8012fbc <f_open+0x37c>
		dj.obj.fs = fs;
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012c84:	68ba      	ldr	r2, [r7, #8]
 8012c86:	f107 0314 	add.w	r3, r7, #20
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ff fba5 	bl	80123dc <follow_path>
 8012c92:	4603      	mov	r3, r0
 8012c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d11a      	bne.n	8012cd6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012ca0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012ca4:	b25b      	sxtb	r3, r3
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	da03      	bge.n	8012cb2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012caa:	2306      	movs	r3, #6
 8012cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012cb0:	e011      	b.n	8012cd6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012cb2:	79fb      	ldrb	r3, [r7, #7]
 8012cb4:	f023 0301 	bic.w	r3, r3, #1
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	bf14      	ite	ne
 8012cbc:	2301      	movne	r3, #1
 8012cbe:	2300      	moveq	r3, #0
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f107 0314 	add.w	r3, r7, #20
 8012cc8:	4611      	mov	r1, r2
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7fe fa4c 	bl	8011168 <chk_lock>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012cd6:	79fb      	ldrb	r3, [r7, #7]
 8012cd8:	f003 031c 	and.w	r3, r3, #28
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d07e      	beq.n	8012dde <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d017      	beq.n	8012d18 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012ce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cec:	2b04      	cmp	r3, #4
 8012cee:	d10e      	bne.n	8012d0e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012cf0:	f7fe fa96 	bl	8011220 <enq_lock>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d006      	beq.n	8012d08 <f_open+0xc8>
 8012cfa:	f107 0314 	add.w	r3, r7, #20
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7ff fa52 	bl	80121a8 <dir_register>
 8012d04:	4603      	mov	r3, r0
 8012d06:	e000      	b.n	8012d0a <f_open+0xca>
 8012d08:	2312      	movs	r3, #18
 8012d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012d0e:	79fb      	ldrb	r3, [r7, #7]
 8012d10:	f043 0308 	orr.w	r3, r3, #8
 8012d14:	71fb      	strb	r3, [r7, #7]
 8012d16:	e010      	b.n	8012d3a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012d18:	7ebb      	ldrb	r3, [r7, #26]
 8012d1a:	f003 0311 	and.w	r3, r3, #17
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d003      	beq.n	8012d2a <f_open+0xea>
					res = FR_DENIED;
 8012d22:	2307      	movs	r3, #7
 8012d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d28:	e007      	b.n	8012d3a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012d2a:	79fb      	ldrb	r3, [r7, #7]
 8012d2c:	f003 0304 	and.w	r3, r3, #4
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <f_open+0xfa>
 8012d34:	2308      	movs	r3, #8
 8012d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d167      	bne.n	8012e12 <f_open+0x1d2>
 8012d42:	79fb      	ldrb	r3, [r7, #7]
 8012d44:	f003 0308 	and.w	r3, r3, #8
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d062      	beq.n	8012e12 <f_open+0x1d2>
				dw = GET_FATTIME();
 8012d4c:	4ba2      	ldr	r3, [pc, #648]	; (8012fd8 <f_open+0x398>)
 8012d4e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d52:	330e      	adds	r3, #14
 8012d54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fe f95c 	bl	8011014 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d5e:	3316      	adds	r3, #22
 8012d60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fe f956 	bl	8011014 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d6a:	330b      	adds	r3, #11
 8012d6c:	2220      	movs	r2, #32
 8012d6e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d74:	4611      	mov	r1, r2
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff f925 	bl	8011fc6 <ld_clust>
 8012d7c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d82:	2200      	movs	r2, #0
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7ff f93d 	bl	8012004 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d8c:	331c      	adds	r3, #28
 8012d8e:	2100      	movs	r1, #0
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fe f93f 	bl	8011014 <st_dword>
					fs->wflag = 1;
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d037      	beq.n	8012e12 <f_open+0x1d2>
						dw = fs->winsect;
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012da6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012da8:	f107 0314 	add.w	r3, r7, #20
 8012dac:	2200      	movs	r2, #0
 8012dae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7fe fe2d 	bl	8011a10 <remove_chain>
 8012db6:	4603      	mov	r3, r0
 8012db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d126      	bne.n	8012e12 <f_open+0x1d2>
							res = move_window(fs, dw);
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7fe fb7d 	bl	80114c8 <move_window>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dd8:	3a01      	subs	r2, #1
 8012dda:	611a      	str	r2, [r3, #16]
 8012ddc:	e019      	b.n	8012e12 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d115      	bne.n	8012e12 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012de6:	7ebb      	ldrb	r3, [r7, #26]
 8012de8:	f003 0310 	and.w	r3, r3, #16
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d003      	beq.n	8012df8 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012df0:	2304      	movs	r3, #4
 8012df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012df6:	e00c      	b.n	8012e12 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012df8:	79fb      	ldrb	r3, [r7, #7]
 8012dfa:	f003 0302 	and.w	r3, r3, #2
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d007      	beq.n	8012e12 <f_open+0x1d2>
 8012e02:	7ebb      	ldrb	r3, [r7, #26]
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d002      	beq.n	8012e12 <f_open+0x1d2>
						res = FR_DENIED;
 8012e0c:	2307      	movs	r3, #7
 8012e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d128      	bne.n	8012e6c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012e1a:	79fb      	ldrb	r3, [r7, #7]
 8012e1c:	f003 0308 	and.w	r3, r3, #8
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d003      	beq.n	8012e2c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e2a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e3a:	79fb      	ldrb	r3, [r7, #7]
 8012e3c:	f023 0301 	bic.w	r3, r3, #1
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	bf14      	ite	ne
 8012e44:	2301      	movne	r3, #1
 8012e46:	2300      	moveq	r3, #0
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	f107 0314 	add.w	r3, r7, #20
 8012e50:	4611      	mov	r1, r2
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fe fa06 	bl	8011264 <inc_lock>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d102      	bne.n	8012e6c <f_open+0x22c>
 8012e66:	2302      	movs	r3, #2
 8012e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f040 80a3 	bne.w	8012fbc <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e7a:	4611      	mov	r1, r2
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff f8a2 	bl	8011fc6 <ld_clust>
 8012e82:	4602      	mov	r2, r0
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e8a:	331c      	adds	r3, #28
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fe f883 	bl	8010f98 <ld_dword>
 8012e92:	4602      	mov	r2, r0
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012e9e:	693a      	ldr	r2, [r7, #16]
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	88da      	ldrh	r2, [r3, #6]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	79fa      	ldrb	r2, [r7, #7]
 8012eb0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	3330      	adds	r3, #48	; 0x30
 8012ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012ecc:	2100      	movs	r1, #0
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7fe f8ed 	bl	80110ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012ed4:	79fb      	ldrb	r3, [r7, #7]
 8012ed6:	f003 0320 	and.w	r3, r3, #32
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d06e      	beq.n	8012fbc <f_open+0x37c>
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d06a      	beq.n	8012fbc <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	68da      	ldr	r2, [r3, #12]
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	895b      	ldrh	r3, [r3, #10]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	899b      	ldrh	r3, [r3, #12]
 8012ef8:	fb03 f302 	mul.w	r3, r3, r2
 8012efc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	657b      	str	r3, [r7, #84]	; 0x54
 8012f0a:	e016      	b.n	8012f3a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe fb96 	bl	8011642 <get_fat>
 8012f16:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d802      	bhi.n	8012f24 <f_open+0x2e4>
 8012f1e:	2302      	movs	r3, #2
 8012f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f2a:	d102      	bne.n	8012f32 <f_open+0x2f2>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f36:	1ad3      	subs	r3, r2, r3
 8012f38:	657b      	str	r3, [r7, #84]	; 0x54
 8012f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d103      	bne.n	8012f4a <f_open+0x30a>
 8012f42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d8e0      	bhi.n	8012f0c <f_open+0x2cc>
				}
				fp->clust = clst;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f4e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d131      	bne.n	8012fbc <f_open+0x37c>
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	899b      	ldrh	r3, [r3, #12]
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f64:	fb02 f201 	mul.w	r2, r2, r1
 8012f68:	1a9b      	subs	r3, r3, r2
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d026      	beq.n	8012fbc <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fe fb46 	bl	8011604 <clust2sect>
 8012f78:	6478      	str	r0, [r7, #68]	; 0x44
 8012f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d103      	bne.n	8012f88 <f_open+0x348>
						res = FR_INT_ERR;
 8012f80:	2302      	movs	r3, #2
 8012f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f86:	e019      	b.n	8012fbc <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	899b      	ldrh	r3, [r3, #12]
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f90:	fbb3 f2f2 	udiv	r2, r3, r2
 8012f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f96:	441a      	add	r2, r3
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	7858      	ldrb	r0, [r3, #1]
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	6a1a      	ldr	r2, [r3, #32]
 8012faa:	2301      	movs	r3, #1
 8012fac:	f7fd ff7e 	bl	8010eac <disk_read>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d002      	beq.n	8012fbc <f_open+0x37c>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d002      	beq.n	8012fca <f_open+0x38a>
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3760      	adds	r7, #96	; 0x60
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	274a0000 	.word	0x274a0000

08012fdc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08e      	sub	sp, #56	; 0x38
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f107 0214 	add.w	r2, r7, #20
 8012ffa:	4611      	mov	r1, r2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fda3 	bl	8012b48 <validate>
 8013002:	4603      	mov	r3, r0
 8013004:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013008:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801300c:	2b00      	cmp	r3, #0
 801300e:	d107      	bne.n	8013020 <f_read+0x44>
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	7d5b      	ldrb	r3, [r3, #21]
 8013014:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801301c:	2b00      	cmp	r3, #0
 801301e:	d002      	beq.n	8013026 <f_read+0x4a>
 8013020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013024:	e135      	b.n	8013292 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	7d1b      	ldrb	r3, [r3, #20]
 801302a:	f003 0301 	and.w	r3, r3, #1
 801302e:	2b00      	cmp	r3, #0
 8013030:	d101      	bne.n	8013036 <f_read+0x5a>
 8013032:	2307      	movs	r3, #7
 8013034:	e12d      	b.n	8013292 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	68da      	ldr	r2, [r3, #12]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	699b      	ldr	r3, [r3, #24]
 801303e:	1ad3      	subs	r3, r2, r3
 8013040:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	6a3b      	ldr	r3, [r7, #32]
 8013046:	429a      	cmp	r2, r3
 8013048:	f240 811e 	bls.w	8013288 <f_read+0x2ac>
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013050:	e11a      	b.n	8013288 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	699b      	ldr	r3, [r3, #24]
 8013056:	697a      	ldr	r2, [r7, #20]
 8013058:	8992      	ldrh	r2, [r2, #12]
 801305a:	fbb3 f1f2 	udiv	r1, r3, r2
 801305e:	fb02 f201 	mul.w	r2, r2, r1
 8013062:	1a9b      	subs	r3, r3, r2
 8013064:	2b00      	cmp	r3, #0
 8013066:	f040 80d5 	bne.w	8013214 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	699b      	ldr	r3, [r3, #24]
 801306e:	697a      	ldr	r2, [r7, #20]
 8013070:	8992      	ldrh	r2, [r2, #12]
 8013072:	fbb3 f3f2 	udiv	r3, r3, r2
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	8952      	ldrh	r2, [r2, #10]
 801307a:	3a01      	subs	r2, #1
 801307c:	4013      	ands	r3, r2
 801307e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d12f      	bne.n	80130e6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	699b      	ldr	r3, [r3, #24]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d103      	bne.n	8013096 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	689b      	ldr	r3, [r3, #8]
 8013092:	633b      	str	r3, [r7, #48]	; 0x30
 8013094:	e013      	b.n	80130be <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801309a:	2b00      	cmp	r3, #0
 801309c:	d007      	beq.n	80130ae <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	699b      	ldr	r3, [r3, #24]
 80130a2:	4619      	mov	r1, r3
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f7fe fdb0 	bl	8011c0a <clmt_clust>
 80130aa:	6338      	str	r0, [r7, #48]	; 0x30
 80130ac:	e007      	b.n	80130be <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	69db      	ldr	r3, [r3, #28]
 80130b4:	4619      	mov	r1, r3
 80130b6:	4610      	mov	r0, r2
 80130b8:	f7fe fac3 	bl	8011642 <get_fat>
 80130bc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d804      	bhi.n	80130ce <f_read+0xf2>
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	2202      	movs	r2, #2
 80130c8:	755a      	strb	r2, [r3, #21]
 80130ca:	2302      	movs	r3, #2
 80130cc:	e0e1      	b.n	8013292 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80130ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130d4:	d104      	bne.n	80130e0 <f_read+0x104>
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2201      	movs	r2, #1
 80130da:	755a      	strb	r2, [r3, #21]
 80130dc:	2301      	movs	r3, #1
 80130de:	e0d8      	b.n	8013292 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80130e6:	697a      	ldr	r2, [r7, #20]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	69db      	ldr	r3, [r3, #28]
 80130ec:	4619      	mov	r1, r3
 80130ee:	4610      	mov	r0, r2
 80130f0:	f7fe fa88 	bl	8011604 <clust2sect>
 80130f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d104      	bne.n	8013106 <f_read+0x12a>
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2202      	movs	r2, #2
 8013100:	755a      	strb	r2, [r3, #21]
 8013102:	2302      	movs	r3, #2
 8013104:	e0c5      	b.n	8013292 <f_read+0x2b6>
			sect += csect;
 8013106:	69ba      	ldr	r2, [r7, #24]
 8013108:	69fb      	ldr	r3, [r7, #28]
 801310a:	4413      	add	r3, r2
 801310c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	899b      	ldrh	r3, [r3, #12]
 8013112:	461a      	mov	r2, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	fbb3 f3f2 	udiv	r3, r3, r2
 801311a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311e:	2b00      	cmp	r3, #0
 8013120:	d041      	beq.n	80131a6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013122:	69fa      	ldr	r2, [r7, #28]
 8013124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013126:	4413      	add	r3, r2
 8013128:	697a      	ldr	r2, [r7, #20]
 801312a:	8952      	ldrh	r2, [r2, #10]
 801312c:	4293      	cmp	r3, r2
 801312e:	d905      	bls.n	801313c <f_read+0x160>
					cc = fs->csize - csect;
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	895b      	ldrh	r3, [r3, #10]
 8013134:	461a      	mov	r2, r3
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	7858      	ldrb	r0, [r3, #1]
 8013140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013142:	69ba      	ldr	r2, [r7, #24]
 8013144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013146:	f7fd feb1 	bl	8010eac <disk_read>
 801314a:	4603      	mov	r3, r0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d004      	beq.n	801315a <f_read+0x17e>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2201      	movs	r2, #1
 8013154:	755a      	strb	r2, [r3, #21]
 8013156:	2301      	movs	r3, #1
 8013158:	e09b      	b.n	8013292 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	7d1b      	ldrb	r3, [r3, #20]
 801315e:	b25b      	sxtb	r3, r3
 8013160:	2b00      	cmp	r3, #0
 8013162:	da18      	bge.n	8013196 <f_read+0x1ba>
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	6a1a      	ldr	r2, [r3, #32]
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	1ad3      	subs	r3, r2, r3
 801316c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801316e:	429a      	cmp	r2, r3
 8013170:	d911      	bls.n	8013196 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	6a1a      	ldr	r2, [r3, #32]
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	1ad3      	subs	r3, r2, r3
 801317a:	697a      	ldr	r2, [r7, #20]
 801317c:	8992      	ldrh	r2, [r2, #12]
 801317e:	fb02 f303 	mul.w	r3, r2, r3
 8013182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013184:	18d0      	adds	r0, r2, r3
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	899b      	ldrh	r3, [r3, #12]
 8013190:	461a      	mov	r2, r3
 8013192:	f7fd ff6b 	bl	801106c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	899b      	ldrh	r3, [r3, #12]
 801319a:	461a      	mov	r2, r3
 801319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319e:	fb02 f303 	mul.w	r3, r2, r3
 80131a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80131a4:	e05c      	b.n	8013260 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	6a1b      	ldr	r3, [r3, #32]
 80131aa:	69ba      	ldr	r2, [r7, #24]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d02e      	beq.n	801320e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	7d1b      	ldrb	r3, [r3, #20]
 80131b4:	b25b      	sxtb	r3, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	da18      	bge.n	80131ec <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	7858      	ldrb	r0, [r3, #1]
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6a1a      	ldr	r2, [r3, #32]
 80131c8:	2301      	movs	r3, #1
 80131ca:	f7fd fe8f 	bl	8010eec <disk_write>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d004      	beq.n	80131de <f_read+0x202>
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2201      	movs	r2, #1
 80131d8:	755a      	strb	r2, [r3, #21]
 80131da:	2301      	movs	r3, #1
 80131dc:	e059      	b.n	8013292 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	7d1b      	ldrb	r3, [r3, #20]
 80131e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131e6:	b2da      	uxtb	r2, r3
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	7858      	ldrb	r0, [r3, #1]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131f6:	2301      	movs	r3, #1
 80131f8:	69ba      	ldr	r2, [r7, #24]
 80131fa:	f7fd fe57 	bl	8010eac <disk_read>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d004      	beq.n	801320e <f_read+0x232>
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2201      	movs	r2, #1
 8013208:	755a      	strb	r2, [r3, #21]
 801320a:	2301      	movs	r3, #1
 801320c:	e041      	b.n	8013292 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	69ba      	ldr	r2, [r7, #24]
 8013212:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	899b      	ldrh	r3, [r3, #12]
 8013218:	4618      	mov	r0, r3
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	699b      	ldr	r3, [r3, #24]
 801321e:	697a      	ldr	r2, [r7, #20]
 8013220:	8992      	ldrh	r2, [r2, #12]
 8013222:	fbb3 f1f2 	udiv	r1, r3, r2
 8013226:	fb02 f201 	mul.w	r2, r2, r1
 801322a:	1a9b      	subs	r3, r3, r2
 801322c:	1ac3      	subs	r3, r0, r3
 801322e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	429a      	cmp	r2, r3
 8013236:	d901      	bls.n	801323c <f_read+0x260>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	699b      	ldr	r3, [r3, #24]
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	8992      	ldrh	r2, [r2, #12]
 801324a:	fbb3 f0f2 	udiv	r0, r3, r2
 801324e:	fb02 f200 	mul.w	r2, r2, r0
 8013252:	1a9b      	subs	r3, r3, r2
 8013254:	440b      	add	r3, r1
 8013256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013258:	4619      	mov	r1, r3
 801325a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801325c:	f7fd ff06 	bl	801106c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	4413      	add	r3, r2
 8013266:	627b      	str	r3, [r7, #36]	; 0x24
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	699a      	ldr	r2, [r3, #24]
 801326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326e:	441a      	add	r2, r3
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	619a      	str	r2, [r3, #24]
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	441a      	add	r2, r3
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	601a      	str	r2, [r3, #0]
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	f47f aee1 	bne.w	8013052 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013290:	2300      	movs	r3, #0
}
 8013292:	4618      	mov	r0, r3
 8013294:	3738      	adds	r7, #56	; 0x38
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b08c      	sub	sp, #48	; 0x30
 801329e:	af00      	add	r7, sp, #0
 80132a0:	60f8      	str	r0, [r7, #12]
 80132a2:	60b9      	str	r1, [r7, #8]
 80132a4:	607a      	str	r2, [r7, #4]
 80132a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	2200      	movs	r2, #0
 80132b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f107 0210 	add.w	r2, r7, #16
 80132b8:	4611      	mov	r1, r2
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7ff fc44 	bl	8012b48 <validate>
 80132c0:	4603      	mov	r3, r0
 80132c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80132c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d107      	bne.n	80132de <f_write+0x44>
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	7d5b      	ldrb	r3, [r3, #21]
 80132d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80132d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d002      	beq.n	80132e4 <f_write+0x4a>
 80132de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132e2:	e16a      	b.n	80135ba <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	7d1b      	ldrb	r3, [r3, #20]
 80132e8:	f003 0302 	and.w	r3, r3, #2
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <f_write+0x5a>
 80132f0:	2307      	movs	r3, #7
 80132f2:	e162      	b.n	80135ba <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	699a      	ldr	r2, [r3, #24]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	441a      	add	r2, r3
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	699b      	ldr	r3, [r3, #24]
 8013300:	429a      	cmp	r2, r3
 8013302:	f080 814c 	bcs.w	801359e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	699b      	ldr	r3, [r3, #24]
 801330a:	43db      	mvns	r3, r3
 801330c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801330e:	e146      	b.n	801359e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	699b      	ldr	r3, [r3, #24]
 8013314:	693a      	ldr	r2, [r7, #16]
 8013316:	8992      	ldrh	r2, [r2, #12]
 8013318:	fbb3 f1f2 	udiv	r1, r3, r2
 801331c:	fb02 f201 	mul.w	r2, r2, r1
 8013320:	1a9b      	subs	r3, r3, r2
 8013322:	2b00      	cmp	r3, #0
 8013324:	f040 80f1 	bne.w	801350a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	699b      	ldr	r3, [r3, #24]
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	8992      	ldrh	r2, [r2, #12]
 8013330:	fbb3 f3f2 	udiv	r3, r3, r2
 8013334:	693a      	ldr	r2, [r7, #16]
 8013336:	8952      	ldrh	r2, [r2, #10]
 8013338:	3a01      	subs	r2, #1
 801333a:	4013      	ands	r3, r2
 801333c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d143      	bne.n	80133cc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	699b      	ldr	r3, [r3, #24]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10c      	bne.n	8013366 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013354:	2b00      	cmp	r3, #0
 8013356:	d11a      	bne.n	801338e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	2100      	movs	r1, #0
 801335c:	4618      	mov	r0, r3
 801335e:	f7fe fbbc 	bl	8011ada <create_chain>
 8013362:	62b8      	str	r0, [r7, #40]	; 0x28
 8013364:	e013      	b.n	801338e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336a:	2b00      	cmp	r3, #0
 801336c:	d007      	beq.n	801337e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	699b      	ldr	r3, [r3, #24]
 8013372:	4619      	mov	r1, r3
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f7fe fc48 	bl	8011c0a <clmt_clust>
 801337a:	62b8      	str	r0, [r7, #40]	; 0x28
 801337c:	e007      	b.n	801338e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801337e:	68fa      	ldr	r2, [r7, #12]
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	69db      	ldr	r3, [r3, #28]
 8013384:	4619      	mov	r1, r3
 8013386:	4610      	mov	r0, r2
 8013388:	f7fe fba7 	bl	8011ada <create_chain>
 801338c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013390:	2b00      	cmp	r3, #0
 8013392:	f000 8109 	beq.w	80135a8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013398:	2b01      	cmp	r3, #1
 801339a:	d104      	bne.n	80133a6 <f_write+0x10c>
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2202      	movs	r2, #2
 80133a0:	755a      	strb	r2, [r3, #21]
 80133a2:	2302      	movs	r3, #2
 80133a4:	e109      	b.n	80135ba <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ac:	d104      	bne.n	80133b8 <f_write+0x11e>
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2201      	movs	r2, #1
 80133b2:	755a      	strb	r2, [r3, #21]
 80133b4:	2301      	movs	r3, #1
 80133b6:	e100      	b.n	80135ba <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133bc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	689b      	ldr	r3, [r3, #8]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d102      	bne.n	80133cc <f_write+0x132>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133ca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	7d1b      	ldrb	r3, [r3, #20]
 80133d0:	b25b      	sxtb	r3, r3
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	da18      	bge.n	8013408 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	7858      	ldrb	r0, [r3, #1]
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	6a1a      	ldr	r2, [r3, #32]
 80133e4:	2301      	movs	r3, #1
 80133e6:	f7fd fd81 	bl	8010eec <disk_write>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d004      	beq.n	80133fa <f_write+0x160>
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2201      	movs	r2, #1
 80133f4:	755a      	strb	r2, [r3, #21]
 80133f6:	2301      	movs	r3, #1
 80133f8:	e0df      	b.n	80135ba <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	7d1b      	ldrb	r3, [r3, #20]
 80133fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013402:	b2da      	uxtb	r2, r3
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	69db      	ldr	r3, [r3, #28]
 801340e:	4619      	mov	r1, r3
 8013410:	4610      	mov	r0, r2
 8013412:	f7fe f8f7 	bl	8011604 <clust2sect>
 8013416:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d104      	bne.n	8013428 <f_write+0x18e>
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2202      	movs	r2, #2
 8013422:	755a      	strb	r2, [r3, #21]
 8013424:	2302      	movs	r3, #2
 8013426:	e0c8      	b.n	80135ba <f_write+0x320>
			sect += csect;
 8013428:	697a      	ldr	r2, [r7, #20]
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	4413      	add	r3, r2
 801342e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	899b      	ldrh	r3, [r3, #12]
 8013434:	461a      	mov	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	fbb3 f3f2 	udiv	r3, r3, r2
 801343c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801343e:	6a3b      	ldr	r3, [r7, #32]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d043      	beq.n	80134cc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013444:	69ba      	ldr	r2, [r7, #24]
 8013446:	6a3b      	ldr	r3, [r7, #32]
 8013448:	4413      	add	r3, r2
 801344a:	693a      	ldr	r2, [r7, #16]
 801344c:	8952      	ldrh	r2, [r2, #10]
 801344e:	4293      	cmp	r3, r2
 8013450:	d905      	bls.n	801345e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	895b      	ldrh	r3, [r3, #10]
 8013456:	461a      	mov	r2, r3
 8013458:	69bb      	ldr	r3, [r7, #24]
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	7858      	ldrb	r0, [r3, #1]
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	697a      	ldr	r2, [r7, #20]
 8013466:	69f9      	ldr	r1, [r7, #28]
 8013468:	f7fd fd40 	bl	8010eec <disk_write>
 801346c:	4603      	mov	r3, r0
 801346e:	2b00      	cmp	r3, #0
 8013470:	d004      	beq.n	801347c <f_write+0x1e2>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2201      	movs	r2, #1
 8013476:	755a      	strb	r2, [r3, #21]
 8013478:	2301      	movs	r3, #1
 801347a:	e09e      	b.n	80135ba <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	6a1a      	ldr	r2, [r3, #32]
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	1ad3      	subs	r3, r2, r3
 8013484:	6a3a      	ldr	r2, [r7, #32]
 8013486:	429a      	cmp	r2, r3
 8013488:	d918      	bls.n	80134bc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	6a1a      	ldr	r2, [r3, #32]
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	1ad3      	subs	r3, r2, r3
 8013498:	693a      	ldr	r2, [r7, #16]
 801349a:	8992      	ldrh	r2, [r2, #12]
 801349c:	fb02 f303 	mul.w	r3, r2, r3
 80134a0:	69fa      	ldr	r2, [r7, #28]
 80134a2:	18d1      	adds	r1, r2, r3
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	899b      	ldrh	r3, [r3, #12]
 80134a8:	461a      	mov	r2, r3
 80134aa:	f7fd fddf 	bl	801106c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	7d1b      	ldrb	r3, [r3, #20]
 80134b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134b6:	b2da      	uxtb	r2, r3
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	899b      	ldrh	r3, [r3, #12]
 80134c0:	461a      	mov	r2, r3
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	fb02 f303 	mul.w	r3, r2, r3
 80134c8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80134ca:	e04b      	b.n	8013564 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	6a1b      	ldr	r3, [r3, #32]
 80134d0:	697a      	ldr	r2, [r7, #20]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d016      	beq.n	8013504 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	699a      	ldr	r2, [r3, #24]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80134de:	429a      	cmp	r2, r3
 80134e0:	d210      	bcs.n	8013504 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	7858      	ldrb	r0, [r3, #1]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134ec:	2301      	movs	r3, #1
 80134ee:	697a      	ldr	r2, [r7, #20]
 80134f0:	f7fd fcdc 	bl	8010eac <disk_read>
 80134f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d004      	beq.n	8013504 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2201      	movs	r2, #1
 80134fe:	755a      	strb	r2, [r3, #21]
 8013500:	2301      	movs	r3, #1
 8013502:	e05a      	b.n	80135ba <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	697a      	ldr	r2, [r7, #20]
 8013508:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	899b      	ldrh	r3, [r3, #12]
 801350e:	4618      	mov	r0, r3
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	693a      	ldr	r2, [r7, #16]
 8013516:	8992      	ldrh	r2, [r2, #12]
 8013518:	fbb3 f1f2 	udiv	r1, r3, r2
 801351c:	fb02 f201 	mul.w	r2, r2, r1
 8013520:	1a9b      	subs	r3, r3, r2
 8013522:	1ac3      	subs	r3, r0, r3
 8013524:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	429a      	cmp	r2, r3
 801352c:	d901      	bls.n	8013532 <f_write+0x298>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	699b      	ldr	r3, [r3, #24]
 801353c:	693a      	ldr	r2, [r7, #16]
 801353e:	8992      	ldrh	r2, [r2, #12]
 8013540:	fbb3 f0f2 	udiv	r0, r3, r2
 8013544:	fb02 f200 	mul.w	r2, r2, r0
 8013548:	1a9b      	subs	r3, r3, r2
 801354a:	440b      	add	r3, r1
 801354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801354e:	69f9      	ldr	r1, [r7, #28]
 8013550:	4618      	mov	r0, r3
 8013552:	f7fd fd8b 	bl	801106c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	7d1b      	ldrb	r3, [r3, #20]
 801355a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801355e:	b2da      	uxtb	r2, r3
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013564:	69fa      	ldr	r2, [r7, #28]
 8013566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013568:	4413      	add	r3, r2
 801356a:	61fb      	str	r3, [r7, #28]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	699a      	ldr	r2, [r3, #24]
 8013570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013572:	441a      	add	r2, r3
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	619a      	str	r2, [r3, #24]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	68da      	ldr	r2, [r3, #12]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	699b      	ldr	r3, [r3, #24]
 8013580:	429a      	cmp	r2, r3
 8013582:	bf38      	it	cc
 8013584:	461a      	movcc	r2, r3
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	60da      	str	r2, [r3, #12]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	441a      	add	r2, r3
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	601a      	str	r2, [r3, #0]
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f47f aeb5 	bne.w	8013310 <f_write+0x76>
 80135a6:	e000      	b.n	80135aa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80135a8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	7d1b      	ldrb	r3, [r3, #20]
 80135ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80135b8:	2300      	movs	r3, #0
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3730      	adds	r7, #48	; 0x30
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
	...

080135c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f107 0208 	add.w	r2, r7, #8
 80135d2:	4611      	mov	r1, r2
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff fab7 	bl	8012b48 <validate>
 80135da:	4603      	mov	r3, r0
 80135dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80135de:	7dfb      	ldrb	r3, [r7, #23]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d167      	bne.n	80136b4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	7d1b      	ldrb	r3, [r3, #20]
 80135e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d061      	beq.n	80136b4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	7d1b      	ldrb	r3, [r3, #20]
 80135f4:	b25b      	sxtb	r3, r3
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	da15      	bge.n	8013626 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	7858      	ldrb	r0, [r3, #1]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6a1a      	ldr	r2, [r3, #32]
 8013608:	2301      	movs	r3, #1
 801360a:	f7fd fc6f 	bl	8010eec <disk_write>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d001      	beq.n	8013618 <f_sync+0x54>
 8013614:	2301      	movs	r3, #1
 8013616:	e04e      	b.n	80136b6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	7d1b      	ldrb	r3, [r3, #20]
 801361c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013620:	b2da      	uxtb	r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013626:	4b26      	ldr	r3, [pc, #152]	; (80136c0 <f_sync+0xfc>)
 8013628:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801362a:	68ba      	ldr	r2, [r7, #8]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013630:	4619      	mov	r1, r3
 8013632:	4610      	mov	r0, r2
 8013634:	f7fd ff48 	bl	80114c8 <move_window>
 8013638:	4603      	mov	r3, r0
 801363a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801363c:	7dfb      	ldrb	r3, [r7, #23]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d138      	bne.n	80136b4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013646:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	330b      	adds	r3, #11
 801364c:	781a      	ldrb	r2, [r3, #0]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	330b      	adds	r3, #11
 8013652:	f042 0220 	orr.w	r2, r2, #32
 8013656:	b2d2      	uxtb	r2, r2
 8013658:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6818      	ldr	r0, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	689b      	ldr	r3, [r3, #8]
 8013662:	461a      	mov	r2, r3
 8013664:	68f9      	ldr	r1, [r7, #12]
 8013666:	f7fe fccd 	bl	8012004 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f103 021c 	add.w	r2, r3, #28
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	4619      	mov	r1, r3
 8013676:	4610      	mov	r0, r2
 8013678:	f7fd fccc 	bl	8011014 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	3316      	adds	r3, #22
 8013680:	6939      	ldr	r1, [r7, #16]
 8013682:	4618      	mov	r0, r3
 8013684:	f7fd fcc6 	bl	8011014 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	3312      	adds	r3, #18
 801368c:	2100      	movs	r1, #0
 801368e:	4618      	mov	r0, r3
 8013690:	f7fd fca5 	bl	8010fde <st_word>
					fs->wflag = 1;
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	2201      	movs	r2, #1
 8013698:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	4618      	mov	r0, r3
 801369e:	f7fd ff41 	bl	8011524 <sync_fs>
 80136a2:	4603      	mov	r3, r0
 80136a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	7d1b      	ldrb	r3, [r3, #20]
 80136aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80136ae:	b2da      	uxtb	r2, r3
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3718      	adds	r7, #24
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}
 80136be:	bf00      	nop
 80136c0:	274a0000 	.word	0x274a0000

080136c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7ff ff79 	bl	80135c4 <f_sync>
 80136d2:	4603      	mov	r3, r0
 80136d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80136d6:	7bfb      	ldrb	r3, [r7, #15]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d118      	bne.n	801370e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f107 0208 	add.w	r2, r7, #8
 80136e2:	4611      	mov	r1, r2
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ff fa2f 	bl	8012b48 <validate>
 80136ea:	4603      	mov	r3, r0
 80136ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80136ee:	7bfb      	ldrb	r3, [r7, #15]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10c      	bne.n	801370e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	691b      	ldr	r3, [r3, #16]
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fd fe41 	bl	8011380 <dec_lock>
 80136fe:	4603      	mov	r3, r0
 8013700:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013702:	7bfb      	ldrb	r3, [r7, #15]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d102      	bne.n	801370e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013710:	4618      	mov	r0, r3
 8013712:	3710      	adds	r7, #16
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013718:	b590      	push	{r4, r7, lr}
 801371a:	b091      	sub	sp, #68	; 0x44
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013720:	f107 0108 	add.w	r1, r7, #8
 8013724:	1d3b      	adds	r3, r7, #4
 8013726:	2200      	movs	r2, #0
 8013728:	4618      	mov	r0, r3
 801372a:	f7fe ff87 	bl	801263c <find_volume>
 801372e:	4603      	mov	r3, r0
 8013730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013734:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013738:	2b00      	cmp	r3, #0
 801373a:	d131      	bne.n	80137a0 <f_chdir+0x88>
		dj.obj.fs = fs;
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	f107 030c 	add.w	r3, r7, #12
 8013746:	4611      	mov	r1, r2
 8013748:	4618      	mov	r0, r3
 801374a:	f7fe fe47 	bl	80123dc <follow_path>
 801374e:	4603      	mov	r3, r0
 8013750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013754:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013758:	2b00      	cmp	r3, #0
 801375a:	d11a      	bne.n	8013792 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801375c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013760:	b25b      	sxtb	r3, r3
 8013762:	2b00      	cmp	r3, #0
 8013764:	da03      	bge.n	801376e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	697a      	ldr	r2, [r7, #20]
 801376a:	619a      	str	r2, [r3, #24]
 801376c:	e011      	b.n	8013792 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801376e:	7cbb      	ldrb	r3, [r7, #18]
 8013770:	f003 0310 	and.w	r3, r3, #16
 8013774:	2b00      	cmp	r3, #0
 8013776:	d009      	beq.n	801378c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801377c:	68bc      	ldr	r4, [r7, #8]
 801377e:	4611      	mov	r1, r2
 8013780:	4618      	mov	r0, r3
 8013782:	f7fe fc20 	bl	8011fc6 <ld_clust>
 8013786:	4603      	mov	r3, r0
 8013788:	61a3      	str	r3, [r4, #24]
 801378a:	e002      	b.n	8013792 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801378c:	2305      	movs	r3, #5
 801378e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013796:	2b04      	cmp	r3, #4
 8013798:	d102      	bne.n	80137a0 <f_chdir+0x88>
 801379a:	2305      	movs	r3, #5
 801379c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80137a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3744      	adds	r7, #68	; 0x44
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd90      	pop	{r4, r7, pc}

080137ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b090      	sub	sp, #64	; 0x40
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f107 0208 	add.w	r2, r7, #8
 80137bc:	4611      	mov	r1, r2
 80137be:	4618      	mov	r0, r3
 80137c0:	f7ff f9c2 	bl	8012b48 <validate>
 80137c4:	4603      	mov	r3, r0
 80137c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80137ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d103      	bne.n	80137da <f_lseek+0x2e>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	7d5b      	ldrb	r3, [r3, #21]
 80137d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80137da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d002      	beq.n	80137e8 <f_lseek+0x3c>
 80137e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137e6:	e201      	b.n	8013bec <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f000 80d9 	beq.w	80139a4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137f8:	d15a      	bne.n	80138b0 <f_lseek+0x104>
			tbl = fp->cltbl;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137fe:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	1d1a      	adds	r2, r3, #4
 8013804:	627a      	str	r2, [r7, #36]	; 0x24
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	617b      	str	r3, [r7, #20]
 801380a:	2302      	movs	r3, #2
 801380c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013816:	2b00      	cmp	r3, #0
 8013818:	d03a      	beq.n	8013890 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	613b      	str	r3, [r7, #16]
 801381e:	2300      	movs	r3, #0
 8013820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013824:	3302      	adds	r3, #2
 8013826:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382a:	60fb      	str	r3, [r7, #12]
 801382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382e:	3301      	adds	r3, #1
 8013830:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013836:	4618      	mov	r0, r3
 8013838:	f7fd ff03 	bl	8011642 <get_fat>
 801383c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	2b01      	cmp	r3, #1
 8013842:	d804      	bhi.n	801384e <f_lseek+0xa2>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2202      	movs	r2, #2
 8013848:	755a      	strb	r2, [r3, #21]
 801384a:	2302      	movs	r3, #2
 801384c:	e1ce      	b.n	8013bec <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013854:	d104      	bne.n	8013860 <f_lseek+0xb4>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2201      	movs	r2, #1
 801385a:	755a      	strb	r2, [r3, #21]
 801385c:	2301      	movs	r3, #1
 801385e:	e1c5      	b.n	8013bec <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	3301      	adds	r3, #1
 8013864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013866:	429a      	cmp	r2, r3
 8013868:	d0de      	beq.n	8013828 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801386a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	429a      	cmp	r2, r3
 8013870:	d809      	bhi.n	8013886 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	1d1a      	adds	r2, r3, #4
 8013876:	627a      	str	r2, [r7, #36]	; 0x24
 8013878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801387a:	601a      	str	r2, [r3, #0]
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387e:	1d1a      	adds	r2, r3, #4
 8013880:	627a      	str	r2, [r7, #36]	; 0x24
 8013882:	693a      	ldr	r2, [r7, #16]
 8013884:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	69db      	ldr	r3, [r3, #28]
 801388a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801388c:	429a      	cmp	r2, r3
 801388e:	d3c4      	bcc.n	801381a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013896:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	429a      	cmp	r2, r3
 801389e:	d803      	bhi.n	80138a8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	2200      	movs	r2, #0
 80138a4:	601a      	str	r2, [r3, #0]
 80138a6:	e19f      	b.n	8013be8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80138a8:	2311      	movs	r3, #17
 80138aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80138ae:	e19b      	b.n	8013be8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	68db      	ldr	r3, [r3, #12]
 80138b4:	683a      	ldr	r2, [r7, #0]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d902      	bls.n	80138c0 <f_lseek+0x114>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	683a      	ldr	r2, [r7, #0]
 80138c4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	f000 818d 	beq.w	8013be8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	3b01      	subs	r3, #1
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7fe f998 	bl	8011c0a <clmt_clust>
 80138da:	4602      	mov	r2, r0
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80138e0:	68ba      	ldr	r2, [r7, #8]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	69db      	ldr	r3, [r3, #28]
 80138e6:	4619      	mov	r1, r3
 80138e8:	4610      	mov	r0, r2
 80138ea:	f7fd fe8b 	bl	8011604 <clust2sect>
 80138ee:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d104      	bne.n	8013900 <f_lseek+0x154>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2202      	movs	r2, #2
 80138fa:	755a      	strb	r2, [r3, #21]
 80138fc:	2302      	movs	r3, #2
 80138fe:	e175      	b.n	8013bec <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	3b01      	subs	r3, #1
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	8992      	ldrh	r2, [r2, #12]
 8013908:	fbb3 f3f2 	udiv	r3, r3, r2
 801390c:	68ba      	ldr	r2, [r7, #8]
 801390e:	8952      	ldrh	r2, [r2, #10]
 8013910:	3a01      	subs	r2, #1
 8013912:	4013      	ands	r3, r2
 8013914:	69ba      	ldr	r2, [r7, #24]
 8013916:	4413      	add	r3, r2
 8013918:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	699b      	ldr	r3, [r3, #24]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	8992      	ldrh	r2, [r2, #12]
 8013922:	fbb3 f1f2 	udiv	r1, r3, r2
 8013926:	fb02 f201 	mul.w	r2, r2, r1
 801392a:	1a9b      	subs	r3, r3, r2
 801392c:	2b00      	cmp	r3, #0
 801392e:	f000 815b 	beq.w	8013be8 <f_lseek+0x43c>
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6a1b      	ldr	r3, [r3, #32]
 8013936:	69ba      	ldr	r2, [r7, #24]
 8013938:	429a      	cmp	r2, r3
 801393a:	f000 8155 	beq.w	8013be8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	7d1b      	ldrb	r3, [r3, #20]
 8013942:	b25b      	sxtb	r3, r3
 8013944:	2b00      	cmp	r3, #0
 8013946:	da18      	bge.n	801397a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	7858      	ldrb	r0, [r3, #1]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6a1a      	ldr	r2, [r3, #32]
 8013956:	2301      	movs	r3, #1
 8013958:	f7fd fac8 	bl	8010eec <disk_write>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d004      	beq.n	801396c <f_lseek+0x1c0>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2201      	movs	r2, #1
 8013966:	755a      	strb	r2, [r3, #21]
 8013968:	2301      	movs	r3, #1
 801396a:	e13f      	b.n	8013bec <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	7d1b      	ldrb	r3, [r3, #20]
 8013970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013974:	b2da      	uxtb	r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	7858      	ldrb	r0, [r3, #1]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013984:	2301      	movs	r3, #1
 8013986:	69ba      	ldr	r2, [r7, #24]
 8013988:	f7fd fa90 	bl	8010eac <disk_read>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d004      	beq.n	801399c <f_lseek+0x1f0>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2201      	movs	r2, #1
 8013996:	755a      	strb	r2, [r3, #21]
 8013998:	2301      	movs	r3, #1
 801399a:	e127      	b.n	8013bec <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	69ba      	ldr	r2, [r7, #24]
 80139a0:	621a      	str	r2, [r3, #32]
 80139a2:	e121      	b.n	8013be8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	68db      	ldr	r3, [r3, #12]
 80139a8:	683a      	ldr	r2, [r7, #0]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d908      	bls.n	80139c0 <f_lseek+0x214>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	7d1b      	ldrb	r3, [r3, #20]
 80139b2:	f003 0302 	and.w	r3, r3, #2
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d102      	bne.n	80139c0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	699b      	ldr	r3, [r3, #24]
 80139c4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	637b      	str	r3, [r7, #52]	; 0x34
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139ce:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f000 80b5 	beq.w	8013b42 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	895b      	ldrh	r3, [r3, #10]
 80139dc:	461a      	mov	r2, r3
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	899b      	ldrh	r3, [r3, #12]
 80139e2:	fb03 f302 	mul.w	r3, r3, r2
 80139e6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80139e8:	6a3b      	ldr	r3, [r7, #32]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d01b      	beq.n	8013a26 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	1e5a      	subs	r2, r3, #1
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80139f8:	6a3b      	ldr	r3, [r7, #32]
 80139fa:	1e59      	subs	r1, r3, #1
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d30f      	bcc.n	8013a26 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013a06:	6a3b      	ldr	r3, [r7, #32]
 8013a08:	1e5a      	subs	r2, r3, #1
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	425b      	negs	r3, r3
 8013a0e:	401a      	ands	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	699b      	ldr	r3, [r3, #24]
 8013a18:	683a      	ldr	r2, [r7, #0]
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	69db      	ldr	r3, [r3, #28]
 8013a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a24:	e022      	b.n	8013a6c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	689b      	ldr	r3, [r3, #8]
 8013a2a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d119      	bne.n	8013a66 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2100      	movs	r1, #0
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fe f84f 	bl	8011ada <create_chain>
 8013a3c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d104      	bne.n	8013a4e <f_lseek+0x2a2>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2202      	movs	r2, #2
 8013a48:	755a      	strb	r2, [r3, #21]
 8013a4a:	2302      	movs	r3, #2
 8013a4c:	e0ce      	b.n	8013bec <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a54:	d104      	bne.n	8013a60 <f_lseek+0x2b4>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2201      	movs	r2, #1
 8013a5a:	755a      	strb	r2, [r3, #21]
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	e0c5      	b.n	8013bec <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a64:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a6a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d067      	beq.n	8013b42 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013a72:	e03a      	b.n	8013aea <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013a74:	683a      	ldr	r2, [r7, #0]
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	603b      	str	r3, [r7, #0]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	699a      	ldr	r2, [r3, #24]
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	441a      	add	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7d1b      	ldrb	r3, [r3, #20]
 8013a8c:	f003 0302 	and.w	r3, r3, #2
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d00b      	beq.n	8013aac <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7fe f81e 	bl	8011ada <create_chain>
 8013a9e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d108      	bne.n	8013ab8 <f_lseek+0x30c>
							ofs = 0; break;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	603b      	str	r3, [r7, #0]
 8013aaa:	e022      	b.n	8013af2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7fd fdc6 	bl	8011642 <get_fat>
 8013ab6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013abe:	d104      	bne.n	8013aca <f_lseek+0x31e>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	755a      	strb	r2, [r3, #21]
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e090      	b.n	8013bec <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013acc:	2b01      	cmp	r3, #1
 8013ace:	d904      	bls.n	8013ada <f_lseek+0x32e>
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	69db      	ldr	r3, [r3, #28]
 8013ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d304      	bcc.n	8013ae4 <f_lseek+0x338>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2202      	movs	r2, #2
 8013ade:	755a      	strb	r2, [r3, #21]
 8013ae0:	2302      	movs	r3, #2
 8013ae2:	e083      	b.n	8013bec <f_lseek+0x440>
					fp->clust = clst;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ae8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013aea:	683a      	ldr	r2, [r7, #0]
 8013aec:	69fb      	ldr	r3, [r7, #28]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d8c0      	bhi.n	8013a74 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	699a      	ldr	r2, [r3, #24]
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	441a      	add	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	899b      	ldrh	r3, [r3, #12]
 8013b02:	461a      	mov	r2, r3
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b0a:	fb02 f201 	mul.w	r2, r2, r1
 8013b0e:	1a9b      	subs	r3, r3, r2
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d016      	beq.n	8013b42 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fd fd73 	bl	8011604 <clust2sect>
 8013b1e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d104      	bne.n	8013b30 <f_lseek+0x384>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2202      	movs	r2, #2
 8013b2a:	755a      	strb	r2, [r3, #21]
 8013b2c:	2302      	movs	r3, #2
 8013b2e:	e05d      	b.n	8013bec <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	899b      	ldrh	r3, [r3, #12]
 8013b34:	461a      	mov	r2, r3
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b3e:	4413      	add	r3, r2
 8013b40:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	699a      	ldr	r2, [r3, #24]
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d90a      	bls.n	8013b64 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	699a      	ldr	r2, [r3, #24]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	7d1b      	ldrb	r3, [r3, #20]
 8013b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b5e:	b2da      	uxtb	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	699b      	ldr	r3, [r3, #24]
 8013b68:	68ba      	ldr	r2, [r7, #8]
 8013b6a:	8992      	ldrh	r2, [r2, #12]
 8013b6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b70:	fb02 f201 	mul.w	r2, r2, r1
 8013b74:	1a9b      	subs	r3, r3, r2
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d036      	beq.n	8013be8 <f_lseek+0x43c>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6a1b      	ldr	r3, [r3, #32]
 8013b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d031      	beq.n	8013be8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	7d1b      	ldrb	r3, [r3, #20]
 8013b88:	b25b      	sxtb	r3, r3
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	da18      	bge.n	8013bc0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	7858      	ldrb	r0, [r3, #1]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6a1a      	ldr	r2, [r3, #32]
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	f7fd f9a5 	bl	8010eec <disk_write>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d004      	beq.n	8013bb2 <f_lseek+0x406>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2201      	movs	r2, #1
 8013bac:	755a      	strb	r2, [r3, #21]
 8013bae:	2301      	movs	r3, #1
 8013bb0:	e01c      	b.n	8013bec <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	7d1b      	ldrb	r3, [r3, #20]
 8013bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bba:	b2da      	uxtb	r2, r3
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	7858      	ldrb	r0, [r3, #1]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bca:	2301      	movs	r3, #1
 8013bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bce:	f7fd f96d 	bl	8010eac <disk_read>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d004      	beq.n	8013be2 <f_lseek+0x436>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	755a      	strb	r2, [r3, #21]
 8013bde:	2301      	movs	r3, #1
 8013be0:	e004      	b.n	8013bec <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013be6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013be8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3740      	adds	r7, #64	; 0x40
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b09e      	sub	sp, #120	; 0x78
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c00:	f107 010c 	add.w	r1, r7, #12
 8013c04:	1d3b      	adds	r3, r7, #4
 8013c06:	2202      	movs	r2, #2
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7fe fd17 	bl	801263c <find_volume>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013c18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	f040 80a4 	bne.w	8013d6a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c28:	4611      	mov	r1, r2
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7fe fbd6 	bl	80123dc <follow_path>
 8013c30:	4603      	mov	r3, r0
 8013c32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d108      	bne.n	8013c50 <f_unlink+0x5c>
 8013c3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c42:	f003 0320 	and.w	r3, r3, #32
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d002      	beq.n	8013c50 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013c4a:	2306      	movs	r3, #6
 8013c4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013c50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d108      	bne.n	8013c6a <f_unlink+0x76>
 8013c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c5c:	2102      	movs	r1, #2
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fd fa82 	bl	8011168 <chk_lock>
 8013c64:	4603      	mov	r3, r0
 8013c66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013c6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d17b      	bne.n	8013d6a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013c72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c76:	b25b      	sxtb	r3, r3
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	da03      	bge.n	8013c84 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013c7c:	2306      	movs	r3, #6
 8013c7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013c82:	e008      	b.n	8013c96 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013c84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013c88:	f003 0301 	and.w	r3, r3, #1
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d002      	beq.n	8013c96 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013c90:	2307      	movs	r3, #7
 8013c92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013c96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d13d      	bne.n	8013d1a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ca2:	4611      	mov	r1, r2
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7fe f98e 	bl	8011fc6 <ld_clust>
 8013caa:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013cac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013cb0:	f003 0310 	and.w	r3, r3, #16
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d030      	beq.n	8013d1a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	699b      	ldr	r3, [r3, #24]
 8013cbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d103      	bne.n	8013cca <f_unlink+0xd6>
						res = FR_DENIED;
 8013cc2:	2307      	movs	r3, #7
 8013cc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013cc8:	e027      	b.n	8013d1a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013cd0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013cd2:	f107 0310 	add.w	r3, r7, #16
 8013cd6:	2100      	movs	r1, #0
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fd ffce 	bl	8011c7a <dir_sdi>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013ce4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d116      	bne.n	8013d1a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013cec:	f107 0310 	add.w	r3, r7, #16
 8013cf0:	2100      	movs	r1, #0
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7fe f9a6 	bl	8012044 <dir_read>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013cfe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d102      	bne.n	8013d0c <f_unlink+0x118>
 8013d06:	2307      	movs	r3, #7
 8013d08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d10:	2b04      	cmp	r3, #4
 8013d12:	d102      	bne.n	8013d1a <f_unlink+0x126>
 8013d14:	2300      	movs	r3, #0
 8013d16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013d1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d123      	bne.n	8013d6a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013d22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fe fa70 	bl	801220c <dir_remove>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013d32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10c      	bne.n	8013d54 <f_unlink+0x160>
 8013d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d009      	beq.n	8013d54 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d44:	2200      	movs	r2, #0
 8013d46:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fd fe61 	bl	8011a10 <remove_chain>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013d54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d106      	bne.n	8013d6a <f_unlink+0x176>
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fd fbe0 	bl	8011524 <sync_fs>
 8013d64:	4603      	mov	r3, r0
 8013d66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013d6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3778      	adds	r7, #120	; 0x78
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
	...

08013d78 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b096      	sub	sp, #88	; 0x58
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013d80:	f107 0108 	add.w	r1, r7, #8
 8013d84:	1d3b      	adds	r3, r7, #4
 8013d86:	2202      	movs	r2, #2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7fe fc57 	bl	801263c <find_volume>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f040 80fe 	bne.w	8013f9e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	f107 030c 	add.w	r3, r7, #12
 8013da8:	4611      	mov	r1, r2
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fb16 	bl	80123dc <follow_path>
 8013db0:	4603      	mov	r3, r0
 8013db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013db6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d102      	bne.n	8013dc4 <f_mkdir+0x4c>
 8013dbe:	2308      	movs	r3, #8
 8013dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dc8:	2b04      	cmp	r3, #4
 8013dca:	d108      	bne.n	8013dde <f_mkdir+0x66>
 8013dcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013dd0:	f003 0320 	and.w	r3, r3, #32
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d002      	beq.n	8013dde <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013dd8:	2306      	movs	r3, #6
 8013dda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013de2:	2b04      	cmp	r3, #4
 8013de4:	f040 80db 	bne.w	8013f9e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013de8:	f107 030c 	add.w	r3, r7, #12
 8013dec:	2100      	movs	r1, #0
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7fd fe73 	bl	8011ada <create_chain>
 8013df4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	895b      	ldrh	r3, [r3, #10]
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	899b      	ldrh	r3, [r3, #12]
 8013e00:	fb03 f302 	mul.w	r3, r3, r2
 8013e04:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013e06:	2300      	movs	r3, #0
 8013e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d102      	bne.n	8013e18 <f_mkdir+0xa0>
 8013e12:	2307      	movs	r3, #7
 8013e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e1a:	2b01      	cmp	r3, #1
 8013e1c:	d102      	bne.n	8013e24 <f_mkdir+0xac>
 8013e1e:	2302      	movs	r3, #2
 8013e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e2a:	d102      	bne.n	8013e32 <f_mkdir+0xba>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d106      	bne.n	8013e48 <f_mkdir+0xd0>
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7fd faff 	bl	8011440 <sync_window>
 8013e42:	4603      	mov	r3, r0
 8013e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013e48:	4b58      	ldr	r3, [pc, #352]	; (8013fac <f_mkdir+0x234>)
 8013e4a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d16c      	bne.n	8013f2e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fd fbd3 	bl	8011604 <clust2sect>
 8013e5e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	3338      	adds	r3, #56	; 0x38
 8013e64:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	899b      	ldrh	r3, [r3, #12]
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e70:	f7fd f91d 	bl	80110ae <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013e74:	220b      	movs	r2, #11
 8013e76:	2120      	movs	r1, #32
 8013e78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e7a:	f7fd f918 	bl	80110ae <mem_set>
					dir[DIR_Name] = '.';
 8013e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e80:	222e      	movs	r2, #46	; 0x2e
 8013e82:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e86:	330b      	adds	r3, #11
 8013e88:	2210      	movs	r2, #16
 8013e8a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8e:	3316      	adds	r3, #22
 8013e90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fd f8be 	bl	8011014 <st_dword>
					st_clust(fs, dir, dcl);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fe f8b0 	bl	8012004 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ea6:	3320      	adds	r3, #32
 8013ea8:	2220      	movs	r2, #32
 8013eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fd f8dd 	bl	801106c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eb4:	3321      	adds	r3, #33	; 0x21
 8013eb6:	222e      	movs	r2, #46	; 0x2e
 8013eb8:	701a      	strb	r2, [r3, #0]
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d106      	bne.n	8013ed4 <f_mkdir+0x15c>
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d101      	bne.n	8013ed4 <f_mkdir+0x15c>
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013ed4:	68b8      	ldr	r0, [r7, #8]
 8013ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ed8:	3320      	adds	r3, #32
 8013eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013edc:	4619      	mov	r1, r3
 8013ede:	f7fe f891 	bl	8012004 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	895b      	ldrh	r3, [r3, #10]
 8013ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8013ee8:	e01c      	b.n	8013f24 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eec:	1c5a      	adds	r2, r3, #1
 8013eee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013ef0:	68ba      	ldr	r2, [r7, #8]
 8013ef2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fd fa9f 	bl	8011440 <sync_window>
 8013f02:	4603      	mov	r3, r0
 8013f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d10d      	bne.n	8013f2c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	899b      	ldrh	r3, [r3, #12]
 8013f14:	461a      	mov	r2, r3
 8013f16:	2100      	movs	r1, #0
 8013f18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f1a:	f7fd f8c8 	bl	80110ae <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f20:	3b01      	subs	r3, #1
 8013f22:	653b      	str	r3, [r7, #80]	; 0x50
 8013f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d1df      	bne.n	8013eea <f_mkdir+0x172>
 8013f2a:	e000      	b.n	8013f2e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013f2c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d107      	bne.n	8013f46 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013f36:	f107 030c 	add.w	r3, r7, #12
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fe f934 	bl	80121a8 <dir_register>
 8013f40:	4603      	mov	r3, r0
 8013f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d120      	bne.n	8013f90 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f50:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f54:	3316      	adds	r3, #22
 8013f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fd f85b 	bl	8011014 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fe f84d 	bl	8012004 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f6c:	330b      	adds	r3, #11
 8013f6e:	2210      	movs	r2, #16
 8013f70:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	2201      	movs	r2, #1
 8013f76:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d10e      	bne.n	8013f9e <f_mkdir+0x226>
					res = sync_fs(fs);
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7fd face 	bl	8011524 <sync_fs>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013f8e:	e006      	b.n	8013f9e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013f90:	f107 030c 	add.w	r3, r7, #12
 8013f94:	2200      	movs	r2, #0
 8013f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fd fd39 	bl	8011a10 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3758      	adds	r7, #88	; 0x58
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}
 8013faa:	bf00      	nop
 8013fac:	274a0000 	.word	0x274a0000

08013fb0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b088      	sub	sp, #32
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60f8      	str	r0, [r7, #12]
 8013fb8:	60b9      	str	r1, [r7, #8]
 8013fba:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013fc4:	e017      	b.n	8013ff6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013fc6:	f107 0310 	add.w	r3, r7, #16
 8013fca:	f107 0114 	add.w	r1, r7, #20
 8013fce:	2201      	movs	r2, #1
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff f803 	bl	8012fdc <f_read>
		if (rc != 1) break;
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	d112      	bne.n	8014002 <f_gets+0x52>
		c = s[0];
 8013fdc:	7d3b      	ldrb	r3, [r7, #20]
 8013fde:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	1c5a      	adds	r2, r3, #1
 8013fe4:	61ba      	str	r2, [r7, #24]
 8013fe6:	7dfa      	ldrb	r2, [r7, #23]
 8013fe8:	701a      	strb	r2, [r3, #0]
		n++;
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	3301      	adds	r3, #1
 8013fee:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013ff0:	7dfb      	ldrb	r3, [r7, #23]
 8013ff2:	2b0a      	cmp	r3, #10
 8013ff4:	d007      	beq.n	8014006 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	69fa      	ldr	r2, [r7, #28]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	dbe2      	blt.n	8013fc6 <f_gets+0x16>
 8014000:	e002      	b.n	8014008 <f_gets+0x58>
		if (rc != 1) break;
 8014002:	bf00      	nop
 8014004:	e000      	b.n	8014008 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014006:	bf00      	nop
	}
	*p = 0;
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	2200      	movs	r2, #0
 801400c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801400e:	69fb      	ldr	r3, [r7, #28]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d001      	beq.n	8014018 <f_gets+0x68>
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	e000      	b.n	801401a <f_gets+0x6a>
 8014018:	2300      	movs	r3, #0
}
 801401a:	4618      	mov	r0, r3
 801401c:	3720      	adds	r7, #32
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014024:	b480      	push	{r7}
 8014026:	b087      	sub	sp, #28
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	4613      	mov	r3, r2
 8014030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014032:	2301      	movs	r3, #1
 8014034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014036:	2300      	movs	r3, #0
 8014038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801403a:	4b1f      	ldr	r3, [pc, #124]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 801403c:	7a5b      	ldrb	r3, [r3, #9]
 801403e:	b2db      	uxtb	r3, r3
 8014040:	2b00      	cmp	r3, #0
 8014042:	d131      	bne.n	80140a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014044:	4b1c      	ldr	r3, [pc, #112]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 8014046:	7a5b      	ldrb	r3, [r3, #9]
 8014048:	b2db      	uxtb	r3, r3
 801404a:	461a      	mov	r2, r3
 801404c:	4b1a      	ldr	r3, [pc, #104]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 801404e:	2100      	movs	r1, #0
 8014050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014052:	4b19      	ldr	r3, [pc, #100]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 8014054:	7a5b      	ldrb	r3, [r3, #9]
 8014056:	b2db      	uxtb	r3, r3
 8014058:	4a17      	ldr	r2, [pc, #92]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	4413      	add	r3, r2
 801405e:	68fa      	ldr	r2, [r7, #12]
 8014060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014062:	4b15      	ldr	r3, [pc, #84]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 8014064:	7a5b      	ldrb	r3, [r3, #9]
 8014066:	b2db      	uxtb	r3, r3
 8014068:	461a      	mov	r2, r3
 801406a:	4b13      	ldr	r3, [pc, #76]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 801406c:	4413      	add	r3, r2
 801406e:	79fa      	ldrb	r2, [r7, #7]
 8014070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014072:	4b11      	ldr	r3, [pc, #68]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 8014074:	7a5b      	ldrb	r3, [r3, #9]
 8014076:	b2db      	uxtb	r3, r3
 8014078:	1c5a      	adds	r2, r3, #1
 801407a:	b2d1      	uxtb	r1, r2
 801407c:	4a0e      	ldr	r2, [pc, #56]	; (80140b8 <FATFS_LinkDriverEx+0x94>)
 801407e:	7251      	strb	r1, [r2, #9]
 8014080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014082:	7dbb      	ldrb	r3, [r7, #22]
 8014084:	3330      	adds	r3, #48	; 0x30
 8014086:	b2da      	uxtb	r2, r3
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	3301      	adds	r3, #1
 8014090:	223a      	movs	r2, #58	; 0x3a
 8014092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	3302      	adds	r3, #2
 8014098:	222f      	movs	r2, #47	; 0x2f
 801409a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	3303      	adds	r3, #3
 80140a0:	2200      	movs	r2, #0
 80140a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80140a4:	2300      	movs	r3, #0
 80140a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80140a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	371c      	adds	r7, #28
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	200422dc 	.word	0x200422dc

080140bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80140c6:	2200      	movs	r2, #0
 80140c8:	6839      	ldr	r1, [r7, #0]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7ff ffaa 	bl	8014024 <FATFS_LinkDriverEx>
 80140d0:	4603      	mov	r3, r0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3708      	adds	r7, #8
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <__cxa_guard_acquire>:
 80140da:	6803      	ldr	r3, [r0, #0]
 80140dc:	07db      	lsls	r3, r3, #31
 80140de:	d406      	bmi.n	80140ee <__cxa_guard_acquire+0x14>
 80140e0:	7843      	ldrb	r3, [r0, #1]
 80140e2:	b103      	cbz	r3, 80140e6 <__cxa_guard_acquire+0xc>
 80140e4:	deff      	udf	#255	; 0xff
 80140e6:	2301      	movs	r3, #1
 80140e8:	7043      	strb	r3, [r0, #1]
 80140ea:	4618      	mov	r0, r3
 80140ec:	4770      	bx	lr
 80140ee:	2000      	movs	r0, #0
 80140f0:	4770      	bx	lr

080140f2 <__cxa_guard_release>:
 80140f2:	2301      	movs	r3, #1
 80140f4:	6003      	str	r3, [r0, #0]
 80140f6:	4770      	bx	lr

080140f8 <cos>:
 80140f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140fa:	ec51 0b10 	vmov	r0, r1, d0
 80140fe:	4a1e      	ldr	r2, [pc, #120]	; (8014178 <cos+0x80>)
 8014100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014104:	4293      	cmp	r3, r2
 8014106:	dc06      	bgt.n	8014116 <cos+0x1e>
 8014108:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014170 <cos+0x78>
 801410c:	f000 fa74 	bl	80145f8 <__kernel_cos>
 8014110:	ec51 0b10 	vmov	r0, r1, d0
 8014114:	e007      	b.n	8014126 <cos+0x2e>
 8014116:	4a19      	ldr	r2, [pc, #100]	; (801417c <cos+0x84>)
 8014118:	4293      	cmp	r3, r2
 801411a:	dd09      	ble.n	8014130 <cos+0x38>
 801411c:	ee10 2a10 	vmov	r2, s0
 8014120:	460b      	mov	r3, r1
 8014122:	f7ec f8c9 	bl	80002b8 <__aeabi_dsub>
 8014126:	ec41 0b10 	vmov	d0, r0, r1
 801412a:	b005      	add	sp, #20
 801412c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014130:	4668      	mov	r0, sp
 8014132:	f000 f86d 	bl	8014210 <__ieee754_rem_pio2>
 8014136:	f000 0003 	and.w	r0, r0, #3
 801413a:	2801      	cmp	r0, #1
 801413c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014140:	ed9d 0b00 	vldr	d0, [sp]
 8014144:	d007      	beq.n	8014156 <cos+0x5e>
 8014146:	2802      	cmp	r0, #2
 8014148:	d00e      	beq.n	8014168 <cos+0x70>
 801414a:	2800      	cmp	r0, #0
 801414c:	d0de      	beq.n	801410c <cos+0x14>
 801414e:	2001      	movs	r0, #1
 8014150:	f000 fe5a 	bl	8014e08 <__kernel_sin>
 8014154:	e7dc      	b.n	8014110 <cos+0x18>
 8014156:	f000 fe57 	bl	8014e08 <__kernel_sin>
 801415a:	ec53 2b10 	vmov	r2, r3, d0
 801415e:	ee10 0a10 	vmov	r0, s0
 8014162:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014166:	e7de      	b.n	8014126 <cos+0x2e>
 8014168:	f000 fa46 	bl	80145f8 <__kernel_cos>
 801416c:	e7f5      	b.n	801415a <cos+0x62>
 801416e:	bf00      	nop
	...
 8014178:	3fe921fb 	.word	0x3fe921fb
 801417c:	7fefffff 	.word	0x7fefffff

08014180 <sin>:
 8014180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014182:	ec51 0b10 	vmov	r0, r1, d0
 8014186:	4a20      	ldr	r2, [pc, #128]	; (8014208 <sin+0x88>)
 8014188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801418c:	4293      	cmp	r3, r2
 801418e:	dc07      	bgt.n	80141a0 <sin+0x20>
 8014190:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014200 <sin+0x80>
 8014194:	2000      	movs	r0, #0
 8014196:	f000 fe37 	bl	8014e08 <__kernel_sin>
 801419a:	ec51 0b10 	vmov	r0, r1, d0
 801419e:	e007      	b.n	80141b0 <sin+0x30>
 80141a0:	4a1a      	ldr	r2, [pc, #104]	; (801420c <sin+0x8c>)
 80141a2:	4293      	cmp	r3, r2
 80141a4:	dd09      	ble.n	80141ba <sin+0x3a>
 80141a6:	ee10 2a10 	vmov	r2, s0
 80141aa:	460b      	mov	r3, r1
 80141ac:	f7ec f884 	bl	80002b8 <__aeabi_dsub>
 80141b0:	ec41 0b10 	vmov	d0, r0, r1
 80141b4:	b005      	add	sp, #20
 80141b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80141ba:	4668      	mov	r0, sp
 80141bc:	f000 f828 	bl	8014210 <__ieee754_rem_pio2>
 80141c0:	f000 0003 	and.w	r0, r0, #3
 80141c4:	2801      	cmp	r0, #1
 80141c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141ca:	ed9d 0b00 	vldr	d0, [sp]
 80141ce:	d004      	beq.n	80141da <sin+0x5a>
 80141d0:	2802      	cmp	r0, #2
 80141d2:	d005      	beq.n	80141e0 <sin+0x60>
 80141d4:	b970      	cbnz	r0, 80141f4 <sin+0x74>
 80141d6:	2001      	movs	r0, #1
 80141d8:	e7dd      	b.n	8014196 <sin+0x16>
 80141da:	f000 fa0d 	bl	80145f8 <__kernel_cos>
 80141de:	e7dc      	b.n	801419a <sin+0x1a>
 80141e0:	2001      	movs	r0, #1
 80141e2:	f000 fe11 	bl	8014e08 <__kernel_sin>
 80141e6:	ec53 2b10 	vmov	r2, r3, d0
 80141ea:	ee10 0a10 	vmov	r0, s0
 80141ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80141f2:	e7dd      	b.n	80141b0 <sin+0x30>
 80141f4:	f000 fa00 	bl	80145f8 <__kernel_cos>
 80141f8:	e7f5      	b.n	80141e6 <sin+0x66>
 80141fa:	bf00      	nop
 80141fc:	f3af 8000 	nop.w
	...
 8014208:	3fe921fb 	.word	0x3fe921fb
 801420c:	7fefffff 	.word	0x7fefffff

08014210 <__ieee754_rem_pio2>:
 8014210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014214:	ec57 6b10 	vmov	r6, r7, d0
 8014218:	4bc3      	ldr	r3, [pc, #780]	; (8014528 <__ieee754_rem_pio2+0x318>)
 801421a:	b08d      	sub	sp, #52	; 0x34
 801421c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014220:	4598      	cmp	r8, r3
 8014222:	4604      	mov	r4, r0
 8014224:	9704      	str	r7, [sp, #16]
 8014226:	dc07      	bgt.n	8014238 <__ieee754_rem_pio2+0x28>
 8014228:	2200      	movs	r2, #0
 801422a:	2300      	movs	r3, #0
 801422c:	ed84 0b00 	vstr	d0, [r4]
 8014230:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014234:	2500      	movs	r5, #0
 8014236:	e027      	b.n	8014288 <__ieee754_rem_pio2+0x78>
 8014238:	4bbc      	ldr	r3, [pc, #752]	; (801452c <__ieee754_rem_pio2+0x31c>)
 801423a:	4598      	cmp	r8, r3
 801423c:	dc75      	bgt.n	801432a <__ieee754_rem_pio2+0x11a>
 801423e:	9b04      	ldr	r3, [sp, #16]
 8014240:	4dbb      	ldr	r5, [pc, #748]	; (8014530 <__ieee754_rem_pio2+0x320>)
 8014242:	2b00      	cmp	r3, #0
 8014244:	ee10 0a10 	vmov	r0, s0
 8014248:	a3a9      	add	r3, pc, #676	; (adr r3, 80144f0 <__ieee754_rem_pio2+0x2e0>)
 801424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424e:	4639      	mov	r1, r7
 8014250:	dd36      	ble.n	80142c0 <__ieee754_rem_pio2+0xb0>
 8014252:	f7ec f831 	bl	80002b8 <__aeabi_dsub>
 8014256:	45a8      	cmp	r8, r5
 8014258:	4606      	mov	r6, r0
 801425a:	460f      	mov	r7, r1
 801425c:	d018      	beq.n	8014290 <__ieee754_rem_pio2+0x80>
 801425e:	a3a6      	add	r3, pc, #664	; (adr r3, 80144f8 <__ieee754_rem_pio2+0x2e8>)
 8014260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014264:	f7ec f828 	bl	80002b8 <__aeabi_dsub>
 8014268:	4602      	mov	r2, r0
 801426a:	460b      	mov	r3, r1
 801426c:	e9c4 2300 	strd	r2, r3, [r4]
 8014270:	4630      	mov	r0, r6
 8014272:	4639      	mov	r1, r7
 8014274:	f7ec f820 	bl	80002b8 <__aeabi_dsub>
 8014278:	a39f      	add	r3, pc, #636	; (adr r3, 80144f8 <__ieee754_rem_pio2+0x2e8>)
 801427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427e:	f7ec f81b 	bl	80002b8 <__aeabi_dsub>
 8014282:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014286:	2501      	movs	r5, #1
 8014288:	4628      	mov	r0, r5
 801428a:	b00d      	add	sp, #52	; 0x34
 801428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014290:	a39b      	add	r3, pc, #620	; (adr r3, 8014500 <__ieee754_rem_pio2+0x2f0>)
 8014292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014296:	f7ec f80f 	bl	80002b8 <__aeabi_dsub>
 801429a:	a39b      	add	r3, pc, #620	; (adr r3, 8014508 <__ieee754_rem_pio2+0x2f8>)
 801429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a0:	4606      	mov	r6, r0
 80142a2:	460f      	mov	r7, r1
 80142a4:	f7ec f808 	bl	80002b8 <__aeabi_dsub>
 80142a8:	4602      	mov	r2, r0
 80142aa:	460b      	mov	r3, r1
 80142ac:	e9c4 2300 	strd	r2, r3, [r4]
 80142b0:	4630      	mov	r0, r6
 80142b2:	4639      	mov	r1, r7
 80142b4:	f7ec f800 	bl	80002b8 <__aeabi_dsub>
 80142b8:	a393      	add	r3, pc, #588	; (adr r3, 8014508 <__ieee754_rem_pio2+0x2f8>)
 80142ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142be:	e7de      	b.n	801427e <__ieee754_rem_pio2+0x6e>
 80142c0:	f7eb fffc 	bl	80002bc <__adddf3>
 80142c4:	45a8      	cmp	r8, r5
 80142c6:	4606      	mov	r6, r0
 80142c8:	460f      	mov	r7, r1
 80142ca:	d016      	beq.n	80142fa <__ieee754_rem_pio2+0xea>
 80142cc:	a38a      	add	r3, pc, #552	; (adr r3, 80144f8 <__ieee754_rem_pio2+0x2e8>)
 80142ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d2:	f7eb fff3 	bl	80002bc <__adddf3>
 80142d6:	4602      	mov	r2, r0
 80142d8:	460b      	mov	r3, r1
 80142da:	e9c4 2300 	strd	r2, r3, [r4]
 80142de:	4630      	mov	r0, r6
 80142e0:	4639      	mov	r1, r7
 80142e2:	f7eb ffe9 	bl	80002b8 <__aeabi_dsub>
 80142e6:	a384      	add	r3, pc, #528	; (adr r3, 80144f8 <__ieee754_rem_pio2+0x2e8>)
 80142e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ec:	f7eb ffe6 	bl	80002bc <__adddf3>
 80142f0:	f04f 35ff 	mov.w	r5, #4294967295
 80142f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142f8:	e7c6      	b.n	8014288 <__ieee754_rem_pio2+0x78>
 80142fa:	a381      	add	r3, pc, #516	; (adr r3, 8014500 <__ieee754_rem_pio2+0x2f0>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	f7eb ffdc 	bl	80002bc <__adddf3>
 8014304:	a380      	add	r3, pc, #512	; (adr r3, 8014508 <__ieee754_rem_pio2+0x2f8>)
 8014306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430a:	4606      	mov	r6, r0
 801430c:	460f      	mov	r7, r1
 801430e:	f7eb ffd5 	bl	80002bc <__adddf3>
 8014312:	4602      	mov	r2, r0
 8014314:	460b      	mov	r3, r1
 8014316:	e9c4 2300 	strd	r2, r3, [r4]
 801431a:	4630      	mov	r0, r6
 801431c:	4639      	mov	r1, r7
 801431e:	f7eb ffcb 	bl	80002b8 <__aeabi_dsub>
 8014322:	a379      	add	r3, pc, #484	; (adr r3, 8014508 <__ieee754_rem_pio2+0x2f8>)
 8014324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014328:	e7e0      	b.n	80142ec <__ieee754_rem_pio2+0xdc>
 801432a:	4b82      	ldr	r3, [pc, #520]	; (8014534 <__ieee754_rem_pio2+0x324>)
 801432c:	4598      	cmp	r8, r3
 801432e:	f300 80d0 	bgt.w	80144d2 <__ieee754_rem_pio2+0x2c2>
 8014332:	f000 fe23 	bl	8014f7c <fabs>
 8014336:	ec57 6b10 	vmov	r6, r7, d0
 801433a:	ee10 0a10 	vmov	r0, s0
 801433e:	a374      	add	r3, pc, #464	; (adr r3, 8014510 <__ieee754_rem_pio2+0x300>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	4639      	mov	r1, r7
 8014346:	f7ec f96f 	bl	8000628 <__aeabi_dmul>
 801434a:	2200      	movs	r2, #0
 801434c:	4b7a      	ldr	r3, [pc, #488]	; (8014538 <__ieee754_rem_pio2+0x328>)
 801434e:	f7eb ffb5 	bl	80002bc <__adddf3>
 8014352:	f7ec fc19 	bl	8000b88 <__aeabi_d2iz>
 8014356:	4605      	mov	r5, r0
 8014358:	f7ec f8fc 	bl	8000554 <__aeabi_i2d>
 801435c:	a364      	add	r3, pc, #400	; (adr r3, 80144f0 <__ieee754_rem_pio2+0x2e0>)
 801435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014366:	f7ec f95f 	bl	8000628 <__aeabi_dmul>
 801436a:	4602      	mov	r2, r0
 801436c:	460b      	mov	r3, r1
 801436e:	4630      	mov	r0, r6
 8014370:	4639      	mov	r1, r7
 8014372:	f7eb ffa1 	bl	80002b8 <__aeabi_dsub>
 8014376:	a360      	add	r3, pc, #384	; (adr r3, 80144f8 <__ieee754_rem_pio2+0x2e8>)
 8014378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437c:	4682      	mov	sl, r0
 801437e:	468b      	mov	fp, r1
 8014380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014384:	f7ec f950 	bl	8000628 <__aeabi_dmul>
 8014388:	2d1f      	cmp	r5, #31
 801438a:	4606      	mov	r6, r0
 801438c:	460f      	mov	r7, r1
 801438e:	dc0c      	bgt.n	80143aa <__ieee754_rem_pio2+0x19a>
 8014390:	1e6a      	subs	r2, r5, #1
 8014392:	4b6a      	ldr	r3, [pc, #424]	; (801453c <__ieee754_rem_pio2+0x32c>)
 8014394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014398:	4543      	cmp	r3, r8
 801439a:	d006      	beq.n	80143aa <__ieee754_rem_pio2+0x19a>
 801439c:	4632      	mov	r2, r6
 801439e:	463b      	mov	r3, r7
 80143a0:	4650      	mov	r0, sl
 80143a2:	4659      	mov	r1, fp
 80143a4:	f7eb ff88 	bl	80002b8 <__aeabi_dsub>
 80143a8:	e00e      	b.n	80143c8 <__ieee754_rem_pio2+0x1b8>
 80143aa:	4632      	mov	r2, r6
 80143ac:	463b      	mov	r3, r7
 80143ae:	4650      	mov	r0, sl
 80143b0:	4659      	mov	r1, fp
 80143b2:	f7eb ff81 	bl	80002b8 <__aeabi_dsub>
 80143b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80143ba:	9305      	str	r3, [sp, #20]
 80143bc:	9a05      	ldr	r2, [sp, #20]
 80143be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80143c2:	1ad3      	subs	r3, r2, r3
 80143c4:	2b10      	cmp	r3, #16
 80143c6:	dc02      	bgt.n	80143ce <__ieee754_rem_pio2+0x1be>
 80143c8:	e9c4 0100 	strd	r0, r1, [r4]
 80143cc:	e039      	b.n	8014442 <__ieee754_rem_pio2+0x232>
 80143ce:	a34c      	add	r3, pc, #304	; (adr r3, 8014500 <__ieee754_rem_pio2+0x2f0>)
 80143d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143d8:	f7ec f926 	bl	8000628 <__aeabi_dmul>
 80143dc:	4606      	mov	r6, r0
 80143de:	460f      	mov	r7, r1
 80143e0:	4602      	mov	r2, r0
 80143e2:	460b      	mov	r3, r1
 80143e4:	4650      	mov	r0, sl
 80143e6:	4659      	mov	r1, fp
 80143e8:	f7eb ff66 	bl	80002b8 <__aeabi_dsub>
 80143ec:	4602      	mov	r2, r0
 80143ee:	460b      	mov	r3, r1
 80143f0:	4680      	mov	r8, r0
 80143f2:	4689      	mov	r9, r1
 80143f4:	4650      	mov	r0, sl
 80143f6:	4659      	mov	r1, fp
 80143f8:	f7eb ff5e 	bl	80002b8 <__aeabi_dsub>
 80143fc:	4632      	mov	r2, r6
 80143fe:	463b      	mov	r3, r7
 8014400:	f7eb ff5a 	bl	80002b8 <__aeabi_dsub>
 8014404:	a340      	add	r3, pc, #256	; (adr r3, 8014508 <__ieee754_rem_pio2+0x2f8>)
 8014406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801440a:	4606      	mov	r6, r0
 801440c:	460f      	mov	r7, r1
 801440e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014412:	f7ec f909 	bl	8000628 <__aeabi_dmul>
 8014416:	4632      	mov	r2, r6
 8014418:	463b      	mov	r3, r7
 801441a:	f7eb ff4d 	bl	80002b8 <__aeabi_dsub>
 801441e:	4602      	mov	r2, r0
 8014420:	460b      	mov	r3, r1
 8014422:	4606      	mov	r6, r0
 8014424:	460f      	mov	r7, r1
 8014426:	4640      	mov	r0, r8
 8014428:	4649      	mov	r1, r9
 801442a:	f7eb ff45 	bl	80002b8 <__aeabi_dsub>
 801442e:	9a05      	ldr	r2, [sp, #20]
 8014430:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014434:	1ad3      	subs	r3, r2, r3
 8014436:	2b31      	cmp	r3, #49	; 0x31
 8014438:	dc20      	bgt.n	801447c <__ieee754_rem_pio2+0x26c>
 801443a:	e9c4 0100 	strd	r0, r1, [r4]
 801443e:	46c2      	mov	sl, r8
 8014440:	46cb      	mov	fp, r9
 8014442:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014446:	4650      	mov	r0, sl
 8014448:	4642      	mov	r2, r8
 801444a:	464b      	mov	r3, r9
 801444c:	4659      	mov	r1, fp
 801444e:	f7eb ff33 	bl	80002b8 <__aeabi_dsub>
 8014452:	463b      	mov	r3, r7
 8014454:	4632      	mov	r2, r6
 8014456:	f7eb ff2f 	bl	80002b8 <__aeabi_dsub>
 801445a:	9b04      	ldr	r3, [sp, #16]
 801445c:	2b00      	cmp	r3, #0
 801445e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014462:	f6bf af11 	bge.w	8014288 <__ieee754_rem_pio2+0x78>
 8014466:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801446a:	6063      	str	r3, [r4, #4]
 801446c:	f8c4 8000 	str.w	r8, [r4]
 8014470:	60a0      	str	r0, [r4, #8]
 8014472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014476:	60e3      	str	r3, [r4, #12]
 8014478:	426d      	negs	r5, r5
 801447a:	e705      	b.n	8014288 <__ieee754_rem_pio2+0x78>
 801447c:	a326      	add	r3, pc, #152	; (adr r3, 8014518 <__ieee754_rem_pio2+0x308>)
 801447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014486:	f7ec f8cf 	bl	8000628 <__aeabi_dmul>
 801448a:	4606      	mov	r6, r0
 801448c:	460f      	mov	r7, r1
 801448e:	4602      	mov	r2, r0
 8014490:	460b      	mov	r3, r1
 8014492:	4640      	mov	r0, r8
 8014494:	4649      	mov	r1, r9
 8014496:	f7eb ff0f 	bl	80002b8 <__aeabi_dsub>
 801449a:	4602      	mov	r2, r0
 801449c:	460b      	mov	r3, r1
 801449e:	4682      	mov	sl, r0
 80144a0:	468b      	mov	fp, r1
 80144a2:	4640      	mov	r0, r8
 80144a4:	4649      	mov	r1, r9
 80144a6:	f7eb ff07 	bl	80002b8 <__aeabi_dsub>
 80144aa:	4632      	mov	r2, r6
 80144ac:	463b      	mov	r3, r7
 80144ae:	f7eb ff03 	bl	80002b8 <__aeabi_dsub>
 80144b2:	a31b      	add	r3, pc, #108	; (adr r3, 8014520 <__ieee754_rem_pio2+0x310>)
 80144b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b8:	4606      	mov	r6, r0
 80144ba:	460f      	mov	r7, r1
 80144bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144c0:	f7ec f8b2 	bl	8000628 <__aeabi_dmul>
 80144c4:	4632      	mov	r2, r6
 80144c6:	463b      	mov	r3, r7
 80144c8:	f7eb fef6 	bl	80002b8 <__aeabi_dsub>
 80144cc:	4606      	mov	r6, r0
 80144ce:	460f      	mov	r7, r1
 80144d0:	e764      	b.n	801439c <__ieee754_rem_pio2+0x18c>
 80144d2:	4b1b      	ldr	r3, [pc, #108]	; (8014540 <__ieee754_rem_pio2+0x330>)
 80144d4:	4598      	cmp	r8, r3
 80144d6:	dd35      	ble.n	8014544 <__ieee754_rem_pio2+0x334>
 80144d8:	ee10 2a10 	vmov	r2, s0
 80144dc:	463b      	mov	r3, r7
 80144de:	4630      	mov	r0, r6
 80144e0:	4639      	mov	r1, r7
 80144e2:	f7eb fee9 	bl	80002b8 <__aeabi_dsub>
 80144e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144ea:	e9c4 0100 	strd	r0, r1, [r4]
 80144ee:	e6a1      	b.n	8014234 <__ieee754_rem_pio2+0x24>
 80144f0:	54400000 	.word	0x54400000
 80144f4:	3ff921fb 	.word	0x3ff921fb
 80144f8:	1a626331 	.word	0x1a626331
 80144fc:	3dd0b461 	.word	0x3dd0b461
 8014500:	1a600000 	.word	0x1a600000
 8014504:	3dd0b461 	.word	0x3dd0b461
 8014508:	2e037073 	.word	0x2e037073
 801450c:	3ba3198a 	.word	0x3ba3198a
 8014510:	6dc9c883 	.word	0x6dc9c883
 8014514:	3fe45f30 	.word	0x3fe45f30
 8014518:	2e000000 	.word	0x2e000000
 801451c:	3ba3198a 	.word	0x3ba3198a
 8014520:	252049c1 	.word	0x252049c1
 8014524:	397b839a 	.word	0x397b839a
 8014528:	3fe921fb 	.word	0x3fe921fb
 801452c:	4002d97b 	.word	0x4002d97b
 8014530:	3ff921fb 	.word	0x3ff921fb
 8014534:	413921fb 	.word	0x413921fb
 8014538:	3fe00000 	.word	0x3fe00000
 801453c:	08019aa4 	.word	0x08019aa4
 8014540:	7fefffff 	.word	0x7fefffff
 8014544:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014548:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801454c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014550:	4630      	mov	r0, r6
 8014552:	460f      	mov	r7, r1
 8014554:	f7ec fb18 	bl	8000b88 <__aeabi_d2iz>
 8014558:	f7eb fffc 	bl	8000554 <__aeabi_i2d>
 801455c:	4602      	mov	r2, r0
 801455e:	460b      	mov	r3, r1
 8014560:	4630      	mov	r0, r6
 8014562:	4639      	mov	r1, r7
 8014564:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014568:	f7eb fea6 	bl	80002b8 <__aeabi_dsub>
 801456c:	2200      	movs	r2, #0
 801456e:	4b1f      	ldr	r3, [pc, #124]	; (80145ec <__ieee754_rem_pio2+0x3dc>)
 8014570:	f7ec f85a 	bl	8000628 <__aeabi_dmul>
 8014574:	460f      	mov	r7, r1
 8014576:	4606      	mov	r6, r0
 8014578:	f7ec fb06 	bl	8000b88 <__aeabi_d2iz>
 801457c:	f7eb ffea 	bl	8000554 <__aeabi_i2d>
 8014580:	4602      	mov	r2, r0
 8014582:	460b      	mov	r3, r1
 8014584:	4630      	mov	r0, r6
 8014586:	4639      	mov	r1, r7
 8014588:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801458c:	f7eb fe94 	bl	80002b8 <__aeabi_dsub>
 8014590:	2200      	movs	r2, #0
 8014592:	4b16      	ldr	r3, [pc, #88]	; (80145ec <__ieee754_rem_pio2+0x3dc>)
 8014594:	f7ec f848 	bl	8000628 <__aeabi_dmul>
 8014598:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801459c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80145a0:	f04f 0803 	mov.w	r8, #3
 80145a4:	2600      	movs	r6, #0
 80145a6:	2700      	movs	r7, #0
 80145a8:	4632      	mov	r2, r6
 80145aa:	463b      	mov	r3, r7
 80145ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80145b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80145b4:	f7ec faa0 	bl	8000af8 <__aeabi_dcmpeq>
 80145b8:	b9b0      	cbnz	r0, 80145e8 <__ieee754_rem_pio2+0x3d8>
 80145ba:	4b0d      	ldr	r3, [pc, #52]	; (80145f0 <__ieee754_rem_pio2+0x3e0>)
 80145bc:	9301      	str	r3, [sp, #4]
 80145be:	2302      	movs	r3, #2
 80145c0:	9300      	str	r3, [sp, #0]
 80145c2:	462a      	mov	r2, r5
 80145c4:	4643      	mov	r3, r8
 80145c6:	4621      	mov	r1, r4
 80145c8:	a806      	add	r0, sp, #24
 80145ca:	f000 f8dd 	bl	8014788 <__kernel_rem_pio2>
 80145ce:	9b04      	ldr	r3, [sp, #16]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	4605      	mov	r5, r0
 80145d4:	f6bf ae58 	bge.w	8014288 <__ieee754_rem_pio2+0x78>
 80145d8:	6863      	ldr	r3, [r4, #4]
 80145da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80145de:	6063      	str	r3, [r4, #4]
 80145e0:	68e3      	ldr	r3, [r4, #12]
 80145e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80145e6:	e746      	b.n	8014476 <__ieee754_rem_pio2+0x266>
 80145e8:	46d0      	mov	r8, sl
 80145ea:	e7dd      	b.n	80145a8 <__ieee754_rem_pio2+0x398>
 80145ec:	41700000 	.word	0x41700000
 80145f0:	08019b24 	.word	0x08019b24
 80145f4:	00000000 	.word	0x00000000

080145f8 <__kernel_cos>:
 80145f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145fc:	ec59 8b10 	vmov	r8, r9, d0
 8014600:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014604:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014608:	ed2d 8b02 	vpush	{d8}
 801460c:	eeb0 8a41 	vmov.f32	s16, s2
 8014610:	eef0 8a61 	vmov.f32	s17, s3
 8014614:	da07      	bge.n	8014626 <__kernel_cos+0x2e>
 8014616:	ee10 0a10 	vmov	r0, s0
 801461a:	4649      	mov	r1, r9
 801461c:	f7ec fab4 	bl	8000b88 <__aeabi_d2iz>
 8014620:	2800      	cmp	r0, #0
 8014622:	f000 8089 	beq.w	8014738 <__kernel_cos+0x140>
 8014626:	4642      	mov	r2, r8
 8014628:	464b      	mov	r3, r9
 801462a:	4640      	mov	r0, r8
 801462c:	4649      	mov	r1, r9
 801462e:	f7eb fffb 	bl	8000628 <__aeabi_dmul>
 8014632:	2200      	movs	r2, #0
 8014634:	4b4e      	ldr	r3, [pc, #312]	; (8014770 <__kernel_cos+0x178>)
 8014636:	4604      	mov	r4, r0
 8014638:	460d      	mov	r5, r1
 801463a:	f7eb fff5 	bl	8000628 <__aeabi_dmul>
 801463e:	a340      	add	r3, pc, #256	; (adr r3, 8014740 <__kernel_cos+0x148>)
 8014640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014644:	4682      	mov	sl, r0
 8014646:	468b      	mov	fp, r1
 8014648:	4620      	mov	r0, r4
 801464a:	4629      	mov	r1, r5
 801464c:	f7eb ffec 	bl	8000628 <__aeabi_dmul>
 8014650:	a33d      	add	r3, pc, #244	; (adr r3, 8014748 <__kernel_cos+0x150>)
 8014652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014656:	f7eb fe31 	bl	80002bc <__adddf3>
 801465a:	4622      	mov	r2, r4
 801465c:	462b      	mov	r3, r5
 801465e:	f7eb ffe3 	bl	8000628 <__aeabi_dmul>
 8014662:	a33b      	add	r3, pc, #236	; (adr r3, 8014750 <__kernel_cos+0x158>)
 8014664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014668:	f7eb fe26 	bl	80002b8 <__aeabi_dsub>
 801466c:	4622      	mov	r2, r4
 801466e:	462b      	mov	r3, r5
 8014670:	f7eb ffda 	bl	8000628 <__aeabi_dmul>
 8014674:	a338      	add	r3, pc, #224	; (adr r3, 8014758 <__kernel_cos+0x160>)
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	f7eb fe1f 	bl	80002bc <__adddf3>
 801467e:	4622      	mov	r2, r4
 8014680:	462b      	mov	r3, r5
 8014682:	f7eb ffd1 	bl	8000628 <__aeabi_dmul>
 8014686:	a336      	add	r3, pc, #216	; (adr r3, 8014760 <__kernel_cos+0x168>)
 8014688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468c:	f7eb fe14 	bl	80002b8 <__aeabi_dsub>
 8014690:	4622      	mov	r2, r4
 8014692:	462b      	mov	r3, r5
 8014694:	f7eb ffc8 	bl	8000628 <__aeabi_dmul>
 8014698:	a333      	add	r3, pc, #204	; (adr r3, 8014768 <__kernel_cos+0x170>)
 801469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469e:	f7eb fe0d 	bl	80002bc <__adddf3>
 80146a2:	4622      	mov	r2, r4
 80146a4:	462b      	mov	r3, r5
 80146a6:	f7eb ffbf 	bl	8000628 <__aeabi_dmul>
 80146aa:	4622      	mov	r2, r4
 80146ac:	462b      	mov	r3, r5
 80146ae:	f7eb ffbb 	bl	8000628 <__aeabi_dmul>
 80146b2:	ec53 2b18 	vmov	r2, r3, d8
 80146b6:	4604      	mov	r4, r0
 80146b8:	460d      	mov	r5, r1
 80146ba:	4640      	mov	r0, r8
 80146bc:	4649      	mov	r1, r9
 80146be:	f7eb ffb3 	bl	8000628 <__aeabi_dmul>
 80146c2:	460b      	mov	r3, r1
 80146c4:	4602      	mov	r2, r0
 80146c6:	4629      	mov	r1, r5
 80146c8:	4620      	mov	r0, r4
 80146ca:	f7eb fdf5 	bl	80002b8 <__aeabi_dsub>
 80146ce:	4b29      	ldr	r3, [pc, #164]	; (8014774 <__kernel_cos+0x17c>)
 80146d0:	429e      	cmp	r6, r3
 80146d2:	4680      	mov	r8, r0
 80146d4:	4689      	mov	r9, r1
 80146d6:	dc11      	bgt.n	80146fc <__kernel_cos+0x104>
 80146d8:	4602      	mov	r2, r0
 80146da:	460b      	mov	r3, r1
 80146dc:	4650      	mov	r0, sl
 80146de:	4659      	mov	r1, fp
 80146e0:	f7eb fdea 	bl	80002b8 <__aeabi_dsub>
 80146e4:	460b      	mov	r3, r1
 80146e6:	4924      	ldr	r1, [pc, #144]	; (8014778 <__kernel_cos+0x180>)
 80146e8:	4602      	mov	r2, r0
 80146ea:	2000      	movs	r0, #0
 80146ec:	f7eb fde4 	bl	80002b8 <__aeabi_dsub>
 80146f0:	ecbd 8b02 	vpop	{d8}
 80146f4:	ec41 0b10 	vmov	d0, r0, r1
 80146f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fc:	4b1f      	ldr	r3, [pc, #124]	; (801477c <__kernel_cos+0x184>)
 80146fe:	491e      	ldr	r1, [pc, #120]	; (8014778 <__kernel_cos+0x180>)
 8014700:	429e      	cmp	r6, r3
 8014702:	bfcc      	ite	gt
 8014704:	4d1e      	ldrgt	r5, [pc, #120]	; (8014780 <__kernel_cos+0x188>)
 8014706:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801470a:	2400      	movs	r4, #0
 801470c:	4622      	mov	r2, r4
 801470e:	462b      	mov	r3, r5
 8014710:	2000      	movs	r0, #0
 8014712:	f7eb fdd1 	bl	80002b8 <__aeabi_dsub>
 8014716:	4622      	mov	r2, r4
 8014718:	4606      	mov	r6, r0
 801471a:	460f      	mov	r7, r1
 801471c:	462b      	mov	r3, r5
 801471e:	4650      	mov	r0, sl
 8014720:	4659      	mov	r1, fp
 8014722:	f7eb fdc9 	bl	80002b8 <__aeabi_dsub>
 8014726:	4642      	mov	r2, r8
 8014728:	464b      	mov	r3, r9
 801472a:	f7eb fdc5 	bl	80002b8 <__aeabi_dsub>
 801472e:	4602      	mov	r2, r0
 8014730:	460b      	mov	r3, r1
 8014732:	4630      	mov	r0, r6
 8014734:	4639      	mov	r1, r7
 8014736:	e7d9      	b.n	80146ec <__kernel_cos+0xf4>
 8014738:	2000      	movs	r0, #0
 801473a:	490f      	ldr	r1, [pc, #60]	; (8014778 <__kernel_cos+0x180>)
 801473c:	e7d8      	b.n	80146f0 <__kernel_cos+0xf8>
 801473e:	bf00      	nop
 8014740:	be8838d4 	.word	0xbe8838d4
 8014744:	bda8fae9 	.word	0xbda8fae9
 8014748:	bdb4b1c4 	.word	0xbdb4b1c4
 801474c:	3e21ee9e 	.word	0x3e21ee9e
 8014750:	809c52ad 	.word	0x809c52ad
 8014754:	3e927e4f 	.word	0x3e927e4f
 8014758:	19cb1590 	.word	0x19cb1590
 801475c:	3efa01a0 	.word	0x3efa01a0
 8014760:	16c15177 	.word	0x16c15177
 8014764:	3f56c16c 	.word	0x3f56c16c
 8014768:	5555554c 	.word	0x5555554c
 801476c:	3fa55555 	.word	0x3fa55555
 8014770:	3fe00000 	.word	0x3fe00000
 8014774:	3fd33332 	.word	0x3fd33332
 8014778:	3ff00000 	.word	0x3ff00000
 801477c:	3fe90000 	.word	0x3fe90000
 8014780:	3fd20000 	.word	0x3fd20000
 8014784:	00000000 	.word	0x00000000

08014788 <__kernel_rem_pio2>:
 8014788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801478c:	ed2d 8b02 	vpush	{d8}
 8014790:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014794:	1ed4      	subs	r4, r2, #3
 8014796:	9308      	str	r3, [sp, #32]
 8014798:	9101      	str	r1, [sp, #4]
 801479a:	4bc5      	ldr	r3, [pc, #788]	; (8014ab0 <__kernel_rem_pio2+0x328>)
 801479c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801479e:	9009      	str	r0, [sp, #36]	; 0x24
 80147a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80147a4:	9304      	str	r3, [sp, #16]
 80147a6:	9b08      	ldr	r3, [sp, #32]
 80147a8:	3b01      	subs	r3, #1
 80147aa:	9307      	str	r3, [sp, #28]
 80147ac:	2318      	movs	r3, #24
 80147ae:	fb94 f4f3 	sdiv	r4, r4, r3
 80147b2:	f06f 0317 	mvn.w	r3, #23
 80147b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80147ba:	fb04 3303 	mla	r3, r4, r3, r3
 80147be:	eb03 0a02 	add.w	sl, r3, r2
 80147c2:	9b04      	ldr	r3, [sp, #16]
 80147c4:	9a07      	ldr	r2, [sp, #28]
 80147c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014aa0 <__kernel_rem_pio2+0x318>
 80147ca:	eb03 0802 	add.w	r8, r3, r2
 80147ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80147d0:	1aa7      	subs	r7, r4, r2
 80147d2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80147d6:	ae22      	add	r6, sp, #136	; 0x88
 80147d8:	2500      	movs	r5, #0
 80147da:	4545      	cmp	r5, r8
 80147dc:	dd13      	ble.n	8014806 <__kernel_rem_pio2+0x7e>
 80147de:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014aa0 <__kernel_rem_pio2+0x318>
 80147e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80147e6:	2600      	movs	r6, #0
 80147e8:	9b04      	ldr	r3, [sp, #16]
 80147ea:	429e      	cmp	r6, r3
 80147ec:	dc32      	bgt.n	8014854 <__kernel_rem_pio2+0xcc>
 80147ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f0:	9302      	str	r3, [sp, #8]
 80147f2:	9b08      	ldr	r3, [sp, #32]
 80147f4:	199d      	adds	r5, r3, r6
 80147f6:	ab22      	add	r3, sp, #136	; 0x88
 80147f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80147fc:	9306      	str	r3, [sp, #24]
 80147fe:	ec59 8b18 	vmov	r8, r9, d8
 8014802:	2700      	movs	r7, #0
 8014804:	e01f      	b.n	8014846 <__kernel_rem_pio2+0xbe>
 8014806:	42ef      	cmn	r7, r5
 8014808:	d407      	bmi.n	801481a <__kernel_rem_pio2+0x92>
 801480a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801480e:	f7eb fea1 	bl	8000554 <__aeabi_i2d>
 8014812:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014816:	3501      	adds	r5, #1
 8014818:	e7df      	b.n	80147da <__kernel_rem_pio2+0x52>
 801481a:	ec51 0b18 	vmov	r0, r1, d8
 801481e:	e7f8      	b.n	8014812 <__kernel_rem_pio2+0x8a>
 8014820:	9906      	ldr	r1, [sp, #24]
 8014822:	9d02      	ldr	r5, [sp, #8]
 8014824:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014828:	9106      	str	r1, [sp, #24]
 801482a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801482e:	9502      	str	r5, [sp, #8]
 8014830:	f7eb fefa 	bl	8000628 <__aeabi_dmul>
 8014834:	4602      	mov	r2, r0
 8014836:	460b      	mov	r3, r1
 8014838:	4640      	mov	r0, r8
 801483a:	4649      	mov	r1, r9
 801483c:	f7eb fd3e 	bl	80002bc <__adddf3>
 8014840:	3701      	adds	r7, #1
 8014842:	4680      	mov	r8, r0
 8014844:	4689      	mov	r9, r1
 8014846:	9b07      	ldr	r3, [sp, #28]
 8014848:	429f      	cmp	r7, r3
 801484a:	dde9      	ble.n	8014820 <__kernel_rem_pio2+0x98>
 801484c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014850:	3601      	adds	r6, #1
 8014852:	e7c9      	b.n	80147e8 <__kernel_rem_pio2+0x60>
 8014854:	9b04      	ldr	r3, [sp, #16]
 8014856:	aa0e      	add	r2, sp, #56	; 0x38
 8014858:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801485c:	930c      	str	r3, [sp, #48]	; 0x30
 801485e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014860:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014864:	9c04      	ldr	r4, [sp, #16]
 8014866:	930b      	str	r3, [sp, #44]	; 0x2c
 8014868:	ab9a      	add	r3, sp, #616	; 0x268
 801486a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801486e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014872:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014876:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801487a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801487e:	ab9a      	add	r3, sp, #616	; 0x268
 8014880:	445b      	add	r3, fp
 8014882:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014886:	2500      	movs	r5, #0
 8014888:	1b63      	subs	r3, r4, r5
 801488a:	2b00      	cmp	r3, #0
 801488c:	dc78      	bgt.n	8014980 <__kernel_rem_pio2+0x1f8>
 801488e:	4650      	mov	r0, sl
 8014890:	ec49 8b10 	vmov	d0, r8, r9
 8014894:	f000 fc00 	bl	8015098 <scalbn>
 8014898:	ec57 6b10 	vmov	r6, r7, d0
 801489c:	2200      	movs	r2, #0
 801489e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80148a2:	ee10 0a10 	vmov	r0, s0
 80148a6:	4639      	mov	r1, r7
 80148a8:	f7eb febe 	bl	8000628 <__aeabi_dmul>
 80148ac:	ec41 0b10 	vmov	d0, r0, r1
 80148b0:	f000 fb6e 	bl	8014f90 <floor>
 80148b4:	2200      	movs	r2, #0
 80148b6:	ec51 0b10 	vmov	r0, r1, d0
 80148ba:	4b7e      	ldr	r3, [pc, #504]	; (8014ab4 <__kernel_rem_pio2+0x32c>)
 80148bc:	f7eb feb4 	bl	8000628 <__aeabi_dmul>
 80148c0:	4602      	mov	r2, r0
 80148c2:	460b      	mov	r3, r1
 80148c4:	4630      	mov	r0, r6
 80148c6:	4639      	mov	r1, r7
 80148c8:	f7eb fcf6 	bl	80002b8 <__aeabi_dsub>
 80148cc:	460f      	mov	r7, r1
 80148ce:	4606      	mov	r6, r0
 80148d0:	f7ec f95a 	bl	8000b88 <__aeabi_d2iz>
 80148d4:	9006      	str	r0, [sp, #24]
 80148d6:	f7eb fe3d 	bl	8000554 <__aeabi_i2d>
 80148da:	4602      	mov	r2, r0
 80148dc:	460b      	mov	r3, r1
 80148de:	4630      	mov	r0, r6
 80148e0:	4639      	mov	r1, r7
 80148e2:	f7eb fce9 	bl	80002b8 <__aeabi_dsub>
 80148e6:	f1ba 0f00 	cmp.w	sl, #0
 80148ea:	4606      	mov	r6, r0
 80148ec:	460f      	mov	r7, r1
 80148ee:	dd6c      	ble.n	80149ca <__kernel_rem_pio2+0x242>
 80148f0:	1e62      	subs	r2, r4, #1
 80148f2:	ab0e      	add	r3, sp, #56	; 0x38
 80148f4:	f1ca 0118 	rsb	r1, sl, #24
 80148f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80148fc:	9d06      	ldr	r5, [sp, #24]
 80148fe:	fa40 f301 	asr.w	r3, r0, r1
 8014902:	441d      	add	r5, r3
 8014904:	408b      	lsls	r3, r1
 8014906:	1ac0      	subs	r0, r0, r3
 8014908:	ab0e      	add	r3, sp, #56	; 0x38
 801490a:	9506      	str	r5, [sp, #24]
 801490c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014910:	f1ca 0317 	rsb	r3, sl, #23
 8014914:	fa40 f303 	asr.w	r3, r0, r3
 8014918:	9302      	str	r3, [sp, #8]
 801491a:	9b02      	ldr	r3, [sp, #8]
 801491c:	2b00      	cmp	r3, #0
 801491e:	dd62      	ble.n	80149e6 <__kernel_rem_pio2+0x25e>
 8014920:	9b06      	ldr	r3, [sp, #24]
 8014922:	2200      	movs	r2, #0
 8014924:	3301      	adds	r3, #1
 8014926:	9306      	str	r3, [sp, #24]
 8014928:	4615      	mov	r5, r2
 801492a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801492e:	4294      	cmp	r4, r2
 8014930:	f300 8095 	bgt.w	8014a5e <__kernel_rem_pio2+0x2d6>
 8014934:	f1ba 0f00 	cmp.w	sl, #0
 8014938:	dd07      	ble.n	801494a <__kernel_rem_pio2+0x1c2>
 801493a:	f1ba 0f01 	cmp.w	sl, #1
 801493e:	f000 80a2 	beq.w	8014a86 <__kernel_rem_pio2+0x2fe>
 8014942:	f1ba 0f02 	cmp.w	sl, #2
 8014946:	f000 80c1 	beq.w	8014acc <__kernel_rem_pio2+0x344>
 801494a:	9b02      	ldr	r3, [sp, #8]
 801494c:	2b02      	cmp	r3, #2
 801494e:	d14a      	bne.n	80149e6 <__kernel_rem_pio2+0x25e>
 8014950:	4632      	mov	r2, r6
 8014952:	463b      	mov	r3, r7
 8014954:	2000      	movs	r0, #0
 8014956:	4958      	ldr	r1, [pc, #352]	; (8014ab8 <__kernel_rem_pio2+0x330>)
 8014958:	f7eb fcae 	bl	80002b8 <__aeabi_dsub>
 801495c:	4606      	mov	r6, r0
 801495e:	460f      	mov	r7, r1
 8014960:	2d00      	cmp	r5, #0
 8014962:	d040      	beq.n	80149e6 <__kernel_rem_pio2+0x25e>
 8014964:	4650      	mov	r0, sl
 8014966:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014aa8 <__kernel_rem_pio2+0x320>
 801496a:	f000 fb95 	bl	8015098 <scalbn>
 801496e:	4630      	mov	r0, r6
 8014970:	4639      	mov	r1, r7
 8014972:	ec53 2b10 	vmov	r2, r3, d0
 8014976:	f7eb fc9f 	bl	80002b8 <__aeabi_dsub>
 801497a:	4606      	mov	r6, r0
 801497c:	460f      	mov	r7, r1
 801497e:	e032      	b.n	80149e6 <__kernel_rem_pio2+0x25e>
 8014980:	2200      	movs	r2, #0
 8014982:	4b4e      	ldr	r3, [pc, #312]	; (8014abc <__kernel_rem_pio2+0x334>)
 8014984:	4640      	mov	r0, r8
 8014986:	4649      	mov	r1, r9
 8014988:	f7eb fe4e 	bl	8000628 <__aeabi_dmul>
 801498c:	f7ec f8fc 	bl	8000b88 <__aeabi_d2iz>
 8014990:	f7eb fde0 	bl	8000554 <__aeabi_i2d>
 8014994:	2200      	movs	r2, #0
 8014996:	4b4a      	ldr	r3, [pc, #296]	; (8014ac0 <__kernel_rem_pio2+0x338>)
 8014998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801499c:	f7eb fe44 	bl	8000628 <__aeabi_dmul>
 80149a0:	4602      	mov	r2, r0
 80149a2:	460b      	mov	r3, r1
 80149a4:	4640      	mov	r0, r8
 80149a6:	4649      	mov	r1, r9
 80149a8:	f7eb fc86 	bl	80002b8 <__aeabi_dsub>
 80149ac:	f7ec f8ec 	bl	8000b88 <__aeabi_d2iz>
 80149b0:	ab0e      	add	r3, sp, #56	; 0x38
 80149b2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80149b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80149ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149be:	f7eb fc7d 	bl	80002bc <__adddf3>
 80149c2:	3501      	adds	r5, #1
 80149c4:	4680      	mov	r8, r0
 80149c6:	4689      	mov	r9, r1
 80149c8:	e75e      	b.n	8014888 <__kernel_rem_pio2+0x100>
 80149ca:	d105      	bne.n	80149d8 <__kernel_rem_pio2+0x250>
 80149cc:	1e63      	subs	r3, r4, #1
 80149ce:	aa0e      	add	r2, sp, #56	; 0x38
 80149d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80149d4:	15c3      	asrs	r3, r0, #23
 80149d6:	e79f      	b.n	8014918 <__kernel_rem_pio2+0x190>
 80149d8:	2200      	movs	r2, #0
 80149da:	4b3a      	ldr	r3, [pc, #232]	; (8014ac4 <__kernel_rem_pio2+0x33c>)
 80149dc:	f7ec f8aa 	bl	8000b34 <__aeabi_dcmpge>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	d139      	bne.n	8014a58 <__kernel_rem_pio2+0x2d0>
 80149e4:	9002      	str	r0, [sp, #8]
 80149e6:	2200      	movs	r2, #0
 80149e8:	2300      	movs	r3, #0
 80149ea:	4630      	mov	r0, r6
 80149ec:	4639      	mov	r1, r7
 80149ee:	f7ec f883 	bl	8000af8 <__aeabi_dcmpeq>
 80149f2:	2800      	cmp	r0, #0
 80149f4:	f000 80c7 	beq.w	8014b86 <__kernel_rem_pio2+0x3fe>
 80149f8:	1e65      	subs	r5, r4, #1
 80149fa:	462b      	mov	r3, r5
 80149fc:	2200      	movs	r2, #0
 80149fe:	9904      	ldr	r1, [sp, #16]
 8014a00:	428b      	cmp	r3, r1
 8014a02:	da6a      	bge.n	8014ada <__kernel_rem_pio2+0x352>
 8014a04:	2a00      	cmp	r2, #0
 8014a06:	f000 8088 	beq.w	8014b1a <__kernel_rem_pio2+0x392>
 8014a0a:	ab0e      	add	r3, sp, #56	; 0x38
 8014a0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014a10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	f000 80b4 	beq.w	8014b82 <__kernel_rem_pio2+0x3fa>
 8014a1a:	4650      	mov	r0, sl
 8014a1c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014aa8 <__kernel_rem_pio2+0x320>
 8014a20:	f000 fb3a 	bl	8015098 <scalbn>
 8014a24:	00ec      	lsls	r4, r5, #3
 8014a26:	ab72      	add	r3, sp, #456	; 0x1c8
 8014a28:	191e      	adds	r6, r3, r4
 8014a2a:	ec59 8b10 	vmov	r8, r9, d0
 8014a2e:	f106 0a08 	add.w	sl, r6, #8
 8014a32:	462f      	mov	r7, r5
 8014a34:	2f00      	cmp	r7, #0
 8014a36:	f280 80df 	bge.w	8014bf8 <__kernel_rem_pio2+0x470>
 8014a3a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014aa0 <__kernel_rem_pio2+0x318>
 8014a3e:	f04f 0a00 	mov.w	sl, #0
 8014a42:	eba5 030a 	sub.w	r3, r5, sl
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f2c0 810a 	blt.w	8014c60 <__kernel_rem_pio2+0x4d8>
 8014a4c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014ac8 <__kernel_rem_pio2+0x340>
 8014a50:	ec59 8b18 	vmov	r8, r9, d8
 8014a54:	2700      	movs	r7, #0
 8014a56:	e0f5      	b.n	8014c44 <__kernel_rem_pio2+0x4bc>
 8014a58:	2302      	movs	r3, #2
 8014a5a:	9302      	str	r3, [sp, #8]
 8014a5c:	e760      	b.n	8014920 <__kernel_rem_pio2+0x198>
 8014a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8014a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a64:	b94d      	cbnz	r5, 8014a7a <__kernel_rem_pio2+0x2f2>
 8014a66:	b12b      	cbz	r3, 8014a74 <__kernel_rem_pio2+0x2ec>
 8014a68:	a80e      	add	r0, sp, #56	; 0x38
 8014a6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014a6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014a72:	2301      	movs	r3, #1
 8014a74:	3201      	adds	r2, #1
 8014a76:	461d      	mov	r5, r3
 8014a78:	e759      	b.n	801492e <__kernel_rem_pio2+0x1a6>
 8014a7a:	a80e      	add	r0, sp, #56	; 0x38
 8014a7c:	1acb      	subs	r3, r1, r3
 8014a7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014a82:	462b      	mov	r3, r5
 8014a84:	e7f6      	b.n	8014a74 <__kernel_rem_pio2+0x2ec>
 8014a86:	1e62      	subs	r2, r4, #1
 8014a88:	ab0e      	add	r3, sp, #56	; 0x38
 8014a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014a92:	a90e      	add	r1, sp, #56	; 0x38
 8014a94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014a98:	e757      	b.n	801494a <__kernel_rem_pio2+0x1c2>
 8014a9a:	bf00      	nop
 8014a9c:	f3af 8000 	nop.w
	...
 8014aac:	3ff00000 	.word	0x3ff00000
 8014ab0:	08019c70 	.word	0x08019c70
 8014ab4:	40200000 	.word	0x40200000
 8014ab8:	3ff00000 	.word	0x3ff00000
 8014abc:	3e700000 	.word	0x3e700000
 8014ac0:	41700000 	.word	0x41700000
 8014ac4:	3fe00000 	.word	0x3fe00000
 8014ac8:	08019c30 	.word	0x08019c30
 8014acc:	1e62      	subs	r2, r4, #1
 8014ace:	ab0e      	add	r3, sp, #56	; 0x38
 8014ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014ad8:	e7db      	b.n	8014a92 <__kernel_rem_pio2+0x30a>
 8014ada:	a90e      	add	r1, sp, #56	; 0x38
 8014adc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014ae0:	3b01      	subs	r3, #1
 8014ae2:	430a      	orrs	r2, r1
 8014ae4:	e78b      	b.n	80149fe <__kernel_rem_pio2+0x276>
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014aec:	2900      	cmp	r1, #0
 8014aee:	d0fa      	beq.n	8014ae6 <__kernel_rem_pio2+0x35e>
 8014af0:	9a08      	ldr	r2, [sp, #32]
 8014af2:	4422      	add	r2, r4
 8014af4:	00d2      	lsls	r2, r2, #3
 8014af6:	a922      	add	r1, sp, #136	; 0x88
 8014af8:	18e3      	adds	r3, r4, r3
 8014afa:	9206      	str	r2, [sp, #24]
 8014afc:	440a      	add	r2, r1
 8014afe:	9302      	str	r3, [sp, #8]
 8014b00:	f10b 0108 	add.w	r1, fp, #8
 8014b04:	f102 0308 	add.w	r3, r2, #8
 8014b08:	1c66      	adds	r6, r4, #1
 8014b0a:	910a      	str	r1, [sp, #40]	; 0x28
 8014b0c:	2500      	movs	r5, #0
 8014b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8014b10:	9b02      	ldr	r3, [sp, #8]
 8014b12:	42b3      	cmp	r3, r6
 8014b14:	da04      	bge.n	8014b20 <__kernel_rem_pio2+0x398>
 8014b16:	461c      	mov	r4, r3
 8014b18:	e6a6      	b.n	8014868 <__kernel_rem_pio2+0xe0>
 8014b1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	e7e3      	b.n	8014ae8 <__kernel_rem_pio2+0x360>
 8014b20:	9b06      	ldr	r3, [sp, #24]
 8014b22:	18ef      	adds	r7, r5, r3
 8014b24:	ab22      	add	r3, sp, #136	; 0x88
 8014b26:	441f      	add	r7, r3
 8014b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014b2e:	f7eb fd11 	bl	8000554 <__aeabi_i2d>
 8014b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b34:	461c      	mov	r4, r3
 8014b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b38:	e9c7 0100 	strd	r0, r1, [r7]
 8014b3c:	eb03 0b05 	add.w	fp, r3, r5
 8014b40:	2700      	movs	r7, #0
 8014b42:	f04f 0800 	mov.w	r8, #0
 8014b46:	f04f 0900 	mov.w	r9, #0
 8014b4a:	9b07      	ldr	r3, [sp, #28]
 8014b4c:	429f      	cmp	r7, r3
 8014b4e:	dd08      	ble.n	8014b62 <__kernel_rem_pio2+0x3da>
 8014b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b52:	aa72      	add	r2, sp, #456	; 0x1c8
 8014b54:	18eb      	adds	r3, r5, r3
 8014b56:	4413      	add	r3, r2
 8014b58:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014b5c:	3601      	adds	r6, #1
 8014b5e:	3508      	adds	r5, #8
 8014b60:	e7d6      	b.n	8014b10 <__kernel_rem_pio2+0x388>
 8014b62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014b66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014b6a:	f7eb fd5d 	bl	8000628 <__aeabi_dmul>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	460b      	mov	r3, r1
 8014b72:	4640      	mov	r0, r8
 8014b74:	4649      	mov	r1, r9
 8014b76:	f7eb fba1 	bl	80002bc <__adddf3>
 8014b7a:	3701      	adds	r7, #1
 8014b7c:	4680      	mov	r8, r0
 8014b7e:	4689      	mov	r9, r1
 8014b80:	e7e3      	b.n	8014b4a <__kernel_rem_pio2+0x3c2>
 8014b82:	3d01      	subs	r5, #1
 8014b84:	e741      	b.n	8014a0a <__kernel_rem_pio2+0x282>
 8014b86:	f1ca 0000 	rsb	r0, sl, #0
 8014b8a:	ec47 6b10 	vmov	d0, r6, r7
 8014b8e:	f000 fa83 	bl	8015098 <scalbn>
 8014b92:	ec57 6b10 	vmov	r6, r7, d0
 8014b96:	2200      	movs	r2, #0
 8014b98:	4b99      	ldr	r3, [pc, #612]	; (8014e00 <__kernel_rem_pio2+0x678>)
 8014b9a:	ee10 0a10 	vmov	r0, s0
 8014b9e:	4639      	mov	r1, r7
 8014ba0:	f7eb ffc8 	bl	8000b34 <__aeabi_dcmpge>
 8014ba4:	b1f8      	cbz	r0, 8014be6 <__kernel_rem_pio2+0x45e>
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	4b96      	ldr	r3, [pc, #600]	; (8014e04 <__kernel_rem_pio2+0x67c>)
 8014baa:	4630      	mov	r0, r6
 8014bac:	4639      	mov	r1, r7
 8014bae:	f7eb fd3b 	bl	8000628 <__aeabi_dmul>
 8014bb2:	f7eb ffe9 	bl	8000b88 <__aeabi_d2iz>
 8014bb6:	4680      	mov	r8, r0
 8014bb8:	f7eb fccc 	bl	8000554 <__aeabi_i2d>
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	4b90      	ldr	r3, [pc, #576]	; (8014e00 <__kernel_rem_pio2+0x678>)
 8014bc0:	f7eb fd32 	bl	8000628 <__aeabi_dmul>
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	4639      	mov	r1, r7
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f7eb fb74 	bl	80002b8 <__aeabi_dsub>
 8014bd0:	f7eb ffda 	bl	8000b88 <__aeabi_d2iz>
 8014bd4:	1c65      	adds	r5, r4, #1
 8014bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8014bd8:	f10a 0a18 	add.w	sl, sl, #24
 8014bdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014be0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014be4:	e719      	b.n	8014a1a <__kernel_rem_pio2+0x292>
 8014be6:	4630      	mov	r0, r6
 8014be8:	4639      	mov	r1, r7
 8014bea:	f7eb ffcd 	bl	8000b88 <__aeabi_d2iz>
 8014bee:	ab0e      	add	r3, sp, #56	; 0x38
 8014bf0:	4625      	mov	r5, r4
 8014bf2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014bf6:	e710      	b.n	8014a1a <__kernel_rem_pio2+0x292>
 8014bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8014bfa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014bfe:	f7eb fca9 	bl	8000554 <__aeabi_i2d>
 8014c02:	4642      	mov	r2, r8
 8014c04:	464b      	mov	r3, r9
 8014c06:	f7eb fd0f 	bl	8000628 <__aeabi_dmul>
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014c10:	4b7c      	ldr	r3, [pc, #496]	; (8014e04 <__kernel_rem_pio2+0x67c>)
 8014c12:	4640      	mov	r0, r8
 8014c14:	4649      	mov	r1, r9
 8014c16:	f7eb fd07 	bl	8000628 <__aeabi_dmul>
 8014c1a:	3f01      	subs	r7, #1
 8014c1c:	4680      	mov	r8, r0
 8014c1e:	4689      	mov	r9, r1
 8014c20:	e708      	b.n	8014a34 <__kernel_rem_pio2+0x2ac>
 8014c22:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014c2e:	f7eb fcfb 	bl	8000628 <__aeabi_dmul>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4640      	mov	r0, r8
 8014c38:	4649      	mov	r1, r9
 8014c3a:	f7eb fb3f 	bl	80002bc <__adddf3>
 8014c3e:	3701      	adds	r7, #1
 8014c40:	4680      	mov	r8, r0
 8014c42:	4689      	mov	r9, r1
 8014c44:	9b04      	ldr	r3, [sp, #16]
 8014c46:	429f      	cmp	r7, r3
 8014c48:	dc01      	bgt.n	8014c4e <__kernel_rem_pio2+0x4c6>
 8014c4a:	45ba      	cmp	sl, r7
 8014c4c:	dae9      	bge.n	8014c22 <__kernel_rem_pio2+0x49a>
 8014c4e:	ab4a      	add	r3, sp, #296	; 0x128
 8014c50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014c54:	e9c3 8900 	strd	r8, r9, [r3]
 8014c58:	f10a 0a01 	add.w	sl, sl, #1
 8014c5c:	3e08      	subs	r6, #8
 8014c5e:	e6f0      	b.n	8014a42 <__kernel_rem_pio2+0x2ba>
 8014c60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	d85b      	bhi.n	8014d1e <__kernel_rem_pio2+0x596>
 8014c66:	e8df f003 	tbb	[pc, r3]
 8014c6a:	264a      	.short	0x264a
 8014c6c:	0226      	.short	0x0226
 8014c6e:	ab9a      	add	r3, sp, #616	; 0x268
 8014c70:	441c      	add	r4, r3
 8014c72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014c76:	46a2      	mov	sl, r4
 8014c78:	46ab      	mov	fp, r5
 8014c7a:	f1bb 0f00 	cmp.w	fp, #0
 8014c7e:	dc6c      	bgt.n	8014d5a <__kernel_rem_pio2+0x5d2>
 8014c80:	46a2      	mov	sl, r4
 8014c82:	46ab      	mov	fp, r5
 8014c84:	f1bb 0f01 	cmp.w	fp, #1
 8014c88:	f300 8086 	bgt.w	8014d98 <__kernel_rem_pio2+0x610>
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	2100      	movs	r1, #0
 8014c90:	2d01      	cmp	r5, #1
 8014c92:	f300 80a0 	bgt.w	8014dd6 <__kernel_rem_pio2+0x64e>
 8014c96:	9b02      	ldr	r3, [sp, #8]
 8014c98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014c9c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	f040 809e 	bne.w	8014de2 <__kernel_rem_pio2+0x65a>
 8014ca6:	9b01      	ldr	r3, [sp, #4]
 8014ca8:	e9c3 7800 	strd	r7, r8, [r3]
 8014cac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014cb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014cb4:	e033      	b.n	8014d1e <__kernel_rem_pio2+0x596>
 8014cb6:	3408      	adds	r4, #8
 8014cb8:	ab4a      	add	r3, sp, #296	; 0x128
 8014cba:	441c      	add	r4, r3
 8014cbc:	462e      	mov	r6, r5
 8014cbe:	2000      	movs	r0, #0
 8014cc0:	2100      	movs	r1, #0
 8014cc2:	2e00      	cmp	r6, #0
 8014cc4:	da3a      	bge.n	8014d3c <__kernel_rem_pio2+0x5b4>
 8014cc6:	9b02      	ldr	r3, [sp, #8]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d03d      	beq.n	8014d48 <__kernel_rem_pio2+0x5c0>
 8014ccc:	4602      	mov	r2, r0
 8014cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cd2:	9c01      	ldr	r4, [sp, #4]
 8014cd4:	e9c4 2300 	strd	r2, r3, [r4]
 8014cd8:	4602      	mov	r2, r0
 8014cda:	460b      	mov	r3, r1
 8014cdc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014ce0:	f7eb faea 	bl	80002b8 <__aeabi_dsub>
 8014ce4:	ae4c      	add	r6, sp, #304	; 0x130
 8014ce6:	2401      	movs	r4, #1
 8014ce8:	42a5      	cmp	r5, r4
 8014cea:	da30      	bge.n	8014d4e <__kernel_rem_pio2+0x5c6>
 8014cec:	9b02      	ldr	r3, [sp, #8]
 8014cee:	b113      	cbz	r3, 8014cf6 <__kernel_rem_pio2+0x56e>
 8014cf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	9b01      	ldr	r3, [sp, #4]
 8014cf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014cfc:	e00f      	b.n	8014d1e <__kernel_rem_pio2+0x596>
 8014cfe:	ab9a      	add	r3, sp, #616	; 0x268
 8014d00:	441c      	add	r4, r3
 8014d02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014d06:	2000      	movs	r0, #0
 8014d08:	2100      	movs	r1, #0
 8014d0a:	2d00      	cmp	r5, #0
 8014d0c:	da10      	bge.n	8014d30 <__kernel_rem_pio2+0x5a8>
 8014d0e:	9b02      	ldr	r3, [sp, #8]
 8014d10:	b113      	cbz	r3, 8014d18 <__kernel_rem_pio2+0x590>
 8014d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d16:	4619      	mov	r1, r3
 8014d18:	9b01      	ldr	r3, [sp, #4]
 8014d1a:	e9c3 0100 	strd	r0, r1, [r3]
 8014d1e:	9b06      	ldr	r3, [sp, #24]
 8014d20:	f003 0007 	and.w	r0, r3, #7
 8014d24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014d28:	ecbd 8b02 	vpop	{d8}
 8014d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d30:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014d34:	f7eb fac2 	bl	80002bc <__adddf3>
 8014d38:	3d01      	subs	r5, #1
 8014d3a:	e7e6      	b.n	8014d0a <__kernel_rem_pio2+0x582>
 8014d3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014d40:	f7eb fabc 	bl	80002bc <__adddf3>
 8014d44:	3e01      	subs	r6, #1
 8014d46:	e7bc      	b.n	8014cc2 <__kernel_rem_pio2+0x53a>
 8014d48:	4602      	mov	r2, r0
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	e7c1      	b.n	8014cd2 <__kernel_rem_pio2+0x54a>
 8014d4e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014d52:	f7eb fab3 	bl	80002bc <__adddf3>
 8014d56:	3401      	adds	r4, #1
 8014d58:	e7c6      	b.n	8014ce8 <__kernel_rem_pio2+0x560>
 8014d5a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014d5e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014d62:	4640      	mov	r0, r8
 8014d64:	ec53 2b17 	vmov	r2, r3, d7
 8014d68:	4649      	mov	r1, r9
 8014d6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014d6e:	f7eb faa5 	bl	80002bc <__adddf3>
 8014d72:	4602      	mov	r2, r0
 8014d74:	460b      	mov	r3, r1
 8014d76:	4606      	mov	r6, r0
 8014d78:	460f      	mov	r7, r1
 8014d7a:	4640      	mov	r0, r8
 8014d7c:	4649      	mov	r1, r9
 8014d7e:	f7eb fa9b 	bl	80002b8 <__aeabi_dsub>
 8014d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d86:	f7eb fa99 	bl	80002bc <__adddf3>
 8014d8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d8e:	e9ca 0100 	strd	r0, r1, [sl]
 8014d92:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014d96:	e770      	b.n	8014c7a <__kernel_rem_pio2+0x4f2>
 8014d98:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014d9c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014da0:	4630      	mov	r0, r6
 8014da2:	ec53 2b17 	vmov	r2, r3, d7
 8014da6:	4639      	mov	r1, r7
 8014da8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014dac:	f7eb fa86 	bl	80002bc <__adddf3>
 8014db0:	4602      	mov	r2, r0
 8014db2:	460b      	mov	r3, r1
 8014db4:	4680      	mov	r8, r0
 8014db6:	4689      	mov	r9, r1
 8014db8:	4630      	mov	r0, r6
 8014dba:	4639      	mov	r1, r7
 8014dbc:	f7eb fa7c 	bl	80002b8 <__aeabi_dsub>
 8014dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dc4:	f7eb fa7a 	bl	80002bc <__adddf3>
 8014dc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014dcc:	e9ca 0100 	strd	r0, r1, [sl]
 8014dd0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014dd4:	e756      	b.n	8014c84 <__kernel_rem_pio2+0x4fc>
 8014dd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014dda:	f7eb fa6f 	bl	80002bc <__adddf3>
 8014dde:	3d01      	subs	r5, #1
 8014de0:	e756      	b.n	8014c90 <__kernel_rem_pio2+0x508>
 8014de2:	9b01      	ldr	r3, [sp, #4]
 8014de4:	9a01      	ldr	r2, [sp, #4]
 8014de6:	601f      	str	r7, [r3, #0]
 8014de8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014dec:	605c      	str	r4, [r3, #4]
 8014dee:	609d      	str	r5, [r3, #8]
 8014df0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014df4:	60d3      	str	r3, [r2, #12]
 8014df6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dfa:	6110      	str	r0, [r2, #16]
 8014dfc:	6153      	str	r3, [r2, #20]
 8014dfe:	e78e      	b.n	8014d1e <__kernel_rem_pio2+0x596>
 8014e00:	41700000 	.word	0x41700000
 8014e04:	3e700000 	.word	0x3e700000

08014e08 <__kernel_sin>:
 8014e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e0c:	ec55 4b10 	vmov	r4, r5, d0
 8014e10:	b085      	sub	sp, #20
 8014e12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014e16:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014e1a:	ed8d 1b00 	vstr	d1, [sp]
 8014e1e:	9002      	str	r0, [sp, #8]
 8014e20:	da06      	bge.n	8014e30 <__kernel_sin+0x28>
 8014e22:	ee10 0a10 	vmov	r0, s0
 8014e26:	4629      	mov	r1, r5
 8014e28:	f7eb feae 	bl	8000b88 <__aeabi_d2iz>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d051      	beq.n	8014ed4 <__kernel_sin+0xcc>
 8014e30:	4622      	mov	r2, r4
 8014e32:	462b      	mov	r3, r5
 8014e34:	4620      	mov	r0, r4
 8014e36:	4629      	mov	r1, r5
 8014e38:	f7eb fbf6 	bl	8000628 <__aeabi_dmul>
 8014e3c:	4682      	mov	sl, r0
 8014e3e:	468b      	mov	fp, r1
 8014e40:	4602      	mov	r2, r0
 8014e42:	460b      	mov	r3, r1
 8014e44:	4620      	mov	r0, r4
 8014e46:	4629      	mov	r1, r5
 8014e48:	f7eb fbee 	bl	8000628 <__aeabi_dmul>
 8014e4c:	a341      	add	r3, pc, #260	; (adr r3, 8014f54 <__kernel_sin+0x14c>)
 8014e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e52:	4680      	mov	r8, r0
 8014e54:	4689      	mov	r9, r1
 8014e56:	4650      	mov	r0, sl
 8014e58:	4659      	mov	r1, fp
 8014e5a:	f7eb fbe5 	bl	8000628 <__aeabi_dmul>
 8014e5e:	a33f      	add	r3, pc, #252	; (adr r3, 8014f5c <__kernel_sin+0x154>)
 8014e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e64:	f7eb fa28 	bl	80002b8 <__aeabi_dsub>
 8014e68:	4652      	mov	r2, sl
 8014e6a:	465b      	mov	r3, fp
 8014e6c:	f7eb fbdc 	bl	8000628 <__aeabi_dmul>
 8014e70:	a33c      	add	r3, pc, #240	; (adr r3, 8014f64 <__kernel_sin+0x15c>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb fa21 	bl	80002bc <__adddf3>
 8014e7a:	4652      	mov	r2, sl
 8014e7c:	465b      	mov	r3, fp
 8014e7e:	f7eb fbd3 	bl	8000628 <__aeabi_dmul>
 8014e82:	a33a      	add	r3, pc, #232	; (adr r3, 8014f6c <__kernel_sin+0x164>)
 8014e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e88:	f7eb fa16 	bl	80002b8 <__aeabi_dsub>
 8014e8c:	4652      	mov	r2, sl
 8014e8e:	465b      	mov	r3, fp
 8014e90:	f7eb fbca 	bl	8000628 <__aeabi_dmul>
 8014e94:	a337      	add	r3, pc, #220	; (adr r3, 8014f74 <__kernel_sin+0x16c>)
 8014e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9a:	f7eb fa0f 	bl	80002bc <__adddf3>
 8014e9e:	9b02      	ldr	r3, [sp, #8]
 8014ea0:	4606      	mov	r6, r0
 8014ea2:	460f      	mov	r7, r1
 8014ea4:	b9db      	cbnz	r3, 8014ede <__kernel_sin+0xd6>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4650      	mov	r0, sl
 8014eac:	4659      	mov	r1, fp
 8014eae:	f7eb fbbb 	bl	8000628 <__aeabi_dmul>
 8014eb2:	a325      	add	r3, pc, #148	; (adr r3, 8014f48 <__kernel_sin+0x140>)
 8014eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb8:	f7eb f9fe 	bl	80002b8 <__aeabi_dsub>
 8014ebc:	4642      	mov	r2, r8
 8014ebe:	464b      	mov	r3, r9
 8014ec0:	f7eb fbb2 	bl	8000628 <__aeabi_dmul>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4629      	mov	r1, r5
 8014ecc:	f7eb f9f6 	bl	80002bc <__adddf3>
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	ec45 4b10 	vmov	d0, r4, r5
 8014ed8:	b005      	add	sp, #20
 8014eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ede:	2200      	movs	r2, #0
 8014ee0:	4b1b      	ldr	r3, [pc, #108]	; (8014f50 <__kernel_sin+0x148>)
 8014ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ee6:	f7eb fb9f 	bl	8000628 <__aeabi_dmul>
 8014eea:	4632      	mov	r2, r6
 8014eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ef0:	463b      	mov	r3, r7
 8014ef2:	4640      	mov	r0, r8
 8014ef4:	4649      	mov	r1, r9
 8014ef6:	f7eb fb97 	bl	8000628 <__aeabi_dmul>
 8014efa:	4602      	mov	r2, r0
 8014efc:	460b      	mov	r3, r1
 8014efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f02:	f7eb f9d9 	bl	80002b8 <__aeabi_dsub>
 8014f06:	4652      	mov	r2, sl
 8014f08:	465b      	mov	r3, fp
 8014f0a:	f7eb fb8d 	bl	8000628 <__aeabi_dmul>
 8014f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f12:	f7eb f9d1 	bl	80002b8 <__aeabi_dsub>
 8014f16:	a30c      	add	r3, pc, #48	; (adr r3, 8014f48 <__kernel_sin+0x140>)
 8014f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1c:	4606      	mov	r6, r0
 8014f1e:	460f      	mov	r7, r1
 8014f20:	4640      	mov	r0, r8
 8014f22:	4649      	mov	r1, r9
 8014f24:	f7eb fb80 	bl	8000628 <__aeabi_dmul>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	4639      	mov	r1, r7
 8014f30:	f7eb f9c4 	bl	80002bc <__adddf3>
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4620      	mov	r0, r4
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	f7eb f9bc 	bl	80002b8 <__aeabi_dsub>
 8014f40:	e7c6      	b.n	8014ed0 <__kernel_sin+0xc8>
 8014f42:	bf00      	nop
 8014f44:	f3af 8000 	nop.w
 8014f48:	55555549 	.word	0x55555549
 8014f4c:	3fc55555 	.word	0x3fc55555
 8014f50:	3fe00000 	.word	0x3fe00000
 8014f54:	5acfd57c 	.word	0x5acfd57c
 8014f58:	3de5d93a 	.word	0x3de5d93a
 8014f5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014f60:	3e5ae5e6 	.word	0x3e5ae5e6
 8014f64:	57b1fe7d 	.word	0x57b1fe7d
 8014f68:	3ec71de3 	.word	0x3ec71de3
 8014f6c:	19c161d5 	.word	0x19c161d5
 8014f70:	3f2a01a0 	.word	0x3f2a01a0
 8014f74:	1110f8a6 	.word	0x1110f8a6
 8014f78:	3f811111 	.word	0x3f811111

08014f7c <fabs>:
 8014f7c:	ec51 0b10 	vmov	r0, r1, d0
 8014f80:	ee10 2a10 	vmov	r2, s0
 8014f84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014f88:	ec43 2b10 	vmov	d0, r2, r3
 8014f8c:	4770      	bx	lr
	...

08014f90 <floor>:
 8014f90:	ec51 0b10 	vmov	r0, r1, d0
 8014f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014f9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014fa0:	2e13      	cmp	r6, #19
 8014fa2:	460c      	mov	r4, r1
 8014fa4:	ee10 5a10 	vmov	r5, s0
 8014fa8:	4680      	mov	r8, r0
 8014faa:	dc34      	bgt.n	8015016 <floor+0x86>
 8014fac:	2e00      	cmp	r6, #0
 8014fae:	da16      	bge.n	8014fde <floor+0x4e>
 8014fb0:	a335      	add	r3, pc, #212	; (adr r3, 8015088 <floor+0xf8>)
 8014fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb6:	f7eb f981 	bl	80002bc <__adddf3>
 8014fba:	2200      	movs	r2, #0
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	f7eb fdc3 	bl	8000b48 <__aeabi_dcmpgt>
 8014fc2:	b148      	cbz	r0, 8014fd8 <floor+0x48>
 8014fc4:	2c00      	cmp	r4, #0
 8014fc6:	da59      	bge.n	801507c <floor+0xec>
 8014fc8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014fcc:	4a30      	ldr	r2, [pc, #192]	; (8015090 <floor+0x100>)
 8014fce:	432b      	orrs	r3, r5
 8014fd0:	2500      	movs	r5, #0
 8014fd2:	42ab      	cmp	r3, r5
 8014fd4:	bf18      	it	ne
 8014fd6:	4614      	movne	r4, r2
 8014fd8:	4621      	mov	r1, r4
 8014fda:	4628      	mov	r0, r5
 8014fdc:	e025      	b.n	801502a <floor+0x9a>
 8014fde:	4f2d      	ldr	r7, [pc, #180]	; (8015094 <floor+0x104>)
 8014fe0:	4137      	asrs	r7, r6
 8014fe2:	ea01 0307 	and.w	r3, r1, r7
 8014fe6:	4303      	orrs	r3, r0
 8014fe8:	d01f      	beq.n	801502a <floor+0x9a>
 8014fea:	a327      	add	r3, pc, #156	; (adr r3, 8015088 <floor+0xf8>)
 8014fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff0:	f7eb f964 	bl	80002bc <__adddf3>
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	f7eb fda6 	bl	8000b48 <__aeabi_dcmpgt>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d0eb      	beq.n	8014fd8 <floor+0x48>
 8015000:	2c00      	cmp	r4, #0
 8015002:	bfbe      	ittt	lt
 8015004:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015008:	fa43 f606 	asrlt.w	r6, r3, r6
 801500c:	19a4      	addlt	r4, r4, r6
 801500e:	ea24 0407 	bic.w	r4, r4, r7
 8015012:	2500      	movs	r5, #0
 8015014:	e7e0      	b.n	8014fd8 <floor+0x48>
 8015016:	2e33      	cmp	r6, #51	; 0x33
 8015018:	dd0b      	ble.n	8015032 <floor+0xa2>
 801501a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801501e:	d104      	bne.n	801502a <floor+0x9a>
 8015020:	ee10 2a10 	vmov	r2, s0
 8015024:	460b      	mov	r3, r1
 8015026:	f7eb f949 	bl	80002bc <__adddf3>
 801502a:	ec41 0b10 	vmov	d0, r0, r1
 801502e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015032:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015036:	f04f 33ff 	mov.w	r3, #4294967295
 801503a:	fa23 f707 	lsr.w	r7, r3, r7
 801503e:	4207      	tst	r7, r0
 8015040:	d0f3      	beq.n	801502a <floor+0x9a>
 8015042:	a311      	add	r3, pc, #68	; (adr r3, 8015088 <floor+0xf8>)
 8015044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015048:	f7eb f938 	bl	80002bc <__adddf3>
 801504c:	2200      	movs	r2, #0
 801504e:	2300      	movs	r3, #0
 8015050:	f7eb fd7a 	bl	8000b48 <__aeabi_dcmpgt>
 8015054:	2800      	cmp	r0, #0
 8015056:	d0bf      	beq.n	8014fd8 <floor+0x48>
 8015058:	2c00      	cmp	r4, #0
 801505a:	da02      	bge.n	8015062 <floor+0xd2>
 801505c:	2e14      	cmp	r6, #20
 801505e:	d103      	bne.n	8015068 <floor+0xd8>
 8015060:	3401      	adds	r4, #1
 8015062:	ea25 0507 	bic.w	r5, r5, r7
 8015066:	e7b7      	b.n	8014fd8 <floor+0x48>
 8015068:	2301      	movs	r3, #1
 801506a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801506e:	fa03 f606 	lsl.w	r6, r3, r6
 8015072:	4435      	add	r5, r6
 8015074:	4545      	cmp	r5, r8
 8015076:	bf38      	it	cc
 8015078:	18e4      	addcc	r4, r4, r3
 801507a:	e7f2      	b.n	8015062 <floor+0xd2>
 801507c:	2500      	movs	r5, #0
 801507e:	462c      	mov	r4, r5
 8015080:	e7aa      	b.n	8014fd8 <floor+0x48>
 8015082:	bf00      	nop
 8015084:	f3af 8000 	nop.w
 8015088:	8800759c 	.word	0x8800759c
 801508c:	7e37e43c 	.word	0x7e37e43c
 8015090:	bff00000 	.word	0xbff00000
 8015094:	000fffff 	.word	0x000fffff

08015098 <scalbn>:
 8015098:	b570      	push	{r4, r5, r6, lr}
 801509a:	ec55 4b10 	vmov	r4, r5, d0
 801509e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80150a2:	4606      	mov	r6, r0
 80150a4:	462b      	mov	r3, r5
 80150a6:	b9aa      	cbnz	r2, 80150d4 <scalbn+0x3c>
 80150a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80150ac:	4323      	orrs	r3, r4
 80150ae:	d03b      	beq.n	8015128 <scalbn+0x90>
 80150b0:	4b31      	ldr	r3, [pc, #196]	; (8015178 <scalbn+0xe0>)
 80150b2:	4629      	mov	r1, r5
 80150b4:	2200      	movs	r2, #0
 80150b6:	ee10 0a10 	vmov	r0, s0
 80150ba:	f7eb fab5 	bl	8000628 <__aeabi_dmul>
 80150be:	4b2f      	ldr	r3, [pc, #188]	; (801517c <scalbn+0xe4>)
 80150c0:	429e      	cmp	r6, r3
 80150c2:	4604      	mov	r4, r0
 80150c4:	460d      	mov	r5, r1
 80150c6:	da12      	bge.n	80150ee <scalbn+0x56>
 80150c8:	a327      	add	r3, pc, #156	; (adr r3, 8015168 <scalbn+0xd0>)
 80150ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ce:	f7eb faab 	bl	8000628 <__aeabi_dmul>
 80150d2:	e009      	b.n	80150e8 <scalbn+0x50>
 80150d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80150d8:	428a      	cmp	r2, r1
 80150da:	d10c      	bne.n	80150f6 <scalbn+0x5e>
 80150dc:	ee10 2a10 	vmov	r2, s0
 80150e0:	4620      	mov	r0, r4
 80150e2:	4629      	mov	r1, r5
 80150e4:	f7eb f8ea 	bl	80002bc <__adddf3>
 80150e8:	4604      	mov	r4, r0
 80150ea:	460d      	mov	r5, r1
 80150ec:	e01c      	b.n	8015128 <scalbn+0x90>
 80150ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80150f2:	460b      	mov	r3, r1
 80150f4:	3a36      	subs	r2, #54	; 0x36
 80150f6:	4432      	add	r2, r6
 80150f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80150fc:	428a      	cmp	r2, r1
 80150fe:	dd0b      	ble.n	8015118 <scalbn+0x80>
 8015100:	ec45 4b11 	vmov	d1, r4, r5
 8015104:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015170 <scalbn+0xd8>
 8015108:	f000 f83c 	bl	8015184 <copysign>
 801510c:	a318      	add	r3, pc, #96	; (adr r3, 8015170 <scalbn+0xd8>)
 801510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015112:	ec51 0b10 	vmov	r0, r1, d0
 8015116:	e7da      	b.n	80150ce <scalbn+0x36>
 8015118:	2a00      	cmp	r2, #0
 801511a:	dd08      	ble.n	801512e <scalbn+0x96>
 801511c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015120:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015124:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015128:	ec45 4b10 	vmov	d0, r4, r5
 801512c:	bd70      	pop	{r4, r5, r6, pc}
 801512e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015132:	da0d      	bge.n	8015150 <scalbn+0xb8>
 8015134:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015138:	429e      	cmp	r6, r3
 801513a:	ec45 4b11 	vmov	d1, r4, r5
 801513e:	dce1      	bgt.n	8015104 <scalbn+0x6c>
 8015140:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015168 <scalbn+0xd0>
 8015144:	f000 f81e 	bl	8015184 <copysign>
 8015148:	a307      	add	r3, pc, #28	; (adr r3, 8015168 <scalbn+0xd0>)
 801514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514e:	e7e0      	b.n	8015112 <scalbn+0x7a>
 8015150:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015154:	3236      	adds	r2, #54	; 0x36
 8015156:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801515a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801515e:	4620      	mov	r0, r4
 8015160:	4629      	mov	r1, r5
 8015162:	2200      	movs	r2, #0
 8015164:	4b06      	ldr	r3, [pc, #24]	; (8015180 <scalbn+0xe8>)
 8015166:	e7b2      	b.n	80150ce <scalbn+0x36>
 8015168:	c2f8f359 	.word	0xc2f8f359
 801516c:	01a56e1f 	.word	0x01a56e1f
 8015170:	8800759c 	.word	0x8800759c
 8015174:	7e37e43c 	.word	0x7e37e43c
 8015178:	43500000 	.word	0x43500000
 801517c:	ffff3cb0 	.word	0xffff3cb0
 8015180:	3c900000 	.word	0x3c900000

08015184 <copysign>:
 8015184:	ec51 0b10 	vmov	r0, r1, d0
 8015188:	ee11 0a90 	vmov	r0, s3
 801518c:	ee10 2a10 	vmov	r2, s0
 8015190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015194:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015198:	ea41 0300 	orr.w	r3, r1, r0
 801519c:	ec43 2b10 	vmov	d0, r2, r3
 80151a0:	4770      	bx	lr
	...

080151a4 <__errno>:
 80151a4:	4b01      	ldr	r3, [pc, #4]	; (80151ac <__errno+0x8>)
 80151a6:	6818      	ldr	r0, [r3, #0]
 80151a8:	4770      	bx	lr
 80151aa:	bf00      	nop
 80151ac:	2000000c 	.word	0x2000000c

080151b0 <__libc_init_array>:
 80151b0:	b570      	push	{r4, r5, r6, lr}
 80151b2:	4e0d      	ldr	r6, [pc, #52]	; (80151e8 <__libc_init_array+0x38>)
 80151b4:	4c0d      	ldr	r4, [pc, #52]	; (80151ec <__libc_init_array+0x3c>)
 80151b6:	1ba4      	subs	r4, r4, r6
 80151b8:	10a4      	asrs	r4, r4, #2
 80151ba:	2500      	movs	r5, #0
 80151bc:	42a5      	cmp	r5, r4
 80151be:	d109      	bne.n	80151d4 <__libc_init_array+0x24>
 80151c0:	4e0b      	ldr	r6, [pc, #44]	; (80151f0 <__libc_init_array+0x40>)
 80151c2:	4c0c      	ldr	r4, [pc, #48]	; (80151f4 <__libc_init_array+0x44>)
 80151c4:	f004 f9e6 	bl	8019594 <_init>
 80151c8:	1ba4      	subs	r4, r4, r6
 80151ca:	10a4      	asrs	r4, r4, #2
 80151cc:	2500      	movs	r5, #0
 80151ce:	42a5      	cmp	r5, r4
 80151d0:	d105      	bne.n	80151de <__libc_init_array+0x2e>
 80151d2:	bd70      	pop	{r4, r5, r6, pc}
 80151d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151d8:	4798      	blx	r3
 80151da:	3501      	adds	r5, #1
 80151dc:	e7ee      	b.n	80151bc <__libc_init_array+0xc>
 80151de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151e2:	4798      	blx	r3
 80151e4:	3501      	adds	r5, #1
 80151e6:	e7f2      	b.n	80151ce <__libc_init_array+0x1e>
 80151e8:	08019fb4 	.word	0x08019fb4
 80151ec:	08019fb4 	.word	0x08019fb4
 80151f0:	08019fb4 	.word	0x08019fb4
 80151f4:	08019fbc 	.word	0x08019fbc

080151f8 <memset>:
 80151f8:	4402      	add	r2, r0
 80151fa:	4603      	mov	r3, r0
 80151fc:	4293      	cmp	r3, r2
 80151fe:	d100      	bne.n	8015202 <memset+0xa>
 8015200:	4770      	bx	lr
 8015202:	f803 1b01 	strb.w	r1, [r3], #1
 8015206:	e7f9      	b.n	80151fc <memset+0x4>

08015208 <__cvt>:
 8015208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801520c:	ec55 4b10 	vmov	r4, r5, d0
 8015210:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015212:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015216:	2d00      	cmp	r5, #0
 8015218:	460e      	mov	r6, r1
 801521a:	4691      	mov	r9, r2
 801521c:	4619      	mov	r1, r3
 801521e:	bfb8      	it	lt
 8015220:	4622      	movlt	r2, r4
 8015222:	462b      	mov	r3, r5
 8015224:	f027 0720 	bic.w	r7, r7, #32
 8015228:	bfbb      	ittet	lt
 801522a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801522e:	461d      	movlt	r5, r3
 8015230:	2300      	movge	r3, #0
 8015232:	232d      	movlt	r3, #45	; 0x2d
 8015234:	bfb8      	it	lt
 8015236:	4614      	movlt	r4, r2
 8015238:	2f46      	cmp	r7, #70	; 0x46
 801523a:	700b      	strb	r3, [r1, #0]
 801523c:	d004      	beq.n	8015248 <__cvt+0x40>
 801523e:	2f45      	cmp	r7, #69	; 0x45
 8015240:	d100      	bne.n	8015244 <__cvt+0x3c>
 8015242:	3601      	adds	r6, #1
 8015244:	2102      	movs	r1, #2
 8015246:	e000      	b.n	801524a <__cvt+0x42>
 8015248:	2103      	movs	r1, #3
 801524a:	ab03      	add	r3, sp, #12
 801524c:	9301      	str	r3, [sp, #4]
 801524e:	ab02      	add	r3, sp, #8
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	4632      	mov	r2, r6
 8015254:	4653      	mov	r3, sl
 8015256:	ec45 4b10 	vmov	d0, r4, r5
 801525a:	f001 fdfd 	bl	8016e58 <_dtoa_r>
 801525e:	2f47      	cmp	r7, #71	; 0x47
 8015260:	4680      	mov	r8, r0
 8015262:	d102      	bne.n	801526a <__cvt+0x62>
 8015264:	f019 0f01 	tst.w	r9, #1
 8015268:	d026      	beq.n	80152b8 <__cvt+0xb0>
 801526a:	2f46      	cmp	r7, #70	; 0x46
 801526c:	eb08 0906 	add.w	r9, r8, r6
 8015270:	d111      	bne.n	8015296 <__cvt+0x8e>
 8015272:	f898 3000 	ldrb.w	r3, [r8]
 8015276:	2b30      	cmp	r3, #48	; 0x30
 8015278:	d10a      	bne.n	8015290 <__cvt+0x88>
 801527a:	2200      	movs	r2, #0
 801527c:	2300      	movs	r3, #0
 801527e:	4620      	mov	r0, r4
 8015280:	4629      	mov	r1, r5
 8015282:	f7eb fc39 	bl	8000af8 <__aeabi_dcmpeq>
 8015286:	b918      	cbnz	r0, 8015290 <__cvt+0x88>
 8015288:	f1c6 0601 	rsb	r6, r6, #1
 801528c:	f8ca 6000 	str.w	r6, [sl]
 8015290:	f8da 3000 	ldr.w	r3, [sl]
 8015294:	4499      	add	r9, r3
 8015296:	2200      	movs	r2, #0
 8015298:	2300      	movs	r3, #0
 801529a:	4620      	mov	r0, r4
 801529c:	4629      	mov	r1, r5
 801529e:	f7eb fc2b 	bl	8000af8 <__aeabi_dcmpeq>
 80152a2:	b938      	cbnz	r0, 80152b4 <__cvt+0xac>
 80152a4:	2230      	movs	r2, #48	; 0x30
 80152a6:	9b03      	ldr	r3, [sp, #12]
 80152a8:	454b      	cmp	r3, r9
 80152aa:	d205      	bcs.n	80152b8 <__cvt+0xb0>
 80152ac:	1c59      	adds	r1, r3, #1
 80152ae:	9103      	str	r1, [sp, #12]
 80152b0:	701a      	strb	r2, [r3, #0]
 80152b2:	e7f8      	b.n	80152a6 <__cvt+0x9e>
 80152b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152bc:	eba3 0308 	sub.w	r3, r3, r8
 80152c0:	4640      	mov	r0, r8
 80152c2:	6013      	str	r3, [r2, #0]
 80152c4:	b004      	add	sp, #16
 80152c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080152ca <__exponent>:
 80152ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80152cc:	2900      	cmp	r1, #0
 80152ce:	4604      	mov	r4, r0
 80152d0:	bfba      	itte	lt
 80152d2:	4249      	neglt	r1, r1
 80152d4:	232d      	movlt	r3, #45	; 0x2d
 80152d6:	232b      	movge	r3, #43	; 0x2b
 80152d8:	2909      	cmp	r1, #9
 80152da:	f804 2b02 	strb.w	r2, [r4], #2
 80152de:	7043      	strb	r3, [r0, #1]
 80152e0:	dd20      	ble.n	8015324 <__exponent+0x5a>
 80152e2:	f10d 0307 	add.w	r3, sp, #7
 80152e6:	461f      	mov	r7, r3
 80152e8:	260a      	movs	r6, #10
 80152ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80152ee:	fb06 1115 	mls	r1, r6, r5, r1
 80152f2:	3130      	adds	r1, #48	; 0x30
 80152f4:	2d09      	cmp	r5, #9
 80152f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80152fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80152fe:	4629      	mov	r1, r5
 8015300:	dc09      	bgt.n	8015316 <__exponent+0x4c>
 8015302:	3130      	adds	r1, #48	; 0x30
 8015304:	3b02      	subs	r3, #2
 8015306:	f802 1c01 	strb.w	r1, [r2, #-1]
 801530a:	42bb      	cmp	r3, r7
 801530c:	4622      	mov	r2, r4
 801530e:	d304      	bcc.n	801531a <__exponent+0x50>
 8015310:	1a10      	subs	r0, r2, r0
 8015312:	b003      	add	sp, #12
 8015314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015316:	4613      	mov	r3, r2
 8015318:	e7e7      	b.n	80152ea <__exponent+0x20>
 801531a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801531e:	f804 2b01 	strb.w	r2, [r4], #1
 8015322:	e7f2      	b.n	801530a <__exponent+0x40>
 8015324:	2330      	movs	r3, #48	; 0x30
 8015326:	4419      	add	r1, r3
 8015328:	7083      	strb	r3, [r0, #2]
 801532a:	1d02      	adds	r2, r0, #4
 801532c:	70c1      	strb	r1, [r0, #3]
 801532e:	e7ef      	b.n	8015310 <__exponent+0x46>

08015330 <_printf_float>:
 8015330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015334:	b08d      	sub	sp, #52	; 0x34
 8015336:	460c      	mov	r4, r1
 8015338:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801533c:	4616      	mov	r6, r2
 801533e:	461f      	mov	r7, r3
 8015340:	4605      	mov	r5, r0
 8015342:	f002 fe7b 	bl	801803c <_localeconv_r>
 8015346:	6803      	ldr	r3, [r0, #0]
 8015348:	9304      	str	r3, [sp, #16]
 801534a:	4618      	mov	r0, r3
 801534c:	f7ea ff58 	bl	8000200 <strlen>
 8015350:	2300      	movs	r3, #0
 8015352:	930a      	str	r3, [sp, #40]	; 0x28
 8015354:	f8d8 3000 	ldr.w	r3, [r8]
 8015358:	9005      	str	r0, [sp, #20]
 801535a:	3307      	adds	r3, #7
 801535c:	f023 0307 	bic.w	r3, r3, #7
 8015360:	f103 0208 	add.w	r2, r3, #8
 8015364:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015368:	f8d4 b000 	ldr.w	fp, [r4]
 801536c:	f8c8 2000 	str.w	r2, [r8]
 8015370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015374:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015378:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801537c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015380:	9307      	str	r3, [sp, #28]
 8015382:	f8cd 8018 	str.w	r8, [sp, #24]
 8015386:	f04f 32ff 	mov.w	r2, #4294967295
 801538a:	4ba7      	ldr	r3, [pc, #668]	; (8015628 <_printf_float+0x2f8>)
 801538c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015390:	f7eb fbe4 	bl	8000b5c <__aeabi_dcmpun>
 8015394:	bb70      	cbnz	r0, 80153f4 <_printf_float+0xc4>
 8015396:	f04f 32ff 	mov.w	r2, #4294967295
 801539a:	4ba3      	ldr	r3, [pc, #652]	; (8015628 <_printf_float+0x2f8>)
 801539c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153a0:	f7eb fbbe 	bl	8000b20 <__aeabi_dcmple>
 80153a4:	bb30      	cbnz	r0, 80153f4 <_printf_float+0xc4>
 80153a6:	2200      	movs	r2, #0
 80153a8:	2300      	movs	r3, #0
 80153aa:	4640      	mov	r0, r8
 80153ac:	4649      	mov	r1, r9
 80153ae:	f7eb fbad 	bl	8000b0c <__aeabi_dcmplt>
 80153b2:	b110      	cbz	r0, 80153ba <_printf_float+0x8a>
 80153b4:	232d      	movs	r3, #45	; 0x2d
 80153b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153ba:	4a9c      	ldr	r2, [pc, #624]	; (801562c <_printf_float+0x2fc>)
 80153bc:	4b9c      	ldr	r3, [pc, #624]	; (8015630 <_printf_float+0x300>)
 80153be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80153c2:	bf8c      	ite	hi
 80153c4:	4690      	movhi	r8, r2
 80153c6:	4698      	movls	r8, r3
 80153c8:	2303      	movs	r3, #3
 80153ca:	f02b 0204 	bic.w	r2, fp, #4
 80153ce:	6123      	str	r3, [r4, #16]
 80153d0:	6022      	str	r2, [r4, #0]
 80153d2:	f04f 0900 	mov.w	r9, #0
 80153d6:	9700      	str	r7, [sp, #0]
 80153d8:	4633      	mov	r3, r6
 80153da:	aa0b      	add	r2, sp, #44	; 0x2c
 80153dc:	4621      	mov	r1, r4
 80153de:	4628      	mov	r0, r5
 80153e0:	f000 f9e6 	bl	80157b0 <_printf_common>
 80153e4:	3001      	adds	r0, #1
 80153e6:	f040 808d 	bne.w	8015504 <_printf_float+0x1d4>
 80153ea:	f04f 30ff 	mov.w	r0, #4294967295
 80153ee:	b00d      	add	sp, #52	; 0x34
 80153f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f4:	4642      	mov	r2, r8
 80153f6:	464b      	mov	r3, r9
 80153f8:	4640      	mov	r0, r8
 80153fa:	4649      	mov	r1, r9
 80153fc:	f7eb fbae 	bl	8000b5c <__aeabi_dcmpun>
 8015400:	b110      	cbz	r0, 8015408 <_printf_float+0xd8>
 8015402:	4a8c      	ldr	r2, [pc, #560]	; (8015634 <_printf_float+0x304>)
 8015404:	4b8c      	ldr	r3, [pc, #560]	; (8015638 <_printf_float+0x308>)
 8015406:	e7da      	b.n	80153be <_printf_float+0x8e>
 8015408:	6861      	ldr	r1, [r4, #4]
 801540a:	1c4b      	adds	r3, r1, #1
 801540c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015410:	a80a      	add	r0, sp, #40	; 0x28
 8015412:	d13e      	bne.n	8015492 <_printf_float+0x162>
 8015414:	2306      	movs	r3, #6
 8015416:	6063      	str	r3, [r4, #4]
 8015418:	2300      	movs	r3, #0
 801541a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801541e:	ab09      	add	r3, sp, #36	; 0x24
 8015420:	9300      	str	r3, [sp, #0]
 8015422:	ec49 8b10 	vmov	d0, r8, r9
 8015426:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801542a:	6022      	str	r2, [r4, #0]
 801542c:	f8cd a004 	str.w	sl, [sp, #4]
 8015430:	6861      	ldr	r1, [r4, #4]
 8015432:	4628      	mov	r0, r5
 8015434:	f7ff fee8 	bl	8015208 <__cvt>
 8015438:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801543c:	2b47      	cmp	r3, #71	; 0x47
 801543e:	4680      	mov	r8, r0
 8015440:	d109      	bne.n	8015456 <_printf_float+0x126>
 8015442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015444:	1cd8      	adds	r0, r3, #3
 8015446:	db02      	blt.n	801544e <_printf_float+0x11e>
 8015448:	6862      	ldr	r2, [r4, #4]
 801544a:	4293      	cmp	r3, r2
 801544c:	dd47      	ble.n	80154de <_printf_float+0x1ae>
 801544e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015452:	fa5f fa8a 	uxtb.w	sl, sl
 8015456:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801545a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801545c:	d824      	bhi.n	80154a8 <_printf_float+0x178>
 801545e:	3901      	subs	r1, #1
 8015460:	4652      	mov	r2, sl
 8015462:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015466:	9109      	str	r1, [sp, #36]	; 0x24
 8015468:	f7ff ff2f 	bl	80152ca <__exponent>
 801546c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801546e:	1813      	adds	r3, r2, r0
 8015470:	2a01      	cmp	r2, #1
 8015472:	4681      	mov	r9, r0
 8015474:	6123      	str	r3, [r4, #16]
 8015476:	dc02      	bgt.n	801547e <_printf_float+0x14e>
 8015478:	6822      	ldr	r2, [r4, #0]
 801547a:	07d1      	lsls	r1, r2, #31
 801547c:	d501      	bpl.n	8015482 <_printf_float+0x152>
 801547e:	3301      	adds	r3, #1
 8015480:	6123      	str	r3, [r4, #16]
 8015482:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015486:	2b00      	cmp	r3, #0
 8015488:	d0a5      	beq.n	80153d6 <_printf_float+0xa6>
 801548a:	232d      	movs	r3, #45	; 0x2d
 801548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015490:	e7a1      	b.n	80153d6 <_printf_float+0xa6>
 8015492:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015496:	f000 8177 	beq.w	8015788 <_printf_float+0x458>
 801549a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801549e:	d1bb      	bne.n	8015418 <_printf_float+0xe8>
 80154a0:	2900      	cmp	r1, #0
 80154a2:	d1b9      	bne.n	8015418 <_printf_float+0xe8>
 80154a4:	2301      	movs	r3, #1
 80154a6:	e7b6      	b.n	8015416 <_printf_float+0xe6>
 80154a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80154ac:	d119      	bne.n	80154e2 <_printf_float+0x1b2>
 80154ae:	2900      	cmp	r1, #0
 80154b0:	6863      	ldr	r3, [r4, #4]
 80154b2:	dd0c      	ble.n	80154ce <_printf_float+0x19e>
 80154b4:	6121      	str	r1, [r4, #16]
 80154b6:	b913      	cbnz	r3, 80154be <_printf_float+0x18e>
 80154b8:	6822      	ldr	r2, [r4, #0]
 80154ba:	07d2      	lsls	r2, r2, #31
 80154bc:	d502      	bpl.n	80154c4 <_printf_float+0x194>
 80154be:	3301      	adds	r3, #1
 80154c0:	440b      	add	r3, r1
 80154c2:	6123      	str	r3, [r4, #16]
 80154c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80154c8:	f04f 0900 	mov.w	r9, #0
 80154cc:	e7d9      	b.n	8015482 <_printf_float+0x152>
 80154ce:	b913      	cbnz	r3, 80154d6 <_printf_float+0x1a6>
 80154d0:	6822      	ldr	r2, [r4, #0]
 80154d2:	07d0      	lsls	r0, r2, #31
 80154d4:	d501      	bpl.n	80154da <_printf_float+0x1aa>
 80154d6:	3302      	adds	r3, #2
 80154d8:	e7f3      	b.n	80154c2 <_printf_float+0x192>
 80154da:	2301      	movs	r3, #1
 80154dc:	e7f1      	b.n	80154c2 <_printf_float+0x192>
 80154de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80154e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80154e6:	4293      	cmp	r3, r2
 80154e8:	db05      	blt.n	80154f6 <_printf_float+0x1c6>
 80154ea:	6822      	ldr	r2, [r4, #0]
 80154ec:	6123      	str	r3, [r4, #16]
 80154ee:	07d1      	lsls	r1, r2, #31
 80154f0:	d5e8      	bpl.n	80154c4 <_printf_float+0x194>
 80154f2:	3301      	adds	r3, #1
 80154f4:	e7e5      	b.n	80154c2 <_printf_float+0x192>
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	bfd4      	ite	le
 80154fa:	f1c3 0302 	rsble	r3, r3, #2
 80154fe:	2301      	movgt	r3, #1
 8015500:	4413      	add	r3, r2
 8015502:	e7de      	b.n	80154c2 <_printf_float+0x192>
 8015504:	6823      	ldr	r3, [r4, #0]
 8015506:	055a      	lsls	r2, r3, #21
 8015508:	d407      	bmi.n	801551a <_printf_float+0x1ea>
 801550a:	6923      	ldr	r3, [r4, #16]
 801550c:	4642      	mov	r2, r8
 801550e:	4631      	mov	r1, r6
 8015510:	4628      	mov	r0, r5
 8015512:	47b8      	blx	r7
 8015514:	3001      	adds	r0, #1
 8015516:	d12b      	bne.n	8015570 <_printf_float+0x240>
 8015518:	e767      	b.n	80153ea <_printf_float+0xba>
 801551a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801551e:	f240 80dc 	bls.w	80156da <_printf_float+0x3aa>
 8015522:	2200      	movs	r2, #0
 8015524:	2300      	movs	r3, #0
 8015526:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801552a:	f7eb fae5 	bl	8000af8 <__aeabi_dcmpeq>
 801552e:	2800      	cmp	r0, #0
 8015530:	d033      	beq.n	801559a <_printf_float+0x26a>
 8015532:	2301      	movs	r3, #1
 8015534:	4a41      	ldr	r2, [pc, #260]	; (801563c <_printf_float+0x30c>)
 8015536:	4631      	mov	r1, r6
 8015538:	4628      	mov	r0, r5
 801553a:	47b8      	blx	r7
 801553c:	3001      	adds	r0, #1
 801553e:	f43f af54 	beq.w	80153ea <_printf_float+0xba>
 8015542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015546:	429a      	cmp	r2, r3
 8015548:	db02      	blt.n	8015550 <_printf_float+0x220>
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	07d8      	lsls	r0, r3, #31
 801554e:	d50f      	bpl.n	8015570 <_printf_float+0x240>
 8015550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015554:	4631      	mov	r1, r6
 8015556:	4628      	mov	r0, r5
 8015558:	47b8      	blx	r7
 801555a:	3001      	adds	r0, #1
 801555c:	f43f af45 	beq.w	80153ea <_printf_float+0xba>
 8015560:	f04f 0800 	mov.w	r8, #0
 8015564:	f104 091a 	add.w	r9, r4, #26
 8015568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801556a:	3b01      	subs	r3, #1
 801556c:	4543      	cmp	r3, r8
 801556e:	dc09      	bgt.n	8015584 <_printf_float+0x254>
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	079b      	lsls	r3, r3, #30
 8015574:	f100 8103 	bmi.w	801577e <_printf_float+0x44e>
 8015578:	68e0      	ldr	r0, [r4, #12]
 801557a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801557c:	4298      	cmp	r0, r3
 801557e:	bfb8      	it	lt
 8015580:	4618      	movlt	r0, r3
 8015582:	e734      	b.n	80153ee <_printf_float+0xbe>
 8015584:	2301      	movs	r3, #1
 8015586:	464a      	mov	r2, r9
 8015588:	4631      	mov	r1, r6
 801558a:	4628      	mov	r0, r5
 801558c:	47b8      	blx	r7
 801558e:	3001      	adds	r0, #1
 8015590:	f43f af2b 	beq.w	80153ea <_printf_float+0xba>
 8015594:	f108 0801 	add.w	r8, r8, #1
 8015598:	e7e6      	b.n	8015568 <_printf_float+0x238>
 801559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801559c:	2b00      	cmp	r3, #0
 801559e:	dc2b      	bgt.n	80155f8 <_printf_float+0x2c8>
 80155a0:	2301      	movs	r3, #1
 80155a2:	4a26      	ldr	r2, [pc, #152]	; (801563c <_printf_float+0x30c>)
 80155a4:	4631      	mov	r1, r6
 80155a6:	4628      	mov	r0, r5
 80155a8:	47b8      	blx	r7
 80155aa:	3001      	adds	r0, #1
 80155ac:	f43f af1d 	beq.w	80153ea <_printf_float+0xba>
 80155b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b2:	b923      	cbnz	r3, 80155be <_printf_float+0x28e>
 80155b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155b6:	b913      	cbnz	r3, 80155be <_printf_float+0x28e>
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	07d9      	lsls	r1, r3, #31
 80155bc:	d5d8      	bpl.n	8015570 <_printf_float+0x240>
 80155be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155c2:	4631      	mov	r1, r6
 80155c4:	4628      	mov	r0, r5
 80155c6:	47b8      	blx	r7
 80155c8:	3001      	adds	r0, #1
 80155ca:	f43f af0e 	beq.w	80153ea <_printf_float+0xba>
 80155ce:	f04f 0900 	mov.w	r9, #0
 80155d2:	f104 0a1a 	add.w	sl, r4, #26
 80155d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155d8:	425b      	negs	r3, r3
 80155da:	454b      	cmp	r3, r9
 80155dc:	dc01      	bgt.n	80155e2 <_printf_float+0x2b2>
 80155de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e0:	e794      	b.n	801550c <_printf_float+0x1dc>
 80155e2:	2301      	movs	r3, #1
 80155e4:	4652      	mov	r2, sl
 80155e6:	4631      	mov	r1, r6
 80155e8:	4628      	mov	r0, r5
 80155ea:	47b8      	blx	r7
 80155ec:	3001      	adds	r0, #1
 80155ee:	f43f aefc 	beq.w	80153ea <_printf_float+0xba>
 80155f2:	f109 0901 	add.w	r9, r9, #1
 80155f6:	e7ee      	b.n	80155d6 <_printf_float+0x2a6>
 80155f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80155fc:	429a      	cmp	r2, r3
 80155fe:	bfa8      	it	ge
 8015600:	461a      	movge	r2, r3
 8015602:	2a00      	cmp	r2, #0
 8015604:	4691      	mov	r9, r2
 8015606:	dd07      	ble.n	8015618 <_printf_float+0x2e8>
 8015608:	4613      	mov	r3, r2
 801560a:	4631      	mov	r1, r6
 801560c:	4642      	mov	r2, r8
 801560e:	4628      	mov	r0, r5
 8015610:	47b8      	blx	r7
 8015612:	3001      	adds	r0, #1
 8015614:	f43f aee9 	beq.w	80153ea <_printf_float+0xba>
 8015618:	f104 031a 	add.w	r3, r4, #26
 801561c:	f04f 0b00 	mov.w	fp, #0
 8015620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015624:	9306      	str	r3, [sp, #24]
 8015626:	e015      	b.n	8015654 <_printf_float+0x324>
 8015628:	7fefffff 	.word	0x7fefffff
 801562c:	08019c84 	.word	0x08019c84
 8015630:	08019c80 	.word	0x08019c80
 8015634:	08019c8c 	.word	0x08019c8c
 8015638:	08019c88 	.word	0x08019c88
 801563c:	08019e43 	.word	0x08019e43
 8015640:	2301      	movs	r3, #1
 8015642:	9a06      	ldr	r2, [sp, #24]
 8015644:	4631      	mov	r1, r6
 8015646:	4628      	mov	r0, r5
 8015648:	47b8      	blx	r7
 801564a:	3001      	adds	r0, #1
 801564c:	f43f aecd 	beq.w	80153ea <_printf_float+0xba>
 8015650:	f10b 0b01 	add.w	fp, fp, #1
 8015654:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015658:	ebaa 0309 	sub.w	r3, sl, r9
 801565c:	455b      	cmp	r3, fp
 801565e:	dcef      	bgt.n	8015640 <_printf_float+0x310>
 8015660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015664:	429a      	cmp	r2, r3
 8015666:	44d0      	add	r8, sl
 8015668:	db15      	blt.n	8015696 <_printf_float+0x366>
 801566a:	6823      	ldr	r3, [r4, #0]
 801566c:	07da      	lsls	r2, r3, #31
 801566e:	d412      	bmi.n	8015696 <_printf_float+0x366>
 8015670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015672:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015674:	eba3 020a 	sub.w	r2, r3, sl
 8015678:	eba3 0a01 	sub.w	sl, r3, r1
 801567c:	4592      	cmp	sl, r2
 801567e:	bfa8      	it	ge
 8015680:	4692      	movge	sl, r2
 8015682:	f1ba 0f00 	cmp.w	sl, #0
 8015686:	dc0e      	bgt.n	80156a6 <_printf_float+0x376>
 8015688:	f04f 0800 	mov.w	r8, #0
 801568c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015690:	f104 091a 	add.w	r9, r4, #26
 8015694:	e019      	b.n	80156ca <_printf_float+0x39a>
 8015696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801569a:	4631      	mov	r1, r6
 801569c:	4628      	mov	r0, r5
 801569e:	47b8      	blx	r7
 80156a0:	3001      	adds	r0, #1
 80156a2:	d1e5      	bne.n	8015670 <_printf_float+0x340>
 80156a4:	e6a1      	b.n	80153ea <_printf_float+0xba>
 80156a6:	4653      	mov	r3, sl
 80156a8:	4642      	mov	r2, r8
 80156aa:	4631      	mov	r1, r6
 80156ac:	4628      	mov	r0, r5
 80156ae:	47b8      	blx	r7
 80156b0:	3001      	adds	r0, #1
 80156b2:	d1e9      	bne.n	8015688 <_printf_float+0x358>
 80156b4:	e699      	b.n	80153ea <_printf_float+0xba>
 80156b6:	2301      	movs	r3, #1
 80156b8:	464a      	mov	r2, r9
 80156ba:	4631      	mov	r1, r6
 80156bc:	4628      	mov	r0, r5
 80156be:	47b8      	blx	r7
 80156c0:	3001      	adds	r0, #1
 80156c2:	f43f ae92 	beq.w	80153ea <_printf_float+0xba>
 80156c6:	f108 0801 	add.w	r8, r8, #1
 80156ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156ce:	1a9b      	subs	r3, r3, r2
 80156d0:	eba3 030a 	sub.w	r3, r3, sl
 80156d4:	4543      	cmp	r3, r8
 80156d6:	dcee      	bgt.n	80156b6 <_printf_float+0x386>
 80156d8:	e74a      	b.n	8015570 <_printf_float+0x240>
 80156da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156dc:	2a01      	cmp	r2, #1
 80156de:	dc01      	bgt.n	80156e4 <_printf_float+0x3b4>
 80156e0:	07db      	lsls	r3, r3, #31
 80156e2:	d53a      	bpl.n	801575a <_printf_float+0x42a>
 80156e4:	2301      	movs	r3, #1
 80156e6:	4642      	mov	r2, r8
 80156e8:	4631      	mov	r1, r6
 80156ea:	4628      	mov	r0, r5
 80156ec:	47b8      	blx	r7
 80156ee:	3001      	adds	r0, #1
 80156f0:	f43f ae7b 	beq.w	80153ea <_printf_float+0xba>
 80156f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156f8:	4631      	mov	r1, r6
 80156fa:	4628      	mov	r0, r5
 80156fc:	47b8      	blx	r7
 80156fe:	3001      	adds	r0, #1
 8015700:	f108 0801 	add.w	r8, r8, #1
 8015704:	f43f ae71 	beq.w	80153ea <_printf_float+0xba>
 8015708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801570a:	2200      	movs	r2, #0
 801570c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015714:	2300      	movs	r3, #0
 8015716:	f7eb f9ef 	bl	8000af8 <__aeabi_dcmpeq>
 801571a:	b9c8      	cbnz	r0, 8015750 <_printf_float+0x420>
 801571c:	4653      	mov	r3, sl
 801571e:	4642      	mov	r2, r8
 8015720:	4631      	mov	r1, r6
 8015722:	4628      	mov	r0, r5
 8015724:	47b8      	blx	r7
 8015726:	3001      	adds	r0, #1
 8015728:	d10e      	bne.n	8015748 <_printf_float+0x418>
 801572a:	e65e      	b.n	80153ea <_printf_float+0xba>
 801572c:	2301      	movs	r3, #1
 801572e:	4652      	mov	r2, sl
 8015730:	4631      	mov	r1, r6
 8015732:	4628      	mov	r0, r5
 8015734:	47b8      	blx	r7
 8015736:	3001      	adds	r0, #1
 8015738:	f43f ae57 	beq.w	80153ea <_printf_float+0xba>
 801573c:	f108 0801 	add.w	r8, r8, #1
 8015740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015742:	3b01      	subs	r3, #1
 8015744:	4543      	cmp	r3, r8
 8015746:	dcf1      	bgt.n	801572c <_printf_float+0x3fc>
 8015748:	464b      	mov	r3, r9
 801574a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801574e:	e6de      	b.n	801550e <_printf_float+0x1de>
 8015750:	f04f 0800 	mov.w	r8, #0
 8015754:	f104 0a1a 	add.w	sl, r4, #26
 8015758:	e7f2      	b.n	8015740 <_printf_float+0x410>
 801575a:	2301      	movs	r3, #1
 801575c:	e7df      	b.n	801571e <_printf_float+0x3ee>
 801575e:	2301      	movs	r3, #1
 8015760:	464a      	mov	r2, r9
 8015762:	4631      	mov	r1, r6
 8015764:	4628      	mov	r0, r5
 8015766:	47b8      	blx	r7
 8015768:	3001      	adds	r0, #1
 801576a:	f43f ae3e 	beq.w	80153ea <_printf_float+0xba>
 801576e:	f108 0801 	add.w	r8, r8, #1
 8015772:	68e3      	ldr	r3, [r4, #12]
 8015774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015776:	1a9b      	subs	r3, r3, r2
 8015778:	4543      	cmp	r3, r8
 801577a:	dcf0      	bgt.n	801575e <_printf_float+0x42e>
 801577c:	e6fc      	b.n	8015578 <_printf_float+0x248>
 801577e:	f04f 0800 	mov.w	r8, #0
 8015782:	f104 0919 	add.w	r9, r4, #25
 8015786:	e7f4      	b.n	8015772 <_printf_float+0x442>
 8015788:	2900      	cmp	r1, #0
 801578a:	f43f ae8b 	beq.w	80154a4 <_printf_float+0x174>
 801578e:	2300      	movs	r3, #0
 8015790:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015794:	ab09      	add	r3, sp, #36	; 0x24
 8015796:	9300      	str	r3, [sp, #0]
 8015798:	ec49 8b10 	vmov	d0, r8, r9
 801579c:	6022      	str	r2, [r4, #0]
 801579e:	f8cd a004 	str.w	sl, [sp, #4]
 80157a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80157a6:	4628      	mov	r0, r5
 80157a8:	f7ff fd2e 	bl	8015208 <__cvt>
 80157ac:	4680      	mov	r8, r0
 80157ae:	e648      	b.n	8015442 <_printf_float+0x112>

080157b0 <_printf_common>:
 80157b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157b4:	4691      	mov	r9, r2
 80157b6:	461f      	mov	r7, r3
 80157b8:	688a      	ldr	r2, [r1, #8]
 80157ba:	690b      	ldr	r3, [r1, #16]
 80157bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80157c0:	4293      	cmp	r3, r2
 80157c2:	bfb8      	it	lt
 80157c4:	4613      	movlt	r3, r2
 80157c6:	f8c9 3000 	str.w	r3, [r9]
 80157ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80157ce:	4606      	mov	r6, r0
 80157d0:	460c      	mov	r4, r1
 80157d2:	b112      	cbz	r2, 80157da <_printf_common+0x2a>
 80157d4:	3301      	adds	r3, #1
 80157d6:	f8c9 3000 	str.w	r3, [r9]
 80157da:	6823      	ldr	r3, [r4, #0]
 80157dc:	0699      	lsls	r1, r3, #26
 80157de:	bf42      	ittt	mi
 80157e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80157e4:	3302      	addmi	r3, #2
 80157e6:	f8c9 3000 	strmi.w	r3, [r9]
 80157ea:	6825      	ldr	r5, [r4, #0]
 80157ec:	f015 0506 	ands.w	r5, r5, #6
 80157f0:	d107      	bne.n	8015802 <_printf_common+0x52>
 80157f2:	f104 0a19 	add.w	sl, r4, #25
 80157f6:	68e3      	ldr	r3, [r4, #12]
 80157f8:	f8d9 2000 	ldr.w	r2, [r9]
 80157fc:	1a9b      	subs	r3, r3, r2
 80157fe:	42ab      	cmp	r3, r5
 8015800:	dc28      	bgt.n	8015854 <_printf_common+0xa4>
 8015802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015806:	6822      	ldr	r2, [r4, #0]
 8015808:	3300      	adds	r3, #0
 801580a:	bf18      	it	ne
 801580c:	2301      	movne	r3, #1
 801580e:	0692      	lsls	r2, r2, #26
 8015810:	d42d      	bmi.n	801586e <_printf_common+0xbe>
 8015812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015816:	4639      	mov	r1, r7
 8015818:	4630      	mov	r0, r6
 801581a:	47c0      	blx	r8
 801581c:	3001      	adds	r0, #1
 801581e:	d020      	beq.n	8015862 <_printf_common+0xb2>
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	68e5      	ldr	r5, [r4, #12]
 8015824:	f8d9 2000 	ldr.w	r2, [r9]
 8015828:	f003 0306 	and.w	r3, r3, #6
 801582c:	2b04      	cmp	r3, #4
 801582e:	bf08      	it	eq
 8015830:	1aad      	subeq	r5, r5, r2
 8015832:	68a3      	ldr	r3, [r4, #8]
 8015834:	6922      	ldr	r2, [r4, #16]
 8015836:	bf0c      	ite	eq
 8015838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801583c:	2500      	movne	r5, #0
 801583e:	4293      	cmp	r3, r2
 8015840:	bfc4      	itt	gt
 8015842:	1a9b      	subgt	r3, r3, r2
 8015844:	18ed      	addgt	r5, r5, r3
 8015846:	f04f 0900 	mov.w	r9, #0
 801584a:	341a      	adds	r4, #26
 801584c:	454d      	cmp	r5, r9
 801584e:	d11a      	bne.n	8015886 <_printf_common+0xd6>
 8015850:	2000      	movs	r0, #0
 8015852:	e008      	b.n	8015866 <_printf_common+0xb6>
 8015854:	2301      	movs	r3, #1
 8015856:	4652      	mov	r2, sl
 8015858:	4639      	mov	r1, r7
 801585a:	4630      	mov	r0, r6
 801585c:	47c0      	blx	r8
 801585e:	3001      	adds	r0, #1
 8015860:	d103      	bne.n	801586a <_printf_common+0xba>
 8015862:	f04f 30ff 	mov.w	r0, #4294967295
 8015866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801586a:	3501      	adds	r5, #1
 801586c:	e7c3      	b.n	80157f6 <_printf_common+0x46>
 801586e:	18e1      	adds	r1, r4, r3
 8015870:	1c5a      	adds	r2, r3, #1
 8015872:	2030      	movs	r0, #48	; 0x30
 8015874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015878:	4422      	add	r2, r4
 801587a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801587e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015882:	3302      	adds	r3, #2
 8015884:	e7c5      	b.n	8015812 <_printf_common+0x62>
 8015886:	2301      	movs	r3, #1
 8015888:	4622      	mov	r2, r4
 801588a:	4639      	mov	r1, r7
 801588c:	4630      	mov	r0, r6
 801588e:	47c0      	blx	r8
 8015890:	3001      	adds	r0, #1
 8015892:	d0e6      	beq.n	8015862 <_printf_common+0xb2>
 8015894:	f109 0901 	add.w	r9, r9, #1
 8015898:	e7d8      	b.n	801584c <_printf_common+0x9c>
	...

0801589c <_printf_i>:
 801589c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80158a4:	460c      	mov	r4, r1
 80158a6:	7e09      	ldrb	r1, [r1, #24]
 80158a8:	b085      	sub	sp, #20
 80158aa:	296e      	cmp	r1, #110	; 0x6e
 80158ac:	4617      	mov	r7, r2
 80158ae:	4606      	mov	r6, r0
 80158b0:	4698      	mov	r8, r3
 80158b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80158b4:	f000 80b3 	beq.w	8015a1e <_printf_i+0x182>
 80158b8:	d822      	bhi.n	8015900 <_printf_i+0x64>
 80158ba:	2963      	cmp	r1, #99	; 0x63
 80158bc:	d036      	beq.n	801592c <_printf_i+0x90>
 80158be:	d80a      	bhi.n	80158d6 <_printf_i+0x3a>
 80158c0:	2900      	cmp	r1, #0
 80158c2:	f000 80b9 	beq.w	8015a38 <_printf_i+0x19c>
 80158c6:	2958      	cmp	r1, #88	; 0x58
 80158c8:	f000 8083 	beq.w	80159d2 <_printf_i+0x136>
 80158cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80158d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80158d4:	e032      	b.n	801593c <_printf_i+0xa0>
 80158d6:	2964      	cmp	r1, #100	; 0x64
 80158d8:	d001      	beq.n	80158de <_printf_i+0x42>
 80158da:	2969      	cmp	r1, #105	; 0x69
 80158dc:	d1f6      	bne.n	80158cc <_printf_i+0x30>
 80158de:	6820      	ldr	r0, [r4, #0]
 80158e0:	6813      	ldr	r3, [r2, #0]
 80158e2:	0605      	lsls	r5, r0, #24
 80158e4:	f103 0104 	add.w	r1, r3, #4
 80158e8:	d52a      	bpl.n	8015940 <_printf_i+0xa4>
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	6011      	str	r1, [r2, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	da03      	bge.n	80158fa <_printf_i+0x5e>
 80158f2:	222d      	movs	r2, #45	; 0x2d
 80158f4:	425b      	negs	r3, r3
 80158f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80158fa:	486f      	ldr	r0, [pc, #444]	; (8015ab8 <_printf_i+0x21c>)
 80158fc:	220a      	movs	r2, #10
 80158fe:	e039      	b.n	8015974 <_printf_i+0xd8>
 8015900:	2973      	cmp	r1, #115	; 0x73
 8015902:	f000 809d 	beq.w	8015a40 <_printf_i+0x1a4>
 8015906:	d808      	bhi.n	801591a <_printf_i+0x7e>
 8015908:	296f      	cmp	r1, #111	; 0x6f
 801590a:	d020      	beq.n	801594e <_printf_i+0xb2>
 801590c:	2970      	cmp	r1, #112	; 0x70
 801590e:	d1dd      	bne.n	80158cc <_printf_i+0x30>
 8015910:	6823      	ldr	r3, [r4, #0]
 8015912:	f043 0320 	orr.w	r3, r3, #32
 8015916:	6023      	str	r3, [r4, #0]
 8015918:	e003      	b.n	8015922 <_printf_i+0x86>
 801591a:	2975      	cmp	r1, #117	; 0x75
 801591c:	d017      	beq.n	801594e <_printf_i+0xb2>
 801591e:	2978      	cmp	r1, #120	; 0x78
 8015920:	d1d4      	bne.n	80158cc <_printf_i+0x30>
 8015922:	2378      	movs	r3, #120	; 0x78
 8015924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015928:	4864      	ldr	r0, [pc, #400]	; (8015abc <_printf_i+0x220>)
 801592a:	e055      	b.n	80159d8 <_printf_i+0x13c>
 801592c:	6813      	ldr	r3, [r2, #0]
 801592e:	1d19      	adds	r1, r3, #4
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	6011      	str	r1, [r2, #0]
 8015934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801593c:	2301      	movs	r3, #1
 801593e:	e08c      	b.n	8015a5a <_printf_i+0x1be>
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	6011      	str	r1, [r2, #0]
 8015944:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015948:	bf18      	it	ne
 801594a:	b21b      	sxthne	r3, r3
 801594c:	e7cf      	b.n	80158ee <_printf_i+0x52>
 801594e:	6813      	ldr	r3, [r2, #0]
 8015950:	6825      	ldr	r5, [r4, #0]
 8015952:	1d18      	adds	r0, r3, #4
 8015954:	6010      	str	r0, [r2, #0]
 8015956:	0628      	lsls	r0, r5, #24
 8015958:	d501      	bpl.n	801595e <_printf_i+0xc2>
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	e002      	b.n	8015964 <_printf_i+0xc8>
 801595e:	0668      	lsls	r0, r5, #25
 8015960:	d5fb      	bpl.n	801595a <_printf_i+0xbe>
 8015962:	881b      	ldrh	r3, [r3, #0]
 8015964:	4854      	ldr	r0, [pc, #336]	; (8015ab8 <_printf_i+0x21c>)
 8015966:	296f      	cmp	r1, #111	; 0x6f
 8015968:	bf14      	ite	ne
 801596a:	220a      	movne	r2, #10
 801596c:	2208      	moveq	r2, #8
 801596e:	2100      	movs	r1, #0
 8015970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015974:	6865      	ldr	r5, [r4, #4]
 8015976:	60a5      	str	r5, [r4, #8]
 8015978:	2d00      	cmp	r5, #0
 801597a:	f2c0 8095 	blt.w	8015aa8 <_printf_i+0x20c>
 801597e:	6821      	ldr	r1, [r4, #0]
 8015980:	f021 0104 	bic.w	r1, r1, #4
 8015984:	6021      	str	r1, [r4, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d13d      	bne.n	8015a06 <_printf_i+0x16a>
 801598a:	2d00      	cmp	r5, #0
 801598c:	f040 808e 	bne.w	8015aac <_printf_i+0x210>
 8015990:	4665      	mov	r5, ip
 8015992:	2a08      	cmp	r2, #8
 8015994:	d10b      	bne.n	80159ae <_printf_i+0x112>
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	07db      	lsls	r3, r3, #31
 801599a:	d508      	bpl.n	80159ae <_printf_i+0x112>
 801599c:	6923      	ldr	r3, [r4, #16]
 801599e:	6862      	ldr	r2, [r4, #4]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	bfde      	ittt	le
 80159a4:	2330      	movle	r3, #48	; 0x30
 80159a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80159aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80159ae:	ebac 0305 	sub.w	r3, ip, r5
 80159b2:	6123      	str	r3, [r4, #16]
 80159b4:	f8cd 8000 	str.w	r8, [sp]
 80159b8:	463b      	mov	r3, r7
 80159ba:	aa03      	add	r2, sp, #12
 80159bc:	4621      	mov	r1, r4
 80159be:	4630      	mov	r0, r6
 80159c0:	f7ff fef6 	bl	80157b0 <_printf_common>
 80159c4:	3001      	adds	r0, #1
 80159c6:	d14d      	bne.n	8015a64 <_printf_i+0x1c8>
 80159c8:	f04f 30ff 	mov.w	r0, #4294967295
 80159cc:	b005      	add	sp, #20
 80159ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159d2:	4839      	ldr	r0, [pc, #228]	; (8015ab8 <_printf_i+0x21c>)
 80159d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80159d8:	6813      	ldr	r3, [r2, #0]
 80159da:	6821      	ldr	r1, [r4, #0]
 80159dc:	1d1d      	adds	r5, r3, #4
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	6015      	str	r5, [r2, #0]
 80159e2:	060a      	lsls	r2, r1, #24
 80159e4:	d50b      	bpl.n	80159fe <_printf_i+0x162>
 80159e6:	07ca      	lsls	r2, r1, #31
 80159e8:	bf44      	itt	mi
 80159ea:	f041 0120 	orrmi.w	r1, r1, #32
 80159ee:	6021      	strmi	r1, [r4, #0]
 80159f0:	b91b      	cbnz	r3, 80159fa <_printf_i+0x15e>
 80159f2:	6822      	ldr	r2, [r4, #0]
 80159f4:	f022 0220 	bic.w	r2, r2, #32
 80159f8:	6022      	str	r2, [r4, #0]
 80159fa:	2210      	movs	r2, #16
 80159fc:	e7b7      	b.n	801596e <_printf_i+0xd2>
 80159fe:	064d      	lsls	r5, r1, #25
 8015a00:	bf48      	it	mi
 8015a02:	b29b      	uxthmi	r3, r3
 8015a04:	e7ef      	b.n	80159e6 <_printf_i+0x14a>
 8015a06:	4665      	mov	r5, ip
 8015a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a0c:	fb02 3311 	mls	r3, r2, r1, r3
 8015a10:	5cc3      	ldrb	r3, [r0, r3]
 8015a12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015a16:	460b      	mov	r3, r1
 8015a18:	2900      	cmp	r1, #0
 8015a1a:	d1f5      	bne.n	8015a08 <_printf_i+0x16c>
 8015a1c:	e7b9      	b.n	8015992 <_printf_i+0xf6>
 8015a1e:	6813      	ldr	r3, [r2, #0]
 8015a20:	6825      	ldr	r5, [r4, #0]
 8015a22:	6961      	ldr	r1, [r4, #20]
 8015a24:	1d18      	adds	r0, r3, #4
 8015a26:	6010      	str	r0, [r2, #0]
 8015a28:	0628      	lsls	r0, r5, #24
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	d501      	bpl.n	8015a32 <_printf_i+0x196>
 8015a2e:	6019      	str	r1, [r3, #0]
 8015a30:	e002      	b.n	8015a38 <_printf_i+0x19c>
 8015a32:	066a      	lsls	r2, r5, #25
 8015a34:	d5fb      	bpl.n	8015a2e <_printf_i+0x192>
 8015a36:	8019      	strh	r1, [r3, #0]
 8015a38:	2300      	movs	r3, #0
 8015a3a:	6123      	str	r3, [r4, #16]
 8015a3c:	4665      	mov	r5, ip
 8015a3e:	e7b9      	b.n	80159b4 <_printf_i+0x118>
 8015a40:	6813      	ldr	r3, [r2, #0]
 8015a42:	1d19      	adds	r1, r3, #4
 8015a44:	6011      	str	r1, [r2, #0]
 8015a46:	681d      	ldr	r5, [r3, #0]
 8015a48:	6862      	ldr	r2, [r4, #4]
 8015a4a:	2100      	movs	r1, #0
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	f7ea fbdf 	bl	8000210 <memchr>
 8015a52:	b108      	cbz	r0, 8015a58 <_printf_i+0x1bc>
 8015a54:	1b40      	subs	r0, r0, r5
 8015a56:	6060      	str	r0, [r4, #4]
 8015a58:	6863      	ldr	r3, [r4, #4]
 8015a5a:	6123      	str	r3, [r4, #16]
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a62:	e7a7      	b.n	80159b4 <_printf_i+0x118>
 8015a64:	6923      	ldr	r3, [r4, #16]
 8015a66:	462a      	mov	r2, r5
 8015a68:	4639      	mov	r1, r7
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	47c0      	blx	r8
 8015a6e:	3001      	adds	r0, #1
 8015a70:	d0aa      	beq.n	80159c8 <_printf_i+0x12c>
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	079b      	lsls	r3, r3, #30
 8015a76:	d413      	bmi.n	8015aa0 <_printf_i+0x204>
 8015a78:	68e0      	ldr	r0, [r4, #12]
 8015a7a:	9b03      	ldr	r3, [sp, #12]
 8015a7c:	4298      	cmp	r0, r3
 8015a7e:	bfb8      	it	lt
 8015a80:	4618      	movlt	r0, r3
 8015a82:	e7a3      	b.n	80159cc <_printf_i+0x130>
 8015a84:	2301      	movs	r3, #1
 8015a86:	464a      	mov	r2, r9
 8015a88:	4639      	mov	r1, r7
 8015a8a:	4630      	mov	r0, r6
 8015a8c:	47c0      	blx	r8
 8015a8e:	3001      	adds	r0, #1
 8015a90:	d09a      	beq.n	80159c8 <_printf_i+0x12c>
 8015a92:	3501      	adds	r5, #1
 8015a94:	68e3      	ldr	r3, [r4, #12]
 8015a96:	9a03      	ldr	r2, [sp, #12]
 8015a98:	1a9b      	subs	r3, r3, r2
 8015a9a:	42ab      	cmp	r3, r5
 8015a9c:	dcf2      	bgt.n	8015a84 <_printf_i+0x1e8>
 8015a9e:	e7eb      	b.n	8015a78 <_printf_i+0x1dc>
 8015aa0:	2500      	movs	r5, #0
 8015aa2:	f104 0919 	add.w	r9, r4, #25
 8015aa6:	e7f5      	b.n	8015a94 <_printf_i+0x1f8>
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d1ac      	bne.n	8015a06 <_printf_i+0x16a>
 8015aac:	7803      	ldrb	r3, [r0, #0]
 8015aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ab6:	e76c      	b.n	8015992 <_printf_i+0xf6>
 8015ab8:	08019c90 	.word	0x08019c90
 8015abc:	08019ca1 	.word	0x08019ca1

08015ac0 <_scanf_float>:
 8015ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac4:	469a      	mov	sl, r3
 8015ac6:	688b      	ldr	r3, [r1, #8]
 8015ac8:	4616      	mov	r6, r2
 8015aca:	1e5a      	subs	r2, r3, #1
 8015acc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015ad0:	b087      	sub	sp, #28
 8015ad2:	bf83      	ittte	hi
 8015ad4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015ad8:	189b      	addhi	r3, r3, r2
 8015ada:	9301      	strhi	r3, [sp, #4]
 8015adc:	2300      	movls	r3, #0
 8015ade:	bf86      	itte	hi
 8015ae0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015ae4:	608b      	strhi	r3, [r1, #8]
 8015ae6:	9301      	strls	r3, [sp, #4]
 8015ae8:	680b      	ldr	r3, [r1, #0]
 8015aea:	4688      	mov	r8, r1
 8015aec:	f04f 0b00 	mov.w	fp, #0
 8015af0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015af4:	f848 3b1c 	str.w	r3, [r8], #28
 8015af8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015afc:	4607      	mov	r7, r0
 8015afe:	460c      	mov	r4, r1
 8015b00:	4645      	mov	r5, r8
 8015b02:	465a      	mov	r2, fp
 8015b04:	46d9      	mov	r9, fp
 8015b06:	f8cd b008 	str.w	fp, [sp, #8]
 8015b0a:	68a1      	ldr	r1, [r4, #8]
 8015b0c:	b181      	cbz	r1, 8015b30 <_scanf_float+0x70>
 8015b0e:	6833      	ldr	r3, [r6, #0]
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	2b49      	cmp	r3, #73	; 0x49
 8015b14:	d071      	beq.n	8015bfa <_scanf_float+0x13a>
 8015b16:	d84d      	bhi.n	8015bb4 <_scanf_float+0xf4>
 8015b18:	2b39      	cmp	r3, #57	; 0x39
 8015b1a:	d840      	bhi.n	8015b9e <_scanf_float+0xde>
 8015b1c:	2b31      	cmp	r3, #49	; 0x31
 8015b1e:	f080 8088 	bcs.w	8015c32 <_scanf_float+0x172>
 8015b22:	2b2d      	cmp	r3, #45	; 0x2d
 8015b24:	f000 8090 	beq.w	8015c48 <_scanf_float+0x188>
 8015b28:	d815      	bhi.n	8015b56 <_scanf_float+0x96>
 8015b2a:	2b2b      	cmp	r3, #43	; 0x2b
 8015b2c:	f000 808c 	beq.w	8015c48 <_scanf_float+0x188>
 8015b30:	f1b9 0f00 	cmp.w	r9, #0
 8015b34:	d003      	beq.n	8015b3e <_scanf_float+0x7e>
 8015b36:	6823      	ldr	r3, [r4, #0]
 8015b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b3c:	6023      	str	r3, [r4, #0]
 8015b3e:	3a01      	subs	r2, #1
 8015b40:	2a01      	cmp	r2, #1
 8015b42:	f200 80ea 	bhi.w	8015d1a <_scanf_float+0x25a>
 8015b46:	4545      	cmp	r5, r8
 8015b48:	f200 80dc 	bhi.w	8015d04 <_scanf_float+0x244>
 8015b4c:	2601      	movs	r6, #1
 8015b4e:	4630      	mov	r0, r6
 8015b50:	b007      	add	sp, #28
 8015b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b56:	2b2e      	cmp	r3, #46	; 0x2e
 8015b58:	f000 809f 	beq.w	8015c9a <_scanf_float+0x1da>
 8015b5c:	2b30      	cmp	r3, #48	; 0x30
 8015b5e:	d1e7      	bne.n	8015b30 <_scanf_float+0x70>
 8015b60:	6820      	ldr	r0, [r4, #0]
 8015b62:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015b66:	d064      	beq.n	8015c32 <_scanf_float+0x172>
 8015b68:	9b01      	ldr	r3, [sp, #4]
 8015b6a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015b6e:	6020      	str	r0, [r4, #0]
 8015b70:	f109 0901 	add.w	r9, r9, #1
 8015b74:	b11b      	cbz	r3, 8015b7e <_scanf_float+0xbe>
 8015b76:	3b01      	subs	r3, #1
 8015b78:	3101      	adds	r1, #1
 8015b7a:	9301      	str	r3, [sp, #4]
 8015b7c:	60a1      	str	r1, [r4, #8]
 8015b7e:	68a3      	ldr	r3, [r4, #8]
 8015b80:	3b01      	subs	r3, #1
 8015b82:	60a3      	str	r3, [r4, #8]
 8015b84:	6923      	ldr	r3, [r4, #16]
 8015b86:	3301      	adds	r3, #1
 8015b88:	6123      	str	r3, [r4, #16]
 8015b8a:	6873      	ldr	r3, [r6, #4]
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	6073      	str	r3, [r6, #4]
 8015b92:	f340 80ac 	ble.w	8015cee <_scanf_float+0x22e>
 8015b96:	6833      	ldr	r3, [r6, #0]
 8015b98:	3301      	adds	r3, #1
 8015b9a:	6033      	str	r3, [r6, #0]
 8015b9c:	e7b5      	b.n	8015b0a <_scanf_float+0x4a>
 8015b9e:	2b45      	cmp	r3, #69	; 0x45
 8015ba0:	f000 8085 	beq.w	8015cae <_scanf_float+0x1ee>
 8015ba4:	2b46      	cmp	r3, #70	; 0x46
 8015ba6:	d06a      	beq.n	8015c7e <_scanf_float+0x1be>
 8015ba8:	2b41      	cmp	r3, #65	; 0x41
 8015baa:	d1c1      	bne.n	8015b30 <_scanf_float+0x70>
 8015bac:	2a01      	cmp	r2, #1
 8015bae:	d1bf      	bne.n	8015b30 <_scanf_float+0x70>
 8015bb0:	2202      	movs	r2, #2
 8015bb2:	e046      	b.n	8015c42 <_scanf_float+0x182>
 8015bb4:	2b65      	cmp	r3, #101	; 0x65
 8015bb6:	d07a      	beq.n	8015cae <_scanf_float+0x1ee>
 8015bb8:	d818      	bhi.n	8015bec <_scanf_float+0x12c>
 8015bba:	2b54      	cmp	r3, #84	; 0x54
 8015bbc:	d066      	beq.n	8015c8c <_scanf_float+0x1cc>
 8015bbe:	d811      	bhi.n	8015be4 <_scanf_float+0x124>
 8015bc0:	2b4e      	cmp	r3, #78	; 0x4e
 8015bc2:	d1b5      	bne.n	8015b30 <_scanf_float+0x70>
 8015bc4:	2a00      	cmp	r2, #0
 8015bc6:	d146      	bne.n	8015c56 <_scanf_float+0x196>
 8015bc8:	f1b9 0f00 	cmp.w	r9, #0
 8015bcc:	d145      	bne.n	8015c5a <_scanf_float+0x19a>
 8015bce:	6821      	ldr	r1, [r4, #0]
 8015bd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015bd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015bd8:	d13f      	bne.n	8015c5a <_scanf_float+0x19a>
 8015bda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015bde:	6021      	str	r1, [r4, #0]
 8015be0:	2201      	movs	r2, #1
 8015be2:	e02e      	b.n	8015c42 <_scanf_float+0x182>
 8015be4:	2b59      	cmp	r3, #89	; 0x59
 8015be6:	d01e      	beq.n	8015c26 <_scanf_float+0x166>
 8015be8:	2b61      	cmp	r3, #97	; 0x61
 8015bea:	e7de      	b.n	8015baa <_scanf_float+0xea>
 8015bec:	2b6e      	cmp	r3, #110	; 0x6e
 8015bee:	d0e9      	beq.n	8015bc4 <_scanf_float+0x104>
 8015bf0:	d815      	bhi.n	8015c1e <_scanf_float+0x15e>
 8015bf2:	2b66      	cmp	r3, #102	; 0x66
 8015bf4:	d043      	beq.n	8015c7e <_scanf_float+0x1be>
 8015bf6:	2b69      	cmp	r3, #105	; 0x69
 8015bf8:	d19a      	bne.n	8015b30 <_scanf_float+0x70>
 8015bfa:	f1bb 0f00 	cmp.w	fp, #0
 8015bfe:	d138      	bne.n	8015c72 <_scanf_float+0x1b2>
 8015c00:	f1b9 0f00 	cmp.w	r9, #0
 8015c04:	d197      	bne.n	8015b36 <_scanf_float+0x76>
 8015c06:	6821      	ldr	r1, [r4, #0]
 8015c08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015c0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015c10:	d195      	bne.n	8015b3e <_scanf_float+0x7e>
 8015c12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c16:	6021      	str	r1, [r4, #0]
 8015c18:	f04f 0b01 	mov.w	fp, #1
 8015c1c:	e011      	b.n	8015c42 <_scanf_float+0x182>
 8015c1e:	2b74      	cmp	r3, #116	; 0x74
 8015c20:	d034      	beq.n	8015c8c <_scanf_float+0x1cc>
 8015c22:	2b79      	cmp	r3, #121	; 0x79
 8015c24:	d184      	bne.n	8015b30 <_scanf_float+0x70>
 8015c26:	f1bb 0f07 	cmp.w	fp, #7
 8015c2a:	d181      	bne.n	8015b30 <_scanf_float+0x70>
 8015c2c:	f04f 0b08 	mov.w	fp, #8
 8015c30:	e007      	b.n	8015c42 <_scanf_float+0x182>
 8015c32:	eb12 0f0b 	cmn.w	r2, fp
 8015c36:	f47f af7b 	bne.w	8015b30 <_scanf_float+0x70>
 8015c3a:	6821      	ldr	r1, [r4, #0]
 8015c3c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015c40:	6021      	str	r1, [r4, #0]
 8015c42:	702b      	strb	r3, [r5, #0]
 8015c44:	3501      	adds	r5, #1
 8015c46:	e79a      	b.n	8015b7e <_scanf_float+0xbe>
 8015c48:	6821      	ldr	r1, [r4, #0]
 8015c4a:	0608      	lsls	r0, r1, #24
 8015c4c:	f57f af70 	bpl.w	8015b30 <_scanf_float+0x70>
 8015c50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015c54:	e7f4      	b.n	8015c40 <_scanf_float+0x180>
 8015c56:	2a02      	cmp	r2, #2
 8015c58:	d047      	beq.n	8015cea <_scanf_float+0x22a>
 8015c5a:	f1bb 0f01 	cmp.w	fp, #1
 8015c5e:	d003      	beq.n	8015c68 <_scanf_float+0x1a8>
 8015c60:	f1bb 0f04 	cmp.w	fp, #4
 8015c64:	f47f af64 	bne.w	8015b30 <_scanf_float+0x70>
 8015c68:	f10b 0b01 	add.w	fp, fp, #1
 8015c6c:	fa5f fb8b 	uxtb.w	fp, fp
 8015c70:	e7e7      	b.n	8015c42 <_scanf_float+0x182>
 8015c72:	f1bb 0f03 	cmp.w	fp, #3
 8015c76:	d0f7      	beq.n	8015c68 <_scanf_float+0x1a8>
 8015c78:	f1bb 0f05 	cmp.w	fp, #5
 8015c7c:	e7f2      	b.n	8015c64 <_scanf_float+0x1a4>
 8015c7e:	f1bb 0f02 	cmp.w	fp, #2
 8015c82:	f47f af55 	bne.w	8015b30 <_scanf_float+0x70>
 8015c86:	f04f 0b03 	mov.w	fp, #3
 8015c8a:	e7da      	b.n	8015c42 <_scanf_float+0x182>
 8015c8c:	f1bb 0f06 	cmp.w	fp, #6
 8015c90:	f47f af4e 	bne.w	8015b30 <_scanf_float+0x70>
 8015c94:	f04f 0b07 	mov.w	fp, #7
 8015c98:	e7d3      	b.n	8015c42 <_scanf_float+0x182>
 8015c9a:	6821      	ldr	r1, [r4, #0]
 8015c9c:	0588      	lsls	r0, r1, #22
 8015c9e:	f57f af47 	bpl.w	8015b30 <_scanf_float+0x70>
 8015ca2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015ca6:	6021      	str	r1, [r4, #0]
 8015ca8:	f8cd 9008 	str.w	r9, [sp, #8]
 8015cac:	e7c9      	b.n	8015c42 <_scanf_float+0x182>
 8015cae:	6821      	ldr	r1, [r4, #0]
 8015cb0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015cb4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015cb8:	d006      	beq.n	8015cc8 <_scanf_float+0x208>
 8015cba:	0548      	lsls	r0, r1, #21
 8015cbc:	f57f af38 	bpl.w	8015b30 <_scanf_float+0x70>
 8015cc0:	f1b9 0f00 	cmp.w	r9, #0
 8015cc4:	f43f af3b 	beq.w	8015b3e <_scanf_float+0x7e>
 8015cc8:	0588      	lsls	r0, r1, #22
 8015cca:	bf58      	it	pl
 8015ccc:	9802      	ldrpl	r0, [sp, #8]
 8015cce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015cd2:	bf58      	it	pl
 8015cd4:	eba9 0000 	subpl.w	r0, r9, r0
 8015cd8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015cdc:	bf58      	it	pl
 8015cde:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015ce2:	6021      	str	r1, [r4, #0]
 8015ce4:	f04f 0900 	mov.w	r9, #0
 8015ce8:	e7ab      	b.n	8015c42 <_scanf_float+0x182>
 8015cea:	2203      	movs	r2, #3
 8015cec:	e7a9      	b.n	8015c42 <_scanf_float+0x182>
 8015cee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015cf2:	9205      	str	r2, [sp, #20]
 8015cf4:	4631      	mov	r1, r6
 8015cf6:	4638      	mov	r0, r7
 8015cf8:	4798      	blx	r3
 8015cfa:	9a05      	ldr	r2, [sp, #20]
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	f43f af04 	beq.w	8015b0a <_scanf_float+0x4a>
 8015d02:	e715      	b.n	8015b30 <_scanf_float+0x70>
 8015d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015d0c:	4632      	mov	r2, r6
 8015d0e:	4638      	mov	r0, r7
 8015d10:	4798      	blx	r3
 8015d12:	6923      	ldr	r3, [r4, #16]
 8015d14:	3b01      	subs	r3, #1
 8015d16:	6123      	str	r3, [r4, #16]
 8015d18:	e715      	b.n	8015b46 <_scanf_float+0x86>
 8015d1a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015d1e:	2b06      	cmp	r3, #6
 8015d20:	d80a      	bhi.n	8015d38 <_scanf_float+0x278>
 8015d22:	f1bb 0f02 	cmp.w	fp, #2
 8015d26:	d968      	bls.n	8015dfa <_scanf_float+0x33a>
 8015d28:	f1ab 0b03 	sub.w	fp, fp, #3
 8015d2c:	fa5f fb8b 	uxtb.w	fp, fp
 8015d30:	eba5 0b0b 	sub.w	fp, r5, fp
 8015d34:	455d      	cmp	r5, fp
 8015d36:	d14b      	bne.n	8015dd0 <_scanf_float+0x310>
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	05da      	lsls	r2, r3, #23
 8015d3c:	d51f      	bpl.n	8015d7e <_scanf_float+0x2be>
 8015d3e:	055b      	lsls	r3, r3, #21
 8015d40:	d468      	bmi.n	8015e14 <_scanf_float+0x354>
 8015d42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015d46:	6923      	ldr	r3, [r4, #16]
 8015d48:	2965      	cmp	r1, #101	; 0x65
 8015d4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8015d4e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015d52:	6123      	str	r3, [r4, #16]
 8015d54:	d00d      	beq.n	8015d72 <_scanf_float+0x2b2>
 8015d56:	2945      	cmp	r1, #69	; 0x45
 8015d58:	d00b      	beq.n	8015d72 <_scanf_float+0x2b2>
 8015d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d5e:	4632      	mov	r2, r6
 8015d60:	4638      	mov	r0, r7
 8015d62:	4798      	blx	r3
 8015d64:	6923      	ldr	r3, [r4, #16]
 8015d66:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015d70:	6123      	str	r3, [r4, #16]
 8015d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d76:	4632      	mov	r2, r6
 8015d78:	4638      	mov	r0, r7
 8015d7a:	4798      	blx	r3
 8015d7c:	465d      	mov	r5, fp
 8015d7e:	6826      	ldr	r6, [r4, #0]
 8015d80:	f016 0610 	ands.w	r6, r6, #16
 8015d84:	d17a      	bne.n	8015e7c <_scanf_float+0x3bc>
 8015d86:	702e      	strb	r6, [r5, #0]
 8015d88:	6823      	ldr	r3, [r4, #0]
 8015d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015d92:	d142      	bne.n	8015e1a <_scanf_float+0x35a>
 8015d94:	9b02      	ldr	r3, [sp, #8]
 8015d96:	eba9 0303 	sub.w	r3, r9, r3
 8015d9a:	425a      	negs	r2, r3
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d149      	bne.n	8015e34 <_scanf_float+0x374>
 8015da0:	2200      	movs	r2, #0
 8015da2:	4641      	mov	r1, r8
 8015da4:	4638      	mov	r0, r7
 8015da6:	f000 ff0b 	bl	8016bc0 <_strtod_r>
 8015daa:	6825      	ldr	r5, [r4, #0]
 8015dac:	f8da 3000 	ldr.w	r3, [sl]
 8015db0:	f015 0f02 	tst.w	r5, #2
 8015db4:	f103 0204 	add.w	r2, r3, #4
 8015db8:	ec59 8b10 	vmov	r8, r9, d0
 8015dbc:	f8ca 2000 	str.w	r2, [sl]
 8015dc0:	d043      	beq.n	8015e4a <_scanf_float+0x38a>
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	e9c3 8900 	strd	r8, r9, [r3]
 8015dc8:	68e3      	ldr	r3, [r4, #12]
 8015dca:	3301      	adds	r3, #1
 8015dcc:	60e3      	str	r3, [r4, #12]
 8015dce:	e6be      	b.n	8015b4e <_scanf_float+0x8e>
 8015dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015dd8:	4632      	mov	r2, r6
 8015dda:	4638      	mov	r0, r7
 8015ddc:	4798      	blx	r3
 8015dde:	6923      	ldr	r3, [r4, #16]
 8015de0:	3b01      	subs	r3, #1
 8015de2:	6123      	str	r3, [r4, #16]
 8015de4:	e7a6      	b.n	8015d34 <_scanf_float+0x274>
 8015de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015dee:	4632      	mov	r2, r6
 8015df0:	4638      	mov	r0, r7
 8015df2:	4798      	blx	r3
 8015df4:	6923      	ldr	r3, [r4, #16]
 8015df6:	3b01      	subs	r3, #1
 8015df8:	6123      	str	r3, [r4, #16]
 8015dfa:	4545      	cmp	r5, r8
 8015dfc:	d8f3      	bhi.n	8015de6 <_scanf_float+0x326>
 8015dfe:	e6a5      	b.n	8015b4c <_scanf_float+0x8c>
 8015e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e08:	4632      	mov	r2, r6
 8015e0a:	4638      	mov	r0, r7
 8015e0c:	4798      	blx	r3
 8015e0e:	6923      	ldr	r3, [r4, #16]
 8015e10:	3b01      	subs	r3, #1
 8015e12:	6123      	str	r3, [r4, #16]
 8015e14:	4545      	cmp	r5, r8
 8015e16:	d8f3      	bhi.n	8015e00 <_scanf_float+0x340>
 8015e18:	e698      	b.n	8015b4c <_scanf_float+0x8c>
 8015e1a:	9b03      	ldr	r3, [sp, #12]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d0bf      	beq.n	8015da0 <_scanf_float+0x2e0>
 8015e20:	9904      	ldr	r1, [sp, #16]
 8015e22:	230a      	movs	r3, #10
 8015e24:	4632      	mov	r2, r6
 8015e26:	3101      	adds	r1, #1
 8015e28:	4638      	mov	r0, r7
 8015e2a:	f000 ff55 	bl	8016cd8 <_strtol_r>
 8015e2e:	9b03      	ldr	r3, [sp, #12]
 8015e30:	9d04      	ldr	r5, [sp, #16]
 8015e32:	1ac2      	subs	r2, r0, r3
 8015e34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015e38:	429d      	cmp	r5, r3
 8015e3a:	bf28      	it	cs
 8015e3c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015e40:	490f      	ldr	r1, [pc, #60]	; (8015e80 <_scanf_float+0x3c0>)
 8015e42:	4628      	mov	r0, r5
 8015e44:	f000 f858 	bl	8015ef8 <siprintf>
 8015e48:	e7aa      	b.n	8015da0 <_scanf_float+0x2e0>
 8015e4a:	f015 0504 	ands.w	r5, r5, #4
 8015e4e:	d1b8      	bne.n	8015dc2 <_scanf_float+0x302>
 8015e50:	681f      	ldr	r7, [r3, #0]
 8015e52:	ee10 2a10 	vmov	r2, s0
 8015e56:	464b      	mov	r3, r9
 8015e58:	ee10 0a10 	vmov	r0, s0
 8015e5c:	4649      	mov	r1, r9
 8015e5e:	f7ea fe7d 	bl	8000b5c <__aeabi_dcmpun>
 8015e62:	b128      	cbz	r0, 8015e70 <_scanf_float+0x3b0>
 8015e64:	4628      	mov	r0, r5
 8015e66:	f000 f80d 	bl	8015e84 <nanf>
 8015e6a:	ed87 0a00 	vstr	s0, [r7]
 8015e6e:	e7ab      	b.n	8015dc8 <_scanf_float+0x308>
 8015e70:	4640      	mov	r0, r8
 8015e72:	4649      	mov	r1, r9
 8015e74:	f7ea fed0 	bl	8000c18 <__aeabi_d2f>
 8015e78:	6038      	str	r0, [r7, #0]
 8015e7a:	e7a5      	b.n	8015dc8 <_scanf_float+0x308>
 8015e7c:	2600      	movs	r6, #0
 8015e7e:	e666      	b.n	8015b4e <_scanf_float+0x8e>
 8015e80:	08019cb2 	.word	0x08019cb2

08015e84 <nanf>:
 8015e84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015e8c <nanf+0x8>
 8015e88:	4770      	bx	lr
 8015e8a:	bf00      	nop
 8015e8c:	7fc00000 	.word	0x7fc00000

08015e90 <sniprintf>:
 8015e90:	b40c      	push	{r2, r3}
 8015e92:	b530      	push	{r4, r5, lr}
 8015e94:	4b17      	ldr	r3, [pc, #92]	; (8015ef4 <sniprintf+0x64>)
 8015e96:	1e0c      	subs	r4, r1, #0
 8015e98:	b09d      	sub	sp, #116	; 0x74
 8015e9a:	681d      	ldr	r5, [r3, #0]
 8015e9c:	da08      	bge.n	8015eb0 <sniprintf+0x20>
 8015e9e:	238b      	movs	r3, #139	; 0x8b
 8015ea0:	602b      	str	r3, [r5, #0]
 8015ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ea6:	b01d      	add	sp, #116	; 0x74
 8015ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015eac:	b002      	add	sp, #8
 8015eae:	4770      	bx	lr
 8015eb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015eb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015eb8:	bf14      	ite	ne
 8015eba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015ebe:	4623      	moveq	r3, r4
 8015ec0:	9304      	str	r3, [sp, #16]
 8015ec2:	9307      	str	r3, [sp, #28]
 8015ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ec8:	9002      	str	r0, [sp, #8]
 8015eca:	9006      	str	r0, [sp, #24]
 8015ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ed0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015ed2:	ab21      	add	r3, sp, #132	; 0x84
 8015ed4:	a902      	add	r1, sp, #8
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	9301      	str	r3, [sp, #4]
 8015eda:	f002 fdf1 	bl	8018ac0 <_svfiprintf_r>
 8015ede:	1c43      	adds	r3, r0, #1
 8015ee0:	bfbc      	itt	lt
 8015ee2:	238b      	movlt	r3, #139	; 0x8b
 8015ee4:	602b      	strlt	r3, [r5, #0]
 8015ee6:	2c00      	cmp	r4, #0
 8015ee8:	d0dd      	beq.n	8015ea6 <sniprintf+0x16>
 8015eea:	9b02      	ldr	r3, [sp, #8]
 8015eec:	2200      	movs	r2, #0
 8015eee:	701a      	strb	r2, [r3, #0]
 8015ef0:	e7d9      	b.n	8015ea6 <sniprintf+0x16>
 8015ef2:	bf00      	nop
 8015ef4:	2000000c 	.word	0x2000000c

08015ef8 <siprintf>:
 8015ef8:	b40e      	push	{r1, r2, r3}
 8015efa:	b500      	push	{lr}
 8015efc:	b09c      	sub	sp, #112	; 0x70
 8015efe:	ab1d      	add	r3, sp, #116	; 0x74
 8015f00:	9002      	str	r0, [sp, #8]
 8015f02:	9006      	str	r0, [sp, #24]
 8015f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f08:	4809      	ldr	r0, [pc, #36]	; (8015f30 <siprintf+0x38>)
 8015f0a:	9107      	str	r1, [sp, #28]
 8015f0c:	9104      	str	r1, [sp, #16]
 8015f0e:	4909      	ldr	r1, [pc, #36]	; (8015f34 <siprintf+0x3c>)
 8015f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f14:	9105      	str	r1, [sp, #20]
 8015f16:	6800      	ldr	r0, [r0, #0]
 8015f18:	9301      	str	r3, [sp, #4]
 8015f1a:	a902      	add	r1, sp, #8
 8015f1c:	f002 fdd0 	bl	8018ac0 <_svfiprintf_r>
 8015f20:	9b02      	ldr	r3, [sp, #8]
 8015f22:	2200      	movs	r2, #0
 8015f24:	701a      	strb	r2, [r3, #0]
 8015f26:	b01c      	add	sp, #112	; 0x70
 8015f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f2c:	b003      	add	sp, #12
 8015f2e:	4770      	bx	lr
 8015f30:	2000000c 	.word	0x2000000c
 8015f34:	ffff0208 	.word	0xffff0208

08015f38 <siscanf>:
 8015f38:	b40e      	push	{r1, r2, r3}
 8015f3a:	b530      	push	{r4, r5, lr}
 8015f3c:	b09c      	sub	sp, #112	; 0x70
 8015f3e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015f40:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015f44:	f854 5b04 	ldr.w	r5, [r4], #4
 8015f48:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015f4c:	9002      	str	r0, [sp, #8]
 8015f4e:	9006      	str	r0, [sp, #24]
 8015f50:	f7ea f956 	bl	8000200 <strlen>
 8015f54:	4b0b      	ldr	r3, [pc, #44]	; (8015f84 <siscanf+0x4c>)
 8015f56:	9003      	str	r0, [sp, #12]
 8015f58:	9007      	str	r0, [sp, #28]
 8015f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f5c:	480a      	ldr	r0, [pc, #40]	; (8015f88 <siscanf+0x50>)
 8015f5e:	9401      	str	r4, [sp, #4]
 8015f60:	2300      	movs	r3, #0
 8015f62:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f64:	9314      	str	r3, [sp, #80]	; 0x50
 8015f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f6e:	462a      	mov	r2, r5
 8015f70:	4623      	mov	r3, r4
 8015f72:	a902      	add	r1, sp, #8
 8015f74:	6800      	ldr	r0, [r0, #0]
 8015f76:	f002 fef5 	bl	8018d64 <__ssvfiscanf_r>
 8015f7a:	b01c      	add	sp, #112	; 0x70
 8015f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f80:	b003      	add	sp, #12
 8015f82:	4770      	bx	lr
 8015f84:	08015f8d 	.word	0x08015f8d
 8015f88:	2000000c 	.word	0x2000000c

08015f8c <__seofread>:
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	4770      	bx	lr

08015f90 <strcpy>:
 8015f90:	4603      	mov	r3, r0
 8015f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f96:	f803 2b01 	strb.w	r2, [r3], #1
 8015f9a:	2a00      	cmp	r2, #0
 8015f9c:	d1f9      	bne.n	8015f92 <strcpy+0x2>
 8015f9e:	4770      	bx	lr

08015fa0 <sulp>:
 8015fa0:	b570      	push	{r4, r5, r6, lr}
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	460d      	mov	r5, r1
 8015fa6:	ec45 4b10 	vmov	d0, r4, r5
 8015faa:	4616      	mov	r6, r2
 8015fac:	f002 fb44 	bl	8018638 <__ulp>
 8015fb0:	ec51 0b10 	vmov	r0, r1, d0
 8015fb4:	b17e      	cbz	r6, 8015fd6 <sulp+0x36>
 8015fb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015fba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	dd09      	ble.n	8015fd6 <sulp+0x36>
 8015fc2:	051b      	lsls	r3, r3, #20
 8015fc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015fc8:	2400      	movs	r4, #0
 8015fca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015fce:	4622      	mov	r2, r4
 8015fd0:	462b      	mov	r3, r5
 8015fd2:	f7ea fb29 	bl	8000628 <__aeabi_dmul>
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}

08015fd8 <_strtod_l>:
 8015fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fdc:	461f      	mov	r7, r3
 8015fde:	b0a1      	sub	sp, #132	; 0x84
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	4681      	mov	r9, r0
 8015fe4:	4638      	mov	r0, r7
 8015fe6:	460e      	mov	r6, r1
 8015fe8:	9217      	str	r2, [sp, #92]	; 0x5c
 8015fea:	931c      	str	r3, [sp, #112]	; 0x70
 8015fec:	f002 f824 	bl	8018038 <__localeconv_l>
 8015ff0:	4680      	mov	r8, r0
 8015ff2:	6800      	ldr	r0, [r0, #0]
 8015ff4:	f7ea f904 	bl	8000200 <strlen>
 8015ff8:	f04f 0a00 	mov.w	sl, #0
 8015ffc:	4604      	mov	r4, r0
 8015ffe:	f04f 0b00 	mov.w	fp, #0
 8016002:	961b      	str	r6, [sp, #108]	; 0x6c
 8016004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016006:	781a      	ldrb	r2, [r3, #0]
 8016008:	2a0d      	cmp	r2, #13
 801600a:	d832      	bhi.n	8016072 <_strtod_l+0x9a>
 801600c:	2a09      	cmp	r2, #9
 801600e:	d236      	bcs.n	801607e <_strtod_l+0xa6>
 8016010:	2a00      	cmp	r2, #0
 8016012:	d03e      	beq.n	8016092 <_strtod_l+0xba>
 8016014:	2300      	movs	r3, #0
 8016016:	930d      	str	r3, [sp, #52]	; 0x34
 8016018:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801601a:	782b      	ldrb	r3, [r5, #0]
 801601c:	2b30      	cmp	r3, #48	; 0x30
 801601e:	f040 80ac 	bne.w	801617a <_strtod_l+0x1a2>
 8016022:	786b      	ldrb	r3, [r5, #1]
 8016024:	2b58      	cmp	r3, #88	; 0x58
 8016026:	d001      	beq.n	801602c <_strtod_l+0x54>
 8016028:	2b78      	cmp	r3, #120	; 0x78
 801602a:	d167      	bne.n	80160fc <_strtod_l+0x124>
 801602c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801602e:	9301      	str	r3, [sp, #4]
 8016030:	ab1c      	add	r3, sp, #112	; 0x70
 8016032:	9300      	str	r3, [sp, #0]
 8016034:	9702      	str	r7, [sp, #8]
 8016036:	ab1d      	add	r3, sp, #116	; 0x74
 8016038:	4a88      	ldr	r2, [pc, #544]	; (801625c <_strtod_l+0x284>)
 801603a:	a91b      	add	r1, sp, #108	; 0x6c
 801603c:	4648      	mov	r0, r9
 801603e:	f001 fd12 	bl	8017a66 <__gethex>
 8016042:	f010 0407 	ands.w	r4, r0, #7
 8016046:	4606      	mov	r6, r0
 8016048:	d005      	beq.n	8016056 <_strtod_l+0x7e>
 801604a:	2c06      	cmp	r4, #6
 801604c:	d12b      	bne.n	80160a6 <_strtod_l+0xce>
 801604e:	3501      	adds	r5, #1
 8016050:	2300      	movs	r3, #0
 8016052:	951b      	str	r5, [sp, #108]	; 0x6c
 8016054:	930d      	str	r3, [sp, #52]	; 0x34
 8016056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016058:	2b00      	cmp	r3, #0
 801605a:	f040 859a 	bne.w	8016b92 <_strtod_l+0xbba>
 801605e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016060:	b1e3      	cbz	r3, 801609c <_strtod_l+0xc4>
 8016062:	4652      	mov	r2, sl
 8016064:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016068:	ec43 2b10 	vmov	d0, r2, r3
 801606c:	b021      	add	sp, #132	; 0x84
 801606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016072:	2a2b      	cmp	r2, #43	; 0x2b
 8016074:	d015      	beq.n	80160a2 <_strtod_l+0xca>
 8016076:	2a2d      	cmp	r2, #45	; 0x2d
 8016078:	d004      	beq.n	8016084 <_strtod_l+0xac>
 801607a:	2a20      	cmp	r2, #32
 801607c:	d1ca      	bne.n	8016014 <_strtod_l+0x3c>
 801607e:	3301      	adds	r3, #1
 8016080:	931b      	str	r3, [sp, #108]	; 0x6c
 8016082:	e7bf      	b.n	8016004 <_strtod_l+0x2c>
 8016084:	2201      	movs	r2, #1
 8016086:	920d      	str	r2, [sp, #52]	; 0x34
 8016088:	1c5a      	adds	r2, r3, #1
 801608a:	921b      	str	r2, [sp, #108]	; 0x6c
 801608c:	785b      	ldrb	r3, [r3, #1]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d1c2      	bne.n	8016018 <_strtod_l+0x40>
 8016092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016094:	961b      	str	r6, [sp, #108]	; 0x6c
 8016096:	2b00      	cmp	r3, #0
 8016098:	f040 8579 	bne.w	8016b8e <_strtod_l+0xbb6>
 801609c:	4652      	mov	r2, sl
 801609e:	465b      	mov	r3, fp
 80160a0:	e7e2      	b.n	8016068 <_strtod_l+0x90>
 80160a2:	2200      	movs	r2, #0
 80160a4:	e7ef      	b.n	8016086 <_strtod_l+0xae>
 80160a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80160a8:	b13a      	cbz	r2, 80160ba <_strtod_l+0xe2>
 80160aa:	2135      	movs	r1, #53	; 0x35
 80160ac:	a81e      	add	r0, sp, #120	; 0x78
 80160ae:	f002 fbbb 	bl	8018828 <__copybits>
 80160b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80160b4:	4648      	mov	r0, r9
 80160b6:	f002 f828 	bl	801810a <_Bfree>
 80160ba:	3c01      	subs	r4, #1
 80160bc:	2c04      	cmp	r4, #4
 80160be:	d806      	bhi.n	80160ce <_strtod_l+0xf6>
 80160c0:	e8df f004 	tbb	[pc, r4]
 80160c4:	1714030a 	.word	0x1714030a
 80160c8:	0a          	.byte	0x0a
 80160c9:	00          	.byte	0x00
 80160ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80160ce:	0730      	lsls	r0, r6, #28
 80160d0:	d5c1      	bpl.n	8016056 <_strtod_l+0x7e>
 80160d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80160d6:	e7be      	b.n	8016056 <_strtod_l+0x7e>
 80160d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80160dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80160de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80160e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80160e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80160ea:	e7f0      	b.n	80160ce <_strtod_l+0xf6>
 80160ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016260 <_strtod_l+0x288>
 80160f0:	e7ed      	b.n	80160ce <_strtod_l+0xf6>
 80160f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80160f6:	f04f 3aff 	mov.w	sl, #4294967295
 80160fa:	e7e8      	b.n	80160ce <_strtod_l+0xf6>
 80160fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160fe:	1c5a      	adds	r2, r3, #1
 8016100:	921b      	str	r2, [sp, #108]	; 0x6c
 8016102:	785b      	ldrb	r3, [r3, #1]
 8016104:	2b30      	cmp	r3, #48	; 0x30
 8016106:	d0f9      	beq.n	80160fc <_strtod_l+0x124>
 8016108:	2b00      	cmp	r3, #0
 801610a:	d0a4      	beq.n	8016056 <_strtod_l+0x7e>
 801610c:	2301      	movs	r3, #1
 801610e:	2500      	movs	r5, #0
 8016110:	9306      	str	r3, [sp, #24]
 8016112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016114:	9308      	str	r3, [sp, #32]
 8016116:	9507      	str	r5, [sp, #28]
 8016118:	9505      	str	r5, [sp, #20]
 801611a:	220a      	movs	r2, #10
 801611c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801611e:	7807      	ldrb	r7, [r0, #0]
 8016120:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016124:	b2d9      	uxtb	r1, r3
 8016126:	2909      	cmp	r1, #9
 8016128:	d929      	bls.n	801617e <_strtod_l+0x1a6>
 801612a:	4622      	mov	r2, r4
 801612c:	f8d8 1000 	ldr.w	r1, [r8]
 8016130:	f003 f902 	bl	8019338 <strncmp>
 8016134:	2800      	cmp	r0, #0
 8016136:	d031      	beq.n	801619c <_strtod_l+0x1c4>
 8016138:	2000      	movs	r0, #0
 801613a:	9c05      	ldr	r4, [sp, #20]
 801613c:	9004      	str	r0, [sp, #16]
 801613e:	463b      	mov	r3, r7
 8016140:	4602      	mov	r2, r0
 8016142:	2b65      	cmp	r3, #101	; 0x65
 8016144:	d001      	beq.n	801614a <_strtod_l+0x172>
 8016146:	2b45      	cmp	r3, #69	; 0x45
 8016148:	d114      	bne.n	8016174 <_strtod_l+0x19c>
 801614a:	b924      	cbnz	r4, 8016156 <_strtod_l+0x17e>
 801614c:	b910      	cbnz	r0, 8016154 <_strtod_l+0x17c>
 801614e:	9b06      	ldr	r3, [sp, #24]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d09e      	beq.n	8016092 <_strtod_l+0xba>
 8016154:	2400      	movs	r4, #0
 8016156:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016158:	1c73      	adds	r3, r6, #1
 801615a:	931b      	str	r3, [sp, #108]	; 0x6c
 801615c:	7873      	ldrb	r3, [r6, #1]
 801615e:	2b2b      	cmp	r3, #43	; 0x2b
 8016160:	d078      	beq.n	8016254 <_strtod_l+0x27c>
 8016162:	2b2d      	cmp	r3, #45	; 0x2d
 8016164:	d070      	beq.n	8016248 <_strtod_l+0x270>
 8016166:	f04f 0c00 	mov.w	ip, #0
 801616a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801616e:	2f09      	cmp	r7, #9
 8016170:	d97c      	bls.n	801626c <_strtod_l+0x294>
 8016172:	961b      	str	r6, [sp, #108]	; 0x6c
 8016174:	f04f 0e00 	mov.w	lr, #0
 8016178:	e09a      	b.n	80162b0 <_strtod_l+0x2d8>
 801617a:	2300      	movs	r3, #0
 801617c:	e7c7      	b.n	801610e <_strtod_l+0x136>
 801617e:	9905      	ldr	r1, [sp, #20]
 8016180:	2908      	cmp	r1, #8
 8016182:	bfdd      	ittte	le
 8016184:	9907      	ldrle	r1, [sp, #28]
 8016186:	fb02 3301 	mlale	r3, r2, r1, r3
 801618a:	9307      	strle	r3, [sp, #28]
 801618c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016190:	9b05      	ldr	r3, [sp, #20]
 8016192:	3001      	adds	r0, #1
 8016194:	3301      	adds	r3, #1
 8016196:	9305      	str	r3, [sp, #20]
 8016198:	901b      	str	r0, [sp, #108]	; 0x6c
 801619a:	e7bf      	b.n	801611c <_strtod_l+0x144>
 801619c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801619e:	191a      	adds	r2, r3, r4
 80161a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80161a2:	9a05      	ldr	r2, [sp, #20]
 80161a4:	5d1b      	ldrb	r3, [r3, r4]
 80161a6:	2a00      	cmp	r2, #0
 80161a8:	d037      	beq.n	801621a <_strtod_l+0x242>
 80161aa:	9c05      	ldr	r4, [sp, #20]
 80161ac:	4602      	mov	r2, r0
 80161ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80161b2:	2909      	cmp	r1, #9
 80161b4:	d913      	bls.n	80161de <_strtod_l+0x206>
 80161b6:	2101      	movs	r1, #1
 80161b8:	9104      	str	r1, [sp, #16]
 80161ba:	e7c2      	b.n	8016142 <_strtod_l+0x16a>
 80161bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161be:	1c5a      	adds	r2, r3, #1
 80161c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80161c2:	785b      	ldrb	r3, [r3, #1]
 80161c4:	3001      	adds	r0, #1
 80161c6:	2b30      	cmp	r3, #48	; 0x30
 80161c8:	d0f8      	beq.n	80161bc <_strtod_l+0x1e4>
 80161ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80161ce:	2a08      	cmp	r2, #8
 80161d0:	f200 84e4 	bhi.w	8016b9c <_strtod_l+0xbc4>
 80161d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80161d6:	9208      	str	r2, [sp, #32]
 80161d8:	4602      	mov	r2, r0
 80161da:	2000      	movs	r0, #0
 80161dc:	4604      	mov	r4, r0
 80161de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80161e2:	f100 0101 	add.w	r1, r0, #1
 80161e6:	d012      	beq.n	801620e <_strtod_l+0x236>
 80161e8:	440a      	add	r2, r1
 80161ea:	eb00 0c04 	add.w	ip, r0, r4
 80161ee:	4621      	mov	r1, r4
 80161f0:	270a      	movs	r7, #10
 80161f2:	458c      	cmp	ip, r1
 80161f4:	d113      	bne.n	801621e <_strtod_l+0x246>
 80161f6:	1821      	adds	r1, r4, r0
 80161f8:	2908      	cmp	r1, #8
 80161fa:	f104 0401 	add.w	r4, r4, #1
 80161fe:	4404      	add	r4, r0
 8016200:	dc19      	bgt.n	8016236 <_strtod_l+0x25e>
 8016202:	9b07      	ldr	r3, [sp, #28]
 8016204:	210a      	movs	r1, #10
 8016206:	fb01 e303 	mla	r3, r1, r3, lr
 801620a:	9307      	str	r3, [sp, #28]
 801620c:	2100      	movs	r1, #0
 801620e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016210:	1c58      	adds	r0, r3, #1
 8016212:	901b      	str	r0, [sp, #108]	; 0x6c
 8016214:	785b      	ldrb	r3, [r3, #1]
 8016216:	4608      	mov	r0, r1
 8016218:	e7c9      	b.n	80161ae <_strtod_l+0x1d6>
 801621a:	9805      	ldr	r0, [sp, #20]
 801621c:	e7d3      	b.n	80161c6 <_strtod_l+0x1ee>
 801621e:	2908      	cmp	r1, #8
 8016220:	f101 0101 	add.w	r1, r1, #1
 8016224:	dc03      	bgt.n	801622e <_strtod_l+0x256>
 8016226:	9b07      	ldr	r3, [sp, #28]
 8016228:	437b      	muls	r3, r7
 801622a:	9307      	str	r3, [sp, #28]
 801622c:	e7e1      	b.n	80161f2 <_strtod_l+0x21a>
 801622e:	2910      	cmp	r1, #16
 8016230:	bfd8      	it	le
 8016232:	437d      	mulle	r5, r7
 8016234:	e7dd      	b.n	80161f2 <_strtod_l+0x21a>
 8016236:	2c10      	cmp	r4, #16
 8016238:	bfdc      	itt	le
 801623a:	210a      	movle	r1, #10
 801623c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016240:	e7e4      	b.n	801620c <_strtod_l+0x234>
 8016242:	2301      	movs	r3, #1
 8016244:	9304      	str	r3, [sp, #16]
 8016246:	e781      	b.n	801614c <_strtod_l+0x174>
 8016248:	f04f 0c01 	mov.w	ip, #1
 801624c:	1cb3      	adds	r3, r6, #2
 801624e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016250:	78b3      	ldrb	r3, [r6, #2]
 8016252:	e78a      	b.n	801616a <_strtod_l+0x192>
 8016254:	f04f 0c00 	mov.w	ip, #0
 8016258:	e7f8      	b.n	801624c <_strtod_l+0x274>
 801625a:	bf00      	nop
 801625c:	08019cb8 	.word	0x08019cb8
 8016260:	7ff00000 	.word	0x7ff00000
 8016264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016266:	1c5f      	adds	r7, r3, #1
 8016268:	971b      	str	r7, [sp, #108]	; 0x6c
 801626a:	785b      	ldrb	r3, [r3, #1]
 801626c:	2b30      	cmp	r3, #48	; 0x30
 801626e:	d0f9      	beq.n	8016264 <_strtod_l+0x28c>
 8016270:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016274:	2f08      	cmp	r7, #8
 8016276:	f63f af7d 	bhi.w	8016174 <_strtod_l+0x19c>
 801627a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801627e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016280:	930a      	str	r3, [sp, #40]	; 0x28
 8016282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016284:	1c5f      	adds	r7, r3, #1
 8016286:	971b      	str	r7, [sp, #108]	; 0x6c
 8016288:	785b      	ldrb	r3, [r3, #1]
 801628a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801628e:	f1b8 0f09 	cmp.w	r8, #9
 8016292:	d937      	bls.n	8016304 <_strtod_l+0x32c>
 8016294:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016296:	1a7f      	subs	r7, r7, r1
 8016298:	2f08      	cmp	r7, #8
 801629a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801629e:	dc37      	bgt.n	8016310 <_strtod_l+0x338>
 80162a0:	45be      	cmp	lr, r7
 80162a2:	bfa8      	it	ge
 80162a4:	46be      	movge	lr, r7
 80162a6:	f1bc 0f00 	cmp.w	ip, #0
 80162aa:	d001      	beq.n	80162b0 <_strtod_l+0x2d8>
 80162ac:	f1ce 0e00 	rsb	lr, lr, #0
 80162b0:	2c00      	cmp	r4, #0
 80162b2:	d151      	bne.n	8016358 <_strtod_l+0x380>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	f47f aece 	bne.w	8016056 <_strtod_l+0x7e>
 80162ba:	9a06      	ldr	r2, [sp, #24]
 80162bc:	2a00      	cmp	r2, #0
 80162be:	f47f aeca 	bne.w	8016056 <_strtod_l+0x7e>
 80162c2:	9a04      	ldr	r2, [sp, #16]
 80162c4:	2a00      	cmp	r2, #0
 80162c6:	f47f aee4 	bne.w	8016092 <_strtod_l+0xba>
 80162ca:	2b4e      	cmp	r3, #78	; 0x4e
 80162cc:	d027      	beq.n	801631e <_strtod_l+0x346>
 80162ce:	dc21      	bgt.n	8016314 <_strtod_l+0x33c>
 80162d0:	2b49      	cmp	r3, #73	; 0x49
 80162d2:	f47f aede 	bne.w	8016092 <_strtod_l+0xba>
 80162d6:	49a0      	ldr	r1, [pc, #640]	; (8016558 <_strtod_l+0x580>)
 80162d8:	a81b      	add	r0, sp, #108	; 0x6c
 80162da:	f001 fdf7 	bl	8017ecc <__match>
 80162de:	2800      	cmp	r0, #0
 80162e0:	f43f aed7 	beq.w	8016092 <_strtod_l+0xba>
 80162e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162e6:	499d      	ldr	r1, [pc, #628]	; (801655c <_strtod_l+0x584>)
 80162e8:	3b01      	subs	r3, #1
 80162ea:	a81b      	add	r0, sp, #108	; 0x6c
 80162ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80162ee:	f001 fded 	bl	8017ecc <__match>
 80162f2:	b910      	cbnz	r0, 80162fa <_strtod_l+0x322>
 80162f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162f6:	3301      	adds	r3, #1
 80162f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80162fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016570 <_strtod_l+0x598>
 80162fe:	f04f 0a00 	mov.w	sl, #0
 8016302:	e6a8      	b.n	8016056 <_strtod_l+0x7e>
 8016304:	210a      	movs	r1, #10
 8016306:	fb01 3e0e 	mla	lr, r1, lr, r3
 801630a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801630e:	e7b8      	b.n	8016282 <_strtod_l+0x2aa>
 8016310:	46be      	mov	lr, r7
 8016312:	e7c8      	b.n	80162a6 <_strtod_l+0x2ce>
 8016314:	2b69      	cmp	r3, #105	; 0x69
 8016316:	d0de      	beq.n	80162d6 <_strtod_l+0x2fe>
 8016318:	2b6e      	cmp	r3, #110	; 0x6e
 801631a:	f47f aeba 	bne.w	8016092 <_strtod_l+0xba>
 801631e:	4990      	ldr	r1, [pc, #576]	; (8016560 <_strtod_l+0x588>)
 8016320:	a81b      	add	r0, sp, #108	; 0x6c
 8016322:	f001 fdd3 	bl	8017ecc <__match>
 8016326:	2800      	cmp	r0, #0
 8016328:	f43f aeb3 	beq.w	8016092 <_strtod_l+0xba>
 801632c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	2b28      	cmp	r3, #40	; 0x28
 8016332:	d10e      	bne.n	8016352 <_strtod_l+0x37a>
 8016334:	aa1e      	add	r2, sp, #120	; 0x78
 8016336:	498b      	ldr	r1, [pc, #556]	; (8016564 <_strtod_l+0x58c>)
 8016338:	a81b      	add	r0, sp, #108	; 0x6c
 801633a:	f001 fddb 	bl	8017ef4 <__hexnan>
 801633e:	2805      	cmp	r0, #5
 8016340:	d107      	bne.n	8016352 <_strtod_l+0x37a>
 8016342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016344:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016348:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801634c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016350:	e681      	b.n	8016056 <_strtod_l+0x7e>
 8016352:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016578 <_strtod_l+0x5a0>
 8016356:	e7d2      	b.n	80162fe <_strtod_l+0x326>
 8016358:	ebae 0302 	sub.w	r3, lr, r2
 801635c:	9306      	str	r3, [sp, #24]
 801635e:	9b05      	ldr	r3, [sp, #20]
 8016360:	9807      	ldr	r0, [sp, #28]
 8016362:	2b00      	cmp	r3, #0
 8016364:	bf08      	it	eq
 8016366:	4623      	moveq	r3, r4
 8016368:	2c10      	cmp	r4, #16
 801636a:	9305      	str	r3, [sp, #20]
 801636c:	46a0      	mov	r8, r4
 801636e:	bfa8      	it	ge
 8016370:	f04f 0810 	movge.w	r8, #16
 8016374:	f7ea f8de 	bl	8000534 <__aeabi_ui2d>
 8016378:	2c09      	cmp	r4, #9
 801637a:	4682      	mov	sl, r0
 801637c:	468b      	mov	fp, r1
 801637e:	dc13      	bgt.n	80163a8 <_strtod_l+0x3d0>
 8016380:	9b06      	ldr	r3, [sp, #24]
 8016382:	2b00      	cmp	r3, #0
 8016384:	f43f ae67 	beq.w	8016056 <_strtod_l+0x7e>
 8016388:	9b06      	ldr	r3, [sp, #24]
 801638a:	dd7a      	ble.n	8016482 <_strtod_l+0x4aa>
 801638c:	2b16      	cmp	r3, #22
 801638e:	dc61      	bgt.n	8016454 <_strtod_l+0x47c>
 8016390:	4a75      	ldr	r2, [pc, #468]	; (8016568 <_strtod_l+0x590>)
 8016392:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016396:	e9de 0100 	ldrd	r0, r1, [lr]
 801639a:	4652      	mov	r2, sl
 801639c:	465b      	mov	r3, fp
 801639e:	f7ea f943 	bl	8000628 <__aeabi_dmul>
 80163a2:	4682      	mov	sl, r0
 80163a4:	468b      	mov	fp, r1
 80163a6:	e656      	b.n	8016056 <_strtod_l+0x7e>
 80163a8:	4b6f      	ldr	r3, [pc, #444]	; (8016568 <_strtod_l+0x590>)
 80163aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80163ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80163b2:	f7ea f939 	bl	8000628 <__aeabi_dmul>
 80163b6:	4606      	mov	r6, r0
 80163b8:	4628      	mov	r0, r5
 80163ba:	460f      	mov	r7, r1
 80163bc:	f7ea f8ba 	bl	8000534 <__aeabi_ui2d>
 80163c0:	4602      	mov	r2, r0
 80163c2:	460b      	mov	r3, r1
 80163c4:	4630      	mov	r0, r6
 80163c6:	4639      	mov	r1, r7
 80163c8:	f7e9 ff78 	bl	80002bc <__adddf3>
 80163cc:	2c0f      	cmp	r4, #15
 80163ce:	4682      	mov	sl, r0
 80163d0:	468b      	mov	fp, r1
 80163d2:	ddd5      	ble.n	8016380 <_strtod_l+0x3a8>
 80163d4:	9b06      	ldr	r3, [sp, #24]
 80163d6:	eba4 0808 	sub.w	r8, r4, r8
 80163da:	4498      	add	r8, r3
 80163dc:	f1b8 0f00 	cmp.w	r8, #0
 80163e0:	f340 8096 	ble.w	8016510 <_strtod_l+0x538>
 80163e4:	f018 030f 	ands.w	r3, r8, #15
 80163e8:	d00a      	beq.n	8016400 <_strtod_l+0x428>
 80163ea:	495f      	ldr	r1, [pc, #380]	; (8016568 <_strtod_l+0x590>)
 80163ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80163f0:	4652      	mov	r2, sl
 80163f2:	465b      	mov	r3, fp
 80163f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163f8:	f7ea f916 	bl	8000628 <__aeabi_dmul>
 80163fc:	4682      	mov	sl, r0
 80163fe:	468b      	mov	fp, r1
 8016400:	f038 080f 	bics.w	r8, r8, #15
 8016404:	d073      	beq.n	80164ee <_strtod_l+0x516>
 8016406:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801640a:	dd47      	ble.n	801649c <_strtod_l+0x4c4>
 801640c:	2400      	movs	r4, #0
 801640e:	46a0      	mov	r8, r4
 8016410:	9407      	str	r4, [sp, #28]
 8016412:	9405      	str	r4, [sp, #20]
 8016414:	2322      	movs	r3, #34	; 0x22
 8016416:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016570 <_strtod_l+0x598>
 801641a:	f8c9 3000 	str.w	r3, [r9]
 801641e:	f04f 0a00 	mov.w	sl, #0
 8016422:	9b07      	ldr	r3, [sp, #28]
 8016424:	2b00      	cmp	r3, #0
 8016426:	f43f ae16 	beq.w	8016056 <_strtod_l+0x7e>
 801642a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801642c:	4648      	mov	r0, r9
 801642e:	f001 fe6c 	bl	801810a <_Bfree>
 8016432:	9905      	ldr	r1, [sp, #20]
 8016434:	4648      	mov	r0, r9
 8016436:	f001 fe68 	bl	801810a <_Bfree>
 801643a:	4641      	mov	r1, r8
 801643c:	4648      	mov	r0, r9
 801643e:	f001 fe64 	bl	801810a <_Bfree>
 8016442:	9907      	ldr	r1, [sp, #28]
 8016444:	4648      	mov	r0, r9
 8016446:	f001 fe60 	bl	801810a <_Bfree>
 801644a:	4621      	mov	r1, r4
 801644c:	4648      	mov	r0, r9
 801644e:	f001 fe5c 	bl	801810a <_Bfree>
 8016452:	e600      	b.n	8016056 <_strtod_l+0x7e>
 8016454:	9a06      	ldr	r2, [sp, #24]
 8016456:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801645a:	4293      	cmp	r3, r2
 801645c:	dbba      	blt.n	80163d4 <_strtod_l+0x3fc>
 801645e:	4d42      	ldr	r5, [pc, #264]	; (8016568 <_strtod_l+0x590>)
 8016460:	f1c4 040f 	rsb	r4, r4, #15
 8016464:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016468:	4652      	mov	r2, sl
 801646a:	465b      	mov	r3, fp
 801646c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016470:	f7ea f8da 	bl	8000628 <__aeabi_dmul>
 8016474:	9b06      	ldr	r3, [sp, #24]
 8016476:	1b1c      	subs	r4, r3, r4
 8016478:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801647c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016480:	e78d      	b.n	801639e <_strtod_l+0x3c6>
 8016482:	f113 0f16 	cmn.w	r3, #22
 8016486:	dba5      	blt.n	80163d4 <_strtod_l+0x3fc>
 8016488:	4a37      	ldr	r2, [pc, #220]	; (8016568 <_strtod_l+0x590>)
 801648a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801648e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016492:	4650      	mov	r0, sl
 8016494:	4659      	mov	r1, fp
 8016496:	f7ea f9f1 	bl	800087c <__aeabi_ddiv>
 801649a:	e782      	b.n	80163a2 <_strtod_l+0x3ca>
 801649c:	2300      	movs	r3, #0
 801649e:	4e33      	ldr	r6, [pc, #204]	; (801656c <_strtod_l+0x594>)
 80164a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80164a4:	4650      	mov	r0, sl
 80164a6:	4659      	mov	r1, fp
 80164a8:	461d      	mov	r5, r3
 80164aa:	f1b8 0f01 	cmp.w	r8, #1
 80164ae:	dc21      	bgt.n	80164f4 <_strtod_l+0x51c>
 80164b0:	b10b      	cbz	r3, 80164b6 <_strtod_l+0x4de>
 80164b2:	4682      	mov	sl, r0
 80164b4:	468b      	mov	fp, r1
 80164b6:	4b2d      	ldr	r3, [pc, #180]	; (801656c <_strtod_l+0x594>)
 80164b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80164bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80164c0:	4652      	mov	r2, sl
 80164c2:	465b      	mov	r3, fp
 80164c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80164c8:	f7ea f8ae 	bl	8000628 <__aeabi_dmul>
 80164cc:	4b28      	ldr	r3, [pc, #160]	; (8016570 <_strtod_l+0x598>)
 80164ce:	460a      	mov	r2, r1
 80164d0:	400b      	ands	r3, r1
 80164d2:	4928      	ldr	r1, [pc, #160]	; (8016574 <_strtod_l+0x59c>)
 80164d4:	428b      	cmp	r3, r1
 80164d6:	4682      	mov	sl, r0
 80164d8:	d898      	bhi.n	801640c <_strtod_l+0x434>
 80164da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80164de:	428b      	cmp	r3, r1
 80164e0:	bf86      	itte	hi
 80164e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801657c <_strtod_l+0x5a4>
 80164e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80164ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80164ee:	2300      	movs	r3, #0
 80164f0:	9304      	str	r3, [sp, #16]
 80164f2:	e077      	b.n	80165e4 <_strtod_l+0x60c>
 80164f4:	f018 0f01 	tst.w	r8, #1
 80164f8:	d006      	beq.n	8016508 <_strtod_l+0x530>
 80164fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80164fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016502:	f7ea f891 	bl	8000628 <__aeabi_dmul>
 8016506:	2301      	movs	r3, #1
 8016508:	3501      	adds	r5, #1
 801650a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801650e:	e7cc      	b.n	80164aa <_strtod_l+0x4d2>
 8016510:	d0ed      	beq.n	80164ee <_strtod_l+0x516>
 8016512:	f1c8 0800 	rsb	r8, r8, #0
 8016516:	f018 020f 	ands.w	r2, r8, #15
 801651a:	d00a      	beq.n	8016532 <_strtod_l+0x55a>
 801651c:	4b12      	ldr	r3, [pc, #72]	; (8016568 <_strtod_l+0x590>)
 801651e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016522:	4650      	mov	r0, sl
 8016524:	4659      	mov	r1, fp
 8016526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652a:	f7ea f9a7 	bl	800087c <__aeabi_ddiv>
 801652e:	4682      	mov	sl, r0
 8016530:	468b      	mov	fp, r1
 8016532:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016536:	d0da      	beq.n	80164ee <_strtod_l+0x516>
 8016538:	f1b8 0f1f 	cmp.w	r8, #31
 801653c:	dd20      	ble.n	8016580 <_strtod_l+0x5a8>
 801653e:	2400      	movs	r4, #0
 8016540:	46a0      	mov	r8, r4
 8016542:	9407      	str	r4, [sp, #28]
 8016544:	9405      	str	r4, [sp, #20]
 8016546:	2322      	movs	r3, #34	; 0x22
 8016548:	f04f 0a00 	mov.w	sl, #0
 801654c:	f04f 0b00 	mov.w	fp, #0
 8016550:	f8c9 3000 	str.w	r3, [r9]
 8016554:	e765      	b.n	8016422 <_strtod_l+0x44a>
 8016556:	bf00      	nop
 8016558:	08019c85 	.word	0x08019c85
 801655c:	08019d0b 	.word	0x08019d0b
 8016560:	08019c8d 	.word	0x08019c8d
 8016564:	08019ccc 	.word	0x08019ccc
 8016568:	08019d48 	.word	0x08019d48
 801656c:	08019d20 	.word	0x08019d20
 8016570:	7ff00000 	.word	0x7ff00000
 8016574:	7ca00000 	.word	0x7ca00000
 8016578:	fff80000 	.word	0xfff80000
 801657c:	7fefffff 	.word	0x7fefffff
 8016580:	f018 0310 	ands.w	r3, r8, #16
 8016584:	bf18      	it	ne
 8016586:	236a      	movne	r3, #106	; 0x6a
 8016588:	4da0      	ldr	r5, [pc, #640]	; (801680c <_strtod_l+0x834>)
 801658a:	9304      	str	r3, [sp, #16]
 801658c:	4650      	mov	r0, sl
 801658e:	4659      	mov	r1, fp
 8016590:	2300      	movs	r3, #0
 8016592:	f1b8 0f00 	cmp.w	r8, #0
 8016596:	f300 810a 	bgt.w	80167ae <_strtod_l+0x7d6>
 801659a:	b10b      	cbz	r3, 80165a0 <_strtod_l+0x5c8>
 801659c:	4682      	mov	sl, r0
 801659e:	468b      	mov	fp, r1
 80165a0:	9b04      	ldr	r3, [sp, #16]
 80165a2:	b1bb      	cbz	r3, 80165d4 <_strtod_l+0x5fc>
 80165a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80165a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	4659      	mov	r1, fp
 80165b0:	dd10      	ble.n	80165d4 <_strtod_l+0x5fc>
 80165b2:	2b1f      	cmp	r3, #31
 80165b4:	f340 8107 	ble.w	80167c6 <_strtod_l+0x7ee>
 80165b8:	2b34      	cmp	r3, #52	; 0x34
 80165ba:	bfde      	ittt	le
 80165bc:	3b20      	suble	r3, #32
 80165be:	f04f 32ff 	movle.w	r2, #4294967295
 80165c2:	fa02 f303 	lslle.w	r3, r2, r3
 80165c6:	f04f 0a00 	mov.w	sl, #0
 80165ca:	bfcc      	ite	gt
 80165cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80165d0:	ea03 0b01 	andle.w	fp, r3, r1
 80165d4:	2200      	movs	r2, #0
 80165d6:	2300      	movs	r3, #0
 80165d8:	4650      	mov	r0, sl
 80165da:	4659      	mov	r1, fp
 80165dc:	f7ea fa8c 	bl	8000af8 <__aeabi_dcmpeq>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d1ac      	bne.n	801653e <_strtod_l+0x566>
 80165e4:	9b07      	ldr	r3, [sp, #28]
 80165e6:	9300      	str	r3, [sp, #0]
 80165e8:	9a05      	ldr	r2, [sp, #20]
 80165ea:	9908      	ldr	r1, [sp, #32]
 80165ec:	4623      	mov	r3, r4
 80165ee:	4648      	mov	r0, r9
 80165f0:	f001 fddd 	bl	80181ae <__s2b>
 80165f4:	9007      	str	r0, [sp, #28]
 80165f6:	2800      	cmp	r0, #0
 80165f8:	f43f af08 	beq.w	801640c <_strtod_l+0x434>
 80165fc:	9a06      	ldr	r2, [sp, #24]
 80165fe:	9b06      	ldr	r3, [sp, #24]
 8016600:	2a00      	cmp	r2, #0
 8016602:	f1c3 0300 	rsb	r3, r3, #0
 8016606:	bfa8      	it	ge
 8016608:	2300      	movge	r3, #0
 801660a:	930e      	str	r3, [sp, #56]	; 0x38
 801660c:	2400      	movs	r4, #0
 801660e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016612:	9316      	str	r3, [sp, #88]	; 0x58
 8016614:	46a0      	mov	r8, r4
 8016616:	9b07      	ldr	r3, [sp, #28]
 8016618:	4648      	mov	r0, r9
 801661a:	6859      	ldr	r1, [r3, #4]
 801661c:	f001 fd41 	bl	80180a2 <_Balloc>
 8016620:	9005      	str	r0, [sp, #20]
 8016622:	2800      	cmp	r0, #0
 8016624:	f43f aef6 	beq.w	8016414 <_strtod_l+0x43c>
 8016628:	9b07      	ldr	r3, [sp, #28]
 801662a:	691a      	ldr	r2, [r3, #16]
 801662c:	3202      	adds	r2, #2
 801662e:	f103 010c 	add.w	r1, r3, #12
 8016632:	0092      	lsls	r2, r2, #2
 8016634:	300c      	adds	r0, #12
 8016636:	f001 fd29 	bl	801808c <memcpy>
 801663a:	aa1e      	add	r2, sp, #120	; 0x78
 801663c:	a91d      	add	r1, sp, #116	; 0x74
 801663e:	ec4b ab10 	vmov	d0, sl, fp
 8016642:	4648      	mov	r0, r9
 8016644:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016648:	f002 f86c 	bl	8018724 <__d2b>
 801664c:	901c      	str	r0, [sp, #112]	; 0x70
 801664e:	2800      	cmp	r0, #0
 8016650:	f43f aee0 	beq.w	8016414 <_strtod_l+0x43c>
 8016654:	2101      	movs	r1, #1
 8016656:	4648      	mov	r0, r9
 8016658:	f001 fe35 	bl	80182c6 <__i2b>
 801665c:	4680      	mov	r8, r0
 801665e:	2800      	cmp	r0, #0
 8016660:	f43f aed8 	beq.w	8016414 <_strtod_l+0x43c>
 8016664:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016666:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016668:	2e00      	cmp	r6, #0
 801666a:	bfab      	itete	ge
 801666c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801666e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016670:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016672:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016674:	bfac      	ite	ge
 8016676:	18f7      	addge	r7, r6, r3
 8016678:	1b9d      	sublt	r5, r3, r6
 801667a:	9b04      	ldr	r3, [sp, #16]
 801667c:	1af6      	subs	r6, r6, r3
 801667e:	4416      	add	r6, r2
 8016680:	4b63      	ldr	r3, [pc, #396]	; (8016810 <_strtod_l+0x838>)
 8016682:	3e01      	subs	r6, #1
 8016684:	429e      	cmp	r6, r3
 8016686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801668a:	f280 80af 	bge.w	80167ec <_strtod_l+0x814>
 801668e:	1b9b      	subs	r3, r3, r6
 8016690:	2b1f      	cmp	r3, #31
 8016692:	eba2 0203 	sub.w	r2, r2, r3
 8016696:	f04f 0101 	mov.w	r1, #1
 801669a:	f300 809b 	bgt.w	80167d4 <_strtod_l+0x7fc>
 801669e:	fa01 f303 	lsl.w	r3, r1, r3
 80166a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80166a4:	2300      	movs	r3, #0
 80166a6:	930a      	str	r3, [sp, #40]	; 0x28
 80166a8:	18be      	adds	r6, r7, r2
 80166aa:	9b04      	ldr	r3, [sp, #16]
 80166ac:	42b7      	cmp	r7, r6
 80166ae:	4415      	add	r5, r2
 80166b0:	441d      	add	r5, r3
 80166b2:	463b      	mov	r3, r7
 80166b4:	bfa8      	it	ge
 80166b6:	4633      	movge	r3, r6
 80166b8:	42ab      	cmp	r3, r5
 80166ba:	bfa8      	it	ge
 80166bc:	462b      	movge	r3, r5
 80166be:	2b00      	cmp	r3, #0
 80166c0:	bfc2      	ittt	gt
 80166c2:	1af6      	subgt	r6, r6, r3
 80166c4:	1aed      	subgt	r5, r5, r3
 80166c6:	1aff      	subgt	r7, r7, r3
 80166c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166ca:	b1bb      	cbz	r3, 80166fc <_strtod_l+0x724>
 80166cc:	4641      	mov	r1, r8
 80166ce:	461a      	mov	r2, r3
 80166d0:	4648      	mov	r0, r9
 80166d2:	f001 fe97 	bl	8018404 <__pow5mult>
 80166d6:	4680      	mov	r8, r0
 80166d8:	2800      	cmp	r0, #0
 80166da:	f43f ae9b 	beq.w	8016414 <_strtod_l+0x43c>
 80166de:	4601      	mov	r1, r0
 80166e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80166e2:	4648      	mov	r0, r9
 80166e4:	f001 fdf8 	bl	80182d8 <__multiply>
 80166e8:	900c      	str	r0, [sp, #48]	; 0x30
 80166ea:	2800      	cmp	r0, #0
 80166ec:	f43f ae92 	beq.w	8016414 <_strtod_l+0x43c>
 80166f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166f2:	4648      	mov	r0, r9
 80166f4:	f001 fd09 	bl	801810a <_Bfree>
 80166f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166fa:	931c      	str	r3, [sp, #112]	; 0x70
 80166fc:	2e00      	cmp	r6, #0
 80166fe:	dc7a      	bgt.n	80167f6 <_strtod_l+0x81e>
 8016700:	9b06      	ldr	r3, [sp, #24]
 8016702:	2b00      	cmp	r3, #0
 8016704:	dd08      	ble.n	8016718 <_strtod_l+0x740>
 8016706:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016708:	9905      	ldr	r1, [sp, #20]
 801670a:	4648      	mov	r0, r9
 801670c:	f001 fe7a 	bl	8018404 <__pow5mult>
 8016710:	9005      	str	r0, [sp, #20]
 8016712:	2800      	cmp	r0, #0
 8016714:	f43f ae7e 	beq.w	8016414 <_strtod_l+0x43c>
 8016718:	2d00      	cmp	r5, #0
 801671a:	dd08      	ble.n	801672e <_strtod_l+0x756>
 801671c:	462a      	mov	r2, r5
 801671e:	9905      	ldr	r1, [sp, #20]
 8016720:	4648      	mov	r0, r9
 8016722:	f001 febd 	bl	80184a0 <__lshift>
 8016726:	9005      	str	r0, [sp, #20]
 8016728:	2800      	cmp	r0, #0
 801672a:	f43f ae73 	beq.w	8016414 <_strtod_l+0x43c>
 801672e:	2f00      	cmp	r7, #0
 8016730:	dd08      	ble.n	8016744 <_strtod_l+0x76c>
 8016732:	4641      	mov	r1, r8
 8016734:	463a      	mov	r2, r7
 8016736:	4648      	mov	r0, r9
 8016738:	f001 feb2 	bl	80184a0 <__lshift>
 801673c:	4680      	mov	r8, r0
 801673e:	2800      	cmp	r0, #0
 8016740:	f43f ae68 	beq.w	8016414 <_strtod_l+0x43c>
 8016744:	9a05      	ldr	r2, [sp, #20]
 8016746:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016748:	4648      	mov	r0, r9
 801674a:	f001 ff17 	bl	801857c <__mdiff>
 801674e:	4604      	mov	r4, r0
 8016750:	2800      	cmp	r0, #0
 8016752:	f43f ae5f 	beq.w	8016414 <_strtod_l+0x43c>
 8016756:	68c3      	ldr	r3, [r0, #12]
 8016758:	930c      	str	r3, [sp, #48]	; 0x30
 801675a:	2300      	movs	r3, #0
 801675c:	60c3      	str	r3, [r0, #12]
 801675e:	4641      	mov	r1, r8
 8016760:	f001 fef2 	bl	8018548 <__mcmp>
 8016764:	2800      	cmp	r0, #0
 8016766:	da55      	bge.n	8016814 <_strtod_l+0x83c>
 8016768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801676a:	b9e3      	cbnz	r3, 80167a6 <_strtod_l+0x7ce>
 801676c:	f1ba 0f00 	cmp.w	sl, #0
 8016770:	d119      	bne.n	80167a6 <_strtod_l+0x7ce>
 8016772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016776:	b9b3      	cbnz	r3, 80167a6 <_strtod_l+0x7ce>
 8016778:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801677c:	0d1b      	lsrs	r3, r3, #20
 801677e:	051b      	lsls	r3, r3, #20
 8016780:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016784:	d90f      	bls.n	80167a6 <_strtod_l+0x7ce>
 8016786:	6963      	ldr	r3, [r4, #20]
 8016788:	b913      	cbnz	r3, 8016790 <_strtod_l+0x7b8>
 801678a:	6923      	ldr	r3, [r4, #16]
 801678c:	2b01      	cmp	r3, #1
 801678e:	dd0a      	ble.n	80167a6 <_strtod_l+0x7ce>
 8016790:	4621      	mov	r1, r4
 8016792:	2201      	movs	r2, #1
 8016794:	4648      	mov	r0, r9
 8016796:	f001 fe83 	bl	80184a0 <__lshift>
 801679a:	4641      	mov	r1, r8
 801679c:	4604      	mov	r4, r0
 801679e:	f001 fed3 	bl	8018548 <__mcmp>
 80167a2:	2800      	cmp	r0, #0
 80167a4:	dc67      	bgt.n	8016876 <_strtod_l+0x89e>
 80167a6:	9b04      	ldr	r3, [sp, #16]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d171      	bne.n	8016890 <_strtod_l+0x8b8>
 80167ac:	e63d      	b.n	801642a <_strtod_l+0x452>
 80167ae:	f018 0f01 	tst.w	r8, #1
 80167b2:	d004      	beq.n	80167be <_strtod_l+0x7e6>
 80167b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80167b8:	f7e9 ff36 	bl	8000628 <__aeabi_dmul>
 80167bc:	2301      	movs	r3, #1
 80167be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80167c2:	3508      	adds	r5, #8
 80167c4:	e6e5      	b.n	8016592 <_strtod_l+0x5ba>
 80167c6:	f04f 32ff 	mov.w	r2, #4294967295
 80167ca:	fa02 f303 	lsl.w	r3, r2, r3
 80167ce:	ea03 0a0a 	and.w	sl, r3, sl
 80167d2:	e6ff      	b.n	80165d4 <_strtod_l+0x5fc>
 80167d4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80167d8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80167dc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80167e0:	36e2      	adds	r6, #226	; 0xe2
 80167e2:	fa01 f306 	lsl.w	r3, r1, r6
 80167e6:	930a      	str	r3, [sp, #40]	; 0x28
 80167e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80167ea:	e75d      	b.n	80166a8 <_strtod_l+0x6d0>
 80167ec:	2300      	movs	r3, #0
 80167ee:	930a      	str	r3, [sp, #40]	; 0x28
 80167f0:	2301      	movs	r3, #1
 80167f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80167f4:	e758      	b.n	80166a8 <_strtod_l+0x6d0>
 80167f6:	4632      	mov	r2, r6
 80167f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167fa:	4648      	mov	r0, r9
 80167fc:	f001 fe50 	bl	80184a0 <__lshift>
 8016800:	901c      	str	r0, [sp, #112]	; 0x70
 8016802:	2800      	cmp	r0, #0
 8016804:	f47f af7c 	bne.w	8016700 <_strtod_l+0x728>
 8016808:	e604      	b.n	8016414 <_strtod_l+0x43c>
 801680a:	bf00      	nop
 801680c:	08019ce0 	.word	0x08019ce0
 8016810:	fffffc02 	.word	0xfffffc02
 8016814:	465d      	mov	r5, fp
 8016816:	f040 8086 	bne.w	8016926 <_strtod_l+0x94e>
 801681a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801681c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016820:	b32a      	cbz	r2, 801686e <_strtod_l+0x896>
 8016822:	4aaf      	ldr	r2, [pc, #700]	; (8016ae0 <_strtod_l+0xb08>)
 8016824:	4293      	cmp	r3, r2
 8016826:	d153      	bne.n	80168d0 <_strtod_l+0x8f8>
 8016828:	9b04      	ldr	r3, [sp, #16]
 801682a:	4650      	mov	r0, sl
 801682c:	b1d3      	cbz	r3, 8016864 <_strtod_l+0x88c>
 801682e:	4aad      	ldr	r2, [pc, #692]	; (8016ae4 <_strtod_l+0xb0c>)
 8016830:	402a      	ands	r2, r5
 8016832:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016836:	f04f 31ff 	mov.w	r1, #4294967295
 801683a:	d816      	bhi.n	801686a <_strtod_l+0x892>
 801683c:	0d12      	lsrs	r2, r2, #20
 801683e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016842:	fa01 f303 	lsl.w	r3, r1, r3
 8016846:	4298      	cmp	r0, r3
 8016848:	d142      	bne.n	80168d0 <_strtod_l+0x8f8>
 801684a:	4ba7      	ldr	r3, [pc, #668]	; (8016ae8 <_strtod_l+0xb10>)
 801684c:	429d      	cmp	r5, r3
 801684e:	d102      	bne.n	8016856 <_strtod_l+0x87e>
 8016850:	3001      	adds	r0, #1
 8016852:	f43f addf 	beq.w	8016414 <_strtod_l+0x43c>
 8016856:	4ba3      	ldr	r3, [pc, #652]	; (8016ae4 <_strtod_l+0xb0c>)
 8016858:	402b      	ands	r3, r5
 801685a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801685e:	f04f 0a00 	mov.w	sl, #0
 8016862:	e7a0      	b.n	80167a6 <_strtod_l+0x7ce>
 8016864:	f04f 33ff 	mov.w	r3, #4294967295
 8016868:	e7ed      	b.n	8016846 <_strtod_l+0x86e>
 801686a:	460b      	mov	r3, r1
 801686c:	e7eb      	b.n	8016846 <_strtod_l+0x86e>
 801686e:	bb7b      	cbnz	r3, 80168d0 <_strtod_l+0x8f8>
 8016870:	f1ba 0f00 	cmp.w	sl, #0
 8016874:	d12c      	bne.n	80168d0 <_strtod_l+0x8f8>
 8016876:	9904      	ldr	r1, [sp, #16]
 8016878:	4a9a      	ldr	r2, [pc, #616]	; (8016ae4 <_strtod_l+0xb0c>)
 801687a:	465b      	mov	r3, fp
 801687c:	b1f1      	cbz	r1, 80168bc <_strtod_l+0x8e4>
 801687e:	ea02 010b 	and.w	r1, r2, fp
 8016882:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016886:	dc19      	bgt.n	80168bc <_strtod_l+0x8e4>
 8016888:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801688c:	f77f ae5b 	ble.w	8016546 <_strtod_l+0x56e>
 8016890:	4a96      	ldr	r2, [pc, #600]	; (8016aec <_strtod_l+0xb14>)
 8016892:	2300      	movs	r3, #0
 8016894:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016898:	4650      	mov	r0, sl
 801689a:	4659      	mov	r1, fp
 801689c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80168a0:	f7e9 fec2 	bl	8000628 <__aeabi_dmul>
 80168a4:	4682      	mov	sl, r0
 80168a6:	468b      	mov	fp, r1
 80168a8:	2900      	cmp	r1, #0
 80168aa:	f47f adbe 	bne.w	801642a <_strtod_l+0x452>
 80168ae:	2800      	cmp	r0, #0
 80168b0:	f47f adbb 	bne.w	801642a <_strtod_l+0x452>
 80168b4:	2322      	movs	r3, #34	; 0x22
 80168b6:	f8c9 3000 	str.w	r3, [r9]
 80168ba:	e5b6      	b.n	801642a <_strtod_l+0x452>
 80168bc:	4013      	ands	r3, r2
 80168be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80168c2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80168c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80168ca:	f04f 3aff 	mov.w	sl, #4294967295
 80168ce:	e76a      	b.n	80167a6 <_strtod_l+0x7ce>
 80168d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168d2:	b193      	cbz	r3, 80168fa <_strtod_l+0x922>
 80168d4:	422b      	tst	r3, r5
 80168d6:	f43f af66 	beq.w	80167a6 <_strtod_l+0x7ce>
 80168da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168dc:	9a04      	ldr	r2, [sp, #16]
 80168de:	4650      	mov	r0, sl
 80168e0:	4659      	mov	r1, fp
 80168e2:	b173      	cbz	r3, 8016902 <_strtod_l+0x92a>
 80168e4:	f7ff fb5c 	bl	8015fa0 <sulp>
 80168e8:	4602      	mov	r2, r0
 80168ea:	460b      	mov	r3, r1
 80168ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168f0:	f7e9 fce4 	bl	80002bc <__adddf3>
 80168f4:	4682      	mov	sl, r0
 80168f6:	468b      	mov	fp, r1
 80168f8:	e755      	b.n	80167a6 <_strtod_l+0x7ce>
 80168fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168fc:	ea13 0f0a 	tst.w	r3, sl
 8016900:	e7e9      	b.n	80168d6 <_strtod_l+0x8fe>
 8016902:	f7ff fb4d 	bl	8015fa0 <sulp>
 8016906:	4602      	mov	r2, r0
 8016908:	460b      	mov	r3, r1
 801690a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801690e:	f7e9 fcd3 	bl	80002b8 <__aeabi_dsub>
 8016912:	2200      	movs	r2, #0
 8016914:	2300      	movs	r3, #0
 8016916:	4682      	mov	sl, r0
 8016918:	468b      	mov	fp, r1
 801691a:	f7ea f8ed 	bl	8000af8 <__aeabi_dcmpeq>
 801691e:	2800      	cmp	r0, #0
 8016920:	f47f ae11 	bne.w	8016546 <_strtod_l+0x56e>
 8016924:	e73f      	b.n	80167a6 <_strtod_l+0x7ce>
 8016926:	4641      	mov	r1, r8
 8016928:	4620      	mov	r0, r4
 801692a:	f001 ff4a 	bl	80187c2 <__ratio>
 801692e:	ec57 6b10 	vmov	r6, r7, d0
 8016932:	2200      	movs	r2, #0
 8016934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016938:	ee10 0a10 	vmov	r0, s0
 801693c:	4639      	mov	r1, r7
 801693e:	f7ea f8ef 	bl	8000b20 <__aeabi_dcmple>
 8016942:	2800      	cmp	r0, #0
 8016944:	d077      	beq.n	8016a36 <_strtod_l+0xa5e>
 8016946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016948:	2b00      	cmp	r3, #0
 801694a:	d04a      	beq.n	80169e2 <_strtod_l+0xa0a>
 801694c:	4b68      	ldr	r3, [pc, #416]	; (8016af0 <_strtod_l+0xb18>)
 801694e:	2200      	movs	r2, #0
 8016950:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016954:	4f66      	ldr	r7, [pc, #408]	; (8016af0 <_strtod_l+0xb18>)
 8016956:	2600      	movs	r6, #0
 8016958:	4b62      	ldr	r3, [pc, #392]	; (8016ae4 <_strtod_l+0xb0c>)
 801695a:	402b      	ands	r3, r5
 801695c:	930f      	str	r3, [sp, #60]	; 0x3c
 801695e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016960:	4b64      	ldr	r3, [pc, #400]	; (8016af4 <_strtod_l+0xb1c>)
 8016962:	429a      	cmp	r2, r3
 8016964:	f040 80ce 	bne.w	8016b04 <_strtod_l+0xb2c>
 8016968:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801696c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016970:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016974:	ec4b ab10 	vmov	d0, sl, fp
 8016978:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801697c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016980:	f001 fe5a 	bl	8018638 <__ulp>
 8016984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016988:	ec53 2b10 	vmov	r2, r3, d0
 801698c:	f7e9 fe4c 	bl	8000628 <__aeabi_dmul>
 8016990:	4652      	mov	r2, sl
 8016992:	465b      	mov	r3, fp
 8016994:	f7e9 fc92 	bl	80002bc <__adddf3>
 8016998:	460b      	mov	r3, r1
 801699a:	4952      	ldr	r1, [pc, #328]	; (8016ae4 <_strtod_l+0xb0c>)
 801699c:	4a56      	ldr	r2, [pc, #344]	; (8016af8 <_strtod_l+0xb20>)
 801699e:	4019      	ands	r1, r3
 80169a0:	4291      	cmp	r1, r2
 80169a2:	4682      	mov	sl, r0
 80169a4:	d95b      	bls.n	8016a5e <_strtod_l+0xa86>
 80169a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d103      	bne.n	80169b8 <_strtod_l+0x9e0>
 80169b0:	9b08      	ldr	r3, [sp, #32]
 80169b2:	3301      	adds	r3, #1
 80169b4:	f43f ad2e 	beq.w	8016414 <_strtod_l+0x43c>
 80169b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016ae8 <_strtod_l+0xb10>
 80169bc:	f04f 3aff 	mov.w	sl, #4294967295
 80169c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80169c2:	4648      	mov	r0, r9
 80169c4:	f001 fba1 	bl	801810a <_Bfree>
 80169c8:	9905      	ldr	r1, [sp, #20]
 80169ca:	4648      	mov	r0, r9
 80169cc:	f001 fb9d 	bl	801810a <_Bfree>
 80169d0:	4641      	mov	r1, r8
 80169d2:	4648      	mov	r0, r9
 80169d4:	f001 fb99 	bl	801810a <_Bfree>
 80169d8:	4621      	mov	r1, r4
 80169da:	4648      	mov	r0, r9
 80169dc:	f001 fb95 	bl	801810a <_Bfree>
 80169e0:	e619      	b.n	8016616 <_strtod_l+0x63e>
 80169e2:	f1ba 0f00 	cmp.w	sl, #0
 80169e6:	d11a      	bne.n	8016a1e <_strtod_l+0xa46>
 80169e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169ec:	b9eb      	cbnz	r3, 8016a2a <_strtod_l+0xa52>
 80169ee:	2200      	movs	r2, #0
 80169f0:	4b3f      	ldr	r3, [pc, #252]	; (8016af0 <_strtod_l+0xb18>)
 80169f2:	4630      	mov	r0, r6
 80169f4:	4639      	mov	r1, r7
 80169f6:	f7ea f889 	bl	8000b0c <__aeabi_dcmplt>
 80169fa:	b9c8      	cbnz	r0, 8016a30 <_strtod_l+0xa58>
 80169fc:	4630      	mov	r0, r6
 80169fe:	4639      	mov	r1, r7
 8016a00:	2200      	movs	r2, #0
 8016a02:	4b3e      	ldr	r3, [pc, #248]	; (8016afc <_strtod_l+0xb24>)
 8016a04:	f7e9 fe10 	bl	8000628 <__aeabi_dmul>
 8016a08:	4606      	mov	r6, r0
 8016a0a:	460f      	mov	r7, r1
 8016a0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016a10:	9618      	str	r6, [sp, #96]	; 0x60
 8016a12:	9319      	str	r3, [sp, #100]	; 0x64
 8016a14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016a18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a1c:	e79c      	b.n	8016958 <_strtod_l+0x980>
 8016a1e:	f1ba 0f01 	cmp.w	sl, #1
 8016a22:	d102      	bne.n	8016a2a <_strtod_l+0xa52>
 8016a24:	2d00      	cmp	r5, #0
 8016a26:	f43f ad8e 	beq.w	8016546 <_strtod_l+0x56e>
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	4b34      	ldr	r3, [pc, #208]	; (8016b00 <_strtod_l+0xb28>)
 8016a2e:	e78f      	b.n	8016950 <_strtod_l+0x978>
 8016a30:	2600      	movs	r6, #0
 8016a32:	4f32      	ldr	r7, [pc, #200]	; (8016afc <_strtod_l+0xb24>)
 8016a34:	e7ea      	b.n	8016a0c <_strtod_l+0xa34>
 8016a36:	4b31      	ldr	r3, [pc, #196]	; (8016afc <_strtod_l+0xb24>)
 8016a38:	4630      	mov	r0, r6
 8016a3a:	4639      	mov	r1, r7
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	f7e9 fdf3 	bl	8000628 <__aeabi_dmul>
 8016a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a44:	4606      	mov	r6, r0
 8016a46:	460f      	mov	r7, r1
 8016a48:	b933      	cbnz	r3, 8016a58 <_strtod_l+0xa80>
 8016a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a4e:	9010      	str	r0, [sp, #64]	; 0x40
 8016a50:	9311      	str	r3, [sp, #68]	; 0x44
 8016a52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016a56:	e7df      	b.n	8016a18 <_strtod_l+0xa40>
 8016a58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016a5c:	e7f9      	b.n	8016a52 <_strtod_l+0xa7a>
 8016a5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016a62:	9b04      	ldr	r3, [sp, #16]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d1ab      	bne.n	80169c0 <_strtod_l+0x9e8>
 8016a68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a6c:	0d1b      	lsrs	r3, r3, #20
 8016a6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a70:	051b      	lsls	r3, r3, #20
 8016a72:	429a      	cmp	r2, r3
 8016a74:	465d      	mov	r5, fp
 8016a76:	d1a3      	bne.n	80169c0 <_strtod_l+0x9e8>
 8016a78:	4639      	mov	r1, r7
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	f7ea f884 	bl	8000b88 <__aeabi_d2iz>
 8016a80:	f7e9 fd68 	bl	8000554 <__aeabi_i2d>
 8016a84:	460b      	mov	r3, r1
 8016a86:	4602      	mov	r2, r0
 8016a88:	4639      	mov	r1, r7
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	f7e9 fc14 	bl	80002b8 <__aeabi_dsub>
 8016a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a92:	4606      	mov	r6, r0
 8016a94:	460f      	mov	r7, r1
 8016a96:	b933      	cbnz	r3, 8016aa6 <_strtod_l+0xace>
 8016a98:	f1ba 0f00 	cmp.w	sl, #0
 8016a9c:	d103      	bne.n	8016aa6 <_strtod_l+0xace>
 8016a9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016aa2:	2d00      	cmp	r5, #0
 8016aa4:	d06d      	beq.n	8016b82 <_strtod_l+0xbaa>
 8016aa6:	a30a      	add	r3, pc, #40	; (adr r3, 8016ad0 <_strtod_l+0xaf8>)
 8016aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aac:	4630      	mov	r0, r6
 8016aae:	4639      	mov	r1, r7
 8016ab0:	f7ea f82c 	bl	8000b0c <__aeabi_dcmplt>
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	f47f acb8 	bne.w	801642a <_strtod_l+0x452>
 8016aba:	a307      	add	r3, pc, #28	; (adr r3, 8016ad8 <_strtod_l+0xb00>)
 8016abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac0:	4630      	mov	r0, r6
 8016ac2:	4639      	mov	r1, r7
 8016ac4:	f7ea f840 	bl	8000b48 <__aeabi_dcmpgt>
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	f43f af79 	beq.w	80169c0 <_strtod_l+0x9e8>
 8016ace:	e4ac      	b.n	801642a <_strtod_l+0x452>
 8016ad0:	94a03595 	.word	0x94a03595
 8016ad4:	3fdfffff 	.word	0x3fdfffff
 8016ad8:	35afe535 	.word	0x35afe535
 8016adc:	3fe00000 	.word	0x3fe00000
 8016ae0:	000fffff 	.word	0x000fffff
 8016ae4:	7ff00000 	.word	0x7ff00000
 8016ae8:	7fefffff 	.word	0x7fefffff
 8016aec:	39500000 	.word	0x39500000
 8016af0:	3ff00000 	.word	0x3ff00000
 8016af4:	7fe00000 	.word	0x7fe00000
 8016af8:	7c9fffff 	.word	0x7c9fffff
 8016afc:	3fe00000 	.word	0x3fe00000
 8016b00:	bff00000 	.word	0xbff00000
 8016b04:	9b04      	ldr	r3, [sp, #16]
 8016b06:	b333      	cbz	r3, 8016b56 <_strtod_l+0xb7e>
 8016b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016b0e:	d822      	bhi.n	8016b56 <_strtod_l+0xb7e>
 8016b10:	a327      	add	r3, pc, #156	; (adr r3, 8016bb0 <_strtod_l+0xbd8>)
 8016b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b16:	4630      	mov	r0, r6
 8016b18:	4639      	mov	r1, r7
 8016b1a:	f7ea f801 	bl	8000b20 <__aeabi_dcmple>
 8016b1e:	b1a0      	cbz	r0, 8016b4a <_strtod_l+0xb72>
 8016b20:	4639      	mov	r1, r7
 8016b22:	4630      	mov	r0, r6
 8016b24:	f7ea f858 	bl	8000bd8 <__aeabi_d2uiz>
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	bf08      	it	eq
 8016b2c:	2001      	moveq	r0, #1
 8016b2e:	f7e9 fd01 	bl	8000534 <__aeabi_ui2d>
 8016b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b34:	4606      	mov	r6, r0
 8016b36:	460f      	mov	r7, r1
 8016b38:	bb03      	cbnz	r3, 8016b7c <_strtod_l+0xba4>
 8016b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b3e:	9012      	str	r0, [sp, #72]	; 0x48
 8016b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016b46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b4e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016b52:	1a9b      	subs	r3, r3, r2
 8016b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b56:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016b5a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016b5e:	f001 fd6b 	bl	8018638 <__ulp>
 8016b62:	4650      	mov	r0, sl
 8016b64:	ec53 2b10 	vmov	r2, r3, d0
 8016b68:	4659      	mov	r1, fp
 8016b6a:	f7e9 fd5d 	bl	8000628 <__aeabi_dmul>
 8016b6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016b72:	f7e9 fba3 	bl	80002bc <__adddf3>
 8016b76:	4682      	mov	sl, r0
 8016b78:	468b      	mov	fp, r1
 8016b7a:	e772      	b.n	8016a62 <_strtod_l+0xa8a>
 8016b7c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016b80:	e7df      	b.n	8016b42 <_strtod_l+0xb6a>
 8016b82:	a30d      	add	r3, pc, #52	; (adr r3, 8016bb8 <_strtod_l+0xbe0>)
 8016b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b88:	f7e9 ffc0 	bl	8000b0c <__aeabi_dcmplt>
 8016b8c:	e79c      	b.n	8016ac8 <_strtod_l+0xaf0>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	930d      	str	r3, [sp, #52]	; 0x34
 8016b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b96:	6013      	str	r3, [r2, #0]
 8016b98:	f7ff ba61 	b.w	801605e <_strtod_l+0x86>
 8016b9c:	2b65      	cmp	r3, #101	; 0x65
 8016b9e:	f04f 0200 	mov.w	r2, #0
 8016ba2:	f43f ab4e 	beq.w	8016242 <_strtod_l+0x26a>
 8016ba6:	2101      	movs	r1, #1
 8016ba8:	4614      	mov	r4, r2
 8016baa:	9104      	str	r1, [sp, #16]
 8016bac:	f7ff bacb 	b.w	8016146 <_strtod_l+0x16e>
 8016bb0:	ffc00000 	.word	0xffc00000
 8016bb4:	41dfffff 	.word	0x41dfffff
 8016bb8:	94a03595 	.word	0x94a03595
 8016bbc:	3fcfffff 	.word	0x3fcfffff

08016bc0 <_strtod_r>:
 8016bc0:	4b05      	ldr	r3, [pc, #20]	; (8016bd8 <_strtod_r+0x18>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	b410      	push	{r4}
 8016bc6:	6a1b      	ldr	r3, [r3, #32]
 8016bc8:	4c04      	ldr	r4, [pc, #16]	; (8016bdc <_strtod_r+0x1c>)
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	bf08      	it	eq
 8016bce:	4623      	moveq	r3, r4
 8016bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bd4:	f7ff ba00 	b.w	8015fd8 <_strtod_l>
 8016bd8:	2000000c 	.word	0x2000000c
 8016bdc:	20000070 	.word	0x20000070

08016be0 <_strtol_l.isra.0>:
 8016be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016be4:	4680      	mov	r8, r0
 8016be6:	4689      	mov	r9, r1
 8016be8:	4692      	mov	sl, r2
 8016bea:	461e      	mov	r6, r3
 8016bec:	460f      	mov	r7, r1
 8016bee:	463d      	mov	r5, r7
 8016bf0:	9808      	ldr	r0, [sp, #32]
 8016bf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bf6:	f001 fa0d 	bl	8018014 <__locale_ctype_ptr_l>
 8016bfa:	4420      	add	r0, r4
 8016bfc:	7843      	ldrb	r3, [r0, #1]
 8016bfe:	f013 0308 	ands.w	r3, r3, #8
 8016c02:	d132      	bne.n	8016c6a <_strtol_l.isra.0+0x8a>
 8016c04:	2c2d      	cmp	r4, #45	; 0x2d
 8016c06:	d132      	bne.n	8016c6e <_strtol_l.isra.0+0x8e>
 8016c08:	787c      	ldrb	r4, [r7, #1]
 8016c0a:	1cbd      	adds	r5, r7, #2
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	2e00      	cmp	r6, #0
 8016c10:	d05d      	beq.n	8016cce <_strtol_l.isra.0+0xee>
 8016c12:	2e10      	cmp	r6, #16
 8016c14:	d109      	bne.n	8016c2a <_strtol_l.isra.0+0x4a>
 8016c16:	2c30      	cmp	r4, #48	; 0x30
 8016c18:	d107      	bne.n	8016c2a <_strtol_l.isra.0+0x4a>
 8016c1a:	782b      	ldrb	r3, [r5, #0]
 8016c1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016c20:	2b58      	cmp	r3, #88	; 0x58
 8016c22:	d14f      	bne.n	8016cc4 <_strtol_l.isra.0+0xe4>
 8016c24:	786c      	ldrb	r4, [r5, #1]
 8016c26:	2610      	movs	r6, #16
 8016c28:	3502      	adds	r5, #2
 8016c2a:	2a00      	cmp	r2, #0
 8016c2c:	bf14      	ite	ne
 8016c2e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016c32:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016c36:	2700      	movs	r7, #0
 8016c38:	fbb1 fcf6 	udiv	ip, r1, r6
 8016c3c:	4638      	mov	r0, r7
 8016c3e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016c42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016c46:	2b09      	cmp	r3, #9
 8016c48:	d817      	bhi.n	8016c7a <_strtol_l.isra.0+0x9a>
 8016c4a:	461c      	mov	r4, r3
 8016c4c:	42a6      	cmp	r6, r4
 8016c4e:	dd23      	ble.n	8016c98 <_strtol_l.isra.0+0xb8>
 8016c50:	1c7b      	adds	r3, r7, #1
 8016c52:	d007      	beq.n	8016c64 <_strtol_l.isra.0+0x84>
 8016c54:	4584      	cmp	ip, r0
 8016c56:	d31c      	bcc.n	8016c92 <_strtol_l.isra.0+0xb2>
 8016c58:	d101      	bne.n	8016c5e <_strtol_l.isra.0+0x7e>
 8016c5a:	45a6      	cmp	lr, r4
 8016c5c:	db19      	blt.n	8016c92 <_strtol_l.isra.0+0xb2>
 8016c5e:	fb00 4006 	mla	r0, r0, r6, r4
 8016c62:	2701      	movs	r7, #1
 8016c64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c68:	e7eb      	b.n	8016c42 <_strtol_l.isra.0+0x62>
 8016c6a:	462f      	mov	r7, r5
 8016c6c:	e7bf      	b.n	8016bee <_strtol_l.isra.0+0xe>
 8016c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8016c70:	bf04      	itt	eq
 8016c72:	1cbd      	addeq	r5, r7, #2
 8016c74:	787c      	ldrbeq	r4, [r7, #1]
 8016c76:	461a      	mov	r2, r3
 8016c78:	e7c9      	b.n	8016c0e <_strtol_l.isra.0+0x2e>
 8016c7a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016c7e:	2b19      	cmp	r3, #25
 8016c80:	d801      	bhi.n	8016c86 <_strtol_l.isra.0+0xa6>
 8016c82:	3c37      	subs	r4, #55	; 0x37
 8016c84:	e7e2      	b.n	8016c4c <_strtol_l.isra.0+0x6c>
 8016c86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016c8a:	2b19      	cmp	r3, #25
 8016c8c:	d804      	bhi.n	8016c98 <_strtol_l.isra.0+0xb8>
 8016c8e:	3c57      	subs	r4, #87	; 0x57
 8016c90:	e7dc      	b.n	8016c4c <_strtol_l.isra.0+0x6c>
 8016c92:	f04f 37ff 	mov.w	r7, #4294967295
 8016c96:	e7e5      	b.n	8016c64 <_strtol_l.isra.0+0x84>
 8016c98:	1c7b      	adds	r3, r7, #1
 8016c9a:	d108      	bne.n	8016cae <_strtol_l.isra.0+0xce>
 8016c9c:	2322      	movs	r3, #34	; 0x22
 8016c9e:	f8c8 3000 	str.w	r3, [r8]
 8016ca2:	4608      	mov	r0, r1
 8016ca4:	f1ba 0f00 	cmp.w	sl, #0
 8016ca8:	d107      	bne.n	8016cba <_strtol_l.isra.0+0xda>
 8016caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cae:	b102      	cbz	r2, 8016cb2 <_strtol_l.isra.0+0xd2>
 8016cb0:	4240      	negs	r0, r0
 8016cb2:	f1ba 0f00 	cmp.w	sl, #0
 8016cb6:	d0f8      	beq.n	8016caa <_strtol_l.isra.0+0xca>
 8016cb8:	b10f      	cbz	r7, 8016cbe <_strtol_l.isra.0+0xde>
 8016cba:	f105 39ff 	add.w	r9, r5, #4294967295
 8016cbe:	f8ca 9000 	str.w	r9, [sl]
 8016cc2:	e7f2      	b.n	8016caa <_strtol_l.isra.0+0xca>
 8016cc4:	2430      	movs	r4, #48	; 0x30
 8016cc6:	2e00      	cmp	r6, #0
 8016cc8:	d1af      	bne.n	8016c2a <_strtol_l.isra.0+0x4a>
 8016cca:	2608      	movs	r6, #8
 8016ccc:	e7ad      	b.n	8016c2a <_strtol_l.isra.0+0x4a>
 8016cce:	2c30      	cmp	r4, #48	; 0x30
 8016cd0:	d0a3      	beq.n	8016c1a <_strtol_l.isra.0+0x3a>
 8016cd2:	260a      	movs	r6, #10
 8016cd4:	e7a9      	b.n	8016c2a <_strtol_l.isra.0+0x4a>
	...

08016cd8 <_strtol_r>:
 8016cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cda:	4c06      	ldr	r4, [pc, #24]	; (8016cf4 <_strtol_r+0x1c>)
 8016cdc:	4d06      	ldr	r5, [pc, #24]	; (8016cf8 <_strtol_r+0x20>)
 8016cde:	6824      	ldr	r4, [r4, #0]
 8016ce0:	6a24      	ldr	r4, [r4, #32]
 8016ce2:	2c00      	cmp	r4, #0
 8016ce4:	bf08      	it	eq
 8016ce6:	462c      	moveq	r4, r5
 8016ce8:	9400      	str	r4, [sp, #0]
 8016cea:	f7ff ff79 	bl	8016be0 <_strtol_l.isra.0>
 8016cee:	b003      	add	sp, #12
 8016cf0:	bd30      	pop	{r4, r5, pc}
 8016cf2:	bf00      	nop
 8016cf4:	2000000c 	.word	0x2000000c
 8016cf8:	20000070 	.word	0x20000070

08016cfc <_vsiprintf_r>:
 8016cfc:	b500      	push	{lr}
 8016cfe:	b09b      	sub	sp, #108	; 0x6c
 8016d00:	9100      	str	r1, [sp, #0]
 8016d02:	9104      	str	r1, [sp, #16]
 8016d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d08:	9105      	str	r1, [sp, #20]
 8016d0a:	9102      	str	r1, [sp, #8]
 8016d0c:	4905      	ldr	r1, [pc, #20]	; (8016d24 <_vsiprintf_r+0x28>)
 8016d0e:	9103      	str	r1, [sp, #12]
 8016d10:	4669      	mov	r1, sp
 8016d12:	f001 fed5 	bl	8018ac0 <_svfiprintf_r>
 8016d16:	9b00      	ldr	r3, [sp, #0]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	701a      	strb	r2, [r3, #0]
 8016d1c:	b01b      	add	sp, #108	; 0x6c
 8016d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d22:	bf00      	nop
 8016d24:	ffff0208 	.word	0xffff0208

08016d28 <vsiprintf>:
 8016d28:	4613      	mov	r3, r2
 8016d2a:	460a      	mov	r2, r1
 8016d2c:	4601      	mov	r1, r0
 8016d2e:	4802      	ldr	r0, [pc, #8]	; (8016d38 <vsiprintf+0x10>)
 8016d30:	6800      	ldr	r0, [r0, #0]
 8016d32:	f7ff bfe3 	b.w	8016cfc <_vsiprintf_r>
 8016d36:	bf00      	nop
 8016d38:	2000000c 	.word	0x2000000c

08016d3c <quorem>:
 8016d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d40:	6903      	ldr	r3, [r0, #16]
 8016d42:	690c      	ldr	r4, [r1, #16]
 8016d44:	42a3      	cmp	r3, r4
 8016d46:	4680      	mov	r8, r0
 8016d48:	f2c0 8082 	blt.w	8016e50 <quorem+0x114>
 8016d4c:	3c01      	subs	r4, #1
 8016d4e:	f101 0714 	add.w	r7, r1, #20
 8016d52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016d56:	f100 0614 	add.w	r6, r0, #20
 8016d5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016d5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016d62:	eb06 030c 	add.w	r3, r6, ip
 8016d66:	3501      	adds	r5, #1
 8016d68:	eb07 090c 	add.w	r9, r7, ip
 8016d6c:	9301      	str	r3, [sp, #4]
 8016d6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016d72:	b395      	cbz	r5, 8016dda <quorem+0x9e>
 8016d74:	f04f 0a00 	mov.w	sl, #0
 8016d78:	4638      	mov	r0, r7
 8016d7a:	46b6      	mov	lr, r6
 8016d7c:	46d3      	mov	fp, sl
 8016d7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016d82:	b293      	uxth	r3, r2
 8016d84:	fb05 a303 	mla	r3, r5, r3, sl
 8016d88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	ebab 0303 	sub.w	r3, fp, r3
 8016d92:	0c12      	lsrs	r2, r2, #16
 8016d94:	f8de b000 	ldr.w	fp, [lr]
 8016d98:	fb05 a202 	mla	r2, r5, r2, sl
 8016d9c:	fa13 f38b 	uxtah	r3, r3, fp
 8016da0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016da4:	fa1f fb82 	uxth.w	fp, r2
 8016da8:	f8de 2000 	ldr.w	r2, [lr]
 8016dac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016db0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dba:	4581      	cmp	r9, r0
 8016dbc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016dc0:	f84e 3b04 	str.w	r3, [lr], #4
 8016dc4:	d2db      	bcs.n	8016d7e <quorem+0x42>
 8016dc6:	f856 300c 	ldr.w	r3, [r6, ip]
 8016dca:	b933      	cbnz	r3, 8016dda <quorem+0x9e>
 8016dcc:	9b01      	ldr	r3, [sp, #4]
 8016dce:	3b04      	subs	r3, #4
 8016dd0:	429e      	cmp	r6, r3
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	d330      	bcc.n	8016e38 <quorem+0xfc>
 8016dd6:	f8c8 4010 	str.w	r4, [r8, #16]
 8016dda:	4640      	mov	r0, r8
 8016ddc:	f001 fbb4 	bl	8018548 <__mcmp>
 8016de0:	2800      	cmp	r0, #0
 8016de2:	db25      	blt.n	8016e30 <quorem+0xf4>
 8016de4:	3501      	adds	r5, #1
 8016de6:	4630      	mov	r0, r6
 8016de8:	f04f 0c00 	mov.w	ip, #0
 8016dec:	f857 2b04 	ldr.w	r2, [r7], #4
 8016df0:	f8d0 e000 	ldr.w	lr, [r0]
 8016df4:	b293      	uxth	r3, r2
 8016df6:	ebac 0303 	sub.w	r3, ip, r3
 8016dfa:	0c12      	lsrs	r2, r2, #16
 8016dfc:	fa13 f38e 	uxtah	r3, r3, lr
 8016e00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e0e:	45b9      	cmp	r9, r7
 8016e10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016e14:	f840 3b04 	str.w	r3, [r0], #4
 8016e18:	d2e8      	bcs.n	8016dec <quorem+0xb0>
 8016e1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016e1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e22:	b92a      	cbnz	r2, 8016e30 <quorem+0xf4>
 8016e24:	3b04      	subs	r3, #4
 8016e26:	429e      	cmp	r6, r3
 8016e28:	461a      	mov	r2, r3
 8016e2a:	d30b      	bcc.n	8016e44 <quorem+0x108>
 8016e2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e30:	4628      	mov	r0, r5
 8016e32:	b003      	add	sp, #12
 8016e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e38:	6812      	ldr	r2, [r2, #0]
 8016e3a:	3b04      	subs	r3, #4
 8016e3c:	2a00      	cmp	r2, #0
 8016e3e:	d1ca      	bne.n	8016dd6 <quorem+0x9a>
 8016e40:	3c01      	subs	r4, #1
 8016e42:	e7c5      	b.n	8016dd0 <quorem+0x94>
 8016e44:	6812      	ldr	r2, [r2, #0]
 8016e46:	3b04      	subs	r3, #4
 8016e48:	2a00      	cmp	r2, #0
 8016e4a:	d1ef      	bne.n	8016e2c <quorem+0xf0>
 8016e4c:	3c01      	subs	r4, #1
 8016e4e:	e7ea      	b.n	8016e26 <quorem+0xea>
 8016e50:	2000      	movs	r0, #0
 8016e52:	e7ee      	b.n	8016e32 <quorem+0xf6>
 8016e54:	0000      	movs	r0, r0
	...

08016e58 <_dtoa_r>:
 8016e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e5c:	ec57 6b10 	vmov	r6, r7, d0
 8016e60:	b097      	sub	sp, #92	; 0x5c
 8016e62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e64:	9106      	str	r1, [sp, #24]
 8016e66:	4604      	mov	r4, r0
 8016e68:	920b      	str	r2, [sp, #44]	; 0x2c
 8016e6a:	9312      	str	r3, [sp, #72]	; 0x48
 8016e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016e70:	e9cd 6700 	strd	r6, r7, [sp]
 8016e74:	b93d      	cbnz	r5, 8016e86 <_dtoa_r+0x2e>
 8016e76:	2010      	movs	r0, #16
 8016e78:	f001 f8ee 	bl	8018058 <malloc>
 8016e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8016e7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e82:	6005      	str	r5, [r0, #0]
 8016e84:	60c5      	str	r5, [r0, #12]
 8016e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e88:	6819      	ldr	r1, [r3, #0]
 8016e8a:	b151      	cbz	r1, 8016ea2 <_dtoa_r+0x4a>
 8016e8c:	685a      	ldr	r2, [r3, #4]
 8016e8e:	604a      	str	r2, [r1, #4]
 8016e90:	2301      	movs	r3, #1
 8016e92:	4093      	lsls	r3, r2
 8016e94:	608b      	str	r3, [r1, #8]
 8016e96:	4620      	mov	r0, r4
 8016e98:	f001 f937 	bl	801810a <_Bfree>
 8016e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	601a      	str	r2, [r3, #0]
 8016ea2:	1e3b      	subs	r3, r7, #0
 8016ea4:	bfbb      	ittet	lt
 8016ea6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016eaa:	9301      	strlt	r3, [sp, #4]
 8016eac:	2300      	movge	r3, #0
 8016eae:	2201      	movlt	r2, #1
 8016eb0:	bfac      	ite	ge
 8016eb2:	f8c8 3000 	strge.w	r3, [r8]
 8016eb6:	f8c8 2000 	strlt.w	r2, [r8]
 8016eba:	4baf      	ldr	r3, [pc, #700]	; (8017178 <_dtoa_r+0x320>)
 8016ebc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016ec0:	ea33 0308 	bics.w	r3, r3, r8
 8016ec4:	d114      	bne.n	8016ef0 <_dtoa_r+0x98>
 8016ec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016ecc:	6013      	str	r3, [r2, #0]
 8016ece:	9b00      	ldr	r3, [sp, #0]
 8016ed0:	b923      	cbnz	r3, 8016edc <_dtoa_r+0x84>
 8016ed2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	f000 8542 	beq.w	8017960 <_dtoa_r+0xb08>
 8016edc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ede:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801718c <_dtoa_r+0x334>
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	f000 8544 	beq.w	8017970 <_dtoa_r+0xb18>
 8016ee8:	f10b 0303 	add.w	r3, fp, #3
 8016eec:	f000 bd3e 	b.w	801796c <_dtoa_r+0xb14>
 8016ef0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	4630      	mov	r0, r6
 8016efa:	4639      	mov	r1, r7
 8016efc:	f7e9 fdfc 	bl	8000af8 <__aeabi_dcmpeq>
 8016f00:	4681      	mov	r9, r0
 8016f02:	b168      	cbz	r0, 8016f20 <_dtoa_r+0xc8>
 8016f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f06:	2301      	movs	r3, #1
 8016f08:	6013      	str	r3, [r2, #0]
 8016f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	f000 8524 	beq.w	801795a <_dtoa_r+0xb02>
 8016f12:	4b9a      	ldr	r3, [pc, #616]	; (801717c <_dtoa_r+0x324>)
 8016f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f16:	f103 3bff 	add.w	fp, r3, #4294967295
 8016f1a:	6013      	str	r3, [r2, #0]
 8016f1c:	f000 bd28 	b.w	8017970 <_dtoa_r+0xb18>
 8016f20:	aa14      	add	r2, sp, #80	; 0x50
 8016f22:	a915      	add	r1, sp, #84	; 0x54
 8016f24:	ec47 6b10 	vmov	d0, r6, r7
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f001 fbfb 	bl	8018724 <__d2b>
 8016f2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016f32:	9004      	str	r0, [sp, #16]
 8016f34:	2d00      	cmp	r5, #0
 8016f36:	d07c      	beq.n	8017032 <_dtoa_r+0x1da>
 8016f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016f3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016f40:	46b2      	mov	sl, r6
 8016f42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016f4e:	2200      	movs	r2, #0
 8016f50:	4b8b      	ldr	r3, [pc, #556]	; (8017180 <_dtoa_r+0x328>)
 8016f52:	4650      	mov	r0, sl
 8016f54:	4659      	mov	r1, fp
 8016f56:	f7e9 f9af 	bl	80002b8 <__aeabi_dsub>
 8016f5a:	a381      	add	r3, pc, #516	; (adr r3, 8017160 <_dtoa_r+0x308>)
 8016f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f60:	f7e9 fb62 	bl	8000628 <__aeabi_dmul>
 8016f64:	a380      	add	r3, pc, #512	; (adr r3, 8017168 <_dtoa_r+0x310>)
 8016f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f6a:	f7e9 f9a7 	bl	80002bc <__adddf3>
 8016f6e:	4606      	mov	r6, r0
 8016f70:	4628      	mov	r0, r5
 8016f72:	460f      	mov	r7, r1
 8016f74:	f7e9 faee 	bl	8000554 <__aeabi_i2d>
 8016f78:	a37d      	add	r3, pc, #500	; (adr r3, 8017170 <_dtoa_r+0x318>)
 8016f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7e:	f7e9 fb53 	bl	8000628 <__aeabi_dmul>
 8016f82:	4602      	mov	r2, r0
 8016f84:	460b      	mov	r3, r1
 8016f86:	4630      	mov	r0, r6
 8016f88:	4639      	mov	r1, r7
 8016f8a:	f7e9 f997 	bl	80002bc <__adddf3>
 8016f8e:	4606      	mov	r6, r0
 8016f90:	460f      	mov	r7, r1
 8016f92:	f7e9 fdf9 	bl	8000b88 <__aeabi_d2iz>
 8016f96:	2200      	movs	r2, #0
 8016f98:	4682      	mov	sl, r0
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	4630      	mov	r0, r6
 8016f9e:	4639      	mov	r1, r7
 8016fa0:	f7e9 fdb4 	bl	8000b0c <__aeabi_dcmplt>
 8016fa4:	b148      	cbz	r0, 8016fba <_dtoa_r+0x162>
 8016fa6:	4650      	mov	r0, sl
 8016fa8:	f7e9 fad4 	bl	8000554 <__aeabi_i2d>
 8016fac:	4632      	mov	r2, r6
 8016fae:	463b      	mov	r3, r7
 8016fb0:	f7e9 fda2 	bl	8000af8 <__aeabi_dcmpeq>
 8016fb4:	b908      	cbnz	r0, 8016fba <_dtoa_r+0x162>
 8016fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fba:	f1ba 0f16 	cmp.w	sl, #22
 8016fbe:	d859      	bhi.n	8017074 <_dtoa_r+0x21c>
 8016fc0:	4970      	ldr	r1, [pc, #448]	; (8017184 <_dtoa_r+0x32c>)
 8016fc2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fce:	f7e9 fdbb 	bl	8000b48 <__aeabi_dcmpgt>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d050      	beq.n	8017078 <_dtoa_r+0x220>
 8016fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fda:	2300      	movs	r3, #0
 8016fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fe0:	1b5d      	subs	r5, r3, r5
 8016fe2:	f1b5 0801 	subs.w	r8, r5, #1
 8016fe6:	bf49      	itett	mi
 8016fe8:	f1c5 0301 	rsbmi	r3, r5, #1
 8016fec:	2300      	movpl	r3, #0
 8016fee:	9305      	strmi	r3, [sp, #20]
 8016ff0:	f04f 0800 	movmi.w	r8, #0
 8016ff4:	bf58      	it	pl
 8016ff6:	9305      	strpl	r3, [sp, #20]
 8016ff8:	f1ba 0f00 	cmp.w	sl, #0
 8016ffc:	db3e      	blt.n	801707c <_dtoa_r+0x224>
 8016ffe:	2300      	movs	r3, #0
 8017000:	44d0      	add	r8, sl
 8017002:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017006:	9307      	str	r3, [sp, #28]
 8017008:	9b06      	ldr	r3, [sp, #24]
 801700a:	2b09      	cmp	r3, #9
 801700c:	f200 8090 	bhi.w	8017130 <_dtoa_r+0x2d8>
 8017010:	2b05      	cmp	r3, #5
 8017012:	bfc4      	itt	gt
 8017014:	3b04      	subgt	r3, #4
 8017016:	9306      	strgt	r3, [sp, #24]
 8017018:	9b06      	ldr	r3, [sp, #24]
 801701a:	f1a3 0302 	sub.w	r3, r3, #2
 801701e:	bfcc      	ite	gt
 8017020:	2500      	movgt	r5, #0
 8017022:	2501      	movle	r5, #1
 8017024:	2b03      	cmp	r3, #3
 8017026:	f200 808f 	bhi.w	8017148 <_dtoa_r+0x2f0>
 801702a:	e8df f003 	tbb	[pc, r3]
 801702e:	7f7d      	.short	0x7f7d
 8017030:	7131      	.short	0x7131
 8017032:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017036:	441d      	add	r5, r3
 8017038:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801703c:	2820      	cmp	r0, #32
 801703e:	dd13      	ble.n	8017068 <_dtoa_r+0x210>
 8017040:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017044:	9b00      	ldr	r3, [sp, #0]
 8017046:	fa08 f800 	lsl.w	r8, r8, r0
 801704a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801704e:	fa23 f000 	lsr.w	r0, r3, r0
 8017052:	ea48 0000 	orr.w	r0, r8, r0
 8017056:	f7e9 fa6d 	bl	8000534 <__aeabi_ui2d>
 801705a:	2301      	movs	r3, #1
 801705c:	4682      	mov	sl, r0
 801705e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017062:	3d01      	subs	r5, #1
 8017064:	9313      	str	r3, [sp, #76]	; 0x4c
 8017066:	e772      	b.n	8016f4e <_dtoa_r+0xf6>
 8017068:	9b00      	ldr	r3, [sp, #0]
 801706a:	f1c0 0020 	rsb	r0, r0, #32
 801706e:	fa03 f000 	lsl.w	r0, r3, r0
 8017072:	e7f0      	b.n	8017056 <_dtoa_r+0x1fe>
 8017074:	2301      	movs	r3, #1
 8017076:	e7b1      	b.n	8016fdc <_dtoa_r+0x184>
 8017078:	900f      	str	r0, [sp, #60]	; 0x3c
 801707a:	e7b0      	b.n	8016fde <_dtoa_r+0x186>
 801707c:	9b05      	ldr	r3, [sp, #20]
 801707e:	eba3 030a 	sub.w	r3, r3, sl
 8017082:	9305      	str	r3, [sp, #20]
 8017084:	f1ca 0300 	rsb	r3, sl, #0
 8017088:	9307      	str	r3, [sp, #28]
 801708a:	2300      	movs	r3, #0
 801708c:	930e      	str	r3, [sp, #56]	; 0x38
 801708e:	e7bb      	b.n	8017008 <_dtoa_r+0x1b0>
 8017090:	2301      	movs	r3, #1
 8017092:	930a      	str	r3, [sp, #40]	; 0x28
 8017094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017096:	2b00      	cmp	r3, #0
 8017098:	dd59      	ble.n	801714e <_dtoa_r+0x2f6>
 801709a:	9302      	str	r3, [sp, #8]
 801709c:	4699      	mov	r9, r3
 801709e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80170a0:	2200      	movs	r2, #0
 80170a2:	6072      	str	r2, [r6, #4]
 80170a4:	2204      	movs	r2, #4
 80170a6:	f102 0014 	add.w	r0, r2, #20
 80170aa:	4298      	cmp	r0, r3
 80170ac:	6871      	ldr	r1, [r6, #4]
 80170ae:	d953      	bls.n	8017158 <_dtoa_r+0x300>
 80170b0:	4620      	mov	r0, r4
 80170b2:	f000 fff6 	bl	80180a2 <_Balloc>
 80170b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170b8:	6030      	str	r0, [r6, #0]
 80170ba:	f1b9 0f0e 	cmp.w	r9, #14
 80170be:	f8d3 b000 	ldr.w	fp, [r3]
 80170c2:	f200 80e6 	bhi.w	8017292 <_dtoa_r+0x43a>
 80170c6:	2d00      	cmp	r5, #0
 80170c8:	f000 80e3 	beq.w	8017292 <_dtoa_r+0x43a>
 80170cc:	ed9d 7b00 	vldr	d7, [sp]
 80170d0:	f1ba 0f00 	cmp.w	sl, #0
 80170d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80170d8:	dd74      	ble.n	80171c4 <_dtoa_r+0x36c>
 80170da:	4a2a      	ldr	r2, [pc, #168]	; (8017184 <_dtoa_r+0x32c>)
 80170dc:	f00a 030f 	and.w	r3, sl, #15
 80170e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80170e4:	ed93 7b00 	vldr	d7, [r3]
 80170e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80170ec:	06f0      	lsls	r0, r6, #27
 80170ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80170f2:	d565      	bpl.n	80171c0 <_dtoa_r+0x368>
 80170f4:	4b24      	ldr	r3, [pc, #144]	; (8017188 <_dtoa_r+0x330>)
 80170f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80170fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80170fe:	f7e9 fbbd 	bl	800087c <__aeabi_ddiv>
 8017102:	e9cd 0100 	strd	r0, r1, [sp]
 8017106:	f006 060f 	and.w	r6, r6, #15
 801710a:	2503      	movs	r5, #3
 801710c:	4f1e      	ldr	r7, [pc, #120]	; (8017188 <_dtoa_r+0x330>)
 801710e:	e04c      	b.n	80171aa <_dtoa_r+0x352>
 8017110:	2301      	movs	r3, #1
 8017112:	930a      	str	r3, [sp, #40]	; 0x28
 8017114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017116:	4453      	add	r3, sl
 8017118:	f103 0901 	add.w	r9, r3, #1
 801711c:	9302      	str	r3, [sp, #8]
 801711e:	464b      	mov	r3, r9
 8017120:	2b01      	cmp	r3, #1
 8017122:	bfb8      	it	lt
 8017124:	2301      	movlt	r3, #1
 8017126:	e7ba      	b.n	801709e <_dtoa_r+0x246>
 8017128:	2300      	movs	r3, #0
 801712a:	e7b2      	b.n	8017092 <_dtoa_r+0x23a>
 801712c:	2300      	movs	r3, #0
 801712e:	e7f0      	b.n	8017112 <_dtoa_r+0x2ba>
 8017130:	2501      	movs	r5, #1
 8017132:	2300      	movs	r3, #0
 8017134:	9306      	str	r3, [sp, #24]
 8017136:	950a      	str	r5, [sp, #40]	; 0x28
 8017138:	f04f 33ff 	mov.w	r3, #4294967295
 801713c:	9302      	str	r3, [sp, #8]
 801713e:	4699      	mov	r9, r3
 8017140:	2200      	movs	r2, #0
 8017142:	2312      	movs	r3, #18
 8017144:	920b      	str	r2, [sp, #44]	; 0x2c
 8017146:	e7aa      	b.n	801709e <_dtoa_r+0x246>
 8017148:	2301      	movs	r3, #1
 801714a:	930a      	str	r3, [sp, #40]	; 0x28
 801714c:	e7f4      	b.n	8017138 <_dtoa_r+0x2e0>
 801714e:	2301      	movs	r3, #1
 8017150:	9302      	str	r3, [sp, #8]
 8017152:	4699      	mov	r9, r3
 8017154:	461a      	mov	r2, r3
 8017156:	e7f5      	b.n	8017144 <_dtoa_r+0x2ec>
 8017158:	3101      	adds	r1, #1
 801715a:	6071      	str	r1, [r6, #4]
 801715c:	0052      	lsls	r2, r2, #1
 801715e:	e7a2      	b.n	80170a6 <_dtoa_r+0x24e>
 8017160:	636f4361 	.word	0x636f4361
 8017164:	3fd287a7 	.word	0x3fd287a7
 8017168:	8b60c8b3 	.word	0x8b60c8b3
 801716c:	3fc68a28 	.word	0x3fc68a28
 8017170:	509f79fb 	.word	0x509f79fb
 8017174:	3fd34413 	.word	0x3fd34413
 8017178:	7ff00000 	.word	0x7ff00000
 801717c:	08019e44 	.word	0x08019e44
 8017180:	3ff80000 	.word	0x3ff80000
 8017184:	08019d48 	.word	0x08019d48
 8017188:	08019d20 	.word	0x08019d20
 801718c:	08019d11 	.word	0x08019d11
 8017190:	07f1      	lsls	r1, r6, #31
 8017192:	d508      	bpl.n	80171a6 <_dtoa_r+0x34e>
 8017194:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017198:	e9d7 2300 	ldrd	r2, r3, [r7]
 801719c:	f7e9 fa44 	bl	8000628 <__aeabi_dmul>
 80171a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80171a4:	3501      	adds	r5, #1
 80171a6:	1076      	asrs	r6, r6, #1
 80171a8:	3708      	adds	r7, #8
 80171aa:	2e00      	cmp	r6, #0
 80171ac:	d1f0      	bne.n	8017190 <_dtoa_r+0x338>
 80171ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171b6:	f7e9 fb61 	bl	800087c <__aeabi_ddiv>
 80171ba:	e9cd 0100 	strd	r0, r1, [sp]
 80171be:	e01a      	b.n	80171f6 <_dtoa_r+0x39e>
 80171c0:	2502      	movs	r5, #2
 80171c2:	e7a3      	b.n	801710c <_dtoa_r+0x2b4>
 80171c4:	f000 80a0 	beq.w	8017308 <_dtoa_r+0x4b0>
 80171c8:	f1ca 0600 	rsb	r6, sl, #0
 80171cc:	4b9f      	ldr	r3, [pc, #636]	; (801744c <_dtoa_r+0x5f4>)
 80171ce:	4fa0      	ldr	r7, [pc, #640]	; (8017450 <_dtoa_r+0x5f8>)
 80171d0:	f006 020f 	and.w	r2, r6, #15
 80171d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80171e0:	f7e9 fa22 	bl	8000628 <__aeabi_dmul>
 80171e4:	e9cd 0100 	strd	r0, r1, [sp]
 80171e8:	1136      	asrs	r6, r6, #4
 80171ea:	2300      	movs	r3, #0
 80171ec:	2502      	movs	r5, #2
 80171ee:	2e00      	cmp	r6, #0
 80171f0:	d17f      	bne.n	80172f2 <_dtoa_r+0x49a>
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d1e1      	bne.n	80171ba <_dtoa_r+0x362>
 80171f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	f000 8087 	beq.w	801730c <_dtoa_r+0x4b4>
 80171fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017202:	2200      	movs	r2, #0
 8017204:	4b93      	ldr	r3, [pc, #588]	; (8017454 <_dtoa_r+0x5fc>)
 8017206:	4630      	mov	r0, r6
 8017208:	4639      	mov	r1, r7
 801720a:	f7e9 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 801720e:	2800      	cmp	r0, #0
 8017210:	d07c      	beq.n	801730c <_dtoa_r+0x4b4>
 8017212:	f1b9 0f00 	cmp.w	r9, #0
 8017216:	d079      	beq.n	801730c <_dtoa_r+0x4b4>
 8017218:	9b02      	ldr	r3, [sp, #8]
 801721a:	2b00      	cmp	r3, #0
 801721c:	dd35      	ble.n	801728a <_dtoa_r+0x432>
 801721e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017222:	9308      	str	r3, [sp, #32]
 8017224:	4639      	mov	r1, r7
 8017226:	2200      	movs	r2, #0
 8017228:	4b8b      	ldr	r3, [pc, #556]	; (8017458 <_dtoa_r+0x600>)
 801722a:	4630      	mov	r0, r6
 801722c:	f7e9 f9fc 	bl	8000628 <__aeabi_dmul>
 8017230:	e9cd 0100 	strd	r0, r1, [sp]
 8017234:	9f02      	ldr	r7, [sp, #8]
 8017236:	3501      	adds	r5, #1
 8017238:	4628      	mov	r0, r5
 801723a:	f7e9 f98b 	bl	8000554 <__aeabi_i2d>
 801723e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017242:	f7e9 f9f1 	bl	8000628 <__aeabi_dmul>
 8017246:	2200      	movs	r2, #0
 8017248:	4b84      	ldr	r3, [pc, #528]	; (801745c <_dtoa_r+0x604>)
 801724a:	f7e9 f837 	bl	80002bc <__adddf3>
 801724e:	4605      	mov	r5, r0
 8017250:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017254:	2f00      	cmp	r7, #0
 8017256:	d15d      	bne.n	8017314 <_dtoa_r+0x4bc>
 8017258:	2200      	movs	r2, #0
 801725a:	4b81      	ldr	r3, [pc, #516]	; (8017460 <_dtoa_r+0x608>)
 801725c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017260:	f7e9 f82a 	bl	80002b8 <__aeabi_dsub>
 8017264:	462a      	mov	r2, r5
 8017266:	4633      	mov	r3, r6
 8017268:	e9cd 0100 	strd	r0, r1, [sp]
 801726c:	f7e9 fc6c 	bl	8000b48 <__aeabi_dcmpgt>
 8017270:	2800      	cmp	r0, #0
 8017272:	f040 8288 	bne.w	8017786 <_dtoa_r+0x92e>
 8017276:	462a      	mov	r2, r5
 8017278:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801727c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017280:	f7e9 fc44 	bl	8000b0c <__aeabi_dcmplt>
 8017284:	2800      	cmp	r0, #0
 8017286:	f040 827c 	bne.w	8017782 <_dtoa_r+0x92a>
 801728a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801728e:	e9cd 2300 	strd	r2, r3, [sp]
 8017292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017294:	2b00      	cmp	r3, #0
 8017296:	f2c0 8150 	blt.w	801753a <_dtoa_r+0x6e2>
 801729a:	f1ba 0f0e 	cmp.w	sl, #14
 801729e:	f300 814c 	bgt.w	801753a <_dtoa_r+0x6e2>
 80172a2:	4b6a      	ldr	r3, [pc, #424]	; (801744c <_dtoa_r+0x5f4>)
 80172a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80172a8:	ed93 7b00 	vldr	d7, [r3]
 80172ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80172b4:	f280 80d8 	bge.w	8017468 <_dtoa_r+0x610>
 80172b8:	f1b9 0f00 	cmp.w	r9, #0
 80172bc:	f300 80d4 	bgt.w	8017468 <_dtoa_r+0x610>
 80172c0:	f040 825e 	bne.w	8017780 <_dtoa_r+0x928>
 80172c4:	2200      	movs	r2, #0
 80172c6:	4b66      	ldr	r3, [pc, #408]	; (8017460 <_dtoa_r+0x608>)
 80172c8:	ec51 0b17 	vmov	r0, r1, d7
 80172cc:	f7e9 f9ac 	bl	8000628 <__aeabi_dmul>
 80172d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172d4:	f7e9 fc2e 	bl	8000b34 <__aeabi_dcmpge>
 80172d8:	464f      	mov	r7, r9
 80172da:	464e      	mov	r6, r9
 80172dc:	2800      	cmp	r0, #0
 80172de:	f040 8234 	bne.w	801774a <_dtoa_r+0x8f2>
 80172e2:	2331      	movs	r3, #49	; 0x31
 80172e4:	f10b 0501 	add.w	r5, fp, #1
 80172e8:	f88b 3000 	strb.w	r3, [fp]
 80172ec:	f10a 0a01 	add.w	sl, sl, #1
 80172f0:	e22f      	b.n	8017752 <_dtoa_r+0x8fa>
 80172f2:	07f2      	lsls	r2, r6, #31
 80172f4:	d505      	bpl.n	8017302 <_dtoa_r+0x4aa>
 80172f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172fa:	f7e9 f995 	bl	8000628 <__aeabi_dmul>
 80172fe:	3501      	adds	r5, #1
 8017300:	2301      	movs	r3, #1
 8017302:	1076      	asrs	r6, r6, #1
 8017304:	3708      	adds	r7, #8
 8017306:	e772      	b.n	80171ee <_dtoa_r+0x396>
 8017308:	2502      	movs	r5, #2
 801730a:	e774      	b.n	80171f6 <_dtoa_r+0x39e>
 801730c:	f8cd a020 	str.w	sl, [sp, #32]
 8017310:	464f      	mov	r7, r9
 8017312:	e791      	b.n	8017238 <_dtoa_r+0x3e0>
 8017314:	4b4d      	ldr	r3, [pc, #308]	; (801744c <_dtoa_r+0x5f4>)
 8017316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801731a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017320:	2b00      	cmp	r3, #0
 8017322:	d047      	beq.n	80173b4 <_dtoa_r+0x55c>
 8017324:	4602      	mov	r2, r0
 8017326:	460b      	mov	r3, r1
 8017328:	2000      	movs	r0, #0
 801732a:	494e      	ldr	r1, [pc, #312]	; (8017464 <_dtoa_r+0x60c>)
 801732c:	f7e9 faa6 	bl	800087c <__aeabi_ddiv>
 8017330:	462a      	mov	r2, r5
 8017332:	4633      	mov	r3, r6
 8017334:	f7e8 ffc0 	bl	80002b8 <__aeabi_dsub>
 8017338:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801733c:	465d      	mov	r5, fp
 801733e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017342:	f7e9 fc21 	bl	8000b88 <__aeabi_d2iz>
 8017346:	4606      	mov	r6, r0
 8017348:	f7e9 f904 	bl	8000554 <__aeabi_i2d>
 801734c:	4602      	mov	r2, r0
 801734e:	460b      	mov	r3, r1
 8017350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017354:	f7e8 ffb0 	bl	80002b8 <__aeabi_dsub>
 8017358:	3630      	adds	r6, #48	; 0x30
 801735a:	f805 6b01 	strb.w	r6, [r5], #1
 801735e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017362:	e9cd 0100 	strd	r0, r1, [sp]
 8017366:	f7e9 fbd1 	bl	8000b0c <__aeabi_dcmplt>
 801736a:	2800      	cmp	r0, #0
 801736c:	d163      	bne.n	8017436 <_dtoa_r+0x5de>
 801736e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017372:	2000      	movs	r0, #0
 8017374:	4937      	ldr	r1, [pc, #220]	; (8017454 <_dtoa_r+0x5fc>)
 8017376:	f7e8 ff9f 	bl	80002b8 <__aeabi_dsub>
 801737a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801737e:	f7e9 fbc5 	bl	8000b0c <__aeabi_dcmplt>
 8017382:	2800      	cmp	r0, #0
 8017384:	f040 80b7 	bne.w	80174f6 <_dtoa_r+0x69e>
 8017388:	eba5 030b 	sub.w	r3, r5, fp
 801738c:	429f      	cmp	r7, r3
 801738e:	f77f af7c 	ble.w	801728a <_dtoa_r+0x432>
 8017392:	2200      	movs	r2, #0
 8017394:	4b30      	ldr	r3, [pc, #192]	; (8017458 <_dtoa_r+0x600>)
 8017396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801739a:	f7e9 f945 	bl	8000628 <__aeabi_dmul>
 801739e:	2200      	movs	r2, #0
 80173a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173a4:	4b2c      	ldr	r3, [pc, #176]	; (8017458 <_dtoa_r+0x600>)
 80173a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173aa:	f7e9 f93d 	bl	8000628 <__aeabi_dmul>
 80173ae:	e9cd 0100 	strd	r0, r1, [sp]
 80173b2:	e7c4      	b.n	801733e <_dtoa_r+0x4e6>
 80173b4:	462a      	mov	r2, r5
 80173b6:	4633      	mov	r3, r6
 80173b8:	f7e9 f936 	bl	8000628 <__aeabi_dmul>
 80173bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173c0:	eb0b 0507 	add.w	r5, fp, r7
 80173c4:	465e      	mov	r6, fp
 80173c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173ca:	f7e9 fbdd 	bl	8000b88 <__aeabi_d2iz>
 80173ce:	4607      	mov	r7, r0
 80173d0:	f7e9 f8c0 	bl	8000554 <__aeabi_i2d>
 80173d4:	3730      	adds	r7, #48	; 0x30
 80173d6:	4602      	mov	r2, r0
 80173d8:	460b      	mov	r3, r1
 80173da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173de:	f7e8 ff6b 	bl	80002b8 <__aeabi_dsub>
 80173e2:	f806 7b01 	strb.w	r7, [r6], #1
 80173e6:	42ae      	cmp	r6, r5
 80173e8:	e9cd 0100 	strd	r0, r1, [sp]
 80173ec:	f04f 0200 	mov.w	r2, #0
 80173f0:	d126      	bne.n	8017440 <_dtoa_r+0x5e8>
 80173f2:	4b1c      	ldr	r3, [pc, #112]	; (8017464 <_dtoa_r+0x60c>)
 80173f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80173f8:	f7e8 ff60 	bl	80002bc <__adddf3>
 80173fc:	4602      	mov	r2, r0
 80173fe:	460b      	mov	r3, r1
 8017400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017404:	f7e9 fba0 	bl	8000b48 <__aeabi_dcmpgt>
 8017408:	2800      	cmp	r0, #0
 801740a:	d174      	bne.n	80174f6 <_dtoa_r+0x69e>
 801740c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017410:	2000      	movs	r0, #0
 8017412:	4914      	ldr	r1, [pc, #80]	; (8017464 <_dtoa_r+0x60c>)
 8017414:	f7e8 ff50 	bl	80002b8 <__aeabi_dsub>
 8017418:	4602      	mov	r2, r0
 801741a:	460b      	mov	r3, r1
 801741c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017420:	f7e9 fb74 	bl	8000b0c <__aeabi_dcmplt>
 8017424:	2800      	cmp	r0, #0
 8017426:	f43f af30 	beq.w	801728a <_dtoa_r+0x432>
 801742a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801742e:	2b30      	cmp	r3, #48	; 0x30
 8017430:	f105 32ff 	add.w	r2, r5, #4294967295
 8017434:	d002      	beq.n	801743c <_dtoa_r+0x5e4>
 8017436:	f8dd a020 	ldr.w	sl, [sp, #32]
 801743a:	e04a      	b.n	80174d2 <_dtoa_r+0x67a>
 801743c:	4615      	mov	r5, r2
 801743e:	e7f4      	b.n	801742a <_dtoa_r+0x5d2>
 8017440:	4b05      	ldr	r3, [pc, #20]	; (8017458 <_dtoa_r+0x600>)
 8017442:	f7e9 f8f1 	bl	8000628 <__aeabi_dmul>
 8017446:	e9cd 0100 	strd	r0, r1, [sp]
 801744a:	e7bc      	b.n	80173c6 <_dtoa_r+0x56e>
 801744c:	08019d48 	.word	0x08019d48
 8017450:	08019d20 	.word	0x08019d20
 8017454:	3ff00000 	.word	0x3ff00000
 8017458:	40240000 	.word	0x40240000
 801745c:	401c0000 	.word	0x401c0000
 8017460:	40140000 	.word	0x40140000
 8017464:	3fe00000 	.word	0x3fe00000
 8017468:	e9dd 6700 	ldrd	r6, r7, [sp]
 801746c:	465d      	mov	r5, fp
 801746e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017472:	4630      	mov	r0, r6
 8017474:	4639      	mov	r1, r7
 8017476:	f7e9 fa01 	bl	800087c <__aeabi_ddiv>
 801747a:	f7e9 fb85 	bl	8000b88 <__aeabi_d2iz>
 801747e:	4680      	mov	r8, r0
 8017480:	f7e9 f868 	bl	8000554 <__aeabi_i2d>
 8017484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017488:	f7e9 f8ce 	bl	8000628 <__aeabi_dmul>
 801748c:	4602      	mov	r2, r0
 801748e:	460b      	mov	r3, r1
 8017490:	4630      	mov	r0, r6
 8017492:	4639      	mov	r1, r7
 8017494:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017498:	f7e8 ff0e 	bl	80002b8 <__aeabi_dsub>
 801749c:	f805 6b01 	strb.w	r6, [r5], #1
 80174a0:	eba5 060b 	sub.w	r6, r5, fp
 80174a4:	45b1      	cmp	r9, r6
 80174a6:	4602      	mov	r2, r0
 80174a8:	460b      	mov	r3, r1
 80174aa:	d139      	bne.n	8017520 <_dtoa_r+0x6c8>
 80174ac:	f7e8 ff06 	bl	80002bc <__adddf3>
 80174b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174b4:	4606      	mov	r6, r0
 80174b6:	460f      	mov	r7, r1
 80174b8:	f7e9 fb46 	bl	8000b48 <__aeabi_dcmpgt>
 80174bc:	b9c8      	cbnz	r0, 80174f2 <_dtoa_r+0x69a>
 80174be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174c2:	4630      	mov	r0, r6
 80174c4:	4639      	mov	r1, r7
 80174c6:	f7e9 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 80174ca:	b110      	cbz	r0, 80174d2 <_dtoa_r+0x67a>
 80174cc:	f018 0f01 	tst.w	r8, #1
 80174d0:	d10f      	bne.n	80174f2 <_dtoa_r+0x69a>
 80174d2:	9904      	ldr	r1, [sp, #16]
 80174d4:	4620      	mov	r0, r4
 80174d6:	f000 fe18 	bl	801810a <_Bfree>
 80174da:	2300      	movs	r3, #0
 80174dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174de:	702b      	strb	r3, [r5, #0]
 80174e0:	f10a 0301 	add.w	r3, sl, #1
 80174e4:	6013      	str	r3, [r2, #0]
 80174e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	f000 8241 	beq.w	8017970 <_dtoa_r+0xb18>
 80174ee:	601d      	str	r5, [r3, #0]
 80174f0:	e23e      	b.n	8017970 <_dtoa_r+0xb18>
 80174f2:	f8cd a020 	str.w	sl, [sp, #32]
 80174f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80174fa:	2a39      	cmp	r2, #57	; 0x39
 80174fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8017500:	d108      	bne.n	8017514 <_dtoa_r+0x6bc>
 8017502:	459b      	cmp	fp, r3
 8017504:	d10a      	bne.n	801751c <_dtoa_r+0x6c4>
 8017506:	9b08      	ldr	r3, [sp, #32]
 8017508:	3301      	adds	r3, #1
 801750a:	9308      	str	r3, [sp, #32]
 801750c:	2330      	movs	r3, #48	; 0x30
 801750e:	f88b 3000 	strb.w	r3, [fp]
 8017512:	465b      	mov	r3, fp
 8017514:	781a      	ldrb	r2, [r3, #0]
 8017516:	3201      	adds	r2, #1
 8017518:	701a      	strb	r2, [r3, #0]
 801751a:	e78c      	b.n	8017436 <_dtoa_r+0x5de>
 801751c:	461d      	mov	r5, r3
 801751e:	e7ea      	b.n	80174f6 <_dtoa_r+0x69e>
 8017520:	2200      	movs	r2, #0
 8017522:	4b9b      	ldr	r3, [pc, #620]	; (8017790 <_dtoa_r+0x938>)
 8017524:	f7e9 f880 	bl	8000628 <__aeabi_dmul>
 8017528:	2200      	movs	r2, #0
 801752a:	2300      	movs	r3, #0
 801752c:	4606      	mov	r6, r0
 801752e:	460f      	mov	r7, r1
 8017530:	f7e9 fae2 	bl	8000af8 <__aeabi_dcmpeq>
 8017534:	2800      	cmp	r0, #0
 8017536:	d09a      	beq.n	801746e <_dtoa_r+0x616>
 8017538:	e7cb      	b.n	80174d2 <_dtoa_r+0x67a>
 801753a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801753c:	2a00      	cmp	r2, #0
 801753e:	f000 808b 	beq.w	8017658 <_dtoa_r+0x800>
 8017542:	9a06      	ldr	r2, [sp, #24]
 8017544:	2a01      	cmp	r2, #1
 8017546:	dc6e      	bgt.n	8017626 <_dtoa_r+0x7ce>
 8017548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801754a:	2a00      	cmp	r2, #0
 801754c:	d067      	beq.n	801761e <_dtoa_r+0x7c6>
 801754e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017552:	9f07      	ldr	r7, [sp, #28]
 8017554:	9d05      	ldr	r5, [sp, #20]
 8017556:	9a05      	ldr	r2, [sp, #20]
 8017558:	2101      	movs	r1, #1
 801755a:	441a      	add	r2, r3
 801755c:	4620      	mov	r0, r4
 801755e:	9205      	str	r2, [sp, #20]
 8017560:	4498      	add	r8, r3
 8017562:	f000 feb0 	bl	80182c6 <__i2b>
 8017566:	4606      	mov	r6, r0
 8017568:	2d00      	cmp	r5, #0
 801756a:	dd0c      	ble.n	8017586 <_dtoa_r+0x72e>
 801756c:	f1b8 0f00 	cmp.w	r8, #0
 8017570:	dd09      	ble.n	8017586 <_dtoa_r+0x72e>
 8017572:	4545      	cmp	r5, r8
 8017574:	9a05      	ldr	r2, [sp, #20]
 8017576:	462b      	mov	r3, r5
 8017578:	bfa8      	it	ge
 801757a:	4643      	movge	r3, r8
 801757c:	1ad2      	subs	r2, r2, r3
 801757e:	9205      	str	r2, [sp, #20]
 8017580:	1aed      	subs	r5, r5, r3
 8017582:	eba8 0803 	sub.w	r8, r8, r3
 8017586:	9b07      	ldr	r3, [sp, #28]
 8017588:	b1eb      	cbz	r3, 80175c6 <_dtoa_r+0x76e>
 801758a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801758c:	2b00      	cmp	r3, #0
 801758e:	d067      	beq.n	8017660 <_dtoa_r+0x808>
 8017590:	b18f      	cbz	r7, 80175b6 <_dtoa_r+0x75e>
 8017592:	4631      	mov	r1, r6
 8017594:	463a      	mov	r2, r7
 8017596:	4620      	mov	r0, r4
 8017598:	f000 ff34 	bl	8018404 <__pow5mult>
 801759c:	9a04      	ldr	r2, [sp, #16]
 801759e:	4601      	mov	r1, r0
 80175a0:	4606      	mov	r6, r0
 80175a2:	4620      	mov	r0, r4
 80175a4:	f000 fe98 	bl	80182d8 <__multiply>
 80175a8:	9904      	ldr	r1, [sp, #16]
 80175aa:	9008      	str	r0, [sp, #32]
 80175ac:	4620      	mov	r0, r4
 80175ae:	f000 fdac 	bl	801810a <_Bfree>
 80175b2:	9b08      	ldr	r3, [sp, #32]
 80175b4:	9304      	str	r3, [sp, #16]
 80175b6:	9b07      	ldr	r3, [sp, #28]
 80175b8:	1bda      	subs	r2, r3, r7
 80175ba:	d004      	beq.n	80175c6 <_dtoa_r+0x76e>
 80175bc:	9904      	ldr	r1, [sp, #16]
 80175be:	4620      	mov	r0, r4
 80175c0:	f000 ff20 	bl	8018404 <__pow5mult>
 80175c4:	9004      	str	r0, [sp, #16]
 80175c6:	2101      	movs	r1, #1
 80175c8:	4620      	mov	r0, r4
 80175ca:	f000 fe7c 	bl	80182c6 <__i2b>
 80175ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175d0:	4607      	mov	r7, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	f000 81d0 	beq.w	8017978 <_dtoa_r+0xb20>
 80175d8:	461a      	mov	r2, r3
 80175da:	4601      	mov	r1, r0
 80175dc:	4620      	mov	r0, r4
 80175de:	f000 ff11 	bl	8018404 <__pow5mult>
 80175e2:	9b06      	ldr	r3, [sp, #24]
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	4607      	mov	r7, r0
 80175e8:	dc40      	bgt.n	801766c <_dtoa_r+0x814>
 80175ea:	9b00      	ldr	r3, [sp, #0]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d139      	bne.n	8017664 <_dtoa_r+0x80c>
 80175f0:	9b01      	ldr	r3, [sp, #4]
 80175f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d136      	bne.n	8017668 <_dtoa_r+0x810>
 80175fa:	9b01      	ldr	r3, [sp, #4]
 80175fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017600:	0d1b      	lsrs	r3, r3, #20
 8017602:	051b      	lsls	r3, r3, #20
 8017604:	b12b      	cbz	r3, 8017612 <_dtoa_r+0x7ba>
 8017606:	9b05      	ldr	r3, [sp, #20]
 8017608:	3301      	adds	r3, #1
 801760a:	9305      	str	r3, [sp, #20]
 801760c:	f108 0801 	add.w	r8, r8, #1
 8017610:	2301      	movs	r3, #1
 8017612:	9307      	str	r3, [sp, #28]
 8017614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017616:	2b00      	cmp	r3, #0
 8017618:	d12a      	bne.n	8017670 <_dtoa_r+0x818>
 801761a:	2001      	movs	r0, #1
 801761c:	e030      	b.n	8017680 <_dtoa_r+0x828>
 801761e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017620:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017624:	e795      	b.n	8017552 <_dtoa_r+0x6fa>
 8017626:	9b07      	ldr	r3, [sp, #28]
 8017628:	f109 37ff 	add.w	r7, r9, #4294967295
 801762c:	42bb      	cmp	r3, r7
 801762e:	bfbf      	itttt	lt
 8017630:	9b07      	ldrlt	r3, [sp, #28]
 8017632:	9707      	strlt	r7, [sp, #28]
 8017634:	1afa      	sublt	r2, r7, r3
 8017636:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017638:	bfbb      	ittet	lt
 801763a:	189b      	addlt	r3, r3, r2
 801763c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801763e:	1bdf      	subge	r7, r3, r7
 8017640:	2700      	movlt	r7, #0
 8017642:	f1b9 0f00 	cmp.w	r9, #0
 8017646:	bfb5      	itete	lt
 8017648:	9b05      	ldrlt	r3, [sp, #20]
 801764a:	9d05      	ldrge	r5, [sp, #20]
 801764c:	eba3 0509 	sublt.w	r5, r3, r9
 8017650:	464b      	movge	r3, r9
 8017652:	bfb8      	it	lt
 8017654:	2300      	movlt	r3, #0
 8017656:	e77e      	b.n	8017556 <_dtoa_r+0x6fe>
 8017658:	9f07      	ldr	r7, [sp, #28]
 801765a:	9d05      	ldr	r5, [sp, #20]
 801765c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801765e:	e783      	b.n	8017568 <_dtoa_r+0x710>
 8017660:	9a07      	ldr	r2, [sp, #28]
 8017662:	e7ab      	b.n	80175bc <_dtoa_r+0x764>
 8017664:	2300      	movs	r3, #0
 8017666:	e7d4      	b.n	8017612 <_dtoa_r+0x7ba>
 8017668:	9b00      	ldr	r3, [sp, #0]
 801766a:	e7d2      	b.n	8017612 <_dtoa_r+0x7ba>
 801766c:	2300      	movs	r3, #0
 801766e:	9307      	str	r3, [sp, #28]
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017676:	6918      	ldr	r0, [r3, #16]
 8017678:	f000 fdd7 	bl	801822a <__hi0bits>
 801767c:	f1c0 0020 	rsb	r0, r0, #32
 8017680:	4440      	add	r0, r8
 8017682:	f010 001f 	ands.w	r0, r0, #31
 8017686:	d047      	beq.n	8017718 <_dtoa_r+0x8c0>
 8017688:	f1c0 0320 	rsb	r3, r0, #32
 801768c:	2b04      	cmp	r3, #4
 801768e:	dd3b      	ble.n	8017708 <_dtoa_r+0x8b0>
 8017690:	9b05      	ldr	r3, [sp, #20]
 8017692:	f1c0 001c 	rsb	r0, r0, #28
 8017696:	4403      	add	r3, r0
 8017698:	9305      	str	r3, [sp, #20]
 801769a:	4405      	add	r5, r0
 801769c:	4480      	add	r8, r0
 801769e:	9b05      	ldr	r3, [sp, #20]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	dd05      	ble.n	80176b0 <_dtoa_r+0x858>
 80176a4:	461a      	mov	r2, r3
 80176a6:	9904      	ldr	r1, [sp, #16]
 80176a8:	4620      	mov	r0, r4
 80176aa:	f000 fef9 	bl	80184a0 <__lshift>
 80176ae:	9004      	str	r0, [sp, #16]
 80176b0:	f1b8 0f00 	cmp.w	r8, #0
 80176b4:	dd05      	ble.n	80176c2 <_dtoa_r+0x86a>
 80176b6:	4639      	mov	r1, r7
 80176b8:	4642      	mov	r2, r8
 80176ba:	4620      	mov	r0, r4
 80176bc:	f000 fef0 	bl	80184a0 <__lshift>
 80176c0:	4607      	mov	r7, r0
 80176c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176c4:	b353      	cbz	r3, 801771c <_dtoa_r+0x8c4>
 80176c6:	4639      	mov	r1, r7
 80176c8:	9804      	ldr	r0, [sp, #16]
 80176ca:	f000 ff3d 	bl	8018548 <__mcmp>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	da24      	bge.n	801771c <_dtoa_r+0x8c4>
 80176d2:	2300      	movs	r3, #0
 80176d4:	220a      	movs	r2, #10
 80176d6:	9904      	ldr	r1, [sp, #16]
 80176d8:	4620      	mov	r0, r4
 80176da:	f000 fd2d 	bl	8018138 <__multadd>
 80176de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176e0:	9004      	str	r0, [sp, #16]
 80176e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	f000 814d 	beq.w	8017986 <_dtoa_r+0xb2e>
 80176ec:	2300      	movs	r3, #0
 80176ee:	4631      	mov	r1, r6
 80176f0:	220a      	movs	r2, #10
 80176f2:	4620      	mov	r0, r4
 80176f4:	f000 fd20 	bl	8018138 <__multadd>
 80176f8:	9b02      	ldr	r3, [sp, #8]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	4606      	mov	r6, r0
 80176fe:	dc4f      	bgt.n	80177a0 <_dtoa_r+0x948>
 8017700:	9b06      	ldr	r3, [sp, #24]
 8017702:	2b02      	cmp	r3, #2
 8017704:	dd4c      	ble.n	80177a0 <_dtoa_r+0x948>
 8017706:	e011      	b.n	801772c <_dtoa_r+0x8d4>
 8017708:	d0c9      	beq.n	801769e <_dtoa_r+0x846>
 801770a:	9a05      	ldr	r2, [sp, #20]
 801770c:	331c      	adds	r3, #28
 801770e:	441a      	add	r2, r3
 8017710:	9205      	str	r2, [sp, #20]
 8017712:	441d      	add	r5, r3
 8017714:	4498      	add	r8, r3
 8017716:	e7c2      	b.n	801769e <_dtoa_r+0x846>
 8017718:	4603      	mov	r3, r0
 801771a:	e7f6      	b.n	801770a <_dtoa_r+0x8b2>
 801771c:	f1b9 0f00 	cmp.w	r9, #0
 8017720:	dc38      	bgt.n	8017794 <_dtoa_r+0x93c>
 8017722:	9b06      	ldr	r3, [sp, #24]
 8017724:	2b02      	cmp	r3, #2
 8017726:	dd35      	ble.n	8017794 <_dtoa_r+0x93c>
 8017728:	f8cd 9008 	str.w	r9, [sp, #8]
 801772c:	9b02      	ldr	r3, [sp, #8]
 801772e:	b963      	cbnz	r3, 801774a <_dtoa_r+0x8f2>
 8017730:	4639      	mov	r1, r7
 8017732:	2205      	movs	r2, #5
 8017734:	4620      	mov	r0, r4
 8017736:	f000 fcff 	bl	8018138 <__multadd>
 801773a:	4601      	mov	r1, r0
 801773c:	4607      	mov	r7, r0
 801773e:	9804      	ldr	r0, [sp, #16]
 8017740:	f000 ff02 	bl	8018548 <__mcmp>
 8017744:	2800      	cmp	r0, #0
 8017746:	f73f adcc 	bgt.w	80172e2 <_dtoa_r+0x48a>
 801774a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801774c:	465d      	mov	r5, fp
 801774e:	ea6f 0a03 	mvn.w	sl, r3
 8017752:	f04f 0900 	mov.w	r9, #0
 8017756:	4639      	mov	r1, r7
 8017758:	4620      	mov	r0, r4
 801775a:	f000 fcd6 	bl	801810a <_Bfree>
 801775e:	2e00      	cmp	r6, #0
 8017760:	f43f aeb7 	beq.w	80174d2 <_dtoa_r+0x67a>
 8017764:	f1b9 0f00 	cmp.w	r9, #0
 8017768:	d005      	beq.n	8017776 <_dtoa_r+0x91e>
 801776a:	45b1      	cmp	r9, r6
 801776c:	d003      	beq.n	8017776 <_dtoa_r+0x91e>
 801776e:	4649      	mov	r1, r9
 8017770:	4620      	mov	r0, r4
 8017772:	f000 fcca 	bl	801810a <_Bfree>
 8017776:	4631      	mov	r1, r6
 8017778:	4620      	mov	r0, r4
 801777a:	f000 fcc6 	bl	801810a <_Bfree>
 801777e:	e6a8      	b.n	80174d2 <_dtoa_r+0x67a>
 8017780:	2700      	movs	r7, #0
 8017782:	463e      	mov	r6, r7
 8017784:	e7e1      	b.n	801774a <_dtoa_r+0x8f2>
 8017786:	f8dd a020 	ldr.w	sl, [sp, #32]
 801778a:	463e      	mov	r6, r7
 801778c:	e5a9      	b.n	80172e2 <_dtoa_r+0x48a>
 801778e:	bf00      	nop
 8017790:	40240000 	.word	0x40240000
 8017794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017796:	f8cd 9008 	str.w	r9, [sp, #8]
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 80fa 	beq.w	8017994 <_dtoa_r+0xb3c>
 80177a0:	2d00      	cmp	r5, #0
 80177a2:	dd05      	ble.n	80177b0 <_dtoa_r+0x958>
 80177a4:	4631      	mov	r1, r6
 80177a6:	462a      	mov	r2, r5
 80177a8:	4620      	mov	r0, r4
 80177aa:	f000 fe79 	bl	80184a0 <__lshift>
 80177ae:	4606      	mov	r6, r0
 80177b0:	9b07      	ldr	r3, [sp, #28]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d04c      	beq.n	8017850 <_dtoa_r+0x9f8>
 80177b6:	6871      	ldr	r1, [r6, #4]
 80177b8:	4620      	mov	r0, r4
 80177ba:	f000 fc72 	bl	80180a2 <_Balloc>
 80177be:	6932      	ldr	r2, [r6, #16]
 80177c0:	3202      	adds	r2, #2
 80177c2:	4605      	mov	r5, r0
 80177c4:	0092      	lsls	r2, r2, #2
 80177c6:	f106 010c 	add.w	r1, r6, #12
 80177ca:	300c      	adds	r0, #12
 80177cc:	f000 fc5e 	bl	801808c <memcpy>
 80177d0:	2201      	movs	r2, #1
 80177d2:	4629      	mov	r1, r5
 80177d4:	4620      	mov	r0, r4
 80177d6:	f000 fe63 	bl	80184a0 <__lshift>
 80177da:	9b00      	ldr	r3, [sp, #0]
 80177dc:	f8cd b014 	str.w	fp, [sp, #20]
 80177e0:	f003 0301 	and.w	r3, r3, #1
 80177e4:	46b1      	mov	r9, r6
 80177e6:	9307      	str	r3, [sp, #28]
 80177e8:	4606      	mov	r6, r0
 80177ea:	4639      	mov	r1, r7
 80177ec:	9804      	ldr	r0, [sp, #16]
 80177ee:	f7ff faa5 	bl	8016d3c <quorem>
 80177f2:	4649      	mov	r1, r9
 80177f4:	4605      	mov	r5, r0
 80177f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80177fa:	9804      	ldr	r0, [sp, #16]
 80177fc:	f000 fea4 	bl	8018548 <__mcmp>
 8017800:	4632      	mov	r2, r6
 8017802:	9000      	str	r0, [sp, #0]
 8017804:	4639      	mov	r1, r7
 8017806:	4620      	mov	r0, r4
 8017808:	f000 feb8 	bl	801857c <__mdiff>
 801780c:	68c3      	ldr	r3, [r0, #12]
 801780e:	4602      	mov	r2, r0
 8017810:	bb03      	cbnz	r3, 8017854 <_dtoa_r+0x9fc>
 8017812:	4601      	mov	r1, r0
 8017814:	9008      	str	r0, [sp, #32]
 8017816:	9804      	ldr	r0, [sp, #16]
 8017818:	f000 fe96 	bl	8018548 <__mcmp>
 801781c:	9a08      	ldr	r2, [sp, #32]
 801781e:	4603      	mov	r3, r0
 8017820:	4611      	mov	r1, r2
 8017822:	4620      	mov	r0, r4
 8017824:	9308      	str	r3, [sp, #32]
 8017826:	f000 fc70 	bl	801810a <_Bfree>
 801782a:	9b08      	ldr	r3, [sp, #32]
 801782c:	b9a3      	cbnz	r3, 8017858 <_dtoa_r+0xa00>
 801782e:	9a06      	ldr	r2, [sp, #24]
 8017830:	b992      	cbnz	r2, 8017858 <_dtoa_r+0xa00>
 8017832:	9a07      	ldr	r2, [sp, #28]
 8017834:	b982      	cbnz	r2, 8017858 <_dtoa_r+0xa00>
 8017836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801783a:	d029      	beq.n	8017890 <_dtoa_r+0xa38>
 801783c:	9b00      	ldr	r3, [sp, #0]
 801783e:	2b00      	cmp	r3, #0
 8017840:	dd01      	ble.n	8017846 <_dtoa_r+0x9ee>
 8017842:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017846:	9b05      	ldr	r3, [sp, #20]
 8017848:	1c5d      	adds	r5, r3, #1
 801784a:	f883 8000 	strb.w	r8, [r3]
 801784e:	e782      	b.n	8017756 <_dtoa_r+0x8fe>
 8017850:	4630      	mov	r0, r6
 8017852:	e7c2      	b.n	80177da <_dtoa_r+0x982>
 8017854:	2301      	movs	r3, #1
 8017856:	e7e3      	b.n	8017820 <_dtoa_r+0x9c8>
 8017858:	9a00      	ldr	r2, [sp, #0]
 801785a:	2a00      	cmp	r2, #0
 801785c:	db04      	blt.n	8017868 <_dtoa_r+0xa10>
 801785e:	d125      	bne.n	80178ac <_dtoa_r+0xa54>
 8017860:	9a06      	ldr	r2, [sp, #24]
 8017862:	bb1a      	cbnz	r2, 80178ac <_dtoa_r+0xa54>
 8017864:	9a07      	ldr	r2, [sp, #28]
 8017866:	bb0a      	cbnz	r2, 80178ac <_dtoa_r+0xa54>
 8017868:	2b00      	cmp	r3, #0
 801786a:	ddec      	ble.n	8017846 <_dtoa_r+0x9ee>
 801786c:	2201      	movs	r2, #1
 801786e:	9904      	ldr	r1, [sp, #16]
 8017870:	4620      	mov	r0, r4
 8017872:	f000 fe15 	bl	80184a0 <__lshift>
 8017876:	4639      	mov	r1, r7
 8017878:	9004      	str	r0, [sp, #16]
 801787a:	f000 fe65 	bl	8018548 <__mcmp>
 801787e:	2800      	cmp	r0, #0
 8017880:	dc03      	bgt.n	801788a <_dtoa_r+0xa32>
 8017882:	d1e0      	bne.n	8017846 <_dtoa_r+0x9ee>
 8017884:	f018 0f01 	tst.w	r8, #1
 8017888:	d0dd      	beq.n	8017846 <_dtoa_r+0x9ee>
 801788a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801788e:	d1d8      	bne.n	8017842 <_dtoa_r+0x9ea>
 8017890:	9b05      	ldr	r3, [sp, #20]
 8017892:	9a05      	ldr	r2, [sp, #20]
 8017894:	1c5d      	adds	r5, r3, #1
 8017896:	2339      	movs	r3, #57	; 0x39
 8017898:	7013      	strb	r3, [r2, #0]
 801789a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801789e:	2b39      	cmp	r3, #57	; 0x39
 80178a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80178a4:	d04f      	beq.n	8017946 <_dtoa_r+0xaee>
 80178a6:	3301      	adds	r3, #1
 80178a8:	7013      	strb	r3, [r2, #0]
 80178aa:	e754      	b.n	8017756 <_dtoa_r+0x8fe>
 80178ac:	9a05      	ldr	r2, [sp, #20]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	f102 0501 	add.w	r5, r2, #1
 80178b4:	dd06      	ble.n	80178c4 <_dtoa_r+0xa6c>
 80178b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178ba:	d0e9      	beq.n	8017890 <_dtoa_r+0xa38>
 80178bc:	f108 0801 	add.w	r8, r8, #1
 80178c0:	9b05      	ldr	r3, [sp, #20]
 80178c2:	e7c2      	b.n	801784a <_dtoa_r+0x9f2>
 80178c4:	9a02      	ldr	r2, [sp, #8]
 80178c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80178ca:	eba5 030b 	sub.w	r3, r5, fp
 80178ce:	4293      	cmp	r3, r2
 80178d0:	d021      	beq.n	8017916 <_dtoa_r+0xabe>
 80178d2:	2300      	movs	r3, #0
 80178d4:	220a      	movs	r2, #10
 80178d6:	9904      	ldr	r1, [sp, #16]
 80178d8:	4620      	mov	r0, r4
 80178da:	f000 fc2d 	bl	8018138 <__multadd>
 80178de:	45b1      	cmp	r9, r6
 80178e0:	9004      	str	r0, [sp, #16]
 80178e2:	f04f 0300 	mov.w	r3, #0
 80178e6:	f04f 020a 	mov.w	r2, #10
 80178ea:	4649      	mov	r1, r9
 80178ec:	4620      	mov	r0, r4
 80178ee:	d105      	bne.n	80178fc <_dtoa_r+0xaa4>
 80178f0:	f000 fc22 	bl	8018138 <__multadd>
 80178f4:	4681      	mov	r9, r0
 80178f6:	4606      	mov	r6, r0
 80178f8:	9505      	str	r5, [sp, #20]
 80178fa:	e776      	b.n	80177ea <_dtoa_r+0x992>
 80178fc:	f000 fc1c 	bl	8018138 <__multadd>
 8017900:	4631      	mov	r1, r6
 8017902:	4681      	mov	r9, r0
 8017904:	2300      	movs	r3, #0
 8017906:	220a      	movs	r2, #10
 8017908:	4620      	mov	r0, r4
 801790a:	f000 fc15 	bl	8018138 <__multadd>
 801790e:	4606      	mov	r6, r0
 8017910:	e7f2      	b.n	80178f8 <_dtoa_r+0xaa0>
 8017912:	f04f 0900 	mov.w	r9, #0
 8017916:	2201      	movs	r2, #1
 8017918:	9904      	ldr	r1, [sp, #16]
 801791a:	4620      	mov	r0, r4
 801791c:	f000 fdc0 	bl	80184a0 <__lshift>
 8017920:	4639      	mov	r1, r7
 8017922:	9004      	str	r0, [sp, #16]
 8017924:	f000 fe10 	bl	8018548 <__mcmp>
 8017928:	2800      	cmp	r0, #0
 801792a:	dcb6      	bgt.n	801789a <_dtoa_r+0xa42>
 801792c:	d102      	bne.n	8017934 <_dtoa_r+0xadc>
 801792e:	f018 0f01 	tst.w	r8, #1
 8017932:	d1b2      	bne.n	801789a <_dtoa_r+0xa42>
 8017934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017938:	2b30      	cmp	r3, #48	; 0x30
 801793a:	f105 32ff 	add.w	r2, r5, #4294967295
 801793e:	f47f af0a 	bne.w	8017756 <_dtoa_r+0x8fe>
 8017942:	4615      	mov	r5, r2
 8017944:	e7f6      	b.n	8017934 <_dtoa_r+0xadc>
 8017946:	4593      	cmp	fp, r2
 8017948:	d105      	bne.n	8017956 <_dtoa_r+0xafe>
 801794a:	2331      	movs	r3, #49	; 0x31
 801794c:	f10a 0a01 	add.w	sl, sl, #1
 8017950:	f88b 3000 	strb.w	r3, [fp]
 8017954:	e6ff      	b.n	8017756 <_dtoa_r+0x8fe>
 8017956:	4615      	mov	r5, r2
 8017958:	e79f      	b.n	801789a <_dtoa_r+0xa42>
 801795a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80179c0 <_dtoa_r+0xb68>
 801795e:	e007      	b.n	8017970 <_dtoa_r+0xb18>
 8017960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017962:	f8df b060 	ldr.w	fp, [pc, #96]	; 80179c4 <_dtoa_r+0xb6c>
 8017966:	b11b      	cbz	r3, 8017970 <_dtoa_r+0xb18>
 8017968:	f10b 0308 	add.w	r3, fp, #8
 801796c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801796e:	6013      	str	r3, [r2, #0]
 8017970:	4658      	mov	r0, fp
 8017972:	b017      	add	sp, #92	; 0x5c
 8017974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017978:	9b06      	ldr	r3, [sp, #24]
 801797a:	2b01      	cmp	r3, #1
 801797c:	f77f ae35 	ble.w	80175ea <_dtoa_r+0x792>
 8017980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017982:	9307      	str	r3, [sp, #28]
 8017984:	e649      	b.n	801761a <_dtoa_r+0x7c2>
 8017986:	9b02      	ldr	r3, [sp, #8]
 8017988:	2b00      	cmp	r3, #0
 801798a:	dc03      	bgt.n	8017994 <_dtoa_r+0xb3c>
 801798c:	9b06      	ldr	r3, [sp, #24]
 801798e:	2b02      	cmp	r3, #2
 8017990:	f73f aecc 	bgt.w	801772c <_dtoa_r+0x8d4>
 8017994:	465d      	mov	r5, fp
 8017996:	4639      	mov	r1, r7
 8017998:	9804      	ldr	r0, [sp, #16]
 801799a:	f7ff f9cf 	bl	8016d3c <quorem>
 801799e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80179a2:	f805 8b01 	strb.w	r8, [r5], #1
 80179a6:	9a02      	ldr	r2, [sp, #8]
 80179a8:	eba5 030b 	sub.w	r3, r5, fp
 80179ac:	429a      	cmp	r2, r3
 80179ae:	ddb0      	ble.n	8017912 <_dtoa_r+0xaba>
 80179b0:	2300      	movs	r3, #0
 80179b2:	220a      	movs	r2, #10
 80179b4:	9904      	ldr	r1, [sp, #16]
 80179b6:	4620      	mov	r0, r4
 80179b8:	f000 fbbe 	bl	8018138 <__multadd>
 80179bc:	9004      	str	r0, [sp, #16]
 80179be:	e7ea      	b.n	8017996 <_dtoa_r+0xb3e>
 80179c0:	08019e43 	.word	0x08019e43
 80179c4:	08019d08 	.word	0x08019d08

080179c8 <rshift>:
 80179c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179ca:	6906      	ldr	r6, [r0, #16]
 80179cc:	114b      	asrs	r3, r1, #5
 80179ce:	429e      	cmp	r6, r3
 80179d0:	f100 0414 	add.w	r4, r0, #20
 80179d4:	dd30      	ble.n	8017a38 <rshift+0x70>
 80179d6:	f011 011f 	ands.w	r1, r1, #31
 80179da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80179de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80179e2:	d108      	bne.n	80179f6 <rshift+0x2e>
 80179e4:	4621      	mov	r1, r4
 80179e6:	42b2      	cmp	r2, r6
 80179e8:	460b      	mov	r3, r1
 80179ea:	d211      	bcs.n	8017a10 <rshift+0x48>
 80179ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80179f0:	f841 3b04 	str.w	r3, [r1], #4
 80179f4:	e7f7      	b.n	80179e6 <rshift+0x1e>
 80179f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80179fa:	f1c1 0c20 	rsb	ip, r1, #32
 80179fe:	40cd      	lsrs	r5, r1
 8017a00:	3204      	adds	r2, #4
 8017a02:	4623      	mov	r3, r4
 8017a04:	42b2      	cmp	r2, r6
 8017a06:	4617      	mov	r7, r2
 8017a08:	d30c      	bcc.n	8017a24 <rshift+0x5c>
 8017a0a:	601d      	str	r5, [r3, #0]
 8017a0c:	b105      	cbz	r5, 8017a10 <rshift+0x48>
 8017a0e:	3304      	adds	r3, #4
 8017a10:	1b1a      	subs	r2, r3, r4
 8017a12:	42a3      	cmp	r3, r4
 8017a14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017a18:	bf08      	it	eq
 8017a1a:	2300      	moveq	r3, #0
 8017a1c:	6102      	str	r2, [r0, #16]
 8017a1e:	bf08      	it	eq
 8017a20:	6143      	streq	r3, [r0, #20]
 8017a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a24:	683f      	ldr	r7, [r7, #0]
 8017a26:	fa07 f70c 	lsl.w	r7, r7, ip
 8017a2a:	433d      	orrs	r5, r7
 8017a2c:	f843 5b04 	str.w	r5, [r3], #4
 8017a30:	f852 5b04 	ldr.w	r5, [r2], #4
 8017a34:	40cd      	lsrs	r5, r1
 8017a36:	e7e5      	b.n	8017a04 <rshift+0x3c>
 8017a38:	4623      	mov	r3, r4
 8017a3a:	e7e9      	b.n	8017a10 <rshift+0x48>

08017a3c <__hexdig_fun>:
 8017a3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017a40:	2b09      	cmp	r3, #9
 8017a42:	d802      	bhi.n	8017a4a <__hexdig_fun+0xe>
 8017a44:	3820      	subs	r0, #32
 8017a46:	b2c0      	uxtb	r0, r0
 8017a48:	4770      	bx	lr
 8017a4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017a4e:	2b05      	cmp	r3, #5
 8017a50:	d801      	bhi.n	8017a56 <__hexdig_fun+0x1a>
 8017a52:	3847      	subs	r0, #71	; 0x47
 8017a54:	e7f7      	b.n	8017a46 <__hexdig_fun+0xa>
 8017a56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017a5a:	2b05      	cmp	r3, #5
 8017a5c:	d801      	bhi.n	8017a62 <__hexdig_fun+0x26>
 8017a5e:	3827      	subs	r0, #39	; 0x27
 8017a60:	e7f1      	b.n	8017a46 <__hexdig_fun+0xa>
 8017a62:	2000      	movs	r0, #0
 8017a64:	4770      	bx	lr

08017a66 <__gethex>:
 8017a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a6a:	b08b      	sub	sp, #44	; 0x2c
 8017a6c:	468a      	mov	sl, r1
 8017a6e:	9002      	str	r0, [sp, #8]
 8017a70:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017a72:	9306      	str	r3, [sp, #24]
 8017a74:	4690      	mov	r8, r2
 8017a76:	f000 fadf 	bl	8018038 <__localeconv_l>
 8017a7a:	6803      	ldr	r3, [r0, #0]
 8017a7c:	9303      	str	r3, [sp, #12]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7e8 fbbe 	bl	8000200 <strlen>
 8017a84:	9b03      	ldr	r3, [sp, #12]
 8017a86:	9001      	str	r0, [sp, #4]
 8017a88:	4403      	add	r3, r0
 8017a8a:	f04f 0b00 	mov.w	fp, #0
 8017a8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017a92:	9307      	str	r3, [sp, #28]
 8017a94:	f8da 3000 	ldr.w	r3, [sl]
 8017a98:	3302      	adds	r3, #2
 8017a9a:	461f      	mov	r7, r3
 8017a9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017aa0:	2830      	cmp	r0, #48	; 0x30
 8017aa2:	d06c      	beq.n	8017b7e <__gethex+0x118>
 8017aa4:	f7ff ffca 	bl	8017a3c <__hexdig_fun>
 8017aa8:	4604      	mov	r4, r0
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	d16a      	bne.n	8017b84 <__gethex+0x11e>
 8017aae:	9a01      	ldr	r2, [sp, #4]
 8017ab0:	9903      	ldr	r1, [sp, #12]
 8017ab2:	4638      	mov	r0, r7
 8017ab4:	f001 fc40 	bl	8019338 <strncmp>
 8017ab8:	2800      	cmp	r0, #0
 8017aba:	d166      	bne.n	8017b8a <__gethex+0x124>
 8017abc:	9b01      	ldr	r3, [sp, #4]
 8017abe:	5cf8      	ldrb	r0, [r7, r3]
 8017ac0:	18fe      	adds	r6, r7, r3
 8017ac2:	f7ff ffbb 	bl	8017a3c <__hexdig_fun>
 8017ac6:	2800      	cmp	r0, #0
 8017ac8:	d062      	beq.n	8017b90 <__gethex+0x12a>
 8017aca:	4633      	mov	r3, r6
 8017acc:	7818      	ldrb	r0, [r3, #0]
 8017ace:	2830      	cmp	r0, #48	; 0x30
 8017ad0:	461f      	mov	r7, r3
 8017ad2:	f103 0301 	add.w	r3, r3, #1
 8017ad6:	d0f9      	beq.n	8017acc <__gethex+0x66>
 8017ad8:	f7ff ffb0 	bl	8017a3c <__hexdig_fun>
 8017adc:	fab0 f580 	clz	r5, r0
 8017ae0:	096d      	lsrs	r5, r5, #5
 8017ae2:	4634      	mov	r4, r6
 8017ae4:	f04f 0b01 	mov.w	fp, #1
 8017ae8:	463a      	mov	r2, r7
 8017aea:	4616      	mov	r6, r2
 8017aec:	3201      	adds	r2, #1
 8017aee:	7830      	ldrb	r0, [r6, #0]
 8017af0:	f7ff ffa4 	bl	8017a3c <__hexdig_fun>
 8017af4:	2800      	cmp	r0, #0
 8017af6:	d1f8      	bne.n	8017aea <__gethex+0x84>
 8017af8:	9a01      	ldr	r2, [sp, #4]
 8017afa:	9903      	ldr	r1, [sp, #12]
 8017afc:	4630      	mov	r0, r6
 8017afe:	f001 fc1b 	bl	8019338 <strncmp>
 8017b02:	b950      	cbnz	r0, 8017b1a <__gethex+0xb4>
 8017b04:	b954      	cbnz	r4, 8017b1c <__gethex+0xb6>
 8017b06:	9b01      	ldr	r3, [sp, #4]
 8017b08:	18f4      	adds	r4, r6, r3
 8017b0a:	4622      	mov	r2, r4
 8017b0c:	4616      	mov	r6, r2
 8017b0e:	3201      	adds	r2, #1
 8017b10:	7830      	ldrb	r0, [r6, #0]
 8017b12:	f7ff ff93 	bl	8017a3c <__hexdig_fun>
 8017b16:	2800      	cmp	r0, #0
 8017b18:	d1f8      	bne.n	8017b0c <__gethex+0xa6>
 8017b1a:	b10c      	cbz	r4, 8017b20 <__gethex+0xba>
 8017b1c:	1ba4      	subs	r4, r4, r6
 8017b1e:	00a4      	lsls	r4, r4, #2
 8017b20:	7833      	ldrb	r3, [r6, #0]
 8017b22:	2b50      	cmp	r3, #80	; 0x50
 8017b24:	d001      	beq.n	8017b2a <__gethex+0xc4>
 8017b26:	2b70      	cmp	r3, #112	; 0x70
 8017b28:	d140      	bne.n	8017bac <__gethex+0x146>
 8017b2a:	7873      	ldrb	r3, [r6, #1]
 8017b2c:	2b2b      	cmp	r3, #43	; 0x2b
 8017b2e:	d031      	beq.n	8017b94 <__gethex+0x12e>
 8017b30:	2b2d      	cmp	r3, #45	; 0x2d
 8017b32:	d033      	beq.n	8017b9c <__gethex+0x136>
 8017b34:	1c71      	adds	r1, r6, #1
 8017b36:	f04f 0900 	mov.w	r9, #0
 8017b3a:	7808      	ldrb	r0, [r1, #0]
 8017b3c:	f7ff ff7e 	bl	8017a3c <__hexdig_fun>
 8017b40:	1e43      	subs	r3, r0, #1
 8017b42:	b2db      	uxtb	r3, r3
 8017b44:	2b18      	cmp	r3, #24
 8017b46:	d831      	bhi.n	8017bac <__gethex+0x146>
 8017b48:	f1a0 0210 	sub.w	r2, r0, #16
 8017b4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017b50:	f7ff ff74 	bl	8017a3c <__hexdig_fun>
 8017b54:	1e43      	subs	r3, r0, #1
 8017b56:	b2db      	uxtb	r3, r3
 8017b58:	2b18      	cmp	r3, #24
 8017b5a:	d922      	bls.n	8017ba2 <__gethex+0x13c>
 8017b5c:	f1b9 0f00 	cmp.w	r9, #0
 8017b60:	d000      	beq.n	8017b64 <__gethex+0xfe>
 8017b62:	4252      	negs	r2, r2
 8017b64:	4414      	add	r4, r2
 8017b66:	f8ca 1000 	str.w	r1, [sl]
 8017b6a:	b30d      	cbz	r5, 8017bb0 <__gethex+0x14a>
 8017b6c:	f1bb 0f00 	cmp.w	fp, #0
 8017b70:	bf0c      	ite	eq
 8017b72:	2706      	moveq	r7, #6
 8017b74:	2700      	movne	r7, #0
 8017b76:	4638      	mov	r0, r7
 8017b78:	b00b      	add	sp, #44	; 0x2c
 8017b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b7e:	f10b 0b01 	add.w	fp, fp, #1
 8017b82:	e78a      	b.n	8017a9a <__gethex+0x34>
 8017b84:	2500      	movs	r5, #0
 8017b86:	462c      	mov	r4, r5
 8017b88:	e7ae      	b.n	8017ae8 <__gethex+0x82>
 8017b8a:	463e      	mov	r6, r7
 8017b8c:	2501      	movs	r5, #1
 8017b8e:	e7c7      	b.n	8017b20 <__gethex+0xba>
 8017b90:	4604      	mov	r4, r0
 8017b92:	e7fb      	b.n	8017b8c <__gethex+0x126>
 8017b94:	f04f 0900 	mov.w	r9, #0
 8017b98:	1cb1      	adds	r1, r6, #2
 8017b9a:	e7ce      	b.n	8017b3a <__gethex+0xd4>
 8017b9c:	f04f 0901 	mov.w	r9, #1
 8017ba0:	e7fa      	b.n	8017b98 <__gethex+0x132>
 8017ba2:	230a      	movs	r3, #10
 8017ba4:	fb03 0202 	mla	r2, r3, r2, r0
 8017ba8:	3a10      	subs	r2, #16
 8017baa:	e7cf      	b.n	8017b4c <__gethex+0xe6>
 8017bac:	4631      	mov	r1, r6
 8017bae:	e7da      	b.n	8017b66 <__gethex+0x100>
 8017bb0:	1bf3      	subs	r3, r6, r7
 8017bb2:	3b01      	subs	r3, #1
 8017bb4:	4629      	mov	r1, r5
 8017bb6:	2b07      	cmp	r3, #7
 8017bb8:	dc49      	bgt.n	8017c4e <__gethex+0x1e8>
 8017bba:	9802      	ldr	r0, [sp, #8]
 8017bbc:	f000 fa71 	bl	80180a2 <_Balloc>
 8017bc0:	9b01      	ldr	r3, [sp, #4]
 8017bc2:	f100 0914 	add.w	r9, r0, #20
 8017bc6:	f04f 0b00 	mov.w	fp, #0
 8017bca:	f1c3 0301 	rsb	r3, r3, #1
 8017bce:	4605      	mov	r5, r0
 8017bd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8017bd4:	46da      	mov	sl, fp
 8017bd6:	9308      	str	r3, [sp, #32]
 8017bd8:	42b7      	cmp	r7, r6
 8017bda:	d33b      	bcc.n	8017c54 <__gethex+0x1ee>
 8017bdc:	9804      	ldr	r0, [sp, #16]
 8017bde:	f840 ab04 	str.w	sl, [r0], #4
 8017be2:	eba0 0009 	sub.w	r0, r0, r9
 8017be6:	1080      	asrs	r0, r0, #2
 8017be8:	6128      	str	r0, [r5, #16]
 8017bea:	0147      	lsls	r7, r0, #5
 8017bec:	4650      	mov	r0, sl
 8017bee:	f000 fb1c 	bl	801822a <__hi0bits>
 8017bf2:	f8d8 6000 	ldr.w	r6, [r8]
 8017bf6:	1a3f      	subs	r7, r7, r0
 8017bf8:	42b7      	cmp	r7, r6
 8017bfa:	dd64      	ble.n	8017cc6 <__gethex+0x260>
 8017bfc:	1bbf      	subs	r7, r7, r6
 8017bfe:	4639      	mov	r1, r7
 8017c00:	4628      	mov	r0, r5
 8017c02:	f000 fe2b 	bl	801885c <__any_on>
 8017c06:	4682      	mov	sl, r0
 8017c08:	b178      	cbz	r0, 8017c2a <__gethex+0x1c4>
 8017c0a:	1e7b      	subs	r3, r7, #1
 8017c0c:	1159      	asrs	r1, r3, #5
 8017c0e:	f003 021f 	and.w	r2, r3, #31
 8017c12:	f04f 0a01 	mov.w	sl, #1
 8017c16:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017c1a:	fa0a f202 	lsl.w	r2, sl, r2
 8017c1e:	420a      	tst	r2, r1
 8017c20:	d003      	beq.n	8017c2a <__gethex+0x1c4>
 8017c22:	4553      	cmp	r3, sl
 8017c24:	dc46      	bgt.n	8017cb4 <__gethex+0x24e>
 8017c26:	f04f 0a02 	mov.w	sl, #2
 8017c2a:	4639      	mov	r1, r7
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	f7ff fecb 	bl	80179c8 <rshift>
 8017c32:	443c      	add	r4, r7
 8017c34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c38:	42a3      	cmp	r3, r4
 8017c3a:	da52      	bge.n	8017ce2 <__gethex+0x27c>
 8017c3c:	4629      	mov	r1, r5
 8017c3e:	9802      	ldr	r0, [sp, #8]
 8017c40:	f000 fa63 	bl	801810a <_Bfree>
 8017c44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c46:	2300      	movs	r3, #0
 8017c48:	6013      	str	r3, [r2, #0]
 8017c4a:	27a3      	movs	r7, #163	; 0xa3
 8017c4c:	e793      	b.n	8017b76 <__gethex+0x110>
 8017c4e:	3101      	adds	r1, #1
 8017c50:	105b      	asrs	r3, r3, #1
 8017c52:	e7b0      	b.n	8017bb6 <__gethex+0x150>
 8017c54:	1e73      	subs	r3, r6, #1
 8017c56:	9305      	str	r3, [sp, #20]
 8017c58:	9a07      	ldr	r2, [sp, #28]
 8017c5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	d018      	beq.n	8017c94 <__gethex+0x22e>
 8017c62:	f1bb 0f20 	cmp.w	fp, #32
 8017c66:	d107      	bne.n	8017c78 <__gethex+0x212>
 8017c68:	9b04      	ldr	r3, [sp, #16]
 8017c6a:	f8c3 a000 	str.w	sl, [r3]
 8017c6e:	3304      	adds	r3, #4
 8017c70:	f04f 0a00 	mov.w	sl, #0
 8017c74:	9304      	str	r3, [sp, #16]
 8017c76:	46d3      	mov	fp, sl
 8017c78:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017c7c:	f7ff fede 	bl	8017a3c <__hexdig_fun>
 8017c80:	f000 000f 	and.w	r0, r0, #15
 8017c84:	fa00 f00b 	lsl.w	r0, r0, fp
 8017c88:	ea4a 0a00 	orr.w	sl, sl, r0
 8017c8c:	f10b 0b04 	add.w	fp, fp, #4
 8017c90:	9b05      	ldr	r3, [sp, #20]
 8017c92:	e00d      	b.n	8017cb0 <__gethex+0x24a>
 8017c94:	9b05      	ldr	r3, [sp, #20]
 8017c96:	9a08      	ldr	r2, [sp, #32]
 8017c98:	4413      	add	r3, r2
 8017c9a:	42bb      	cmp	r3, r7
 8017c9c:	d3e1      	bcc.n	8017c62 <__gethex+0x1fc>
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	9a01      	ldr	r2, [sp, #4]
 8017ca2:	9903      	ldr	r1, [sp, #12]
 8017ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ca6:	f001 fb47 	bl	8019338 <strncmp>
 8017caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cac:	2800      	cmp	r0, #0
 8017cae:	d1d8      	bne.n	8017c62 <__gethex+0x1fc>
 8017cb0:	461e      	mov	r6, r3
 8017cb2:	e791      	b.n	8017bd8 <__gethex+0x172>
 8017cb4:	1eb9      	subs	r1, r7, #2
 8017cb6:	4628      	mov	r0, r5
 8017cb8:	f000 fdd0 	bl	801885c <__any_on>
 8017cbc:	2800      	cmp	r0, #0
 8017cbe:	d0b2      	beq.n	8017c26 <__gethex+0x1c0>
 8017cc0:	f04f 0a03 	mov.w	sl, #3
 8017cc4:	e7b1      	b.n	8017c2a <__gethex+0x1c4>
 8017cc6:	da09      	bge.n	8017cdc <__gethex+0x276>
 8017cc8:	1bf7      	subs	r7, r6, r7
 8017cca:	4629      	mov	r1, r5
 8017ccc:	463a      	mov	r2, r7
 8017cce:	9802      	ldr	r0, [sp, #8]
 8017cd0:	f000 fbe6 	bl	80184a0 <__lshift>
 8017cd4:	1be4      	subs	r4, r4, r7
 8017cd6:	4605      	mov	r5, r0
 8017cd8:	f100 0914 	add.w	r9, r0, #20
 8017cdc:	f04f 0a00 	mov.w	sl, #0
 8017ce0:	e7a8      	b.n	8017c34 <__gethex+0x1ce>
 8017ce2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017ce6:	42a0      	cmp	r0, r4
 8017ce8:	dd6a      	ble.n	8017dc0 <__gethex+0x35a>
 8017cea:	1b04      	subs	r4, r0, r4
 8017cec:	42a6      	cmp	r6, r4
 8017cee:	dc2e      	bgt.n	8017d4e <__gethex+0x2e8>
 8017cf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017cf4:	2b02      	cmp	r3, #2
 8017cf6:	d022      	beq.n	8017d3e <__gethex+0x2d8>
 8017cf8:	2b03      	cmp	r3, #3
 8017cfa:	d024      	beq.n	8017d46 <__gethex+0x2e0>
 8017cfc:	2b01      	cmp	r3, #1
 8017cfe:	d115      	bne.n	8017d2c <__gethex+0x2c6>
 8017d00:	42a6      	cmp	r6, r4
 8017d02:	d113      	bne.n	8017d2c <__gethex+0x2c6>
 8017d04:	2e01      	cmp	r6, #1
 8017d06:	dc0b      	bgt.n	8017d20 <__gethex+0x2ba>
 8017d08:	9a06      	ldr	r2, [sp, #24]
 8017d0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017d0e:	6013      	str	r3, [r2, #0]
 8017d10:	2301      	movs	r3, #1
 8017d12:	612b      	str	r3, [r5, #16]
 8017d14:	f8c9 3000 	str.w	r3, [r9]
 8017d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d1a:	2762      	movs	r7, #98	; 0x62
 8017d1c:	601d      	str	r5, [r3, #0]
 8017d1e:	e72a      	b.n	8017b76 <__gethex+0x110>
 8017d20:	1e71      	subs	r1, r6, #1
 8017d22:	4628      	mov	r0, r5
 8017d24:	f000 fd9a 	bl	801885c <__any_on>
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	d1ed      	bne.n	8017d08 <__gethex+0x2a2>
 8017d2c:	4629      	mov	r1, r5
 8017d2e:	9802      	ldr	r0, [sp, #8]
 8017d30:	f000 f9eb 	bl	801810a <_Bfree>
 8017d34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d36:	2300      	movs	r3, #0
 8017d38:	6013      	str	r3, [r2, #0]
 8017d3a:	2750      	movs	r7, #80	; 0x50
 8017d3c:	e71b      	b.n	8017b76 <__gethex+0x110>
 8017d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d0e1      	beq.n	8017d08 <__gethex+0x2a2>
 8017d44:	e7f2      	b.n	8017d2c <__gethex+0x2c6>
 8017d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d1dd      	bne.n	8017d08 <__gethex+0x2a2>
 8017d4c:	e7ee      	b.n	8017d2c <__gethex+0x2c6>
 8017d4e:	1e67      	subs	r7, r4, #1
 8017d50:	f1ba 0f00 	cmp.w	sl, #0
 8017d54:	d131      	bne.n	8017dba <__gethex+0x354>
 8017d56:	b127      	cbz	r7, 8017d62 <__gethex+0x2fc>
 8017d58:	4639      	mov	r1, r7
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	f000 fd7e 	bl	801885c <__any_on>
 8017d60:	4682      	mov	sl, r0
 8017d62:	117a      	asrs	r2, r7, #5
 8017d64:	2301      	movs	r3, #1
 8017d66:	f007 071f 	and.w	r7, r7, #31
 8017d6a:	fa03 f707 	lsl.w	r7, r3, r7
 8017d6e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017d72:	4621      	mov	r1, r4
 8017d74:	421f      	tst	r7, r3
 8017d76:	4628      	mov	r0, r5
 8017d78:	bf18      	it	ne
 8017d7a:	f04a 0a02 	orrne.w	sl, sl, #2
 8017d7e:	1b36      	subs	r6, r6, r4
 8017d80:	f7ff fe22 	bl	80179c8 <rshift>
 8017d84:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017d88:	2702      	movs	r7, #2
 8017d8a:	f1ba 0f00 	cmp.w	sl, #0
 8017d8e:	d048      	beq.n	8017e22 <__gethex+0x3bc>
 8017d90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d94:	2b02      	cmp	r3, #2
 8017d96:	d015      	beq.n	8017dc4 <__gethex+0x35e>
 8017d98:	2b03      	cmp	r3, #3
 8017d9a:	d017      	beq.n	8017dcc <__gethex+0x366>
 8017d9c:	2b01      	cmp	r3, #1
 8017d9e:	d109      	bne.n	8017db4 <__gethex+0x34e>
 8017da0:	f01a 0f02 	tst.w	sl, #2
 8017da4:	d006      	beq.n	8017db4 <__gethex+0x34e>
 8017da6:	f8d9 3000 	ldr.w	r3, [r9]
 8017daa:	ea4a 0a03 	orr.w	sl, sl, r3
 8017dae:	f01a 0f01 	tst.w	sl, #1
 8017db2:	d10e      	bne.n	8017dd2 <__gethex+0x36c>
 8017db4:	f047 0710 	orr.w	r7, r7, #16
 8017db8:	e033      	b.n	8017e22 <__gethex+0x3bc>
 8017dba:	f04f 0a01 	mov.w	sl, #1
 8017dbe:	e7d0      	b.n	8017d62 <__gethex+0x2fc>
 8017dc0:	2701      	movs	r7, #1
 8017dc2:	e7e2      	b.n	8017d8a <__gethex+0x324>
 8017dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dc6:	f1c3 0301 	rsb	r3, r3, #1
 8017dca:	9315      	str	r3, [sp, #84]	; 0x54
 8017dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d0f0      	beq.n	8017db4 <__gethex+0x34e>
 8017dd2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017dd6:	f105 0314 	add.w	r3, r5, #20
 8017dda:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017dde:	eb03 010a 	add.w	r1, r3, sl
 8017de2:	f04f 0c00 	mov.w	ip, #0
 8017de6:	4618      	mov	r0, r3
 8017de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017df0:	d01c      	beq.n	8017e2c <__gethex+0x3c6>
 8017df2:	3201      	adds	r2, #1
 8017df4:	6002      	str	r2, [r0, #0]
 8017df6:	2f02      	cmp	r7, #2
 8017df8:	f105 0314 	add.w	r3, r5, #20
 8017dfc:	d138      	bne.n	8017e70 <__gethex+0x40a>
 8017dfe:	f8d8 2000 	ldr.w	r2, [r8]
 8017e02:	3a01      	subs	r2, #1
 8017e04:	42b2      	cmp	r2, r6
 8017e06:	d10a      	bne.n	8017e1e <__gethex+0x3b8>
 8017e08:	1171      	asrs	r1, r6, #5
 8017e0a:	2201      	movs	r2, #1
 8017e0c:	f006 061f 	and.w	r6, r6, #31
 8017e10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e14:	fa02 f606 	lsl.w	r6, r2, r6
 8017e18:	421e      	tst	r6, r3
 8017e1a:	bf18      	it	ne
 8017e1c:	4617      	movne	r7, r2
 8017e1e:	f047 0720 	orr.w	r7, r7, #32
 8017e22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e24:	601d      	str	r5, [r3, #0]
 8017e26:	9b06      	ldr	r3, [sp, #24]
 8017e28:	601c      	str	r4, [r3, #0]
 8017e2a:	e6a4      	b.n	8017b76 <__gethex+0x110>
 8017e2c:	4299      	cmp	r1, r3
 8017e2e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017e32:	d8d8      	bhi.n	8017de6 <__gethex+0x380>
 8017e34:	68ab      	ldr	r3, [r5, #8]
 8017e36:	4599      	cmp	r9, r3
 8017e38:	db12      	blt.n	8017e60 <__gethex+0x3fa>
 8017e3a:	6869      	ldr	r1, [r5, #4]
 8017e3c:	9802      	ldr	r0, [sp, #8]
 8017e3e:	3101      	adds	r1, #1
 8017e40:	f000 f92f 	bl	80180a2 <_Balloc>
 8017e44:	692a      	ldr	r2, [r5, #16]
 8017e46:	3202      	adds	r2, #2
 8017e48:	f105 010c 	add.w	r1, r5, #12
 8017e4c:	4683      	mov	fp, r0
 8017e4e:	0092      	lsls	r2, r2, #2
 8017e50:	300c      	adds	r0, #12
 8017e52:	f000 f91b 	bl	801808c <memcpy>
 8017e56:	4629      	mov	r1, r5
 8017e58:	9802      	ldr	r0, [sp, #8]
 8017e5a:	f000 f956 	bl	801810a <_Bfree>
 8017e5e:	465d      	mov	r5, fp
 8017e60:	692b      	ldr	r3, [r5, #16]
 8017e62:	1c5a      	adds	r2, r3, #1
 8017e64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017e68:	612a      	str	r2, [r5, #16]
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	615a      	str	r2, [r3, #20]
 8017e6e:	e7c2      	b.n	8017df6 <__gethex+0x390>
 8017e70:	692a      	ldr	r2, [r5, #16]
 8017e72:	454a      	cmp	r2, r9
 8017e74:	dd0b      	ble.n	8017e8e <__gethex+0x428>
 8017e76:	2101      	movs	r1, #1
 8017e78:	4628      	mov	r0, r5
 8017e7a:	f7ff fda5 	bl	80179c8 <rshift>
 8017e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e82:	3401      	adds	r4, #1
 8017e84:	42a3      	cmp	r3, r4
 8017e86:	f6ff aed9 	blt.w	8017c3c <__gethex+0x1d6>
 8017e8a:	2701      	movs	r7, #1
 8017e8c:	e7c7      	b.n	8017e1e <__gethex+0x3b8>
 8017e8e:	f016 061f 	ands.w	r6, r6, #31
 8017e92:	d0fa      	beq.n	8017e8a <__gethex+0x424>
 8017e94:	449a      	add	sl, r3
 8017e96:	f1c6 0620 	rsb	r6, r6, #32
 8017e9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017e9e:	f000 f9c4 	bl	801822a <__hi0bits>
 8017ea2:	42b0      	cmp	r0, r6
 8017ea4:	dbe7      	blt.n	8017e76 <__gethex+0x410>
 8017ea6:	e7f0      	b.n	8017e8a <__gethex+0x424>

08017ea8 <L_shift>:
 8017ea8:	f1c2 0208 	rsb	r2, r2, #8
 8017eac:	0092      	lsls	r2, r2, #2
 8017eae:	b570      	push	{r4, r5, r6, lr}
 8017eb0:	f1c2 0620 	rsb	r6, r2, #32
 8017eb4:	6843      	ldr	r3, [r0, #4]
 8017eb6:	6804      	ldr	r4, [r0, #0]
 8017eb8:	fa03 f506 	lsl.w	r5, r3, r6
 8017ebc:	432c      	orrs	r4, r5
 8017ebe:	40d3      	lsrs	r3, r2
 8017ec0:	6004      	str	r4, [r0, #0]
 8017ec2:	f840 3f04 	str.w	r3, [r0, #4]!
 8017ec6:	4288      	cmp	r0, r1
 8017ec8:	d3f4      	bcc.n	8017eb4 <L_shift+0xc>
 8017eca:	bd70      	pop	{r4, r5, r6, pc}

08017ecc <__match>:
 8017ecc:	b530      	push	{r4, r5, lr}
 8017ece:	6803      	ldr	r3, [r0, #0]
 8017ed0:	3301      	adds	r3, #1
 8017ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ed6:	b914      	cbnz	r4, 8017ede <__match+0x12>
 8017ed8:	6003      	str	r3, [r0, #0]
 8017eda:	2001      	movs	r0, #1
 8017edc:	bd30      	pop	{r4, r5, pc}
 8017ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ee2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017ee6:	2d19      	cmp	r5, #25
 8017ee8:	bf98      	it	ls
 8017eea:	3220      	addls	r2, #32
 8017eec:	42a2      	cmp	r2, r4
 8017eee:	d0f0      	beq.n	8017ed2 <__match+0x6>
 8017ef0:	2000      	movs	r0, #0
 8017ef2:	e7f3      	b.n	8017edc <__match+0x10>

08017ef4 <__hexnan>:
 8017ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef8:	680b      	ldr	r3, [r1, #0]
 8017efa:	6801      	ldr	r1, [r0, #0]
 8017efc:	115f      	asrs	r7, r3, #5
 8017efe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017f02:	f013 031f 	ands.w	r3, r3, #31
 8017f06:	b087      	sub	sp, #28
 8017f08:	bf18      	it	ne
 8017f0a:	3704      	addne	r7, #4
 8017f0c:	2500      	movs	r5, #0
 8017f0e:	1f3e      	subs	r6, r7, #4
 8017f10:	4682      	mov	sl, r0
 8017f12:	4690      	mov	r8, r2
 8017f14:	9301      	str	r3, [sp, #4]
 8017f16:	f847 5c04 	str.w	r5, [r7, #-4]
 8017f1a:	46b1      	mov	r9, r6
 8017f1c:	4634      	mov	r4, r6
 8017f1e:	9502      	str	r5, [sp, #8]
 8017f20:	46ab      	mov	fp, r5
 8017f22:	784a      	ldrb	r2, [r1, #1]
 8017f24:	1c4b      	adds	r3, r1, #1
 8017f26:	9303      	str	r3, [sp, #12]
 8017f28:	b342      	cbz	r2, 8017f7c <__hexnan+0x88>
 8017f2a:	4610      	mov	r0, r2
 8017f2c:	9105      	str	r1, [sp, #20]
 8017f2e:	9204      	str	r2, [sp, #16]
 8017f30:	f7ff fd84 	bl	8017a3c <__hexdig_fun>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d143      	bne.n	8017fc0 <__hexnan+0xcc>
 8017f38:	9a04      	ldr	r2, [sp, #16]
 8017f3a:	9905      	ldr	r1, [sp, #20]
 8017f3c:	2a20      	cmp	r2, #32
 8017f3e:	d818      	bhi.n	8017f72 <__hexnan+0x7e>
 8017f40:	9b02      	ldr	r3, [sp, #8]
 8017f42:	459b      	cmp	fp, r3
 8017f44:	dd13      	ble.n	8017f6e <__hexnan+0x7a>
 8017f46:	454c      	cmp	r4, r9
 8017f48:	d206      	bcs.n	8017f58 <__hexnan+0x64>
 8017f4a:	2d07      	cmp	r5, #7
 8017f4c:	dc04      	bgt.n	8017f58 <__hexnan+0x64>
 8017f4e:	462a      	mov	r2, r5
 8017f50:	4649      	mov	r1, r9
 8017f52:	4620      	mov	r0, r4
 8017f54:	f7ff ffa8 	bl	8017ea8 <L_shift>
 8017f58:	4544      	cmp	r4, r8
 8017f5a:	d944      	bls.n	8017fe6 <__hexnan+0xf2>
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	f1a4 0904 	sub.w	r9, r4, #4
 8017f62:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f66:	f8cd b008 	str.w	fp, [sp, #8]
 8017f6a:	464c      	mov	r4, r9
 8017f6c:	461d      	mov	r5, r3
 8017f6e:	9903      	ldr	r1, [sp, #12]
 8017f70:	e7d7      	b.n	8017f22 <__hexnan+0x2e>
 8017f72:	2a29      	cmp	r2, #41	; 0x29
 8017f74:	d14a      	bne.n	801800c <__hexnan+0x118>
 8017f76:	3102      	adds	r1, #2
 8017f78:	f8ca 1000 	str.w	r1, [sl]
 8017f7c:	f1bb 0f00 	cmp.w	fp, #0
 8017f80:	d044      	beq.n	801800c <__hexnan+0x118>
 8017f82:	454c      	cmp	r4, r9
 8017f84:	d206      	bcs.n	8017f94 <__hexnan+0xa0>
 8017f86:	2d07      	cmp	r5, #7
 8017f88:	dc04      	bgt.n	8017f94 <__hexnan+0xa0>
 8017f8a:	462a      	mov	r2, r5
 8017f8c:	4649      	mov	r1, r9
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f7ff ff8a 	bl	8017ea8 <L_shift>
 8017f94:	4544      	cmp	r4, r8
 8017f96:	d928      	bls.n	8017fea <__hexnan+0xf6>
 8017f98:	4643      	mov	r3, r8
 8017f9a:	f854 2b04 	ldr.w	r2, [r4], #4
 8017f9e:	f843 2b04 	str.w	r2, [r3], #4
 8017fa2:	42a6      	cmp	r6, r4
 8017fa4:	d2f9      	bcs.n	8017f9a <__hexnan+0xa6>
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	f843 2b04 	str.w	r2, [r3], #4
 8017fac:	429e      	cmp	r6, r3
 8017fae:	d2fb      	bcs.n	8017fa8 <__hexnan+0xb4>
 8017fb0:	6833      	ldr	r3, [r6, #0]
 8017fb2:	b91b      	cbnz	r3, 8017fbc <__hexnan+0xc8>
 8017fb4:	4546      	cmp	r6, r8
 8017fb6:	d127      	bne.n	8018008 <__hexnan+0x114>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	6033      	str	r3, [r6, #0]
 8017fbc:	2005      	movs	r0, #5
 8017fbe:	e026      	b.n	801800e <__hexnan+0x11a>
 8017fc0:	3501      	adds	r5, #1
 8017fc2:	2d08      	cmp	r5, #8
 8017fc4:	f10b 0b01 	add.w	fp, fp, #1
 8017fc8:	dd06      	ble.n	8017fd8 <__hexnan+0xe4>
 8017fca:	4544      	cmp	r4, r8
 8017fcc:	d9cf      	bls.n	8017f6e <__hexnan+0x7a>
 8017fce:	2300      	movs	r3, #0
 8017fd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8017fd4:	2501      	movs	r5, #1
 8017fd6:	3c04      	subs	r4, #4
 8017fd8:	6822      	ldr	r2, [r4, #0]
 8017fda:	f000 000f 	and.w	r0, r0, #15
 8017fde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017fe2:	6020      	str	r0, [r4, #0]
 8017fe4:	e7c3      	b.n	8017f6e <__hexnan+0x7a>
 8017fe6:	2508      	movs	r5, #8
 8017fe8:	e7c1      	b.n	8017f6e <__hexnan+0x7a>
 8017fea:	9b01      	ldr	r3, [sp, #4]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d0df      	beq.n	8017fb0 <__hexnan+0xbc>
 8017ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ff4:	f1c3 0320 	rsb	r3, r3, #32
 8017ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8017ffc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018000:	401a      	ands	r2, r3
 8018002:	f847 2c04 	str.w	r2, [r7, #-4]
 8018006:	e7d3      	b.n	8017fb0 <__hexnan+0xbc>
 8018008:	3e04      	subs	r6, #4
 801800a:	e7d1      	b.n	8017fb0 <__hexnan+0xbc>
 801800c:	2004      	movs	r0, #4
 801800e:	b007      	add	sp, #28
 8018010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018014 <__locale_ctype_ptr_l>:
 8018014:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018018:	4770      	bx	lr
	...

0801801c <__locale_ctype_ptr>:
 801801c:	4b04      	ldr	r3, [pc, #16]	; (8018030 <__locale_ctype_ptr+0x14>)
 801801e:	4a05      	ldr	r2, [pc, #20]	; (8018034 <__locale_ctype_ptr+0x18>)
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	6a1b      	ldr	r3, [r3, #32]
 8018024:	2b00      	cmp	r3, #0
 8018026:	bf08      	it	eq
 8018028:	4613      	moveq	r3, r2
 801802a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801802e:	4770      	bx	lr
 8018030:	2000000c 	.word	0x2000000c
 8018034:	20000070 	.word	0x20000070

08018038 <__localeconv_l>:
 8018038:	30f0      	adds	r0, #240	; 0xf0
 801803a:	4770      	bx	lr

0801803c <_localeconv_r>:
 801803c:	4b04      	ldr	r3, [pc, #16]	; (8018050 <_localeconv_r+0x14>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	6a18      	ldr	r0, [r3, #32]
 8018042:	4b04      	ldr	r3, [pc, #16]	; (8018054 <_localeconv_r+0x18>)
 8018044:	2800      	cmp	r0, #0
 8018046:	bf08      	it	eq
 8018048:	4618      	moveq	r0, r3
 801804a:	30f0      	adds	r0, #240	; 0xf0
 801804c:	4770      	bx	lr
 801804e:	bf00      	nop
 8018050:	2000000c 	.word	0x2000000c
 8018054:	20000070 	.word	0x20000070

08018058 <malloc>:
 8018058:	4b02      	ldr	r3, [pc, #8]	; (8018064 <malloc+0xc>)
 801805a:	4601      	mov	r1, r0
 801805c:	6818      	ldr	r0, [r3, #0]
 801805e:	f000 bc7b 	b.w	8018958 <_malloc_r>
 8018062:	bf00      	nop
 8018064:	2000000c 	.word	0x2000000c

08018068 <__ascii_mbtowc>:
 8018068:	b082      	sub	sp, #8
 801806a:	b901      	cbnz	r1, 801806e <__ascii_mbtowc+0x6>
 801806c:	a901      	add	r1, sp, #4
 801806e:	b142      	cbz	r2, 8018082 <__ascii_mbtowc+0x1a>
 8018070:	b14b      	cbz	r3, 8018086 <__ascii_mbtowc+0x1e>
 8018072:	7813      	ldrb	r3, [r2, #0]
 8018074:	600b      	str	r3, [r1, #0]
 8018076:	7812      	ldrb	r2, [r2, #0]
 8018078:	1c10      	adds	r0, r2, #0
 801807a:	bf18      	it	ne
 801807c:	2001      	movne	r0, #1
 801807e:	b002      	add	sp, #8
 8018080:	4770      	bx	lr
 8018082:	4610      	mov	r0, r2
 8018084:	e7fb      	b.n	801807e <__ascii_mbtowc+0x16>
 8018086:	f06f 0001 	mvn.w	r0, #1
 801808a:	e7f8      	b.n	801807e <__ascii_mbtowc+0x16>

0801808c <memcpy>:
 801808c:	b510      	push	{r4, lr}
 801808e:	1e43      	subs	r3, r0, #1
 8018090:	440a      	add	r2, r1
 8018092:	4291      	cmp	r1, r2
 8018094:	d100      	bne.n	8018098 <memcpy+0xc>
 8018096:	bd10      	pop	{r4, pc}
 8018098:	f811 4b01 	ldrb.w	r4, [r1], #1
 801809c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80180a0:	e7f7      	b.n	8018092 <memcpy+0x6>

080180a2 <_Balloc>:
 80180a2:	b570      	push	{r4, r5, r6, lr}
 80180a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80180a6:	4604      	mov	r4, r0
 80180a8:	460e      	mov	r6, r1
 80180aa:	b93d      	cbnz	r5, 80180bc <_Balloc+0x1a>
 80180ac:	2010      	movs	r0, #16
 80180ae:	f7ff ffd3 	bl	8018058 <malloc>
 80180b2:	6260      	str	r0, [r4, #36]	; 0x24
 80180b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80180b8:	6005      	str	r5, [r0, #0]
 80180ba:	60c5      	str	r5, [r0, #12]
 80180bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80180be:	68eb      	ldr	r3, [r5, #12]
 80180c0:	b183      	cbz	r3, 80180e4 <_Balloc+0x42>
 80180c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80180ca:	b9b8      	cbnz	r0, 80180fc <_Balloc+0x5a>
 80180cc:	2101      	movs	r1, #1
 80180ce:	fa01 f506 	lsl.w	r5, r1, r6
 80180d2:	1d6a      	adds	r2, r5, #5
 80180d4:	0092      	lsls	r2, r2, #2
 80180d6:	4620      	mov	r0, r4
 80180d8:	f000 fbe1 	bl	801889e <_calloc_r>
 80180dc:	b160      	cbz	r0, 80180f8 <_Balloc+0x56>
 80180de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80180e2:	e00e      	b.n	8018102 <_Balloc+0x60>
 80180e4:	2221      	movs	r2, #33	; 0x21
 80180e6:	2104      	movs	r1, #4
 80180e8:	4620      	mov	r0, r4
 80180ea:	f000 fbd8 	bl	801889e <_calloc_r>
 80180ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180f0:	60e8      	str	r0, [r5, #12]
 80180f2:	68db      	ldr	r3, [r3, #12]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d1e4      	bne.n	80180c2 <_Balloc+0x20>
 80180f8:	2000      	movs	r0, #0
 80180fa:	bd70      	pop	{r4, r5, r6, pc}
 80180fc:	6802      	ldr	r2, [r0, #0]
 80180fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018102:	2300      	movs	r3, #0
 8018104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018108:	e7f7      	b.n	80180fa <_Balloc+0x58>

0801810a <_Bfree>:
 801810a:	b570      	push	{r4, r5, r6, lr}
 801810c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801810e:	4606      	mov	r6, r0
 8018110:	460d      	mov	r5, r1
 8018112:	b93c      	cbnz	r4, 8018124 <_Bfree+0x1a>
 8018114:	2010      	movs	r0, #16
 8018116:	f7ff ff9f 	bl	8018058 <malloc>
 801811a:	6270      	str	r0, [r6, #36]	; 0x24
 801811c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018120:	6004      	str	r4, [r0, #0]
 8018122:	60c4      	str	r4, [r0, #12]
 8018124:	b13d      	cbz	r5, 8018136 <_Bfree+0x2c>
 8018126:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018128:	686a      	ldr	r2, [r5, #4]
 801812a:	68db      	ldr	r3, [r3, #12]
 801812c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018130:	6029      	str	r1, [r5, #0]
 8018132:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018136:	bd70      	pop	{r4, r5, r6, pc}

08018138 <__multadd>:
 8018138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801813c:	690d      	ldr	r5, [r1, #16]
 801813e:	461f      	mov	r7, r3
 8018140:	4606      	mov	r6, r0
 8018142:	460c      	mov	r4, r1
 8018144:	f101 0c14 	add.w	ip, r1, #20
 8018148:	2300      	movs	r3, #0
 801814a:	f8dc 0000 	ldr.w	r0, [ip]
 801814e:	b281      	uxth	r1, r0
 8018150:	fb02 7101 	mla	r1, r2, r1, r7
 8018154:	0c0f      	lsrs	r7, r1, #16
 8018156:	0c00      	lsrs	r0, r0, #16
 8018158:	fb02 7000 	mla	r0, r2, r0, r7
 801815c:	b289      	uxth	r1, r1
 801815e:	3301      	adds	r3, #1
 8018160:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018164:	429d      	cmp	r5, r3
 8018166:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801816a:	f84c 1b04 	str.w	r1, [ip], #4
 801816e:	dcec      	bgt.n	801814a <__multadd+0x12>
 8018170:	b1d7      	cbz	r7, 80181a8 <__multadd+0x70>
 8018172:	68a3      	ldr	r3, [r4, #8]
 8018174:	42ab      	cmp	r3, r5
 8018176:	dc12      	bgt.n	801819e <__multadd+0x66>
 8018178:	6861      	ldr	r1, [r4, #4]
 801817a:	4630      	mov	r0, r6
 801817c:	3101      	adds	r1, #1
 801817e:	f7ff ff90 	bl	80180a2 <_Balloc>
 8018182:	6922      	ldr	r2, [r4, #16]
 8018184:	3202      	adds	r2, #2
 8018186:	f104 010c 	add.w	r1, r4, #12
 801818a:	4680      	mov	r8, r0
 801818c:	0092      	lsls	r2, r2, #2
 801818e:	300c      	adds	r0, #12
 8018190:	f7ff ff7c 	bl	801808c <memcpy>
 8018194:	4621      	mov	r1, r4
 8018196:	4630      	mov	r0, r6
 8018198:	f7ff ffb7 	bl	801810a <_Bfree>
 801819c:	4644      	mov	r4, r8
 801819e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80181a2:	3501      	adds	r5, #1
 80181a4:	615f      	str	r7, [r3, #20]
 80181a6:	6125      	str	r5, [r4, #16]
 80181a8:	4620      	mov	r0, r4
 80181aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080181ae <__s2b>:
 80181ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181b2:	460c      	mov	r4, r1
 80181b4:	4615      	mov	r5, r2
 80181b6:	461f      	mov	r7, r3
 80181b8:	2209      	movs	r2, #9
 80181ba:	3308      	adds	r3, #8
 80181bc:	4606      	mov	r6, r0
 80181be:	fb93 f3f2 	sdiv	r3, r3, r2
 80181c2:	2100      	movs	r1, #0
 80181c4:	2201      	movs	r2, #1
 80181c6:	429a      	cmp	r2, r3
 80181c8:	db20      	blt.n	801820c <__s2b+0x5e>
 80181ca:	4630      	mov	r0, r6
 80181cc:	f7ff ff69 	bl	80180a2 <_Balloc>
 80181d0:	9b08      	ldr	r3, [sp, #32]
 80181d2:	6143      	str	r3, [r0, #20]
 80181d4:	2d09      	cmp	r5, #9
 80181d6:	f04f 0301 	mov.w	r3, #1
 80181da:	6103      	str	r3, [r0, #16]
 80181dc:	dd19      	ble.n	8018212 <__s2b+0x64>
 80181de:	f104 0809 	add.w	r8, r4, #9
 80181e2:	46c1      	mov	r9, r8
 80181e4:	442c      	add	r4, r5
 80181e6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80181ea:	4601      	mov	r1, r0
 80181ec:	3b30      	subs	r3, #48	; 0x30
 80181ee:	220a      	movs	r2, #10
 80181f0:	4630      	mov	r0, r6
 80181f2:	f7ff ffa1 	bl	8018138 <__multadd>
 80181f6:	45a1      	cmp	r9, r4
 80181f8:	d1f5      	bne.n	80181e6 <__s2b+0x38>
 80181fa:	eb08 0405 	add.w	r4, r8, r5
 80181fe:	3c08      	subs	r4, #8
 8018200:	1b2d      	subs	r5, r5, r4
 8018202:	1963      	adds	r3, r4, r5
 8018204:	42bb      	cmp	r3, r7
 8018206:	db07      	blt.n	8018218 <__s2b+0x6a>
 8018208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801820c:	0052      	lsls	r2, r2, #1
 801820e:	3101      	adds	r1, #1
 8018210:	e7d9      	b.n	80181c6 <__s2b+0x18>
 8018212:	340a      	adds	r4, #10
 8018214:	2509      	movs	r5, #9
 8018216:	e7f3      	b.n	8018200 <__s2b+0x52>
 8018218:	f814 3b01 	ldrb.w	r3, [r4], #1
 801821c:	4601      	mov	r1, r0
 801821e:	3b30      	subs	r3, #48	; 0x30
 8018220:	220a      	movs	r2, #10
 8018222:	4630      	mov	r0, r6
 8018224:	f7ff ff88 	bl	8018138 <__multadd>
 8018228:	e7eb      	b.n	8018202 <__s2b+0x54>

0801822a <__hi0bits>:
 801822a:	0c02      	lsrs	r2, r0, #16
 801822c:	0412      	lsls	r2, r2, #16
 801822e:	4603      	mov	r3, r0
 8018230:	b9b2      	cbnz	r2, 8018260 <__hi0bits+0x36>
 8018232:	0403      	lsls	r3, r0, #16
 8018234:	2010      	movs	r0, #16
 8018236:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801823a:	bf04      	itt	eq
 801823c:	021b      	lsleq	r3, r3, #8
 801823e:	3008      	addeq	r0, #8
 8018240:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018244:	bf04      	itt	eq
 8018246:	011b      	lsleq	r3, r3, #4
 8018248:	3004      	addeq	r0, #4
 801824a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801824e:	bf04      	itt	eq
 8018250:	009b      	lsleq	r3, r3, #2
 8018252:	3002      	addeq	r0, #2
 8018254:	2b00      	cmp	r3, #0
 8018256:	db06      	blt.n	8018266 <__hi0bits+0x3c>
 8018258:	005b      	lsls	r3, r3, #1
 801825a:	d503      	bpl.n	8018264 <__hi0bits+0x3a>
 801825c:	3001      	adds	r0, #1
 801825e:	4770      	bx	lr
 8018260:	2000      	movs	r0, #0
 8018262:	e7e8      	b.n	8018236 <__hi0bits+0xc>
 8018264:	2020      	movs	r0, #32
 8018266:	4770      	bx	lr

08018268 <__lo0bits>:
 8018268:	6803      	ldr	r3, [r0, #0]
 801826a:	f013 0207 	ands.w	r2, r3, #7
 801826e:	4601      	mov	r1, r0
 8018270:	d00b      	beq.n	801828a <__lo0bits+0x22>
 8018272:	07da      	lsls	r2, r3, #31
 8018274:	d423      	bmi.n	80182be <__lo0bits+0x56>
 8018276:	0798      	lsls	r0, r3, #30
 8018278:	bf49      	itett	mi
 801827a:	085b      	lsrmi	r3, r3, #1
 801827c:	089b      	lsrpl	r3, r3, #2
 801827e:	2001      	movmi	r0, #1
 8018280:	600b      	strmi	r3, [r1, #0]
 8018282:	bf5c      	itt	pl
 8018284:	600b      	strpl	r3, [r1, #0]
 8018286:	2002      	movpl	r0, #2
 8018288:	4770      	bx	lr
 801828a:	b298      	uxth	r0, r3
 801828c:	b9a8      	cbnz	r0, 80182ba <__lo0bits+0x52>
 801828e:	0c1b      	lsrs	r3, r3, #16
 8018290:	2010      	movs	r0, #16
 8018292:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018296:	bf04      	itt	eq
 8018298:	0a1b      	lsreq	r3, r3, #8
 801829a:	3008      	addeq	r0, #8
 801829c:	071a      	lsls	r2, r3, #28
 801829e:	bf04      	itt	eq
 80182a0:	091b      	lsreq	r3, r3, #4
 80182a2:	3004      	addeq	r0, #4
 80182a4:	079a      	lsls	r2, r3, #30
 80182a6:	bf04      	itt	eq
 80182a8:	089b      	lsreq	r3, r3, #2
 80182aa:	3002      	addeq	r0, #2
 80182ac:	07da      	lsls	r2, r3, #31
 80182ae:	d402      	bmi.n	80182b6 <__lo0bits+0x4e>
 80182b0:	085b      	lsrs	r3, r3, #1
 80182b2:	d006      	beq.n	80182c2 <__lo0bits+0x5a>
 80182b4:	3001      	adds	r0, #1
 80182b6:	600b      	str	r3, [r1, #0]
 80182b8:	4770      	bx	lr
 80182ba:	4610      	mov	r0, r2
 80182bc:	e7e9      	b.n	8018292 <__lo0bits+0x2a>
 80182be:	2000      	movs	r0, #0
 80182c0:	4770      	bx	lr
 80182c2:	2020      	movs	r0, #32
 80182c4:	4770      	bx	lr

080182c6 <__i2b>:
 80182c6:	b510      	push	{r4, lr}
 80182c8:	460c      	mov	r4, r1
 80182ca:	2101      	movs	r1, #1
 80182cc:	f7ff fee9 	bl	80180a2 <_Balloc>
 80182d0:	2201      	movs	r2, #1
 80182d2:	6144      	str	r4, [r0, #20]
 80182d4:	6102      	str	r2, [r0, #16]
 80182d6:	bd10      	pop	{r4, pc}

080182d8 <__multiply>:
 80182d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182dc:	4614      	mov	r4, r2
 80182de:	690a      	ldr	r2, [r1, #16]
 80182e0:	6923      	ldr	r3, [r4, #16]
 80182e2:	429a      	cmp	r2, r3
 80182e4:	bfb8      	it	lt
 80182e6:	460b      	movlt	r3, r1
 80182e8:	4688      	mov	r8, r1
 80182ea:	bfbc      	itt	lt
 80182ec:	46a0      	movlt	r8, r4
 80182ee:	461c      	movlt	r4, r3
 80182f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80182f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80182f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018300:	eb07 0609 	add.w	r6, r7, r9
 8018304:	42b3      	cmp	r3, r6
 8018306:	bfb8      	it	lt
 8018308:	3101      	addlt	r1, #1
 801830a:	f7ff feca 	bl	80180a2 <_Balloc>
 801830e:	f100 0514 	add.w	r5, r0, #20
 8018312:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018316:	462b      	mov	r3, r5
 8018318:	2200      	movs	r2, #0
 801831a:	4573      	cmp	r3, lr
 801831c:	d316      	bcc.n	801834c <__multiply+0x74>
 801831e:	f104 0214 	add.w	r2, r4, #20
 8018322:	f108 0114 	add.w	r1, r8, #20
 8018326:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801832a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801832e:	9300      	str	r3, [sp, #0]
 8018330:	9b00      	ldr	r3, [sp, #0]
 8018332:	9201      	str	r2, [sp, #4]
 8018334:	4293      	cmp	r3, r2
 8018336:	d80c      	bhi.n	8018352 <__multiply+0x7a>
 8018338:	2e00      	cmp	r6, #0
 801833a:	dd03      	ble.n	8018344 <__multiply+0x6c>
 801833c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018340:	2b00      	cmp	r3, #0
 8018342:	d05d      	beq.n	8018400 <__multiply+0x128>
 8018344:	6106      	str	r6, [r0, #16]
 8018346:	b003      	add	sp, #12
 8018348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801834c:	f843 2b04 	str.w	r2, [r3], #4
 8018350:	e7e3      	b.n	801831a <__multiply+0x42>
 8018352:	f8b2 b000 	ldrh.w	fp, [r2]
 8018356:	f1bb 0f00 	cmp.w	fp, #0
 801835a:	d023      	beq.n	80183a4 <__multiply+0xcc>
 801835c:	4689      	mov	r9, r1
 801835e:	46ac      	mov	ip, r5
 8018360:	f04f 0800 	mov.w	r8, #0
 8018364:	f859 4b04 	ldr.w	r4, [r9], #4
 8018368:	f8dc a000 	ldr.w	sl, [ip]
 801836c:	b2a3      	uxth	r3, r4
 801836e:	fa1f fa8a 	uxth.w	sl, sl
 8018372:	fb0b a303 	mla	r3, fp, r3, sl
 8018376:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801837a:	f8dc 4000 	ldr.w	r4, [ip]
 801837e:	4443      	add	r3, r8
 8018380:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018384:	fb0b 840a 	mla	r4, fp, sl, r8
 8018388:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801838c:	46e2      	mov	sl, ip
 801838e:	b29b      	uxth	r3, r3
 8018390:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018394:	454f      	cmp	r7, r9
 8018396:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801839a:	f84a 3b04 	str.w	r3, [sl], #4
 801839e:	d82b      	bhi.n	80183f8 <__multiply+0x120>
 80183a0:	f8cc 8004 	str.w	r8, [ip, #4]
 80183a4:	9b01      	ldr	r3, [sp, #4]
 80183a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80183aa:	3204      	adds	r2, #4
 80183ac:	f1ba 0f00 	cmp.w	sl, #0
 80183b0:	d020      	beq.n	80183f4 <__multiply+0x11c>
 80183b2:	682b      	ldr	r3, [r5, #0]
 80183b4:	4689      	mov	r9, r1
 80183b6:	46a8      	mov	r8, r5
 80183b8:	f04f 0b00 	mov.w	fp, #0
 80183bc:	f8b9 c000 	ldrh.w	ip, [r9]
 80183c0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80183c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80183c8:	445c      	add	r4, fp
 80183ca:	46c4      	mov	ip, r8
 80183cc:	b29b      	uxth	r3, r3
 80183ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80183d2:	f84c 3b04 	str.w	r3, [ip], #4
 80183d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80183da:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80183de:	0c1b      	lsrs	r3, r3, #16
 80183e0:	fb0a b303 	mla	r3, sl, r3, fp
 80183e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80183e8:	454f      	cmp	r7, r9
 80183ea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80183ee:	d805      	bhi.n	80183fc <__multiply+0x124>
 80183f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80183f4:	3504      	adds	r5, #4
 80183f6:	e79b      	b.n	8018330 <__multiply+0x58>
 80183f8:	46d4      	mov	ip, sl
 80183fa:	e7b3      	b.n	8018364 <__multiply+0x8c>
 80183fc:	46e0      	mov	r8, ip
 80183fe:	e7dd      	b.n	80183bc <__multiply+0xe4>
 8018400:	3e01      	subs	r6, #1
 8018402:	e799      	b.n	8018338 <__multiply+0x60>

08018404 <__pow5mult>:
 8018404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018408:	4615      	mov	r5, r2
 801840a:	f012 0203 	ands.w	r2, r2, #3
 801840e:	4606      	mov	r6, r0
 8018410:	460f      	mov	r7, r1
 8018412:	d007      	beq.n	8018424 <__pow5mult+0x20>
 8018414:	3a01      	subs	r2, #1
 8018416:	4c21      	ldr	r4, [pc, #132]	; (801849c <__pow5mult+0x98>)
 8018418:	2300      	movs	r3, #0
 801841a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801841e:	f7ff fe8b 	bl	8018138 <__multadd>
 8018422:	4607      	mov	r7, r0
 8018424:	10ad      	asrs	r5, r5, #2
 8018426:	d035      	beq.n	8018494 <__pow5mult+0x90>
 8018428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801842a:	b93c      	cbnz	r4, 801843c <__pow5mult+0x38>
 801842c:	2010      	movs	r0, #16
 801842e:	f7ff fe13 	bl	8018058 <malloc>
 8018432:	6270      	str	r0, [r6, #36]	; 0x24
 8018434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018438:	6004      	str	r4, [r0, #0]
 801843a:	60c4      	str	r4, [r0, #12]
 801843c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018444:	b94c      	cbnz	r4, 801845a <__pow5mult+0x56>
 8018446:	f240 2171 	movw	r1, #625	; 0x271
 801844a:	4630      	mov	r0, r6
 801844c:	f7ff ff3b 	bl	80182c6 <__i2b>
 8018450:	2300      	movs	r3, #0
 8018452:	f8c8 0008 	str.w	r0, [r8, #8]
 8018456:	4604      	mov	r4, r0
 8018458:	6003      	str	r3, [r0, #0]
 801845a:	f04f 0800 	mov.w	r8, #0
 801845e:	07eb      	lsls	r3, r5, #31
 8018460:	d50a      	bpl.n	8018478 <__pow5mult+0x74>
 8018462:	4639      	mov	r1, r7
 8018464:	4622      	mov	r2, r4
 8018466:	4630      	mov	r0, r6
 8018468:	f7ff ff36 	bl	80182d8 <__multiply>
 801846c:	4639      	mov	r1, r7
 801846e:	4681      	mov	r9, r0
 8018470:	4630      	mov	r0, r6
 8018472:	f7ff fe4a 	bl	801810a <_Bfree>
 8018476:	464f      	mov	r7, r9
 8018478:	106d      	asrs	r5, r5, #1
 801847a:	d00b      	beq.n	8018494 <__pow5mult+0x90>
 801847c:	6820      	ldr	r0, [r4, #0]
 801847e:	b938      	cbnz	r0, 8018490 <__pow5mult+0x8c>
 8018480:	4622      	mov	r2, r4
 8018482:	4621      	mov	r1, r4
 8018484:	4630      	mov	r0, r6
 8018486:	f7ff ff27 	bl	80182d8 <__multiply>
 801848a:	6020      	str	r0, [r4, #0]
 801848c:	f8c0 8000 	str.w	r8, [r0]
 8018490:	4604      	mov	r4, r0
 8018492:	e7e4      	b.n	801845e <__pow5mult+0x5a>
 8018494:	4638      	mov	r0, r7
 8018496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801849a:	bf00      	nop
 801849c:	08019e10 	.word	0x08019e10

080184a0 <__lshift>:
 80184a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184a4:	460c      	mov	r4, r1
 80184a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80184aa:	6923      	ldr	r3, [r4, #16]
 80184ac:	6849      	ldr	r1, [r1, #4]
 80184ae:	eb0a 0903 	add.w	r9, sl, r3
 80184b2:	68a3      	ldr	r3, [r4, #8]
 80184b4:	4607      	mov	r7, r0
 80184b6:	4616      	mov	r6, r2
 80184b8:	f109 0501 	add.w	r5, r9, #1
 80184bc:	42ab      	cmp	r3, r5
 80184be:	db32      	blt.n	8018526 <__lshift+0x86>
 80184c0:	4638      	mov	r0, r7
 80184c2:	f7ff fdee 	bl	80180a2 <_Balloc>
 80184c6:	2300      	movs	r3, #0
 80184c8:	4680      	mov	r8, r0
 80184ca:	f100 0114 	add.w	r1, r0, #20
 80184ce:	461a      	mov	r2, r3
 80184d0:	4553      	cmp	r3, sl
 80184d2:	db2b      	blt.n	801852c <__lshift+0x8c>
 80184d4:	6920      	ldr	r0, [r4, #16]
 80184d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80184da:	f104 0314 	add.w	r3, r4, #20
 80184de:	f016 021f 	ands.w	r2, r6, #31
 80184e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80184e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80184ea:	d025      	beq.n	8018538 <__lshift+0x98>
 80184ec:	f1c2 0e20 	rsb	lr, r2, #32
 80184f0:	2000      	movs	r0, #0
 80184f2:	681e      	ldr	r6, [r3, #0]
 80184f4:	468a      	mov	sl, r1
 80184f6:	4096      	lsls	r6, r2
 80184f8:	4330      	orrs	r0, r6
 80184fa:	f84a 0b04 	str.w	r0, [sl], #4
 80184fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8018502:	459c      	cmp	ip, r3
 8018504:	fa20 f00e 	lsr.w	r0, r0, lr
 8018508:	d814      	bhi.n	8018534 <__lshift+0x94>
 801850a:	6048      	str	r0, [r1, #4]
 801850c:	b108      	cbz	r0, 8018512 <__lshift+0x72>
 801850e:	f109 0502 	add.w	r5, r9, #2
 8018512:	3d01      	subs	r5, #1
 8018514:	4638      	mov	r0, r7
 8018516:	f8c8 5010 	str.w	r5, [r8, #16]
 801851a:	4621      	mov	r1, r4
 801851c:	f7ff fdf5 	bl	801810a <_Bfree>
 8018520:	4640      	mov	r0, r8
 8018522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018526:	3101      	adds	r1, #1
 8018528:	005b      	lsls	r3, r3, #1
 801852a:	e7c7      	b.n	80184bc <__lshift+0x1c>
 801852c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018530:	3301      	adds	r3, #1
 8018532:	e7cd      	b.n	80184d0 <__lshift+0x30>
 8018534:	4651      	mov	r1, sl
 8018536:	e7dc      	b.n	80184f2 <__lshift+0x52>
 8018538:	3904      	subs	r1, #4
 801853a:	f853 2b04 	ldr.w	r2, [r3], #4
 801853e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018542:	459c      	cmp	ip, r3
 8018544:	d8f9      	bhi.n	801853a <__lshift+0x9a>
 8018546:	e7e4      	b.n	8018512 <__lshift+0x72>

08018548 <__mcmp>:
 8018548:	6903      	ldr	r3, [r0, #16]
 801854a:	690a      	ldr	r2, [r1, #16]
 801854c:	1a9b      	subs	r3, r3, r2
 801854e:	b530      	push	{r4, r5, lr}
 8018550:	d10c      	bne.n	801856c <__mcmp+0x24>
 8018552:	0092      	lsls	r2, r2, #2
 8018554:	3014      	adds	r0, #20
 8018556:	3114      	adds	r1, #20
 8018558:	1884      	adds	r4, r0, r2
 801855a:	4411      	add	r1, r2
 801855c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018560:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018564:	4295      	cmp	r5, r2
 8018566:	d003      	beq.n	8018570 <__mcmp+0x28>
 8018568:	d305      	bcc.n	8018576 <__mcmp+0x2e>
 801856a:	2301      	movs	r3, #1
 801856c:	4618      	mov	r0, r3
 801856e:	bd30      	pop	{r4, r5, pc}
 8018570:	42a0      	cmp	r0, r4
 8018572:	d3f3      	bcc.n	801855c <__mcmp+0x14>
 8018574:	e7fa      	b.n	801856c <__mcmp+0x24>
 8018576:	f04f 33ff 	mov.w	r3, #4294967295
 801857a:	e7f7      	b.n	801856c <__mcmp+0x24>

0801857c <__mdiff>:
 801857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018580:	460d      	mov	r5, r1
 8018582:	4607      	mov	r7, r0
 8018584:	4611      	mov	r1, r2
 8018586:	4628      	mov	r0, r5
 8018588:	4614      	mov	r4, r2
 801858a:	f7ff ffdd 	bl	8018548 <__mcmp>
 801858e:	1e06      	subs	r6, r0, #0
 8018590:	d108      	bne.n	80185a4 <__mdiff+0x28>
 8018592:	4631      	mov	r1, r6
 8018594:	4638      	mov	r0, r7
 8018596:	f7ff fd84 	bl	80180a2 <_Balloc>
 801859a:	2301      	movs	r3, #1
 801859c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80185a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185a4:	bfa4      	itt	ge
 80185a6:	4623      	movge	r3, r4
 80185a8:	462c      	movge	r4, r5
 80185aa:	4638      	mov	r0, r7
 80185ac:	6861      	ldr	r1, [r4, #4]
 80185ae:	bfa6      	itte	ge
 80185b0:	461d      	movge	r5, r3
 80185b2:	2600      	movge	r6, #0
 80185b4:	2601      	movlt	r6, #1
 80185b6:	f7ff fd74 	bl	80180a2 <_Balloc>
 80185ba:	692b      	ldr	r3, [r5, #16]
 80185bc:	60c6      	str	r6, [r0, #12]
 80185be:	6926      	ldr	r6, [r4, #16]
 80185c0:	f105 0914 	add.w	r9, r5, #20
 80185c4:	f104 0214 	add.w	r2, r4, #20
 80185c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80185cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80185d0:	f100 0514 	add.w	r5, r0, #20
 80185d4:	f04f 0e00 	mov.w	lr, #0
 80185d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80185dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80185e0:	fa1e f18a 	uxtah	r1, lr, sl
 80185e4:	b2a3      	uxth	r3, r4
 80185e6:	1ac9      	subs	r1, r1, r3
 80185e8:	0c23      	lsrs	r3, r4, #16
 80185ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80185ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80185f2:	b289      	uxth	r1, r1
 80185f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80185f8:	45c8      	cmp	r8, r9
 80185fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80185fe:	4694      	mov	ip, r2
 8018600:	f845 3b04 	str.w	r3, [r5], #4
 8018604:	d8e8      	bhi.n	80185d8 <__mdiff+0x5c>
 8018606:	45bc      	cmp	ip, r7
 8018608:	d304      	bcc.n	8018614 <__mdiff+0x98>
 801860a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801860e:	b183      	cbz	r3, 8018632 <__mdiff+0xb6>
 8018610:	6106      	str	r6, [r0, #16]
 8018612:	e7c5      	b.n	80185a0 <__mdiff+0x24>
 8018614:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018618:	fa1e f381 	uxtah	r3, lr, r1
 801861c:	141a      	asrs	r2, r3, #16
 801861e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018622:	b29b      	uxth	r3, r3
 8018624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018628:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801862c:	f845 3b04 	str.w	r3, [r5], #4
 8018630:	e7e9      	b.n	8018606 <__mdiff+0x8a>
 8018632:	3e01      	subs	r6, #1
 8018634:	e7e9      	b.n	801860a <__mdiff+0x8e>
	...

08018638 <__ulp>:
 8018638:	4b12      	ldr	r3, [pc, #72]	; (8018684 <__ulp+0x4c>)
 801863a:	ee10 2a90 	vmov	r2, s1
 801863e:	401a      	ands	r2, r3
 8018640:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018644:	2b00      	cmp	r3, #0
 8018646:	dd04      	ble.n	8018652 <__ulp+0x1a>
 8018648:	2000      	movs	r0, #0
 801864a:	4619      	mov	r1, r3
 801864c:	ec41 0b10 	vmov	d0, r0, r1
 8018650:	4770      	bx	lr
 8018652:	425b      	negs	r3, r3
 8018654:	151b      	asrs	r3, r3, #20
 8018656:	2b13      	cmp	r3, #19
 8018658:	f04f 0000 	mov.w	r0, #0
 801865c:	f04f 0100 	mov.w	r1, #0
 8018660:	dc04      	bgt.n	801866c <__ulp+0x34>
 8018662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018666:	fa42 f103 	asr.w	r1, r2, r3
 801866a:	e7ef      	b.n	801864c <__ulp+0x14>
 801866c:	3b14      	subs	r3, #20
 801866e:	2b1e      	cmp	r3, #30
 8018670:	f04f 0201 	mov.w	r2, #1
 8018674:	bfda      	itte	le
 8018676:	f1c3 031f 	rsble	r3, r3, #31
 801867a:	fa02 f303 	lslle.w	r3, r2, r3
 801867e:	4613      	movgt	r3, r2
 8018680:	4618      	mov	r0, r3
 8018682:	e7e3      	b.n	801864c <__ulp+0x14>
 8018684:	7ff00000 	.word	0x7ff00000

08018688 <__b2d>:
 8018688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801868a:	6905      	ldr	r5, [r0, #16]
 801868c:	f100 0714 	add.w	r7, r0, #20
 8018690:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018694:	1f2e      	subs	r6, r5, #4
 8018696:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801869a:	4620      	mov	r0, r4
 801869c:	f7ff fdc5 	bl	801822a <__hi0bits>
 80186a0:	f1c0 0320 	rsb	r3, r0, #32
 80186a4:	280a      	cmp	r0, #10
 80186a6:	600b      	str	r3, [r1, #0]
 80186a8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018720 <__b2d+0x98>
 80186ac:	dc14      	bgt.n	80186d8 <__b2d+0x50>
 80186ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80186b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80186b6:	42b7      	cmp	r7, r6
 80186b8:	ea41 030c 	orr.w	r3, r1, ip
 80186bc:	bf34      	ite	cc
 80186be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80186c2:	2100      	movcs	r1, #0
 80186c4:	3015      	adds	r0, #21
 80186c6:	fa04 f000 	lsl.w	r0, r4, r0
 80186ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80186ce:	ea40 0201 	orr.w	r2, r0, r1
 80186d2:	ec43 2b10 	vmov	d0, r2, r3
 80186d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186d8:	42b7      	cmp	r7, r6
 80186da:	bf3a      	itte	cc
 80186dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80186e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80186e4:	2100      	movcs	r1, #0
 80186e6:	380b      	subs	r0, #11
 80186e8:	d015      	beq.n	8018716 <__b2d+0x8e>
 80186ea:	4084      	lsls	r4, r0
 80186ec:	f1c0 0520 	rsb	r5, r0, #32
 80186f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80186f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80186f8:	42be      	cmp	r6, r7
 80186fa:	fa21 fc05 	lsr.w	ip, r1, r5
 80186fe:	ea44 030c 	orr.w	r3, r4, ip
 8018702:	bf8c      	ite	hi
 8018704:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018708:	2400      	movls	r4, #0
 801870a:	fa01 f000 	lsl.w	r0, r1, r0
 801870e:	40ec      	lsrs	r4, r5
 8018710:	ea40 0204 	orr.w	r2, r0, r4
 8018714:	e7dd      	b.n	80186d2 <__b2d+0x4a>
 8018716:	ea44 030c 	orr.w	r3, r4, ip
 801871a:	460a      	mov	r2, r1
 801871c:	e7d9      	b.n	80186d2 <__b2d+0x4a>
 801871e:	bf00      	nop
 8018720:	3ff00000 	.word	0x3ff00000

08018724 <__d2b>:
 8018724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018728:	460e      	mov	r6, r1
 801872a:	2101      	movs	r1, #1
 801872c:	ec59 8b10 	vmov	r8, r9, d0
 8018730:	4615      	mov	r5, r2
 8018732:	f7ff fcb6 	bl	80180a2 <_Balloc>
 8018736:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801873a:	4607      	mov	r7, r0
 801873c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018740:	bb34      	cbnz	r4, 8018790 <__d2b+0x6c>
 8018742:	9301      	str	r3, [sp, #4]
 8018744:	f1b8 0300 	subs.w	r3, r8, #0
 8018748:	d027      	beq.n	801879a <__d2b+0x76>
 801874a:	a802      	add	r0, sp, #8
 801874c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018750:	f7ff fd8a 	bl	8018268 <__lo0bits>
 8018754:	9900      	ldr	r1, [sp, #0]
 8018756:	b1f0      	cbz	r0, 8018796 <__d2b+0x72>
 8018758:	9a01      	ldr	r2, [sp, #4]
 801875a:	f1c0 0320 	rsb	r3, r0, #32
 801875e:	fa02 f303 	lsl.w	r3, r2, r3
 8018762:	430b      	orrs	r3, r1
 8018764:	40c2      	lsrs	r2, r0
 8018766:	617b      	str	r3, [r7, #20]
 8018768:	9201      	str	r2, [sp, #4]
 801876a:	9b01      	ldr	r3, [sp, #4]
 801876c:	61bb      	str	r3, [r7, #24]
 801876e:	2b00      	cmp	r3, #0
 8018770:	bf14      	ite	ne
 8018772:	2102      	movne	r1, #2
 8018774:	2101      	moveq	r1, #1
 8018776:	6139      	str	r1, [r7, #16]
 8018778:	b1c4      	cbz	r4, 80187ac <__d2b+0x88>
 801877a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801877e:	4404      	add	r4, r0
 8018780:	6034      	str	r4, [r6, #0]
 8018782:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018786:	6028      	str	r0, [r5, #0]
 8018788:	4638      	mov	r0, r7
 801878a:	b003      	add	sp, #12
 801878c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018794:	e7d5      	b.n	8018742 <__d2b+0x1e>
 8018796:	6179      	str	r1, [r7, #20]
 8018798:	e7e7      	b.n	801876a <__d2b+0x46>
 801879a:	a801      	add	r0, sp, #4
 801879c:	f7ff fd64 	bl	8018268 <__lo0bits>
 80187a0:	9b01      	ldr	r3, [sp, #4]
 80187a2:	617b      	str	r3, [r7, #20]
 80187a4:	2101      	movs	r1, #1
 80187a6:	6139      	str	r1, [r7, #16]
 80187a8:	3020      	adds	r0, #32
 80187aa:	e7e5      	b.n	8018778 <__d2b+0x54>
 80187ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80187b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80187b4:	6030      	str	r0, [r6, #0]
 80187b6:	6918      	ldr	r0, [r3, #16]
 80187b8:	f7ff fd37 	bl	801822a <__hi0bits>
 80187bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80187c0:	e7e1      	b.n	8018786 <__d2b+0x62>

080187c2 <__ratio>:
 80187c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c6:	4688      	mov	r8, r1
 80187c8:	4669      	mov	r1, sp
 80187ca:	4681      	mov	r9, r0
 80187cc:	f7ff ff5c 	bl	8018688 <__b2d>
 80187d0:	a901      	add	r1, sp, #4
 80187d2:	4640      	mov	r0, r8
 80187d4:	ec57 6b10 	vmov	r6, r7, d0
 80187d8:	f7ff ff56 	bl	8018688 <__b2d>
 80187dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80187e4:	eba3 0c02 	sub.w	ip, r3, r2
 80187e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80187ec:	1a9b      	subs	r3, r3, r2
 80187ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80187f2:	ec5b ab10 	vmov	sl, fp, d0
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	bfce      	itee	gt
 80187fa:	463a      	movgt	r2, r7
 80187fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018800:	465a      	movle	r2, fp
 8018802:	4659      	mov	r1, fp
 8018804:	463d      	mov	r5, r7
 8018806:	bfd4      	ite	le
 8018808:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801880c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018810:	4630      	mov	r0, r6
 8018812:	ee10 2a10 	vmov	r2, s0
 8018816:	460b      	mov	r3, r1
 8018818:	4629      	mov	r1, r5
 801881a:	f7e8 f82f 	bl	800087c <__aeabi_ddiv>
 801881e:	ec41 0b10 	vmov	d0, r0, r1
 8018822:	b003      	add	sp, #12
 8018824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018828 <__copybits>:
 8018828:	3901      	subs	r1, #1
 801882a:	b510      	push	{r4, lr}
 801882c:	1149      	asrs	r1, r1, #5
 801882e:	6914      	ldr	r4, [r2, #16]
 8018830:	3101      	adds	r1, #1
 8018832:	f102 0314 	add.w	r3, r2, #20
 8018836:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801883a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801883e:	42a3      	cmp	r3, r4
 8018840:	4602      	mov	r2, r0
 8018842:	d303      	bcc.n	801884c <__copybits+0x24>
 8018844:	2300      	movs	r3, #0
 8018846:	428a      	cmp	r2, r1
 8018848:	d305      	bcc.n	8018856 <__copybits+0x2e>
 801884a:	bd10      	pop	{r4, pc}
 801884c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018850:	f840 2b04 	str.w	r2, [r0], #4
 8018854:	e7f3      	b.n	801883e <__copybits+0x16>
 8018856:	f842 3b04 	str.w	r3, [r2], #4
 801885a:	e7f4      	b.n	8018846 <__copybits+0x1e>

0801885c <__any_on>:
 801885c:	f100 0214 	add.w	r2, r0, #20
 8018860:	6900      	ldr	r0, [r0, #16]
 8018862:	114b      	asrs	r3, r1, #5
 8018864:	4298      	cmp	r0, r3
 8018866:	b510      	push	{r4, lr}
 8018868:	db11      	blt.n	801888e <__any_on+0x32>
 801886a:	dd0a      	ble.n	8018882 <__any_on+0x26>
 801886c:	f011 011f 	ands.w	r1, r1, #31
 8018870:	d007      	beq.n	8018882 <__any_on+0x26>
 8018872:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018876:	fa24 f001 	lsr.w	r0, r4, r1
 801887a:	fa00 f101 	lsl.w	r1, r0, r1
 801887e:	428c      	cmp	r4, r1
 8018880:	d10b      	bne.n	801889a <__any_on+0x3e>
 8018882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018886:	4293      	cmp	r3, r2
 8018888:	d803      	bhi.n	8018892 <__any_on+0x36>
 801888a:	2000      	movs	r0, #0
 801888c:	bd10      	pop	{r4, pc}
 801888e:	4603      	mov	r3, r0
 8018890:	e7f7      	b.n	8018882 <__any_on+0x26>
 8018892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018896:	2900      	cmp	r1, #0
 8018898:	d0f5      	beq.n	8018886 <__any_on+0x2a>
 801889a:	2001      	movs	r0, #1
 801889c:	e7f6      	b.n	801888c <__any_on+0x30>

0801889e <_calloc_r>:
 801889e:	b538      	push	{r3, r4, r5, lr}
 80188a0:	fb02 f401 	mul.w	r4, r2, r1
 80188a4:	4621      	mov	r1, r4
 80188a6:	f000 f857 	bl	8018958 <_malloc_r>
 80188aa:	4605      	mov	r5, r0
 80188ac:	b118      	cbz	r0, 80188b6 <_calloc_r+0x18>
 80188ae:	4622      	mov	r2, r4
 80188b0:	2100      	movs	r1, #0
 80188b2:	f7fc fca1 	bl	80151f8 <memset>
 80188b6:	4628      	mov	r0, r5
 80188b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080188bc <_free_r>:
 80188bc:	b538      	push	{r3, r4, r5, lr}
 80188be:	4605      	mov	r5, r0
 80188c0:	2900      	cmp	r1, #0
 80188c2:	d045      	beq.n	8018950 <_free_r+0x94>
 80188c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188c8:	1f0c      	subs	r4, r1, #4
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	bfb8      	it	lt
 80188ce:	18e4      	addlt	r4, r4, r3
 80188d0:	f000 fe30 	bl	8019534 <__malloc_lock>
 80188d4:	4a1f      	ldr	r2, [pc, #124]	; (8018954 <_free_r+0x98>)
 80188d6:	6813      	ldr	r3, [r2, #0]
 80188d8:	4610      	mov	r0, r2
 80188da:	b933      	cbnz	r3, 80188ea <_free_r+0x2e>
 80188dc:	6063      	str	r3, [r4, #4]
 80188de:	6014      	str	r4, [r2, #0]
 80188e0:	4628      	mov	r0, r5
 80188e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188e6:	f000 be26 	b.w	8019536 <__malloc_unlock>
 80188ea:	42a3      	cmp	r3, r4
 80188ec:	d90c      	bls.n	8018908 <_free_r+0x4c>
 80188ee:	6821      	ldr	r1, [r4, #0]
 80188f0:	1862      	adds	r2, r4, r1
 80188f2:	4293      	cmp	r3, r2
 80188f4:	bf04      	itt	eq
 80188f6:	681a      	ldreq	r2, [r3, #0]
 80188f8:	685b      	ldreq	r3, [r3, #4]
 80188fa:	6063      	str	r3, [r4, #4]
 80188fc:	bf04      	itt	eq
 80188fe:	1852      	addeq	r2, r2, r1
 8018900:	6022      	streq	r2, [r4, #0]
 8018902:	6004      	str	r4, [r0, #0]
 8018904:	e7ec      	b.n	80188e0 <_free_r+0x24>
 8018906:	4613      	mov	r3, r2
 8018908:	685a      	ldr	r2, [r3, #4]
 801890a:	b10a      	cbz	r2, 8018910 <_free_r+0x54>
 801890c:	42a2      	cmp	r2, r4
 801890e:	d9fa      	bls.n	8018906 <_free_r+0x4a>
 8018910:	6819      	ldr	r1, [r3, #0]
 8018912:	1858      	adds	r0, r3, r1
 8018914:	42a0      	cmp	r0, r4
 8018916:	d10b      	bne.n	8018930 <_free_r+0x74>
 8018918:	6820      	ldr	r0, [r4, #0]
 801891a:	4401      	add	r1, r0
 801891c:	1858      	adds	r0, r3, r1
 801891e:	4282      	cmp	r2, r0
 8018920:	6019      	str	r1, [r3, #0]
 8018922:	d1dd      	bne.n	80188e0 <_free_r+0x24>
 8018924:	6810      	ldr	r0, [r2, #0]
 8018926:	6852      	ldr	r2, [r2, #4]
 8018928:	605a      	str	r2, [r3, #4]
 801892a:	4401      	add	r1, r0
 801892c:	6019      	str	r1, [r3, #0]
 801892e:	e7d7      	b.n	80188e0 <_free_r+0x24>
 8018930:	d902      	bls.n	8018938 <_free_r+0x7c>
 8018932:	230c      	movs	r3, #12
 8018934:	602b      	str	r3, [r5, #0]
 8018936:	e7d3      	b.n	80188e0 <_free_r+0x24>
 8018938:	6820      	ldr	r0, [r4, #0]
 801893a:	1821      	adds	r1, r4, r0
 801893c:	428a      	cmp	r2, r1
 801893e:	bf04      	itt	eq
 8018940:	6811      	ldreq	r1, [r2, #0]
 8018942:	6852      	ldreq	r2, [r2, #4]
 8018944:	6062      	str	r2, [r4, #4]
 8018946:	bf04      	itt	eq
 8018948:	1809      	addeq	r1, r1, r0
 801894a:	6021      	streq	r1, [r4, #0]
 801894c:	605c      	str	r4, [r3, #4]
 801894e:	e7c7      	b.n	80188e0 <_free_r+0x24>
 8018950:	bd38      	pop	{r3, r4, r5, pc}
 8018952:	bf00      	nop
 8018954:	200422e8 	.word	0x200422e8

08018958 <_malloc_r>:
 8018958:	b570      	push	{r4, r5, r6, lr}
 801895a:	1ccd      	adds	r5, r1, #3
 801895c:	f025 0503 	bic.w	r5, r5, #3
 8018960:	3508      	adds	r5, #8
 8018962:	2d0c      	cmp	r5, #12
 8018964:	bf38      	it	cc
 8018966:	250c      	movcc	r5, #12
 8018968:	2d00      	cmp	r5, #0
 801896a:	4606      	mov	r6, r0
 801896c:	db01      	blt.n	8018972 <_malloc_r+0x1a>
 801896e:	42a9      	cmp	r1, r5
 8018970:	d903      	bls.n	801897a <_malloc_r+0x22>
 8018972:	230c      	movs	r3, #12
 8018974:	6033      	str	r3, [r6, #0]
 8018976:	2000      	movs	r0, #0
 8018978:	bd70      	pop	{r4, r5, r6, pc}
 801897a:	f000 fddb 	bl	8019534 <__malloc_lock>
 801897e:	4a21      	ldr	r2, [pc, #132]	; (8018a04 <_malloc_r+0xac>)
 8018980:	6814      	ldr	r4, [r2, #0]
 8018982:	4621      	mov	r1, r4
 8018984:	b991      	cbnz	r1, 80189ac <_malloc_r+0x54>
 8018986:	4c20      	ldr	r4, [pc, #128]	; (8018a08 <_malloc_r+0xb0>)
 8018988:	6823      	ldr	r3, [r4, #0]
 801898a:	b91b      	cbnz	r3, 8018994 <_malloc_r+0x3c>
 801898c:	4630      	mov	r0, r6
 801898e:	f000 fc91 	bl	80192b4 <_sbrk_r>
 8018992:	6020      	str	r0, [r4, #0]
 8018994:	4629      	mov	r1, r5
 8018996:	4630      	mov	r0, r6
 8018998:	f000 fc8c 	bl	80192b4 <_sbrk_r>
 801899c:	1c43      	adds	r3, r0, #1
 801899e:	d124      	bne.n	80189ea <_malloc_r+0x92>
 80189a0:	230c      	movs	r3, #12
 80189a2:	6033      	str	r3, [r6, #0]
 80189a4:	4630      	mov	r0, r6
 80189a6:	f000 fdc6 	bl	8019536 <__malloc_unlock>
 80189aa:	e7e4      	b.n	8018976 <_malloc_r+0x1e>
 80189ac:	680b      	ldr	r3, [r1, #0]
 80189ae:	1b5b      	subs	r3, r3, r5
 80189b0:	d418      	bmi.n	80189e4 <_malloc_r+0x8c>
 80189b2:	2b0b      	cmp	r3, #11
 80189b4:	d90f      	bls.n	80189d6 <_malloc_r+0x7e>
 80189b6:	600b      	str	r3, [r1, #0]
 80189b8:	50cd      	str	r5, [r1, r3]
 80189ba:	18cc      	adds	r4, r1, r3
 80189bc:	4630      	mov	r0, r6
 80189be:	f000 fdba 	bl	8019536 <__malloc_unlock>
 80189c2:	f104 000b 	add.w	r0, r4, #11
 80189c6:	1d23      	adds	r3, r4, #4
 80189c8:	f020 0007 	bic.w	r0, r0, #7
 80189cc:	1ac3      	subs	r3, r0, r3
 80189ce:	d0d3      	beq.n	8018978 <_malloc_r+0x20>
 80189d0:	425a      	negs	r2, r3
 80189d2:	50e2      	str	r2, [r4, r3]
 80189d4:	e7d0      	b.n	8018978 <_malloc_r+0x20>
 80189d6:	428c      	cmp	r4, r1
 80189d8:	684b      	ldr	r3, [r1, #4]
 80189da:	bf16      	itet	ne
 80189dc:	6063      	strne	r3, [r4, #4]
 80189de:	6013      	streq	r3, [r2, #0]
 80189e0:	460c      	movne	r4, r1
 80189e2:	e7eb      	b.n	80189bc <_malloc_r+0x64>
 80189e4:	460c      	mov	r4, r1
 80189e6:	6849      	ldr	r1, [r1, #4]
 80189e8:	e7cc      	b.n	8018984 <_malloc_r+0x2c>
 80189ea:	1cc4      	adds	r4, r0, #3
 80189ec:	f024 0403 	bic.w	r4, r4, #3
 80189f0:	42a0      	cmp	r0, r4
 80189f2:	d005      	beq.n	8018a00 <_malloc_r+0xa8>
 80189f4:	1a21      	subs	r1, r4, r0
 80189f6:	4630      	mov	r0, r6
 80189f8:	f000 fc5c 	bl	80192b4 <_sbrk_r>
 80189fc:	3001      	adds	r0, #1
 80189fe:	d0cf      	beq.n	80189a0 <_malloc_r+0x48>
 8018a00:	6025      	str	r5, [r4, #0]
 8018a02:	e7db      	b.n	80189bc <_malloc_r+0x64>
 8018a04:	200422e8 	.word	0x200422e8
 8018a08:	200422ec 	.word	0x200422ec

08018a0c <__ssputs_r>:
 8018a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a10:	688e      	ldr	r6, [r1, #8]
 8018a12:	429e      	cmp	r6, r3
 8018a14:	4682      	mov	sl, r0
 8018a16:	460c      	mov	r4, r1
 8018a18:	4690      	mov	r8, r2
 8018a1a:	4699      	mov	r9, r3
 8018a1c:	d837      	bhi.n	8018a8e <__ssputs_r+0x82>
 8018a1e:	898a      	ldrh	r2, [r1, #12]
 8018a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018a24:	d031      	beq.n	8018a8a <__ssputs_r+0x7e>
 8018a26:	6825      	ldr	r5, [r4, #0]
 8018a28:	6909      	ldr	r1, [r1, #16]
 8018a2a:	1a6f      	subs	r7, r5, r1
 8018a2c:	6965      	ldr	r5, [r4, #20]
 8018a2e:	2302      	movs	r3, #2
 8018a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a34:	fb95 f5f3 	sdiv	r5, r5, r3
 8018a38:	f109 0301 	add.w	r3, r9, #1
 8018a3c:	443b      	add	r3, r7
 8018a3e:	429d      	cmp	r5, r3
 8018a40:	bf38      	it	cc
 8018a42:	461d      	movcc	r5, r3
 8018a44:	0553      	lsls	r3, r2, #21
 8018a46:	d530      	bpl.n	8018aaa <__ssputs_r+0x9e>
 8018a48:	4629      	mov	r1, r5
 8018a4a:	f7ff ff85 	bl	8018958 <_malloc_r>
 8018a4e:	4606      	mov	r6, r0
 8018a50:	b950      	cbnz	r0, 8018a68 <__ssputs_r+0x5c>
 8018a52:	230c      	movs	r3, #12
 8018a54:	f8ca 3000 	str.w	r3, [sl]
 8018a58:	89a3      	ldrh	r3, [r4, #12]
 8018a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a5e:	81a3      	strh	r3, [r4, #12]
 8018a60:	f04f 30ff 	mov.w	r0, #4294967295
 8018a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a68:	463a      	mov	r2, r7
 8018a6a:	6921      	ldr	r1, [r4, #16]
 8018a6c:	f7ff fb0e 	bl	801808c <memcpy>
 8018a70:	89a3      	ldrh	r3, [r4, #12]
 8018a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a7a:	81a3      	strh	r3, [r4, #12]
 8018a7c:	6126      	str	r6, [r4, #16]
 8018a7e:	6165      	str	r5, [r4, #20]
 8018a80:	443e      	add	r6, r7
 8018a82:	1bed      	subs	r5, r5, r7
 8018a84:	6026      	str	r6, [r4, #0]
 8018a86:	60a5      	str	r5, [r4, #8]
 8018a88:	464e      	mov	r6, r9
 8018a8a:	454e      	cmp	r6, r9
 8018a8c:	d900      	bls.n	8018a90 <__ssputs_r+0x84>
 8018a8e:	464e      	mov	r6, r9
 8018a90:	4632      	mov	r2, r6
 8018a92:	4641      	mov	r1, r8
 8018a94:	6820      	ldr	r0, [r4, #0]
 8018a96:	f000 fd34 	bl	8019502 <memmove>
 8018a9a:	68a3      	ldr	r3, [r4, #8]
 8018a9c:	1b9b      	subs	r3, r3, r6
 8018a9e:	60a3      	str	r3, [r4, #8]
 8018aa0:	6823      	ldr	r3, [r4, #0]
 8018aa2:	441e      	add	r6, r3
 8018aa4:	6026      	str	r6, [r4, #0]
 8018aa6:	2000      	movs	r0, #0
 8018aa8:	e7dc      	b.n	8018a64 <__ssputs_r+0x58>
 8018aaa:	462a      	mov	r2, r5
 8018aac:	f000 fd44 	bl	8019538 <_realloc_r>
 8018ab0:	4606      	mov	r6, r0
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	d1e2      	bne.n	8018a7c <__ssputs_r+0x70>
 8018ab6:	6921      	ldr	r1, [r4, #16]
 8018ab8:	4650      	mov	r0, sl
 8018aba:	f7ff feff 	bl	80188bc <_free_r>
 8018abe:	e7c8      	b.n	8018a52 <__ssputs_r+0x46>

08018ac0 <_svfiprintf_r>:
 8018ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac4:	461d      	mov	r5, r3
 8018ac6:	898b      	ldrh	r3, [r1, #12]
 8018ac8:	061f      	lsls	r7, r3, #24
 8018aca:	b09d      	sub	sp, #116	; 0x74
 8018acc:	4680      	mov	r8, r0
 8018ace:	460c      	mov	r4, r1
 8018ad0:	4616      	mov	r6, r2
 8018ad2:	d50f      	bpl.n	8018af4 <_svfiprintf_r+0x34>
 8018ad4:	690b      	ldr	r3, [r1, #16]
 8018ad6:	b96b      	cbnz	r3, 8018af4 <_svfiprintf_r+0x34>
 8018ad8:	2140      	movs	r1, #64	; 0x40
 8018ada:	f7ff ff3d 	bl	8018958 <_malloc_r>
 8018ade:	6020      	str	r0, [r4, #0]
 8018ae0:	6120      	str	r0, [r4, #16]
 8018ae2:	b928      	cbnz	r0, 8018af0 <_svfiprintf_r+0x30>
 8018ae4:	230c      	movs	r3, #12
 8018ae6:	f8c8 3000 	str.w	r3, [r8]
 8018aea:	f04f 30ff 	mov.w	r0, #4294967295
 8018aee:	e0c8      	b.n	8018c82 <_svfiprintf_r+0x1c2>
 8018af0:	2340      	movs	r3, #64	; 0x40
 8018af2:	6163      	str	r3, [r4, #20]
 8018af4:	2300      	movs	r3, #0
 8018af6:	9309      	str	r3, [sp, #36]	; 0x24
 8018af8:	2320      	movs	r3, #32
 8018afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018afe:	2330      	movs	r3, #48	; 0x30
 8018b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b04:	9503      	str	r5, [sp, #12]
 8018b06:	f04f 0b01 	mov.w	fp, #1
 8018b0a:	4637      	mov	r7, r6
 8018b0c:	463d      	mov	r5, r7
 8018b0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018b12:	b10b      	cbz	r3, 8018b18 <_svfiprintf_r+0x58>
 8018b14:	2b25      	cmp	r3, #37	; 0x25
 8018b16:	d13e      	bne.n	8018b96 <_svfiprintf_r+0xd6>
 8018b18:	ebb7 0a06 	subs.w	sl, r7, r6
 8018b1c:	d00b      	beq.n	8018b36 <_svfiprintf_r+0x76>
 8018b1e:	4653      	mov	r3, sl
 8018b20:	4632      	mov	r2, r6
 8018b22:	4621      	mov	r1, r4
 8018b24:	4640      	mov	r0, r8
 8018b26:	f7ff ff71 	bl	8018a0c <__ssputs_r>
 8018b2a:	3001      	adds	r0, #1
 8018b2c:	f000 80a4 	beq.w	8018c78 <_svfiprintf_r+0x1b8>
 8018b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b32:	4453      	add	r3, sl
 8018b34:	9309      	str	r3, [sp, #36]	; 0x24
 8018b36:	783b      	ldrb	r3, [r7, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f000 809d 	beq.w	8018c78 <_svfiprintf_r+0x1b8>
 8018b3e:	2300      	movs	r3, #0
 8018b40:	f04f 32ff 	mov.w	r2, #4294967295
 8018b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b48:	9304      	str	r3, [sp, #16]
 8018b4a:	9307      	str	r3, [sp, #28]
 8018b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b50:	931a      	str	r3, [sp, #104]	; 0x68
 8018b52:	462f      	mov	r7, r5
 8018b54:	2205      	movs	r2, #5
 8018b56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018b5a:	4850      	ldr	r0, [pc, #320]	; (8018c9c <_svfiprintf_r+0x1dc>)
 8018b5c:	f7e7 fb58 	bl	8000210 <memchr>
 8018b60:	9b04      	ldr	r3, [sp, #16]
 8018b62:	b9d0      	cbnz	r0, 8018b9a <_svfiprintf_r+0xda>
 8018b64:	06d9      	lsls	r1, r3, #27
 8018b66:	bf44      	itt	mi
 8018b68:	2220      	movmi	r2, #32
 8018b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018b6e:	071a      	lsls	r2, r3, #28
 8018b70:	bf44      	itt	mi
 8018b72:	222b      	movmi	r2, #43	; 0x2b
 8018b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018b78:	782a      	ldrb	r2, [r5, #0]
 8018b7a:	2a2a      	cmp	r2, #42	; 0x2a
 8018b7c:	d015      	beq.n	8018baa <_svfiprintf_r+0xea>
 8018b7e:	9a07      	ldr	r2, [sp, #28]
 8018b80:	462f      	mov	r7, r5
 8018b82:	2000      	movs	r0, #0
 8018b84:	250a      	movs	r5, #10
 8018b86:	4639      	mov	r1, r7
 8018b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b8c:	3b30      	subs	r3, #48	; 0x30
 8018b8e:	2b09      	cmp	r3, #9
 8018b90:	d94d      	bls.n	8018c2e <_svfiprintf_r+0x16e>
 8018b92:	b1b8      	cbz	r0, 8018bc4 <_svfiprintf_r+0x104>
 8018b94:	e00f      	b.n	8018bb6 <_svfiprintf_r+0xf6>
 8018b96:	462f      	mov	r7, r5
 8018b98:	e7b8      	b.n	8018b0c <_svfiprintf_r+0x4c>
 8018b9a:	4a40      	ldr	r2, [pc, #256]	; (8018c9c <_svfiprintf_r+0x1dc>)
 8018b9c:	1a80      	subs	r0, r0, r2
 8018b9e:	fa0b f000 	lsl.w	r0, fp, r0
 8018ba2:	4318      	orrs	r0, r3
 8018ba4:	9004      	str	r0, [sp, #16]
 8018ba6:	463d      	mov	r5, r7
 8018ba8:	e7d3      	b.n	8018b52 <_svfiprintf_r+0x92>
 8018baa:	9a03      	ldr	r2, [sp, #12]
 8018bac:	1d11      	adds	r1, r2, #4
 8018bae:	6812      	ldr	r2, [r2, #0]
 8018bb0:	9103      	str	r1, [sp, #12]
 8018bb2:	2a00      	cmp	r2, #0
 8018bb4:	db01      	blt.n	8018bba <_svfiprintf_r+0xfa>
 8018bb6:	9207      	str	r2, [sp, #28]
 8018bb8:	e004      	b.n	8018bc4 <_svfiprintf_r+0x104>
 8018bba:	4252      	negs	r2, r2
 8018bbc:	f043 0302 	orr.w	r3, r3, #2
 8018bc0:	9207      	str	r2, [sp, #28]
 8018bc2:	9304      	str	r3, [sp, #16]
 8018bc4:	783b      	ldrb	r3, [r7, #0]
 8018bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8018bc8:	d10c      	bne.n	8018be4 <_svfiprintf_r+0x124>
 8018bca:	787b      	ldrb	r3, [r7, #1]
 8018bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8018bce:	d133      	bne.n	8018c38 <_svfiprintf_r+0x178>
 8018bd0:	9b03      	ldr	r3, [sp, #12]
 8018bd2:	1d1a      	adds	r2, r3, #4
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	9203      	str	r2, [sp, #12]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	bfb8      	it	lt
 8018bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8018be0:	3702      	adds	r7, #2
 8018be2:	9305      	str	r3, [sp, #20]
 8018be4:	4d2e      	ldr	r5, [pc, #184]	; (8018ca0 <_svfiprintf_r+0x1e0>)
 8018be6:	7839      	ldrb	r1, [r7, #0]
 8018be8:	2203      	movs	r2, #3
 8018bea:	4628      	mov	r0, r5
 8018bec:	f7e7 fb10 	bl	8000210 <memchr>
 8018bf0:	b138      	cbz	r0, 8018c02 <_svfiprintf_r+0x142>
 8018bf2:	2340      	movs	r3, #64	; 0x40
 8018bf4:	1b40      	subs	r0, r0, r5
 8018bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8018bfa:	9b04      	ldr	r3, [sp, #16]
 8018bfc:	4303      	orrs	r3, r0
 8018bfe:	3701      	adds	r7, #1
 8018c00:	9304      	str	r3, [sp, #16]
 8018c02:	7839      	ldrb	r1, [r7, #0]
 8018c04:	4827      	ldr	r0, [pc, #156]	; (8018ca4 <_svfiprintf_r+0x1e4>)
 8018c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c0a:	2206      	movs	r2, #6
 8018c0c:	1c7e      	adds	r6, r7, #1
 8018c0e:	f7e7 faff 	bl	8000210 <memchr>
 8018c12:	2800      	cmp	r0, #0
 8018c14:	d038      	beq.n	8018c88 <_svfiprintf_r+0x1c8>
 8018c16:	4b24      	ldr	r3, [pc, #144]	; (8018ca8 <_svfiprintf_r+0x1e8>)
 8018c18:	bb13      	cbnz	r3, 8018c60 <_svfiprintf_r+0x1a0>
 8018c1a:	9b03      	ldr	r3, [sp, #12]
 8018c1c:	3307      	adds	r3, #7
 8018c1e:	f023 0307 	bic.w	r3, r3, #7
 8018c22:	3308      	adds	r3, #8
 8018c24:	9303      	str	r3, [sp, #12]
 8018c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c28:	444b      	add	r3, r9
 8018c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c2c:	e76d      	b.n	8018b0a <_svfiprintf_r+0x4a>
 8018c2e:	fb05 3202 	mla	r2, r5, r2, r3
 8018c32:	2001      	movs	r0, #1
 8018c34:	460f      	mov	r7, r1
 8018c36:	e7a6      	b.n	8018b86 <_svfiprintf_r+0xc6>
 8018c38:	2300      	movs	r3, #0
 8018c3a:	3701      	adds	r7, #1
 8018c3c:	9305      	str	r3, [sp, #20]
 8018c3e:	4619      	mov	r1, r3
 8018c40:	250a      	movs	r5, #10
 8018c42:	4638      	mov	r0, r7
 8018c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c48:	3a30      	subs	r2, #48	; 0x30
 8018c4a:	2a09      	cmp	r2, #9
 8018c4c:	d903      	bls.n	8018c56 <_svfiprintf_r+0x196>
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d0c8      	beq.n	8018be4 <_svfiprintf_r+0x124>
 8018c52:	9105      	str	r1, [sp, #20]
 8018c54:	e7c6      	b.n	8018be4 <_svfiprintf_r+0x124>
 8018c56:	fb05 2101 	mla	r1, r5, r1, r2
 8018c5a:	2301      	movs	r3, #1
 8018c5c:	4607      	mov	r7, r0
 8018c5e:	e7f0      	b.n	8018c42 <_svfiprintf_r+0x182>
 8018c60:	ab03      	add	r3, sp, #12
 8018c62:	9300      	str	r3, [sp, #0]
 8018c64:	4622      	mov	r2, r4
 8018c66:	4b11      	ldr	r3, [pc, #68]	; (8018cac <_svfiprintf_r+0x1ec>)
 8018c68:	a904      	add	r1, sp, #16
 8018c6a:	4640      	mov	r0, r8
 8018c6c:	f7fc fb60 	bl	8015330 <_printf_float>
 8018c70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018c74:	4681      	mov	r9, r0
 8018c76:	d1d6      	bne.n	8018c26 <_svfiprintf_r+0x166>
 8018c78:	89a3      	ldrh	r3, [r4, #12]
 8018c7a:	065b      	lsls	r3, r3, #25
 8018c7c:	f53f af35 	bmi.w	8018aea <_svfiprintf_r+0x2a>
 8018c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c82:	b01d      	add	sp, #116	; 0x74
 8018c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c88:	ab03      	add	r3, sp, #12
 8018c8a:	9300      	str	r3, [sp, #0]
 8018c8c:	4622      	mov	r2, r4
 8018c8e:	4b07      	ldr	r3, [pc, #28]	; (8018cac <_svfiprintf_r+0x1ec>)
 8018c90:	a904      	add	r1, sp, #16
 8018c92:	4640      	mov	r0, r8
 8018c94:	f7fc fe02 	bl	801589c <_printf_i>
 8018c98:	e7ea      	b.n	8018c70 <_svfiprintf_r+0x1b0>
 8018c9a:	bf00      	nop
 8018c9c:	08019e1c 	.word	0x08019e1c
 8018ca0:	08019e22 	.word	0x08019e22
 8018ca4:	08019e26 	.word	0x08019e26
 8018ca8:	08015331 	.word	0x08015331
 8018cac:	08018a0d 	.word	0x08018a0d

08018cb0 <_sungetc_r>:
 8018cb0:	b538      	push	{r3, r4, r5, lr}
 8018cb2:	1c4b      	adds	r3, r1, #1
 8018cb4:	4614      	mov	r4, r2
 8018cb6:	d103      	bne.n	8018cc0 <_sungetc_r+0x10>
 8018cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8018cbc:	4628      	mov	r0, r5
 8018cbe:	bd38      	pop	{r3, r4, r5, pc}
 8018cc0:	8993      	ldrh	r3, [r2, #12]
 8018cc2:	f023 0320 	bic.w	r3, r3, #32
 8018cc6:	8193      	strh	r3, [r2, #12]
 8018cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018cca:	6852      	ldr	r2, [r2, #4]
 8018ccc:	b2cd      	uxtb	r5, r1
 8018cce:	b18b      	cbz	r3, 8018cf4 <_sungetc_r+0x44>
 8018cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018cd2:	4293      	cmp	r3, r2
 8018cd4:	dd08      	ble.n	8018ce8 <_sungetc_r+0x38>
 8018cd6:	6823      	ldr	r3, [r4, #0]
 8018cd8:	1e5a      	subs	r2, r3, #1
 8018cda:	6022      	str	r2, [r4, #0]
 8018cdc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018ce0:	6863      	ldr	r3, [r4, #4]
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	6063      	str	r3, [r4, #4]
 8018ce6:	e7e9      	b.n	8018cbc <_sungetc_r+0xc>
 8018ce8:	4621      	mov	r1, r4
 8018cea:	f000 fbc3 	bl	8019474 <__submore>
 8018cee:	2800      	cmp	r0, #0
 8018cf0:	d0f1      	beq.n	8018cd6 <_sungetc_r+0x26>
 8018cf2:	e7e1      	b.n	8018cb8 <_sungetc_r+0x8>
 8018cf4:	6921      	ldr	r1, [r4, #16]
 8018cf6:	6823      	ldr	r3, [r4, #0]
 8018cf8:	b151      	cbz	r1, 8018d10 <_sungetc_r+0x60>
 8018cfa:	4299      	cmp	r1, r3
 8018cfc:	d208      	bcs.n	8018d10 <_sungetc_r+0x60>
 8018cfe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018d02:	42a9      	cmp	r1, r5
 8018d04:	d104      	bne.n	8018d10 <_sungetc_r+0x60>
 8018d06:	3b01      	subs	r3, #1
 8018d08:	3201      	adds	r2, #1
 8018d0a:	6023      	str	r3, [r4, #0]
 8018d0c:	6062      	str	r2, [r4, #4]
 8018d0e:	e7d5      	b.n	8018cbc <_sungetc_r+0xc>
 8018d10:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d18:	6363      	str	r3, [r4, #52]	; 0x34
 8018d1a:	2303      	movs	r3, #3
 8018d1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8018d1e:	4623      	mov	r3, r4
 8018d20:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018d24:	6023      	str	r3, [r4, #0]
 8018d26:	2301      	movs	r3, #1
 8018d28:	e7dc      	b.n	8018ce4 <_sungetc_r+0x34>

08018d2a <__ssrefill_r>:
 8018d2a:	b510      	push	{r4, lr}
 8018d2c:	460c      	mov	r4, r1
 8018d2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018d30:	b169      	cbz	r1, 8018d4e <__ssrefill_r+0x24>
 8018d32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d36:	4299      	cmp	r1, r3
 8018d38:	d001      	beq.n	8018d3e <__ssrefill_r+0x14>
 8018d3a:	f7ff fdbf 	bl	80188bc <_free_r>
 8018d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d40:	6063      	str	r3, [r4, #4]
 8018d42:	2000      	movs	r0, #0
 8018d44:	6360      	str	r0, [r4, #52]	; 0x34
 8018d46:	b113      	cbz	r3, 8018d4e <__ssrefill_r+0x24>
 8018d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018d4a:	6023      	str	r3, [r4, #0]
 8018d4c:	bd10      	pop	{r4, pc}
 8018d4e:	6923      	ldr	r3, [r4, #16]
 8018d50:	6023      	str	r3, [r4, #0]
 8018d52:	2300      	movs	r3, #0
 8018d54:	6063      	str	r3, [r4, #4]
 8018d56:	89a3      	ldrh	r3, [r4, #12]
 8018d58:	f043 0320 	orr.w	r3, r3, #32
 8018d5c:	81a3      	strh	r3, [r4, #12]
 8018d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8018d62:	e7f3      	b.n	8018d4c <__ssrefill_r+0x22>

08018d64 <__ssvfiscanf_r>:
 8018d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d68:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018d6c:	460c      	mov	r4, r1
 8018d6e:	2100      	movs	r1, #0
 8018d70:	9144      	str	r1, [sp, #272]	; 0x110
 8018d72:	9145      	str	r1, [sp, #276]	; 0x114
 8018d74:	499f      	ldr	r1, [pc, #636]	; (8018ff4 <__ssvfiscanf_r+0x290>)
 8018d76:	91a0      	str	r1, [sp, #640]	; 0x280
 8018d78:	f10d 0804 	add.w	r8, sp, #4
 8018d7c:	499e      	ldr	r1, [pc, #632]	; (8018ff8 <__ssvfiscanf_r+0x294>)
 8018d7e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018ffc <__ssvfiscanf_r+0x298>
 8018d82:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018d86:	4606      	mov	r6, r0
 8018d88:	4692      	mov	sl, r2
 8018d8a:	91a1      	str	r1, [sp, #644]	; 0x284
 8018d8c:	9300      	str	r3, [sp, #0]
 8018d8e:	270a      	movs	r7, #10
 8018d90:	f89a 3000 	ldrb.w	r3, [sl]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	f000 812a 	beq.w	8018fee <__ssvfiscanf_r+0x28a>
 8018d9a:	4655      	mov	r5, sl
 8018d9c:	f7ff f93e 	bl	801801c <__locale_ctype_ptr>
 8018da0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018da4:	4458      	add	r0, fp
 8018da6:	7843      	ldrb	r3, [r0, #1]
 8018da8:	f013 0308 	ands.w	r3, r3, #8
 8018dac:	d01c      	beq.n	8018de8 <__ssvfiscanf_r+0x84>
 8018dae:	6863      	ldr	r3, [r4, #4]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	dd12      	ble.n	8018dda <__ssvfiscanf_r+0x76>
 8018db4:	f7ff f932 	bl	801801c <__locale_ctype_ptr>
 8018db8:	6823      	ldr	r3, [r4, #0]
 8018dba:	781a      	ldrb	r2, [r3, #0]
 8018dbc:	4410      	add	r0, r2
 8018dbe:	7842      	ldrb	r2, [r0, #1]
 8018dc0:	0712      	lsls	r2, r2, #28
 8018dc2:	d401      	bmi.n	8018dc8 <__ssvfiscanf_r+0x64>
 8018dc4:	46aa      	mov	sl, r5
 8018dc6:	e7e3      	b.n	8018d90 <__ssvfiscanf_r+0x2c>
 8018dc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018dca:	3201      	adds	r2, #1
 8018dcc:	9245      	str	r2, [sp, #276]	; 0x114
 8018dce:	6862      	ldr	r2, [r4, #4]
 8018dd0:	3301      	adds	r3, #1
 8018dd2:	3a01      	subs	r2, #1
 8018dd4:	6062      	str	r2, [r4, #4]
 8018dd6:	6023      	str	r3, [r4, #0]
 8018dd8:	e7e9      	b.n	8018dae <__ssvfiscanf_r+0x4a>
 8018dda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ddc:	4621      	mov	r1, r4
 8018dde:	4630      	mov	r0, r6
 8018de0:	4798      	blx	r3
 8018de2:	2800      	cmp	r0, #0
 8018de4:	d0e6      	beq.n	8018db4 <__ssvfiscanf_r+0x50>
 8018de6:	e7ed      	b.n	8018dc4 <__ssvfiscanf_r+0x60>
 8018de8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018dec:	f040 8082 	bne.w	8018ef4 <__ssvfiscanf_r+0x190>
 8018df0:	9343      	str	r3, [sp, #268]	; 0x10c
 8018df2:	9341      	str	r3, [sp, #260]	; 0x104
 8018df4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018df8:	2b2a      	cmp	r3, #42	; 0x2a
 8018dfa:	d103      	bne.n	8018e04 <__ssvfiscanf_r+0xa0>
 8018dfc:	2310      	movs	r3, #16
 8018dfe:	9341      	str	r3, [sp, #260]	; 0x104
 8018e00:	f10a 0502 	add.w	r5, sl, #2
 8018e04:	46aa      	mov	sl, r5
 8018e06:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018e0a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018e0e:	2a09      	cmp	r2, #9
 8018e10:	d922      	bls.n	8018e58 <__ssvfiscanf_r+0xf4>
 8018e12:	2203      	movs	r2, #3
 8018e14:	4879      	ldr	r0, [pc, #484]	; (8018ffc <__ssvfiscanf_r+0x298>)
 8018e16:	f7e7 f9fb 	bl	8000210 <memchr>
 8018e1a:	b138      	cbz	r0, 8018e2c <__ssvfiscanf_r+0xc8>
 8018e1c:	eba0 0309 	sub.w	r3, r0, r9
 8018e20:	2001      	movs	r0, #1
 8018e22:	4098      	lsls	r0, r3
 8018e24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e26:	4318      	orrs	r0, r3
 8018e28:	9041      	str	r0, [sp, #260]	; 0x104
 8018e2a:	46aa      	mov	sl, r5
 8018e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8018e30:	2b67      	cmp	r3, #103	; 0x67
 8018e32:	f10a 0501 	add.w	r5, sl, #1
 8018e36:	d82b      	bhi.n	8018e90 <__ssvfiscanf_r+0x12c>
 8018e38:	2b65      	cmp	r3, #101	; 0x65
 8018e3a:	f080 809f 	bcs.w	8018f7c <__ssvfiscanf_r+0x218>
 8018e3e:	2b47      	cmp	r3, #71	; 0x47
 8018e40:	d810      	bhi.n	8018e64 <__ssvfiscanf_r+0x100>
 8018e42:	2b45      	cmp	r3, #69	; 0x45
 8018e44:	f080 809a 	bcs.w	8018f7c <__ssvfiscanf_r+0x218>
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d06c      	beq.n	8018f26 <__ssvfiscanf_r+0x1c2>
 8018e4c:	2b25      	cmp	r3, #37	; 0x25
 8018e4e:	d051      	beq.n	8018ef4 <__ssvfiscanf_r+0x190>
 8018e50:	2303      	movs	r3, #3
 8018e52:	9347      	str	r3, [sp, #284]	; 0x11c
 8018e54:	9742      	str	r7, [sp, #264]	; 0x108
 8018e56:	e027      	b.n	8018ea8 <__ssvfiscanf_r+0x144>
 8018e58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018e5a:	fb07 1303 	mla	r3, r7, r3, r1
 8018e5e:	3b30      	subs	r3, #48	; 0x30
 8018e60:	9343      	str	r3, [sp, #268]	; 0x10c
 8018e62:	e7cf      	b.n	8018e04 <__ssvfiscanf_r+0xa0>
 8018e64:	2b5b      	cmp	r3, #91	; 0x5b
 8018e66:	d06a      	beq.n	8018f3e <__ssvfiscanf_r+0x1da>
 8018e68:	d80c      	bhi.n	8018e84 <__ssvfiscanf_r+0x120>
 8018e6a:	2b58      	cmp	r3, #88	; 0x58
 8018e6c:	d1f0      	bne.n	8018e50 <__ssvfiscanf_r+0xec>
 8018e6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e74:	9241      	str	r2, [sp, #260]	; 0x104
 8018e76:	2210      	movs	r2, #16
 8018e78:	9242      	str	r2, [sp, #264]	; 0x108
 8018e7a:	2b6e      	cmp	r3, #110	; 0x6e
 8018e7c:	bf8c      	ite	hi
 8018e7e:	2304      	movhi	r3, #4
 8018e80:	2303      	movls	r3, #3
 8018e82:	e010      	b.n	8018ea6 <__ssvfiscanf_r+0x142>
 8018e84:	2b63      	cmp	r3, #99	; 0x63
 8018e86:	d065      	beq.n	8018f54 <__ssvfiscanf_r+0x1f0>
 8018e88:	2b64      	cmp	r3, #100	; 0x64
 8018e8a:	d1e1      	bne.n	8018e50 <__ssvfiscanf_r+0xec>
 8018e8c:	9742      	str	r7, [sp, #264]	; 0x108
 8018e8e:	e7f4      	b.n	8018e7a <__ssvfiscanf_r+0x116>
 8018e90:	2b70      	cmp	r3, #112	; 0x70
 8018e92:	d04b      	beq.n	8018f2c <__ssvfiscanf_r+0x1c8>
 8018e94:	d826      	bhi.n	8018ee4 <__ssvfiscanf_r+0x180>
 8018e96:	2b6e      	cmp	r3, #110	; 0x6e
 8018e98:	d062      	beq.n	8018f60 <__ssvfiscanf_r+0x1fc>
 8018e9a:	d84c      	bhi.n	8018f36 <__ssvfiscanf_r+0x1d2>
 8018e9c:	2b69      	cmp	r3, #105	; 0x69
 8018e9e:	d1d7      	bne.n	8018e50 <__ssvfiscanf_r+0xec>
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	9342      	str	r3, [sp, #264]	; 0x108
 8018ea4:	2303      	movs	r3, #3
 8018ea6:	9347      	str	r3, [sp, #284]	; 0x11c
 8018ea8:	6863      	ldr	r3, [r4, #4]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	dd68      	ble.n	8018f80 <__ssvfiscanf_r+0x21c>
 8018eae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018eb0:	0659      	lsls	r1, r3, #25
 8018eb2:	d407      	bmi.n	8018ec4 <__ssvfiscanf_r+0x160>
 8018eb4:	f7ff f8b2 	bl	801801c <__locale_ctype_ptr>
 8018eb8:	6823      	ldr	r3, [r4, #0]
 8018eba:	781a      	ldrb	r2, [r3, #0]
 8018ebc:	4410      	add	r0, r2
 8018ebe:	7842      	ldrb	r2, [r0, #1]
 8018ec0:	0712      	lsls	r2, r2, #28
 8018ec2:	d464      	bmi.n	8018f8e <__ssvfiscanf_r+0x22a>
 8018ec4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018ec6:	2b02      	cmp	r3, #2
 8018ec8:	dc73      	bgt.n	8018fb2 <__ssvfiscanf_r+0x24e>
 8018eca:	466b      	mov	r3, sp
 8018ecc:	4622      	mov	r2, r4
 8018ece:	a941      	add	r1, sp, #260	; 0x104
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	f000 f897 	bl	8019004 <_scanf_chars>
 8018ed6:	2801      	cmp	r0, #1
 8018ed8:	f000 8089 	beq.w	8018fee <__ssvfiscanf_r+0x28a>
 8018edc:	2802      	cmp	r0, #2
 8018ede:	f47f af71 	bne.w	8018dc4 <__ssvfiscanf_r+0x60>
 8018ee2:	e01d      	b.n	8018f20 <__ssvfiscanf_r+0x1bc>
 8018ee4:	2b75      	cmp	r3, #117	; 0x75
 8018ee6:	d0d1      	beq.n	8018e8c <__ssvfiscanf_r+0x128>
 8018ee8:	2b78      	cmp	r3, #120	; 0x78
 8018eea:	d0c0      	beq.n	8018e6e <__ssvfiscanf_r+0x10a>
 8018eec:	2b73      	cmp	r3, #115	; 0x73
 8018eee:	d1af      	bne.n	8018e50 <__ssvfiscanf_r+0xec>
 8018ef0:	2302      	movs	r3, #2
 8018ef2:	e7d8      	b.n	8018ea6 <__ssvfiscanf_r+0x142>
 8018ef4:	6863      	ldr	r3, [r4, #4]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	dd0c      	ble.n	8018f14 <__ssvfiscanf_r+0x1b0>
 8018efa:	6823      	ldr	r3, [r4, #0]
 8018efc:	781a      	ldrb	r2, [r3, #0]
 8018efe:	455a      	cmp	r2, fp
 8018f00:	d175      	bne.n	8018fee <__ssvfiscanf_r+0x28a>
 8018f02:	3301      	adds	r3, #1
 8018f04:	6862      	ldr	r2, [r4, #4]
 8018f06:	6023      	str	r3, [r4, #0]
 8018f08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018f0a:	3a01      	subs	r2, #1
 8018f0c:	3301      	adds	r3, #1
 8018f0e:	6062      	str	r2, [r4, #4]
 8018f10:	9345      	str	r3, [sp, #276]	; 0x114
 8018f12:	e757      	b.n	8018dc4 <__ssvfiscanf_r+0x60>
 8018f14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f16:	4621      	mov	r1, r4
 8018f18:	4630      	mov	r0, r6
 8018f1a:	4798      	blx	r3
 8018f1c:	2800      	cmp	r0, #0
 8018f1e:	d0ec      	beq.n	8018efa <__ssvfiscanf_r+0x196>
 8018f20:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018f22:	2800      	cmp	r0, #0
 8018f24:	d159      	bne.n	8018fda <__ssvfiscanf_r+0x276>
 8018f26:	f04f 30ff 	mov.w	r0, #4294967295
 8018f2a:	e05c      	b.n	8018fe6 <__ssvfiscanf_r+0x282>
 8018f2c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018f2e:	f042 0220 	orr.w	r2, r2, #32
 8018f32:	9241      	str	r2, [sp, #260]	; 0x104
 8018f34:	e79b      	b.n	8018e6e <__ssvfiscanf_r+0x10a>
 8018f36:	2308      	movs	r3, #8
 8018f38:	9342      	str	r3, [sp, #264]	; 0x108
 8018f3a:	2304      	movs	r3, #4
 8018f3c:	e7b3      	b.n	8018ea6 <__ssvfiscanf_r+0x142>
 8018f3e:	4629      	mov	r1, r5
 8018f40:	4640      	mov	r0, r8
 8018f42:	f000 f9c7 	bl	80192d4 <__sccl>
 8018f46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f4c:	9341      	str	r3, [sp, #260]	; 0x104
 8018f4e:	4605      	mov	r5, r0
 8018f50:	2301      	movs	r3, #1
 8018f52:	e7a8      	b.n	8018ea6 <__ssvfiscanf_r+0x142>
 8018f54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f5a:	9341      	str	r3, [sp, #260]	; 0x104
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	e7a2      	b.n	8018ea6 <__ssvfiscanf_r+0x142>
 8018f60:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018f62:	06c3      	lsls	r3, r0, #27
 8018f64:	f53f af2e 	bmi.w	8018dc4 <__ssvfiscanf_r+0x60>
 8018f68:	9b00      	ldr	r3, [sp, #0]
 8018f6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018f6c:	1d19      	adds	r1, r3, #4
 8018f6e:	9100      	str	r1, [sp, #0]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	07c0      	lsls	r0, r0, #31
 8018f74:	bf4c      	ite	mi
 8018f76:	801a      	strhmi	r2, [r3, #0]
 8018f78:	601a      	strpl	r2, [r3, #0]
 8018f7a:	e723      	b.n	8018dc4 <__ssvfiscanf_r+0x60>
 8018f7c:	2305      	movs	r3, #5
 8018f7e:	e792      	b.n	8018ea6 <__ssvfiscanf_r+0x142>
 8018f80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f82:	4621      	mov	r1, r4
 8018f84:	4630      	mov	r0, r6
 8018f86:	4798      	blx	r3
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d090      	beq.n	8018eae <__ssvfiscanf_r+0x14a>
 8018f8c:	e7c8      	b.n	8018f20 <__ssvfiscanf_r+0x1bc>
 8018f8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018f90:	3201      	adds	r2, #1
 8018f92:	9245      	str	r2, [sp, #276]	; 0x114
 8018f94:	6862      	ldr	r2, [r4, #4]
 8018f96:	3a01      	subs	r2, #1
 8018f98:	2a00      	cmp	r2, #0
 8018f9a:	6062      	str	r2, [r4, #4]
 8018f9c:	dd02      	ble.n	8018fa4 <__ssvfiscanf_r+0x240>
 8018f9e:	3301      	adds	r3, #1
 8018fa0:	6023      	str	r3, [r4, #0]
 8018fa2:	e787      	b.n	8018eb4 <__ssvfiscanf_r+0x150>
 8018fa4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018fa6:	4621      	mov	r1, r4
 8018fa8:	4630      	mov	r0, r6
 8018faa:	4798      	blx	r3
 8018fac:	2800      	cmp	r0, #0
 8018fae:	d081      	beq.n	8018eb4 <__ssvfiscanf_r+0x150>
 8018fb0:	e7b6      	b.n	8018f20 <__ssvfiscanf_r+0x1bc>
 8018fb2:	2b04      	cmp	r3, #4
 8018fb4:	dc06      	bgt.n	8018fc4 <__ssvfiscanf_r+0x260>
 8018fb6:	466b      	mov	r3, sp
 8018fb8:	4622      	mov	r2, r4
 8018fba:	a941      	add	r1, sp, #260	; 0x104
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	f000 f885 	bl	80190cc <_scanf_i>
 8018fc2:	e788      	b.n	8018ed6 <__ssvfiscanf_r+0x172>
 8018fc4:	4b0e      	ldr	r3, [pc, #56]	; (8019000 <__ssvfiscanf_r+0x29c>)
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	f43f aefc 	beq.w	8018dc4 <__ssvfiscanf_r+0x60>
 8018fcc:	466b      	mov	r3, sp
 8018fce:	4622      	mov	r2, r4
 8018fd0:	a941      	add	r1, sp, #260	; 0x104
 8018fd2:	4630      	mov	r0, r6
 8018fd4:	f7fc fd74 	bl	8015ac0 <_scanf_float>
 8018fd8:	e77d      	b.n	8018ed6 <__ssvfiscanf_r+0x172>
 8018fda:	89a3      	ldrh	r3, [r4, #12]
 8018fdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018fe0:	bf18      	it	ne
 8018fe2:	f04f 30ff 	movne.w	r0, #4294967295
 8018fe6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fee:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018ff0:	e7f9      	b.n	8018fe6 <__ssvfiscanf_r+0x282>
 8018ff2:	bf00      	nop
 8018ff4:	08018cb1 	.word	0x08018cb1
 8018ff8:	08018d2b 	.word	0x08018d2b
 8018ffc:	08019e22 	.word	0x08019e22
 8019000:	08015ac1 	.word	0x08015ac1

08019004 <_scanf_chars>:
 8019004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019008:	4615      	mov	r5, r2
 801900a:	688a      	ldr	r2, [r1, #8]
 801900c:	4680      	mov	r8, r0
 801900e:	460c      	mov	r4, r1
 8019010:	b932      	cbnz	r2, 8019020 <_scanf_chars+0x1c>
 8019012:	698a      	ldr	r2, [r1, #24]
 8019014:	2a00      	cmp	r2, #0
 8019016:	bf14      	ite	ne
 8019018:	f04f 32ff 	movne.w	r2, #4294967295
 801901c:	2201      	moveq	r2, #1
 801901e:	608a      	str	r2, [r1, #8]
 8019020:	6822      	ldr	r2, [r4, #0]
 8019022:	06d1      	lsls	r1, r2, #27
 8019024:	bf5f      	itttt	pl
 8019026:	681a      	ldrpl	r2, [r3, #0]
 8019028:	1d11      	addpl	r1, r2, #4
 801902a:	6019      	strpl	r1, [r3, #0]
 801902c:	6817      	ldrpl	r7, [r2, #0]
 801902e:	2600      	movs	r6, #0
 8019030:	69a3      	ldr	r3, [r4, #24]
 8019032:	b1db      	cbz	r3, 801906c <_scanf_chars+0x68>
 8019034:	2b01      	cmp	r3, #1
 8019036:	d107      	bne.n	8019048 <_scanf_chars+0x44>
 8019038:	682b      	ldr	r3, [r5, #0]
 801903a:	6962      	ldr	r2, [r4, #20]
 801903c:	781b      	ldrb	r3, [r3, #0]
 801903e:	5cd3      	ldrb	r3, [r2, r3]
 8019040:	b9a3      	cbnz	r3, 801906c <_scanf_chars+0x68>
 8019042:	2e00      	cmp	r6, #0
 8019044:	d132      	bne.n	80190ac <_scanf_chars+0xa8>
 8019046:	e006      	b.n	8019056 <_scanf_chars+0x52>
 8019048:	2b02      	cmp	r3, #2
 801904a:	d007      	beq.n	801905c <_scanf_chars+0x58>
 801904c:	2e00      	cmp	r6, #0
 801904e:	d12d      	bne.n	80190ac <_scanf_chars+0xa8>
 8019050:	69a3      	ldr	r3, [r4, #24]
 8019052:	2b01      	cmp	r3, #1
 8019054:	d12a      	bne.n	80190ac <_scanf_chars+0xa8>
 8019056:	2001      	movs	r0, #1
 8019058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801905c:	f7fe ffde 	bl	801801c <__locale_ctype_ptr>
 8019060:	682b      	ldr	r3, [r5, #0]
 8019062:	781b      	ldrb	r3, [r3, #0]
 8019064:	4418      	add	r0, r3
 8019066:	7843      	ldrb	r3, [r0, #1]
 8019068:	071b      	lsls	r3, r3, #28
 801906a:	d4ef      	bmi.n	801904c <_scanf_chars+0x48>
 801906c:	6823      	ldr	r3, [r4, #0]
 801906e:	06da      	lsls	r2, r3, #27
 8019070:	bf5e      	ittt	pl
 8019072:	682b      	ldrpl	r3, [r5, #0]
 8019074:	781b      	ldrbpl	r3, [r3, #0]
 8019076:	703b      	strbpl	r3, [r7, #0]
 8019078:	682a      	ldr	r2, [r5, #0]
 801907a:	686b      	ldr	r3, [r5, #4]
 801907c:	f102 0201 	add.w	r2, r2, #1
 8019080:	602a      	str	r2, [r5, #0]
 8019082:	68a2      	ldr	r2, [r4, #8]
 8019084:	f103 33ff 	add.w	r3, r3, #4294967295
 8019088:	f102 32ff 	add.w	r2, r2, #4294967295
 801908c:	606b      	str	r3, [r5, #4]
 801908e:	f106 0601 	add.w	r6, r6, #1
 8019092:	bf58      	it	pl
 8019094:	3701      	addpl	r7, #1
 8019096:	60a2      	str	r2, [r4, #8]
 8019098:	b142      	cbz	r2, 80190ac <_scanf_chars+0xa8>
 801909a:	2b00      	cmp	r3, #0
 801909c:	dcc8      	bgt.n	8019030 <_scanf_chars+0x2c>
 801909e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80190a2:	4629      	mov	r1, r5
 80190a4:	4640      	mov	r0, r8
 80190a6:	4798      	blx	r3
 80190a8:	2800      	cmp	r0, #0
 80190aa:	d0c1      	beq.n	8019030 <_scanf_chars+0x2c>
 80190ac:	6823      	ldr	r3, [r4, #0]
 80190ae:	f013 0310 	ands.w	r3, r3, #16
 80190b2:	d105      	bne.n	80190c0 <_scanf_chars+0xbc>
 80190b4:	68e2      	ldr	r2, [r4, #12]
 80190b6:	3201      	adds	r2, #1
 80190b8:	60e2      	str	r2, [r4, #12]
 80190ba:	69a2      	ldr	r2, [r4, #24]
 80190bc:	b102      	cbz	r2, 80190c0 <_scanf_chars+0xbc>
 80190be:	703b      	strb	r3, [r7, #0]
 80190c0:	6923      	ldr	r3, [r4, #16]
 80190c2:	441e      	add	r6, r3
 80190c4:	6126      	str	r6, [r4, #16]
 80190c6:	2000      	movs	r0, #0
 80190c8:	e7c6      	b.n	8019058 <_scanf_chars+0x54>
	...

080190cc <_scanf_i>:
 80190cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190d0:	469a      	mov	sl, r3
 80190d2:	4b74      	ldr	r3, [pc, #464]	; (80192a4 <_scanf_i+0x1d8>)
 80190d4:	460c      	mov	r4, r1
 80190d6:	4683      	mov	fp, r0
 80190d8:	4616      	mov	r6, r2
 80190da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80190de:	b087      	sub	sp, #28
 80190e0:	ab03      	add	r3, sp, #12
 80190e2:	68a7      	ldr	r7, [r4, #8]
 80190e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80190e8:	4b6f      	ldr	r3, [pc, #444]	; (80192a8 <_scanf_i+0x1dc>)
 80190ea:	69a1      	ldr	r1, [r4, #24]
 80190ec:	4a6f      	ldr	r2, [pc, #444]	; (80192ac <_scanf_i+0x1e0>)
 80190ee:	2903      	cmp	r1, #3
 80190f0:	bf08      	it	eq
 80190f2:	461a      	moveq	r2, r3
 80190f4:	1e7b      	subs	r3, r7, #1
 80190f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80190fa:	bf84      	itt	hi
 80190fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019100:	60a3      	strhi	r3, [r4, #8]
 8019102:	6823      	ldr	r3, [r4, #0]
 8019104:	9200      	str	r2, [sp, #0]
 8019106:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801910a:	bf88      	it	hi
 801910c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019110:	f104 091c 	add.w	r9, r4, #28
 8019114:	6023      	str	r3, [r4, #0]
 8019116:	bf8c      	ite	hi
 8019118:	197f      	addhi	r7, r7, r5
 801911a:	2700      	movls	r7, #0
 801911c:	464b      	mov	r3, r9
 801911e:	f04f 0800 	mov.w	r8, #0
 8019122:	9301      	str	r3, [sp, #4]
 8019124:	6831      	ldr	r1, [r6, #0]
 8019126:	ab03      	add	r3, sp, #12
 8019128:	2202      	movs	r2, #2
 801912a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801912e:	7809      	ldrb	r1, [r1, #0]
 8019130:	f7e7 f86e 	bl	8000210 <memchr>
 8019134:	9b01      	ldr	r3, [sp, #4]
 8019136:	b330      	cbz	r0, 8019186 <_scanf_i+0xba>
 8019138:	f1b8 0f01 	cmp.w	r8, #1
 801913c:	d15a      	bne.n	80191f4 <_scanf_i+0x128>
 801913e:	6862      	ldr	r2, [r4, #4]
 8019140:	b92a      	cbnz	r2, 801914e <_scanf_i+0x82>
 8019142:	6822      	ldr	r2, [r4, #0]
 8019144:	2108      	movs	r1, #8
 8019146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801914a:	6061      	str	r1, [r4, #4]
 801914c:	6022      	str	r2, [r4, #0]
 801914e:	6822      	ldr	r2, [r4, #0]
 8019150:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019154:	6022      	str	r2, [r4, #0]
 8019156:	68a2      	ldr	r2, [r4, #8]
 8019158:	1e51      	subs	r1, r2, #1
 801915a:	60a1      	str	r1, [r4, #8]
 801915c:	b19a      	cbz	r2, 8019186 <_scanf_i+0xba>
 801915e:	6832      	ldr	r2, [r6, #0]
 8019160:	1c51      	adds	r1, r2, #1
 8019162:	6031      	str	r1, [r6, #0]
 8019164:	7812      	ldrb	r2, [r2, #0]
 8019166:	701a      	strb	r2, [r3, #0]
 8019168:	1c5d      	adds	r5, r3, #1
 801916a:	6873      	ldr	r3, [r6, #4]
 801916c:	3b01      	subs	r3, #1
 801916e:	2b00      	cmp	r3, #0
 8019170:	6073      	str	r3, [r6, #4]
 8019172:	dc07      	bgt.n	8019184 <_scanf_i+0xb8>
 8019174:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019178:	4631      	mov	r1, r6
 801917a:	4658      	mov	r0, fp
 801917c:	4798      	blx	r3
 801917e:	2800      	cmp	r0, #0
 8019180:	f040 8086 	bne.w	8019290 <_scanf_i+0x1c4>
 8019184:	462b      	mov	r3, r5
 8019186:	f108 0801 	add.w	r8, r8, #1
 801918a:	f1b8 0f03 	cmp.w	r8, #3
 801918e:	d1c8      	bne.n	8019122 <_scanf_i+0x56>
 8019190:	6862      	ldr	r2, [r4, #4]
 8019192:	b90a      	cbnz	r2, 8019198 <_scanf_i+0xcc>
 8019194:	220a      	movs	r2, #10
 8019196:	6062      	str	r2, [r4, #4]
 8019198:	6862      	ldr	r2, [r4, #4]
 801919a:	4945      	ldr	r1, [pc, #276]	; (80192b0 <_scanf_i+0x1e4>)
 801919c:	6960      	ldr	r0, [r4, #20]
 801919e:	9301      	str	r3, [sp, #4]
 80191a0:	1a89      	subs	r1, r1, r2
 80191a2:	f000 f897 	bl	80192d4 <__sccl>
 80191a6:	9b01      	ldr	r3, [sp, #4]
 80191a8:	f04f 0800 	mov.w	r8, #0
 80191ac:	461d      	mov	r5, r3
 80191ae:	68a3      	ldr	r3, [r4, #8]
 80191b0:	6822      	ldr	r2, [r4, #0]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d03a      	beq.n	801922c <_scanf_i+0x160>
 80191b6:	6831      	ldr	r1, [r6, #0]
 80191b8:	6960      	ldr	r0, [r4, #20]
 80191ba:	f891 c000 	ldrb.w	ip, [r1]
 80191be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d032      	beq.n	801922c <_scanf_i+0x160>
 80191c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80191ca:	d121      	bne.n	8019210 <_scanf_i+0x144>
 80191cc:	0510      	lsls	r0, r2, #20
 80191ce:	d51f      	bpl.n	8019210 <_scanf_i+0x144>
 80191d0:	f108 0801 	add.w	r8, r8, #1
 80191d4:	b117      	cbz	r7, 80191dc <_scanf_i+0x110>
 80191d6:	3301      	adds	r3, #1
 80191d8:	3f01      	subs	r7, #1
 80191da:	60a3      	str	r3, [r4, #8]
 80191dc:	6873      	ldr	r3, [r6, #4]
 80191de:	3b01      	subs	r3, #1
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	6073      	str	r3, [r6, #4]
 80191e4:	dd1b      	ble.n	801921e <_scanf_i+0x152>
 80191e6:	6833      	ldr	r3, [r6, #0]
 80191e8:	3301      	adds	r3, #1
 80191ea:	6033      	str	r3, [r6, #0]
 80191ec:	68a3      	ldr	r3, [r4, #8]
 80191ee:	3b01      	subs	r3, #1
 80191f0:	60a3      	str	r3, [r4, #8]
 80191f2:	e7dc      	b.n	80191ae <_scanf_i+0xe2>
 80191f4:	f1b8 0f02 	cmp.w	r8, #2
 80191f8:	d1ad      	bne.n	8019156 <_scanf_i+0x8a>
 80191fa:	6822      	ldr	r2, [r4, #0]
 80191fc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019200:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019204:	d1bf      	bne.n	8019186 <_scanf_i+0xba>
 8019206:	2110      	movs	r1, #16
 8019208:	6061      	str	r1, [r4, #4]
 801920a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801920e:	e7a1      	b.n	8019154 <_scanf_i+0x88>
 8019210:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019214:	6022      	str	r2, [r4, #0]
 8019216:	780b      	ldrb	r3, [r1, #0]
 8019218:	702b      	strb	r3, [r5, #0]
 801921a:	3501      	adds	r5, #1
 801921c:	e7de      	b.n	80191dc <_scanf_i+0x110>
 801921e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019222:	4631      	mov	r1, r6
 8019224:	4658      	mov	r0, fp
 8019226:	4798      	blx	r3
 8019228:	2800      	cmp	r0, #0
 801922a:	d0df      	beq.n	80191ec <_scanf_i+0x120>
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	05d9      	lsls	r1, r3, #23
 8019230:	d50c      	bpl.n	801924c <_scanf_i+0x180>
 8019232:	454d      	cmp	r5, r9
 8019234:	d908      	bls.n	8019248 <_scanf_i+0x17c>
 8019236:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801923a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801923e:	4632      	mov	r2, r6
 8019240:	4658      	mov	r0, fp
 8019242:	4798      	blx	r3
 8019244:	1e6f      	subs	r7, r5, #1
 8019246:	463d      	mov	r5, r7
 8019248:	454d      	cmp	r5, r9
 801924a:	d029      	beq.n	80192a0 <_scanf_i+0x1d4>
 801924c:	6822      	ldr	r2, [r4, #0]
 801924e:	f012 0210 	ands.w	r2, r2, #16
 8019252:	d113      	bne.n	801927c <_scanf_i+0x1b0>
 8019254:	702a      	strb	r2, [r5, #0]
 8019256:	6863      	ldr	r3, [r4, #4]
 8019258:	9e00      	ldr	r6, [sp, #0]
 801925a:	4649      	mov	r1, r9
 801925c:	4658      	mov	r0, fp
 801925e:	47b0      	blx	r6
 8019260:	f8da 3000 	ldr.w	r3, [sl]
 8019264:	6821      	ldr	r1, [r4, #0]
 8019266:	1d1a      	adds	r2, r3, #4
 8019268:	f8ca 2000 	str.w	r2, [sl]
 801926c:	f011 0f20 	tst.w	r1, #32
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	d010      	beq.n	8019296 <_scanf_i+0x1ca>
 8019274:	6018      	str	r0, [r3, #0]
 8019276:	68e3      	ldr	r3, [r4, #12]
 8019278:	3301      	adds	r3, #1
 801927a:	60e3      	str	r3, [r4, #12]
 801927c:	eba5 0509 	sub.w	r5, r5, r9
 8019280:	44a8      	add	r8, r5
 8019282:	6925      	ldr	r5, [r4, #16]
 8019284:	4445      	add	r5, r8
 8019286:	6125      	str	r5, [r4, #16]
 8019288:	2000      	movs	r0, #0
 801928a:	b007      	add	sp, #28
 801928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019290:	f04f 0800 	mov.w	r8, #0
 8019294:	e7ca      	b.n	801922c <_scanf_i+0x160>
 8019296:	07ca      	lsls	r2, r1, #31
 8019298:	bf4c      	ite	mi
 801929a:	8018      	strhmi	r0, [r3, #0]
 801929c:	6018      	strpl	r0, [r3, #0]
 801929e:	e7ea      	b.n	8019276 <_scanf_i+0x1aa>
 80192a0:	2001      	movs	r0, #1
 80192a2:	e7f2      	b.n	801928a <_scanf_i+0x1be>
 80192a4:	080199e4 	.word	0x080199e4
 80192a8:	08016cd9 	.word	0x08016cd9
 80192ac:	08019451 	.word	0x08019451
 80192b0:	08019e3d 	.word	0x08019e3d

080192b4 <_sbrk_r>:
 80192b4:	b538      	push	{r3, r4, r5, lr}
 80192b6:	4c06      	ldr	r4, [pc, #24]	; (80192d0 <_sbrk_r+0x1c>)
 80192b8:	2300      	movs	r3, #0
 80192ba:	4605      	mov	r5, r0
 80192bc:	4608      	mov	r0, r1
 80192be:	6023      	str	r3, [r4, #0]
 80192c0:	f7ed ffc2 	bl	8007248 <_sbrk>
 80192c4:	1c43      	adds	r3, r0, #1
 80192c6:	d102      	bne.n	80192ce <_sbrk_r+0x1a>
 80192c8:	6823      	ldr	r3, [r4, #0]
 80192ca:	b103      	cbz	r3, 80192ce <_sbrk_r+0x1a>
 80192cc:	602b      	str	r3, [r5, #0]
 80192ce:	bd38      	pop	{r3, r4, r5, pc}
 80192d0:	20046c84 	.word	0x20046c84

080192d4 <__sccl>:
 80192d4:	b570      	push	{r4, r5, r6, lr}
 80192d6:	780b      	ldrb	r3, [r1, #0]
 80192d8:	2b5e      	cmp	r3, #94	; 0x5e
 80192da:	bf13      	iteet	ne
 80192dc:	1c4a      	addne	r2, r1, #1
 80192de:	1c8a      	addeq	r2, r1, #2
 80192e0:	784b      	ldrbeq	r3, [r1, #1]
 80192e2:	2100      	movne	r1, #0
 80192e4:	bf08      	it	eq
 80192e6:	2101      	moveq	r1, #1
 80192e8:	1e44      	subs	r4, r0, #1
 80192ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80192ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80192f2:	42ac      	cmp	r4, r5
 80192f4:	d1fb      	bne.n	80192ee <__sccl+0x1a>
 80192f6:	b913      	cbnz	r3, 80192fe <__sccl+0x2a>
 80192f8:	3a01      	subs	r2, #1
 80192fa:	4610      	mov	r0, r2
 80192fc:	bd70      	pop	{r4, r5, r6, pc}
 80192fe:	f081 0401 	eor.w	r4, r1, #1
 8019302:	54c4      	strb	r4, [r0, r3]
 8019304:	1c51      	adds	r1, r2, #1
 8019306:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801930a:	2d2d      	cmp	r5, #45	; 0x2d
 801930c:	f101 36ff 	add.w	r6, r1, #4294967295
 8019310:	460a      	mov	r2, r1
 8019312:	d006      	beq.n	8019322 <__sccl+0x4e>
 8019314:	2d5d      	cmp	r5, #93	; 0x5d
 8019316:	d0f0      	beq.n	80192fa <__sccl+0x26>
 8019318:	b90d      	cbnz	r5, 801931e <__sccl+0x4a>
 801931a:	4632      	mov	r2, r6
 801931c:	e7ed      	b.n	80192fa <__sccl+0x26>
 801931e:	462b      	mov	r3, r5
 8019320:	e7ef      	b.n	8019302 <__sccl+0x2e>
 8019322:	780e      	ldrb	r6, [r1, #0]
 8019324:	2e5d      	cmp	r6, #93	; 0x5d
 8019326:	d0fa      	beq.n	801931e <__sccl+0x4a>
 8019328:	42b3      	cmp	r3, r6
 801932a:	dcf8      	bgt.n	801931e <__sccl+0x4a>
 801932c:	3301      	adds	r3, #1
 801932e:	429e      	cmp	r6, r3
 8019330:	54c4      	strb	r4, [r0, r3]
 8019332:	dcfb      	bgt.n	801932c <__sccl+0x58>
 8019334:	3102      	adds	r1, #2
 8019336:	e7e6      	b.n	8019306 <__sccl+0x32>

08019338 <strncmp>:
 8019338:	b510      	push	{r4, lr}
 801933a:	b16a      	cbz	r2, 8019358 <strncmp+0x20>
 801933c:	3901      	subs	r1, #1
 801933e:	1884      	adds	r4, r0, r2
 8019340:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019344:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019348:	4293      	cmp	r3, r2
 801934a:	d103      	bne.n	8019354 <strncmp+0x1c>
 801934c:	42a0      	cmp	r0, r4
 801934e:	d001      	beq.n	8019354 <strncmp+0x1c>
 8019350:	2b00      	cmp	r3, #0
 8019352:	d1f5      	bne.n	8019340 <strncmp+0x8>
 8019354:	1a98      	subs	r0, r3, r2
 8019356:	bd10      	pop	{r4, pc}
 8019358:	4610      	mov	r0, r2
 801935a:	e7fc      	b.n	8019356 <strncmp+0x1e>

0801935c <_strtoul_l.isra.0>:
 801935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019360:	4680      	mov	r8, r0
 8019362:	4689      	mov	r9, r1
 8019364:	4692      	mov	sl, r2
 8019366:	461e      	mov	r6, r3
 8019368:	460f      	mov	r7, r1
 801936a:	463d      	mov	r5, r7
 801936c:	9808      	ldr	r0, [sp, #32]
 801936e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019372:	f7fe fe4f 	bl	8018014 <__locale_ctype_ptr_l>
 8019376:	4420      	add	r0, r4
 8019378:	7843      	ldrb	r3, [r0, #1]
 801937a:	f013 0308 	ands.w	r3, r3, #8
 801937e:	d130      	bne.n	80193e2 <_strtoul_l.isra.0+0x86>
 8019380:	2c2d      	cmp	r4, #45	; 0x2d
 8019382:	d130      	bne.n	80193e6 <_strtoul_l.isra.0+0x8a>
 8019384:	787c      	ldrb	r4, [r7, #1]
 8019386:	1cbd      	adds	r5, r7, #2
 8019388:	2101      	movs	r1, #1
 801938a:	2e00      	cmp	r6, #0
 801938c:	d05c      	beq.n	8019448 <_strtoul_l.isra.0+0xec>
 801938e:	2e10      	cmp	r6, #16
 8019390:	d109      	bne.n	80193a6 <_strtoul_l.isra.0+0x4a>
 8019392:	2c30      	cmp	r4, #48	; 0x30
 8019394:	d107      	bne.n	80193a6 <_strtoul_l.isra.0+0x4a>
 8019396:	782b      	ldrb	r3, [r5, #0]
 8019398:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801939c:	2b58      	cmp	r3, #88	; 0x58
 801939e:	d14e      	bne.n	801943e <_strtoul_l.isra.0+0xe2>
 80193a0:	786c      	ldrb	r4, [r5, #1]
 80193a2:	2610      	movs	r6, #16
 80193a4:	3502      	adds	r5, #2
 80193a6:	f04f 32ff 	mov.w	r2, #4294967295
 80193aa:	2300      	movs	r3, #0
 80193ac:	fbb2 f2f6 	udiv	r2, r2, r6
 80193b0:	fb06 fc02 	mul.w	ip, r6, r2
 80193b4:	ea6f 0c0c 	mvn.w	ip, ip
 80193b8:	4618      	mov	r0, r3
 80193ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80193be:	2f09      	cmp	r7, #9
 80193c0:	d817      	bhi.n	80193f2 <_strtoul_l.isra.0+0x96>
 80193c2:	463c      	mov	r4, r7
 80193c4:	42a6      	cmp	r6, r4
 80193c6:	dd23      	ble.n	8019410 <_strtoul_l.isra.0+0xb4>
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	db1e      	blt.n	801940a <_strtoul_l.isra.0+0xae>
 80193cc:	4282      	cmp	r2, r0
 80193ce:	d31c      	bcc.n	801940a <_strtoul_l.isra.0+0xae>
 80193d0:	d101      	bne.n	80193d6 <_strtoul_l.isra.0+0x7a>
 80193d2:	45a4      	cmp	ip, r4
 80193d4:	db19      	blt.n	801940a <_strtoul_l.isra.0+0xae>
 80193d6:	fb00 4006 	mla	r0, r0, r6, r4
 80193da:	2301      	movs	r3, #1
 80193dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193e0:	e7eb      	b.n	80193ba <_strtoul_l.isra.0+0x5e>
 80193e2:	462f      	mov	r7, r5
 80193e4:	e7c1      	b.n	801936a <_strtoul_l.isra.0+0xe>
 80193e6:	2c2b      	cmp	r4, #43	; 0x2b
 80193e8:	bf04      	itt	eq
 80193ea:	1cbd      	addeq	r5, r7, #2
 80193ec:	787c      	ldrbeq	r4, [r7, #1]
 80193ee:	4619      	mov	r1, r3
 80193f0:	e7cb      	b.n	801938a <_strtoul_l.isra.0+0x2e>
 80193f2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80193f6:	2f19      	cmp	r7, #25
 80193f8:	d801      	bhi.n	80193fe <_strtoul_l.isra.0+0xa2>
 80193fa:	3c37      	subs	r4, #55	; 0x37
 80193fc:	e7e2      	b.n	80193c4 <_strtoul_l.isra.0+0x68>
 80193fe:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019402:	2f19      	cmp	r7, #25
 8019404:	d804      	bhi.n	8019410 <_strtoul_l.isra.0+0xb4>
 8019406:	3c57      	subs	r4, #87	; 0x57
 8019408:	e7dc      	b.n	80193c4 <_strtoul_l.isra.0+0x68>
 801940a:	f04f 33ff 	mov.w	r3, #4294967295
 801940e:	e7e5      	b.n	80193dc <_strtoul_l.isra.0+0x80>
 8019410:	2b00      	cmp	r3, #0
 8019412:	da09      	bge.n	8019428 <_strtoul_l.isra.0+0xcc>
 8019414:	2322      	movs	r3, #34	; 0x22
 8019416:	f8c8 3000 	str.w	r3, [r8]
 801941a:	f04f 30ff 	mov.w	r0, #4294967295
 801941e:	f1ba 0f00 	cmp.w	sl, #0
 8019422:	d107      	bne.n	8019434 <_strtoul_l.isra.0+0xd8>
 8019424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019428:	b101      	cbz	r1, 801942c <_strtoul_l.isra.0+0xd0>
 801942a:	4240      	negs	r0, r0
 801942c:	f1ba 0f00 	cmp.w	sl, #0
 8019430:	d0f8      	beq.n	8019424 <_strtoul_l.isra.0+0xc8>
 8019432:	b10b      	cbz	r3, 8019438 <_strtoul_l.isra.0+0xdc>
 8019434:	f105 39ff 	add.w	r9, r5, #4294967295
 8019438:	f8ca 9000 	str.w	r9, [sl]
 801943c:	e7f2      	b.n	8019424 <_strtoul_l.isra.0+0xc8>
 801943e:	2430      	movs	r4, #48	; 0x30
 8019440:	2e00      	cmp	r6, #0
 8019442:	d1b0      	bne.n	80193a6 <_strtoul_l.isra.0+0x4a>
 8019444:	2608      	movs	r6, #8
 8019446:	e7ae      	b.n	80193a6 <_strtoul_l.isra.0+0x4a>
 8019448:	2c30      	cmp	r4, #48	; 0x30
 801944a:	d0a4      	beq.n	8019396 <_strtoul_l.isra.0+0x3a>
 801944c:	260a      	movs	r6, #10
 801944e:	e7aa      	b.n	80193a6 <_strtoul_l.isra.0+0x4a>

08019450 <_strtoul_r>:
 8019450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019452:	4c06      	ldr	r4, [pc, #24]	; (801946c <_strtoul_r+0x1c>)
 8019454:	4d06      	ldr	r5, [pc, #24]	; (8019470 <_strtoul_r+0x20>)
 8019456:	6824      	ldr	r4, [r4, #0]
 8019458:	6a24      	ldr	r4, [r4, #32]
 801945a:	2c00      	cmp	r4, #0
 801945c:	bf08      	it	eq
 801945e:	462c      	moveq	r4, r5
 8019460:	9400      	str	r4, [sp, #0]
 8019462:	f7ff ff7b 	bl	801935c <_strtoul_l.isra.0>
 8019466:	b003      	add	sp, #12
 8019468:	bd30      	pop	{r4, r5, pc}
 801946a:	bf00      	nop
 801946c:	2000000c 	.word	0x2000000c
 8019470:	20000070 	.word	0x20000070

08019474 <__submore>:
 8019474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019478:	460c      	mov	r4, r1
 801947a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801947c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019480:	4299      	cmp	r1, r3
 8019482:	d11d      	bne.n	80194c0 <__submore+0x4c>
 8019484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019488:	f7ff fa66 	bl	8018958 <_malloc_r>
 801948c:	b918      	cbnz	r0, 8019496 <__submore+0x22>
 801948e:	f04f 30ff 	mov.w	r0, #4294967295
 8019492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801949a:	63a3      	str	r3, [r4, #56]	; 0x38
 801949c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80194a0:	6360      	str	r0, [r4, #52]	; 0x34
 80194a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80194a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80194aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80194ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80194b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80194b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80194ba:	6020      	str	r0, [r4, #0]
 80194bc:	2000      	movs	r0, #0
 80194be:	e7e8      	b.n	8019492 <__submore+0x1e>
 80194c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80194c2:	0077      	lsls	r7, r6, #1
 80194c4:	463a      	mov	r2, r7
 80194c6:	f000 f837 	bl	8019538 <_realloc_r>
 80194ca:	4605      	mov	r5, r0
 80194cc:	2800      	cmp	r0, #0
 80194ce:	d0de      	beq.n	801948e <__submore+0x1a>
 80194d0:	eb00 0806 	add.w	r8, r0, r6
 80194d4:	4601      	mov	r1, r0
 80194d6:	4632      	mov	r2, r6
 80194d8:	4640      	mov	r0, r8
 80194da:	f7fe fdd7 	bl	801808c <memcpy>
 80194de:	f8c4 8000 	str.w	r8, [r4]
 80194e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80194e6:	e7e9      	b.n	80194bc <__submore+0x48>

080194e8 <__ascii_wctomb>:
 80194e8:	b149      	cbz	r1, 80194fe <__ascii_wctomb+0x16>
 80194ea:	2aff      	cmp	r2, #255	; 0xff
 80194ec:	bf85      	ittet	hi
 80194ee:	238a      	movhi	r3, #138	; 0x8a
 80194f0:	6003      	strhi	r3, [r0, #0]
 80194f2:	700a      	strbls	r2, [r1, #0]
 80194f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80194f8:	bf98      	it	ls
 80194fa:	2001      	movls	r0, #1
 80194fc:	4770      	bx	lr
 80194fe:	4608      	mov	r0, r1
 8019500:	4770      	bx	lr

08019502 <memmove>:
 8019502:	4288      	cmp	r0, r1
 8019504:	b510      	push	{r4, lr}
 8019506:	eb01 0302 	add.w	r3, r1, r2
 801950a:	d807      	bhi.n	801951c <memmove+0x1a>
 801950c:	1e42      	subs	r2, r0, #1
 801950e:	4299      	cmp	r1, r3
 8019510:	d00a      	beq.n	8019528 <memmove+0x26>
 8019512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019516:	f802 4f01 	strb.w	r4, [r2, #1]!
 801951a:	e7f8      	b.n	801950e <memmove+0xc>
 801951c:	4283      	cmp	r3, r0
 801951e:	d9f5      	bls.n	801950c <memmove+0xa>
 8019520:	1881      	adds	r1, r0, r2
 8019522:	1ad2      	subs	r2, r2, r3
 8019524:	42d3      	cmn	r3, r2
 8019526:	d100      	bne.n	801952a <memmove+0x28>
 8019528:	bd10      	pop	{r4, pc}
 801952a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801952e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019532:	e7f7      	b.n	8019524 <memmove+0x22>

08019534 <__malloc_lock>:
 8019534:	4770      	bx	lr

08019536 <__malloc_unlock>:
 8019536:	4770      	bx	lr

08019538 <_realloc_r>:
 8019538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801953a:	4607      	mov	r7, r0
 801953c:	4614      	mov	r4, r2
 801953e:	460e      	mov	r6, r1
 8019540:	b921      	cbnz	r1, 801954c <_realloc_r+0x14>
 8019542:	4611      	mov	r1, r2
 8019544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019548:	f7ff ba06 	b.w	8018958 <_malloc_r>
 801954c:	b922      	cbnz	r2, 8019558 <_realloc_r+0x20>
 801954e:	f7ff f9b5 	bl	80188bc <_free_r>
 8019552:	4625      	mov	r5, r4
 8019554:	4628      	mov	r0, r5
 8019556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019558:	f000 f814 	bl	8019584 <_malloc_usable_size_r>
 801955c:	42a0      	cmp	r0, r4
 801955e:	d20f      	bcs.n	8019580 <_realloc_r+0x48>
 8019560:	4621      	mov	r1, r4
 8019562:	4638      	mov	r0, r7
 8019564:	f7ff f9f8 	bl	8018958 <_malloc_r>
 8019568:	4605      	mov	r5, r0
 801956a:	2800      	cmp	r0, #0
 801956c:	d0f2      	beq.n	8019554 <_realloc_r+0x1c>
 801956e:	4631      	mov	r1, r6
 8019570:	4622      	mov	r2, r4
 8019572:	f7fe fd8b 	bl	801808c <memcpy>
 8019576:	4631      	mov	r1, r6
 8019578:	4638      	mov	r0, r7
 801957a:	f7ff f99f 	bl	80188bc <_free_r>
 801957e:	e7e9      	b.n	8019554 <_realloc_r+0x1c>
 8019580:	4635      	mov	r5, r6
 8019582:	e7e7      	b.n	8019554 <_realloc_r+0x1c>

08019584 <_malloc_usable_size_r>:
 8019584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019588:	1f18      	subs	r0, r3, #4
 801958a:	2b00      	cmp	r3, #0
 801958c:	bfbc      	itt	lt
 801958e:	580b      	ldrlt	r3, [r1, r0]
 8019590:	18c0      	addlt	r0, r0, r3
 8019592:	4770      	bx	lr

08019594 <_init>:
 8019594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019596:	bf00      	nop
 8019598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801959a:	bc08      	pop	{r3}
 801959c:	469e      	mov	lr, r3
 801959e:	4770      	bx	lr

080195a0 <_fini>:
 80195a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195a2:	bf00      	nop
 80195a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195a6:	bc08      	pop	{r3}
 80195a8:	469e      	mov	lr, r3
 80195aa:	4770      	bx	lr
