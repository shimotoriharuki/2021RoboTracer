
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bbc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019d80  08019d80  00029d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a77c  0801a77c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a77c  0801a77c  0002a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a784  0801a784  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a784  0801a784  0002a784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a78c  0801a78c  0002a78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a790  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046b00  200001e0  0801a96c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046ce0  0801a96c  00036ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b15c  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c10  00000000  00000000  0006b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002338  00000000  00000000  00072f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  000752b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00077318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002659f  00000000  00000000  000ac7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011107d  00000000  00000000  000d2d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3ddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a73c  00000000  00000000  001e3e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019d64 	.word	0x08019d64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019d64 	.word	0x08019d64

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb6a 	bl	800b6b0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200447d4 	.word	0x200447d4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fb52 	bl	800b6b0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200447d4 	.word	0x200447d4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f9f3 	bl	800b40c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff5a 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff54 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ff4e 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ff48 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ff42 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ff3c 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff36 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff30 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff2a 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff24 	bl	8009ee0 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff18 	bl	8009ee0 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff12 	bl	8009ee0 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f9e5 	bl	80174f8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f822 	bl	800f240 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f81e 	bl	800f240 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f81a 	bl	800f240 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f816 	bl	800f240 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200448c0 	.word	0x200448c0
 8001248:	20044828 	.word	0x20044828
 800124c:	20044948 	.word	0x20044948

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200448c0 	.word	0x200448c0
 800137c:	20044948 	.word	0x20044948
 8001380:	20044828 	.word	0x20044828

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200448c0 	.word	0x200448c0
 80013c4:	20044828 	.word	0x20044828
 80013c8:	20044948 	.word	0x20044948

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ffd6 	bl	800f3e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ffd2 	bl	800f3e0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044a28 	.word	0x20044a28
 8001458:	2004470c 	.word	0x2004470c
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	ee07 3a90 	vmov	s15, r3
}
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f9d7 	bl	8001b38 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800178a:	f000 f9eb 	bl	8001b64 <fopen_folder_and_file>

	return ret;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f012 fb76 	bl	8013e94 <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20043618 	.word	0x20043618

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f014 ff35 	bl	8016660 <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f012 fbba 	bl	8013f7c <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f012 fbb5 	bl	8013f7c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f012 f923 	bl	8013a6a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f9b8 	bl	8001b98 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	08019d80 	.word	0x08019d80
 8001850:	20043588 	.word	0x20043588
 8001854:	20043618 	.word	0x20043618
 8001858:	20043608 	.word	0x20043608

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f960 	bl	8001b38 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f012 fb31 	bl	8013ee8 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f012 fd9c 	bl	80143c4 <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f012 fb2b 	bl	8013ee8 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f967 	bl	8001b64 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f014 fed0 	bl	8016660 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f012 fb58 	bl	8013f7c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f012 f8c6 	bl	8013a6a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f95b 	bl	8001b98 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f012 faca 	bl	8013e94 <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	20043488 	.word	0x20043488
 8001910:	20042348 	.word	0x20042348
 8001914:	08019d9c 	.word	0x08019d9c
 8001918:	08019d80 	.word	0x08019d80
 800191c:	20043588 	.word	0x20043588
 8001920:	20043618 	.word	0x20043618
 8001924:	20043608 	.word	0x20043608

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f8f8 	bl	8001b38 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f90c 	bl	8001b64 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f014 fed3 	bl	8016708 <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f012 fefa 	bl	8014780 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f901 	bl	8001b98 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f012 fa7c 	bl	8013e94 <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08019d8c 	.word	0x08019d8c
 80019ac:	20043588 	.word	0x20043588
 80019b0:	20043618 	.word	0x20043618

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f8b2 	bl	8001b38 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f8c6 	bl	8001b64 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f014 fe8d 	bl	8016708 <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f012 feb4 	bl	8014780 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f8bb 	bl	8001b98 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f012 fa36 	bl	8013e94 <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08019d98 	.word	0x08019d98
 8001a38:	20043588 	.word	0x20043588
 8001a3c:	20043618 	.word	0x20043618

08001a40 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f86e 	bl	8001b38 <create_path>

	if(state == OVER_WRITE){
 8001a5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d108      	bne.n	8001a76 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a64:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <sd_write_array_int+0xa4>)
 8001a66:	f012 fa3f 	bl	8013ee8 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <sd_write_array_int+0xa8>)
 8001a6c:	f012 fcaa 	bl	80143c4 <f_unlink>
		f_chdir("..");
 8001a70:	481e      	ldr	r0, [pc, #120]	; (8001aec <sd_write_array_int+0xac>)
 8001a72:	f012 fa39 	bl	8013ee8 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a76:	f000 f875 	bl	8001b64 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	82fb      	strh	r3, [r7, #22]
 8001a7e:	e022      	b.n	8001ac6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001a80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <sd_write_array_int+0xb0>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	4818      	ldr	r0, [pc, #96]	; (8001af4 <sd_write_array_int+0xb4>)
 8001a94:	f014 fde4 	bl	8016660 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <sd_write_array_int+0xb8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4816      	ldr	r0, [pc, #88]	; (8001af8 <sd_write_array_int+0xb8>)
 8001aa0:	f012 fa6c 	bl	8013f7c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <sd_write_array_int+0xb4>)
 8001aa6:	f7fe fbab 	bl	8000200 <strlen>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <sd_write_array_int+0xbc>)
 8001aae:	4911      	ldr	r1, [pc, #68]	; (8001af4 <sd_write_array_int+0xb4>)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <sd_write_array_int+0xb8>)
 8001ab2:	f011 ffda 	bl	8013a6a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ab6:	f000 f86f 	bl	8001b98 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001aba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	82fb      	strh	r3, [r7, #22]
 8001ac6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbd6      	blt.n	8001a80 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <sd_write_array_int+0xb8>)
 8001ad4:	f012 f9de 	bl	8013e94 <f_close>

	return ret;
 8001ad8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20043488 	.word	0x20043488
 8001ae8:	20042348 	.word	0x20042348
 8001aec:	08019d9c 	.word	0x08019d9c
 8001af0:	08019da0 	.word	0x08019da0
 8001af4:	20043588 	.word	0x20043588
 8001af8:	20043618 	.word	0x20043618
 8001afc:	20043608 	.word	0x20043608

08001b00 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4908      	ldr	r1, [pc, #32]	; (8001b30 <sd_mount+0x30>)
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <sd_mount+0x34>)
 8001b10:	f011 fc38 	bl	8013384 <f_mount>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <sd_mount+0x20>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	e001      	b.n	8001b24 <sd_mount+0x24>
	else ret = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08019da8 	.word	0x08019da8
 8001b34:	20042448 	.word	0x20042448

08001b38 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <create_path+0x24>)
 8001b46:	f014 fe0b 	bl	8016760 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <create_path+0x28>)
 8001b4e:	f014 fe07 	bl	8016760 <strcpy>

}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20043488 	.word	0x20043488
 8001b60:	20042348 	.word	0x20042348

08001b64 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b68:	4807      	ldr	r0, [pc, #28]	; (8001b88 <fopen_folder_and_file+0x24>)
 8001b6a:	f012 fced 	bl	8014548 <f_mkdir>

	f_chdir(dirpath);
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <fopen_folder_and_file+0x24>)
 8001b70:	f012 f9ba 	bl	8013ee8 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b74:	2213      	movs	r2, #19
 8001b76:	4905      	ldr	r1, [pc, #20]	; (8001b8c <fopen_folder_and_file+0x28>)
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <fopen_folder_and_file+0x2c>)
 8001b7a:	f011 fc49 	bl	8013410 <f_open>

	f_chdir("..");
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <fopen_folder_and_file+0x30>)
 8001b80:	f012 f9b2 	bl	8013ee8 <f_chdir>


}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20043488 	.word	0x20043488
 8001b8c:	20042348 	.word	0x20042348
 8001b90:	20043618 	.word	0x20043618
 8001b94:	08019d9c 	.word	0x08019d9c

08001b98 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	e007      	b.n	8001bb4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <bufclear+0x30>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bb8:	ddf4      	ble.n	8001ba4 <bufclear+0xc>
	}
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20043588 	.word	0x20043588

08001bcc <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be6:	480e      	ldr	r0, [pc, #56]	; (8001c20 <read_byte+0x54>)
 8001be8:	f009 fc10 	bl	800b40c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bec:	f107 010f 	add.w	r1, r7, #15
 8001bf0:	2364      	movs	r3, #100	; 0x64
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <read_byte+0x58>)
 8001bf6:	f00c fdb9 	bl	800e76c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001bfa:	f107 010e 	add.w	r1, r7, #14
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	2201      	movs	r2, #1
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <read_byte+0x58>)
 8001c04:	f00c fee6 	bl	800e9d4 <HAL_SPI_Receive>
	CS_SET;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <read_byte+0x54>)
 8001c10:	f009 fbfc 	bl	800b40c <HAL_GPIO_WritePin>

	return val;
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020400 	.word	0x40020400
 8001c24:	200446b4 	.word	0x200446b4

08001c28 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <write_byte+0x54>)
 8001c4a:	f009 fbdf 	bl	800b40c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c4e:	f107 010f 	add.w	r1, r7, #15
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	2201      	movs	r2, #1
 8001c56:	480a      	ldr	r0, [pc, #40]	; (8001c80 <write_byte+0x58>)
 8001c58:	f00c fd88 	bl	800e76c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c5c:	1db9      	adds	r1, r7, #6
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	2201      	movs	r2, #1
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <write_byte+0x58>)
 8001c64:	f00c fd82 	bl	800e76c <HAL_SPI_Transmit>
	CS_SET;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6e:	4803      	ldr	r0, [pc, #12]	; (8001c7c <write_byte+0x54>)
 8001c70:	f009 fbcc 	bl	800b40c <HAL_GPIO_WritePin>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	200446b4 	.word	0x200446b4

08001c84 <IMU_init>:

uint16_t IMU_init() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff ff9c 	bl	8001bcc <read_byte>
 8001c94:	4603      	mov	r3, r0
 8001c96:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001c98:	797b      	ldrb	r3, [r7, #5]
 8001c9a:	2be0      	cmp	r3, #224	; 0xe0
 8001c9c:	d119      	bne.n	8001cd2 <IMU_init+0x4e>
		ret = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2006      	movs	r0, #6
 8001ca6:	f7ff ffbf 	bl	8001c28 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001caa:	2110      	movs	r1, #16
 8001cac:	2003      	movs	r0, #3
 8001cae:	f7ff ffbb 	bl	8001c28 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	207f      	movs	r0, #127	; 0x7f
 8001cb6:	f7ff ffb7 	bl	8001c28 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cba:	2106      	movs	r1, #6
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff ffb3 	bl	8001c28 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001cc2:	2106      	movs	r1, #6
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f7ff ffaf 	bl	8001c28 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	207f      	movs	r0, #127	; 0x7f
 8001cce:	f7ff ffab 	bl	8001c28 <write_byte>
	}
	return ret;
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <read_gyro_data>:

void read_gyro_data() {
 8001cdc:	b598      	push	{r3, r4, r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001ce0:	2033      	movs	r0, #51	; 0x33
 8001ce2:	f7ff ff73 	bl	8001bcc <read_byte>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21c      	sxth	r4, r3
 8001cec:	2034      	movs	r0, #52	; 0x34
 8001cee:	f7ff ff6d 	bl	8001bcc <read_byte>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <read_gyro_data+0x64>)
 8001cfc:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001cfe:	2035      	movs	r0, #53	; 0x35
 8001d00:	f7ff ff64 	bl	8001bcc <read_byte>
 8001d04:	4603      	mov	r3, r0
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21c      	sxth	r4, r3
 8001d0a:	2036      	movs	r0, #54	; 0x36
 8001d0c:	f7ff ff5e 	bl	8001bcc <read_byte>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4323      	orrs	r3, r4
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <read_gyro_data+0x68>)
 8001d1a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d1c:	2037      	movs	r0, #55	; 0x37
 8001d1e:	f7ff ff55 	bl	8001bcc <read_byte>
 8001d22:	4603      	mov	r3, r0
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b21c      	sxth	r4, r3
 8001d28:	2038      	movs	r0, #56	; 0x38
 8001d2a:	f7ff ff4f 	bl	8001bcc <read_byte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	4323      	orrs	r3, r4
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <read_gyro_data+0x6c>)
 8001d38:	801a      	strh	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	bd98      	pop	{r3, r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20044650 	.word	0x20044650
 8001d44:	2004464e 	.word	0x2004464e
 8001d48:	20044648 	.word	0x20044648

08001d4c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	805a      	strh	r2, [r3, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	809a      	strh	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	80da      	strh	r2, [r3, #6]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	811a      	strh	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	815a      	strh	r2, [r3, #10]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
{

}
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001d98:	f7ff ff74 	bl	8001c84 <IMU_init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001da0:	f7ff f97e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f98a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <_ZN3IMU4initEv+0x44>)
 8001dae:	f7ff f9b1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff f983 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <_ZN3IMU4initEv+0x48>)
 8001dc0:	f7ff f9a8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc8:	f008 f88a 	bl	8009ee0 <HAL_Delay>

}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	08019dac 	.word	0x08019dac
 8001dd8:	08019db8 	.word	0x08019db8
 8001ddc:	00000000 	.word	0x00000000

08001de0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001de8:	f7ff ff78 	bl	8001cdc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <_ZN3IMU12updateValuesEv+0xb8>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <_ZN3IMU12updateValuesEv+0xbc>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb9f 	bl	8000554 <__aeabi_i2d>
 8001e16:	a31c      	add	r3, pc, #112	; (adr r3, 8001e88 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fc04 	bl	8000628 <__aeabi_dmul>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4625      	mov	r5, r4
 8001e26:	461c      	mov	r4, r3
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb90 	bl	8000554 <__aeabi_i2d>
 8001e34:	a316      	add	r3, pc, #88	; (adr r3, 8001e90 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbf5 	bl	8000628 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4620      	mov	r0, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	f7fe fa39 	bl	80002bc <__adddf3>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4621      	mov	r1, r4
 8001e52:	f7fe fe99 	bl	8000b88 <__aeabi_d2iz>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e66:	801a      	strh	r2, [r3, #0]

	mon_zg= zg_;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e78:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	f3af 8000 	nop.w
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fb99999 	.word	0x3fb99999
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	3feccccc 	.word	0x3feccccc
 8001e98:	20044650 	.word	0x20044650
 8001e9c:	2004464e 	.word	0x2004464e
 8001ea0:	20044648 	.word	0x20044648
 8001ea4:	20000214 	.word	0x20000214
 8001ea8:	20000210 	.word	0x20000210
 8001eac:	00000000 	.word	0x00000000

08001eb0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7fe fb4f 	bl	8000578 <__aeabi_f2d>
 8001eda:	a316      	add	r3, pc, #88	; (adr r3, 8001f34 <_ZN3IMU8getOmegaEv+0x84>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fccc 	bl	800087c <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eee:	a313      	add	r3, pc, #76	; (adr r3, 8001f3c <_ZN3IMU8getOmegaEv+0x8c>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <_ZN3IMU8getOmegaEv+0x80>)
 8001f0a:	f7fe fcb7 	bl	800087c <__aeabi_ddiv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	4618      	mov	r0, r3
 8001f14:	4621      	mov	r1, r4
 8001f16:	f7fe fe7f 	bl	8000c18 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	ee07 3a90 	vmov	s15, r3
}
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40668000 	.word	0x40668000
 8001f34:	66666666 	.word	0x66666666
 8001f38:	40306666 	.word	0x40306666
 8001f3c:	54411744 	.word	0x54411744
 8001f40:	400921fb 	.word	0x400921fb

08001f44 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f4c:	466b      	mov	r3, sp
 8001f4e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f54:	f007 ffc4 	bl	8009ee0 <HAL_Delay>
	lcd_clear();
 8001f58:	f7ff f8a2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff f8ae 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f64:	4840      	ldr	r0, [pc, #256]	; (8002068 <_ZN3IMU11calibrationEv+0x124>)
 8001f66:	f7ff f8d5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff f8a7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f72:	483e      	ldr	r0, [pc, #248]	; (800206c <_ZN3IMU11calibrationEv+0x128>)
 8001f74:	f7ff f8ce 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f7c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f82:	1e5d      	subs	r5, r3, #1
 8001f84:	61bd      	str	r5, [r7, #24]
 8001f86:	462b      	mov	r3, r5
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0154      	lsls	r4, r2, #5
 8001fb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fb8:	014b      	lsls	r3, r1, #5
 8001fba:	462b      	mov	r3, r5
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	3307      	adds	r3, #7
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fcc:	466b      	mov	r3, sp
 8001fce:	3303      	adds	r3, #3
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	83fb      	strh	r3, [r7, #30]
 8001fda:	8bfa      	ldrh	r2, [r7, #30]
 8001fdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	da13      	bge.n	800200c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	ee07 2a90 	vmov	s15, r2
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f007 ff6e 	bl	8009ee0 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002004:	8bfb      	ldrh	r3, [r7, #30]
 8002006:	3301      	adds	r3, #1
 8002008:	83fb      	strh	r3, [r7, #30]
 800200a:	e7e6      	b.n	8001fda <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	462b      	mov	r3, r5
 8002014:	3301      	adds	r3, #1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d00e      	beq.n	8002042 <_ZN3IMU11calibrationEv+0xfe>
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	3304      	adds	r3, #4
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	e7ec      	b.n	800201c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002042:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a03 	vstr	s15, [r3, #12]
 800205c:	46b5      	mov	sp, r6
}
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	; 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	bf00      	nop
 8002068:	08019dbc 	.word	0x08019dbc
 800206c:	08019dc8 	.word	0x08019dc8

08002070 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	b299      	uxth	r1, r3
 8002084:	1dfa      	adds	r2, r7, #7
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <INA260_read+0x50>)
 800208e:	f009 fb0f 	bl	800b6b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	b299      	uxth	r1, r3
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	2364      	movs	r3, #100	; 0x64
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <INA260_read+0x50>)
 80020a2:	f009 fc03 	bl	800b8ac <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020a6:	7b3b      	ldrb	r3, [r7, #12]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	7b7b      	ldrb	r3, [r7, #13]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020b6:	89fb      	ldrh	r3, [r7, #14]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20044868 	.word	0x20044868

080020c4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4604      	mov	r4, r0
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	4603      	mov	r3, r0
 80020d8:	71bb      	strb	r3, [r7, #6]
 80020da:	460b      	mov	r3, r1
 80020dc:	717b      	strb	r3, [r7, #5]
 80020de:	4613      	mov	r3, r2
 80020e0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	733b      	strb	r3, [r7, #12]
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	737b      	strb	r3, [r7, #13]
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 80020ee:	793b      	ldrb	r3, [r7, #4]
 80020f0:	b299      	uxth	r1, r3
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2303      	movs	r3, #3
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <INA260_write+0x48>)
 80020fe:	f009 fad7 	bl	800b6b0 <HAL_I2C_Master_Transmit>
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop
 800210c:	20044868 	.word	0x20044868

08002110 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	460b      	mov	r3, r1
 800211c:	71bb      	strb	r3, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	79ba      	ldrb	r2, [r7, #6]
 8002126:	79f9      	ldrb	r1, [r7, #7]
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ffcb 	bl	80020c4 <INA260_write>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	461a      	mov	r2, r3
 8002144:	21df      	movs	r1, #223	; 0xdf
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff ffe2 	bl	8002110 <setConfig>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
{

}
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	482a      	ldr	r0, [pc, #168]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 800217e:	f009 f92d 	bl	800b3dc <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <_ZN8JoyStick8getValueEv+0x2e>
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800219a:	2101      	movs	r1, #1
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <_ZN8JoyStick8getValueEv+0xc0>)
 800219e:	f009 f91d 	bl	800b3dc <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x4e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021be:	481a      	ldr	r0, [pc, #104]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 80021c0:	f009 f90c 	bl	800b3dc <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <_ZN8JoyStick8getValueEv+0x70>
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021dc:	2104      	movs	r1, #4
 80021de:	4814      	ldr	r0, [pc, #80]	; (8002230 <_ZN8JoyStick8getValueEv+0xc4>)
 80021e0:	f009 f8fc 	bl	800b3dc <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x90>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 8002200:	f009 f8ec 	bl	800b3dc <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0xb0>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800221c:	89fb      	ldrh	r3, [r7, #14]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40020400 	.word	0x40020400

08002234 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	2b52      	cmp	r3, #82	; 0x52
 8002244:	d112      	bne.n	800226c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224c:	4856      	ldr	r0, [pc, #344]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f009 f8dd 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002258:	4853      	ldr	r0, [pc, #332]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f009 f8d7 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002264:	4850      	ldr	r0, [pc, #320]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f009 f8d1 	bl	800b40c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800226a:	e098      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b47      	cmp	r3, #71	; 0x47
 8002270:	d112      	bne.n	8002298 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	484b      	ldr	r0, [pc, #300]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f8c7 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002284:	4848      	ldr	r0, [pc, #288]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f8c1 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002290:	4845      	ldr	r0, [pc, #276]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f009 f8bb 	bl	800b40c <HAL_GPIO_WritePin>
}
 8002296:	e082      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b42      	cmp	r3, #66	; 0x42
 800229c:	d112      	bne.n	80022c4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	4840      	ldr	r0, [pc, #256]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f009 f8b1 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	483d      	ldr	r0, [pc, #244]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f009 f8ab 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	483a      	ldr	r0, [pc, #232]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f009 f8a5 	bl	800b40c <HAL_GPIO_WritePin>
}
 80022c2:	e06c      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b43      	cmp	r3, #67	; 0x43
 80022c8:	d112      	bne.n	80022f0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d0:	4835      	ldr	r0, [pc, #212]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f009 f89b 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022dc:	4832      	ldr	r0, [pc, #200]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f009 f895 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e8:	482f      	ldr	r0, [pc, #188]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f009 f88f 	bl	800b40c <HAL_GPIO_WritePin>
}
 80022ee:	e056      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b4d      	cmp	r3, #77	; 0x4d
 80022f4:	d112      	bne.n	800231c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fc:	482a      	ldr	r0, [pc, #168]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f009 f885 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	4827      	ldr	r0, [pc, #156]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f009 f87f 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f009 f879 	bl	800b40c <HAL_GPIO_WritePin>
}
 800231a:	e040      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b59      	cmp	r3, #89	; 0x59
 8002320:	d112      	bne.n	8002348 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f009 f86f 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f009 f869 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002342:	f009 f863 	bl	800b40c <HAL_GPIO_WritePin>
}
 8002346:	e02a      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b57      	cmp	r3, #87	; 0x57
 800234c:	d112      	bne.n	8002374 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f009 f859 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002360:	4811      	ldr	r0, [pc, #68]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f009 f853 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236c:	480e      	ldr	r0, [pc, #56]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800236e:	f009 f84d 	bl	800b40c <HAL_GPIO_WritePin>
}
 8002372:	e014      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b7e      	cmp	r3, #126	; 0x7e
 8002378:	d111      	bne.n	800239e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f009 f843 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f009 f83d 	bl	800b40c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800239a:	f009 f837 	bl	800b40c <HAL_GPIO_WritePin>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40020000 	.word	0x40020000

080023ac <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	4613      	mov	r3, r2
 80023ba:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	4813      	ldr	r0, [pc, #76]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023cc:	f009 f81e 	bl	800b40c <HAL_GPIO_WritePin>
 80023d0:	e009      	b.n	80023e6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023e2:	f009 f813 	bl	800b40c <HAL_GPIO_WritePin>

	if(r_status == 1)
 80023e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f4:	4808      	ldr	r0, [pc, #32]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023f6:	f009 f809 	bl	800b40c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80023fa:	e009      	b.n	8002410 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80023fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 800240c:	f008 fffe 	bl	800b40c <HAL_GPIO_WritePin>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40020000 	.word	0x40020000

0800241c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800241c:	b580      	push	{r7, lr}
 800241e:	b092      	sub	sp, #72	; 0x48
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fe92 	bl	8002154 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	331c      	adds	r3, #28
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	429a      	cmp	r2, r3
 8002444:	d008      	beq.n	8002458 <_ZN10LineSensorC1Ev+0x3c>
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002452:	3302      	adds	r3, #2
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
 8002456:	e7f2      	b.n	800243e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	429a      	cmp	r2, r3
 8002470:	d009      	beq.n	8002486 <_ZN10LineSensorC1Ev+0x6a>
 8002472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002474:	623b      	str	r3, [r7, #32]
		s = 0;
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	3304      	adds	r3, #4
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	e7f1      	b.n	800246a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3338      	adds	r3, #56	; 0x38
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d009      	beq.n	80024b4 <_ZN10LineSensorC1Ev+0x98>
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	3304      	adds	r3, #4
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	e7f1      	b.n	8002498 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d009      	beq.n	80024e2 <_ZN10LineSensorC1Ev+0xc6>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024d8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	3304      	adds	r3, #4
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	e7f1      	b.n	80024c6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	3748      	adds	r7, #72	; 0x48
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	220e      	movs	r2, #14
 80024f8:	4619      	mov	r1, r3
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80024fc:	f007 fd56 	bl	8009fac <HAL_ADC_Start_DMA>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2004478c 	.word	0x2004478c

0800250c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b0d      	cmp	r3, #13
 800251c:	dc2f      	bgt.n	800257e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3392      	adds	r3, #146	; 0x92
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	33a0      	adds	r3, #160	; 0xa0
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a5b      	subs	r3, r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	440b      	add	r3, r1
 800256a:	3306      	adds	r3, #6
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e7cc      	b.n	8002518 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002588:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b09      	cmp	r3, #9
 8002590:	d902      	bls.n	8002598 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]


}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000254 	.word	0x20000254

080025a8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025a8:	b490      	push	{r4, r7}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ba:	2b0d      	cmp	r3, #13
 80025bc:	f200 808e 	bhi.w	80026dc <_ZN10LineSensor18updateSensorValuesEv+0x134>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ca:	2b09      	cmp	r3, #9
 80025cc:	d81c      	bhi.n	8002608 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ce:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025d2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025d6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4423      	add	r3, r4
 80025e6:	3306      	adds	r3, #6
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4403      	add	r3, r0
 80025ec:	3304      	adds	r3, #4
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	008b      	lsls	r3, r1, #2
 80025f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025f6:	440b      	add	r3, r1
 80025f8:	3b30      	subs	r3, #48	; 0x30
 80025fa:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002600:	3301      	adds	r3, #1
 8002602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002606:	e7de      	b.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800260e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002612:	2b09      	cmp	r3, #9
 8002614:	d84d      	bhi.n	80026b2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002616:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800261a:	3301      	adds	r3, #1
 800261c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002620:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002624:	2b09      	cmp	r3, #9
 8002626:	d83e      	bhi.n	80026a6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002628:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002632:	4413      	add	r3, r2
 8002634:	3b30      	subs	r3, #48	; 0x30
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002644:	4413      	add	r3, r2
 8002646:	3b30      	subs	r3, #48	; 0x30
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d521      	bpl.n	800269a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002656:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002660:	4413      	add	r3, r2
 8002662:	3b30      	subs	r3, #48	; 0x30
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002668:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800266c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002676:	440a      	add	r2, r1
 8002678:	3a30      	subs	r2, #48	; 0x30
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002682:	440b      	add	r3, r1
 8002684:	3b30      	subs	r3, #48	; 0x30
 8002686:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002688:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002692:	4413      	add	r3, r2
 8002694:	3b30      	subs	r3, #48	; 0x30
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800269a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800269e:	3301      	adds	r3, #1
 80026a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026a4:	e7bc      	b.n	8002620 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026b0:	e7ad      	b.n	800260e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	33b0      	adds	r3, #176	; 0xb0
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	601a      	str	r2, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80026c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	492c      	ldr	r1, [pc, #176]	; (800277c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d4:	3301      	adds	r3, #1
 80026d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026da:	e76c      	b.n	80025b6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 80026e4:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026ec:	4a25      	ldr	r2, [pc, #148]	; (8002784 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 80026ee:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 80026f8:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 8002702:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 800270c:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002716:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 8002720:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002728:	4a1c      	ldr	r2, [pc, #112]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 800272a:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002732:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 8002734:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 800273e:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002748:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x204>)
 8002752:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x208>)
 800275c:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x20c>)
 8002766:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x210>)
 8002770:	6013      	str	r3, [r2, #0]
}
 8002772:	bf00      	nop
 8002774:	3738      	adds	r7, #56	; 0x38
 8002776:	46bd      	mov	sp, r7
 8002778:	bc90      	pop	{r4, r7}
 800277a:	4770      	bx	lr
 800277c:	20000258 	.word	0x20000258
 8002780:	20000218 	.word	0x20000218
 8002784:	2000021c 	.word	0x2000021c
 8002788:	20000220 	.word	0x20000220
 800278c:	20000224 	.word	0x20000224
 8002790:	20000228 	.word	0x20000228
 8002794:	2000022c 	.word	0x2000022c
 8002798:	20000230 	.word	0x20000230
 800279c:	20000234 	.word	0x20000234
 80027a0:	20000238 	.word	0x20000238
 80027a4:	2000023c 	.word	0x2000023c
 80027a8:	20000240 	.word	0x20000240
 80027ac:	20000244 	.word	0x20000244
 80027b0:	20000248 	.word	0x20000248
 80027b4:	2000024c 	.word	0x2000024c
 80027b8:	20000250 	.word	0x20000250

080027bc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0a0      	sub	sp, #128	; 0x80
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f007 fb8b 	bl	8009ee0 <HAL_Delay>

	lcd_clear();
 80027ca:	f7fe fc69 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027ce:	2100      	movs	r1, #0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe fc75 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027d6:	4886      	ldr	r0, [pc, #536]	; (80029f0 <_ZN10LineSensor11calibrationEv+0x234>)
 80027d8:	f7fe fc9c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027dc:	2101      	movs	r1, #1
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe fc6e 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027e4:	4883      	ldr	r0, [pc, #524]	; (80029f4 <_ZN10LineSensor11calibrationEv+0x238>)
 80027e6:	f7fe fc95 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027f0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027f4:	2b0d      	cmp	r3, #13
 80027f6:	d823      	bhi.n	8002840 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80027f8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	32b0      	adds	r2, #176	; 0xb0
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	440a      	add	r2, r1
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002810:	440b      	add	r3, r1
 8002812:	3b40      	subs	r3, #64	; 0x40
 8002814:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002816:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800281a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	32b0      	adds	r2, #176	; 0xb0
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	440a      	add	r2, r1
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800282e:	440b      	add	r3, r1
 8002830:	3b78      	subs	r3, #120	; 0x78
 8002832:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002834:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002838:	3301      	adds	r3, #1
 800283a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800283e:	e7d7      	b.n	80027f0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fc90 	bl	800216c <_ZN8JoyStick8getValueEv>
 800284c:	4603      	mov	r3, r0
 800284e:	2b02      	cmp	r3, #2
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d079      	beq.n	8002950 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800285c:	2300      	movs	r3, #0
 800285e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002862:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002866:	2b0d      	cmp	r3, #13
 8002868:	d850      	bhi.n	800290c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800286a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002874:	4413      	add	r3, r2
 8002876:	3b40      	subs	r3, #64	; 0x40
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	33b0      	adds	r3, #176	; 0xb0
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002894:	d50f      	bpl.n	80028b6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002896:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800289a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	32b0      	adds	r2, #176	; 0xb0
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	440a      	add	r2, r1
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028ae:	440b      	add	r3, r1
 80028b0:	3b40      	subs	r3, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e024      	b.n	8002900 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028c0:	4413      	add	r3, r2
 80028c2:	3b78      	subs	r3, #120	; 0x78
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	33b0      	adds	r3, #176	; 0xb0
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd0e      	ble.n	8002900 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028e2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028e6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	32b0      	adds	r2, #176	; 0xb0
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	440a      	add	r2, r1
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028fa:	440b      	add	r3, r1
 80028fc:	3b78      	subs	r3, #120	; 0x78
 80028fe:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002900:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002904:	3301      	adds	r3, #1
 8002906:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800290a:	e7aa      	b.n	8002862 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fdb2 	bl	800547c <_ZN12RotarySwitch8getValueEv>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800292e:	2201      	movs	r2, #1
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fd39 	bl	80023ac <_ZN3LED2LREaa>
 800293a:	e781      	b.n	8002840 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002942:	2200      	movs	r2, #0
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fd2f 	bl	80023ac <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800294e:	e777      	b.n	8002840 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002950:	2300      	movs	r3, #0
 8002952:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	2b0d      	cmp	r3, #13
 800295c:	d826      	bhi.n	80029ac <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800295e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002968:	4413      	add	r3, r2
 800296a:	3b40      	subs	r3, #64	; 0x40
 800296c:	ed93 7a00 	vldr	s14, [r3]
 8002970:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800297a:	4413      	add	r3, r2
 800297c:	3b78      	subs	r3, #120	; 0x78
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002986:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800298a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80029f8 <_ZN10LineSensor11calibrationEv+0x23c>
 800298e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	3392      	adds	r3, #146	; 0x92
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029a4:	3301      	adds	r3, #1
 80029a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029aa:	e7d4      	b.n	8002956 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029b6:	2b0d      	cmp	r3, #13
 80029b8:	d815      	bhi.n	80029e6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ba:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029be:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029c8:	440a      	add	r2, r1
 80029ca:	3a78      	subs	r2, #120	; 0x78
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	33a0      	adds	r3, #160	; 0xa0
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3304      	adds	r3, #4
 80029d8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029de:	3301      	adds	r3, #1
 80029e0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029e4:	e7e5      	b.n	80029b2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029e6:	bf00      	nop
 80029e8:	3780      	adds	r7, #128	; 0x80
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	08019dd4 	.word	0x08019dd4
 80029f4:	08019de0 	.word	0x08019de0
 80029f8:	447a0000 	.word	0x447a0000

080029fc <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a08:	2303      	movs	r3, #3
 8002a0a:	81bb      	strh	r3, [r7, #12]
 8002a0c:	89bb      	ldrh	r3, [r7, #12]
 8002a0e:	2b0a      	cmp	r3, #10
 8002a10:	d814      	bhi.n	8002a3c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a12:	89bb      	ldrh	r3, [r7, #12]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	33b0      	adds	r3, #176	; 0xb0
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a90 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	db02      	blt.n	8002a34 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	3301      	adds	r3, #1
 8002a32:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a34:	89bb      	ldrh	r3, [r7, #12]
 8002a36:	3301      	adds	r3, #1
 8002a38:	81bb      	strh	r3, [r7, #12]
 8002a3a:	e7e7      	b.n	8002a0c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	2b07      	cmp	r3, #7
 8002a40:	d906      	bls.n	8002a50 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	e002      	b.n	8002a56 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2b63      	cmp	r3, #99	; 0x63
 8002a5c:	d903      	bls.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e002      	b.n	8002a6c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d903      	bls.n	8002a80 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a7e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]

}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	44098000 	.word	0x44098000
 8002a94:	20000290 	.word	0x20000290
 8002a98:	20000292 	.word	0x20000292

08002a9c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aaa:	eef0 7ae7 	vabs.f32	s15, s15
 8002aae:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b48:	3350      	adds	r3, #80	; 0x50
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b54:	3352      	adds	r3, #82	; 0x52
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b60:	3354      	adds	r3, #84	; 0x54
 8002b62:	2200      	movs	r2, #0
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b6c:	3388      	adds	r3, #136	; 0x88
 8002b6e:	2200      	movs	r2, #0
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b78:	338a      	adds	r3, #138	; 0x8a
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b84:	338c      	adds	r3, #140	; 0x8c
 8002b86:	2200      	movs	r2, #0
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b90:	338e      	adds	r3, #142	; 0x8e
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b9c:	338f      	adds	r3, #143	; 0x8f
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba8:	3390      	adds	r3, #144	; 0x90
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bb4:	3394      	adds	r3, #148	; 0x94
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc2:	3398      	adds	r3, #152	; 0x98
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bd0:	339c      	adds	r3, #156	; 0x9c
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bde:	33a0      	adds	r3, #160	; 0xa0
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bec:	33a4      	adds	r3, #164	; 0xa4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bf8:	33a6      	adds	r3, #166	; 0xa6
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a3a      	ldr	r2, [r7, #32]
 8002c14:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c20:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c34:	2300      	movs	r3, #0
 8002c36:	82fb      	strh	r3, [r7, #22]
 8002c38:	8afb      	ldrh	r3, [r7, #22]
 8002c3a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d80d      	bhi.n	8002c5e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002c42:	8afb      	ldrh	r3, [r7, #22]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c56:	8afb      	ldrh	r3, [r7, #22]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	82fb      	strh	r3, [r7, #22]
 8002c5c:	e7ec      	b.n	8002c38 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c5e:	2300      	movs	r3, #0
 8002c60:	82bb      	strh	r3, [r7, #20]
 8002c62:	8abb      	ldrh	r3, [r7, #20]
 8002c64:	2b63      	cmp	r3, #99	; 0x63
 8002c66:	d80d      	bhi.n	8002c84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c68:	8abb      	ldrh	r3, [r7, #20]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c70:	3316      	adds	r3, #22
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c7c:	8abb      	ldrh	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	82bb      	strh	r3, [r7, #20]
 8002c82:	e7ee      	b.n	8002c62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c84:	2300      	movs	r3, #0
 8002c86:	827b      	strh	r3, [r7, #18]
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c8e:	d20d      	bcs.n	8002cac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002c90:	8a7b      	ldrh	r3, [r7, #18]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c98:	333a      	adds	r3, #58	; 0x3a
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ca4:	8a7b      	ldrh	r3, [r7, #18]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	827b      	strh	r3, [r7, #18]
 8002caa:	e7ed      	b.n	8002c88 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	823b      	strh	r3, [r7, #16]
 8002cb0:	8a3b      	ldrh	r3, [r7, #16]
 8002cb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cb6:	d20d      	bcs.n	8002cd4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002cb8:	8a3b      	ldrh	r3, [r7, #16]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002cc0:	332e      	adds	r3, #46	; 0x2e
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ccc:	8a3b      	ldrh	r3, [r7, #16]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	823b      	strh	r3, [r7, #16]
 8002cd2:	e7ed      	b.n	8002cb0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	0000      	movs	r0, r0
 8002ce4:	0000      	movs	r0, r0
	...

08002ce8 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d30:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d34:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <_ZN9LineTrace9calcErrorEv+0xc8>)
 8002d3c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fc19 	bl	8000578 <__aeabi_f2d>
 8002d46:	a316      	add	r3, pc, #88	; (adr r3, 8002da0 <_ZN9LineTrace9calcErrorEv+0xb8>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fc6c 	bl	8000628 <__aeabi_dmul>
 8002d50:	4603      	mov	r3, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4625      	mov	r5, r4
 8002d56:	461c      	mov	r4, r3
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <_ZN9LineTrace9calcErrorEv+0xcc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc0b 	bl	8000578 <__aeabi_f2d>
 8002d62:	a311      	add	r3, pc, #68	; (adr r3, 8002da8 <_ZN9LineTrace9calcErrorEv+0xc0>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f7fd fc5e 	bl	8000628 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4620      	mov	r0, r4
 8002d72:	4629      	mov	r1, r5
 8002d74:	f7fd faa2 	bl	80002bc <__adddf3>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4621      	mov	r1, r4
 8002d80:	f7fd ff4a 	bl	8000c18 <__aeabi_d2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <_ZN9LineTrace9calcErrorEv+0xcc>)
 8002d8c:	6013      	str	r3, [r2, #0]

	return diff;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	ee07 3a90 	vmov	s15, r3

}
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	47ae147b 	.word	0x47ae147b
 8002da4:	3fb47ae1 	.word	0x3fb47ae1
 8002da8:	d70a3d71 	.word	0xd70a3d71
 8002dac:	3fed70a3 	.word	0x3fed70a3
 8002db0:	20000294 	.word	0x20000294
 8002db4:	200002b4 	.word	0x200002b4

08002db8 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff91 	bl	8002ce8 <_ZN9LineTrace9calcErrorEv>
 8002dc6:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002dd4:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dea:	3354      	adds	r3, #84	; 0x54
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d14c      	bne.n	8002e8e <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002dfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	ee17 0a90 	vmov	r0, s15
 8002e22:	f7fd fba9 	bl	8000578 <__aeabi_f2d>
 8002e26:	a350      	add	r3, pc, #320	; (adr r3, 8002f68 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fd26 	bl	800087c <__aeabi_ddiv>
 8002e30:	4603      	mov	r3, r0
 8002e32:	460c      	mov	r4, r1
 8002e34:	4618      	mov	r0, r3
 8002e36:	4621      	mov	r1, r4
 8002e38:	f7fd feee 	bl	8000c18 <__aeabi_d2f>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002e40:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb97 	bl	8000578 <__aeabi_f2d>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5c:	ee17 0a90 	vmov	r0, s15
 8002e60:	f7fd fb8a 	bl	8000578 <__aeabi_f2d>
 8002e64:	a340      	add	r3, pc, #256	; (adr r3, 8002f68 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f7fd fbdd 	bl	8000628 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4620      	mov	r0, r4
 8002e74:	4629      	mov	r1, r5
 8002e76:	f7fd fa21 	bl	80002bc <__adddf3>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4621      	mov	r1, r4
 8002e82:	f7fd fec9 	bl	8000c18 <__aeabi_d2f>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e04b      	b.n	8002f26 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ea6:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	edd7 6a03 	vldr	s13, [r7, #12]
 8002eb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb8:	ee17 0a90 	vmov	r0, s15
 8002ebc:	f7fd fb5c 	bl	8000578 <__aeabi_f2d>
 8002ec0:	a329      	add	r3, pc, #164	; (adr r3, 8002f68 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fcd9 	bl	800087c <__aeabi_ddiv>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	460c      	mov	r4, r1
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	f7fd fea1 	bl	8000c18 <__aeabi_d2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb4a 	bl	8000578 <__aeabi_f2d>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	460d      	mov	r5, r1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	ee17 0a90 	vmov	r0, s15
 8002efa:	f7fd fb3d 	bl	8000578 <__aeabi_f2d>
 8002efe:	a31a      	add	r3, pc, #104	; (adr r3, 8002f68 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fb90 	bl	8000628 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd f9d4 	bl	80002bc <__adddf3>
 8002f14:	4603      	mov	r3, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	f7fd fe7c 	bl	8000c18 <__aeabi_d2f>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f24:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002f26:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3c:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f4a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f52:	4610      	mov	r0, r2
 8002f54:	f002 ffd0 	bl	8005ef8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f58:	4a06      	ldr	r2, [pc, #24]	; (8002f74 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6013      	str	r3, [r2, #0]

}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bdb0      	pop	{r4, r5, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f6c:	3f50624d 	.word	0x3f50624d
 8002f70:	200002bc 	.word	0x200002bc
 8002f74:	200002b8 	.word	0x200002b8

08002f78 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fbbc 	bl	8001702 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 f936 	bl	8005200 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 fe4c 	bl	8004c36 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 fead 	bl	8004d1a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fe2:	3388      	adds	r3, #136	; 0x88
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7fe fb7b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002ff8:	3316      	adds	r3, #22
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003008:	3388      	adds	r3, #136	; 0x88
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003016:	3388      	adds	r3, #136	; 0x88
 8003018:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003020:	3388      	adds	r3, #136	; 0x88
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	2b63      	cmp	r3, #99	; 0x63
 8003026:	d905      	bls.n	8003034 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800302e:	3388      	adds	r3, #136	; 0x88
 8003030:	2263      	movs	r2, #99	; 0x63
 8003032:	801a      	strh	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}

0800303c <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800304e:	338a      	adds	r3, #138	; 0x8a
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	461c      	mov	r4, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7fe fb45 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800305a:	eef0 7a40 	vmov.f32	s15, s0
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003064:	333a      	adds	r3, #58	; 0x3a
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003074:	338a      	adds	r3, #138	; 0x8a
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003082:	338a      	adds	r3, #138	; 0x8a
 8003084:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800308c:	338a      	adds	r3, #138	; 0x8a
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003094:	d306      	bcc.n	80030a4 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800309c:	338a      	adds	r3, #138	; 0x8a
 800309e:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030a2:	801a      	strh	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}

080030ac <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	ed2d 8b02 	vpush	{d8}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d046      	beq.n	8003150 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030c8:	3354      	adds	r3, #84	; 0x54
 80030ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11c      	bne.n	800310c <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69dc      	ldr	r4, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe faf3 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80030e0:	eeb0 8a40 	vmov.f32	s16, s0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 f878 	bl	80051de <_ZN8Odometry8getThetaEv>
 80030ee:	ec53 2b10 	vmov	r2, r3, d0
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fd8f 	bl	8000c18 <__aeabi_d2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	ee00 3a90 	vmov	s1, r3
 8003100:	eeb0 0a48 	vmov.f32	s0, s16
 8003104:	4620      	mov	r0, r4
 8003106:	f001 fc4d 	bl	80049a4 <_ZN6Logger21storeDistanceAndThetaEff>
 800310a:	e01b      	b.n	8003144 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69dc      	ldr	r4, [r3, #28]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe fad6 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800311a:	eeb0 8a40 	vmov.f32	s16, s0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 f85b 	bl	80051de <_ZN8Odometry8getThetaEv>
 8003128:	ec53 2b10 	vmov	r2, r3, d0
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f7fd fd72 	bl	8000c18 <__aeabi_d2f>
 8003134:	4603      	mov	r3, r0
 8003136:	ee00 3a90 	vmov	s1, r3
 800313a:	eeb0 0a48 	vmov.f32	s0, s16
 800313e:	4620      	mov	r0, r4
 8003140:	f001 fc73 	bl	8004a2a <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <_ZN9LineTrace9storeLogsEv+0xb0>)
 800314e:	801a      	strh	r2, [r3, #0]
	}
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	ecbd 8b02 	vpop	{d8}
 800315a:	bd90      	pop	{r4, r7, pc}
 800315c:	20000298 	.word	0x20000298

08003160 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003172:	3354      	adds	r3, #84	; 0x54
 8003174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d143      	bne.n	8003204 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 800317c:	edd7 7a00 	vldr	s15, [r7]
 8003180:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800329c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	d504      	bpl.n	8003198 <_ZN9LineTrace15radius2VelocityEf+0x38>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e076      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8003198:	edd7 7a00 	vldr	s15, [r7]
 800319c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80032a0 <_ZN9LineTrace15radius2VelocityEf+0x140>
 80031a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	d502      	bpl.n	80031b0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e06a      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 80031b0:	edd7 7a00 	vldr	s15, [r7]
 80031b4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032a8 <_ZN9LineTrace15radius2VelocityEf+0x148>
 80031b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d503      	bpl.n	80031ca <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80031c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e05d      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 80031ca:	edd7 7a00 	vldr	s15, [r7]
 80031ce:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80032ac <_ZN9LineTrace15radius2VelocityEf+0x14c>
 80031d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	d502      	bpl.n	80031e2 <_ZN9LineTrace15radius2VelocityEf+0x82>
 80031dc:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e051      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 80031e2:	edd7 7a00 	vldr	s15, [r7]
 80031e6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032b4 <_ZN9LineTrace15radius2VelocityEf+0x154>
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d502      	bpl.n	80031fa <_ZN9LineTrace15radius2VelocityEf+0x9a>
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e045      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e040      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800320a:	3354      	adds	r3, #84	; 0x54
 800320c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d136      	bne.n	8003282 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003214:	edd7 7a00 	vldr	s15, [r7]
 8003218:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800329c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 800321c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d504      	bpl.n	8003230 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e02a      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003230:	edd7 7a00 	vldr	s15, [r7]
 8003234:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032ac <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003240:	d502      	bpl.n	8003248 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e01e      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003248:	edd7 7a00 	vldr	s15, [r7]
 800324c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032b4 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003258:	d502      	bpl.n	8003260 <_ZN9LineTrace15radius2VelocityEf+0x100>
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e012      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003260:	edd7 7a00 	vldr	s15, [r7]
 8003264:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032c0 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d502      	bpl.n	8003278 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e006      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e001      	b.n	8003286 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003284:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	ee07 3a90 	vmov	s15, r3
}
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	43960000 	.word	0x43960000
 80032a0:	44480000 	.word	0x44480000
 80032a4:	3fd9999a 	.word	0x3fd9999a
 80032a8:	447a0000 	.word	0x447a0000
 80032ac:	44bb8000 	.word	0x44bb8000
 80032b0:	40133333 	.word	0x40133333
 80032b4:	44fa0000 	.word	0x44fa0000
 80032b8:	40200000 	.word	0x40200000
 80032bc:	40066666 	.word	0x40066666
 80032c0:	451c4000 	.word	0x451c4000
 80032c4:	40400000 	.word	0x40400000
 80032c8:	3fa66666 	.word	0x3fa66666
 80032cc:	00000000 	.word	0x00000000

080032d0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80032dc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032de:	f241 736f 	movw	r3, #5999	; 0x176f
 80032e2:	83fb      	strh	r3, [r7, #30]
 80032e4:	8bfb      	ldrh	r3, [r7, #30]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 808d 	beq.w	8003406 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032ec:	8bfb      	ldrh	r3, [r7, #30]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032f6:	3304      	adds	r3, #4
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	8bfb      	ldrh	r3, [r7, #30]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003308:	3304      	adds	r3, #4
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003316:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800331a:	edd7 7a06 	vldr	s15, [r7, #24]
 800331e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	dd6a      	ble.n	80033fe <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003328:	8bfb      	ldrh	r3, [r7, #30]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd f920 	bl	8000578 <__aeabi_f2d>
 8003338:	a335      	add	r3, pc, #212	; (adr r3, 8003410 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd f973 	bl	8000628 <__aeabi_dmul>
 8003342:	4603      	mov	r3, r0
 8003344:	460c      	mov	r4, r1
 8003346:	4625      	mov	r5, r4
 8003348:	461c      	mov	r4, r3
 800334a:	69b8      	ldr	r0, [r7, #24]
 800334c:	f7fd f914 	bl	8000578 <__aeabi_f2d>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4620      	mov	r0, r4
 8003356:	4629      	mov	r1, r5
 8003358:	f7fd fa90 	bl	800087c <__aeabi_ddiv>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	4618      	mov	r0, r3
 8003362:	4621      	mov	r1, r4
 8003364:	f7fd fc58 	bl	8000c18 <__aeabi_d2f>
 8003368:	4603      	mov	r3, r0
 800336a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800336c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003370:	ed97 7a05 	vldr	s14, [r7, #20]
 8003374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003378:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800337c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003380:	edd7 7a02 	vldr	s15, [r7, #8]
 8003384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	dd37      	ble.n	80033fe <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800338e:	8bfb      	ldrh	r3, [r7, #30]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003396:	3304      	adds	r3, #4
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8ea 	bl	8000578 <__aeabi_f2d>
 80033a4:	4604      	mov	r4, r0
 80033a6:	460d      	mov	r5, r1
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	ed93 7a00 	vldr	s14, [r3]
 80033b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033bc:	ee17 0a90 	vmov	r0, s15
 80033c0:	f7fd f8da 	bl	8000578 <__aeabi_f2d>
 80033c4:	a312      	add	r3, pc, #72	; (adr r3, 8003410 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f7fd f92d 	bl	8000628 <__aeabi_dmul>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fc ff71 	bl	80002bc <__adddf3>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	4619      	mov	r1, r3
 80033e0:	4622      	mov	r2, r4
 80033e2:	8bfb      	ldrh	r3, [r7, #30]
 80033e4:	1e5c      	subs	r4, r3, #1
 80033e6:	4608      	mov	r0, r1
 80033e8:	4611      	mov	r1, r2
 80033ea:	f7fd fc15 	bl	8000c18 <__aeabi_d2f>
 80033ee:	4601      	mov	r1, r0
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033f6:	3304      	adds	r3, #4
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033fe:	8bfb      	ldrh	r3, [r7, #30]
 8003400:	3b01      	subs	r3, #1
 8003402:	83fb      	strh	r3, [r7, #30]
 8003404:	e76e      	b.n	80032e4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bdb0      	pop	{r4, r5, r7, pc}
 800340e:	bf00      	nop
 8003410:	d2f1a9fc 	.word	0xd2f1a9fc
 8003414:	3f50624d 	.word	0x3f50624d

08003418 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	ed87 0a02 	vstr	s0, [r7, #8]
 8003424:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003426:	2300      	movs	r3, #0
 8003428:	83fb      	strh	r3, [r7, #30]
 800342a:	8bfb      	ldrh	r3, [r7, #30]
 800342c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003430:	4293      	cmp	r3, r2
 8003432:	f200 808d 	bhi.w	8003550 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003436:	8bfb      	ldrh	r3, [r7, #30]
 8003438:	3301      	adds	r3, #1
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003440:	3304      	adds	r3, #4
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003452:	3304      	adds	r3, #4
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003460:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003464:	edd7 7a06 	vldr	s15, [r7, #24]
 8003468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	dd6a      	ble.n	8003548 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 8003472:	8bfb      	ldrh	r3, [r7, #30]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd f87b 	bl	8000578 <__aeabi_f2d>
 8003482:	a335      	add	r3, pc, #212	; (adr r3, 8003558 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fd f8ce 	bl	8000628 <__aeabi_dmul>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4625      	mov	r5, r4
 8003492:	461c      	mov	r4, r3
 8003494:	69b8      	ldr	r0, [r7, #24]
 8003496:	f7fd f86f 	bl	8000578 <__aeabi_f2d>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fd f9eb 	bl	800087c <__aeabi_ddiv>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	4618      	mov	r0, r3
 80034ac:	4621      	mov	r1, r4
 80034ae:	f7fd fbb3 	bl	8000c18 <__aeabi_d2f>
 80034b2:	4603      	mov	r3, r0
 80034b4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80034ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80034be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c2:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	dd37      	ble.n	8003548 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034d8:	8bfb      	ldrh	r3, [r7, #30]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034e0:	3304      	adds	r3, #4
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd f845 	bl	8000578 <__aeabi_f2d>
 80034ee:	4604      	mov	r4, r0
 80034f0:	460d      	mov	r5, r1
 80034f2:	8bfb      	ldrh	r3, [r7, #30]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	ed93 7a00 	vldr	s14, [r3]
 80034fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	ee17 0a90 	vmov	r0, s15
 800350a:	f7fd f835 	bl	8000578 <__aeabi_f2d>
 800350e:	a312      	add	r3, pc, #72	; (adr r3, 8003558 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f7fd f888 	bl	8000628 <__aeabi_dmul>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fc fecc 	bl	80002bc <__adddf3>
 8003524:	4603      	mov	r3, r0
 8003526:	460c      	mov	r4, r1
 8003528:	4619      	mov	r1, r3
 800352a:	4622      	mov	r2, r4
 800352c:	8bfb      	ldrh	r3, [r7, #30]
 800352e:	1c5c      	adds	r4, r3, #1
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	f7fd fb70 	bl	8000c18 <__aeabi_d2f>
 8003538:	4601      	mov	r1, r0
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003540:	3304      	adds	r3, #4
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003548:	8bfb      	ldrh	r3, [r7, #30]
 800354a:	3301      	adds	r3, #1
 800354c:	83fb      	strh	r3, [r7, #30]
 800354e:	e76c      	b.n	800342a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003550:	bf00      	nop
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bdb0      	pop	{r4, r5, r7, pc}
 8003558:	d2f1a9fc 	.word	0xd2f1a9fc
 800355c:	3f50624d 	.word	0x3f50624d

08003560 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe f8d6 	bl	800171e <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003594:	3350      	adds	r3, #80	; 0x50
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a0:	3352      	adds	r3, #82	; 0x52
 80035a2:	2200      	movs	r2, #0
 80035a4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035ac:	330c      	adds	r3, #12
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ce:	3350      	adds	r3, #80	; 0x50
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 809c 	beq.w	8003710 <_ZN9LineTrace20updateTargetVelocityEv+0x150>
		while(encoder_->getTotalDistance()*0.9527 >= ref_distance_){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe f881 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80035e2:	ee10 3a10 	vmov	r3, s0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc ffc6 	bl	8000578 <__aeabi_f2d>
 80035ec:	a34e      	add	r3, pc, #312	; (adr r3, 8003728 <_ZN9LineTrace20updateTargetVelocityEv+0x168>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f7fd f819 	bl	8000628 <__aeabi_dmul>
 80035f6:	4603      	mov	r3, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	4625      	mov	r5, r4
 80035fc:	461c      	mov	r4, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003604:	330c      	adds	r3, #12
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc ffb5 	bl	8000578 <__aeabi_f2d>
 800360e:	460a      	mov	r2, r1
 8003610:	4601      	mov	r1, r0
 8003612:	2301      	movs	r3, #1
 8003614:	461e      	mov	r6, r3
 8003616:	4613      	mov	r3, r2
 8003618:	460a      	mov	r2, r1
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f7fd fa89 	bl	8000b34 <__aeabi_dcmpge>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <_ZN9LineTrace20updateTargetVelocityEv+0x6c>
 8003628:	2300      	movs	r3, #0
 800362a:	461e      	mov	r6, r3
 800362c:	b2f3      	uxtb	r3, r6
 800362e:	2b00      	cmp	r3, #0
 8003630:	d026      	beq.n	8003680 <_ZN9LineTrace20updateTargetVelocityEv+0xc0>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003638:	330c      	adds	r3, #12
 800363a:	ed93 7a00 	vldr	s14, [r3]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003644:	3352      	adds	r3, #82	; 0x52
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	3332      	adds	r3, #50	; 0x32
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3304      	adds	r3, #4
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003660:	330c      	adds	r3, #12
 8003662:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800366c:	3352      	adds	r3, #82	; 0x52
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800367a:	3352      	adds	r3, #82	; 0x52
 800367c:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance()*0.9527 >= ref_distance_){
 800367e:	e7ab      	b.n	80035d8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003686:	3352      	adds	r3, #82	; 0x52
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	f241 726f 	movw	r2, #5999	; 0x176f
 800368e:	4293      	cmp	r3, r2
 8003690:	d906      	bls.n	80036a0 <_ZN9LineTrace20updateTargetVelocityEv+0xe0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003698:	3352      	adds	r3, #82	; 0x52
 800369a:	f241 726f 	movw	r2, #5999	; 0x176f
 800369e:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036a6:	330c      	adds	r3, #12
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <_ZN9LineTrace20updateTargetVelocityEv+0x158>)
 80036ac:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe f816 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036b8:	eef0 7a40 	vmov.f32	s15, s0
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <_ZN9LineTrace20updateTargetVelocityEv+0x15c>)
 80036be:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c8:	3352      	adds	r3, #82	; 0x52
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <_ZN9LineTrace20updateTargetVelocityEv+0x160>)
 80036ce:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d6:	3352      	adds	r3, #82	; 0x52
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036e0:	3304      	adds	r3, #4
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	eeb0 0a67 	vmov.f32	s0, s15
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 faeb 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036fa:	3352      	adds	r3, #82	; 0x52
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003704:	3304      	adds	r3, #4
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a05      	ldr	r2, [pc, #20]	; (8003724 <_ZN9LineTrace20updateTargetVelocityEv+0x164>)
 800370e:	6013      	str	r3, [r2, #0]

	}
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003718:	200002a4 	.word	0x200002a4
 800371c:	200002a8 	.word	0x200002a8
 8003720:	200002ac 	.word	0x200002ac
 8003724:	200002b0 	.word	0x200002b0
 8003728:	b5dcc63f 	.word	0xb5dcc63f
 800372c:	3fee7c84 	.word	0x3fee7c84

08003730 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd ffbe 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800374a:	eeb0 7a40 	vmov.f32	s14, s0
 800374e:	edd7 7a00 	vldr	s15, [r7]
 8003752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	bf94      	ite	ls
 800375c:	2301      	movls	r3, #1
 800375e:	2300      	movhi	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800378c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003790:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003798:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b8:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037bc:	4a3e      	ldr	r2, [pc, #248]	; (80038b8 <_ZN9LineTrace11isCrossLineEv+0x144>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80037c2:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x148>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037c8:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d041      	beq.n	800385a <_ZN9LineTrace11isCrossLineEv+0xe6>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80037d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037da:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80038c4 <_ZN9LineTrace11isCrossLineEv+0x150>
 80037de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d50f      	bpl.n	8003808 <_ZN9LineTrace11isCrossLineEv+0x94>
 80037e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ec:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80038c4 <_ZN9LineTrace11isCrossLineEv+0x150>
 80037f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f8:	d506      	bpl.n	8003808 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003804:	801a      	strh	r2, [r3, #0]
 8003806:	e002      	b.n	800380e <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800380e:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d94a      	bls.n	80038ac <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = true;
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003824:	2200      	movs	r2, #0
 8003826:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800382e:	3390      	adds	r3, #144	; 0x90
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800383a:	3354      	adds	r3, #84	; 0x54
 800383c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fbc3 	bl	8002fd0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 800384a:	e02f      	b.n	80038ac <_ZN9LineTrace11isCrossLineEv+0x138>
			}
			else{
				//correctionTotalDistanceFromCrossLine();
				correction_check_cnt_ = 0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003852:	33a4      	adds	r3, #164	; 0xa4
 8003854:	2200      	movs	r2, #0
 8003856:	801a      	strh	r2, [r3, #0]
 8003858:	e028      	b.n	80038ac <_ZN9LineTrace11isCrossLineEv+0x138>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800385a:	edd7 7a03 	vldr	s15, [r7, #12]
 800385e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038d0 <_ZN9LineTrace11isCrossLineEv+0x15c>
 8003862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	dd0f      	ble.n	800388c <_ZN9LineTrace11isCrossLineEv+0x118>
 800386c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003870:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80038d0 <_ZN9LineTrace11isCrossLineEv+0x15c>
 8003874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387c:	dd06      	ble.n	800388c <_ZN9LineTrace11isCrossLineEv+0x118>
			cnt++;
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	e002      	b.n	8003892 <_ZN9LineTrace11isCrossLineEv+0x11e>
		}
		else{
			cnt = 0;
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 800388e:	2200      	movs	r2, #0
 8003890:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	2b09      	cmp	r3, #9
 8003898:	d908      	bls.n	80038ac <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = false;
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x158>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x158>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	2000029c 	.word	0x2000029c
 80038bc:	200002a0 	.word	0x200002a0
 80038c0:	200002c3 	.word	0x200002c3
 80038c4:	44160000 	.word	0x44160000
 80038c8:	200002c0 	.word	0x200002c0
 80038cc:	200002c2 	.word	0x200002c2
 80038d0:	43fa0000 	.word	0x43fa0000

080038d4 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd feee 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80038ea:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fc73 	bl	80051de <_ZN8Odometry8getThetaEv>
 80038f8:	ec54 3b10 	vmov	r3, r4, d0
 80038fc:	4618      	mov	r0, r3
 80038fe:	4621      	mov	r1, r4
 8003900:	f7fd f98a 	bl	8000c18 <__aeabi_d2f>
 8003904:	4603      	mov	r3, r0
 8003906:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003908:	edd7 7a04 	vldr	s15, [r7, #16]
 800390c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d101      	bne.n	800391a <_ZN9LineTrace8isStableEv+0x46>
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <_ZN9LineTrace8isStableEv+0xd0>)
 8003918:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800391a:	ed97 7a02 	vldr	s14, [r7, #8]
 800391e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003922:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003926:	eeb0 0a66 	vmov.f32	s0, s13
 800392a:	f7ff f8b7 	bl	8002a9c <_ZSt3absf>
 800392e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003932:	edd7 7a03 	vldr	s15, [r7, #12]
 8003936:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039a8 <_ZN9LineTrace8isStableEv+0xd4>
 800393a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	db01      	blt.n	8003948 <_ZN9LineTrace8isStableEv+0x74>
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <_ZN9LineTrace8isStableEv+0xd8>)
 8003946:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800394e:	3390      	adds	r3, #144	; 0x90
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003958:	2200      	movs	r2, #0
 800395a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003962:	3390      	adds	r3, #144	; 0x90
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003968:	edd7 7a03 	vldr	s15, [r7, #12]
 800396c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039b4 <_ZN9LineTrace8isStableEv+0xe0>
 8003970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	db06      	blt.n	8003988 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <_ZN9LineTrace8isStableEv+0xdc>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	3301      	adds	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	e002      	b.n	800398e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <_ZN9LineTrace8isStableEv+0xdc>)
 800398a:	2200      	movs	r2, #0
 800398c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d901      	bls.n	800399a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd90      	pop	{r4, r7, pc}
 80039a4:	3727c5ac 	.word	0x3727c5ac
 80039a8:	459c4000 	.word	0x459c4000
 80039ac:	459c4000 	.word	0x459c4000
 80039b0:	200002c4 	.word	0x200002c4
 80039b4:	44fa0000 	.word	0x44fa0000

080039b8 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b092      	sub	sp, #72	; 0x48
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039c4:	2201      	movs	r2, #1
 80039c6:	4963      	ldr	r1, [pc, #396]	; (8003b54 <_ZN9LineTrace4initEv+0x19c>)
 80039c8:	4863      	ldr	r0, [pc, #396]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 80039ca:	f7fd ffad 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039d2:	2201      	movs	r2, #1
 80039d4:	4961      	ldr	r1, [pc, #388]	; (8003b5c <_ZN9LineTrace4initEv+0x1a4>)
 80039d6:	4860      	ldr	r0, [pc, #384]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 80039d8:	f7fd ffa6 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039e0:	2201      	movs	r2, #1
 80039e2:	495f      	ldr	r1, [pc, #380]	; (8003b60 <_ZN9LineTrace4initEv+0x1a8>)
 80039e4:	485c      	ldr	r0, [pc, #368]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 80039e6:	f7fd ff9f 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80039f2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80039f6:	eeb0 1a66 	vmov.f32	s2, s13
 80039fa:	eef0 0a47 	vmov.f32	s1, s14
 80039fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8c6 	bl	8003b94 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4955      	ldr	r1, [pc, #340]	; (8003b64 <_ZN9LineTrace4initEv+0x1ac>)
 8003a10:	4851      	ldr	r0, [pc, #324]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a12:	f7fd ff89 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4952      	ldr	r1, [pc, #328]	; (8003b68 <_ZN9LineTrace4initEv+0x1b0>)
 8003a1e:	484e      	ldr	r0, [pc, #312]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a20:	f7fd ff82 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4950      	ldr	r1, [pc, #320]	; (8003b6c <_ZN9LineTrace4initEv+0x1b4>)
 8003a2c:	484a      	ldr	r0, [pc, #296]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a2e:	f7fd ff7b 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a36:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a3a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a3e:	eeb0 1a66 	vmov.f32	s2, s13
 8003a42:	eef0 0a47 	vmov.f32	s1, s14
 8003a46:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8e8 	bl	8003c20 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a54:	2201      	movs	r2, #1
 8003a56:	4946      	ldr	r1, [pc, #280]	; (8003b70 <_ZN9LineTrace4initEv+0x1b8>)
 8003a58:	483f      	ldr	r0, [pc, #252]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a5a:	f7fd ff65 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a62:	2201      	movs	r2, #1
 8003a64:	4943      	ldr	r1, [pc, #268]	; (8003b74 <_ZN9LineTrace4initEv+0x1bc>)
 8003a66:	483c      	ldr	r0, [pc, #240]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a68:	f7fd ff5e 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a70:	2201      	movs	r2, #1
 8003a72:	4941      	ldr	r1, [pc, #260]	; (8003b78 <_ZN9LineTrace4initEv+0x1c0>)
 8003a74:	4838      	ldr	r0, [pc, #224]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a76:	f7fd ff57 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a7a:	f107 0320 	add.w	r3, r7, #32
 8003a7e:	2201      	movs	r2, #1
 8003a80:	493e      	ldr	r1, [pc, #248]	; (8003b7c <_ZN9LineTrace4initEv+0x1c4>)
 8003a82:	4835      	ldr	r0, [pc, #212]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a84:	f7fd ff50 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	493c      	ldr	r1, [pc, #240]	; (8003b80 <_ZN9LineTrace4initEv+0x1c8>)
 8003a90:	4831      	ldr	r0, [pc, #196]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003a92:	f7fd ff49 	bl	8001928 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f913 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003aa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f91c 	bl	8003cea <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003ab2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f925 	bl	8003d0a <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ac0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f92e 	bl	8003d2a <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003ace:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f937 	bl	8003d4a <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003adc:	f107 0318 	add.w	r3, r7, #24
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4928      	ldr	r1, [pc, #160]	; (8003b84 <_ZN9LineTrace4initEv+0x1cc>)
 8003ae4:	481c      	ldr	r0, [pc, #112]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003ae6:	f7fd ff1f 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	2201      	movs	r2, #1
 8003af0:	4925      	ldr	r1, [pc, #148]	; (8003b88 <_ZN9LineTrace4initEv+0x1d0>)
 8003af2:	4819      	ldr	r0, [pc, #100]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003af4:	f7fd ff18 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003af8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003afc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b00:	eef0 0a47 	vmov.f32	s1, s14
 8003b04:	eeb0 0a67 	vmov.f32	s0, s15
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f97e 	bl	8003e0a <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	2201      	movs	r2, #1
 8003b20:	491a      	ldr	r1, [pc, #104]	; (8003b8c <_ZN9LineTrace4initEv+0x1d4>)
 8003b22:	480d      	ldr	r0, [pc, #52]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003b24:	f7fd ff00 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4918      	ldr	r1, [pc, #96]	; (8003b90 <_ZN9LineTrace4initEv+0x1d8>)
 8003b30:	4809      	ldr	r0, [pc, #36]	; (8003b58 <_ZN9LineTrace4initEv+0x1a0>)
 8003b32:	f7fd fef9 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b36:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b3e:	eef0 0a47 	vmov.f32	s1, s14
 8003b42:	eeb0 0a67 	vmov.f32	s0, s15
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f979 	bl	8003e3e <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b4c:	bf00      	nop
 8003b4e:	3748      	adds	r7, #72	; 0x48
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	08019e20 	.word	0x08019e20
 8003b58:	08019e28 	.word	0x08019e28
 8003b5c:	08019e30 	.word	0x08019e30
 8003b60:	08019e38 	.word	0x08019e38
 8003b64:	08019e40 	.word	0x08019e40
 8003b68:	08019e4c 	.word	0x08019e4c
 8003b6c:	08019e58 	.word	0x08019e58
 8003b70:	08019e64 	.word	0x08019e64
 8003b74:	08019e70 	.word	0x08019e70
 8003b78:	08019e7c 	.word	0x08019e7c
 8003b7c:	08019e88 	.word	0x08019e88
 8003b80:	08019e94 	.word	0x08019e94
 8003b84:	08019ea0 	.word	0x08019ea0
 8003b88:	08019ea8 	.word	0x08019ea8
 8003b8c:	08019eb0 	.word	0x08019eb0
 8003b90:	08019ebc 	.word	0x08019ebc

08003b94 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ba4:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	ee07 3a90 	vmov	s15, r3
}
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	return ki_;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	ee07 3a90 	vmov	s15, r3
}
 8003bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	ee07 3a90 	vmov	s15, r3
}
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c30:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	ee07 3a90 	vmov	s15, r3
}
 8003c62:	eeb0 0a67 	vmov.f32	s0, s15
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	ee07 3a90 	vmov	s15, r3
}
 8003c80:	eeb0 0a67 	vmov.f32	s0, s15
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	ee07 3a90 	vmov	s15, r3
}
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d78:	ee07 3a90 	vmov	s15, r3
}
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d98:	ee07 3a90 	vmov	s15, r3
}
 8003d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003db8:	ee07 3a90 	vmov	s15, r3
}
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dd8:	ee07 3a90 	vmov	s15, r3
}
 8003ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003df8:	ee07 3a90 	vmov	s15, r3
}
 8003dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e16:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e20:	3394      	adds	r3, #148	; 0x94
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e2c:	3398      	adds	r3, #152	; 0x98
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e4a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e54:	339c      	adds	r3, #156	; 0x9c
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e60:	33a0      	adds	r3, #160	; 0xa0
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e80:	3394      	adds	r3, #148	; 0x94
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	ee07 3a90 	vmov	s15, r3
}
 8003e88:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ea4:	33a0      	adds	r3, #160	; 0xa0
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	ee07 3a90 	vmov	s15, r3
}
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ec8:	339c      	adds	r3, #156	; 0x9c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	ee07 3a90 	vmov	s15, r3
}
 8003ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003eec:	3398      	adds	r3, #152	; 0x98
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	ee07 3a90 	vmov	s15, r3
}
 8003ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80fb 	beq.w	800410e <_ZN9LineTrace4flipEv+0x20a>
		// ---- line following processing -----//
		pidTrace();
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fe ff4d 	bl	8002db8 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fb4e 	bl	80035c0 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//
		if(isTargetDistance(50) == true){
 8003f24:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8004118 <_ZN9LineTrace4flipEv+0x214>
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fc01 	bl	8003730 <_ZN9LineTrace16isTargetDistanceEf>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d028      	beq.n	8003f86 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff f8b9 	bl	80030ac <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fcca 	bl	80038d4 <_ZN9LineTrace8isStableEv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <_ZN9LineTrace4flipEv+0x5c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fc04 	bl	8005758 <_ZN10SideSensor10getStatusLEv>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <_ZN9LineTrace4flipEv+0x5c>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <_ZN9LineTrace4flipEv+0x5e>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f6c:	338f      	adds	r3, #143	; 0x8f
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd fbc3 	bl	8001702 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f93d 	bl	8005200 <_ZN8Odometry13clearPotitionEv>
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f8c:	338f      	adds	r3, #143	; 0x8f
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <_ZN9LineTrace4flipEv+0xa4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fbdd 	bl	8005758 <_ZN10SideSensor10getStatusLEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <_ZN9LineTrace4flipEv+0xa4>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <_ZN9LineTrace4flipEv+0xa6>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01d      	beq.n	8003fea <_ZN9LineTrace4flipEv+0xe6>
			if(mode_selector_ == FIRST_RUNNING){
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fb4:	3354      	adds	r3, #84	; 0x54
 8003fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <_ZN9LineTrace4flipEv+0xc2>
				storeSideLineDistance();
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff f83c 	bl	800303c <_ZN9LineTrace21storeSideLineDistanceEv>
 8003fc4:	e005      	b.n	8003fd2 <_ZN9LineTrace4flipEv+0xce>
			}
			else{
				//correctionTotalDistanceFromSideMarker();
				correction_check_cnt_ = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fcc:	33a4      	adds	r3, #164	; 0xa4
 8003fce:	2200      	movs	r2, #0
 8003fd0:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fd8:	338f      	adds	r3, #143	; 0x8f
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fe4:	3390      	adds	r3, #144	; 0x90
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fbc2 	bl	8003774 <_ZN9LineTrace11isCrossLineEv>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <_ZN9LineTrace4flipEv+0x106>
			side_sensor_->enableIgnore();
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 fbd4 	bl	80057a8 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd fba7 	bl	8001758 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fbe4 	bl	80057dc <_ZN10SideSensor13getIgnoreFlagEv>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00f      	beq.n	800403a <_ZN9LineTrace4flipEv+0x136>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fb8b 	bl	800173a <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004024:	eeb0 7a40 	vmov.f32	s14, s0
 8004028:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800411c <_ZN9LineTrace4flipEv+0x218>
 800402c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	db01      	blt.n	800403a <_ZN9LineTrace4flipEv+0x136>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <_ZN9LineTrace4flipEv+0x138>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <_ZN9LineTrace4flipEv+0x146>
			side_sensor_->disableIgnore();
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fbbc 	bl	80057c2 <_ZN10SideSensor13disableIgnoreEv>
		}


		if(stable_flag_ == true) led_.LR(-1, 1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004050:	338f      	adds	r3, #143	; 0x8f
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <_ZN9LineTrace4flipEv+0x166>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	330c      	adds	r3, #12
 800405c:	2201      	movs	r2, #1
 800405e:	f04f 31ff 	mov.w	r1, #4294967295
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe f9a2 	bl	80023ac <_ZN3LED2LREaa>
 8004068:	e007      	b.n	800407a <_ZN9LineTrace4flipEv+0x176>
		else led_.LR(-1, 0);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	330c      	adds	r3, #12
 800406e:	2200      	movs	r2, #0
 8004070:	f04f 31ff 	mov.w	r1, #4294967295
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe f999 	bl	80023ac <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fcbc 	bl	80029fc <_ZN10LineSensor13emergencyStopEv>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004120 <_ZN9LineTrace4flipEv+0x21c>
 8004092:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004120 <_ZN9LineTrace4flipEv+0x21c>
 8004096:	4618      	mov	r0, r3
 8004098:	f001 ff2e 	bl	8005ef8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f96f 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ac:	33a4      	adds	r3, #164	; 0xa4
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ba:	33a4      	adds	r3, #164	; 0xa4
 80040bc:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040c4:	33a4      	adds	r3, #164	; 0xa4
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <_ZN9LineTrace4flipEv+0x1da>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040d6:	33a4      	adds	r3, #164	; 0xa4
 80040d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80040dc:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040e4:	33a4      	adds	r3, #164	; 0xa4
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d808      	bhi.n	80040fe <_ZN9LineTrace4flipEv+0x1fa>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	330c      	adds	r3, #12
 80040f0:	2201      	movs	r2, #1
 80040f2:	f04f 31ff 	mov.w	r1, #4294967295
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe f958 	bl	80023ac <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 80040fc:	e007      	b.n	800410e <_ZN9LineTrace4flipEv+0x20a>
		else led_.LR(-1, 0);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	330c      	adds	r3, #12
 8004102:	2200      	movs	r2, #0
 8004104:	f04f 31ff 	mov.w	r1, #4294967295
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe f94f 	bl	80023ac <_ZN3LED2LREaa>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	42480000 	.word	0x42480000
 800411c:	428c0000 	.word	0x428c0000
 8004120:	00000000 	.word	0x00000000

08004124 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004136:	3354      	adds	r3, #84	; 0x54
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	801a      	strh	r2, [r3, #0]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f001 ff20 	bl	8005faa <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fb0a 	bl	8005788 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800417a:	3388      	adds	r3, #136	; 0x88
 800417c:	2200      	movs	r2, #0
 800417e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004186:	338a      	adds	r3, #138	; 0x8a
 8004188:	2200      	movs	r2, #0
 800418a:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004192:	338c      	adds	r3, #140	; 0x8c
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80041ac:	2300      	movs	r3, #0
 80041ae:	737b      	strb	r3, [r7, #13]
	start();
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ffc9 	bl	8004148 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d15b      	bne.n	8004274 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <_ZN9LineTrace7runningEv+0x28>
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d030      	beq.n	8004228 <_ZN9LineTrace7runningEv+0x88>
 80041c6:	e054      	b.n	8004272 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 facf 	bl	8005770 <_ZN10SideSensor16getWhiteLineCntREv>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d044      	beq.n	800426c <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fe fec8 	bl	8002f78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041ee:	3354      	adds	r3, #84	; 0x54
 80041f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f9b1 	bl	8003560 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd faa8 	bl	8001758 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd fa86 	bl	800171e <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	330c      	adds	r3, #12
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f8c5 	bl	80023ac <_ZN3LED2LREaa>
				stage = 10;
 8004222:	230a      	movs	r3, #10
 8004224:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004226:	e021      	b.n	800426c <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fa9f 	bl	8005770 <_ZN10SideSensor16getWhiteLineCntREv>
 8004232:	4603      	mov	r3, r0
 8004234:	2b02      	cmp	r3, #2
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fe feb3 	bl	8002fae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff f99c 	bl	8003586 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800424e:	2064      	movs	r0, #100	; 0x64
 8004250:	f005 fe46 	bl	8009ee0 <HAL_Delay>

				setTargetVelocity(0);
 8004254:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004284 <_ZN9LineTrace7runningEv+0xe4>
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff fd36 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800425e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004262:	f005 fe3d 	bl	8009ee0 <HAL_Delay>

				goal_flag = true;
 8004266:	2301      	movs	r3, #1
 8004268:	737b      	strb	r3, [r7, #13]

			}

			break;
 800426a:	e001      	b.n	8004270 <_ZN9LineTrace7runningEv+0xd0>
			break;
 800426c:	bf00      	nop
 800426e:	e7a2      	b.n	80041b6 <_ZN9LineTrace7runningEv+0x16>
			break;
 8004270:	bf00      	nop
	while(goal_flag == false){
 8004272:	e7a0      	b.n	80041b6 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f807 	bl	8004288 <_ZN9LineTrace4stopEv>
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	00000000 	.word	0x00000000

08004288 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fe97 	bl	8005fd0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	330c      	adds	r3, #12
 80042a6:	2201      	movs	r2, #1
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe f87d 	bl	80023ac <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042b8:	3354      	adds	r3, #84	; 0x54
 80042ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69d8      	ldr	r0, [r3, #28]
 80042c6:	4b23      	ldr	r3, [pc, #140]	; (8004354 <_ZN9LineTrace4stopEv+0xcc>)
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <_ZN9LineTrace4stopEv+0xd0>)
 80042ca:	4924      	ldr	r1, [pc, #144]	; (800435c <_ZN9LineTrace4stopEv+0xd4>)
 80042cc:	f000 fc4c 	bl	8004b68 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80042d0:	e006      	b.n	80042e0 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69d8      	ldr	r0, [r3, #28]
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <_ZN9LineTrace4stopEv+0xd8>)
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <_ZN9LineTrace4stopEv+0xdc>)
 80042da:	4920      	ldr	r1, [pc, #128]	; (800435c <_ZN9LineTrace4stopEv+0xd4>)
 80042dc:	f000 fc67 	bl	8004bae <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042e6:	3358      	adds	r3, #88	; 0x58
 80042e8:	2200      	movs	r2, #0
 80042ea:	9200      	str	r2, [sp, #0]
 80042ec:	2264      	movs	r2, #100	; 0x64
 80042ee:	491e      	ldr	r1, [pc, #120]	; (8004368 <_ZN9LineTrace4stopEv+0xe0>)
 80042f0:	481a      	ldr	r0, [pc, #104]	; (800435c <_ZN9LineTrace4stopEv+0xd4>)
 80042f2:	f7fd fab3 	bl	800185c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80042fc:	33e8      	adds	r3, #232	; 0xe8
 80042fe:	2200      	movs	r2, #0
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004306:	4919      	ldr	r1, [pc, #100]	; (800436c <_ZN9LineTrace4stopEv+0xe4>)
 8004308:	4814      	ldr	r0, [pc, #80]	; (800435c <_ZN9LineTrace4stopEv+0xd4>)
 800430a:	f7fd faa7 	bl	800185c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8004314:	33b8      	adds	r3, #184	; 0xb8
 8004316:	2200      	movs	r2, #0
 8004318:	9200      	str	r2, [sp, #0]
 800431a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800431e:	4914      	ldr	r1, [pc, #80]	; (8004370 <_ZN9LineTrace4stopEv+0xe8>)
 8004320:	480e      	ldr	r0, [pc, #56]	; (800435c <_ZN9LineTrace4stopEv+0xd4>)
 8004322:	f7fd fa9b 	bl	800185c <sd_write_array_float>

	led_.LR(-1, 0);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	330c      	adds	r3, #12
 800432a:	2200      	movs	r2, #0
 800432c:	f04f 31ff 	mov.w	r1, #4294967295
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe f83b 	bl	80023ac <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fcc7 	bl	8004cce <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fc76 	bl	8004c36 <_ZN6Logger10resetLogs2Ev>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	08019ec8 	.word	0x08019ec8
 8004358:	08019ed4 	.word	0x08019ed4
 800435c:	08019ee4 	.word	0x08019ee4
 8004360:	08019ef0 	.word	0x08019ef0
 8004364:	08019efc 	.word	0x08019efc
 8004368:	08019f0c 	.word	0x08019f0c
 800436c:	08019f1c 	.word	0x08019f1c
 8004370:	08019f28 	.word	0x08019f28

08004374 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b08b      	sub	sp, #44	; 0x2c
 8004378:	af02      	add	r7, sp, #8
 800437a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fb95 	bl	8004ab0 <_ZN6Logger23getDistanceArrayPointerEv>
 8004386:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fb9d 	bl	8004acc <_ZN6Logger20getThetaArrayPointerEv>
 8004392:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004394:	2300      	movs	r3, #0
 8004396:	837b      	strh	r3, [r7, #26]
 8004398:	8b7b      	ldrh	r3, [r7, #26]
 800439a:	f241 726f 	movw	r2, #5999	; 0x176f
 800439e:	4293      	cmp	r3, r2
 80043a0:	d84b      	bhi.n	800443a <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80043a2:	8b7b      	ldrh	r3, [r7, #26]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80043ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80043be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c6:	d101      	bne.n	80043cc <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80043c8:	4b4c      	ldr	r3, [pc, #304]	; (80044fc <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80043ca:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80043cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80043d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80043d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043d8:	eeb0 0a66 	vmov.f32	s0, s13
 80043dc:	f7fe fb5e 	bl	8002a9c <_ZSt3absf>
 80043e0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80043e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80043e8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004500 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80043ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	db01      	blt.n	80043fa <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80043f8:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80043fa:	8b7c      	ldrh	r4, [r7, #26]
 80043fc:	ed97 0a05 	vldr	s0, [r7, #20]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe fead 	bl	8003160 <_ZN9LineTrace15radius2VelocityEf>
 8004406:	eef0 7a40 	vmov.f32	s15, s0
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004410:	3304      	adds	r3, #4
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800441a:	8b7b      	ldrh	r3, [r7, #26]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	441a      	add	r2, r3
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3304      	adds	r3, #4
 8004430:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	3301      	adds	r3, #1
 8004436:	837b      	strh	r3, [r7, #26]
 8004438:	e7ae      	b.n	8004398 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004440:	3354      	adds	r3, #84	; 0x54
 8004442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d120      	bne.n	800448c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004456:	3310      	adds	r3, #16
 8004458:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004460:	3398      	adds	r3, #152	; 0x98
 8004462:	edd3 7a00 	vldr	s15, [r3]
 8004466:	6939      	ldr	r1, [r7, #16]
 8004468:	eeb0 0a67 	vmov.f32	s0, s15
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fe ff2f 	bl	80032d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004478:	3394      	adds	r3, #148	; 0x94
 800447a:	edd3 7a00 	vldr	s15, [r3]
 800447e:	6939      	ldr	r1, [r7, #16]
 8004480:	eeb0 0a67 	vmov.f32	s0, s15
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7fe ffc7 	bl	8003418 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800448a:	e027      	b.n	80044dc <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004492:	3354      	adds	r3, #84	; 0x54
 8004494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11f      	bne.n	80044dc <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044a8:	3310      	adds	r3, #16
 80044aa:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80044b2:	33a0      	adds	r3, #160	; 0xa0
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	6939      	ldr	r1, [r7, #16]
 80044ba:	eeb0 0a67 	vmov.f32	s0, s15
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fe ff06 	bl	80032d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80044ca:	339c      	adds	r3, #156	; 0x9c
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	6939      	ldr	r1, [r7, #16]
 80044d2:	eeb0 0a67 	vmov.f32	s0, s15
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fe ff9e 	bl	8003418 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044e2:	3310      	adds	r3, #16
 80044e4:	2200      	movs	r2, #0
 80044e6:	9200      	str	r2, [sp, #0]
 80044e8:	f241 7270 	movw	r2, #6000	; 0x1770
 80044ec:	4906      	ldr	r1, [pc, #24]	; (8004508 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80044f0:	f7fd f9b4 	bl	800185c <sd_write_array_float>

}
 80044f4:	bf00      	nop
 80044f6:	3724      	adds	r7, #36	; 0x24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}
 80044fc:	3727c5ac 	.word	0x3727c5ac
 8004500:	459c4000 	.word	0x459c4000
 8004504:	459c4000 	.word	0x459c4000
 8004508:	08019f38 	.word	0x08019f38
 800450c:	08019ee4 	.word	0x08019ee4

08004510 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b08b      	sub	sp, #44	; 0x2c
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69d8      	ldr	r0, [r3, #28]
 800451c:	4b6b      	ldr	r3, [pc, #428]	; (80046cc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800451e:	4a6c      	ldr	r2, [pc, #432]	; (80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004520:	496c      	ldr	r1, [pc, #432]	; (80046d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004522:	f000 fb69 	bl	8004bf8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800452c:	3358      	adds	r3, #88	; 0x58
 800452e:	2264      	movs	r2, #100	; 0x64
 8004530:	4969      	ldr	r1, [pc, #420]	; (80046d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004532:	4868      	ldr	r0, [pc, #416]	; (80046d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004534:	f7fd f9f8 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800453e:	33e8      	adds	r3, #232	; 0xe8
 8004540:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004544:	4965      	ldr	r1, [pc, #404]	; (80046dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8004546:	4863      	ldr	r0, [pc, #396]	; (80046d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004548:	f7fd f9ee 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 faad 	bl	8004ab0 <_ZN6Logger23getDistanceArrayPointerEv>
 8004556:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fab5 	bl	8004acc <_ZN6Logger20getThetaArrayPointerEv>
 8004562:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004564:	2300      	movs	r3, #0
 8004566:	837b      	strh	r3, [r7, #26]
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f241 726f 	movw	r2, #5999	; 0x176f
 800456e:	4293      	cmp	r3, r2
 8004570:	d84b      	bhi.n	800460a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800457e:	8b7b      	ldrh	r3, [r7, #26]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800458a:	edd7 7a07 	vldr	s15, [r7, #28]
 800458e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	d101      	bne.n	800459c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004598:	4b51      	ldr	r3, [pc, #324]	; (80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800459a:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 800459c:	ed97 7a02 	vldr	s14, [r7, #8]
 80045a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80045a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045a8:	eeb0 0a66 	vmov.f32	s0, s13
 80045ac:	f7fe fa76 	bl	8002a9c <_ZSt3absf>
 80045b0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80045b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80045b8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80046e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80045bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	db01      	blt.n	80045ca <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80045c6:	4b48      	ldr	r3, [pc, #288]	; (80046e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80045c8:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80045ca:	8b7c      	ldrh	r4, [r7, #26]
 80045cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fe fdc5 	bl	8003160 <_ZN9LineTrace15radius2VelocityEf>
 80045d6:	eef0 7a40 	vmov.f32	s15, s0
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045e0:	3304      	adds	r3, #4
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	441a      	add	r2, r3
 80045f2:	8b7b      	ldrh	r3, [r7, #26]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3304      	adds	r3, #4
 8004600:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004602:	8b7b      	ldrh	r3, [r7, #26]
 8004604:	3301      	adds	r3, #1
 8004606:	837b      	strh	r3, [r7, #26]
 8004608:	e7ae      	b.n	8004568 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004610:	3354      	adds	r3, #84	; 0x54
 8004612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d120      	bne.n	800465c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004626:	3310      	adds	r3, #16
 8004628:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004630:	3398      	adds	r3, #152	; 0x98
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fe fe47 	bl	80032d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004648:	3394      	adds	r3, #148	; 0x94
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	6939      	ldr	r1, [r7, #16]
 8004650:	eeb0 0a67 	vmov.f32	s0, s15
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fe fedf 	bl	8003418 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800465a:	e027      	b.n	80046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004662:	3354      	adds	r3, #84	; 0x54
 8004664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d11f      	bne.n	80046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004678:	3310      	adds	r3, #16
 800467a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004682:	33a0      	adds	r3, #160	; 0xa0
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	6939      	ldr	r1, [r7, #16]
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe fe1e 	bl	80032d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800469a:	339c      	adds	r3, #156	; 0x9c
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	6939      	ldr	r1, [r7, #16]
 80046a2:	eeb0 0a67 	vmov.f32	s0, s15
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe feb6 	bl	8003418 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046b2:	3310      	adds	r3, #16
 80046b4:	2200      	movs	r2, #0
 80046b6:	9200      	str	r2, [sp, #0]
 80046b8:	f241 7270 	movw	r2, #6000	; 0x1770
 80046bc:	490b      	ldr	r1, [pc, #44]	; (80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80046be:	4805      	ldr	r0, [pc, #20]	; (80046d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046c0:	f7fd f8cc 	bl	800185c <sd_write_array_float>

}
 80046c4:	bf00      	nop
 80046c6:	3724      	adds	r7, #36	; 0x24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd90      	pop	{r4, r7, pc}
 80046cc:	08019ec8 	.word	0x08019ec8
 80046d0:	08019ed4 	.word	0x08019ed4
 80046d4:	08019ee4 	.word	0x08019ee4
 80046d8:	08019f0c 	.word	0x08019f0c
 80046dc:	08019f1c 	.word	0x08019f1c
 80046e0:	3727c5ac 	.word	0x3727c5ac
 80046e4:	459c4000 	.word	0x459c4000
 80046e8:	459c4000 	.word	0x459c4000
 80046ec:	08019f38 	.word	0x08019f38

080046f0 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046fe:	33c0      	adds	r3, #192	; 0xc0
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800470a:	33c2      	adds	r3, #194	; 0xc2
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004716:	33c4      	adds	r3, #196	; 0xc4
 8004718:	2200      	movs	r2, #0
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004722:	33c6      	adds	r3, #198	; 0xc6
 8004724:	2200      	movs	r2, #0
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800472e:	33c8      	adds	r3, #200	; 0xc8
 8004730:	2200      	movs	r2, #0
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800473a:	33ca      	adds	r3, #202	; 0xca
 800473c:	2200      	movs	r2, #0
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800475c:	f7fd f9d0 	bl	8001b00 <sd_mount>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004770:	f7fc fc96 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004774:	2100      	movs	r1, #0
 8004776:	2000      	movs	r0, #0
 8004778:	f7fc fca2 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800477c:	4815      	ldr	r0, [pc, #84]	; (80047d4 <_ZN6Logger10sdCardInitEv+0x84>)
 800477e:	f7fc fcc9 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004782:	2101      	movs	r1, #1
 8004784:	2000      	movs	r0, #0
 8004786:	f7fc fc9b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800478a:	4813      	ldr	r0, [pc, #76]	; (80047d8 <_ZN6Logger10sdCardInitEv+0x88>)
 800478c:	f7fc fcc2 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004794:	f005 fba4 	bl	8009ee0 <HAL_Delay>

	  ret = true;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e015      	b.n	80047ca <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800479e:	f7fc fc7f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047a2:	2100      	movs	r1, #0
 80047a4:	2000      	movs	r0, #0
 80047a6:	f7fc fc8b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047aa:	480a      	ldr	r0, [pc, #40]	; (80047d4 <_ZN6Logger10sdCardInitEv+0x84>)
 80047ac:	f7fc fcb2 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047b0:	2101      	movs	r1, #1
 80047b2:	2000      	movs	r0, #0
 80047b4:	f7fc fc84 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047b8:	4808      	ldr	r0, [pc, #32]	; (80047dc <_ZN6Logger10sdCardInitEv+0x8c>)
 80047ba:	f7fc fcab 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047c2:	f005 fb8d 	bl	8009ee0 <HAL_Delay>

	  ret = false;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08019f48 	.word	0x08019f48
 80047d8:	08019f54 	.word	0x08019f54
 80047dc:	08019f5c 	.word	0x08019f5c

080047e0 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047f2:	33c0      	adds	r3, #192	; 0xc0
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d023      	beq.n	8004842 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004800:	33c2      	adds	r3, #194	; 0xc2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004814:	33c2      	adds	r3, #194	; 0xc2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004822:	33c2      	adds	r3, #194	; 0xc2
 8004824:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800482c:	33c2      	adds	r3, #194	; 0xc2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004834:	d305      	bcc.n	8004842 <_ZN6Logger8storeLogEf+0x62>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800483c:	33c2      	adds	r3, #194	; 0xc2
 800483e:	2200      	movs	r2, #0
 8004840:	801a      	strh	r2, [r3, #0]
	}
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004860:	33c0      	adds	r3, #192	; 0xc0
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d025      	beq.n	80048b4 <_ZN6Logger9storeLog2Ef+0x66>
		store_data_float2_[log_index_tim2_] = data;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800486e:	33c4      	adds	r3, #196	; 0xc4
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004886:	33c4      	adds	r3, #196	; 0xc4
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004894:	33c4      	adds	r3, #196	; 0xc4
 8004896:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800489e:	33c4      	adds	r3, #196	; 0xc4
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048a6:	d305      	bcc.n	80048b4 <_ZN6Logger9storeLog2Ef+0x66>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ae:	33c4      	adds	r3, #196	; 0xc4
 80048b0:	2200      	movs	r2, #0
 80048b2:	801a      	strh	r2, [r3, #0]
	}
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <_ZN6Logger11storeLogIntEs>:

void Logger::storeLogInt(int16_t data)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048d2:	33c0      	adds	r3, #192	; 0xc0
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d025      	beq.n	8004926 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048e0:	33c6      	adds	r3, #198	; 0xc6
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80048ec:	8879      	ldrh	r1, [r7, #2]
 80048ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048f8:	33c6      	adds	r3, #198	; 0xc6
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004906:	33c6      	adds	r3, #198	; 0xc6
 8004908:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004910:	33c6      	adds	r3, #198	; 0xc6
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004918:	d305      	bcc.n	8004926 <_ZN6Logger11storeLogIntEs+0x66>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004920:	33c6      	adds	r3, #198	; 0xc6
 8004922:	2200      	movs	r2, #0
 8004924:	801a      	strh	r2, [r3, #0]
	}

}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004944:	33c0      	adds	r3, #192	; 0xc0
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d025      	beq.n	8004998 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004952:	33c8      	adds	r3, #200	; 0xc8
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800495c:	3310      	adds	r3, #16
 800495e:	8879      	ldrh	r1, [r7, #2]
 8004960:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800496a:	33c8      	adds	r3, #200	; 0xc8
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004978:	33c8      	adds	r3, #200	; 0xc8
 800497a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004982:	33c8      	adds	r3, #200	; 0xc8
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800498a:	d305      	bcc.n	8004998 <_ZN6Logger12storeLog2IntEs+0x66>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004992:	33c8      	adds	r3, #200	; 0xc8
 8004994:	2200      	movs	r2, #0
 8004996:	801a      	strh	r2, [r3, #0]
	}

}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80049b0:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ba:	33ca      	adds	r3, #202	; 0xca
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80049c4:	3310      	adds	r3, #16
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049d4:	33ca      	adds	r3, #202	; 0xca
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80049de:	3320      	adds	r3, #32
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ee:	33ca      	adds	r3, #202	; 0xca
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049fc:	33ca      	adds	r3, #202	; 0xca
 80049fe:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a06:	33ca      	adds	r3, #202	; 0xca
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d905      	bls.n	8004a1e <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a18:	33ca      	adds	r3, #202	; 0xca
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a36:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a40:	33ca      	adds	r3, #202	; 0xca
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004a4a:	3350      	adds	r3, #80	; 0x50
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a5a:	33ca      	adds	r3, #202	; 0xca
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a64:	3340      	adds	r3, #64	; 0x40
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a74:	33ca      	adds	r3, #202	; 0xca
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a82:	33ca      	adds	r3, #202	; 0xca
 8004a84:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8c:	33ca      	adds	r3, #202	; 0xca
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d905      	bls.n	8004aa4 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a9e:	33ca      	adds	r3, #202	; 0xca
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	801a      	strh	r2, [r3, #0]
	//}
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004abe:	3340      	adds	r3, #64	; 0x40
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004ada:	3380      	adds	r3, #128	; 0x80
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	2300      	movs	r3, #0
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	68b8      	ldr	r0, [r7, #8]
 8004b04:	f7fc feaa 	bl	800185c <sd_write_array_float>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004b22:	2300      	movs	r3, #0
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f7fc ff86 	bl	8001a40 <sd_write_array_int>
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004b4e:	3320      	adds	r3, #32
 8004b50:	2200      	movs	r2, #0
 8004b52:	9200      	str	r2, [sp, #0]
 8004b54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	68b8      	ldr	r0, [r7, #8]
 8004b5c:	f7fc ff70 	bl	8001a40 <sd_write_array_int>
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b7c:	3340      	adds	r3, #64	; 0x40
 8004b7e:	2200      	movs	r2, #0
 8004b80:	9200      	str	r2, [sp, #0]
 8004b82:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	68b8      	ldr	r0, [r7, #8]
 8004b8a:	f7fc fe67 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b94:	3380      	adds	r3, #128	; 0x80
 8004b96:	2200      	movs	r2, #0
 8004b98:	9200      	str	r2, [sp, #0]
 8004b9a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	68b8      	ldr	r0, [r7, #8]
 8004ba2:	f7fc fe5b 	bl	800185c <sd_write_array_float>
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af02      	add	r7, sp, #8
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004bc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	9200      	str	r2, [sp, #0]
 8004bca:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	68b8      	ldr	r0, [r7, #8]
 8004bd2:	f7fc fe43 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004bdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004be0:	2200      	movs	r2, #0
 8004be2:	9200      	str	r2, [sp, #0]
 8004be4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004be8:	6839      	ldr	r1, [r7, #0]
 8004bea:	68b8      	ldr	r0, [r7, #8]
 8004bec:	f7fc fe36 	bl	800185c <sd_write_array_float>
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c0c:	3340      	adds	r3, #64	; 0x40
 8004c0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	68b8      	ldr	r0, [r7, #8]
 8004c16:	f7fc fe87 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c20:	3380      	adds	r3, #128	; 0x80
 8004c22:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f7fc fe7d 	bl	8001928 <sd_read_array_float>
}
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004c36:	b480      	push	{r7}
 8004c38:	b08b      	sub	sp, #44	; 0x2c
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c44:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c54:	3340      	adds	r3, #64	; 0x40
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d009      	beq.n	8004c74 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	617b      	str	r3, [r7, #20]
		log = 0;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	3304      	adds	r3, #4
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e7f1      	b.n	8004c58 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c8a:	3340      	adds	r3, #64	; 0x40
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	6a3a      	ldr	r2, [r7, #32]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d009      	beq.n	8004caa <_ZN6Logger10resetLogs2Ev+0x74>
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	623b      	str	r3, [r7, #32]
 8004ca8:	e7f1      	b.n	8004c8e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cb0:	33c2      	adds	r3, #194	; 0xc2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cbc:	33ca      	adds	r3, #202	; 0xca
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	801a      	strh	r2, [r3, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	372c      	adds	r7, #44	; 0x2c
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cdc:	33c2      	adds	r3, #194	; 0xc2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ce8:	33ca      	adds	r3, #202	; 0xca
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <_ZN6Logger5startEv>:

void Logger::start()
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d08:	33c0      	adds	r3, #192	; 0xc0
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d28:	33c0      	adds	r3, #192	; 0xc0
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	805a      	strh	r2, [r3, #2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <_ZN5Motor4initEv>:

void Motor::init()
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004d64:	2108      	movs	r1, #8
 8004d66:	4805      	ldr	r0, [pc, #20]	; (8004d7c <_ZN5Motor4initEv+0x20>)
 8004d68:	f00a fa6a 	bl	800f240 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004d6c:	210c      	movs	r1, #12
 8004d6e:	4803      	ldr	r0, [pc, #12]	; (8004d7c <_ZN5Motor4initEv+0x20>)
 8004d70:	f00a fa66 	bl	800f240 <HAL_TIM_PWM_Start>

}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	2004474c 	.word	0x2004474c

08004d80 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da0d      	bge.n	8004dae <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d98:	481f      	ldr	r0, [pc, #124]	; (8004e18 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d9a:	f006 fb37 	bl	800b40c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	425b      	negs	r3, r3
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	81fb      	strh	r3, [r7, #14]
 8004dac:	e00a      	b.n	8004dc4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004dae:	2201      	movs	r2, #1
 8004db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db4:	4818      	ldr	r0, [pc, #96]	; (8004e18 <_ZN5Motor9motorCtrlEv+0x98>)
 8004db6:	f006 fb29 	bl	800b40c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da0d      	bge.n	8004dea <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dd4:	4810      	ldr	r0, [pc, #64]	; (8004e18 <_ZN5Motor9motorCtrlEv+0x98>)
 8004dd6:	f006 fb19 	bl	800b40c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	425b      	negs	r3, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	81bb      	strh	r3, [r7, #12]
 8004de8:	e00a      	b.n	8004e00 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004dea:	2200      	movs	r2, #0
 8004dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004df0:	4809      	ldr	r0, [pc, #36]	; (8004e18 <_ZN5Motor9motorCtrlEv+0x98>)
 8004df2:	f006 fb0b 	bl	800b40c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004e00:	89fa      	ldrh	r2, [r7, #14]
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004e08:	89ba      	ldrh	r2, [r7, #12]
 8004e0a:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40020c00 	.word	0x40020c00
 8004e1c:	2004474c 	.word	0x2004474c

08004e20 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6178      	str	r0, [r7, #20]
 8004e28:	ed87 0b02 	vstr	d0, [r7, #8]
 8004e2c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e3a:	f7fb fe85 	bl	8000b48 <__aeabi_dcmpgt>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <_ZN5Motor8setRatioEdd+0x30>
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	4c2b      	ldr	r4, [pc, #172]	; (8004ef8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e4a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004e4e:	e00e      	b.n	8004e6e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	4b29      	ldr	r3, [pc, #164]	; (8004efc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e5a:	f7fb fe57 	bl	8000b0c <__aeabi_dcmplt>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <_ZN5Motor8setRatioEdd+0x4e>
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	4c24      	ldr	r4, [pc, #144]	; (8004efc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e78:	f7fb fe66 	bl	8000b48 <__aeabi_dcmpgt>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <_ZN5Motor8setRatioEdd+0x6e>
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	4c1c      	ldr	r4, [pc, #112]	; (8004ef8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e88:	e9c7 3400 	strd	r3, r4, [r7]
 8004e8c:	e00e      	b.n	8004eac <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e98:	f7fb fe38 	bl	8000b0c <__aeabi_dcmplt>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <_ZN5Motor8setRatioEdd+0x8c>
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	4c15      	ldr	r4, [pc, #84]	; (8004efc <_ZN5Motor8setRatioEdd+0xdc>)
 8004ea8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <_ZN5Motor8setRatioEdd+0xe0>)
 8004eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eb6:	f7fb fbb7 	bl	8000628 <__aeabi_dmul>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	f7fb fe61 	bl	8000b88 <__aeabi_d2iz>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	b21a      	sxth	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <_ZN5Motor8setRatioEdd+0xe0>)
 8004ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ed8:	f7fb fba6 	bl	8000628 <__aeabi_dmul>
 8004edc:	4603      	mov	r3, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	f7fb fe50 	bl	8000b88 <__aeabi_d2iz>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	b21a      	sxth	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	805a      	strh	r2, [r3, #2]

}
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd90      	pop	{r4, r7, pc}
 8004ef8:	3ff00000 	.word	0x3ff00000
 8004efc:	bff00000 	.word	0xbff00000
 8004f00:	409c2000 	.word	0x409c2000

08004f04 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004f38:	b490      	push	{r4, r7}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	f04f 0400 	mov.w	r4, #0
 8004f5e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	f04f 0400 	mov.w	r4, #0
 8004f6c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f04f 0400 	mov.w	r4, #0
 8004f88:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	609a      	str	r2, [r3, #8]
}
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc90      	pop	{r4, r7}
 8004fa8:	4770      	bx	lr
 8004faa:	0000      	movs	r0, r0
 8004fac:	0000      	movs	r0, r0
	...

08004fb0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fc ff76 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 8004fc4:	ee10 3a10 	vmov	r3, s0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fb fad5 	bl	8000578 <__aeabi_f2d>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fc fb64 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004fe0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004fe4:	a376      	add	r3, pc, #472	; (adr r3, 80051c0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fee:	f7fb fb1b 	bl	8000628 <__aeabi_dmul>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7fb fab8 	bl	8000578 <__aeabi_f2d>
 8005008:	4682      	mov	sl, r0
 800500a:	468b      	mov	fp, r1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005020:	f7fb fc2c 	bl	800087c <__aeabi_ddiv>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb f946 	bl	80002bc <__adddf3>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	ec43 2b17 	vmov	d7, r2, r3
 8005038:	eeb0 0a47 	vmov.f32	s0, s14
 800503c:	eef0 0a67 	vmov.f32	s1, s15
 8005040:	f00f fc42 	bl	80148c8 <cos>
 8005044:	ec53 2b10 	vmov	r2, r3, d0
 8005048:	4650      	mov	r0, sl
 800504a:	4659      	mov	r1, fp
 800504c:	f7fb faec 	bl	8000628 <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb f930 	bl	80002bc <__adddf3>
 800505c:	4603      	mov	r3, r0
 800505e:	460c      	mov	r4, r1
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7fb fa83 	bl	8000578 <__aeabi_f2d>
 8005072:	4682      	mov	sl, r0
 8005074:	468b      	mov	fp, r1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800508a:	f7fb fbf7 	bl	800087c <__aeabi_ddiv>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f911 	bl	80002bc <__adddf3>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	ec43 2b17 	vmov	d7, r2, r3
 80050a2:	eeb0 0a47 	vmov.f32	s0, s14
 80050a6:	eef0 0a67 	vmov.f32	s1, s15
 80050aa:	f00f fc51 	bl	8014950 <sin>
 80050ae:	ec53 2b10 	vmov	r2, r3, d0
 80050b2:	4650      	mov	r0, sl
 80050b4:	4659      	mov	r1, fp
 80050b6:	f7fb fab7 	bl	8000628 <__aeabi_dmul>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb f8fb 	bl	80002bc <__adddf3>
 80050c6:	4603      	mov	r3, r0
 80050c8:	460c      	mov	r4, r1
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	f7fb f8ec 	bl	80002bc <__adddf3>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	ed93 7b08 	vldr	d7, [r3, #32]
 80050fa:	eeb0 0a47 	vmov.f32	s0, s14
 80050fe:	eef0 0a67 	vmov.f32	s1, s15
 8005102:	f00f fbe1 	bl	80148c8 <cos>
 8005106:	ec51 0b10 	vmov	r0, r1, d0
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005110:	f7fb fa8a 	bl	8000628 <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4620      	mov	r0, r4
 800511a:	4629      	mov	r1, r5
 800511c:	f7fb f8ce 	bl	80002bc <__adddf3>
 8005120:	4603      	mov	r3, r0
 8005122:	460c      	mov	r4, r1
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	ed93 7b08 	vldr	d7, [r3, #32]
 8005136:	eeb0 0a47 	vmov.f32	s0, s14
 800513a:	eef0 0a67 	vmov.f32	s1, s15
 800513e:	f00f fc07 	bl	8014950 <sin>
 8005142:	ec51 0b10 	vmov	r0, r1, d0
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <_ZN8Odometry12calcPotitionEv+0x200>)
 800514c:	f7fb fa6c 	bl	8000628 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f8b0 	bl	80002bc <__adddf3>
 800515c:	4603      	mov	r3, r0
 800515e:	460c      	mov	r4, r1
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800516c:	4618      	mov	r0, r3
 800516e:	4621      	mov	r1, r4
 8005170:	f7fb fd52 	bl	8000c18 <__aeabi_d2f>
 8005174:	4602      	mov	r2, r0
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005178:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005180:	4618      	mov	r0, r3
 8005182:	4621      	mov	r1, r4
 8005184:	f7fb fd48 	bl	8000c18 <__aeabi_d2f>
 8005188:	4602      	mov	r2, r0
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <_ZN8Odometry12calcPotitionEv+0x208>)
 800518c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005194:	4618      	mov	r0, r3
 8005196:	4621      	mov	r1, r4
 8005198:	f7fb fd3e 	bl	8000c18 <__aeabi_d2f>
 800519c:	4602      	mov	r2, r0
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <_ZN8Odometry12calcPotitionEv+0x20c>)
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ac:	f3af 8000 	nop.w
 80051b0:	405b8000 	.word	0x405b8000
 80051b4:	200002c8 	.word	0x200002c8
 80051b8:	200002cc 	.word	0x200002cc
 80051bc:	200002d0 	.word	0x200002d0
 80051c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80051c4:	3f50624d 	.word	0x3f50624d

080051c8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	calcPotition();
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff feed 	bl	8004fb0 <_ZN8Odometry12calcPotitionEv>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80051de:	b490      	push	{r4, r7}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
	return theta_;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80051ec:	ec44 3b17 	vmov	d7, r3, r4
}
 80051f0:	eeb0 0a47 	vmov.f32	s0, s14
 80051f4:	eef0 0a67 	vmov.f32	s1, s15
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc90      	pop	{r4, r7}
 80051fe:	4770      	bx	lr

08005200 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005200:	b490      	push	{r4, r7}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	f04f 0400 	mov.w	r4, #0
 8005212:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bc90      	pop	{r4, r7}
 800523a:	4770      	bx	lr

0800523c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800523c:	b490      	push	{r4, r7}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	f04f 0400 	mov.w	r4, #0
 8005262:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800527a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800527e:	2200      	movs	r2, #0
 8005280:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005282:	4a29      	ldr	r2, [pc, #164]	; (8005328 <_ZN13PathFollowingC1Ev+0xec>)
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005290:	4a25      	ldr	r2, [pc, #148]	; (8005328 <_ZN13PathFollowingC1Ev+0xec>)
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	f04f 0400 	mov.w	r4, #0
 800529a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800529e:	4a22      	ldr	r2, [pc, #136]	; (8005328 <_ZN13PathFollowingC1Ev+0xec>)
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	f04f 0400 	mov.w	r4, #0
 80052a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <_ZN13PathFollowingC1Ev+0xf0>)
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80052ba:	4a1c      	ldr	r2, [pc, #112]	; (800532c <_ZN13PathFollowingC1Ev+0xf0>)
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <_ZN13PathFollowingC1Ev+0xf0>)
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	f04f 0400 	mov.w	r4, #0
 80052d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80052d6:	4a15      	ldr	r2, [pc, #84]	; (800532c <_ZN13PathFollowingC1Ev+0xf0>)
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <_ZN13PathFollowingC1Ev+0xf0>)
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	f04f 0400 	mov.w	r4, #0
 80052ee:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80052f2:	4a0e      	ldr	r2, [pc, #56]	; (800532c <_ZN13PathFollowingC1Ev+0xf0>)
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005300:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <_ZN13PathFollowingC1Ev+0xf4>)
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	f04f 0400 	mov.w	r4, #0
 800530a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800530e:	4a08      	ldr	r2, [pc, #32]	; (8005330 <_ZN13PathFollowingC1Ev+0xf4>)
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	f04f 0400 	mov.w	r4, #0
 8005318:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bc90      	pop	{r4, r7}
 8005326:	4770      	bx	lr
 8005328:	20044c50 	.word	0x20044c50
 800532c:	20044be0 	.word	0x20044be0
 8005330:	20044c40 	.word	0x20044c40

08005334 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800533c:	f001 fdee 	bl	8006f1c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005340:	f107 0318 	add.w	r3, r7, #24
 8005344:	2201      	movs	r2, #1
 8005346:	4915      	ldr	r1, [pc, #84]	; (800539c <_ZN13PathFollowing4initEv+0x68>)
 8005348:	4815      	ldr	r0, [pc, #84]	; (80053a0 <_ZN13PathFollowing4initEv+0x6c>)
 800534a:	f7fc fb33 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800534e:	f107 0310 	add.w	r3, r7, #16
 8005352:	2201      	movs	r2, #1
 8005354:	4913      	ldr	r1, [pc, #76]	; (80053a4 <_ZN13PathFollowing4initEv+0x70>)
 8005356:	4812      	ldr	r0, [pc, #72]	; (80053a0 <_ZN13PathFollowing4initEv+0x6c>)
 8005358:	f7fc fb2c 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800535c:	f107 0308 	add.w	r3, r7, #8
 8005360:	2201      	movs	r2, #1
 8005362:	4911      	ldr	r1, [pc, #68]	; (80053a8 <_ZN13PathFollowing4initEv+0x74>)
 8005364:	480e      	ldr	r0, [pc, #56]	; (80053a0 <_ZN13PathFollowing4initEv+0x6c>)
 8005366:	f7fc fb25 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800536a:	ed97 7b06 	vldr	d7, [r7, #24]
 800536e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005372:	ed97 5b02 	vldr	d5, [r7, #8]
 8005376:	eeb0 2a45 	vmov.f32	s4, s10
 800537a:	eef0 2a65 	vmov.f32	s5, s11
 800537e:	eeb0 1a46 	vmov.f32	s2, s12
 8005382:	eef0 1a66 	vmov.f32	s3, s13
 8005386:	eeb0 0a47 	vmov.f32	s0, s14
 800538a:	eef0 0a67 	vmov.f32	s1, s15
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f80c 	bl	80053ac <_ZN13PathFollowing7setGainEddd>
}
 8005394:	bf00      	nop
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	08019f64 	.word	0x08019f64
 80053a0:	08019f6c 	.word	0x08019f6c
 80053a4:	08019f74 	.word	0x08019f74
 80053a8:	08019f7c 	.word	0x08019f7c

080053ac <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80053ac:	b490      	push	{r4, r7}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	61f8      	str	r0, [r7, #28]
 80053b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80053b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80053bc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80053c0:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80053c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80053c6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80053ca:	4a07      	ldr	r2, [pc, #28]	; (80053e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80053cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80053d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80053d4:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80053d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80053da:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80053de:	bf00      	nop
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc90      	pop	{r4, r7}
 80053e6:	4770      	bx	lr
 80053e8:	20044c50 	.word	0x20044c50

080053ec <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80053f4:	2088      	movs	r0, #136	; 0x88
 80053f6:	f7fc fe9e 	bl	8002136 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80053fa:	2080      	movs	r0, #128	; 0x80
 80053fc:	f7fc fe9b 	bl	8002136 <INA260_init>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005408:	b590      	push	{r4, r7, lr}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005410:	2188      	movs	r1, #136	; 0x88
 8005412:	2002      	movs	r0, #2
 8005414:	f7fc fe2c 	bl	8002070 <INA260_read>
 8005418:	4603      	mov	r3, r0
 800541a:	4618      	mov	r0, r3
 800541c:	f7fb f89a 	bl	8000554 <__aeabi_i2d>
 8005420:	a30c      	add	r3, pc, #48	; (adr r3, 8005454 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f8ff 	bl	8000628 <__aeabi_dmul>
 800542a:	4603      	mov	r3, r0
 800542c:	460c      	mov	r4, r1
 800542e:	4618      	mov	r0, r3
 8005430:	4621      	mov	r1, r4
 8005432:	f7fb fbf1 	bl	8000c18 <__aeabi_d2f>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a03      	ldr	r2, [pc, #12]	; (8005450 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005442:	6013      	str	r3, [r2, #0]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}
 800544c:	f3af 8000 	nop.w
 8005450:	200002d4 	.word	0x200002d4
 8005454:	47ae147b 	.word	0x47ae147b
 8005458:	3f547ae1 	.word	0x3f547ae1

0800545c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	ee07 3a90 	vmov	s15, r3

}
 800546c:	eeb0 0a67 	vmov.f32	s0, s15
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005488:	2102      	movs	r1, #2
 800548a:	4822      	ldr	r0, [pc, #136]	; (8005514 <_ZN12RotarySwitch8getValueEv+0x98>)
 800548c:	f005 ffa6 	bl	800b3dc <HAL_GPIO_ReadPin>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80054a8:	2108      	movs	r1, #8
 80054aa:	481a      	ldr	r0, [pc, #104]	; (8005514 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054ac:	f005 ff96 	bl	800b3dc <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80054c8:	2110      	movs	r1, #16
 80054ca:	4812      	ldr	r0, [pc, #72]	; (8005514 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054cc:	f005 ff86 	bl	800b3dc <HAL_GPIO_ReadPin>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80054e0:	89fb      	ldrh	r3, [r7, #14]
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	480a      	ldr	r0, [pc, #40]	; (8005514 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054ec:	f005 ff76 	bl	800b3dc <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	f043 0308 	orr.w	r3, r3, #8
 8005506:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005508:	89fb      	ldrh	r3, [r7, #14]

}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40020c00 	.word	0x40020c00

08005518 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	709a      	strb	r2, [r3, #2]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	70da      	strb	r2, [r3, #3]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	809a      	strh	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	80da      	strh	r2, [r3, #6]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	721a      	strb	r2, [r3, #8]
{

}
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7a1b      	ldrb	r3, [r3, #8]
 8005560:	f083 0301 	eor.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80db 	beq.w	8005722 <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 800556c:	4b6f      	ldr	r3, [pc, #444]	; (800572c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d02a      	beq.n	80055d0 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800557a:	2104      	movs	r1, #4
 800557c:	486c      	ldr	r0, [pc, #432]	; (8005730 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 800557e:	f005 ff2d 	bl	800b3dc <HAL_GPIO_ReadPin>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8005592:	4b68      	ldr	r3, [pc, #416]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	4b66      	ldr	r3, [pc, #408]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	e002      	b.n	80055a6 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80055a0:	4b64      	ldr	r3, [pc, #400]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80055a6:	4b63      	ldr	r3, [pc, #396]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d945      	bls.n	800563a <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 80055c2:	4b5a      	ldr	r3, [pc, #360]	; (800572c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80055c8:	4b5a      	ldr	r3, [pc, #360]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	801a      	strh	r2, [r3, #0]
 80055ce:	e034      	b.n	800563a <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 80055d0:	4b56      	ldr	r3, [pc, #344]	; (800572c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d030      	beq.n	800563a <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80055d8:	2104      	movs	r1, #4
 80055da:	4855      	ldr	r0, [pc, #340]	; (8005730 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 80055dc:	f005 fefe 	bl	800b3dc <HAL_GPIO_ReadPin>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 80055f0:	4b50      	ldr	r3, [pc, #320]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e002      	b.n	8005604 <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 80055fe:	4b4d      	ldr	r3, [pc, #308]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005600:	2200      	movs	r2, #0
 8005602:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005604:	4b4b      	ldr	r3, [pc, #300]	; (8005734 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d916      	bls.n	800563a <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	f083 0301 	eor.w	r3, r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005620:	4b42      	ldr	r3, [pc, #264]	; (800572c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	88db      	ldrh	r3, [r3, #6]
 800562a:	3301      	adds	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	88da      	ldrh	r2, [r3, #6]
 8005636:	4b40      	ldr	r3, [pc, #256]	; (8005738 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8005638:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800563a:	4b40      	ldr	r3, [pc, #256]	; (800573c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f083 0301 	eor.w	r3, r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02a      	beq.n	800569e <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800564c:	483c      	ldr	r0, [pc, #240]	; (8005740 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 800564e:	f005 fec5 	bl	800b3dc <HAL_GPIO_ReadPin>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d006      	beq.n	8005670 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 8005662:	4b38      	ldr	r3, [pc, #224]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e002      	b.n	8005676 <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 8005670:	4b34      	ldr	r3, [pc, #208]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005672:	2200      	movs	r2, #0
 8005674:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005676:	4b33      	ldr	r3, [pc, #204]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	2b04      	cmp	r3, #4
 800567c:	d90f      	bls.n	800569e <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	f043 0302 	orr.w	r3, r3, #2
 8005686:	b29a      	uxth	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005698:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800569a:	2200      	movs	r2, #0
 800569c:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800569e:	4b27      	ldr	r3, [pc, #156]	; (800573c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d031      	beq.n	800570a <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80056a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056aa:	4825      	ldr	r0, [pc, #148]	; (8005740 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 80056ac:	f005 fe96 	bl	800b3dc <HAL_GPIO_ReadPin>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf14      	ite	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	2300      	moveq	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d006      	beq.n	80056ce <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e002      	b.n	80056d4 <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d916      	bls.n	800570a <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	f083 0302 	eor.w	r3, r3, #2
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80056f0:	4b12      	ldr	r3, [pc, #72]	; (800573c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	889b      	ldrh	r3, [r3, #4]
 80056fa:	3301      	adds	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	889a      	ldrh	r2, [r3, #4]
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005708:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005710:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	789a      	ldrb	r2, [r3, #2]
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005718:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	78da      	ldrb	r2, [r3, #3]
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005720:	701a      	strb	r2, [r3, #0]
	}

}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	200002e0 	.word	0x200002e0
 8005730:	40021000 	.word	0x40021000
 8005734:	200002e4 	.word	0x200002e4
 8005738:	200002de 	.word	0x200002de
 800573c:	200002e1 	.word	0x200002e1
 8005740:	40020c00 	.word	0x40020c00
 8005744:	200002e2 	.word	0x200002e2
 8005748:	200002dc 	.word	0x200002dc
 800574c:	200002d8 	.word	0x200002d8
 8005750:	200002da 	.word	0x200002da
 8005754:	200002db 	.word	0x200002db

08005758 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	789b      	ldrb	r3, [r3, #2]
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	88db      	ldrh	r3, [r3, #6]
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	80da      	strh	r2, [r3, #6]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	721a      	strb	r2, [r3, #8]
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	721a      	strb	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	7a1b      	ldrb	r3, [r3, #8]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3308      	adds	r3, #8
 8005804:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f010 f8dc 	bl	80159c8 <memset>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005816:	811a      	strh	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581e:	815a      	strh	r2, [r3, #10]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005826:	819a      	strh	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582e:	81da      	strh	r2, [r3, #14]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005836:	821a      	strh	r2, [r3, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583e:	825a      	strh	r2, [r3, #18]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	829a      	strh	r2, [r3, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	82da      	strh	r2, [r3, #22]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	831a      	strh	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	835a      	strh	r2, [r3, #26]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	839a      	strh	r2, [r3, #28]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	83da      	strh	r2, [r3, #30]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	841a      	strh	r2, [r3, #32]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005870:	845a      	strh	r2, [r3, #34]	; 0x22
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	849a      	strh	r2, [r3, #36]	; 0x24
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	851a      	strh	r2, [r3, #40]	; 0x28
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	865a      	strh	r2, [r3, #50]	; 0x32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	869a      	strh	r2, [r3, #52]	; 0x34
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058be:	871a      	strh	r2, [r3, #56]	; 0x38
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	875a      	strh	r2, [r3, #58]	; 0x3a
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	879a      	strh	r2, [r3, #60]	; 0x3c
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005916:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005942:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005956:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800599a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a04:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a16:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a20:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a32:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a3c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a46:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a68:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a72:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a7c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a86:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a98:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aca:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b24:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b3e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b50:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	ed97 0a00 	vldr	s0, [r7]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fe1c 	bl	80047e0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fe fe49 	bl	800484e <_ZN6Logger9storeLog2Ef>
	}

}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d042      	beq.n	8005c5c <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005be2:	461a      	mov	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3204      	adds	r2, #4
 8005be8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005c04:	3301      	adds	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c14:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005c16:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005c1e:	2bf9      	cmp	r3, #249	; 0xf9
 8005c20:	d903      	bls.n	8005c2a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	22fa      	movs	r2, #250	; 0xfa
 8005c26:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685c      	ldr	r4, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fa fc9f 	bl	8000578 <__aeabi_f2d>
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fa fc97 	bl	8000578 <__aeabi_f2d>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	ec43 2b11 	vmov	d1, r2, r3
 8005c52:	ec46 5b10 	vmov	d0, r5, r6
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7ff f8e2 	bl	8004e20 <_ZN5Motor8setRatioEdd>

	}

}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c64:	200002e8 	.word	0x200002e8

08005c68 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	615a      	str	r2, [r3, #20]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	619a      	str	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	621a      	str	r2, [r3, #32]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f107 020c 	add.w	r2, r7, #12
 8005d10:	f107 0110 	add.w	r1, r7, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fb fcb3 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005d1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d26:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d2e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f7fa fc20 	bl	8000578 <__aeabi_f2d>
 8005d38:	a30e      	add	r3, pc, #56	; (adr r3, 8005d74 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f7fa fc73 	bl	8000628 <__aeabi_dmul>
 8005d42:	4603      	mov	r3, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	4618      	mov	r0, r3
 8005d48:	4621      	mov	r1, r4
 8005d4a:	f7fa ff65 	bl	8000c18 <__aeabi_d2f>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005d5a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	ee07 3a90 	vmov	s15, r3
}
 8005d64:	eeb0 0a67 	vmov.f32	s0, s15
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	200002ec 	.word	0x200002ec
 8005d74:	1ab1d998 	.word	0x1ab1d998
 8005d78:	3f7830b5 	.word	0x3f7830b5
 8005d7c:	00000000 	.word	0x00000000

08005d80 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	ed93 7a00 	vldr	s14, [r3]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d98:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005da6:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8005dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fa fbd3 	bl	8000578 <__aeabi_f2d>
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	ed93 7a06 	vldr	s14, [r3, #24]
 8005ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	ee17 0a90 	vmov	r0, s15
 8005de8:	f7fa fbc6 	bl	8000578 <__aeabi_f2d>
 8005dec:	a334      	add	r3, pc, #208	; (adr r3, 8005ec0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa fc19 	bl	8000628 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7fa fa5d 	bl	80002bc <__adddf3>
 8005e02:	4603      	mov	r3, r0
 8005e04:	460c      	mov	r4, r1
 8005e06:	4618      	mov	r0, r3
 8005e08:	4621      	mov	r1, r4
 8005e0a:	f7fa ff05 	bl	8000c18 <__aeabi_d2f>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e12:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	ed93 7a05 	vldr	s14, [r3, #20]
 8005e1a:	4b2c      	ldr	r3, [pc, #176]	; (8005ecc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005e1c:	edd3 7a00 	vldr	s15, [r3]
 8005e20:	edd7 6a05 	vldr	s13, [r7, #20]
 8005e24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2c:	ee17 0a90 	vmov	r0, s15
 8005e30:	f7fa fba2 	bl	8000578 <__aeabi_f2d>
 8005e34:	a322      	add	r3, pc, #136	; (adr r3, 8005ec0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fd1f 	bl	800087c <__aeabi_ddiv>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	4618      	mov	r0, r3
 8005e44:	4621      	mov	r1, r4
 8005e46:	f7fa fee7 	bl	8000c18 <__aeabi_d2f>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005e4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e52:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e5c:	edd3 7a00 	vldr	s15, [r3]
 8005e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e64:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e7a:	ee17 0a90 	vmov	r0, s15
 8005e7e:	f7fa fb7b 	bl	8000578 <__aeabi_f2d>
 8005e82:	4605      	mov	r5, r0
 8005e84:	460e      	mov	r6, r1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e94:	ee17 0a90 	vmov	r0, s15
 8005e98:	f7fa fb6e 	bl	8000578 <__aeabi_f2d>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	ec43 2b11 	vmov	d1, r2, r3
 8005ea4:	ec46 5b10 	vmov	d0, r5, r6
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f7fe ffb9 	bl	8004e20 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005eae:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6013      	str	r3, [r2, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ec4:	3f50624d 	.word	0x3f50624d
 8005ec8:	200002f4 	.word	0x200002f4
 8005ecc:	200002f0 	.word	0x200002f0

08005ed0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005edc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f04:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f30:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	615a      	str	r2, [r3, #20]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f5e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f62:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff feb7 	bl	8005d00 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff feef 	bl	8005d80 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006000 <_ZN12VelocityCtrl4stopEv+0x30>
 8005fe8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006000 <_ZN12VelocityCtrl4stopEv+0x30>
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe ff17 	bl	8004e20 <_ZN5Motor8setRatioEdd>

}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w
	...

08006008 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	ee07 3a90 	vmov	s15, r3
}
 8006018:	eeb0 0a67 	vmov.f32	s0, s15
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 800603a:	f001 fe2b 	bl	8007c94 <cppFlip100ns>

		tim7_timer++;
 800603e:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006046:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d902      	bls.n	8006058 <HAL_TIM_PeriodElapsedCallback+0x30>
 8006052:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8006062:	f001 fdcd 	bl	8007c00 <cppFlip1ms>

		tim6_timer++;
 8006066:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800606e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8006070:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d902      	bls.n	8006080 <HAL_TIM_PeriodElapsedCallback+0x58>
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800608a:	f001 fe0d 	bl	8007ca8 <cppFlip10ms>

		tim13_timer++;
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3301      	adds	r3, #1
 8006094:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006096:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a06      	ldr	r2, [pc, #24]	; (80060b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d902      	bls.n	80060a8 <HAL_TIM_PeriodElapsedCallback+0x80>
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]
	}

}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40001400 	.word	0x40001400
 80060b4:	20044900 	.word	0x20044900
 80060b8:	0001869f 	.word	0x0001869f
 80060bc:	40001000 	.word	0x40001000
 80060c0:	200448bc 	.word	0x200448bc
 80060c4:	40001c00 	.word	0x40001c00
 80060c8:	20044904 	.word	0x20044904

080060cc <init>:

void init()
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80060d0:	2201      	movs	r2, #1
 80060d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060d6:	4808      	ldr	r0, [pc, #32]	; (80060f8 <init+0x2c>)
 80060d8:	f005 f998 	bl	800b40c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80060dc:	4807      	ldr	r0, [pc, #28]	; (80060fc <init+0x30>)
 80060de:	f009 f860 	bl	800f1a2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80060e2:	4807      	ldr	r0, [pc, #28]	; (8006100 <init+0x34>)
 80060e4:	f009 f85d 	bl	800f1a2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80060e8:	4806      	ldr	r0, [pc, #24]	; (8006104 <init+0x38>)
 80060ea:	f009 f85a 	bl	800f1a2 <HAL_TIM_Base_Start_IT>

	cppInit();
 80060ee:	f001 fce3 	bl	8007ab8 <cppInit>

	//path_following_initialize();

}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40021000 	.word	0x40021000
 80060fc:	200449e8 	.word	0x200449e8
 8006100:	20044b8c 	.word	0x20044b8c
 8006104:	20044908 	.word	0x20044908

08006108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800610c:	f003 fe76 	bl	8009dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006110:	f000 f82a 	bl	8006168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006114:	f000 fdbc 	bl	8006c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8006118:	f000 fd8a 	bl	8006c30 <MX_DMA_Init>
  MX_I2C2_Init();
 800611c:	f000 f9e8 	bl	80064f0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006120:	f000 fa14 	bl	800654c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8006124:	f000 fa32 	bl	800658c <MX_SPI2_Init>
  MX_TIM1_Init();
 8006128:	f000 fa66 	bl	80065f8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800612c:	f000 fb70 	bl	8006810 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006130:	f000 fc3c 	bl	80069ac <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8006134:	f000 fd52 	bl	8006bdc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006138:	f00b f806 	bl	8011148 <MX_FATFS_Init>
  MX_TIM6_Init();
 800613c:	f000 fbcc 	bl	80068d8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006140:	f000 f9a8 	bl	8006494 <MX_I2C1_Init>
  MX_TIM3_Init();
 8006144:	f000 fb00 	bl	8006748 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006148:	f000 fc88 	bl	8006a5c <MX_TIM10_Init>
  MX_TIM11_Init();
 800614c:	f000 fcd4 	bl	8006af8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006150:	f000 f898 	bl	8006284 <MX_ADC2_Init>
  MX_TIM7_Init();
 8006154:	f000 fbf6 	bl	8006944 <MX_TIM7_Init>
  MX_TIM13_Init();
 8006158:	f000 fd1c 	bl	8006b94 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800615c:	f7ff ffb6 	bl	80060cc <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006160:	f001 fdce 	bl	8007d00 <cppLoop>
 8006164:	e7fc      	b.n	8006160 <main+0x58>
	...

08006168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b0a4      	sub	sp, #144	; 0x90
 800616c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800616e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006172:	2234      	movs	r2, #52	; 0x34
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f00f fc26 	bl	80159c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800617c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800618c:	f107 030c 	add.w	r3, r7, #12
 8006190:	223c      	movs	r2, #60	; 0x3c
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f00f fc17 	bl	80159c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800619a:	2300      	movs	r3, #0
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	4b37      	ldr	r3, [pc, #220]	; (800627c <SystemClock_Config+0x114>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	4a36      	ldr	r2, [pc, #216]	; (800627c <SystemClock_Config+0x114>)
 80061a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a8:	6413      	str	r3, [r2, #64]	; 0x40
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <SystemClock_Config+0x114>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b2:	60bb      	str	r3, [r7, #8]
 80061b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	4b31      	ldr	r3, [pc, #196]	; (8006280 <SystemClock_Config+0x118>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a30      	ldr	r2, [pc, #192]	; (8006280 <SystemClock_Config+0x118>)
 80061c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b2e      	ldr	r3, [pc, #184]	; (8006280 <SystemClock_Config+0x118>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061ce:	607b      	str	r3, [r7, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061d2:	2301      	movs	r3, #1
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061dc:	2302      	movs	r3, #2
 80061de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061e4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80061e6:	2308      	movs	r3, #8
 80061e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80061ea:	23b4      	movs	r3, #180	; 0xb4
 80061ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80061f0:	2302      	movs	r3, #2
 80061f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80061f6:	2308      	movs	r3, #8
 80061f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80061fc:	2302      	movs	r3, #2
 80061fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006202:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006206:	4618      	mov	r0, r3
 8006208:	f006 fd22 	bl	800cc50 <HAL_RCC_OscConfig>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006212:	f000 fe7f 	bl	8006f14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006216:	f006 f89d 	bl	800c354 <HAL_PWREx_EnableOverDrive>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006220:	f000 fe78 	bl	8006f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006224:	230f      	movs	r3, #15
 8006226:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006228:	2302      	movs	r3, #2
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800622c:	2300      	movs	r3, #0
 800622e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006230:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006234:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800623a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800623c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006240:	2105      	movs	r1, #5
 8006242:	4618      	mov	r0, r3
 8006244:	f006 f8d6 	bl	800c3f4 <HAL_RCC_ClockConfig>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800624e:	f000 fe61 	bl	8006f14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006252:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006256:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006258:	2300      	movs	r3, #0
 800625a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800625c:	2300      	movs	r3, #0
 800625e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	4618      	mov	r0, r3
 8006266:	f006 fab5 	bl	800c7d4 <HAL_RCCEx_PeriphCLKConfig>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006270:	f000 fe50 	bl	8006f14 <Error_Handler>
  }
}
 8006274:	bf00      	nop
 8006276:	3790      	adds	r7, #144	; 0x90
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	40007000 	.word	0x40007000

08006284 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800628a:	463b      	mov	r3, r7
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006296:	4b7c      	ldr	r3, [pc, #496]	; (8006488 <MX_ADC2_Init+0x204>)
 8006298:	4a7c      	ldr	r2, [pc, #496]	; (800648c <MX_ADC2_Init+0x208>)
 800629a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800629c:	4b7a      	ldr	r3, [pc, #488]	; (8006488 <MX_ADC2_Init+0x204>)
 800629e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80062a4:	4b78      	ldr	r3, [pc, #480]	; (8006488 <MX_ADC2_Init+0x204>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80062aa:	4b77      	ldr	r3, [pc, #476]	; (8006488 <MX_ADC2_Init+0x204>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80062b0:	4b75      	ldr	r3, [pc, #468]	; (8006488 <MX_ADC2_Init+0x204>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80062b6:	4b74      	ldr	r3, [pc, #464]	; (8006488 <MX_ADC2_Init+0x204>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80062be:	4b72      	ldr	r3, [pc, #456]	; (8006488 <MX_ADC2_Init+0x204>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80062c4:	4b70      	ldr	r3, [pc, #448]	; (8006488 <MX_ADC2_Init+0x204>)
 80062c6:	4a72      	ldr	r2, [pc, #456]	; (8006490 <MX_ADC2_Init+0x20c>)
 80062c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80062ca:	4b6f      	ldr	r3, [pc, #444]	; (8006488 <MX_ADC2_Init+0x204>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80062d0:	4b6d      	ldr	r3, [pc, #436]	; (8006488 <MX_ADC2_Init+0x204>)
 80062d2:	220e      	movs	r2, #14
 80062d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80062d6:	4b6c      	ldr	r3, [pc, #432]	; (8006488 <MX_ADC2_Init+0x204>)
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80062de:	4b6a      	ldr	r3, [pc, #424]	; (8006488 <MX_ADC2_Init+0x204>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80062e4:	4868      	ldr	r0, [pc, #416]	; (8006488 <MX_ADC2_Init+0x204>)
 80062e6:	f003 fe1d 	bl	8009f24 <HAL_ADC_Init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80062f0:	f000 fe10 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80062f4:	230a      	movs	r3, #10
 80062f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80062f8:	2301      	movs	r3, #1
 80062fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80062fc:	2306      	movs	r3, #6
 80062fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006300:	463b      	mov	r3, r7
 8006302:	4619      	mov	r1, r3
 8006304:	4860      	ldr	r0, [pc, #384]	; (8006488 <MX_ADC2_Init+0x204>)
 8006306:	f003 ff61 	bl	800a1cc <HAL_ADC_ConfigChannel>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006310:	f000 fe00 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006314:	230b      	movs	r3, #11
 8006316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006318:	2302      	movs	r3, #2
 800631a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800631c:	463b      	mov	r3, r7
 800631e:	4619      	mov	r1, r3
 8006320:	4859      	ldr	r0, [pc, #356]	; (8006488 <MX_ADC2_Init+0x204>)
 8006322:	f003 ff53 	bl	800a1cc <HAL_ADC_ConfigChannel>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800632c:	f000 fdf2 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006330:	230c      	movs	r3, #12
 8006332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006334:	2303      	movs	r3, #3
 8006336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006338:	463b      	mov	r3, r7
 800633a:	4619      	mov	r1, r3
 800633c:	4852      	ldr	r0, [pc, #328]	; (8006488 <MX_ADC2_Init+0x204>)
 800633e:	f003 ff45 	bl	800a1cc <HAL_ADC_ConfigChannel>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006348:	f000 fde4 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800634c:	230d      	movs	r3, #13
 800634e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006350:	2304      	movs	r3, #4
 8006352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006354:	463b      	mov	r3, r7
 8006356:	4619      	mov	r1, r3
 8006358:	484b      	ldr	r0, [pc, #300]	; (8006488 <MX_ADC2_Init+0x204>)
 800635a:	f003 ff37 	bl	800a1cc <HAL_ADC_ConfigChannel>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006364:	f000 fdd6 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006368:	2300      	movs	r3, #0
 800636a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800636c:	2305      	movs	r3, #5
 800636e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006370:	463b      	mov	r3, r7
 8006372:	4619      	mov	r1, r3
 8006374:	4844      	ldr	r0, [pc, #272]	; (8006488 <MX_ADC2_Init+0x204>)
 8006376:	f003 ff29 	bl	800a1cc <HAL_ADC_ConfigChannel>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006380:	f000 fdc8 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006384:	2301      	movs	r3, #1
 8006386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006388:	2306      	movs	r3, #6
 800638a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800638c:	463b      	mov	r3, r7
 800638e:	4619      	mov	r1, r3
 8006390:	483d      	ldr	r0, [pc, #244]	; (8006488 <MX_ADC2_Init+0x204>)
 8006392:	f003 ff1b 	bl	800a1cc <HAL_ADC_ConfigChannel>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800639c:	f000 fdba 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80063a0:	2302      	movs	r3, #2
 80063a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80063a4:	2307      	movs	r3, #7
 80063a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063a8:	463b      	mov	r3, r7
 80063aa:	4619      	mov	r1, r3
 80063ac:	4836      	ldr	r0, [pc, #216]	; (8006488 <MX_ADC2_Init+0x204>)
 80063ae:	f003 ff0d 	bl	800a1cc <HAL_ADC_ConfigChannel>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80063b8:	f000 fdac 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80063bc:	2303      	movs	r3, #3
 80063be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80063c0:	2308      	movs	r3, #8
 80063c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063c4:	463b      	mov	r3, r7
 80063c6:	4619      	mov	r1, r3
 80063c8:	482f      	ldr	r0, [pc, #188]	; (8006488 <MX_ADC2_Init+0x204>)
 80063ca:	f003 feff 	bl	800a1cc <HAL_ADC_ConfigChannel>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80063d4:	f000 fd9e 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80063d8:	2304      	movs	r3, #4
 80063da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80063dc:	2309      	movs	r3, #9
 80063de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063e0:	463b      	mov	r3, r7
 80063e2:	4619      	mov	r1, r3
 80063e4:	4828      	ldr	r0, [pc, #160]	; (8006488 <MX_ADC2_Init+0x204>)
 80063e6:	f003 fef1 	bl	800a1cc <HAL_ADC_ConfigChannel>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80063f0:	f000 fd90 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80063f4:	2305      	movs	r3, #5
 80063f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80063f8:	230a      	movs	r3, #10
 80063fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063fc:	463b      	mov	r3, r7
 80063fe:	4619      	mov	r1, r3
 8006400:	4821      	ldr	r0, [pc, #132]	; (8006488 <MX_ADC2_Init+0x204>)
 8006402:	f003 fee3 	bl	800a1cc <HAL_ADC_ConfigChannel>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800640c:	f000 fd82 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006410:	2306      	movs	r3, #6
 8006412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006414:	230b      	movs	r3, #11
 8006416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006418:	463b      	mov	r3, r7
 800641a:	4619      	mov	r1, r3
 800641c:	481a      	ldr	r0, [pc, #104]	; (8006488 <MX_ADC2_Init+0x204>)
 800641e:	f003 fed5 	bl	800a1cc <HAL_ADC_ConfigChannel>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006428:	f000 fd74 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800642c:	2307      	movs	r3, #7
 800642e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006430:	230c      	movs	r3, #12
 8006432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006434:	463b      	mov	r3, r7
 8006436:	4619      	mov	r1, r3
 8006438:	4813      	ldr	r0, [pc, #76]	; (8006488 <MX_ADC2_Init+0x204>)
 800643a:	f003 fec7 	bl	800a1cc <HAL_ADC_ConfigChannel>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8006444:	f000 fd66 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006448:	2308      	movs	r3, #8
 800644a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800644c:	230d      	movs	r3, #13
 800644e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006450:	463b      	mov	r3, r7
 8006452:	4619      	mov	r1, r3
 8006454:	480c      	ldr	r0, [pc, #48]	; (8006488 <MX_ADC2_Init+0x204>)
 8006456:	f003 feb9 	bl	800a1cc <HAL_ADC_ConfigChannel>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006460:	f000 fd58 	bl	8006f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006464:	2309      	movs	r3, #9
 8006466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006468:	230e      	movs	r3, #14
 800646a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800646c:	463b      	mov	r3, r7
 800646e:	4619      	mov	r1, r3
 8006470:	4805      	ldr	r0, [pc, #20]	; (8006488 <MX_ADC2_Init+0x204>)
 8006472:	f003 feab 	bl	800a1cc <HAL_ADC_ConfigChannel>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800647c:	f000 fd4a 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	2004478c 	.word	0x2004478c
 800648c:	40012100 	.word	0x40012100
 8006490:	0f000001 	.word	0x0f000001

08006494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <MX_I2C1_Init+0x50>)
 800649a:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <MX_I2C1_Init+0x54>)
 800649c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064a0:	4a12      	ldr	r2, [pc, #72]	; (80064ec <MX_I2C1_Init+0x58>)
 80064a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80064aa:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064c4:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80064d0:	4804      	ldr	r0, [pc, #16]	; (80064e4 <MX_I2C1_Init+0x50>)
 80064d2:	f004 ffb5 	bl	800b440 <HAL_I2C_Init>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80064dc:	f000 fd1a 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80064e0:	bf00      	nop
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	200447d4 	.word	0x200447d4
 80064e8:	40005400 	.word	0x40005400
 80064ec:	000186a0 	.word	0x000186a0

080064f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80064f4:	4b12      	ldr	r3, [pc, #72]	; (8006540 <MX_I2C2_Init+0x50>)
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <MX_I2C2_Init+0x54>)
 80064f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80064fa:	4b11      	ldr	r3, [pc, #68]	; (8006540 <MX_I2C2_Init+0x50>)
 80064fc:	4a12      	ldr	r2, [pc, #72]	; (8006548 <MX_I2C2_Init+0x58>)
 80064fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <MX_I2C2_Init+0x50>)
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006506:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <MX_I2C2_Init+0x50>)
 8006508:	2200      	movs	r2, #0
 800650a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <MX_I2C2_Init+0x50>)
 800650e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006512:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <MX_I2C2_Init+0x50>)
 8006516:	2200      	movs	r2, #0
 8006518:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <MX_I2C2_Init+0x50>)
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <MX_I2C2_Init+0x50>)
 8006522:	2200      	movs	r2, #0
 8006524:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <MX_I2C2_Init+0x50>)
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800652c:	4804      	ldr	r0, [pc, #16]	; (8006540 <MX_I2C2_Init+0x50>)
 800652e:	f004 ff87 	bl	800b440 <HAL_I2C_Init>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006538:	f000 fcec 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20044868 	.word	0x20044868
 8006544:	40005800 	.word	0x40005800
 8006548:	000186a0 	.word	0x000186a0

0800654c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 8006552:	4a0d      	ldr	r2, [pc, #52]	; (8006588 <MX_SDIO_SD_Init+0x3c>)
 8006554:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 8006558:	2200      	movs	r2, #0
 800655a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800655c:	4b09      	ldr	r3, [pc, #36]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 8006564:	2200      	movs	r2, #0
 8006566:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 800656a:	2200      	movs	r2, #0
 800656c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 8006570:	2200      	movs	r2, #0
 8006572:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <MX_SDIO_SD_Init+0x38>)
 8006576:	2202      	movs	r2, #2
 8006578:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	20044a68 	.word	0x20044a68
 8006588:	40012c00 	.word	0x40012c00

0800658c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006590:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <MX_SPI2_Init+0x64>)
 8006592:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <MX_SPI2_Init+0x68>)
 8006594:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006596:	4b16      	ldr	r3, [pc, #88]	; (80065f0 <MX_SPI2_Init+0x64>)
 8006598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800659c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065a4:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80065aa:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065ac:	2202      	movs	r2, #2
 80065ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80065b0:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80065b6:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065c0:	2228      	movs	r2, #40	; 0x28
 80065c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80065d6:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065d8:	220a      	movs	r2, #10
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80065dc:	4804      	ldr	r0, [pc, #16]	; (80065f0 <MX_SPI2_Init+0x64>)
 80065de:	f008 f861 	bl	800e6a4 <HAL_SPI_Init>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80065e8:	f000 fc94 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80065ec:	bf00      	nop
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	200446b4 	.word	0x200446b4
 80065f4:	40003800 	.word	0x40003800

080065f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b09a      	sub	sp, #104	; 0x68
 80065fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80065fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006602:	2224      	movs	r2, #36	; 0x24
 8006604:	2100      	movs	r1, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f00f f9de 	bl	80159c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800660c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006616:	f107 0320 	add.w	r3, r7, #32
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	609a      	str	r2, [r3, #8]
 8006622:	60da      	str	r2, [r3, #12]
 8006624:	611a      	str	r2, [r3, #16]
 8006626:	615a      	str	r2, [r3, #20]
 8006628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800662a:	463b      	mov	r3, r7
 800662c:	2220      	movs	r2, #32
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f00f f9c9 	bl	80159c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006636:	4b42      	ldr	r3, [pc, #264]	; (8006740 <MX_TIM1_Init+0x148>)
 8006638:	4a42      	ldr	r2, [pc, #264]	; (8006744 <MX_TIM1_Init+0x14c>)
 800663a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800663c:	4b40      	ldr	r3, [pc, #256]	; (8006740 <MX_TIM1_Init+0x148>)
 800663e:	2200      	movs	r2, #0
 8006640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006642:	4b3f      	ldr	r3, [pc, #252]	; (8006740 <MX_TIM1_Init+0x148>)
 8006644:	2200      	movs	r2, #0
 8006646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006648:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <MX_TIM1_Init+0x148>)
 800664a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800664e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006650:	4b3b      	ldr	r3, [pc, #236]	; (8006740 <MX_TIM1_Init+0x148>)
 8006652:	2200      	movs	r2, #0
 8006654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006656:	4b3a      	ldr	r3, [pc, #232]	; (8006740 <MX_TIM1_Init+0x148>)
 8006658:	2200      	movs	r2, #0
 800665a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800665c:	4b38      	ldr	r3, [pc, #224]	; (8006740 <MX_TIM1_Init+0x148>)
 800665e:	2200      	movs	r2, #0
 8006660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006662:	4837      	ldr	r0, [pc, #220]	; (8006740 <MX_TIM1_Init+0x148>)
 8006664:	f008 fdc1 	bl	800f1ea <HAL_TIM_PWM_Init>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800666e:	f000 fc51 	bl	8006f14 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006672:	2303      	movs	r3, #3
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006676:	2300      	movs	r3, #0
 8006678:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800667a:	2301      	movs	r3, #1
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800667e:	2300      	movs	r3, #0
 8006680:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006686:	2300      	movs	r3, #0
 8006688:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800668a:	2301      	movs	r3, #1
 800668c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800668e:	2300      	movs	r3, #0
 8006690:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006696:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800669a:	4619      	mov	r1, r3
 800669c:	4828      	ldr	r0, [pc, #160]	; (8006740 <MX_TIM1_Init+0x148>)
 800669e:	f008 fe0d 	bl	800f2bc <HAL_TIM_Encoder_Init>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80066a8:	f000 fc34 	bl	8006f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80066b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066b8:	4619      	mov	r1, r3
 80066ba:	4821      	ldr	r0, [pc, #132]	; (8006740 <MX_TIM1_Init+0x148>)
 80066bc:	f009 fb34 	bl	800fd28 <HAL_TIMEx_MasterConfigSynchronization>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80066c6:	f000 fc25 	bl	8006f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066ca:	2360      	movs	r3, #96	; 0x60
 80066cc:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066d2:	2300      	movs	r3, #0
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066d6:	2300      	movs	r3, #0
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066da:	2300      	movs	r3, #0
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066de:	2300      	movs	r3, #0
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066e2:	2300      	movs	r3, #0
 80066e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066e6:	f107 0320 	add.w	r3, r7, #32
 80066ea:	2208      	movs	r2, #8
 80066ec:	4619      	mov	r1, r3
 80066ee:	4814      	ldr	r0, [pc, #80]	; (8006740 <MX_TIM1_Init+0x148>)
 80066f0:	f008 ffb6 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80066fa:	f000 fc0b 	bl	8006f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80066fe:	2300      	movs	r3, #0
 8006700:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006716:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800671c:	463b      	mov	r3, r7
 800671e:	4619      	mov	r1, r3
 8006720:	4807      	ldr	r0, [pc, #28]	; (8006740 <MX_TIM1_Init+0x148>)
 8006722:	f009 fb7d 	bl	800fe20 <HAL_TIMEx_ConfigBreakDeadTime>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800672c:	f000 fbf2 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006730:	4803      	ldr	r0, [pc, #12]	; (8006740 <MX_TIM1_Init+0x148>)
 8006732:	f000 ffdf 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 8006736:	bf00      	nop
 8006738:	3768      	adds	r7, #104	; 0x68
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20044a28 	.word	0x20044a28
 8006744:	40010000 	.word	0x40010000

08006748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800674e:	f107 0320 	add.w	r3, r7, #32
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	605a      	str	r2, [r3, #4]
 8006760:	609a      	str	r2, [r3, #8]
 8006762:	60da      	str	r2, [r3, #12]
 8006764:	611a      	str	r2, [r3, #16]
 8006766:	615a      	str	r2, [r3, #20]
 8006768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800676a:	4b27      	ldr	r3, [pc, #156]	; (8006808 <MX_TIM3_Init+0xc0>)
 800676c:	4a27      	ldr	r2, [pc, #156]	; (800680c <MX_TIM3_Init+0xc4>)
 800676e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <MX_TIM3_Init+0xc0>)
 8006772:	2201      	movs	r2, #1
 8006774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <MX_TIM3_Init+0xc0>)
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 800677c:	4b22      	ldr	r3, [pc, #136]	; (8006808 <MX_TIM3_Init+0xc0>)
 800677e:	f241 1293 	movw	r2, #4499	; 0x1193
 8006782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <MX_TIM3_Init+0xc0>)
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800678a:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <MX_TIM3_Init+0xc0>)
 800678c:	2200      	movs	r2, #0
 800678e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006790:	481d      	ldr	r0, [pc, #116]	; (8006808 <MX_TIM3_Init+0xc0>)
 8006792:	f008 fd2a 	bl	800f1ea <HAL_TIM_PWM_Init>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800679c:	f000 fbba 	bl	8006f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067a0:	2300      	movs	r3, #0
 80067a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80067a8:	f107 0320 	add.w	r3, r7, #32
 80067ac:	4619      	mov	r1, r3
 80067ae:	4816      	ldr	r0, [pc, #88]	; (8006808 <MX_TIM3_Init+0xc0>)
 80067b0:	f009 faba 	bl	800fd28 <HAL_TIMEx_MasterConfigSynchronization>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80067ba:	f000 fbab 	bl	8006f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067be:	2360      	movs	r3, #96	; 0x60
 80067c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	2200      	movs	r2, #0
 80067d2:	4619      	mov	r1, r3
 80067d4:	480c      	ldr	r0, [pc, #48]	; (8006808 <MX_TIM3_Init+0xc0>)
 80067d6:	f008 ff43 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80067e0:	f000 fb98 	bl	8006f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	2204      	movs	r2, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4807      	ldr	r0, [pc, #28]	; (8006808 <MX_TIM3_Init+0xc0>)
 80067ec:	f008 ff38 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80067f6:	f000 fb8d 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80067fa:	4803      	ldr	r0, [pc, #12]	; (8006808 <MX_TIM3_Init+0xc0>)
 80067fc:	f000 ff7a 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 8006800:	bf00      	nop
 8006802:	3728      	adds	r7, #40	; 0x28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	200448c0 	.word	0x200448c0
 800680c:	40000400 	.word	0x40000400

08006810 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	; 0x28
 8006814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006816:	f107 0320 	add.w	r3, r7, #32
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006820:	1d3b      	adds	r3, r7, #4
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	611a      	str	r2, [r3, #16]
 800682e:	615a      	str	r2, [r3, #20]
 8006830:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006832:	4b27      	ldr	r3, [pc, #156]	; (80068d0 <MX_TIM4_Init+0xc0>)
 8006834:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <MX_TIM4_Init+0xc4>)
 8006836:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <MX_TIM4_Init+0xc0>)
 800683a:	2200      	movs	r2, #0
 800683c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <MX_TIM4_Init+0xc0>)
 8006840:	2200      	movs	r2, #0
 8006842:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006844:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <MX_TIM4_Init+0xc0>)
 8006846:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800684a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684c:	4b20      	ldr	r3, [pc, #128]	; (80068d0 <MX_TIM4_Init+0xc0>)
 800684e:	2200      	movs	r2, #0
 8006850:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006852:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <MX_TIM4_Init+0xc0>)
 8006854:	2200      	movs	r2, #0
 8006856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006858:	481d      	ldr	r0, [pc, #116]	; (80068d0 <MX_TIM4_Init+0xc0>)
 800685a:	f008 fcc6 	bl	800f1ea <HAL_TIM_PWM_Init>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006864:	f000 fb56 	bl	8006f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006868:	2300      	movs	r3, #0
 800686a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800686c:	2300      	movs	r3, #0
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006870:	f107 0320 	add.w	r3, r7, #32
 8006874:	4619      	mov	r1, r3
 8006876:	4816      	ldr	r0, [pc, #88]	; (80068d0 <MX_TIM4_Init+0xc0>)
 8006878:	f009 fa56 	bl	800fd28 <HAL_TIMEx_MasterConfigSynchronization>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006882:	f000 fb47 	bl	8006f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006886:	2360      	movs	r3, #96	; 0x60
 8006888:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	2208      	movs	r2, #8
 800689a:	4619      	mov	r1, r3
 800689c:	480c      	ldr	r0, [pc, #48]	; (80068d0 <MX_TIM4_Init+0xc0>)
 800689e:	f008 fedf 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80068a8:	f000 fb34 	bl	8006f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	220c      	movs	r2, #12
 80068b0:	4619      	mov	r1, r3
 80068b2:	4807      	ldr	r0, [pc, #28]	; (80068d0 <MX_TIM4_Init+0xc0>)
 80068b4:	f008 fed4 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80068be:	f000 fb29 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80068c2:	4803      	ldr	r0, [pc, #12]	; (80068d0 <MX_TIM4_Init+0xc0>)
 80068c4:	f000 ff16 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 80068c8:	bf00      	nop
 80068ca:	3728      	adds	r7, #40	; 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	2004474c 	.word	0x2004474c
 80068d4:	40000800 	.word	0x40000800

080068d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068de:	463b      	mov	r3, r7
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80068e6:	4b15      	ldr	r3, [pc, #84]	; (800693c <MX_TIM6_Init+0x64>)
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <MX_TIM6_Init+0x68>)
 80068ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <MX_TIM6_Init+0x64>)
 80068ee:	2259      	movs	r2, #89	; 0x59
 80068f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <MX_TIM6_Init+0x64>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80068f8:	4b10      	ldr	r3, [pc, #64]	; (800693c <MX_TIM6_Init+0x64>)
 80068fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80068fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <MX_TIM6_Init+0x64>)
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006906:	480d      	ldr	r0, [pc, #52]	; (800693c <MX_TIM6_Init+0x64>)
 8006908:	f008 fc20 	bl	800f14c <HAL_TIM_Base_Init>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006912:	f000 faff 	bl	8006f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800691e:	463b      	mov	r3, r7
 8006920:	4619      	mov	r1, r3
 8006922:	4806      	ldr	r0, [pc, #24]	; (800693c <MX_TIM6_Init+0x64>)
 8006924:	f009 fa00 	bl	800fd28 <HAL_TIMEx_MasterConfigSynchronization>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800692e:	f000 faf1 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200449e8 	.word	0x200449e8
 8006940:	40001000 	.word	0x40001000

08006944 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800694a:	463b      	mov	r3, r7
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <MX_TIM7_Init+0x60>)
 8006954:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <MX_TIM7_Init+0x64>)
 8006956:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <MX_TIM7_Init+0x60>)
 800695a:	22b3      	movs	r2, #179	; 0xb3
 800695c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800695e:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <MX_TIM7_Init+0x60>)
 8006960:	2200      	movs	r2, #0
 8006962:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006964:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <MX_TIM7_Init+0x60>)
 8006966:	2231      	movs	r2, #49	; 0x31
 8006968:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <MX_TIM7_Init+0x60>)
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006970:	480c      	ldr	r0, [pc, #48]	; (80069a4 <MX_TIM7_Init+0x60>)
 8006972:	f008 fbeb 	bl	800f14c <HAL_TIM_Base_Init>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800697c:	f000 faca 	bl	8006f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006980:	2300      	movs	r3, #0
 8006982:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006984:	2300      	movs	r3, #0
 8006986:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006988:	463b      	mov	r3, r7
 800698a:	4619      	mov	r1, r3
 800698c:	4805      	ldr	r0, [pc, #20]	; (80069a4 <MX_TIM7_Init+0x60>)
 800698e:	f009 f9cb 	bl	800fd28 <HAL_TIMEx_MasterConfigSynchronization>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006998:	f000 fabc 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20044b8c 	.word	0x20044b8c
 80069a8:	40001400 	.word	0x40001400

080069ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08c      	sub	sp, #48	; 0x30
 80069b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80069b2:	f107 030c 	add.w	r3, r7, #12
 80069b6:	2224      	movs	r2, #36	; 0x24
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f00f f804 	bl	80159c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069c0:	1d3b      	adds	r3, r7, #4
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80069c8:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069ca:	4a23      	ldr	r2, [pc, #140]	; (8006a58 <MX_TIM8_Init+0xac>)
 80069cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80069ce:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80069d4:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069d6:	2210      	movs	r2, #16
 80069d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80069da:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80069e8:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <MX_TIM8_Init+0xa8>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80069f4:	2303      	movs	r3, #3
 80069f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80069fc:	2301      	movs	r3, #1
 80069fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a10:	2300      	movs	r3, #0
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	480d      	ldr	r0, [pc, #52]	; (8006a54 <MX_TIM8_Init+0xa8>)
 8006a20:	f008 fc4c 	bl	800f2bc <HAL_TIM_Encoder_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006a2a:	f000 fa73 	bl	8006f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4806      	ldr	r0, [pc, #24]	; (8006a54 <MX_TIM8_Init+0xa8>)
 8006a3c:	f009 f974 	bl	800fd28 <HAL_TIMEx_MasterConfigSynchronization>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006a46:	f000 fa65 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006a4a:	bf00      	nop
 8006a4c:	3730      	adds	r7, #48	; 0x30
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2004470c 	.word	0x2004470c
 8006a58:	40010400 	.word	0x40010400

08006a5c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
 8006a70:	615a      	str	r2, [r3, #20]
 8006a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006a74:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a76:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <MX_TIM10_Init+0x98>)
 8006a78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a80:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006a86:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a88:	f242 3227 	movw	r2, #8999	; 0x2327
 8006a8c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a8e:	4b18      	ldr	r3, [pc, #96]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a94:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006a9a:	4815      	ldr	r0, [pc, #84]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006a9c:	f008 fb56 	bl	800f14c <HAL_TIM_Base_Init>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006aa6:	f000 fa35 	bl	8006f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006aaa:	4811      	ldr	r0, [pc, #68]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006aac:	f008 fb9d 	bl	800f1ea <HAL_TIM_PWM_Init>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006ab6:	f000 fa2d 	bl	8006f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006aba:	2360      	movs	r3, #96	; 0x60
 8006abc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	2200      	movs	r2, #0
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4807      	ldr	r0, [pc, #28]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006ad2:	f008 fdc5 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006adc:	f000 fa1a 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006ae0:	4803      	ldr	r0, [pc, #12]	; (8006af0 <MX_TIM10_Init+0x94>)
 8006ae2:	f000 fe07 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 8006ae6:	bf00      	nop
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20044828 	.word	0x20044828
 8006af4:	40014400 	.word	0x40014400

08006af8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	605a      	str	r2, [r3, #4]
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	611a      	str	r2, [r3, #16]
 8006b0c:	615a      	str	r2, [r3, #20]
 8006b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006b10:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b12:	4a1f      	ldr	r2, [pc, #124]	; (8006b90 <MX_TIM11_Init+0x98>)
 8006b14:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b1c:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006b22:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b24:	f242 3227 	movw	r2, #8999	; 0x2327
 8006b28:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b2a:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b30:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006b36:	4815      	ldr	r0, [pc, #84]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b38:	f008 fb08 	bl	800f14c <HAL_TIM_Base_Init>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006b42:	f000 f9e7 	bl	8006f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006b46:	4811      	ldr	r0, [pc, #68]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b48:	f008 fb4f 	bl	800f1ea <HAL_TIM_PWM_Init>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006b52:	f000 f9df 	bl	8006f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b56:	2360      	movs	r3, #96	; 0x60
 8006b58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4807      	ldr	r0, [pc, #28]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b6e:	f008 fd77 	bl	800f660 <HAL_TIM_PWM_ConfigChannel>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006b78:	f000 f9cc 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006b7c:	4803      	ldr	r0, [pc, #12]	; (8006b8c <MX_TIM11_Init+0x94>)
 8006b7e:	f000 fdb9 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 8006b82:	bf00      	nop
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20044948 	.word	0x20044948
 8006b90:	40014800 	.word	0x40014800

08006b94 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006b98:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <MX_TIM13_Init+0x44>)
 8006b9c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006ba0:	2259      	movs	r2, #89	; 0x59
 8006ba2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006bac:	f242 720f 	movw	r2, #9999	; 0x270f
 8006bb0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bb2:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006bbe:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <MX_TIM13_Init+0x40>)
 8006bc0:	f008 fac4 	bl	800f14c <HAL_TIM_Base_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006bca:	f000 f9a3 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006bce:	bf00      	nop
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20044908 	.word	0x20044908
 8006bd8:	40001c00 	.word	0x40001c00

08006bdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006be2:	4a12      	ldr	r2, [pc, #72]	; (8006c2c <MX_USART2_UART_Init+0x50>)
 8006be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006bee:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006c02:	220c      	movs	r2, #12
 8006c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c06:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c12:	4805      	ldr	r0, [pc, #20]	; (8006c28 <MX_USART2_UART_Init+0x4c>)
 8006c14:	f009 f96a 	bl	800feec <HAL_UART_Init>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006c1e:	f000 f979 	bl	8006f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006c22:	bf00      	nop
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20044aec 	.word	0x20044aec
 8006c2c:	40004400 	.word	0x40004400

08006c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <MX_DMA_Init+0x5c>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	4a13      	ldr	r2, [pc, #76]	; (8006c8c <MX_DMA_Init+0x5c>)
 8006c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <MX_DMA_Init+0x5c>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	203a      	movs	r0, #58	; 0x3a
 8006c58:	f003 fe43 	bl	800a8e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006c5c:	203a      	movs	r0, #58	; 0x3a
 8006c5e:	f003 fe5c 	bl	800a91a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	203b      	movs	r0, #59	; 0x3b
 8006c68:	f003 fe3b 	bl	800a8e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006c6c:	203b      	movs	r0, #59	; 0x3b
 8006c6e:	f003 fe54 	bl	800a91a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2100      	movs	r1, #0
 8006c76:	2045      	movs	r0, #69	; 0x45
 8006c78:	f003 fe33 	bl	800a8e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006c7c:	2045      	movs	r0, #69	; 0x45
 8006c7e:	f003 fe4c 	bl	800a91a <HAL_NVIC_EnableIRQ>

}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40023800 	.word	0x40023800

08006c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08c      	sub	sp, #48	; 0x30
 8006c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c96:	f107 031c 	add.w	r3, r7, #28
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
 8006ca2:	60da      	str	r2, [r3, #12]
 8006ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	4b94      	ldr	r3, [pc, #592]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	4a93      	ldr	r2, [pc, #588]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006cb0:	f043 0310 	orr.w	r3, r3, #16
 8006cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cb6:	4b91      	ldr	r3, [pc, #580]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	4b8d      	ldr	r3, [pc, #564]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	4a8c      	ldr	r2, [pc, #560]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd2:	4b8a      	ldr	r3, [pc, #552]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	4b86      	ldr	r3, [pc, #536]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	4a85      	ldr	r2, [pc, #532]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006ce8:	f043 0304 	orr.w	r3, r3, #4
 8006cec:	6313      	str	r3, [r2, #48]	; 0x30
 8006cee:	4b83      	ldr	r3, [pc, #524]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4b7f      	ldr	r3, [pc, #508]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	4a7e      	ldr	r2, [pc, #504]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d04:	f043 0301 	orr.w	r3, r3, #1
 8006d08:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0a:	4b7c      	ldr	r3, [pc, #496]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	4b78      	ldr	r3, [pc, #480]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	4a77      	ldr	r2, [pc, #476]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d20:	f043 0302 	orr.w	r3, r3, #2
 8006d24:	6313      	str	r3, [r2, #48]	; 0x30
 8006d26:	4b75      	ldr	r3, [pc, #468]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d32:	2300      	movs	r3, #0
 8006d34:	607b      	str	r3, [r7, #4]
 8006d36:	4b71      	ldr	r3, [pc, #452]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	4a70      	ldr	r2, [pc, #448]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d3c:	f043 0308 	orr.w	r3, r3, #8
 8006d40:	6313      	str	r3, [r2, #48]	; 0x30
 8006d42:	4b6e      	ldr	r3, [pc, #440]	; (8006efc <MX_GPIO_Init+0x26c>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d54:	486a      	ldr	r0, [pc, #424]	; (8006f00 <MX_GPIO_Init+0x270>)
 8006d56:	f004 fb59 	bl	800b40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d60:	4868      	ldr	r0, [pc, #416]	; (8006f04 <MX_GPIO_Init+0x274>)
 8006d62:	f004 fb53 	bl	800b40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006d66:	2200      	movs	r2, #0
 8006d68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d6c:	4866      	ldr	r0, [pc, #408]	; (8006f08 <MX_GPIO_Init+0x278>)
 8006d6e:	f004 fb4d 	bl	800b40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006d78:	4864      	ldr	r0, [pc, #400]	; (8006f0c <MX_GPIO_Init+0x27c>)
 8006d7a:	f004 fb47 	bl	800b40c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d7e:	2304      	movs	r3, #4
 8006d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d82:	2300      	movs	r3, #0
 8006d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d8a:	f107 031c 	add.w	r3, r7, #28
 8006d8e:	4619      	mov	r1, r3
 8006d90:	485b      	ldr	r0, [pc, #364]	; (8006f00 <MX_GPIO_Init+0x270>)
 8006d92:	f004 f979 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d96:	230f      	movs	r3, #15
 8006d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006da2:	f107 031c 	add.w	r3, r7, #28
 8006da6:	4619      	mov	r1, r3
 8006da8:	4859      	ldr	r0, [pc, #356]	; (8006f10 <MX_GPIO_Init+0x280>)
 8006daa:	f004 f96d 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006dae:	23e1      	movs	r3, #225	; 0xe1
 8006db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006db2:	2303      	movs	r3, #3
 8006db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dba:	f107 031c 	add.w	r3, r7, #28
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4852      	ldr	r0, [pc, #328]	; (8006f0c <MX_GPIO_Init+0x27c>)
 8006dc2:	f004 f961 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd2:	f107 031c 	add.w	r3, r7, #28
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	484a      	ldr	r0, [pc, #296]	; (8006f04 <MX_GPIO_Init+0x274>)
 8006dda:	f004 f955 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006dde:	2304      	movs	r3, #4
 8006de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006de2:	2300      	movs	r3, #0
 8006de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006de6:	2301      	movs	r3, #1
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dea:	f107 031c 	add.w	r3, r7, #28
 8006dee:	4619      	mov	r1, r3
 8006df0:	4844      	ldr	r0, [pc, #272]	; (8006f04 <MX_GPIO_Init+0x274>)
 8006df2:	f004 f949 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006df6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e00:	2301      	movs	r3, #1
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e04:	f107 031c 	add.w	r3, r7, #28
 8006e08:	4619      	mov	r1, r3
 8006e0a:	483d      	ldr	r0, [pc, #244]	; (8006f00 <MX_GPIO_Init+0x270>)
 8006e0c:	f004 f93c 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006e10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e16:	2301      	movs	r3, #1
 8006e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e22:	f107 031c 	add.w	r3, r7, #28
 8006e26:	4619      	mov	r1, r3
 8006e28:	4835      	ldr	r0, [pc, #212]	; (8006f00 <MX_GPIO_Init+0x270>)
 8006e2a:	f004 f92d 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e34:	2301      	movs	r3, #1
 8006e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e40:	f107 031c 	add.w	r3, r7, #28
 8006e44:	4619      	mov	r1, r3
 8006e46:	482f      	ldr	r0, [pc, #188]	; (8006f04 <MX_GPIO_Init+0x274>)
 8006e48:	f004 f91e 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e52:	2300      	movs	r3, #0
 8006e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e5a:	f107 031c 	add.w	r3, r7, #28
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4829      	ldr	r0, [pc, #164]	; (8006f08 <MX_GPIO_Init+0x278>)
 8006e62:	f004 f911 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e74:	2300      	movs	r3, #0
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e78:	f107 031c 	add.w	r3, r7, #28
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4822      	ldr	r0, [pc, #136]	; (8006f08 <MX_GPIO_Init+0x278>)
 8006e80:	f004 f902 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e96:	f107 031c 	add.w	r3, r7, #28
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	481a      	ldr	r0, [pc, #104]	; (8006f08 <MX_GPIO_Init+0x278>)
 8006e9e:	f004 f8f3 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ea2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006ea6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eb4:	f107 031c 	add.w	r3, r7, #28
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4814      	ldr	r0, [pc, #80]	; (8006f0c <MX_GPIO_Init+0x27c>)
 8006ebc:	f004 f8e4 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ece:	f107 031c 	add.w	r3, r7, #28
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	480d      	ldr	r0, [pc, #52]	; (8006f0c <MX_GPIO_Init+0x27c>)
 8006ed6:	f004 f8d7 	bl	800b088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006eda:	239b      	movs	r3, #155	; 0x9b
 8006edc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ee6:	f107 031c 	add.w	r3, r7, #28
 8006eea:	4619      	mov	r1, r3
 8006eec:	4806      	ldr	r0, [pc, #24]	; (8006f08 <MX_GPIO_Init+0x278>)
 8006eee:	f004 f8cb 	bl	800b088 <HAL_GPIO_Init>

}
 8006ef2:	bf00      	nop
 8006ef4:	3730      	adds	r7, #48	; 0x30
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40020400 	.word	0x40020400
 8006f08:	40020c00 	.word	0x40020c00
 8006f0c:	40020000 	.word	0x40020000
 8006f10:	40020800 	.word	0x40020800

08006f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f1a:	e7fe      	b.n	8006f1a <Error_Handler+0x6>

08006f1c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <HAL_MspInit+0x4c>)
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	4a0f      	ldr	r2, [pc, #60]	; (8006f78 <HAL_MspInit+0x4c>)
 8006f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f40:	6453      	str	r3, [r2, #68]	; 0x44
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <HAL_MspInit+0x4c>)
 8006f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4a:	607b      	str	r3, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <HAL_MspInit+0x4c>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <HAL_MspInit+0x4c>)
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f5e:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <HAL_MspInit+0x4c>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800

08006f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08c      	sub	sp, #48	; 0x30
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f84:	f107 031c 	add.w	r3, r7, #28
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a4a      	ldr	r2, [pc, #296]	; (80070c4 <HAL_ADC_MspInit+0x148>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	f040 808e 	bne.w	80070bc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	4b48      	ldr	r3, [pc, #288]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	4a47      	ldr	r2, [pc, #284]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fae:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb0:	4b45      	ldr	r3, [pc, #276]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	4a40      	ldr	r2, [pc, #256]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fc6:	f043 0304 	orr.w	r3, r3, #4
 8006fca:	6313      	str	r3, [r2, #48]	; 0x30
 8006fcc:	4b3e      	ldr	r3, [pc, #248]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	4b3a      	ldr	r3, [pc, #232]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	4a39      	ldr	r2, [pc, #228]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe8:	4b37      	ldr	r3, [pc, #220]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	4b33      	ldr	r3, [pc, #204]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	4a32      	ldr	r2, [pc, #200]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	6313      	str	r3, [r2, #48]	; 0x30
 8007004:	4b30      	ldr	r3, [pc, #192]	; (80070c8 <HAL_ADC_MspInit+0x14c>)
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007010:	230f      	movs	r3, #15
 8007012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007014:	2303      	movs	r3, #3
 8007016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007018:	2300      	movs	r3, #0
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800701c:	f107 031c 	add.w	r3, r7, #28
 8007020:	4619      	mov	r1, r3
 8007022:	482a      	ldr	r0, [pc, #168]	; (80070cc <HAL_ADC_MspInit+0x150>)
 8007024:	f004 f830 	bl	800b088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007028:	23ff      	movs	r3, #255	; 0xff
 800702a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800702c:	2303      	movs	r3, #3
 800702e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007030:	2300      	movs	r3, #0
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007034:	f107 031c 	add.w	r3, r7, #28
 8007038:	4619      	mov	r1, r3
 800703a:	4825      	ldr	r0, [pc, #148]	; (80070d0 <HAL_ADC_MspInit+0x154>)
 800703c:	f004 f824 	bl	800b088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007040:	2303      	movs	r3, #3
 8007042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007044:	2303      	movs	r3, #3
 8007046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007048:	2300      	movs	r3, #0
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800704c:	f107 031c 	add.w	r3, r7, #28
 8007050:	4619      	mov	r1, r3
 8007052:	4820      	ldr	r0, [pc, #128]	; (80070d4 <HAL_ADC_MspInit+0x158>)
 8007054:	f004 f818 	bl	800b088 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8007058:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 800705a:	4a20      	ldr	r2, [pc, #128]	; (80070dc <HAL_ADC_MspInit+0x160>)
 800705c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800705e:	4b1e      	ldr	r3, [pc, #120]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 8007060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007064:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007066:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 8007068:	2200      	movs	r2, #0
 800706a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 800706e:	2200      	movs	r2, #0
 8007070:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007072:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 8007074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007078:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800707a:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 800707c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007080:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 8007084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007088:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 800708c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007090:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 8007094:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007098:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800709a:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 800709c:	2200      	movs	r2, #0
 800709e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80070a0:	480d      	ldr	r0, [pc, #52]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 80070a2:	f003 fc55 	bl	800a950 <HAL_DMA_Init>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80070ac:	f7ff ff32 	bl	8006f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
 80070b6:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <HAL_ADC_MspInit+0x15c>)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80070bc:	bf00      	nop
 80070be:	3730      	adds	r7, #48	; 0x30
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40012100 	.word	0x40012100
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40020800 	.word	0x40020800
 80070d0:	40020000 	.word	0x40020000
 80070d4:	40020400 	.word	0x40020400
 80070d8:	20044b2c 	.word	0x20044b2c
 80070dc:	40026440 	.word	0x40026440

080070e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08c      	sub	sp, #48	; 0x30
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e8:	f107 031c 	add.w	r3, r7, #28
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	605a      	str	r2, [r3, #4]
 80070f2:	609a      	str	r2, [r3, #8]
 80070f4:	60da      	str	r2, [r3, #12]
 80070f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a32      	ldr	r2, [pc, #200]	; (80071c8 <HAL_I2C_MspInit+0xe8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d12c      	bne.n	800715c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007102:	2300      	movs	r3, #0
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	4b31      	ldr	r3, [pc, #196]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	4a30      	ldr	r2, [pc, #192]	; (80071cc <HAL_I2C_MspInit+0xec>)
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	6313      	str	r3, [r2, #48]	; 0x30
 8007112:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800711e:	23c0      	movs	r3, #192	; 0xc0
 8007120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007122:	2312      	movs	r3, #18
 8007124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007126:	2301      	movs	r3, #1
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712a:	2303      	movs	r3, #3
 800712c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800712e:	2304      	movs	r3, #4
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007132:	f107 031c 	add.w	r3, r7, #28
 8007136:	4619      	mov	r1, r3
 8007138:	4825      	ldr	r0, [pc, #148]	; (80071d0 <HAL_I2C_MspInit+0xf0>)
 800713a:	f003 ffa5 	bl	800b088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	4b22      	ldr	r3, [pc, #136]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	4a21      	ldr	r2, [pc, #132]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800714c:	6413      	str	r3, [r2, #64]	; 0x40
 800714e:	4b1f      	ldr	r3, [pc, #124]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800715a:	e031      	b.n	80071c0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <HAL_I2C_MspInit+0xf4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d12c      	bne.n	80071c0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	4b18      	ldr	r3, [pc, #96]	; (80071cc <HAL_I2C_MspInit+0xec>)
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	4a17      	ldr	r2, [pc, #92]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	6313      	str	r3, [r2, #48]	; 0x30
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <HAL_I2C_MspInit+0xec>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007182:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007188:	2312      	movs	r3, #18
 800718a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800718c:	2301      	movs	r3, #1
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007190:	2303      	movs	r3, #3
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007194:	2304      	movs	r3, #4
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007198:	f107 031c 	add.w	r3, r7, #28
 800719c:	4619      	mov	r1, r3
 800719e:	480c      	ldr	r0, [pc, #48]	; (80071d0 <HAL_I2C_MspInit+0xf0>)
 80071a0:	f003 ff72 	bl	800b088 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	4b08      	ldr	r3, [pc, #32]	; (80071cc <HAL_I2C_MspInit+0xec>)
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	4a07      	ldr	r2, [pc, #28]	; (80071cc <HAL_I2C_MspInit+0xec>)
 80071ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071b2:	6413      	str	r3, [r2, #64]	; 0x40
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <HAL_I2C_MspInit+0xec>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
}
 80071c0:	bf00      	nop
 80071c2:	3730      	adds	r7, #48	; 0x30
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40005400 	.word	0x40005400
 80071cc:	40023800 	.word	0x40023800
 80071d0:	40020400 	.word	0x40020400
 80071d4:	40005800 	.word	0x40005800

080071d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	; 0x28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e0:	f107 0314 	add.w	r3, r7, #20
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	609a      	str	r2, [r3, #8]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a69      	ldr	r2, [pc, #420]	; (800739c <HAL_SD_MspInit+0x1c4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	f040 80cb 	bne.w	8007392 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	4b67      	ldr	r3, [pc, #412]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 8007202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007204:	4a66      	ldr	r2, [pc, #408]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 8007206:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800720a:	6453      	str	r3, [r2, #68]	; 0x44
 800720c:	4b64      	ldr	r3, [pc, #400]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 800720e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	4b60      	ldr	r3, [pc, #384]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	4a5f      	ldr	r2, [pc, #380]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 8007222:	f043 0304 	orr.w	r3, r3, #4
 8007226:	6313      	str	r3, [r2, #48]	; 0x30
 8007228:	4b5d      	ldr	r3, [pc, #372]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	4b59      	ldr	r3, [pc, #356]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	4a58      	ldr	r2, [pc, #352]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 800723e:	f043 0308 	orr.w	r3, r3, #8
 8007242:	6313      	str	r3, [r2, #48]	; 0x30
 8007244:	4b56      	ldr	r3, [pc, #344]	; (80073a0 <HAL_SD_MspInit+0x1c8>)
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007250:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007254:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007256:	2302      	movs	r3, #2
 8007258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800725e:	2303      	movs	r3, #3
 8007260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007262:	230c      	movs	r3, #12
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007266:	f107 0314 	add.w	r3, r7, #20
 800726a:	4619      	mov	r1, r3
 800726c:	484d      	ldr	r0, [pc, #308]	; (80073a4 <HAL_SD_MspInit+0x1cc>)
 800726e:	f003 ff0b 	bl	800b088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007272:	2304      	movs	r3, #4
 8007274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007276:	2302      	movs	r3, #2
 8007278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800727e:	2303      	movs	r3, #3
 8007280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007282:	230c      	movs	r3, #12
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007286:	f107 0314 	add.w	r3, r7, #20
 800728a:	4619      	mov	r1, r3
 800728c:	4846      	ldr	r0, [pc, #280]	; (80073a8 <HAL_SD_MspInit+0x1d0>)
 800728e:	f003 fefb 	bl	800b088 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8007292:	4b46      	ldr	r3, [pc, #280]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 8007294:	4a46      	ldr	r2, [pc, #280]	; (80073b0 <HAL_SD_MspInit+0x1d8>)
 8007296:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007298:	4b44      	ldr	r3, [pc, #272]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 800729a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800729e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072a0:	4b42      	ldr	r3, [pc, #264]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072a6:	4b41      	ldr	r3, [pc, #260]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072ac:	4b3f      	ldr	r3, [pc, #252]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072b2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80072b4:	4b3d      	ldr	r3, [pc, #244]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072ba:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072bc:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072c2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80072c4:	4b39      	ldr	r3, [pc, #228]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072c6:	2220      	movs	r2, #32
 80072c8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80072ca:	4b38      	ldr	r3, [pc, #224]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072d0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80072d2:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072d4:	2204      	movs	r2, #4
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80072d8:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072da:	2203      	movs	r2, #3
 80072dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80072de:	4b33      	ldr	r3, [pc, #204]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072e6:	4b31      	ldr	r3, [pc, #196]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80072ee:	482f      	ldr	r0, [pc, #188]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 80072f0:	f003 fb2e 	bl	800a950 <HAL_DMA_Init>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80072fa:	f7ff fe0b 	bl	8006f14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a2a      	ldr	r2, [pc, #168]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
 8007304:	4a29      	ldr	r2, [pc, #164]	; (80073ac <HAL_SD_MspInit+0x1d4>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800730a:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <HAL_SD_MspInit+0x1e0>)
 800730e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007316:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007318:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800731e:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007320:	2200      	movs	r2, #0
 8007322:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007324:	4b23      	ldr	r3, [pc, #140]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800732a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800732c:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800732e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007332:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007334:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800733a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800733e:	2220      	movs	r2, #32
 8007340:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007342:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007344:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007348:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800734c:	2204      	movs	r2, #4
 800734e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007350:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007352:	2203      	movs	r2, #3
 8007354:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007356:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007358:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007366:	4813      	ldr	r0, [pc, #76]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 8007368:	f003 faf2 	bl	800a950 <HAL_DMA_Init>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007372:	f7ff fdcf 	bl	8006f14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a0e      	ldr	r2, [pc, #56]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800737a:	63da      	str	r2, [r3, #60]	; 0x3c
 800737c:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <HAL_SD_MspInit+0x1dc>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	2031      	movs	r0, #49	; 0x31
 8007388:	f003 faab 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800738c:	2031      	movs	r0, #49	; 0x31
 800738e:	f003 fac4 	bl	800a91a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007392:	bf00      	nop
 8007394:	3728      	adds	r7, #40	; 0x28
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40023800 	.word	0x40023800
 80073a4:	40020800 	.word	0x40020800
 80073a8:	40020c00 	.word	0x40020c00
 80073ac:	20044654 	.word	0x20044654
 80073b0:	40026458 	.word	0x40026458
 80073b4:	20044988 	.word	0x20044988
 80073b8:	400264a0 	.word	0x400264a0

080073bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a19      	ldr	r2, [pc, #100]	; (8007440 <HAL_SPI_MspInit+0x84>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d12c      	bne.n	8007438 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	4b18      	ldr	r3, [pc, #96]	; (8007444 <HAL_SPI_MspInit+0x88>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a17      	ldr	r2, [pc, #92]	; (8007444 <HAL_SPI_MspInit+0x88>)
 80073e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <HAL_SPI_MspInit+0x88>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b11      	ldr	r3, [pc, #68]	; (8007444 <HAL_SPI_MspInit+0x88>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	4a10      	ldr	r2, [pc, #64]	; (8007444 <HAL_SPI_MspInit+0x88>)
 8007404:	f043 0302 	orr.w	r3, r3, #2
 8007408:	6313      	str	r3, [r2, #48]	; 0x30
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <HAL_SPI_MspInit+0x88>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007416:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800741a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800741c:	2302      	movs	r3, #2
 800741e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007420:	2300      	movs	r3, #0
 8007422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007424:	2303      	movs	r3, #3
 8007426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007428:	2305      	movs	r3, #5
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800742c:	f107 0314 	add.w	r3, r7, #20
 8007430:	4619      	mov	r1, r3
 8007432:	4805      	ldr	r0, [pc, #20]	; (8007448 <HAL_SPI_MspInit+0x8c>)
 8007434:	f003 fe28 	bl	800b088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007438:	bf00      	nop
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40003800 	.word	0x40003800
 8007444:	40023800 	.word	0x40023800
 8007448:	40020400 	.word	0x40020400

0800744c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08c      	sub	sp, #48	; 0x30
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007454:	f107 031c 	add.w	r3, r7, #28
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2d      	ldr	r2, [pc, #180]	; (8007520 <HAL_TIM_PWM_MspInit+0xd4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d12d      	bne.n	80074ca <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007476:	4a2b      	ldr	r2, [pc, #172]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	6453      	str	r3, [r2, #68]	; 0x44
 800747e:	4b29      	ldr	r3, [pc, #164]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	4b25      	ldr	r3, [pc, #148]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	4a24      	ldr	r2, [pc, #144]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007494:	f043 0310 	orr.w	r3, r3, #16
 8007498:	6313      	str	r3, [r2, #48]	; 0x30
 800749a:	4b22      	ldr	r3, [pc, #136]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80074a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80074aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ac:	2302      	movs	r3, #2
 80074ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b4:	2300      	movs	r3, #0
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80074b8:	2301      	movs	r3, #1
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074bc:	f107 031c 	add.w	r3, r7, #28
 80074c0:	4619      	mov	r1, r3
 80074c2:	4819      	ldr	r0, [pc, #100]	; (8007528 <HAL_TIM_PWM_MspInit+0xdc>)
 80074c4:	f003 fde0 	bl	800b088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80074c8:	e026      	b.n	8007518 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a17      	ldr	r2, [pc, #92]	; (800752c <HAL_TIM_PWM_MspInit+0xe0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d10e      	bne.n	80074f2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 80074de:	f043 0302 	orr.w	r3, r3, #2
 80074e2:	6413      	str	r3, [r2, #64]	; 0x40
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	693b      	ldr	r3, [r7, #16]
}
 80074f0:	e012      	b.n	8007518 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a0e      	ldr	r2, [pc, #56]	; (8007530 <HAL_TIM_PWM_MspInit+0xe4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d10d      	bne.n	8007518 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	4b08      	ldr	r3, [pc, #32]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	4a07      	ldr	r2, [pc, #28]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 8007506:	f043 0304 	orr.w	r3, r3, #4
 800750a:	6413      	str	r3, [r2, #64]	; 0x40
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_TIM_PWM_MspInit+0xd8>)
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	3730      	adds	r7, #48	; 0x30
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40010000 	.word	0x40010000
 8007524:	40023800 	.word	0x40023800
 8007528:	40021000 	.word	0x40021000
 800752c:	40000400 	.word	0x40000400
 8007530:	40000800 	.word	0x40000800

08007534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3e      	ldr	r2, [pc, #248]	; (800763c <HAL_TIM_Base_MspInit+0x108>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d116      	bne.n	8007574 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	4b3d      	ldr	r3, [pc, #244]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	4a3c      	ldr	r2, [pc, #240]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007550:	f043 0310 	orr.w	r3, r3, #16
 8007554:	6413      	str	r3, [r2, #64]	; 0x40
 8007556:	4b3a      	ldr	r3, [pc, #232]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007562:	2200      	movs	r2, #0
 8007564:	2101      	movs	r1, #1
 8007566:	2036      	movs	r0, #54	; 0x36
 8007568:	f003 f9bb 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800756c:	2036      	movs	r0, #54	; 0x36
 800756e:	f003 f9d4 	bl	800a91a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007572:	e05e      	b.n	8007632 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a32      	ldr	r2, [pc, #200]	; (8007644 <HAL_TIM_Base_MspInit+0x110>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d116      	bne.n	80075ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	4b2f      	ldr	r3, [pc, #188]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4a2e      	ldr	r2, [pc, #184]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007588:	f043 0320 	orr.w	r3, r3, #32
 800758c:	6413      	str	r3, [r2, #64]	; 0x40
 800758e:	4b2c      	ldr	r3, [pc, #176]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	2037      	movs	r0, #55	; 0x37
 80075a0:	f003 f99f 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80075a4:	2037      	movs	r0, #55	; 0x37
 80075a6:	f003 f9b8 	bl	800a91a <HAL_NVIC_EnableIRQ>
}
 80075aa:	e042      	b.n	8007632 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a25      	ldr	r2, [pc, #148]	; (8007648 <HAL_TIM_Base_MspInit+0x114>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10e      	bne.n	80075d4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	4b21      	ldr	r3, [pc, #132]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	4a20      	ldr	r2, [pc, #128]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 80075c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c4:	6453      	str	r3, [r2, #68]	; 0x44
 80075c6:	4b1e      	ldr	r3, [pc, #120]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	697b      	ldr	r3, [r7, #20]
}
 80075d2:	e02e      	b.n	8007632 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <HAL_TIM_Base_MspInit+0x118>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	4b17      	ldr	r3, [pc, #92]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	4a16      	ldr	r2, [pc, #88]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 80075e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ec:	6453      	str	r3, [r2, #68]	; 0x44
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	693b      	ldr	r3, [r7, #16]
}
 80075fa:	e01a      	b.n	8007632 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a13      	ldr	r2, [pc, #76]	; (8007650 <HAL_TIM_Base_MspInit+0x11c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d115      	bne.n	8007632 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	4a0c      	ldr	r2, [pc, #48]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007614:	6413      	str	r3, [r2, #64]	; 0x40
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <HAL_TIM_Base_MspInit+0x10c>)
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	202c      	movs	r0, #44	; 0x2c
 8007628:	f003 f95b 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800762c:	202c      	movs	r0, #44	; 0x2c
 800762e:	f003 f974 	bl	800a91a <HAL_NVIC_EnableIRQ>
}
 8007632:	bf00      	nop
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40001000 	.word	0x40001000
 8007640:	40023800 	.word	0x40023800
 8007644:	40001400 	.word	0x40001400
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800
 8007650:	40001c00 	.word	0x40001c00

08007654 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	609a      	str	r2, [r3, #8]
 8007668:	60da      	str	r2, [r3, #12]
 800766a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d133      	bne.n	80076de <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
 800767a:	4b1c      	ldr	r3, [pc, #112]	; (80076ec <HAL_TIM_Encoder_MspInit+0x98>)
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <HAL_TIM_Encoder_MspInit+0x98>)
 8007680:	f043 0302 	orr.w	r3, r3, #2
 8007684:	6453      	str	r3, [r2, #68]	; 0x44
 8007686:	4b19      	ldr	r3, [pc, #100]	; (80076ec <HAL_TIM_Encoder_MspInit+0x98>)
 8007688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <HAL_TIM_Encoder_MspInit+0x98>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	4a14      	ldr	r2, [pc, #80]	; (80076ec <HAL_TIM_Encoder_MspInit+0x98>)
 800769c:	f043 0304 	orr.w	r3, r3, #4
 80076a0:	6313      	str	r3, [r2, #48]	; 0x30
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <HAL_TIM_Encoder_MspInit+0x98>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076ae:	23c0      	movs	r3, #192	; 0xc0
 80076b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b2:	2302      	movs	r3, #2
 80076b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ba:	2300      	movs	r3, #0
 80076bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80076be:	2303      	movs	r3, #3
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076c2:	f107 0314 	add.w	r3, r7, #20
 80076c6:	4619      	mov	r1, r3
 80076c8:	4809      	ldr	r0, [pc, #36]	; (80076f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80076ca:	f003 fcdd 	bl	800b088 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	202c      	movs	r0, #44	; 0x2c
 80076d4:	f003 f905 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80076d8:	202c      	movs	r0, #44	; 0x2c
 80076da:	f003 f91e 	bl	800a91a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80076de:	bf00      	nop
 80076e0:	3728      	adds	r7, #40	; 0x28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	40010400 	.word	0x40010400
 80076ec:	40023800 	.word	0x40023800
 80076f0:	40020800 	.word	0x40020800

080076f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	; 0x30
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076fc:	f107 031c 	add.w	r3, r7, #28
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	609a      	str	r2, [r3, #8]
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a5c      	ldr	r2, [pc, #368]	; (8007884 <HAL_TIM_MspPostInit+0x190>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d11f      	bne.n	8007756 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	4b5b      	ldr	r3, [pc, #364]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	4a5a      	ldr	r2, [pc, #360]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007720:	f043 0310 	orr.w	r3, r3, #16
 8007724:	6313      	str	r3, [r2, #48]	; 0x30
 8007726:	4b58      	ldr	r3, [pc, #352]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007738:	2302      	movs	r3, #2
 800773a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773c:	2300      	movs	r3, #0
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007740:	2300      	movs	r3, #0
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007744:	2301      	movs	r3, #1
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007748:	f107 031c 	add.w	r3, r7, #28
 800774c:	4619      	mov	r1, r3
 800774e:	484f      	ldr	r0, [pc, #316]	; (800788c <HAL_TIM_MspPostInit+0x198>)
 8007750:	f003 fc9a 	bl	800b088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007754:	e091      	b.n	800787a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a4d      	ldr	r2, [pc, #308]	; (8007890 <HAL_TIM_MspPostInit+0x19c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d11e      	bne.n	800779e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	4b48      	ldr	r3, [pc, #288]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	4a47      	ldr	r2, [pc, #284]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 800776a:	f043 0302 	orr.w	r3, r3, #2
 800776e:	6313      	str	r3, [r2, #48]	; 0x30
 8007770:	4b45      	ldr	r3, [pc, #276]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800777c:	2330      	movs	r3, #48	; 0x30
 800777e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007780:	2302      	movs	r3, #2
 8007782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	2300      	movs	r3, #0
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007788:	2300      	movs	r3, #0
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800778c:	2302      	movs	r3, #2
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007790:	f107 031c 	add.w	r3, r7, #28
 8007794:	4619      	mov	r1, r3
 8007796:	483f      	ldr	r0, [pc, #252]	; (8007894 <HAL_TIM_MspPostInit+0x1a0>)
 8007798:	f003 fc76 	bl	800b088 <HAL_GPIO_Init>
}
 800779c:	e06d      	b.n	800787a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a3d      	ldr	r2, [pc, #244]	; (8007898 <HAL_TIM_MspPostInit+0x1a4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d11f      	bne.n	80077e8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	4b36      	ldr	r3, [pc, #216]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	4a35      	ldr	r2, [pc, #212]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 80077b2:	f043 0308 	orr.w	r3, r3, #8
 80077b6:	6313      	str	r3, [r2, #48]	; 0x30
 80077b8:	4b33      	ldr	r3, [pc, #204]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80077c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80077c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ca:	2302      	movs	r3, #2
 80077cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d2:	2300      	movs	r3, #0
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80077d6:	2302      	movs	r3, #2
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077da:	f107 031c 	add.w	r3, r7, #28
 80077de:	4619      	mov	r1, r3
 80077e0:	482e      	ldr	r0, [pc, #184]	; (800789c <HAL_TIM_MspPostInit+0x1a8>)
 80077e2:	f003 fc51 	bl	800b088 <HAL_GPIO_Init>
}
 80077e6:	e048      	b.n	800787a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2c      	ldr	r2, [pc, #176]	; (80078a0 <HAL_TIM_MspPostInit+0x1ac>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d11f      	bne.n	8007832 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	4b24      	ldr	r3, [pc, #144]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	4a23      	ldr	r2, [pc, #140]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	6313      	str	r3, [r2, #48]	; 0x30
 8007802:	4b21      	ldr	r3, [pc, #132]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800780e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007814:	2302      	movs	r3, #2
 8007816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781c:	2300      	movs	r3, #0
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007820:	2303      	movs	r3, #3
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007824:	f107 031c 	add.w	r3, r7, #28
 8007828:	4619      	mov	r1, r3
 800782a:	481a      	ldr	r0, [pc, #104]	; (8007894 <HAL_TIM_MspPostInit+0x1a0>)
 800782c:	f003 fc2c 	bl	800b088 <HAL_GPIO_Init>
}
 8007830:	e023      	b.n	800787a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1b      	ldr	r2, [pc, #108]	; (80078a4 <HAL_TIM_MspPostInit+0x1b0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d11e      	bne.n	800787a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800783c:	2300      	movs	r3, #0
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	4a10      	ldr	r2, [pc, #64]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 8007846:	f043 0302 	orr.w	r3, r3, #2
 800784a:	6313      	str	r3, [r2, #48]	; 0x30
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <HAL_TIM_MspPostInit+0x194>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800785c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800785e:	2302      	movs	r3, #2
 8007860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007866:	2300      	movs	r3, #0
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800786a:	2303      	movs	r3, #3
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800786e:	f107 031c 	add.w	r3, r7, #28
 8007872:	4619      	mov	r1, r3
 8007874:	4807      	ldr	r0, [pc, #28]	; (8007894 <HAL_TIM_MspPostInit+0x1a0>)
 8007876:	f003 fc07 	bl	800b088 <HAL_GPIO_Init>
}
 800787a:	bf00      	nop
 800787c:	3730      	adds	r7, #48	; 0x30
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000
 8007888:	40023800 	.word	0x40023800
 800788c:	40021000 	.word	0x40021000
 8007890:	40000400 	.word	0x40000400
 8007894:	40020400 	.word	0x40020400
 8007898:	40000800 	.word	0x40000800
 800789c:	40020c00 	.word	0x40020c00
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800

080078a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	609a      	str	r2, [r3, #8]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <HAL_UART_MspInit+0x84>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d12b      	bne.n	8007922 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	4b18      	ldr	r3, [pc, #96]	; (8007930 <HAL_UART_MspInit+0x88>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	4a17      	ldr	r2, [pc, #92]	; (8007930 <HAL_UART_MspInit+0x88>)
 80078d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d8:	6413      	str	r3, [r2, #64]	; 0x40
 80078da:	4b15      	ldr	r3, [pc, #84]	; (8007930 <HAL_UART_MspInit+0x88>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <HAL_UART_MspInit+0x88>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <HAL_UART_MspInit+0x88>)
 80078f0:	f043 0308 	orr.w	r3, r3, #8
 80078f4:	6313      	str	r3, [r2, #48]	; 0x30
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_UART_MspInit+0x88>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007902:	2360      	movs	r3, #96	; 0x60
 8007904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007906:	2302      	movs	r3, #2
 8007908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790a:	2300      	movs	r3, #0
 800790c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800790e:	2303      	movs	r3, #3
 8007910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007912:	2307      	movs	r3, #7
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	4619      	mov	r1, r3
 800791c:	4805      	ldr	r0, [pc, #20]	; (8007934 <HAL_UART_MspInit+0x8c>)
 800791e:	f003 fbb3 	bl	800b088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007922:	bf00      	nop
 8007924:	3728      	adds	r7, #40	; 0x28
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40004400 	.word	0x40004400
 8007930:	40023800 	.word	0x40023800
 8007934:	40020c00 	.word	0x40020c00

08007938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800793c:	e7fe      	b.n	800793c <NMI_Handler+0x4>

0800793e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800793e:	b480      	push	{r7}
 8007940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007942:	e7fe      	b.n	8007942 <HardFault_Handler+0x4>

08007944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007948:	e7fe      	b.n	8007948 <MemManage_Handler+0x4>

0800794a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800794a:	b480      	push	{r7}
 800794c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800794e:	e7fe      	b.n	800794e <BusFault_Handler+0x4>

08007950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007954:	e7fe      	b.n	8007954 <UsageFault_Handler+0x4>

08007956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007956:	b480      	push	{r7}
 8007958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800795a:	bf00      	nop
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007972:	b480      	push	{r7}
 8007974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007976:	bf00      	nop
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007984:	f002 fa8c 	bl	8009ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007988:	bf00      	nop
 800798a:	bd80      	pop	{r7, pc}

0800798c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007990:	4803      	ldr	r0, [pc, #12]	; (80079a0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007992:	f007 fd5c 	bl	800f44e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007996:	4803      	ldr	r0, [pc, #12]	; (80079a4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007998:	f007 fd59 	bl	800f44e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2004470c 	.word	0x2004470c
 80079a4:	20044908 	.word	0x20044908

080079a8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80079ac:	4802      	ldr	r0, [pc, #8]	; (80079b8 <SDIO_IRQHandler+0x10>)
 80079ae:	f005 fdf5 	bl	800d59c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80079b2:	bf00      	nop
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20044a68 	.word	0x20044a68

080079bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80079c0:	4802      	ldr	r0, [pc, #8]	; (80079cc <TIM6_DAC_IRQHandler+0x10>)
 80079c2:	f007 fd44 	bl	800f44e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200449e8 	.word	0x200449e8

080079d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80079d4:	4802      	ldr	r0, [pc, #8]	; (80079e0 <TIM7_IRQHandler+0x10>)
 80079d6:	f007 fd3a 	bl	800f44e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20044b8c 	.word	0x20044b8c

080079e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80079e8:	4802      	ldr	r0, [pc, #8]	; (80079f4 <DMA2_Stream2_IRQHandler+0x10>)
 80079ea:	f003 f8d9 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20044b2c 	.word	0x20044b2c

080079f8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80079fc:	4802      	ldr	r0, [pc, #8]	; (8007a08 <DMA2_Stream3_IRQHandler+0x10>)
 80079fe:	f003 f8cf 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20044654 	.word	0x20044654

08007a0c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <DMA2_Stream6_IRQHandler+0x10>)
 8007a12:	f003 f8c5 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20044988 	.word	0x20044988

08007a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a28:	4a14      	ldr	r2, [pc, #80]	; (8007a7c <_sbrk+0x5c>)
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <_sbrk+0x60>)
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a34:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <_sbrk+0x64>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a3c:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <_sbrk+0x64>)
 8007a3e:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <_sbrk+0x68>)
 8007a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a42:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <_sbrk+0x64>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4413      	add	r3, r2
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d207      	bcs.n	8007a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a50:	f00d ff90 	bl	8015974 <__errno>
 8007a54:	4602      	mov	r2, r0
 8007a56:	230c      	movs	r3, #12
 8007a58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5e:	e009      	b.n	8007a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a60:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <_sbrk+0x64>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a66:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <_sbrk+0x64>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <_sbrk+0x64>)
 8007a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a72:	68fb      	ldr	r3, [r7, #12]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20050000 	.word	0x20050000
 8007a80:	00000800 	.word	0x00000800
 8007a84:	200002f8 	.word	0x200002f8
 8007a88:	20046ce0 	.word	0x20046ce0

08007a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a90:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <SystemInit+0x28>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <SystemInit+0x28>)
 8007a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <SystemInit+0x28>)
 8007aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8007aa8:	bf00      	nop
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	e000ed00 	.word	0xe000ed00

08007ab8 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007ab8:	b598      	push	{r3, r4, r7, lr}
 8007aba:	af00      	add	r7, sp, #0
	lcd_init();
 8007abc:	f7f9 faac 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007ac0:	483b      	ldr	r0, [pc, #236]	; (8007bb0 <cppInit+0xf8>)
 8007ac2:	f7fd fc93 	bl	80053ec <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007ac6:	2064      	movs	r0, #100	; 0x64
 8007ac8:	f002 fa0a 	bl	8009ee0 <HAL_Delay>
	power_sensor.updateValues();
 8007acc:	4838      	ldr	r0, [pc, #224]	; (8007bb0 <cppInit+0xf8>)
 8007ace:	f7fd fc9b 	bl	8005408 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007ad2:	f7f9 fae5 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7f9 faf1 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007ade:	4835      	ldr	r0, [pc, #212]	; (8007bb4 <cppInit+0xfc>)
 8007ae0:	f7f9 fb18 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f7f9 faea 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007aec:	4830      	ldr	r0, [pc, #192]	; (8007bb0 <cppInit+0xf8>)
 8007aee:	f7fd fcb5 	bl	800545c <_ZN11PowerSensor17getButteryVoltageEv>
 8007af2:	ee10 3a10 	vmov	r3, s0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fd3e 	bl	8000578 <__aeabi_f2d>
 8007afc:	4603      	mov	r3, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	461a      	mov	r2, r3
 8007b02:	4623      	mov	r3, r4
 8007b04:	482c      	ldr	r0, [pc, #176]	; (8007bb8 <cppInit+0x100>)
 8007b06:	f7f9 fb05 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b0e:	f002 f9e7 	bl	8009ee0 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007b12:	482a      	ldr	r0, [pc, #168]	; (8007bbc <cppInit+0x104>)
 8007b14:	f7fc fe1c 	bl	8004750 <_ZN6Logger10sdCardInitEv>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <cppInit+0x76>
		led.fullColor('G');
 8007b1e:	2147      	movs	r1, #71	; 0x47
 8007b20:	4827      	ldr	r0, [pc, #156]	; (8007bc0 <cppInit+0x108>)
 8007b22:	f7fa fb87 	bl	8002234 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007b26:	2064      	movs	r0, #100	; 0x64
 8007b28:	f002 f9da 	bl	8009ee0 <HAL_Delay>
 8007b2c:	e006      	b.n	8007b3c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007b2e:	2152      	movs	r1, #82	; 0x52
 8007b30:	4823      	ldr	r0, [pc, #140]	; (8007bc0 <cppInit+0x108>)
 8007b32:	f7fa fb7f 	bl	8002234 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007b36:	2064      	movs	r0, #100	; 0x64
 8007b38:	f002 f9d2 	bl	8009ee0 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007b3c:	4821      	ldr	r0, [pc, #132]	; (8007bc4 <cppInit+0x10c>)
 8007b3e:	f7fa fcd5 	bl	80024ec <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007b42:	4821      	ldr	r0, [pc, #132]	; (8007bc8 <cppInit+0x110>)
 8007b44:	f7fd f90a 	bl	8004d5c <_ZN5Motor4initEv>
	encoder.init();
 8007b48:	4820      	ldr	r0, [pc, #128]	; (8007bcc <cppInit+0x114>)
 8007b4a:	f7f9 fc6b 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007b4e:	4820      	ldr	r0, [pc, #128]	; (8007bd0 <cppInit+0x118>)
 8007b50:	f7fa f91e 	bl	8001d90 <_ZN3IMU4initEv>
	line_trace.init();
 8007b54:	481f      	ldr	r0, [pc, #124]	; (8007bd4 <cppInit+0x11c>)
 8007b56:	f7fb ff2f 	bl	80039b8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007b5a:	481a      	ldr	r0, [pc, #104]	; (8007bc4 <cppInit+0x10c>)
 8007b5c:	f7fa fe2e 	bl	80027bc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b64:	f002 f9bc 	bl	8009ee0 <HAL_Delay>

	led.fullColor('M');
 8007b68:	214d      	movs	r1, #77	; 0x4d
 8007b6a:	4815      	ldr	r0, [pc, #84]	; (8007bc0 <cppInit+0x108>)
 8007b6c:	f7fa fb62 	bl	8002234 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007b70:	4817      	ldr	r0, [pc, #92]	; (8007bd0 <cppInit+0x118>)
 8007b72:	f7fa f9e7 	bl	8001f44 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007b76:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007bd8 <cppInit+0x120>
 8007b7a:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007bdc <cppInit+0x124>
 8007b7e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007be0 <cppInit+0x128>
 8007b82:	4818      	ldr	r0, [pc, #96]	; (8007be4 <cppInit+0x12c>)
 8007b84:	f7fe f9cc 	bl	8005f20 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007b88:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007be8 <cppInit+0x130>
 8007b8c:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007bec <cppInit+0x134>
 8007b90:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007bf0 <cppInit+0x138>
 8007b94:	4813      	ldr	r0, [pc, #76]	; (8007be4 <cppInit+0x12c>)
 8007b96:	f7fe f9dc 	bl	8005f52 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007b9a:	4816      	ldr	r0, [pc, #88]	; (8007bf4 <cppInit+0x13c>)
 8007b9c:	f7fd fb30 	bl	8005200 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007ba0:	4815      	ldr	r0, [pc, #84]	; (8007bf8 <cppInit+0x140>)
 8007ba2:	f7fd fbc7 	bl	8005334 <_ZN13PathFollowing4initEv>

	esc.init();
 8007ba6:	4815      	ldr	r0, [pc, #84]	; (8007bfc <cppInit+0x144>)
 8007ba8:	f7f9 fb20 	bl	80011ec <_ZN3ESC4initEv>

}
 8007bac:	bf00      	nop
 8007bae:	bd98      	pop	{r3, r4, r7, pc}
 8007bb0:	20000610 	.word	0x20000610
 8007bb4:	08019fac 	.word	0x08019fac
 8007bb8:	08019fb4 	.word	0x08019fb4
 8007bbc:	20000630 	.word	0x20000630
 8007bc0:	2000060c 	.word	0x2000060c
 8007bc4:	200002fc 	.word	0x200002fc
 8007bc8:	20000608 	.word	0x20000608
 8007bcc:	2001dafc 	.word	0x2001dafc
 8007bd0:	2000061c 	.word	0x2000061c
 8007bd4:	2001db9c 	.word	0x2001db9c
 8007bd8:	3a8439b6 	.word	0x3a8439b6
 8007bdc:	40d1a29c 	.word	0x40d1a29c
 8007be0:	3f81f8a1 	.word	0x3f81f8a1
 8007be4:	2001db1c 	.word	0x2001db1c
 8007be8:	00000000 	.word	0x00000000
 8007bec:	3f5e3fbc 	.word	0x3f5e3fbc
 8007bf0:	3d75c28f 	.word	0x3d75c28f
 8007bf4:	2001db58 	.word	0x2001db58
 8007bf8:	2002ab50 	.word	0x2002ab50
 8007bfc:	2001db98 	.word	0x2001db98

08007c00 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007c04:	4819      	ldr	r0, [pc, #100]	; (8007c6c <cppFlip1ms+0x6c>)
 8007c06:	f7fa fccf 	bl	80025a8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007c0a:	4819      	ldr	r0, [pc, #100]	; (8007c70 <cppFlip1ms+0x70>)
 8007c0c:	f7fa f8e8 	bl	8001de0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007c10:	4818      	ldr	r0, [pc, #96]	; (8007c74 <cppFlip1ms+0x74>)
 8007c12:	f7f9 fc29 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007c16:	4818      	ldr	r0, [pc, #96]	; (8007c78 <cppFlip1ms+0x78>)
 8007c18:	f7fc f974 	bl	8003f04 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007c1c:	4817      	ldr	r0, [pc, #92]	; (8007c7c <cppFlip1ms+0x7c>)
 8007c1e:	f7fe f9b1 	bl	8005f84 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007c22:	4817      	ldr	r0, [pc, #92]	; (8007c80 <cppFlip1ms+0x80>)
 8007c24:	f7fd fad0 	bl	80051c8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007c28:	4816      	ldr	r0, [pc, #88]	; (8007c84 <cppFlip1ms+0x84>)
 8007c2a:	f7fd fc93 	bl	8005554 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007c2e:	4816      	ldr	r0, [pc, #88]	; (8007c88 <cppFlip1ms+0x88>)
 8007c30:	f7fd f8a6 	bl	8004d80 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007c34:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <cppFlip1ms+0x8c>)
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <cppFlip1ms+0x8c>)
 8007c3e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007c40:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <cppFlip1ms+0x8c>)
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d90c      	bls.n	8007c62 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(velocity_ctrl.getCurrentVelocity());
 8007c48:	480c      	ldr	r0, [pc, #48]	; (8007c7c <cppFlip1ms+0x7c>)
 8007c4a:	f7fe f9dd 	bl	8006008 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007c4e:	eef0 7a40 	vmov.f32	s15, s0
 8007c52:	eeb0 0a67 	vmov.f32	s0, s15
 8007c56:	480e      	ldr	r0, [pc, #56]	; (8007c90 <cppFlip1ms+0x90>)
 8007c58:	f7fd ff94 	bl	8005b84 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <cppFlip1ms+0x8c>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007c62:	4804      	ldr	r0, [pc, #16]	; (8007c74 <cppFlip1ms+0x74>)
 8007c64:	f7f9 fcea 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007c68:	bf00      	nop
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	200002fc 	.word	0x200002fc
 8007c70:	2000061c 	.word	0x2000061c
 8007c74:	2001dafc 	.word	0x2001dafc
 8007c78:	2001db9c 	.word	0x2001db9c
 8007c7c:	2001db1c 	.word	0x2001db1c
 8007c80:	2001db58 	.word	0x2001db58
 8007c84:	200005f4 	.word	0x200005f4
 8007c88:	20000608 	.word	0x20000608
 8007c8c:	20042278 	.word	0x20042278
 8007c90:	2002a944 	.word	0x2002a944

08007c94 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007c98:	4802      	ldr	r0, [pc, #8]	; (8007ca4 <cppFlip100ns+0x10>)
 8007c9a:	f7fa fc37 	bl	800250c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200002fc 	.word	0x200002fc

08007ca8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <cppFlip10ms+0x48>)
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <cppFlip10ms+0x48>)
 8007cb6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <cppFlip10ms+0x48>)
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	2b10      	cmp	r3, #16
 8007cbe:	d905      	bls.n	8007ccc <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007cc0:	480c      	ldr	r0, [pc, #48]	; (8007cf4 <cppFlip10ms+0x4c>)
 8007cc2:	f7fd ff7f 	bl	8005bc4 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <cppFlip10ms+0x48>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007ccc:	480a      	ldr	r0, [pc, #40]	; (8007cf8 <cppFlip10ms+0x50>)
 8007cce:	f7fd f919 	bl	8004f04 <_ZN5Motor20getLeftCounterPeriodEv>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4809      	ldr	r0, [pc, #36]	; (8007cfc <cppFlip10ms+0x54>)
 8007cd8:	f7fc fdf2 	bl	80048c0 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007cdc:	4806      	ldr	r0, [pc, #24]	; (8007cf8 <cppFlip10ms+0x50>)
 8007cde:	f7fd f91e 	bl	8004f1e <_ZN5Motor21getRightCounterPeriodEv>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4805      	ldr	r0, [pc, #20]	; (8007cfc <cppFlip10ms+0x54>)
 8007ce8:	f7fc fe23 	bl	8004932 <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2004227a 	.word	0x2004227a
 8007cf4:	2002a944 	.word	0x2002a944
 8007cf8:	20000608 	.word	0x20000608
 8007cfc:	20000630 	.word	0x20000630

08007d00 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007d06:	4baf      	ldr	r3, [pc, #700]	; (8007fc4 <cppLoop+0x2c4>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f3bf 8f5b 	dmb	ish
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d015      	beq.n	8007d4e <cppLoop+0x4e>
 8007d22:	48a8      	ldr	r0, [pc, #672]	; (8007fc4 <cppLoop+0x2c4>)
 8007d24:	f00c fdc1 	bl	80148aa <__cxa_guard_acquire>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bf14      	ite	ne
 8007d2e:	2301      	movne	r3, #1
 8007d30:	2300      	moveq	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <cppLoop+0x4e>
 8007d38:	48a3      	ldr	r0, [pc, #652]	; (8007fc8 <cppLoop+0x2c8>)
 8007d3a:	f7fb ff44 	bl	8003bc6 <_ZN9LineTrace5getKpEv>
 8007d3e:	eef0 7a40 	vmov.f32	s15, s0
 8007d42:	4ba2      	ldr	r3, [pc, #648]	; (8007fcc <cppLoop+0x2cc>)
 8007d44:	edc3 7a00 	vstr	s15, [r3]
 8007d48:	489e      	ldr	r0, [pc, #632]	; (8007fc4 <cppLoop+0x2c4>)
 8007d4a:	f00c fdba 	bl	80148c2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007d4e:	4ba0      	ldr	r3, [pc, #640]	; (8007fd0 <cppLoop+0x2d0>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f3bf 8f5b 	dmb	ish
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d015      	beq.n	8007d96 <cppLoop+0x96>
 8007d6a:	4899      	ldr	r0, [pc, #612]	; (8007fd0 <cppLoop+0x2d0>)
 8007d6c:	f00c fd9d 	bl	80148aa <__cxa_guard_acquire>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bf14      	ite	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	2300      	moveq	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <cppLoop+0x96>
 8007d80:	4891      	ldr	r0, [pc, #580]	; (8007fc8 <cppLoop+0x2c8>)
 8007d82:	f7fb ff2f 	bl	8003be4 <_ZN9LineTrace5getKiEv>
 8007d86:	eef0 7a40 	vmov.f32	s15, s0
 8007d8a:	4b92      	ldr	r3, [pc, #584]	; (8007fd4 <cppLoop+0x2d4>)
 8007d8c:	edc3 7a00 	vstr	s15, [r3]
 8007d90:	488f      	ldr	r0, [pc, #572]	; (8007fd0 <cppLoop+0x2d0>)
 8007d92:	f00c fd96 	bl	80148c2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007d96:	4b90      	ldr	r3, [pc, #576]	; (8007fd8 <cppLoop+0x2d8>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f3bf 8f5b 	dmb	ish
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d015      	beq.n	8007dde <cppLoop+0xde>
 8007db2:	4889      	ldr	r0, [pc, #548]	; (8007fd8 <cppLoop+0x2d8>)
 8007db4:	f00c fd79 	bl	80148aa <__cxa_guard_acquire>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bf14      	ite	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <cppLoop+0xde>
 8007dc8:	487f      	ldr	r0, [pc, #508]	; (8007fc8 <cppLoop+0x2c8>)
 8007dca:	f7fb ff1a 	bl	8003c02 <_ZN9LineTrace5getKdEv>
 8007dce:	eef0 7a40 	vmov.f32	s15, s0
 8007dd2:	4b82      	ldr	r3, [pc, #520]	; (8007fdc <cppLoop+0x2dc>)
 8007dd4:	edc3 7a00 	vstr	s15, [r3]
 8007dd8:	487f      	ldr	r0, [pc, #508]	; (8007fd8 <cppLoop+0x2d8>)
 8007dda:	f00c fd72 	bl	80148c2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007dde:	4b80      	ldr	r3, [pc, #512]	; (8007fe0 <cppLoop+0x2e0>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f3bf 8f5b 	dmb	ish
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d015      	beq.n	8007e26 <cppLoop+0x126>
 8007dfa:	4879      	ldr	r0, [pc, #484]	; (8007fe0 <cppLoop+0x2e0>)
 8007dfc:	f00c fd55 	bl	80148aa <__cxa_guard_acquire>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <cppLoop+0x126>
 8007e10:	486d      	ldr	r0, [pc, #436]	; (8007fc8 <cppLoop+0x2c8>)
 8007e12:	f7fb ff1e 	bl	8003c52 <_ZN9LineTrace9getKpSlowEv>
 8007e16:	eef0 7a40 	vmov.f32	s15, s0
 8007e1a:	4b72      	ldr	r3, [pc, #456]	; (8007fe4 <cppLoop+0x2e4>)
 8007e1c:	edc3 7a00 	vstr	s15, [r3]
 8007e20:	486f      	ldr	r0, [pc, #444]	; (8007fe0 <cppLoop+0x2e0>)
 8007e22:	f00c fd4e 	bl	80148c2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007e26:	4b70      	ldr	r3, [pc, #448]	; (8007fe8 <cppLoop+0x2e8>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f3bf 8f5b 	dmb	ish
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bf0c      	ite	eq
 8007e38:	2301      	moveq	r3, #1
 8007e3a:	2300      	movne	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d015      	beq.n	8007e6e <cppLoop+0x16e>
 8007e42:	4869      	ldr	r0, [pc, #420]	; (8007fe8 <cppLoop+0x2e8>)
 8007e44:	f00c fd31 	bl	80148aa <__cxa_guard_acquire>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	2300      	moveq	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <cppLoop+0x16e>
 8007e58:	485b      	ldr	r0, [pc, #364]	; (8007fc8 <cppLoop+0x2c8>)
 8007e5a:	f7fb ff09 	bl	8003c70 <_ZN9LineTrace9getKiSlowEv>
 8007e5e:	eef0 7a40 	vmov.f32	s15, s0
 8007e62:	4b62      	ldr	r3, [pc, #392]	; (8007fec <cppLoop+0x2ec>)
 8007e64:	edc3 7a00 	vstr	s15, [r3]
 8007e68:	485f      	ldr	r0, [pc, #380]	; (8007fe8 <cppLoop+0x2e8>)
 8007e6a:	f00c fd2a 	bl	80148c2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007e6e:	4b60      	ldr	r3, [pc, #384]	; (8007ff0 <cppLoop+0x2f0>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f3bf 8f5b 	dmb	ish
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d015      	beq.n	8007eb6 <cppLoop+0x1b6>
 8007e8a:	4859      	ldr	r0, [pc, #356]	; (8007ff0 <cppLoop+0x2f0>)
 8007e8c:	f00c fd0d 	bl	80148aa <__cxa_guard_acquire>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <cppLoop+0x1b6>
 8007ea0:	4849      	ldr	r0, [pc, #292]	; (8007fc8 <cppLoop+0x2c8>)
 8007ea2:	f7fb fef4 	bl	8003c8e <_ZN9LineTrace9getKdSlowEv>
 8007ea6:	eef0 7a40 	vmov.f32	s15, s0
 8007eaa:	4b52      	ldr	r3, [pc, #328]	; (8007ff4 <cppLoop+0x2f4>)
 8007eac:	edc3 7a00 	vstr	s15, [r3]
 8007eb0:	484f      	ldr	r0, [pc, #316]	; (8007ff0 <cppLoop+0x2f0>)
 8007eb2:	f00c fd06 	bl	80148c2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007eb6:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <cppLoop+0x2f8>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f3bf 8f5b 	dmb	ish
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d015      	beq.n	8007efe <cppLoop+0x1fe>
 8007ed2:	4849      	ldr	r0, [pc, #292]	; (8007ff8 <cppLoop+0x2f8>)
 8007ed4:	f00c fce9 	bl	80148aa <__cxa_guard_acquire>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	bf14      	ite	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	2300      	moveq	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <cppLoop+0x1fe>
 8007ee8:	4837      	ldr	r0, [pc, #220]	; (8007fc8 <cppLoop+0x2c8>)
 8007eea:	f7fb ff3e 	bl	8003d6a <_ZN9LineTrace17getTargetVelocityEv>
 8007eee:	eef0 7a40 	vmov.f32	s15, s0
 8007ef2:	4b42      	ldr	r3, [pc, #264]	; (8007ffc <cppLoop+0x2fc>)
 8007ef4:	edc3 7a00 	vstr	s15, [r3]
 8007ef8:	483f      	ldr	r0, [pc, #252]	; (8007ff8 <cppLoop+0x2f8>)
 8007efa:	f00c fce2 	bl	80148c2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007efe:	4b40      	ldr	r3, [pc, #256]	; (8008000 <cppLoop+0x300>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f3bf 8f5b 	dmb	ish
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d015      	beq.n	8007f46 <cppLoop+0x246>
 8007f1a:	4839      	ldr	r0, [pc, #228]	; (8008000 <cppLoop+0x300>)
 8007f1c:	f00c fcc5 	bl	80148aa <__cxa_guard_acquire>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bf14      	ite	ne
 8007f26:	2301      	movne	r3, #1
 8007f28:	2300      	moveq	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <cppLoop+0x246>
 8007f30:	4825      	ldr	r0, [pc, #148]	; (8007fc8 <cppLoop+0x2c8>)
 8007f32:	f7fb ff2a 	bl	8003d8a <_ZN9LineTrace14getMaxVelocityEv>
 8007f36:	eef0 7a40 	vmov.f32	s15, s0
 8007f3a:	4b32      	ldr	r3, [pc, #200]	; (8008004 <cppLoop+0x304>)
 8007f3c:	edc3 7a00 	vstr	s15, [r3]
 8007f40:	482f      	ldr	r0, [pc, #188]	; (8008000 <cppLoop+0x300>)
 8007f42:	f00c fcbe 	bl	80148c2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007f46:	4b30      	ldr	r3, [pc, #192]	; (8008008 <cppLoop+0x308>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f3bf 8f5b 	dmb	ish
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d015      	beq.n	8007f8e <cppLoop+0x28e>
 8007f62:	4829      	ldr	r0, [pc, #164]	; (8008008 <cppLoop+0x308>)
 8007f64:	f00c fca1 	bl	80148aa <__cxa_guard_acquire>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <cppLoop+0x28e>
 8007f78:	4813      	ldr	r0, [pc, #76]	; (8007fc8 <cppLoop+0x2c8>)
 8007f7a:	f7fb ff16 	bl	8003daa <_ZN9LineTrace15getMaxVelocity2Ev>
 8007f7e:	eef0 7a40 	vmov.f32	s15, s0
 8007f82:	4b22      	ldr	r3, [pc, #136]	; (800800c <cppLoop+0x30c>)
 8007f84:	edc3 7a00 	vstr	s15, [r3]
 8007f88:	481f      	ldr	r0, [pc, #124]	; (8008008 <cppLoop+0x308>)
 8007f8a:	f00c fc9a 	bl	80148c2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007f8e:	4b20      	ldr	r3, [pc, #128]	; (8008010 <cppLoop+0x310>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	f3bf 8f5b 	dmb	ish
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d03f      	beq.n	800802a <cppLoop+0x32a>
 8007faa:	4819      	ldr	r0, [pc, #100]	; (8008010 <cppLoop+0x310>)
 8007fac:	f00c fc7d 	bl	80148aa <__cxa_guard_acquire>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d034      	beq.n	800802a <cppLoop+0x32a>
 8007fc0:	e028      	b.n	8008014 <cppLoop+0x314>
 8007fc2:	bf00      	nop
 8007fc4:	2004228c 	.word	0x2004228c
 8007fc8:	2001db9c 	.word	0x2001db9c
 8007fcc:	20042288 	.word	0x20042288
 8007fd0:	20042294 	.word	0x20042294
 8007fd4:	20042290 	.word	0x20042290
 8007fd8:	2004229c 	.word	0x2004229c
 8007fdc:	20042298 	.word	0x20042298
 8007fe0:	200422a4 	.word	0x200422a4
 8007fe4:	200422a0 	.word	0x200422a0
 8007fe8:	200422ac 	.word	0x200422ac
 8007fec:	200422a8 	.word	0x200422a8
 8007ff0:	200422b4 	.word	0x200422b4
 8007ff4:	200422b0 	.word	0x200422b0
 8007ff8:	200422bc 	.word	0x200422bc
 8007ffc:	200422b8 	.word	0x200422b8
 8008000:	200422c4 	.word	0x200422c4
 8008004:	200422c0 	.word	0x200422c0
 8008008:	200422cc 	.word	0x200422cc
 800800c:	200422c8 	.word	0x200422c8
 8008010:	200422d4 	.word	0x200422d4
 8008014:	48af      	ldr	r0, [pc, #700]	; (80082d4 <cppLoop+0x5d4>)
 8008016:	f7fb fed8 	bl	8003dca <_ZN9LineTrace14getMinVelocityEv>
 800801a:	eef0 7a40 	vmov.f32	s15, s0
 800801e:	4bae      	ldr	r3, [pc, #696]	; (80082d8 <cppLoop+0x5d8>)
 8008020:	edc3 7a00 	vstr	s15, [r3]
 8008024:	48ad      	ldr	r0, [pc, #692]	; (80082dc <cppLoop+0x5dc>)
 8008026:	f00c fc4c 	bl	80148c2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800802a:	4bad      	ldr	r3, [pc, #692]	; (80082e0 <cppLoop+0x5e0>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f3bf 8f5b 	dmb	ish
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d015      	beq.n	8008072 <cppLoop+0x372>
 8008046:	48a6      	ldr	r0, [pc, #664]	; (80082e0 <cppLoop+0x5e0>)
 8008048:	f00c fc2f 	bl	80148aa <__cxa_guard_acquire>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	bf14      	ite	ne
 8008052:	2301      	movne	r3, #1
 8008054:	2300      	moveq	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <cppLoop+0x372>
 800805c:	489d      	ldr	r0, [pc, #628]	; (80082d4 <cppLoop+0x5d4>)
 800805e:	f7fb fec4 	bl	8003dea <_ZN9LineTrace15getMinVelocity2Ev>
 8008062:	eef0 7a40 	vmov.f32	s15, s0
 8008066:	4b9f      	ldr	r3, [pc, #636]	; (80082e4 <cppLoop+0x5e4>)
 8008068:	edc3 7a00 	vstr	s15, [r3]
 800806c:	489c      	ldr	r0, [pc, #624]	; (80082e0 <cppLoop+0x5e0>)
 800806e:	f00c fc28 	bl	80148c2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8008072:	4b9d      	ldr	r3, [pc, #628]	; (80082e8 <cppLoop+0x5e8>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f3bf 8f5b 	dmb	ish
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <cppLoop+0x3ba>
 800808e:	4896      	ldr	r0, [pc, #600]	; (80082e8 <cppLoop+0x5e8>)
 8008090:	f00c fc0b 	bl	80148aa <__cxa_guard_acquire>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <cppLoop+0x3ba>
 80080a4:	488b      	ldr	r0, [pc, #556]	; (80082d4 <cppLoop+0x5d4>)
 80080a6:	f7fb fee4 	bl	8003e72 <_ZN9LineTrace9getMaxAccEv>
 80080aa:	eef0 7a40 	vmov.f32	s15, s0
 80080ae:	4b8f      	ldr	r3, [pc, #572]	; (80082ec <cppLoop+0x5ec>)
 80080b0:	edc3 7a00 	vstr	s15, [r3]
 80080b4:	488c      	ldr	r0, [pc, #560]	; (80082e8 <cppLoop+0x5e8>)
 80080b6:	f00c fc04 	bl	80148c2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80080ba:	4b8d      	ldr	r3, [pc, #564]	; (80082f0 <cppLoop+0x5f0>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f3bf 8f5b 	dmb	ish
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bf0c      	ite	eq
 80080cc:	2301      	moveq	r3, #1
 80080ce:	2300      	movne	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d015      	beq.n	8008102 <cppLoop+0x402>
 80080d6:	4886      	ldr	r0, [pc, #536]	; (80082f0 <cppLoop+0x5f0>)
 80080d8:	f00c fbe7 	bl	80148aa <__cxa_guard_acquire>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bf14      	ite	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	2300      	moveq	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <cppLoop+0x402>
 80080ec:	4879      	ldr	r0, [pc, #484]	; (80082d4 <cppLoop+0x5d4>)
 80080ee:	f7fb fef6 	bl	8003ede <_ZN9LineTrace9getMaxDecEv>
 80080f2:	eef0 7a40 	vmov.f32	s15, s0
 80080f6:	4b7f      	ldr	r3, [pc, #508]	; (80082f4 <cppLoop+0x5f4>)
 80080f8:	edc3 7a00 	vstr	s15, [r3]
 80080fc:	487c      	ldr	r0, [pc, #496]	; (80082f0 <cppLoop+0x5f0>)
 80080fe:	f00c fbe0 	bl	80148c2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8008102:	4b7d      	ldr	r3, [pc, #500]	; (80082f8 <cppLoop+0x5f8>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	f3bf 8f5b 	dmb	ish
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d015      	beq.n	800814a <cppLoop+0x44a>
 800811e:	4876      	ldr	r0, [pc, #472]	; (80082f8 <cppLoop+0x5f8>)
 8008120:	f00c fbc3 	bl	80148aa <__cxa_guard_acquire>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	bf14      	ite	ne
 800812a:	2301      	movne	r3, #1
 800812c:	2300      	moveq	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <cppLoop+0x44a>
 8008134:	4867      	ldr	r0, [pc, #412]	; (80082d4 <cppLoop+0x5d4>)
 8008136:	f7fb fec0 	bl	8003eba <_ZN9LineTrace10getMaxAcc2Ev>
 800813a:	eef0 7a40 	vmov.f32	s15, s0
 800813e:	4b6f      	ldr	r3, [pc, #444]	; (80082fc <cppLoop+0x5fc>)
 8008140:	edc3 7a00 	vstr	s15, [r3]
 8008144:	486c      	ldr	r0, [pc, #432]	; (80082f8 <cppLoop+0x5f8>)
 8008146:	f00c fbbc 	bl	80148c2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 800814a:	4b6d      	ldr	r3, [pc, #436]	; (8008300 <cppLoop+0x600>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f3bf 8f5b 	dmb	ish
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d015      	beq.n	8008192 <cppLoop+0x492>
 8008166:	4866      	ldr	r0, [pc, #408]	; (8008300 <cppLoop+0x600>)
 8008168:	f00c fb9f 	bl	80148aa <__cxa_guard_acquire>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf14      	ite	ne
 8008172:	2301      	movne	r3, #1
 8008174:	2300      	moveq	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <cppLoop+0x492>
 800817c:	4855      	ldr	r0, [pc, #340]	; (80082d4 <cppLoop+0x5d4>)
 800817e:	f7fb fe8a 	bl	8003e96 <_ZN9LineTrace10getMaxDec2Ev>
 8008182:	eef0 7a40 	vmov.f32	s15, s0
 8008186:	4b5f      	ldr	r3, [pc, #380]	; (8008304 <cppLoop+0x604>)
 8008188:	edc3 7a00 	vstr	s15, [r3]
 800818c:	485c      	ldr	r0, [pc, #368]	; (8008300 <cppLoop+0x600>)
 800818e:	f00c fb98 	bl	80148c2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8008192:	485d      	ldr	r0, [pc, #372]	; (8008308 <cppLoop+0x608>)
 8008194:	f7fd f972 	bl	800547c <_ZN12RotarySwitch8getValueEv>
 8008198:	4603      	mov	r3, r0
 800819a:	2b0f      	cmp	r3, #15
 800819c:	f201 8556 	bhi.w	8009c4c <cppLoop+0x1f4c>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <cppLoop+0x4a8>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081e9 	.word	0x080081e9
 80081ac:	08008551 	.word	0x08008551
 80081b0:	08008671 	.word	0x08008671
 80081b4:	080087c3 	.word	0x080087c3
 80081b8:	080088bb 	.word	0x080088bb
 80081bc:	08008b51 	.word	0x08008b51
 80081c0:	08008c89 	.word	0x08008c89
 80081c4:	08008f0d 	.word	0x08008f0d
 80081c8:	08009157 	.word	0x08009157
 80081cc:	080093e7 	.word	0x080093e7
 80081d0:	080094a3 	.word	0x080094a3
 80081d4:	08009599 	.word	0x08009599
 80081d8:	0800961f 	.word	0x0800961f
 80081dc:	080096e5 	.word	0x080096e5
 80081e0:	080097c9 	.word	0x080097c9
 80081e4:	08009901 	.word	0x08009901
	case 0:
		led.fullColor('W');
 80081e8:	2157      	movs	r1, #87	; 0x57
 80081ea:	4848      	ldr	r0, [pc, #288]	; (800830c <cppLoop+0x60c>)
 80081ec:	f7fa f822 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80081f0:	f7f8 ff56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081f4:	2100      	movs	r1, #0
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 ff62 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", line_trace.getKpSlow()*1000);
 80081fc:	4835      	ldr	r0, [pc, #212]	; (80082d4 <cppLoop+0x5d4>)
 80081fe:	f7fb fd28 	bl	8003c52 <_ZN9LineTrace9getKpSlowEv>
 8008202:	eeb0 7a40 	vmov.f32	s14, s0
 8008206:	eddf 7a42 	vldr	s15, [pc, #264]	; 8008310 <cppLoop+0x610>
 800820a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820e:	ee17 0a90 	vmov	r0, s15
 8008212:	f7f8 f9b1 	bl	8000578 <__aeabi_f2d>
 8008216:	4603      	mov	r3, r0
 8008218:	460c      	mov	r4, r1
 800821a:	461a      	mov	r2, r3
 800821c:	4623      	mov	r3, r4
 800821e:	483d      	ldr	r0, [pc, #244]	; (8008314 <cppLoop+0x614>)
 8008220:	f7f8 ff78 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008224:	2101      	movs	r1, #1
 8008226:	2000      	movs	r0, #0
 8008228:	f7f8 ff4a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiSlow()*100, line_trace.getKdSlow()*10000);
 800822c:	4829      	ldr	r0, [pc, #164]	; (80082d4 <cppLoop+0x5d4>)
 800822e:	f7fb fd1f 	bl	8003c70 <_ZN9LineTrace9getKiSlowEv>
 8008232:	eeb0 7a40 	vmov.f32	s14, s0
 8008236:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008318 <cppLoop+0x618>
 800823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823e:	ee17 0a90 	vmov	r0, s15
 8008242:	f7f8 f999 	bl	8000578 <__aeabi_f2d>
 8008246:	4605      	mov	r5, r0
 8008248:	460e      	mov	r6, r1
 800824a:	4822      	ldr	r0, [pc, #136]	; (80082d4 <cppLoop+0x5d4>)
 800824c:	f7fb fd1f 	bl	8003c8e <_ZN9LineTrace9getKdSlowEv>
 8008250:	eeb0 7a40 	vmov.f32	s14, s0
 8008254:	eddf 7a31 	vldr	s15, [pc, #196]	; 800831c <cppLoop+0x61c>
 8008258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825c:	ee17 0a90 	vmov	r0, s15
 8008260:	f7f8 f98a 	bl	8000578 <__aeabi_f2d>
 8008264:	4603      	mov	r3, r0
 8008266:	460c      	mov	r4, r1
 8008268:	e9cd 3400 	strd	r3, r4, [sp]
 800826c:	462a      	mov	r2, r5
 800826e:	4633      	mov	r3, r6
 8008270:	482b      	ldr	r0, [pc, #172]	; (8008320 <cppLoop+0x620>)
 8008272:	f7f8 ff4f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008276:	482b      	ldr	r0, [pc, #172]	; (8008324 <cppLoop+0x624>)
 8008278:	f7f9 ff78 	bl	800216c <_ZN8JoyStick8getValueEv>
 800827c:	4603      	mov	r3, r0
 800827e:	2b08      	cmp	r3, #8
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d04f      	beq.n	800832c <cppLoop+0x62c>
			led.LR(-1, 1);
 800828c:	2201      	movs	r2, #1
 800828e:	f04f 31ff 	mov.w	r1, #4294967295
 8008292:	481e      	ldr	r0, [pc, #120]	; (800830c <cppLoop+0x60c>)
 8008294:	f7fa f88a 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008298:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800829c:	f001 fe20 	bl	8009ee0 <HAL_Delay>

			selector++;
 80082a0:	4b21      	ldr	r3, [pc, #132]	; (8008328 <cppLoop+0x628>)
 80082a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	3301      	adds	r3, #1
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	b21a      	sxth	r2, r3
 80082ae:	4b1e      	ldr	r3, [pc, #120]	; (8008328 <cppLoop+0x628>)
 80082b0:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80082b2:	4b1d      	ldr	r3, [pc, #116]	; (8008328 <cppLoop+0x628>)
 80082b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	dd02      	ble.n	80082c2 <cppLoop+0x5c2>
 80082bc:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <cppLoop+0x628>)
 80082be:	2200      	movs	r2, #0
 80082c0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80082c2:	2200      	movs	r2, #0
 80082c4:	f04f 31ff 	mov.w	r1, #4294967295
 80082c8:	4810      	ldr	r0, [pc, #64]	; (800830c <cppLoop+0x60c>)
 80082ca:	f7fa f86f 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 80082ce:	f001 bcbf 	b.w	8009c50 <cppLoop+0x1f50>
 80082d2:	bf00      	nop
 80082d4:	2001db9c 	.word	0x2001db9c
 80082d8:	200422d0 	.word	0x200422d0
 80082dc:	200422d4 	.word	0x200422d4
 80082e0:	200422dc 	.word	0x200422dc
 80082e4:	200422d8 	.word	0x200422d8
 80082e8:	200422e4 	.word	0x200422e4
 80082ec:	200422e0 	.word	0x200422e0
 80082f0:	200422ec 	.word	0x200422ec
 80082f4:	200422e8 	.word	0x200422e8
 80082f8:	200422f4 	.word	0x200422f4
 80082fc:	200422f0 	.word	0x200422f0
 8008300:	200422fc 	.word	0x200422fc
 8008304:	200422f8 	.word	0x200422f8
 8008308:	20000604 	.word	0x20000604
 800830c:	2000060c 	.word	0x2000060c
 8008310:	447a0000 	.word	0x447a0000
 8008314:	08019fb8 	.word	0x08019fb8
 8008318:	42c80000 	.word	0x42c80000
 800831c:	461c4000 	.word	0x461c4000
 8008320:	08019fc4 	.word	0x08019fc4
 8008324:	20000600 	.word	0x20000600
 8008328:	2004227c 	.word	0x2004227c
		else if(joy_stick.getValue() == JOY_R){
 800832c:	48be      	ldr	r0, [pc, #760]	; (8008628 <cppLoop+0x928>)
 800832e:	f7f9 ff1d 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008332:	4603      	mov	r3, r0
 8008334:	2b10      	cmp	r3, #16
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d059      	beq.n	80083f6 <cppLoop+0x6f6>
			led.LR(-1, 1);
 8008342:	2201      	movs	r2, #1
 8008344:	f04f 31ff 	mov.w	r1, #4294967295
 8008348:	48b8      	ldr	r0, [pc, #736]	; (800862c <cppLoop+0x92c>)
 800834a:	f7fa f82f 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800834e:	2064      	movs	r0, #100	; 0x64
 8008350:	f001 fdc6 	bl	8009ee0 <HAL_Delay>
			if(selector == 0){
 8008354:	4bb6      	ldr	r3, [pc, #728]	; (8008630 <cppLoop+0x930>)
 8008356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d113      	bne.n	8008386 <cppLoop+0x686>
				adj_kp_slow = adj_kp_slow + 0.00001;
 800835e:	4bb5      	ldr	r3, [pc, #724]	; (8008634 <cppLoop+0x934>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f7f8 f908 	bl	8000578 <__aeabi_f2d>
 8008368:	a3a9      	add	r3, pc, #676	; (adr r3, 8008610 <cppLoop+0x910>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f7f7 ffa5 	bl	80002bc <__adddf3>
 8008372:	4603      	mov	r3, r0
 8008374:	460c      	mov	r4, r1
 8008376:	4618      	mov	r0, r3
 8008378:	4621      	mov	r1, r4
 800837a:	f7f8 fc4d 	bl	8000c18 <__aeabi_d2f>
 800837e:	4602      	mov	r2, r0
 8008380:	4bac      	ldr	r3, [pc, #688]	; (8008634 <cppLoop+0x934>)
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e02b      	b.n	80083de <cppLoop+0x6de>
			else if(selector == 1){
 8008386:	4baa      	ldr	r3, [pc, #680]	; (8008630 <cppLoop+0x930>)
 8008388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d113      	bne.n	80083b8 <cppLoop+0x6b8>
				adj_ki_slow = adj_ki_slow + 0.0001;
 8008390:	4ba9      	ldr	r3, [pc, #676]	; (8008638 <cppLoop+0x938>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f7f8 f8ef 	bl	8000578 <__aeabi_f2d>
 800839a:	a39f      	add	r3, pc, #636	; (adr r3, 8008618 <cppLoop+0x918>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f7 ff8c 	bl	80002bc <__adddf3>
 80083a4:	4603      	mov	r3, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4618      	mov	r0, r3
 80083aa:	4621      	mov	r1, r4
 80083ac:	f7f8 fc34 	bl	8000c18 <__aeabi_d2f>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4ba1      	ldr	r3, [pc, #644]	; (8008638 <cppLoop+0x938>)
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	e012      	b.n	80083de <cppLoop+0x6de>
				adj_kd_slow = adj_kd_slow + 0.000001;
 80083b8:	4ba0      	ldr	r3, [pc, #640]	; (800863c <cppLoop+0x93c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7f8 f8db 	bl	8000578 <__aeabi_f2d>
 80083c2:	a397      	add	r3, pc, #604	; (adr r3, 8008620 <cppLoop+0x920>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f7 ff78 	bl	80002bc <__adddf3>
 80083cc:	4603      	mov	r3, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	4618      	mov	r0, r3
 80083d2:	4621      	mov	r1, r4
 80083d4:	f7f8 fc20 	bl	8000c18 <__aeabi_d2f>
 80083d8:	4602      	mov	r2, r0
 80083da:	4b98      	ldr	r3, [pc, #608]	; (800863c <cppLoop+0x93c>)
 80083dc:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80083de:	2152      	movs	r1, #82	; 0x52
 80083e0:	4892      	ldr	r0, [pc, #584]	; (800862c <cppLoop+0x92c>)
 80083e2:	f7f9 ff27 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80083e6:	2200      	movs	r2, #0
 80083e8:	f04f 31ff 	mov.w	r1, #4294967295
 80083ec:	488f      	ldr	r0, [pc, #572]	; (800862c <cppLoop+0x92c>)
 80083ee:	f7f9 ffdd 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80083f2:	f001 bc2d 	b.w	8009c50 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 80083f6:	488c      	ldr	r0, [pc, #560]	; (8008628 <cppLoop+0x928>)
 80083f8:	f7f9 feb8 	bl	800216c <_ZN8JoyStick8getValueEv>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b01      	cmp	r3, #1
 8008400:	bf0c      	ite	eq
 8008402:	2301      	moveq	r3, #1
 8008404:	2300      	movne	r3, #0
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d059      	beq.n	80084c0 <cppLoop+0x7c0>
			led.LR(-1, 1);
 800840c:	2201      	movs	r2, #1
 800840e:	f04f 31ff 	mov.w	r1, #4294967295
 8008412:	4886      	ldr	r0, [pc, #536]	; (800862c <cppLoop+0x92c>)
 8008414:	f7f9 ffca 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008418:	2064      	movs	r0, #100	; 0x64
 800841a:	f001 fd61 	bl	8009ee0 <HAL_Delay>
			if(selector == 0){
 800841e:	4b84      	ldr	r3, [pc, #528]	; (8008630 <cppLoop+0x930>)
 8008420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d113      	bne.n	8008450 <cppLoop+0x750>
				adj_kp_slow = adj_kp_slow - 0.00001;
 8008428:	4b82      	ldr	r3, [pc, #520]	; (8008634 <cppLoop+0x934>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f7f8 f8a3 	bl	8000578 <__aeabi_f2d>
 8008432:	a377      	add	r3, pc, #476	; (adr r3, 8008610 <cppLoop+0x910>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 ff3e 	bl	80002b8 <__aeabi_dsub>
 800843c:	4603      	mov	r3, r0
 800843e:	460c      	mov	r4, r1
 8008440:	4618      	mov	r0, r3
 8008442:	4621      	mov	r1, r4
 8008444:	f7f8 fbe8 	bl	8000c18 <__aeabi_d2f>
 8008448:	4602      	mov	r2, r0
 800844a:	4b7a      	ldr	r3, [pc, #488]	; (8008634 <cppLoop+0x934>)
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e02b      	b.n	80084a8 <cppLoop+0x7a8>
			else if(selector == 1){
 8008450:	4b77      	ldr	r3, [pc, #476]	; (8008630 <cppLoop+0x930>)
 8008452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d113      	bne.n	8008482 <cppLoop+0x782>
				adj_ki_slow = adj_ki_slow - 0.0001;
 800845a:	4b77      	ldr	r3, [pc, #476]	; (8008638 <cppLoop+0x938>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f7f8 f88a 	bl	8000578 <__aeabi_f2d>
 8008464:	a36c      	add	r3, pc, #432	; (adr r3, 8008618 <cppLoop+0x918>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	f7f7 ff25 	bl	80002b8 <__aeabi_dsub>
 800846e:	4603      	mov	r3, r0
 8008470:	460c      	mov	r4, r1
 8008472:	4618      	mov	r0, r3
 8008474:	4621      	mov	r1, r4
 8008476:	f7f8 fbcf 	bl	8000c18 <__aeabi_d2f>
 800847a:	4602      	mov	r2, r0
 800847c:	4b6e      	ldr	r3, [pc, #440]	; (8008638 <cppLoop+0x938>)
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e012      	b.n	80084a8 <cppLoop+0x7a8>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008482:	4b6e      	ldr	r3, [pc, #440]	; (800863c <cppLoop+0x93c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 f876 	bl	8000578 <__aeabi_f2d>
 800848c:	a364      	add	r3, pc, #400	; (adr r3, 8008620 <cppLoop+0x920>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff11 	bl	80002b8 <__aeabi_dsub>
 8008496:	4603      	mov	r3, r0
 8008498:	460c      	mov	r4, r1
 800849a:	4618      	mov	r0, r3
 800849c:	4621      	mov	r1, r4
 800849e:	f7f8 fbbb 	bl	8000c18 <__aeabi_d2f>
 80084a2:	4602      	mov	r2, r0
 80084a4:	4b65      	ldr	r3, [pc, #404]	; (800863c <cppLoop+0x93c>)
 80084a6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80084a8:	2152      	movs	r1, #82	; 0x52
 80084aa:	4860      	ldr	r0, [pc, #384]	; (800862c <cppLoop+0x92c>)
 80084ac:	f7f9 fec2 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80084b0:	2200      	movs	r2, #0
 80084b2:	f04f 31ff 	mov.w	r1, #4294967295
 80084b6:	485d      	ldr	r0, [pc, #372]	; (800862c <cppLoop+0x92c>)
 80084b8:	f7f9 ff78 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80084bc:	f001 bbc8 	b.w	8009c50 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 80084c0:	4859      	ldr	r0, [pc, #356]	; (8008628 <cppLoop+0x928>)
 80084c2:	f7f9 fe53 	bl	800216c <_ZN8JoyStick8getValueEv>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	bf0c      	ite	eq
 80084cc:	2301      	moveq	r3, #1
 80084ce:	2300      	movne	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f001 83bc 	beq.w	8009c50 <cppLoop+0x1f50>
			led.LR(-1, 1);
 80084d8:	2201      	movs	r2, #1
 80084da:	f04f 31ff 	mov.w	r1, #4294967295
 80084de:	4853      	ldr	r0, [pc, #332]	; (800862c <cppLoop+0x92c>)
 80084e0:	f7f9 ff64 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084e8:	f001 fcfa 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80084ec:	2300      	movs	r3, #0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4b50      	ldr	r3, [pc, #320]	; (8008634 <cppLoop+0x934>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	4952      	ldr	r1, [pc, #328]	; (8008640 <cppLoop+0x940>)
 80084f6:	4853      	ldr	r0, [pc, #332]	; (8008644 <cppLoop+0x944>)
 80084f8:	f7f9 f9b0 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80084fc:	2300      	movs	r3, #0
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4b4d      	ldr	r3, [pc, #308]	; (8008638 <cppLoop+0x938>)
 8008502:	2201      	movs	r2, #1
 8008504:	4950      	ldr	r1, [pc, #320]	; (8008648 <cppLoop+0x948>)
 8008506:	484f      	ldr	r0, [pc, #316]	; (8008644 <cppLoop+0x944>)
 8008508:	f7f9 f9a8 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 800850c:	2300      	movs	r3, #0
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	4b4a      	ldr	r3, [pc, #296]	; (800863c <cppLoop+0x93c>)
 8008512:	2201      	movs	r2, #1
 8008514:	494d      	ldr	r1, [pc, #308]	; (800864c <cppLoop+0x94c>)
 8008516:	484b      	ldr	r0, [pc, #300]	; (8008644 <cppLoop+0x944>)
 8008518:	f7f9 f9a0 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 800851c:	4b45      	ldr	r3, [pc, #276]	; (8008634 <cppLoop+0x934>)
 800851e:	edd3 7a00 	vldr	s15, [r3]
 8008522:	4b45      	ldr	r3, [pc, #276]	; (8008638 <cppLoop+0x938>)
 8008524:	ed93 7a00 	vldr	s14, [r3]
 8008528:	4b44      	ldr	r3, [pc, #272]	; (800863c <cppLoop+0x93c>)
 800852a:	edd3 6a00 	vldr	s13, [r3]
 800852e:	eeb0 1a66 	vmov.f32	s2, s13
 8008532:	eef0 0a47 	vmov.f32	s1, s14
 8008536:	eeb0 0a67 	vmov.f32	s0, s15
 800853a:	4845      	ldr	r0, [pc, #276]	; (8008650 <cppLoop+0x950>)
 800853c:	f7fb fb70 	bl	8003c20 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008540:	2200      	movs	r2, #0
 8008542:	f04f 31ff 	mov.w	r1, #4294967295
 8008546:	4839      	ldr	r0, [pc, #228]	; (800862c <cppLoop+0x92c>)
 8008548:	f7f9 ff30 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800854c:	f001 bb80 	b.w	8009c50 <cppLoop+0x1f50>

	case 1:
		led.fullColor('C');
 8008550:	2143      	movs	r1, #67	; 0x43
 8008552:	4836      	ldr	r0, [pc, #216]	; (800862c <cppLoop+0x92c>)
 8008554:	f7f9 fe6e 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008558:	f7f8 fda2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800855c:	2100      	movs	r1, #0
 800855e:	2000      	movs	r0, #0
 8008560:	f7f8 fdae 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008564:	483b      	ldr	r0, [pc, #236]	; (8008654 <cppLoop+0x954>)
 8008566:	f7f8 fdd5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800856a:	2101      	movs	r1, #1
 800856c:	2000      	movs	r0, #0
 800856e:	f7f8 fda7 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008572:	4b39      	ldr	r3, [pc, #228]	; (8008658 <cppLoop+0x958>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7f7 fffe 	bl	8000578 <__aeabi_f2d>
 800857c:	4603      	mov	r3, r0
 800857e:	460c      	mov	r4, r1
 8008580:	461a      	mov	r2, r3
 8008582:	4623      	mov	r3, r4
 8008584:	4835      	ldr	r0, [pc, #212]	; (800865c <cppLoop+0x95c>)
 8008586:	f7f8 fdc5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800858a:	4827      	ldr	r0, [pc, #156]	; (8008628 <cppLoop+0x928>)
 800858c:	f7f9 fdee 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008590:	4603      	mov	r3, r0
 8008592:	2b02      	cmp	r3, #2
 8008594:	bf0c      	ite	eq
 8008596:	2301      	moveq	r3, #1
 8008598:	2300      	movne	r3, #0
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	f001 8359 	beq.w	8009c54 <cppLoop+0x1f54>
			HAL_Delay(500);
 80085a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085a6:	f001 fc9b 	bl	8009ee0 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80085aa:	4b2b      	ldr	r3, [pc, #172]	; (8008658 <cppLoop+0x958>)
 80085ac:	edd3 7a00 	vldr	s15, [r3]
 80085b0:	eeb0 0a67 	vmov.f32	s0, s15
 80085b4:	4826      	ldr	r0, [pc, #152]	; (8008650 <cppLoop+0x950>)
 80085b6:	f7fb fb88 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	2101      	movs	r1, #1
 80085c0:	481a      	ldr	r0, [pc, #104]	; (800862c <cppLoop+0x92c>)
 80085c2:	f7f9 fef3 	bl	80023ac <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(0.35, 0.35, 0.35, 0.35);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 80085c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085ca:	f001 fc89 	bl	8009ee0 <HAL_Delay>
			logger.start();
 80085ce:	4824      	ldr	r0, [pc, #144]	; (8008660 <cppLoop+0x960>)
 80085d0:	f7fc fb93 	bl	8004cfa <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80085d4:	2100      	movs	r1, #0
 80085d6:	481e      	ldr	r0, [pc, #120]	; (8008650 <cppLoop+0x950>)
 80085d8:	f7fb fda4 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80085dc:	481c      	ldr	r0, [pc, #112]	; (8008650 <cppLoop+0x950>)
 80085de:	f7fb fddf 	bl	80041a0 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 80085e2:	481f      	ldr	r0, [pc, #124]	; (8008660 <cppLoop+0x960>)
 80085e4:	f7fc fb99 	bl	8004d1a <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 80085e8:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <cppLoop+0x964>)
 80085ea:	491f      	ldr	r1, [pc, #124]	; (8008668 <cppLoop+0x968>)
 80085ec:	481c      	ldr	r0, [pc, #112]	; (8008660 <cppLoop+0x960>)
 80085ee:	f7fc fa8f 	bl	8004b10 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 80085f2:	4a1e      	ldr	r2, [pc, #120]	; (800866c <cppLoop+0x96c>)
 80085f4:	491c      	ldr	r1, [pc, #112]	; (8008668 <cppLoop+0x968>)
 80085f6:	481a      	ldr	r0, [pc, #104]	; (8008660 <cppLoop+0x960>)
 80085f8:	f7fc faa0 	bl	8004b3c <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 80085fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008600:	2100      	movs	r1, #0
 8008602:	480a      	ldr	r0, [pc, #40]	; (800862c <cppLoop+0x92c>)
 8008604:	f7f9 fed2 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 8008608:	f001 bb24 	b.w	8009c54 <cppLoop+0x1f54>
 800860c:	f3af 8000 	nop.w
 8008610:	88e368f1 	.word	0x88e368f1
 8008614:	3ee4f8b5 	.word	0x3ee4f8b5
 8008618:	eb1c432d 	.word	0xeb1c432d
 800861c:	3f1a36e2 	.word	0x3f1a36e2
 8008620:	a0b5ed8d 	.word	0xa0b5ed8d
 8008624:	3eb0c6f7 	.word	0x3eb0c6f7
 8008628:	20000600 	.word	0x20000600
 800862c:	2000060c 	.word	0x2000060c
 8008630:	2004227c 	.word	0x2004227c
 8008634:	200422a0 	.word	0x200422a0
 8008638:	200422a8 	.word	0x200422a8
 800863c:	200422b0 	.word	0x200422b0
 8008640:	08019fd4 	.word	0x08019fd4
 8008644:	08019fe0 	.word	0x08019fe0
 8008648:	08019fe8 	.word	0x08019fe8
 800864c:	08019ff4 	.word	0x08019ff4
 8008650:	2001db9c 	.word	0x2001db9c
 8008654:	0801a000 	.word	0x0801a000
 8008658:	200422b8 	.word	0x200422b8
 800865c:	0801a00c 	.word	0x0801a00c
 8008660:	20000630 	.word	0x20000630
 8008664:	0801a018 	.word	0x0801a018
 8008668:	0801a024 	.word	0x0801a024
 800866c:	0801a030 	.word	0x0801a030

	case 2:
		led.fullColor('B');
 8008670:	2142      	movs	r1, #66	; 0x42
 8008672:	48c1      	ldr	r0, [pc, #772]	; (8008978 <cppLoop+0xc78>)
 8008674:	f7f9 fdde 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008678:	f7f8 fd12 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800867c:	2100      	movs	r1, #0
 800867e:	2000      	movs	r0, #0
 8008680:	f7f8 fd1e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008684:	48bd      	ldr	r0, [pc, #756]	; (800897c <cppLoop+0xc7c>)
 8008686:	f7f8 fd45 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800868a:	2101      	movs	r1, #1
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 fd17 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008692:	4bbb      	ldr	r3, [pc, #748]	; (8008980 <cppLoop+0xc80>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 ff6e 	bl	8000578 <__aeabi_f2d>
 800869c:	4603      	mov	r3, r0
 800869e:	460c      	mov	r4, r1
 80086a0:	461a      	mov	r2, r3
 80086a2:	4623      	mov	r3, r4
 80086a4:	48b7      	ldr	r0, [pc, #732]	; (8008984 <cppLoop+0xc84>)
 80086a6:	f7f8 fd35 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80086aa:	48b7      	ldr	r0, [pc, #732]	; (8008988 <cppLoop+0xc88>)
 80086ac:	f7f9 fd5e 	bl	800216c <_ZN8JoyStick8getValueEv>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b10      	cmp	r3, #16
 80086b4:	bf0c      	ite	eq
 80086b6:	2301      	moveq	r3, #1
 80086b8:	2300      	movne	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d023      	beq.n	8008708 <cppLoop+0xa08>
			led.LR(-1, 1);
 80086c0:	2201      	movs	r2, #1
 80086c2:	f04f 31ff 	mov.w	r1, #4294967295
 80086c6:	48ac      	ldr	r0, [pc, #688]	; (8008978 <cppLoop+0xc78>)
 80086c8:	f7f9 fe70 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086cc:	2064      	movs	r0, #100	; 0x64
 80086ce:	f001 fc07 	bl	8009ee0 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80086d2:	4bab      	ldr	r3, [pc, #684]	; (8008980 <cppLoop+0xc80>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f7 ff4e 	bl	8000578 <__aeabi_f2d>
 80086dc:	a3a4      	add	r3, pc, #656	; (adr r3, 8008970 <cppLoop+0xc70>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fdeb 	bl	80002bc <__adddf3>
 80086e6:	4603      	mov	r3, r0
 80086e8:	460c      	mov	r4, r1
 80086ea:	4618      	mov	r0, r3
 80086ec:	4621      	mov	r1, r4
 80086ee:	f7f8 fa93 	bl	8000c18 <__aeabi_d2f>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4ba2      	ldr	r3, [pc, #648]	; (8008980 <cppLoop+0xc80>)
 80086f6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80086f8:	2200      	movs	r2, #0
 80086fa:	f04f 31ff 	mov.w	r1, #4294967295
 80086fe:	489e      	ldr	r0, [pc, #632]	; (8008978 <cppLoop+0xc78>)
 8008700:	f7f9 fe54 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008704:	f001 baa8 	b.w	8009c58 <cppLoop+0x1f58>
		else if(joy_stick.getValue() == JOY_L){
 8008708:	489f      	ldr	r0, [pc, #636]	; (8008988 <cppLoop+0xc88>)
 800870a:	f7f9 fd2f 	bl	800216c <_ZN8JoyStick8getValueEv>
 800870e:	4603      	mov	r3, r0
 8008710:	2b01      	cmp	r3, #1
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d023      	beq.n	8008766 <cppLoop+0xa66>
			led.LR(-1, 1);
 800871e:	2201      	movs	r2, #1
 8008720:	f04f 31ff 	mov.w	r1, #4294967295
 8008724:	4894      	ldr	r0, [pc, #592]	; (8008978 <cppLoop+0xc78>)
 8008726:	f7f9 fe41 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800872a:	2064      	movs	r0, #100	; 0x64
 800872c:	f001 fbd8 	bl	8009ee0 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008730:	4b93      	ldr	r3, [pc, #588]	; (8008980 <cppLoop+0xc80>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7f7 ff1f 	bl	8000578 <__aeabi_f2d>
 800873a:	a38d      	add	r3, pc, #564	; (adr r3, 8008970 <cppLoop+0xc70>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 fdba 	bl	80002b8 <__aeabi_dsub>
 8008744:	4603      	mov	r3, r0
 8008746:	460c      	mov	r4, r1
 8008748:	4618      	mov	r0, r3
 800874a:	4621      	mov	r1, r4
 800874c:	f7f8 fa64 	bl	8000c18 <__aeabi_d2f>
 8008750:	4602      	mov	r2, r0
 8008752:	4b8b      	ldr	r3, [pc, #556]	; (8008980 <cppLoop+0xc80>)
 8008754:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008756:	2200      	movs	r2, #0
 8008758:	f04f 31ff 	mov.w	r1, #4294967295
 800875c:	4886      	ldr	r0, [pc, #536]	; (8008978 <cppLoop+0xc78>)
 800875e:	f7f9 fe25 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008762:	f001 ba79 	b.w	8009c58 <cppLoop+0x1f58>
		else if(joy_stick.getValue() == JOY_C){
 8008766:	4888      	ldr	r0, [pc, #544]	; (8008988 <cppLoop+0xc88>)
 8008768:	f7f9 fd00 	bl	800216c <_ZN8JoyStick8getValueEv>
 800876c:	4603      	mov	r3, r0
 800876e:	2b02      	cmp	r3, #2
 8008770:	bf0c      	ite	eq
 8008772:	2301      	moveq	r3, #1
 8008774:	2300      	movne	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	f001 826d 	beq.w	8009c58 <cppLoop+0x1f58>
			led.LR(-1, 1);
 800877e:	2201      	movs	r2, #1
 8008780:	f04f 31ff 	mov.w	r1, #4294967295
 8008784:	487c      	ldr	r0, [pc, #496]	; (8008978 <cppLoop+0xc78>)
 8008786:	f7f9 fe11 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 800878a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800878e:	f001 fba7 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008792:	2300      	movs	r3, #0
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	4b7a      	ldr	r3, [pc, #488]	; (8008980 <cppLoop+0xc80>)
 8008798:	2201      	movs	r2, #1
 800879a:	497c      	ldr	r1, [pc, #496]	; (800898c <cppLoop+0xc8c>)
 800879c:	487c      	ldr	r0, [pc, #496]	; (8008990 <cppLoop+0xc90>)
 800879e:	f7f9 f85d 	bl	800185c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80087a2:	4b77      	ldr	r3, [pc, #476]	; (8008980 <cppLoop+0xc80>)
 80087a4:	edd3 7a00 	vldr	s15, [r3]
 80087a8:	eeb0 0a67 	vmov.f32	s0, s15
 80087ac:	4879      	ldr	r0, [pc, #484]	; (8008994 <cppLoop+0xc94>)
 80087ae:	f7fb fa8c 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80087b2:	2200      	movs	r2, #0
 80087b4:	f04f 31ff 	mov.w	r1, #4294967295
 80087b8:	486f      	ldr	r0, [pc, #444]	; (8008978 <cppLoop+0xc78>)
 80087ba:	f7f9 fdf7 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80087be:	f001 ba4b 	b.w	8009c58 <cppLoop+0x1f58>

	case 3:
		led.fullColor('Y');
 80087c2:	2159      	movs	r1, #89	; 0x59
 80087c4:	486c      	ldr	r0, [pc, #432]	; (8008978 <cppLoop+0xc78>)
 80087c6:	f7f9 fd35 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80087ca:	f7f8 fc69 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087ce:	2100      	movs	r1, #0
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7f8 fc75 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80087d6:	4b70      	ldr	r3, [pc, #448]	; (8008998 <cppLoop+0xc98>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f7 fecc 	bl	8000578 <__aeabi_f2d>
 80087e0:	4603      	mov	r3, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	461a      	mov	r2, r3
 80087e6:	4623      	mov	r3, r4
 80087e8:	486c      	ldr	r0, [pc, #432]	; (800899c <cppLoop+0xc9c>)
 80087ea:	f7f8 fc93 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087ee:	2101      	movs	r1, #1
 80087f0:	2000      	movs	r0, #0
 80087f2:	f7f8 fc65 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80087f6:	4b6a      	ldr	r3, [pc, #424]	; (80089a0 <cppLoop+0xca0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f7 febc 	bl	8000578 <__aeabi_f2d>
 8008800:	4603      	mov	r3, r0
 8008802:	460c      	mov	r4, r1
 8008804:	461a      	mov	r2, r3
 8008806:	4623      	mov	r3, r4
 8008808:	4866      	ldr	r0, [pc, #408]	; (80089a4 <cppLoop+0xca4>)
 800880a:	f7f8 fc83 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800880e:	485e      	ldr	r0, [pc, #376]	; (8008988 <cppLoop+0xc88>)
 8008810:	f7f9 fcac 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008814:	4603      	mov	r3, r0
 8008816:	2b02      	cmp	r3, #2
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	f001 821b 	beq.w	8009c5c <cppLoop+0x1f5c>
			HAL_Delay(500);
 8008826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800882a:	f001 fb59 	bl	8009ee0 <HAL_Delay>

			led.LR(1, -1);
 800882e:	f04f 32ff 	mov.w	r2, #4294967295
 8008832:	2101      	movs	r1, #1
 8008834:	4850      	ldr	r0, [pc, #320]	; (8008978 <cppLoop+0xc78>)
 8008836:	f7f9 fdb9 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800883a:	2101      	movs	r1, #1
 800883c:	4855      	ldr	r0, [pc, #340]	; (8008994 <cppLoop+0xc94>)
 800883e:	f7fb fc71 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008842:	4b57      	ldr	r3, [pc, #348]	; (80089a0 <cppLoop+0xca0>)
 8008844:	edd3 7a00 	vldr	s15, [r3]
 8008848:	eeb0 0a67 	vmov.f32	s0, s15
 800884c:	4851      	ldr	r0, [pc, #324]	; (8008994 <cppLoop+0xc94>)
 800884e:	f7fb fa3c 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008852:	4b51      	ldr	r3, [pc, #324]	; (8008998 <cppLoop+0xc98>)
 8008854:	edd3 7a00 	vldr	s15, [r3]
 8008858:	eeb0 0a67 	vmov.f32	s0, s15
 800885c:	484d      	ldr	r0, [pc, #308]	; (8008994 <cppLoop+0xc94>)
 800885e:	f7fb fa44 	bl	8003cea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008862:	4b4f      	ldr	r3, [pc, #316]	; (80089a0 <cppLoop+0xca0>)
 8008864:	edd3 7a00 	vldr	s15, [r3]
 8008868:	eeb0 0a67 	vmov.f32	s0, s15
 800886c:	4849      	ldr	r0, [pc, #292]	; (8008994 <cppLoop+0xc94>)
 800886e:	f7fb fa5c 	bl	8003d2a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008872:	4848      	ldr	r0, [pc, #288]	; (8008994 <cppLoop+0xc94>)
 8008874:	f7fb fd7e 	bl	8004374 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(3000);
 8008878:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800887c:	f001 fb30 	bl	8009ee0 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008880:	eddf 1a49 	vldr	s3, [pc, #292]	; 80089a8 <cppLoop+0xca8>
 8008884:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80089a8 <cppLoop+0xca8>
 8008888:	eddf 0a47 	vldr	s1, [pc, #284]	; 80089a8 <cppLoop+0xca8>
 800888c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80089a8 <cppLoop+0xca8>
 8008890:	4846      	ldr	r0, [pc, #280]	; (80089ac <cppLoop+0xcac>)
 8008892:	f7f8 fcdd 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8008896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800889a:	f001 fb21 	bl	8009ee0 <HAL_Delay>

			line_trace.running();
 800889e:	483d      	ldr	r0, [pc, #244]	; (8008994 <cppLoop+0xc94>)
 80088a0:	f7fb fc7e 	bl	80041a0 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80088a4:	4841      	ldr	r0, [pc, #260]	; (80089ac <cppLoop+0xcac>)
 80088a6:	f7f8 fd6d 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80088aa:	f04f 32ff 	mov.w	r2, #4294967295
 80088ae:	2100      	movs	r1, #0
 80088b0:	4831      	ldr	r0, [pc, #196]	; (8008978 <cppLoop+0xc78>)
 80088b2:	f7f9 fd7b 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80088b6:	f001 b9d1 	b.w	8009c5c <cppLoop+0x1f5c>

	case 4:
		led.fullColor('G');
 80088ba:	2147      	movs	r1, #71	; 0x47
 80088bc:	482e      	ldr	r0, [pc, #184]	; (8008978 <cppLoop+0xc78>)
 80088be:	f7f9 fcb9 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80088c2:	f7f8 fbed 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088c6:	2100      	movs	r1, #0
 80088c8:	2000      	movs	r0, #0
 80088ca:	f7f8 fbf9 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80088ce:	4831      	ldr	r0, [pc, #196]	; (8008994 <cppLoop+0xc94>)
 80088d0:	f7fb fa5b 	bl	8003d8a <_ZN9LineTrace14getMaxVelocityEv>
 80088d4:	ee10 3a10 	vmov	r3, s0
 80088d8:	4618      	mov	r0, r3
 80088da:	f7f7 fe4d 	bl	8000578 <__aeabi_f2d>
 80088de:	4603      	mov	r3, r0
 80088e0:	460c      	mov	r4, r1
 80088e2:	461a      	mov	r2, r3
 80088e4:	4623      	mov	r3, r4
 80088e6:	482d      	ldr	r0, [pc, #180]	; (800899c <cppLoop+0xc9c>)
 80088e8:	f7f8 fc14 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088ec:	2101      	movs	r1, #1
 80088ee:	2000      	movs	r0, #0
 80088f0:	f7f8 fbe6 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80088f4:	4827      	ldr	r0, [pc, #156]	; (8008994 <cppLoop+0xc94>)
 80088f6:	f7fb fa68 	bl	8003dca <_ZN9LineTrace14getMinVelocityEv>
 80088fa:	ee10 3a10 	vmov	r3, s0
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fe3a 	bl	8000578 <__aeabi_f2d>
 8008904:	4603      	mov	r3, r0
 8008906:	460c      	mov	r4, r1
 8008908:	461a      	mov	r2, r3
 800890a:	4623      	mov	r3, r4
 800890c:	481d      	ldr	r0, [pc, #116]	; (8008984 <cppLoop+0xc84>)
 800890e:	f7f8 fc01 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008912:	481d      	ldr	r0, [pc, #116]	; (8008988 <cppLoop+0xc88>)
 8008914:	f7f9 fc2a 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008918:	4603      	mov	r3, r0
 800891a:	2b08      	cmp	r3, #8
 800891c:	bf0c      	ite	eq
 800891e:	2301      	moveq	r3, #1
 8008920:	2300      	movne	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d045      	beq.n	80089b4 <cppLoop+0xcb4>
			led.LR(-1, 1);
 8008928:	2201      	movs	r2, #1
 800892a:	f04f 31ff 	mov.w	r1, #4294967295
 800892e:	4812      	ldr	r0, [pc, #72]	; (8008978 <cppLoop+0xc78>)
 8008930:	f7f9 fd3c 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008934:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008938:	f001 fad2 	bl	8009ee0 <HAL_Delay>

			selector_vel++;
 800893c:	4b1c      	ldr	r3, [pc, #112]	; (80089b0 <cppLoop+0xcb0>)
 800893e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008942:	b29b      	uxth	r3, r3
 8008944:	3301      	adds	r3, #1
 8008946:	b29b      	uxth	r3, r3
 8008948:	b21a      	sxth	r2, r3
 800894a:	4b19      	ldr	r3, [pc, #100]	; (80089b0 <cppLoop+0xcb0>)
 800894c:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800894e:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <cppLoop+0xcb0>)
 8008950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008954:	2b01      	cmp	r3, #1
 8008956:	dd02      	ble.n	800895e <cppLoop+0xc5e>
 8008958:	4b15      	ldr	r3, [pc, #84]	; (80089b0 <cppLoop+0xcb0>)
 800895a:	2200      	movs	r2, #0
 800895c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800895e:	2200      	movs	r2, #0
 8008960:	f04f 31ff 	mov.w	r1, #4294967295
 8008964:	4804      	ldr	r0, [pc, #16]	; (8008978 <cppLoop+0xc78>)
 8008966:	f7f9 fd21 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800896a:	f001 b979 	b.w	8009c60 <cppLoop+0x1f60>
 800896e:	bf00      	nop
 8008970:	9999999a 	.word	0x9999999a
 8008974:	3fb99999 	.word	0x3fb99999
 8008978:	2000060c 	.word	0x2000060c
 800897c:	0801a000 	.word	0x0801a000
 8008980:	200422b8 	.word	0x200422b8
 8008984:	0801a03c 	.word	0x0801a03c
 8008988:	20000600 	.word	0x20000600
 800898c:	0801a048 	.word	0x0801a048
 8008990:	08019fe0 	.word	0x08019fe0
 8008994:	2001db9c 	.word	0x2001db9c
 8008998:	200422c0 	.word	0x200422c0
 800899c:	0801a054 	.word	0x0801a054
 80089a0:	200422d0 	.word	0x200422d0
 80089a4:	0801a00c 	.word	0x0801a00c
 80089a8:	3eb33333 	.word	0x3eb33333
 80089ac:	2001db98 	.word	0x2001db98
 80089b0:	20042282 	.word	0x20042282
		else if(joy_stick.getValue() == JOY_R){
 80089b4:	48a4      	ldr	r0, [pc, #656]	; (8008c48 <cppLoop+0xf48>)
 80089b6:	f7f9 fbd9 	bl	800216c <_ZN8JoyStick8getValueEv>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b10      	cmp	r3, #16
 80089be:	bf0c      	ite	eq
 80089c0:	2301      	moveq	r3, #1
 80089c2:	2300      	movne	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d03c      	beq.n	8008a44 <cppLoop+0xd44>
			led.LR(-1, 1);
 80089ca:	2201      	movs	r2, #1
 80089cc:	f04f 31ff 	mov.w	r1, #4294967295
 80089d0:	489e      	ldr	r0, [pc, #632]	; (8008c4c <cppLoop+0xf4c>)
 80089d2:	f7f9 fceb 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089d6:	2064      	movs	r0, #100	; 0x64
 80089d8:	f001 fa82 	bl	8009ee0 <HAL_Delay>
			if(selector_vel == 0)
 80089dc:	4b9c      	ldr	r3, [pc, #624]	; (8008c50 <cppLoop+0xf50>)
 80089de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d113      	bne.n	8008a0e <cppLoop+0xd0e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80089e6:	4b9b      	ldr	r3, [pc, #620]	; (8008c54 <cppLoop+0xf54>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f7 fdc4 	bl	8000578 <__aeabi_f2d>
 80089f0:	a393      	add	r3, pc, #588	; (adr r3, 8008c40 <cppLoop+0xf40>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fc61 	bl	80002bc <__adddf3>
 80089fa:	4603      	mov	r3, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	4618      	mov	r0, r3
 8008a00:	4621      	mov	r1, r4
 8008a02:	f7f8 f909 	bl	8000c18 <__aeabi_d2f>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <cppLoop+0xf54>)
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	e012      	b.n	8008a34 <cppLoop+0xd34>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008a0e:	4b92      	ldr	r3, [pc, #584]	; (8008c58 <cppLoop+0xf58>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f7 fdb0 	bl	8000578 <__aeabi_f2d>
 8008a18:	a389      	add	r3, pc, #548	; (adr r3, 8008c40 <cppLoop+0xf40>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fc4d 	bl	80002bc <__adddf3>
 8008a22:	4603      	mov	r3, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	4618      	mov	r0, r3
 8008a28:	4621      	mov	r1, r4
 8008a2a:	f7f8 f8f5 	bl	8000c18 <__aeabi_d2f>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	4b89      	ldr	r3, [pc, #548]	; (8008c58 <cppLoop+0xf58>)
 8008a32:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a34:	2200      	movs	r2, #0
 8008a36:	f04f 31ff 	mov.w	r1, #4294967295
 8008a3a:	4884      	ldr	r0, [pc, #528]	; (8008c4c <cppLoop+0xf4c>)
 8008a3c:	f7f9 fcb6 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008a40:	f001 b90e 	b.w	8009c60 <cppLoop+0x1f60>
		else if(joy_stick.getValue() == JOY_L){
 8008a44:	4880      	ldr	r0, [pc, #512]	; (8008c48 <cppLoop+0xf48>)
 8008a46:	f7f9 fb91 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	bf0c      	ite	eq
 8008a50:	2301      	moveq	r3, #1
 8008a52:	2300      	movne	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d03c      	beq.n	8008ad4 <cppLoop+0xdd4>
			led.LR(-1, 1);
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a60:	487a      	ldr	r0, [pc, #488]	; (8008c4c <cppLoop+0xf4c>)
 8008a62:	f7f9 fca3 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a66:	2064      	movs	r0, #100	; 0x64
 8008a68:	f001 fa3a 	bl	8009ee0 <HAL_Delay>
			if(selector_vel == 0)
 8008a6c:	4b78      	ldr	r3, [pc, #480]	; (8008c50 <cppLoop+0xf50>)
 8008a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d113      	bne.n	8008a9e <cppLoop+0xd9e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008a76:	4b77      	ldr	r3, [pc, #476]	; (8008c54 <cppLoop+0xf54>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7f7 fd7c 	bl	8000578 <__aeabi_f2d>
 8008a80:	a36f      	add	r3, pc, #444	; (adr r3, 8008c40 <cppLoop+0xf40>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fc17 	bl	80002b8 <__aeabi_dsub>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7f8 f8c1 	bl	8000c18 <__aeabi_d2f>
 8008a96:	4602      	mov	r2, r0
 8008a98:	4b6e      	ldr	r3, [pc, #440]	; (8008c54 <cppLoop+0xf54>)
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	e012      	b.n	8008ac4 <cppLoop+0xdc4>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008a9e:	4b6e      	ldr	r3, [pc, #440]	; (8008c58 <cppLoop+0xf58>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd68 	bl	8000578 <__aeabi_f2d>
 8008aa8:	a365      	add	r3, pc, #404	; (adr r3, 8008c40 <cppLoop+0xf40>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fc03 	bl	80002b8 <__aeabi_dsub>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7f8 f8ad 	bl	8000c18 <__aeabi_d2f>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b65      	ldr	r3, [pc, #404]	; (8008c58 <cppLoop+0xf58>)
 8008ac2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8008aca:	4860      	ldr	r0, [pc, #384]	; (8008c4c <cppLoop+0xf4c>)
 8008acc:	f7f9 fc6e 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008ad0:	f001 b8c6 	b.w	8009c60 <cppLoop+0x1f60>
		else if(joy_stick.getValue() == JOY_C){
 8008ad4:	485c      	ldr	r0, [pc, #368]	; (8008c48 <cppLoop+0xf48>)
 8008ad6:	f7f9 fb49 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	bf0c      	ite	eq
 8008ae0:	2301      	moveq	r3, #1
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f001 80ba 	beq.w	8009c60 <cppLoop+0x1f60>
			led.LR(-1, 1);
 8008aec:	2201      	movs	r2, #1
 8008aee:	f04f 31ff 	mov.w	r1, #4294967295
 8008af2:	4856      	ldr	r0, [pc, #344]	; (8008c4c <cppLoop+0xf4c>)
 8008af4:	f7f9 fc5a 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008af8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008afc:	f001 f9f0 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4b53      	ldr	r3, [pc, #332]	; (8008c54 <cppLoop+0xf54>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	4954      	ldr	r1, [pc, #336]	; (8008c5c <cppLoop+0xf5c>)
 8008b0a:	4855      	ldr	r0, [pc, #340]	; (8008c60 <cppLoop+0xf60>)
 8008b0c:	f7f8 fea6 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008b10:	2300      	movs	r3, #0
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	4b50      	ldr	r3, [pc, #320]	; (8008c58 <cppLoop+0xf58>)
 8008b16:	2201      	movs	r2, #1
 8008b18:	4952      	ldr	r1, [pc, #328]	; (8008c64 <cppLoop+0xf64>)
 8008b1a:	4851      	ldr	r0, [pc, #324]	; (8008c60 <cppLoop+0xf60>)
 8008b1c:	f7f8 fe9e 	bl	800185c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008b20:	4b4c      	ldr	r3, [pc, #304]	; (8008c54 <cppLoop+0xf54>)
 8008b22:	edd3 7a00 	vldr	s15, [r3]
 8008b26:	eeb0 0a67 	vmov.f32	s0, s15
 8008b2a:	484f      	ldr	r0, [pc, #316]	; (8008c68 <cppLoop+0xf68>)
 8008b2c:	f7fb f8dd 	bl	8003cea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008b30:	4b49      	ldr	r3, [pc, #292]	; (8008c58 <cppLoop+0xf58>)
 8008b32:	edd3 7a00 	vldr	s15, [r3]
 8008b36:	eeb0 0a67 	vmov.f32	s0, s15
 8008b3a:	484b      	ldr	r0, [pc, #300]	; (8008c68 <cppLoop+0xf68>)
 8008b3c:	f7fb f8f5 	bl	8003d2a <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008b40:	2200      	movs	r2, #0
 8008b42:	f04f 31ff 	mov.w	r1, #4294967295
 8008b46:	4841      	ldr	r0, [pc, #260]	; (8008c4c <cppLoop+0xf4c>)
 8008b48:	f7f9 fc30 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008b4c:	f001 b888 	b.w	8009c60 <cppLoop+0x1f60>

	case 5:
		led.fullColor('M');
 8008b50:	214d      	movs	r1, #77	; 0x4d
 8008b52:	483e      	ldr	r0, [pc, #248]	; (8008c4c <cppLoop+0xf4c>)
 8008b54:	f7f9 fb6e 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b58:	f7f8 faa2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f7f8 faae 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008b64:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <cppLoop+0xf6c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f7 fd05 	bl	8000578 <__aeabi_f2d>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	461a      	mov	r2, r3
 8008b74:	4623      	mov	r3, r4
 8008b76:	483e      	ldr	r0, [pc, #248]	; (8008c70 <cppLoop+0xf70>)
 8008b78:	f7f8 facc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	2000      	movs	r0, #0
 8008b80:	f7f8 fa9e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008b84:	4b3b      	ldr	r3, [pc, #236]	; (8008c74 <cppLoop+0xf74>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7f7 fcf5 	bl	8000578 <__aeabi_f2d>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	460c      	mov	r4, r1
 8008b92:	461a      	mov	r2, r3
 8008b94:	4623      	mov	r3, r4
 8008b96:	4838      	ldr	r0, [pc, #224]	; (8008c78 <cppLoop+0xf78>)
 8008b98:	f7f8 fabc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008b9c:	482a      	ldr	r0, [pc, #168]	; (8008c48 <cppLoop+0xf48>)
 8008b9e:	f7f9 fae5 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2301      	moveq	r3, #1
 8008baa:	2300      	movne	r3, #0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f001 8058 	beq.w	8009c64 <cppLoop+0x1f64>
			HAL_Delay(500);
 8008bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008bb8:	f001 f992 	bl	8009ee0 <HAL_Delay>

			led.LR(1, -1);
 8008bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	4822      	ldr	r0, [pc, #136]	; (8008c4c <cppLoop+0xf4c>)
 8008bc4:	f7f9 fbf2 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008bc8:	4b2c      	ldr	r3, [pc, #176]	; (8008c7c <cppLoop+0xf7c>)
 8008bca:	edd3 7a00 	vldr	s15, [r3]
 8008bce:	4b2c      	ldr	r3, [pc, #176]	; (8008c80 <cppLoop+0xf80>)
 8008bd0:	ed93 7a00 	vldr	s14, [r3]
 8008bd4:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <cppLoop+0xf84>)
 8008bd6:	edd3 6a00 	vldr	s13, [r3]
 8008bda:	eeb0 1a66 	vmov.f32	s2, s13
 8008bde:	eef0 0a47 	vmov.f32	s1, s14
 8008be2:	eeb0 0a67 	vmov.f32	s0, s15
 8008be6:	4820      	ldr	r0, [pc, #128]	; (8008c68 <cppLoop+0xf68>)
 8008be8:	f7fa ffd4 	bl	8003b94 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008bec:	2102      	movs	r1, #2
 8008bee:	481e      	ldr	r0, [pc, #120]	; (8008c68 <cppLoop+0xf68>)
 8008bf0:	f7fb fa98 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008bf4:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <cppLoop+0xf74>)
 8008bf6:	edd3 7a00 	vldr	s15, [r3]
 8008bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8008bfe:	481a      	ldr	r0, [pc, #104]	; (8008c68 <cppLoop+0xf68>)
 8008c00:	f7fb f863 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008c04:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <cppLoop+0xf6c>)
 8008c06:	edd3 7a00 	vldr	s15, [r3]
 8008c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c0e:	4816      	ldr	r0, [pc, #88]	; (8008c68 <cppLoop+0xf68>)
 8008c10:	f7fb f87b 	bl	8003d0a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008c14:	4b17      	ldr	r3, [pc, #92]	; (8008c74 <cppLoop+0xf74>)
 8008c16:	edd3 7a00 	vldr	s15, [r3]
 8008c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c1e:	4812      	ldr	r0, [pc, #72]	; (8008c68 <cppLoop+0xf68>)
 8008c20:	f7fb f893 	bl	8003d4a <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008c24:	4810      	ldr	r0, [pc, #64]	; (8008c68 <cppLoop+0xf68>)
 8008c26:	f7fb fba5 	bl	8004374 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008c2a:	480f      	ldr	r0, [pc, #60]	; (8008c68 <cppLoop+0xf68>)
 8008c2c:	f7fb fab8 	bl	80041a0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	2100      	movs	r1, #0
 8008c36:	4805      	ldr	r0, [pc, #20]	; (8008c4c <cppLoop+0xf4c>)
 8008c38:	f7f9 fbb8 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 8008c3c:	f001 b812 	b.w	8009c64 <cppLoop+0x1f64>
 8008c40:	9999999a 	.word	0x9999999a
 8008c44:	3fb99999 	.word	0x3fb99999
 8008c48:	20000600 	.word	0x20000600
 8008c4c:	2000060c 	.word	0x2000060c
 8008c50:	20042282 	.word	0x20042282
 8008c54:	200422c0 	.word	0x200422c0
 8008c58:	200422d0 	.word	0x200422d0
 8008c5c:	0801a060 	.word	0x0801a060
 8008c60:	08019fe0 	.word	0x08019fe0
 8008c64:	0801a06c 	.word	0x0801a06c
 8008c68:	2001db9c 	.word	0x2001db9c
 8008c6c:	200422c8 	.word	0x200422c8
 8008c70:	0801a078 	.word	0x0801a078
 8008c74:	200422d8 	.word	0x200422d8
 8008c78:	0801a00c 	.word	0x0801a00c
 8008c7c:	20042288 	.word	0x20042288
 8008c80:	20042290 	.word	0x20042290
 8008c84:	20042298 	.word	0x20042298

	case 6:
		led.fullColor('R');
 8008c88:	2152      	movs	r1, #82	; 0x52
 8008c8a:	4895      	ldr	r0, [pc, #596]	; (8008ee0 <cppLoop+0x11e0>)
 8008c8c:	f7f9 fad2 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c90:	f7f8 fa06 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c94:	2100      	movs	r1, #0
 8008c96:	2000      	movs	r0, #0
 8008c98:	f7f8 fa12 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008c9c:	4891      	ldr	r0, [pc, #580]	; (8008ee4 <cppLoop+0x11e4>)
 8008c9e:	f7fb f884 	bl	8003daa <_ZN9LineTrace15getMaxVelocity2Ev>
 8008ca2:	ee10 3a10 	vmov	r3, s0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7f7 fc66 	bl	8000578 <__aeabi_f2d>
 8008cac:	4603      	mov	r3, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4623      	mov	r3, r4
 8008cb4:	488c      	ldr	r0, [pc, #560]	; (8008ee8 <cppLoop+0x11e8>)
 8008cb6:	f7f8 fa2d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008cba:	2101      	movs	r1, #1
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	f7f8 f9ff 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008cc2:	4888      	ldr	r0, [pc, #544]	; (8008ee4 <cppLoop+0x11e4>)
 8008cc4:	f7fb f891 	bl	8003dea <_ZN9LineTrace15getMinVelocity2Ev>
 8008cc8:	ee10 3a10 	vmov	r3, s0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f7 fc53 	bl	8000578 <__aeabi_f2d>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	4623      	mov	r3, r4
 8008cda:	4884      	ldr	r0, [pc, #528]	; (8008eec <cppLoop+0x11ec>)
 8008cdc:	f7f8 fa1a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008ce0:	4883      	ldr	r0, [pc, #524]	; (8008ef0 <cppLoop+0x11f0>)
 8008ce2:	f7f9 fa43 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	bf0c      	ite	eq
 8008cec:	2301      	moveq	r3, #1
 8008cee:	2300      	movne	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d022      	beq.n	8008d3c <cppLoop+0x103c>
			led.LR(-1, 1);
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8008cfc:	4878      	ldr	r0, [pc, #480]	; (8008ee0 <cppLoop+0x11e0>)
 8008cfe:	f7f9 fb55 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d06:	f001 f8eb 	bl	8009ee0 <HAL_Delay>

			selector_vel2++;
 8008d0a:	4b7a      	ldr	r3, [pc, #488]	; (8008ef4 <cppLoop+0x11f4>)
 8008d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3301      	adds	r3, #1
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	b21a      	sxth	r2, r3
 8008d18:	4b76      	ldr	r3, [pc, #472]	; (8008ef4 <cppLoop+0x11f4>)
 8008d1a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008d1c:	4b75      	ldr	r3, [pc, #468]	; (8008ef4 <cppLoop+0x11f4>)
 8008d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	dd02      	ble.n	8008d2c <cppLoop+0x102c>
 8008d26:	4b73      	ldr	r3, [pc, #460]	; (8008ef4 <cppLoop+0x11f4>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d32:	486b      	ldr	r0, [pc, #428]	; (8008ee0 <cppLoop+0x11e0>)
 8008d34:	f7f9 fb3a 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008d38:	f000 bf96 	b.w	8009c68 <cppLoop+0x1f68>
		else if(joy_stick.getValue() == JOY_R){
 8008d3c:	486c      	ldr	r0, [pc, #432]	; (8008ef0 <cppLoop+0x11f0>)
 8008d3e:	f7f9 fa15 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b10      	cmp	r3, #16
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d03c      	beq.n	8008dcc <cppLoop+0x10cc>
			led.LR(-1, 1);
 8008d52:	2201      	movs	r2, #1
 8008d54:	f04f 31ff 	mov.w	r1, #4294967295
 8008d58:	4861      	ldr	r0, [pc, #388]	; (8008ee0 <cppLoop+0x11e0>)
 8008d5a:	f7f9 fb27 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d5e:	2064      	movs	r0, #100	; 0x64
 8008d60:	f001 f8be 	bl	8009ee0 <HAL_Delay>
			if(selector_vel2 == 0)
 8008d64:	4b63      	ldr	r3, [pc, #396]	; (8008ef4 <cppLoop+0x11f4>)
 8008d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d113      	bne.n	8008d96 <cppLoop+0x1096>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008d6e:	4b62      	ldr	r3, [pc, #392]	; (8008ef8 <cppLoop+0x11f8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f7 fc00 	bl	8000578 <__aeabi_f2d>
 8008d78:	a357      	add	r3, pc, #348	; (adr r3, 8008ed8 <cppLoop+0x11d8>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa9d 	bl	80002bc <__adddf3>
 8008d82:	4603      	mov	r3, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	4618      	mov	r0, r3
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f7f7 ff45 	bl	8000c18 <__aeabi_d2f>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <cppLoop+0x11f8>)
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e012      	b.n	8008dbc <cppLoop+0x10bc>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008d96:	4b59      	ldr	r3, [pc, #356]	; (8008efc <cppLoop+0x11fc>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f7 fbec 	bl	8000578 <__aeabi_f2d>
 8008da0:	a34d      	add	r3, pc, #308	; (adr r3, 8008ed8 <cppLoop+0x11d8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa89 	bl	80002bc <__adddf3>
 8008daa:	4603      	mov	r3, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	4618      	mov	r0, r3
 8008db0:	4621      	mov	r1, r4
 8008db2:	f7f7 ff31 	bl	8000c18 <__aeabi_d2f>
 8008db6:	4602      	mov	r2, r0
 8008db8:	4b50      	ldr	r3, [pc, #320]	; (8008efc <cppLoop+0x11fc>)
 8008dba:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8008dc2:	4847      	ldr	r0, [pc, #284]	; (8008ee0 <cppLoop+0x11e0>)
 8008dc4:	f7f9 faf2 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008dc8:	f000 bf4e 	b.w	8009c68 <cppLoop+0x1f68>
		else if(joy_stick.getValue() == JOY_L){
 8008dcc:	4848      	ldr	r0, [pc, #288]	; (8008ef0 <cppLoop+0x11f0>)
 8008dce:	f7f9 f9cd 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	bf0c      	ite	eq
 8008dd8:	2301      	moveq	r3, #1
 8008dda:	2300      	movne	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d03c      	beq.n	8008e5c <cppLoop+0x115c>
			led.LR(-1, 1);
 8008de2:	2201      	movs	r2, #1
 8008de4:	f04f 31ff 	mov.w	r1, #4294967295
 8008de8:	483d      	ldr	r0, [pc, #244]	; (8008ee0 <cppLoop+0x11e0>)
 8008dea:	f7f9 fadf 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008dee:	2064      	movs	r0, #100	; 0x64
 8008df0:	f001 f876 	bl	8009ee0 <HAL_Delay>
			if(selector_vel2 == 0)
 8008df4:	4b3f      	ldr	r3, [pc, #252]	; (8008ef4 <cppLoop+0x11f4>)
 8008df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d113      	bne.n	8008e26 <cppLoop+0x1126>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008dfe:	4b3e      	ldr	r3, [pc, #248]	; (8008ef8 <cppLoop+0x11f8>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f7 fbb8 	bl	8000578 <__aeabi_f2d>
 8008e08:	a333      	add	r3, pc, #204	; (adr r3, 8008ed8 <cppLoop+0x11d8>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fa53 	bl	80002b8 <__aeabi_dsub>
 8008e12:	4603      	mov	r3, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	4618      	mov	r0, r3
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f7f7 fefd 	bl	8000c18 <__aeabi_d2f>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <cppLoop+0x11f8>)
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	e012      	b.n	8008e4c <cppLoop+0x114c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008e26:	4b35      	ldr	r3, [pc, #212]	; (8008efc <cppLoop+0x11fc>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 fba4 	bl	8000578 <__aeabi_f2d>
 8008e30:	a329      	add	r3, pc, #164	; (adr r3, 8008ed8 <cppLoop+0x11d8>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fa3f 	bl	80002b8 <__aeabi_dsub>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	4618      	mov	r0, r3
 8008e40:	4621      	mov	r1, r4
 8008e42:	f7f7 fee9 	bl	8000c18 <__aeabi_d2f>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b2c      	ldr	r3, [pc, #176]	; (8008efc <cppLoop+0x11fc>)
 8008e4a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e52:	4823      	ldr	r0, [pc, #140]	; (8008ee0 <cppLoop+0x11e0>)
 8008e54:	f7f9 faaa 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008e58:	f000 bf06 	b.w	8009c68 <cppLoop+0x1f68>
		else if(joy_stick.getValue() == JOY_C){
 8008e5c:	4824      	ldr	r0, [pc, #144]	; (8008ef0 <cppLoop+0x11f0>)
 8008e5e:	f7f9 f985 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 86fa 	beq.w	8009c68 <cppLoop+0x1f68>
			led.LR(-1, 1);
 8008e74:	2201      	movs	r2, #1
 8008e76:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7a:	4819      	ldr	r0, [pc, #100]	; (8008ee0 <cppLoop+0x11e0>)
 8008e7c:	f7f9 fa96 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e84:	f001 f82c 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <cppLoop+0x11f8>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	491b      	ldr	r1, [pc, #108]	; (8008f00 <cppLoop+0x1200>)
 8008e92:	481c      	ldr	r0, [pc, #112]	; (8008f04 <cppLoop+0x1204>)
 8008e94:	f7f8 fce2 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4b17      	ldr	r3, [pc, #92]	; (8008efc <cppLoop+0x11fc>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4919      	ldr	r1, [pc, #100]	; (8008f08 <cppLoop+0x1208>)
 8008ea2:	4818      	ldr	r0, [pc, #96]	; (8008f04 <cppLoop+0x1204>)
 8008ea4:	f7f8 fcda 	bl	800185c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008ea8:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <cppLoop+0x11f8>)
 8008eaa:	edd3 7a00 	vldr	s15, [r3]
 8008eae:	eeb0 0a67 	vmov.f32	s0, s15
 8008eb2:	480c      	ldr	r0, [pc, #48]	; (8008ee4 <cppLoop+0x11e4>)
 8008eb4:	f7fa ff29 	bl	8003d0a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008eb8:	4b10      	ldr	r3, [pc, #64]	; (8008efc <cppLoop+0x11fc>)
 8008eba:	edd3 7a00 	vldr	s15, [r3]
 8008ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8008ec2:	4808      	ldr	r0, [pc, #32]	; (8008ee4 <cppLoop+0x11e4>)
 8008ec4:	f7fa ff41 	bl	8003d4a <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f04f 31ff 	mov.w	r1, #4294967295
 8008ece:	4804      	ldr	r0, [pc, #16]	; (8008ee0 <cppLoop+0x11e0>)
 8008ed0:	f7f9 fa6c 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008ed4:	f000 bec8 	b.w	8009c68 <cppLoop+0x1f68>
 8008ed8:	9999999a 	.word	0x9999999a
 8008edc:	3fb99999 	.word	0x3fb99999
 8008ee0:	2000060c 	.word	0x2000060c
 8008ee4:	2001db9c 	.word	0x2001db9c
 8008ee8:	0801a078 	.word	0x0801a078
 8008eec:	0801a03c 	.word	0x0801a03c
 8008ef0:	20000600 	.word	0x20000600
 8008ef4:	20042284 	.word	0x20042284
 8008ef8:	200422c8 	.word	0x200422c8
 8008efc:	200422d8 	.word	0x200422d8
 8008f00:	0801a084 	.word	0x0801a084
 8008f04:	08019fe0 	.word	0x08019fe0
 8008f08:	0801a090 	.word	0x0801a090

	case 7:
		led.fullColor('W');
 8008f0c:	2157      	movs	r1, #87	; 0x57
 8008f0e:	48c2      	ldr	r0, [pc, #776]	; (8009218 <cppLoop+0x1518>)
 8008f10:	f7f9 f990 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f14:	f7f8 f8c4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f18:	2100      	movs	r1, #0
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f7f8 f8d0 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008f20:	48be      	ldr	r0, [pc, #760]	; (800921c <cppLoop+0x151c>)
 8008f22:	f7fa ffa6 	bl	8003e72 <_ZN9LineTrace9getMaxAccEv>
 8008f26:	ee10 3a10 	vmov	r3, s0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7f7 fb24 	bl	8000578 <__aeabi_f2d>
 8008f30:	4603      	mov	r3, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	461a      	mov	r2, r3
 8008f36:	4623      	mov	r3, r4
 8008f38:	48b9      	ldr	r0, [pc, #740]	; (8009220 <cppLoop+0x1520>)
 8008f3a:	f7f8 f8eb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f3e:	2101      	movs	r1, #1
 8008f40:	2000      	movs	r0, #0
 8008f42:	f7f8 f8bd 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008f46:	48b5      	ldr	r0, [pc, #724]	; (800921c <cppLoop+0x151c>)
 8008f48:	f7fa ffc9 	bl	8003ede <_ZN9LineTrace9getMaxDecEv>
 8008f4c:	ee10 3a10 	vmov	r3, s0
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7f7 fb11 	bl	8000578 <__aeabi_f2d>
 8008f56:	4603      	mov	r3, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	48b1      	ldr	r0, [pc, #708]	; (8009224 <cppLoop+0x1524>)
 8008f60:	f7f8 f8d8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008f64:	48b0      	ldr	r0, [pc, #704]	; (8009228 <cppLoop+0x1528>)
 8008f66:	f7f9 f901 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d022      	beq.n	8008fc0 <cppLoop+0x12c0>
			led.LR(-1, 1);
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f80:	48a5      	ldr	r0, [pc, #660]	; (8009218 <cppLoop+0x1518>)
 8008f82:	f7f9 fa13 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f8a:	f000 ffa9 	bl	8009ee0 <HAL_Delay>

			selector_acc++;
 8008f8e:	4ba7      	ldr	r3, [pc, #668]	; (800922c <cppLoop+0x152c>)
 8008f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3301      	adds	r3, #1
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b21a      	sxth	r2, r3
 8008f9c:	4ba3      	ldr	r3, [pc, #652]	; (800922c <cppLoop+0x152c>)
 8008f9e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008fa0:	4ba2      	ldr	r3, [pc, #648]	; (800922c <cppLoop+0x152c>)
 8008fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	dd02      	ble.n	8008fb0 <cppLoop+0x12b0>
 8008faa:	4ba0      	ldr	r3, [pc, #640]	; (800922c <cppLoop+0x152c>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb6:	4898      	ldr	r0, [pc, #608]	; (8009218 <cppLoop+0x1518>)
 8008fb8:	f7f9 f9f8 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008fbc:	f000 be56 	b.w	8009c6c <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 8008fc0:	4899      	ldr	r0, [pc, #612]	; (8009228 <cppLoop+0x1528>)
 8008fc2:	f7f9 f8d3 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	bf0c      	ite	eq
 8008fcc:	2301      	moveq	r3, #1
 8008fce:	2300      	movne	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d03c      	beq.n	8009050 <cppLoop+0x1350>
			led.LR(-1, 1);
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8008fdc:	488e      	ldr	r0, [pc, #568]	; (8009218 <cppLoop+0x1518>)
 8008fde:	f7f9 f9e5 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008fe2:	2064      	movs	r0, #100	; 0x64
 8008fe4:	f000 ff7c 	bl	8009ee0 <HAL_Delay>
			if(selector_acc == 0){
 8008fe8:	4b90      	ldr	r3, [pc, #576]	; (800922c <cppLoop+0x152c>)
 8008fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d113      	bne.n	800901a <cppLoop+0x131a>
				adj_acc = adj_acc + 0.1;
 8008ff2:	4b8f      	ldr	r3, [pc, #572]	; (8009230 <cppLoop+0x1530>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f7 fabe 	bl	8000578 <__aeabi_f2d>
 8008ffc:	a384      	add	r3, pc, #528	; (adr r3, 8009210 <cppLoop+0x1510>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 f95b 	bl	80002bc <__adddf3>
 8009006:	4603      	mov	r3, r0
 8009008:	460c      	mov	r4, r1
 800900a:	4618      	mov	r0, r3
 800900c:	4621      	mov	r1, r4
 800900e:	f7f7 fe03 	bl	8000c18 <__aeabi_d2f>
 8009012:	4602      	mov	r2, r0
 8009014:	4b86      	ldr	r3, [pc, #536]	; (8009230 <cppLoop+0x1530>)
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e012      	b.n	8009040 <cppLoop+0x1340>
				adj_dec = adj_dec + 0.1;
 800901a:	4b86      	ldr	r3, [pc, #536]	; (8009234 <cppLoop+0x1534>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 faaa 	bl	8000578 <__aeabi_f2d>
 8009024:	a37a      	add	r3, pc, #488	; (adr r3, 8009210 <cppLoop+0x1510>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 f947 	bl	80002bc <__adddf3>
 800902e:	4603      	mov	r3, r0
 8009030:	460c      	mov	r4, r1
 8009032:	4618      	mov	r0, r3
 8009034:	4621      	mov	r1, r4
 8009036:	f7f7 fdef 	bl	8000c18 <__aeabi_d2f>
 800903a:	4602      	mov	r2, r0
 800903c:	4b7d      	ldr	r3, [pc, #500]	; (8009234 <cppLoop+0x1534>)
 800903e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009040:	2200      	movs	r2, #0
 8009042:	f04f 31ff 	mov.w	r1, #4294967295
 8009046:	4874      	ldr	r0, [pc, #464]	; (8009218 <cppLoop+0x1518>)
 8009048:	f7f9 f9b0 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800904c:	f000 be0e 	b.w	8009c6c <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8009050:	4875      	ldr	r0, [pc, #468]	; (8009228 <cppLoop+0x1528>)
 8009052:	f7f9 f88b 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009056:	4603      	mov	r3, r0
 8009058:	2b01      	cmp	r3, #1
 800905a:	bf0c      	ite	eq
 800905c:	2301      	moveq	r3, #1
 800905e:	2300      	movne	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d03c      	beq.n	80090e0 <cppLoop+0x13e0>
			led.LR(-1, 1);
 8009066:	2201      	movs	r2, #1
 8009068:	f04f 31ff 	mov.w	r1, #4294967295
 800906c:	486a      	ldr	r0, [pc, #424]	; (8009218 <cppLoop+0x1518>)
 800906e:	f7f9 f99d 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009072:	2064      	movs	r0, #100	; 0x64
 8009074:	f000 ff34 	bl	8009ee0 <HAL_Delay>
			if(selector_acc == 0){
 8009078:	4b6c      	ldr	r3, [pc, #432]	; (800922c <cppLoop+0x152c>)
 800907a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d113      	bne.n	80090aa <cppLoop+0x13aa>
				adj_acc = adj_acc - 0.1;
 8009082:	4b6b      	ldr	r3, [pc, #428]	; (8009230 <cppLoop+0x1530>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f7f7 fa76 	bl	8000578 <__aeabi_f2d>
 800908c:	a360      	add	r3, pc, #384	; (adr r3, 8009210 <cppLoop+0x1510>)
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f7f7 f911 	bl	80002b8 <__aeabi_dsub>
 8009096:	4603      	mov	r3, r0
 8009098:	460c      	mov	r4, r1
 800909a:	4618      	mov	r0, r3
 800909c:	4621      	mov	r1, r4
 800909e:	f7f7 fdbb 	bl	8000c18 <__aeabi_d2f>
 80090a2:	4602      	mov	r2, r0
 80090a4:	4b62      	ldr	r3, [pc, #392]	; (8009230 <cppLoop+0x1530>)
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e012      	b.n	80090d0 <cppLoop+0x13d0>
				adj_dec = adj_dec - 0.1;
 80090aa:	4b62      	ldr	r3, [pc, #392]	; (8009234 <cppLoop+0x1534>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7f7 fa62 	bl	8000578 <__aeabi_f2d>
 80090b4:	a356      	add	r3, pc, #344	; (adr r3, 8009210 <cppLoop+0x1510>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8fd 	bl	80002b8 <__aeabi_dsub>
 80090be:	4603      	mov	r3, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	4618      	mov	r0, r3
 80090c4:	4621      	mov	r1, r4
 80090c6:	f7f7 fda7 	bl	8000c18 <__aeabi_d2f>
 80090ca:	4602      	mov	r2, r0
 80090cc:	4b59      	ldr	r3, [pc, #356]	; (8009234 <cppLoop+0x1534>)
 80090ce:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80090d0:	2200      	movs	r2, #0
 80090d2:	f04f 31ff 	mov.w	r1, #4294967295
 80090d6:	4850      	ldr	r0, [pc, #320]	; (8009218 <cppLoop+0x1518>)
 80090d8:	f7f9 f968 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80090dc:	f000 bdc6 	b.w	8009c6c <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_C){
 80090e0:	4851      	ldr	r0, [pc, #324]	; (8009228 <cppLoop+0x1528>)
 80090e2:	f7f9 f843 	bl	800216c <_ZN8JoyStick8getValueEv>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	bf0c      	ite	eq
 80090ec:	2301      	moveq	r3, #1
 80090ee:	2300      	movne	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 85ba 	beq.w	8009c6c <cppLoop+0x1f6c>
			led.LR(-1, 1);
 80090f8:	2201      	movs	r2, #1
 80090fa:	f04f 31ff 	mov.w	r1, #4294967295
 80090fe:	4846      	ldr	r0, [pc, #280]	; (8009218 <cppLoop+0x1518>)
 8009100:	f7f9 f954 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009104:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009108:	f000 feea 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800910c:	2300      	movs	r3, #0
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4b47      	ldr	r3, [pc, #284]	; (8009230 <cppLoop+0x1530>)
 8009112:	2201      	movs	r2, #1
 8009114:	4948      	ldr	r1, [pc, #288]	; (8009238 <cppLoop+0x1538>)
 8009116:	4849      	ldr	r0, [pc, #292]	; (800923c <cppLoop+0x153c>)
 8009118:	f7f8 fba0 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800911c:	2300      	movs	r3, #0
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4b44      	ldr	r3, [pc, #272]	; (8009234 <cppLoop+0x1534>)
 8009122:	2201      	movs	r2, #1
 8009124:	4946      	ldr	r1, [pc, #280]	; (8009240 <cppLoop+0x1540>)
 8009126:	4845      	ldr	r0, [pc, #276]	; (800923c <cppLoop+0x153c>)
 8009128:	f7f8 fb98 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800912c:	4b40      	ldr	r3, [pc, #256]	; (8009230 <cppLoop+0x1530>)
 800912e:	edd3 7a00 	vldr	s15, [r3]
 8009132:	4b40      	ldr	r3, [pc, #256]	; (8009234 <cppLoop+0x1534>)
 8009134:	ed93 7a00 	vldr	s14, [r3]
 8009138:	eef0 0a47 	vmov.f32	s1, s14
 800913c:	eeb0 0a67 	vmov.f32	s0, s15
 8009140:	4836      	ldr	r0, [pc, #216]	; (800921c <cppLoop+0x151c>)
 8009142:	f7fa fe62 	bl	8003e0a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8009146:	2200      	movs	r2, #0
 8009148:	f04f 31ff 	mov.w	r1, #4294967295
 800914c:	4832      	ldr	r0, [pc, #200]	; (8009218 <cppLoop+0x1518>)
 800914e:	f7f9 f92d 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8009152:	f000 bd8b 	b.w	8009c6c <cppLoop+0x1f6c>

	case 8:
		led.fullColor('W');
 8009156:	2157      	movs	r1, #87	; 0x57
 8009158:	482f      	ldr	r0, [pc, #188]	; (8009218 <cppLoop+0x1518>)
 800915a:	f7f9 f86b 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 800915e:	f7f7 ff9f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009162:	2100      	movs	r1, #0
 8009164:	2000      	movs	r0, #0
 8009166:	f7f7 ffab 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800916a:	482c      	ldr	r0, [pc, #176]	; (800921c <cppLoop+0x151c>)
 800916c:	f7fa fea5 	bl	8003eba <_ZN9LineTrace10getMaxAcc2Ev>
 8009170:	ee10 3a10 	vmov	r3, s0
 8009174:	4618      	mov	r0, r3
 8009176:	f7f7 f9ff 	bl	8000578 <__aeabi_f2d>
 800917a:	4603      	mov	r3, r0
 800917c:	460c      	mov	r4, r1
 800917e:	461a      	mov	r2, r3
 8009180:	4623      	mov	r3, r4
 8009182:	4830      	ldr	r0, [pc, #192]	; (8009244 <cppLoop+0x1544>)
 8009184:	f7f7 ffc6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009188:	2101      	movs	r1, #1
 800918a:	2000      	movs	r0, #0
 800918c:	f7f7 ff98 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8009190:	4822      	ldr	r0, [pc, #136]	; (800921c <cppLoop+0x151c>)
 8009192:	f7fa fe80 	bl	8003e96 <_ZN9LineTrace10getMaxDec2Ev>
 8009196:	ee10 3a10 	vmov	r3, s0
 800919a:	4618      	mov	r0, r3
 800919c:	f7f7 f9ec 	bl	8000578 <__aeabi_f2d>
 80091a0:	4603      	mov	r3, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	461a      	mov	r2, r3
 80091a6:	4623      	mov	r3, r4
 80091a8:	4827      	ldr	r0, [pc, #156]	; (8009248 <cppLoop+0x1548>)
 80091aa:	f7f7 ffb3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80091ae:	481e      	ldr	r0, [pc, #120]	; (8009228 <cppLoop+0x1528>)
 80091b0:	f7f8 ffdc 	bl	800216c <_ZN8JoyStick8getValueEv>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b08      	cmp	r3, #8
 80091b8:	bf0c      	ite	eq
 80091ba:	2301      	moveq	r3, #1
 80091bc:	2300      	movne	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d045      	beq.n	8009250 <cppLoop+0x1550>
			led.LR(-1, 1);
 80091c4:	2201      	movs	r2, #1
 80091c6:	f04f 31ff 	mov.w	r1, #4294967295
 80091ca:	4813      	ldr	r0, [pc, #76]	; (8009218 <cppLoop+0x1518>)
 80091cc:	f7f9 f8ee 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091d4:	f000 fe84 	bl	8009ee0 <HAL_Delay>

			selector_acc2++;
 80091d8:	4b1c      	ldr	r3, [pc, #112]	; (800924c <cppLoop+0x154c>)
 80091da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3301      	adds	r3, #1
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	b21a      	sxth	r2, r3
 80091e6:	4b19      	ldr	r3, [pc, #100]	; (800924c <cppLoop+0x154c>)
 80091e8:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 80091ea:	4b18      	ldr	r3, [pc, #96]	; (800924c <cppLoop+0x154c>)
 80091ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	dd02      	ble.n	80091fa <cppLoop+0x14fa>
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <cppLoop+0x154c>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80091fa:	2200      	movs	r2, #0
 80091fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009200:	4805      	ldr	r0, [pc, #20]	; (8009218 <cppLoop+0x1518>)
 8009202:	f7f9 f8d3 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009206:	f000 bd33 	b.w	8009c70 <cppLoop+0x1f70>
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w
 8009210:	9999999a 	.word	0x9999999a
 8009214:	3fb99999 	.word	0x3fb99999
 8009218:	2000060c 	.word	0x2000060c
 800921c:	2001db9c 	.word	0x2001db9c
 8009220:	0801a09c 	.word	0x0801a09c
 8009224:	0801a0a8 	.word	0x0801a0a8
 8009228:	20000600 	.word	0x20000600
 800922c:	2004227e 	.word	0x2004227e
 8009230:	200422e0 	.word	0x200422e0
 8009234:	200422e8 	.word	0x200422e8
 8009238:	0801a0b4 	.word	0x0801a0b4
 800923c:	08019fe0 	.word	0x08019fe0
 8009240:	0801a0bc 	.word	0x0801a0bc
 8009244:	0801a0c4 	.word	0x0801a0c4
 8009248:	0801a0d0 	.word	0x0801a0d0
 800924c:	20042280 	.word	0x20042280
		else if(joy_stick.getValue() == JOY_R){
 8009250:	48bf      	ldr	r0, [pc, #764]	; (8009550 <cppLoop+0x1850>)
 8009252:	f7f8 ff8b 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009256:	4603      	mov	r3, r0
 8009258:	2b10      	cmp	r3, #16
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d03c      	beq.n	80092e0 <cppLoop+0x15e0>
			led.LR(-1, 1);
 8009266:	2201      	movs	r2, #1
 8009268:	f04f 31ff 	mov.w	r1, #4294967295
 800926c:	48b9      	ldr	r0, [pc, #740]	; (8009554 <cppLoop+0x1854>)
 800926e:	f7f9 f89d 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009272:	2064      	movs	r0, #100	; 0x64
 8009274:	f000 fe34 	bl	8009ee0 <HAL_Delay>
			if(selector_acc2 == 0){
 8009278:	4bb7      	ldr	r3, [pc, #732]	; (8009558 <cppLoop+0x1858>)
 800927a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d113      	bne.n	80092aa <cppLoop+0x15aa>
				adj_acc2 = adj_acc2 + 0.1;
 8009282:	4bb6      	ldr	r3, [pc, #728]	; (800955c <cppLoop+0x185c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7f7 f976 	bl	8000578 <__aeabi_f2d>
 800928c:	a3ae      	add	r3, pc, #696	; (adr r3, 8009548 <cppLoop+0x1848>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f7 f813 	bl	80002bc <__adddf3>
 8009296:	4603      	mov	r3, r0
 8009298:	460c      	mov	r4, r1
 800929a:	4618      	mov	r0, r3
 800929c:	4621      	mov	r1, r4
 800929e:	f7f7 fcbb 	bl	8000c18 <__aeabi_d2f>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4bad      	ldr	r3, [pc, #692]	; (800955c <cppLoop+0x185c>)
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	e012      	b.n	80092d0 <cppLoop+0x15d0>
				adj_dec2 = adj_dec2 + 0.1;
 80092aa:	4bad      	ldr	r3, [pc, #692]	; (8009560 <cppLoop+0x1860>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7f7 f962 	bl	8000578 <__aeabi_f2d>
 80092b4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009548 <cppLoop+0x1848>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ffff 	bl	80002bc <__adddf3>
 80092be:	4603      	mov	r3, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	4618      	mov	r0, r3
 80092c4:	4621      	mov	r1, r4
 80092c6:	f7f7 fca7 	bl	8000c18 <__aeabi_d2f>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4ba4      	ldr	r3, [pc, #656]	; (8009560 <cppLoop+0x1860>)
 80092ce:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80092d0:	2200      	movs	r2, #0
 80092d2:	f04f 31ff 	mov.w	r1, #4294967295
 80092d6:	489f      	ldr	r0, [pc, #636]	; (8009554 <cppLoop+0x1854>)
 80092d8:	f7f9 f868 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80092dc:	f000 bcc8 	b.w	8009c70 <cppLoop+0x1f70>
		else if(joy_stick.getValue() == JOY_L){
 80092e0:	489b      	ldr	r0, [pc, #620]	; (8009550 <cppLoop+0x1850>)
 80092e2:	f7f8 ff43 	bl	800216c <_ZN8JoyStick8getValueEv>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	bf0c      	ite	eq
 80092ec:	2301      	moveq	r3, #1
 80092ee:	2300      	movne	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d03c      	beq.n	8009370 <cppLoop+0x1670>
			led.LR(-1, 1);
 80092f6:	2201      	movs	r2, #1
 80092f8:	f04f 31ff 	mov.w	r1, #4294967295
 80092fc:	4895      	ldr	r0, [pc, #596]	; (8009554 <cppLoop+0x1854>)
 80092fe:	f7f9 f855 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009302:	2064      	movs	r0, #100	; 0x64
 8009304:	f000 fdec 	bl	8009ee0 <HAL_Delay>
			if(selector_acc2 == 0){
 8009308:	4b93      	ldr	r3, [pc, #588]	; (8009558 <cppLoop+0x1858>)
 800930a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d113      	bne.n	800933a <cppLoop+0x163a>
				adj_acc2 = adj_acc2 - 0.1;
 8009312:	4b92      	ldr	r3, [pc, #584]	; (800955c <cppLoop+0x185c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7f7 f92e 	bl	8000578 <__aeabi_f2d>
 800931c:	a38a      	add	r3, pc, #552	; (adr r3, 8009548 <cppLoop+0x1848>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ffc9 	bl	80002b8 <__aeabi_dsub>
 8009326:	4603      	mov	r3, r0
 8009328:	460c      	mov	r4, r1
 800932a:	4618      	mov	r0, r3
 800932c:	4621      	mov	r1, r4
 800932e:	f7f7 fc73 	bl	8000c18 <__aeabi_d2f>
 8009332:	4602      	mov	r2, r0
 8009334:	4b89      	ldr	r3, [pc, #548]	; (800955c <cppLoop+0x185c>)
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e012      	b.n	8009360 <cppLoop+0x1660>
				adj_dec2 = adj_dec2 - 0.1;
 800933a:	4b89      	ldr	r3, [pc, #548]	; (8009560 <cppLoop+0x1860>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f7f7 f91a 	bl	8000578 <__aeabi_f2d>
 8009344:	a380      	add	r3, pc, #512	; (adr r3, 8009548 <cppLoop+0x1848>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ffb5 	bl	80002b8 <__aeabi_dsub>
 800934e:	4603      	mov	r3, r0
 8009350:	460c      	mov	r4, r1
 8009352:	4618      	mov	r0, r3
 8009354:	4621      	mov	r1, r4
 8009356:	f7f7 fc5f 	bl	8000c18 <__aeabi_d2f>
 800935a:	4602      	mov	r2, r0
 800935c:	4b80      	ldr	r3, [pc, #512]	; (8009560 <cppLoop+0x1860>)
 800935e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	f04f 31ff 	mov.w	r1, #4294967295
 8009366:	487b      	ldr	r0, [pc, #492]	; (8009554 <cppLoop+0x1854>)
 8009368:	f7f9 f820 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800936c:	f000 bc80 	b.w	8009c70 <cppLoop+0x1f70>
		else if(joy_stick.getValue() == JOY_C){
 8009370:	4877      	ldr	r0, [pc, #476]	; (8009550 <cppLoop+0x1850>)
 8009372:	f7f8 fefb 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009376:	4603      	mov	r3, r0
 8009378:	2b02      	cmp	r3, #2
 800937a:	bf0c      	ite	eq
 800937c:	2301      	moveq	r3, #1
 800937e:	2300      	movne	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 8474 	beq.w	8009c70 <cppLoop+0x1f70>
			led.LR(-1, 1);
 8009388:	2201      	movs	r2, #1
 800938a:	f04f 31ff 	mov.w	r1, #4294967295
 800938e:	4871      	ldr	r0, [pc, #452]	; (8009554 <cppLoop+0x1854>)
 8009390:	f7f9 f80c 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009394:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009398:	f000 fda2 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800939c:	2300      	movs	r3, #0
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	4b6e      	ldr	r3, [pc, #440]	; (800955c <cppLoop+0x185c>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	496f      	ldr	r1, [pc, #444]	; (8009564 <cppLoop+0x1864>)
 80093a6:	4870      	ldr	r0, [pc, #448]	; (8009568 <cppLoop+0x1868>)
 80093a8:	f7f8 fa58 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80093ac:	2300      	movs	r3, #0
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4b6b      	ldr	r3, [pc, #428]	; (8009560 <cppLoop+0x1860>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	496d      	ldr	r1, [pc, #436]	; (800956c <cppLoop+0x186c>)
 80093b6:	486c      	ldr	r0, [pc, #432]	; (8009568 <cppLoop+0x1868>)
 80093b8:	f7f8 fa50 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80093bc:	4b67      	ldr	r3, [pc, #412]	; (800955c <cppLoop+0x185c>)
 80093be:	edd3 7a00 	vldr	s15, [r3]
 80093c2:	4b67      	ldr	r3, [pc, #412]	; (8009560 <cppLoop+0x1860>)
 80093c4:	ed93 7a00 	vldr	s14, [r3]
 80093c8:	eef0 0a47 	vmov.f32	s1, s14
 80093cc:	eeb0 0a67 	vmov.f32	s0, s15
 80093d0:	4867      	ldr	r0, [pc, #412]	; (8009570 <cppLoop+0x1870>)
 80093d2:	f7fa fd34 	bl	8003e3e <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80093d6:	2200      	movs	r2, #0
 80093d8:	f04f 31ff 	mov.w	r1, #4294967295
 80093dc:	485d      	ldr	r0, [pc, #372]	; (8009554 <cppLoop+0x1854>)
 80093de:	f7f8 ffe5 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80093e2:	f000 bc45 	b.w	8009c70 <cppLoop+0x1f70>

	case 9:
		led.fullColor('~');
 80093e6:	217e      	movs	r1, #126	; 0x7e
 80093e8:	485a      	ldr	r0, [pc, #360]	; (8009554 <cppLoop+0x1854>)
 80093ea:	f7f8 ff23 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80093ee:	f7f7 fe57 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093f2:	2100      	movs	r1, #0
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f7 fe63 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80093fa:	485e      	ldr	r0, [pc, #376]	; (8009574 <cppLoop+0x1874>)
 80093fc:	f7f7 fe8a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009400:	2101      	movs	r1, #1
 8009402:	2000      	movs	r0, #0
 8009404:	f7f7 fe5c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009408:	485b      	ldr	r0, [pc, #364]	; (8009578 <cppLoop+0x1878>)
 800940a:	f7f7 fe83 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800940e:	4850      	ldr	r0, [pc, #320]	; (8009550 <cppLoop+0x1850>)
 8009410:	f7f8 feac 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009414:	4603      	mov	r3, r0
 8009416:	2b02      	cmp	r3, #2
 8009418:	bf0c      	ite	eq
 800941a:	2301      	moveq	r3, #1
 800941c:	2300      	movne	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8427 	beq.w	8009c74 <cppLoop+0x1f74>
			led.LR(-1, 1);
 8009426:	2201      	movs	r2, #1
 8009428:	f04f 31ff 	mov.w	r1, #4294967295
 800942c:	4849      	ldr	r0, [pc, #292]	; (8009554 <cppLoop+0x1854>)
 800942e:	f7f8 ffbd 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009436:	f000 fd53 	bl	8009ee0 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800943a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800957c <cppLoop+0x187c>
 800943e:	484c      	ldr	r0, [pc, #304]	; (8009570 <cppLoop+0x1870>)
 8009440:	f7fa fc34 	bl	8003cac <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009444:	484a      	ldr	r0, [pc, #296]	; (8009570 <cppLoop+0x1870>)
 8009446:	f7fa fe7f 	bl	8004148 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800944a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800944e:	f000 fd47 	bl	8009ee0 <HAL_Delay>

			led.fullColor('R');
 8009452:	2152      	movs	r1, #82	; 0x52
 8009454:	483f      	ldr	r0, [pc, #252]	; (8009554 <cppLoop+0x1854>)
 8009456:	f7f8 feed 	bl	8002234 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800945a:	4849      	ldr	r0, [pc, #292]	; (8009580 <cppLoop+0x1880>)
 800945c:	f7f8 f951 	bl	8001702 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009460:	f242 7010 	movw	r0, #10000	; 0x2710
 8009464:	f000 fd3c 	bl	8009ee0 <HAL_Delay>

			line_trace.stop();
 8009468:	4841      	ldr	r0, [pc, #260]	; (8009570 <cppLoop+0x1870>)
 800946a:	f7fa ff0d 	bl	8004288 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800946e:	4945      	ldr	r1, [pc, #276]	; (8009584 <cppLoop+0x1884>)
 8009470:	4845      	ldr	r0, [pc, #276]	; (8009588 <cppLoop+0x1888>)
 8009472:	f7f8 f97f 	bl	8001774 <user_fopen>
			float d = encoder.getDistance();
 8009476:	4842      	ldr	r0, [pc, #264]	; (8009580 <cppLoop+0x1880>)
 8009478:	f7f8 f916 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 800947c:	eef0 7a40 	vmov.f32	s15, s0
 8009480:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009484:	1d3b      	adds	r3, r7, #4
 8009486:	2201      	movs	r2, #1
 8009488:	4619      	mov	r1, r3
 800948a:	2001      	movs	r0, #1
 800948c:	f7f8 f994 	bl	80017b8 <sd_write_float>
			user_fclose();
 8009490:	f7f8 f982 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 8009494:	2200      	movs	r2, #0
 8009496:	f04f 31ff 	mov.w	r1, #4294967295
 800949a:	482e      	ldr	r0, [pc, #184]	; (8009554 <cppLoop+0x1854>)
 800949c:	f7f8 ff86 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 80094a0:	e3e8      	b.n	8009c74 <cppLoop+0x1f74>

	case 10:
		led.fullColor('~');
 80094a2:	217e      	movs	r1, #126	; 0x7e
 80094a4:	482b      	ldr	r0, [pc, #172]	; (8009554 <cppLoop+0x1854>)
 80094a6:	f7f8 fec5 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094aa:	f7f7 fdf9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094ae:	2100      	movs	r1, #0
 80094b0:	2000      	movs	r0, #0
 80094b2:	f7f7 fe05 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80094b6:	4835      	ldr	r0, [pc, #212]	; (800958c <cppLoop+0x188c>)
 80094b8:	f7f7 fe2c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094bc:	2101      	movs	r1, #1
 80094be:	2000      	movs	r0, #0
 80094c0:	f7f7 fdfe 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80094c4:	4832      	ldr	r0, [pc, #200]	; (8009590 <cppLoop+0x1890>)
 80094c6:	f7f7 fe25 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80094ca:	4821      	ldr	r0, [pc, #132]	; (8009550 <cppLoop+0x1850>)
 80094cc:	f7f8 fe4e 	bl	800216c <_ZN8JoyStick8getValueEv>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	bf0c      	ite	eq
 80094d6:	2301      	moveq	r3, #1
 80094d8:	2300      	movne	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 83cb 	beq.w	8009c78 <cppLoop+0x1f78>
			HAL_Delay(500);
 80094e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094e6:	f000 fcfb 	bl	8009ee0 <HAL_Delay>
			led.LR(-1, 1);
 80094ea:	2201      	movs	r2, #1
 80094ec:	f04f 31ff 	mov.w	r1, #4294967295
 80094f0:	4818      	ldr	r0, [pc, #96]	; (8009554 <cppLoop+0x1854>)
 80094f2:	f7f8 ff5b 	bl	80023ac <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80094f6:	2102      	movs	r1, #2
 80094f8:	481d      	ldr	r0, [pc, #116]	; (8009570 <cppLoop+0x1870>)
 80094fa:	f7fa fe13 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80094fe:	4b25      	ldr	r3, [pc, #148]	; (8009594 <cppLoop+0x1894>)
 8009500:	edd3 7a00 	vldr	s15, [r3]
 8009504:	eeb0 0a67 	vmov.f32	s0, s15
 8009508:	4819      	ldr	r0, [pc, #100]	; (8009570 <cppLoop+0x1870>)
 800950a:	f7fa fbde 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800950e:	4b21      	ldr	r3, [pc, #132]	; (8009594 <cppLoop+0x1894>)
 8009510:	edd3 7a00 	vldr	s15, [r3]
 8009514:	eeb0 0a67 	vmov.f32	s0, s15
 8009518:	4815      	ldr	r0, [pc, #84]	; (8009570 <cppLoop+0x1870>)
 800951a:	f7fa fbe6 	bl	8003cea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800951e:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <cppLoop+0x1894>)
 8009520:	edd3 7a00 	vldr	s15, [r3]
 8009524:	eeb0 0a67 	vmov.f32	s0, s15
 8009528:	4811      	ldr	r0, [pc, #68]	; (8009570 <cppLoop+0x1870>)
 800952a:	f7fa fbfe 	bl	8003d2a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800952e:	4810      	ldr	r0, [pc, #64]	; (8009570 <cppLoop+0x1870>)
 8009530:	f7fa ffee 	bl	8004510 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009534:	2200      	movs	r2, #0
 8009536:	f04f 31ff 	mov.w	r1, #4294967295
 800953a:	4806      	ldr	r0, [pc, #24]	; (8009554 <cppLoop+0x1854>)
 800953c:	f7f8 ff36 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 8009540:	e39a      	b.n	8009c78 <cppLoop+0x1f78>
 8009542:	bf00      	nop
 8009544:	f3af 8000 	nop.w
 8009548:	9999999a 	.word	0x9999999a
 800954c:	3fb99999 	.word	0x3fb99999
 8009550:	20000600 	.word	0x20000600
 8009554:	2000060c 	.word	0x2000060c
 8009558:	20042280 	.word	0x20042280
 800955c:	200422f0 	.word	0x200422f0
 8009560:	200422f8 	.word	0x200422f8
 8009564:	0801a0dc 	.word	0x0801a0dc
 8009568:	08019fe0 	.word	0x08019fe0
 800956c:	0801a0e8 	.word	0x0801a0e8
 8009570:	2001db9c 	.word	0x2001db9c
 8009574:	0801a0f4 	.word	0x0801a0f4
 8009578:	0801a0fc 	.word	0x0801a0fc
 800957c:	00000000 	.word	0x00000000
 8009580:	2001dafc 	.word	0x2001dafc
 8009584:	0801a108 	.word	0x0801a108
 8009588:	0801a110 	.word	0x0801a110
 800958c:	0801a11c 	.word	0x0801a11c
 8009590:	0801a128 	.word	0x0801a128
 8009594:	200422c8 	.word	0x200422c8

	case 11:
		led.fullColor('~');
 8009598:	217e      	movs	r1, #126	; 0x7e
 800959a:	48c4      	ldr	r0, [pc, #784]	; (80098ac <cppLoop+0x1bac>)
 800959c:	f7f8 fe4a 	bl	8002234 <_ZN3LED9fullColorEc>

lcd_clear();
 80095a0:	f7f7 fd7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095a4:	2100      	movs	r1, #0
 80095a6:	2000      	movs	r0, #0
 80095a8:	f7f7 fd8a 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80095ac:	48c0      	ldr	r0, [pc, #768]	; (80098b0 <cppLoop+0x1bb0>)
 80095ae:	f7f7 fdb1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095b2:	2101      	movs	r1, #1
 80095b4:	2000      	movs	r0, #0
 80095b6:	f7f7 fd83 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80095ba:	48be      	ldr	r0, [pc, #760]	; (80098b4 <cppLoop+0x1bb4>)
 80095bc:	f7f7 fdaa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095c0:	48bd      	ldr	r0, [pc, #756]	; (80098b8 <cppLoop+0x1bb8>)
 80095c2:	f7f8 fdd3 	bl	800216c <_ZN8JoyStick8getValueEv>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	bf0c      	ite	eq
 80095cc:	2301      	moveq	r3, #1
 80095ce:	2300      	movne	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8352 	beq.w	8009c7c <cppLoop+0x1f7c>
			HAL_Delay(1000);
 80095d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095dc:	f000 fc80 	bl	8009ee0 <HAL_Delay>
			led.LR(-1, 1);
 80095e0:	2201      	movs	r2, #1
 80095e2:	f04f 31ff 	mov.w	r1, #4294967295
 80095e6:	48b1      	ldr	r0, [pc, #708]	; (80098ac <cppLoop+0x1bac>)
 80095e8:	f7f8 fee0 	bl	80023ac <_ZN3LED2LREaa>

			esc.on(0.35, 0.35, 0.35, 0.35);
 80095ec:	eddf 1ab3 	vldr	s3, [pc, #716]	; 80098bc <cppLoop+0x1bbc>
 80095f0:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 80098bc <cppLoop+0x1bbc>
 80095f4:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80098bc <cppLoop+0x1bbc>
 80095f8:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80098bc <cppLoop+0x1bbc>
 80095fc:	48b0      	ldr	r0, [pc, #704]	; (80098c0 <cppLoop+0x1bc0>)
 80095fe:	f7f7 fe27 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009602:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009606:	f000 fc6b 	bl	8009ee0 <HAL_Delay>
			esc.off();
 800960a:	48ad      	ldr	r0, [pc, #692]	; (80098c0 <cppLoop+0x1bc0>)
 800960c:	f7f7 feba 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009610:	2200      	movs	r2, #0
 8009612:	f04f 31ff 	mov.w	r1, #4294967295
 8009616:	48a5      	ldr	r0, [pc, #660]	; (80098ac <cppLoop+0x1bac>)
 8009618:	f7f8 fec8 	bl	80023ac <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800961c:	e32e      	b.n	8009c7c <cppLoop+0x1f7c>

	case 12:
		led.fullColor('~');
 800961e:	217e      	movs	r1, #126	; 0x7e
 8009620:	48a2      	ldr	r0, [pc, #648]	; (80098ac <cppLoop+0x1bac>)
 8009622:	f7f8 fe07 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009626:	f7f7 fd3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800962a:	2100      	movs	r1, #0
 800962c:	2000      	movs	r0, #0
 800962e:	f7f7 fd47 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009632:	48a4      	ldr	r0, [pc, #656]	; (80098c4 <cppLoop+0x1bc4>)
 8009634:	f7f7 fd6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009638:	2101      	movs	r1, #1
 800963a:	2000      	movs	r0, #0
 800963c:	f7f7 fd40 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009640:	48a1      	ldr	r0, [pc, #644]	; (80098c8 <cppLoop+0x1bc8>)
 8009642:	f7f7 fd67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009646:	489c      	ldr	r0, [pc, #624]	; (80098b8 <cppLoop+0x1bb8>)
 8009648:	f7f8 fd90 	bl	800216c <_ZN8JoyStick8getValueEv>
 800964c:	4603      	mov	r3, r0
 800964e:	2b02      	cmp	r3, #2
 8009650:	bf0c      	ite	eq
 8009652:	2301      	moveq	r3, #1
 8009654:	2300      	movne	r3, #0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 8311 	beq.w	8009c80 <cppLoop+0x1f80>
			HAL_Delay(1500);
 800965e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009662:	f000 fc3d 	bl	8009ee0 <HAL_Delay>
			led.LR(-1, 1);
 8009666:	2201      	movs	r2, #1
 8009668:	f04f 31ff 	mov.w	r1, #4294967295
 800966c:	488f      	ldr	r0, [pc, #572]	; (80098ac <cppLoop+0x1bac>)
 800966e:	f7f8 fe9d 	bl	80023ac <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009672:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009676:	f000 fc33 	bl	8009ee0 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 800967a:	eddf 1a90 	vldr	s3, [pc, #576]	; 80098bc <cppLoop+0x1bbc>
 800967e:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80098bc <cppLoop+0x1bbc>
 8009682:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80098bc <cppLoop+0x1bbc>
 8009686:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80098bc <cppLoop+0x1bbc>
 800968a:	488d      	ldr	r0, [pc, #564]	; (80098c0 <cppLoop+0x1bc0>)
 800968c:	f7f7 fde0 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009694:	f000 fc24 	bl	8009ee0 <HAL_Delay>

			logger.start();
 8009698:	488c      	ldr	r0, [pc, #560]	; (80098cc <cppLoop+0x1bcc>)
 800969a:	f7fb fb2e 	bl	8004cfa <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800969e:	488c      	ldr	r0, [pc, #560]	; (80098d0 <cppLoop+0x1bd0>)
 80096a0:	f7fc fc83 	bl	8005faa <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80096a4:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80098d4 <cppLoop+0x1bd4>
 80096a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096ac:	4888      	ldr	r0, [pc, #544]	; (80098d0 <cppLoop+0x1bd0>)
 80096ae:	f7fc fc0f 	bl	8005ed0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80096b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096b6:	f000 fc13 	bl	8009ee0 <HAL_Delay>

			logger.stop();
 80096ba:	4884      	ldr	r0, [pc, #528]	; (80098cc <cppLoop+0x1bcc>)
 80096bc:	f7fb fb2d 	bl	8004d1a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80096c0:	4883      	ldr	r0, [pc, #524]	; (80098d0 <cppLoop+0x1bd0>)
 80096c2:	f7fc fc85 	bl	8005fd0 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80096c6:	487e      	ldr	r0, [pc, #504]	; (80098c0 <cppLoop+0x1bc0>)
 80096c8:	f7f7 fe5c 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80096cc:	4a82      	ldr	r2, [pc, #520]	; (80098d8 <cppLoop+0x1bd8>)
 80096ce:	4983      	ldr	r1, [pc, #524]	; (80098dc <cppLoop+0x1bdc>)
 80096d0:	487e      	ldr	r0, [pc, #504]	; (80098cc <cppLoop+0x1bcc>)
 80096d2:	f7fb fa09 	bl	8004ae8 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80096d6:	2200      	movs	r2, #0
 80096d8:	f04f 31ff 	mov.w	r1, #4294967295
 80096dc:	4873      	ldr	r0, [pc, #460]	; (80098ac <cppLoop+0x1bac>)
 80096de:	f7f8 fe65 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 80096e2:	e2cd      	b.n	8009c80 <cppLoop+0x1f80>

	case 13:

		led.fullColor('W');
 80096e4:	2157      	movs	r1, #87	; 0x57
 80096e6:	4871      	ldr	r0, [pc, #452]	; (80098ac <cppLoop+0x1bac>)
 80096e8:	f7f8 fda4 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80096ec:	f7f7 fcd8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096f0:	2100      	movs	r1, #0
 80096f2:	2000      	movs	r0, #0
 80096f4:	f7f7 fce4 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80096f8:	4879      	ldr	r0, [pc, #484]	; (80098e0 <cppLoop+0x1be0>)
 80096fa:	f7f7 fd0b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80096fe:	2101      	movs	r1, #1
 8009700:	2000      	movs	r0, #0
 8009702:	f7f7 fcdd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009706:	4b77      	ldr	r3, [pc, #476]	; (80098e4 <cppLoop+0x1be4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f7f6 ff34 	bl	8000578 <__aeabi_f2d>
 8009710:	4603      	mov	r3, r0
 8009712:	460c      	mov	r4, r1
 8009714:	461a      	mov	r2, r3
 8009716:	4623      	mov	r3, r4
 8009718:	4873      	ldr	r0, [pc, #460]	; (80098e8 <cppLoop+0x1be8>)
 800971a:	f7f7 fcfb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800971e:	4866      	ldr	r0, [pc, #408]	; (80098b8 <cppLoop+0x1bb8>)
 8009720:	f7f8 fd24 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009724:	4603      	mov	r3, r0
 8009726:	2b02      	cmp	r3, #2
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 82a7 	beq.w	8009c84 <cppLoop+0x1f84>
			HAL_Delay(500);
 8009736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800973a:	f000 fbd1 	bl	8009ee0 <HAL_Delay>

			led.LR(1, -1);
 800973e:	f04f 32ff 	mov.w	r2, #4294967295
 8009742:	2101      	movs	r1, #1
 8009744:	4859      	ldr	r0, [pc, #356]	; (80098ac <cppLoop+0x1bac>)
 8009746:	f7f8 fe31 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800974a:	2102      	movs	r1, #2
 800974c:	4867      	ldr	r0, [pc, #412]	; (80098ec <cppLoop+0x1bec>)
 800974e:	f7fa fce9 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009752:	4b67      	ldr	r3, [pc, #412]	; (80098f0 <cppLoop+0x1bf0>)
 8009754:	edd3 7a00 	vldr	s15, [r3]
 8009758:	eeb0 0a67 	vmov.f32	s0, s15
 800975c:	4863      	ldr	r0, [pc, #396]	; (80098ec <cppLoop+0x1bec>)
 800975e:	f7fa fab4 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009762:	4b60      	ldr	r3, [pc, #384]	; (80098e4 <cppLoop+0x1be4>)
 8009764:	edd3 7a00 	vldr	s15, [r3]
 8009768:	eeb0 0a67 	vmov.f32	s0, s15
 800976c:	485f      	ldr	r0, [pc, #380]	; (80098ec <cppLoop+0x1bec>)
 800976e:	f7fa fabc 	bl	8003cea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009772:	4b5c      	ldr	r3, [pc, #368]	; (80098e4 <cppLoop+0x1be4>)
 8009774:	edd3 7a00 	vldr	s15, [r3]
 8009778:	eeb0 0a67 	vmov.f32	s0, s15
 800977c:	485b      	ldr	r0, [pc, #364]	; (80098ec <cppLoop+0x1bec>)
 800977e:	f7fa fad4 	bl	8003d2a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009782:	485a      	ldr	r0, [pc, #360]	; (80098ec <cppLoop+0x1bec>)
 8009784:	f7fa fec4 	bl	8004510 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 8009788:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800978c:	f000 fba8 	bl	8009ee0 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8009790:	eddf 1a4a 	vldr	s3, [pc, #296]	; 80098bc <cppLoop+0x1bbc>
 8009794:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80098bc <cppLoop+0x1bbc>
 8009798:	eddf 0a48 	vldr	s1, [pc, #288]	; 80098bc <cppLoop+0x1bbc>
 800979c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80098bc <cppLoop+0x1bbc>
 80097a0:	4847      	ldr	r0, [pc, #284]	; (80098c0 <cppLoop+0x1bc0>)
 80097a2:	f7f7 fd55 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80097a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097aa:	f000 fb99 	bl	8009ee0 <HAL_Delay>

			line_trace.running();
 80097ae:	484f      	ldr	r0, [pc, #316]	; (80098ec <cppLoop+0x1bec>)
 80097b0:	f7fa fcf6 	bl	80041a0 <_ZN9LineTrace7runningEv>

			esc.off();
 80097b4:	4842      	ldr	r0, [pc, #264]	; (80098c0 <cppLoop+0x1bc0>)
 80097b6:	f7f7 fde5 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295
 80097be:	2100      	movs	r1, #0
 80097c0:	483a      	ldr	r0, [pc, #232]	; (80098ac <cppLoop+0x1bac>)
 80097c2:	f7f8 fdf3 	bl	80023ac <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80097c6:	e25d      	b.n	8009c84 <cppLoop+0x1f84>

	case 14:
		led.fullColor('W');
 80097c8:	2157      	movs	r1, #87	; 0x57
 80097ca:	4838      	ldr	r0, [pc, #224]	; (80098ac <cppLoop+0x1bac>)
 80097cc:	f7f8 fd32 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80097d0:	f7f7 fc66 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80097d4:	2100      	movs	r1, #0
 80097d6:	2000      	movs	r0, #0
 80097d8:	f7f7 fc72 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80097dc:	4845      	ldr	r0, [pc, #276]	; (80098f4 <cppLoop+0x1bf4>)
 80097de:	f7f7 fc99 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097e2:	2101      	movs	r1, #1
 80097e4:	2000      	movs	r0, #0
 80097e6:	f7f7 fc6b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80097ea:	4b43      	ldr	r3, [pc, #268]	; (80098f8 <cppLoop+0x1bf8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f6 fec2 	bl	8000578 <__aeabi_f2d>
 80097f4:	4603      	mov	r3, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	461a      	mov	r2, r3
 80097fa:	4623      	mov	r3, r4
 80097fc:	483a      	ldr	r0, [pc, #232]	; (80098e8 <cppLoop+0x1be8>)
 80097fe:	f7f7 fc89 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009802:	482d      	ldr	r0, [pc, #180]	; (80098b8 <cppLoop+0x1bb8>)
 8009804:	f7f8 fcb2 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009808:	4603      	mov	r3, r0
 800980a:	2b02      	cmp	r3, #2
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8237 	beq.w	8009c88 <cppLoop+0x1f88>
			HAL_Delay(500);
 800981a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800981e:	f000 fb5f 	bl	8009ee0 <HAL_Delay>

			led.LR(1, -1);
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	2101      	movs	r1, #1
 8009828:	4820      	ldr	r0, [pc, #128]	; (80098ac <cppLoop+0x1bac>)
 800982a:	f7f8 fdbf 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800982e:	2101      	movs	r1, #1
 8009830:	482e      	ldr	r0, [pc, #184]	; (80098ec <cppLoop+0x1bec>)
 8009832:	f7fa fc77 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009836:	4b31      	ldr	r3, [pc, #196]	; (80098fc <cppLoop+0x1bfc>)
 8009838:	edd3 7a00 	vldr	s15, [r3]
 800983c:	eeb0 0a67 	vmov.f32	s0, s15
 8009840:	482a      	ldr	r0, [pc, #168]	; (80098ec <cppLoop+0x1bec>)
 8009842:	f7fa fa42 	bl	8003cca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009846:	4b2c      	ldr	r3, [pc, #176]	; (80098f8 <cppLoop+0x1bf8>)
 8009848:	edd3 7a00 	vldr	s15, [r3]
 800984c:	eeb0 0a67 	vmov.f32	s0, s15
 8009850:	4826      	ldr	r0, [pc, #152]	; (80098ec <cppLoop+0x1bec>)
 8009852:	f7fa fa4a 	bl	8003cea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009856:	4b29      	ldr	r3, [pc, #164]	; (80098fc <cppLoop+0x1bfc>)
 8009858:	edd3 7a00 	vldr	s15, [r3]
 800985c:	eeb0 0a67 	vmov.f32	s0, s15
 8009860:	4822      	ldr	r0, [pc, #136]	; (80098ec <cppLoop+0x1bec>)
 8009862:	f7fa fa62 	bl	8003d2a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009866:	4821      	ldr	r0, [pc, #132]	; (80098ec <cppLoop+0x1bec>)
 8009868:	f7fa fe52 	bl	8004510 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 800986c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009870:	f000 fb36 	bl	8009ee0 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8009874:	eddf 1a11 	vldr	s3, [pc, #68]	; 80098bc <cppLoop+0x1bbc>
 8009878:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80098bc <cppLoop+0x1bbc>
 800987c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80098bc <cppLoop+0x1bbc>
 8009880:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80098bc <cppLoop+0x1bbc>
 8009884:	480e      	ldr	r0, [pc, #56]	; (80098c0 <cppLoop+0x1bc0>)
 8009886:	f7f7 fce3 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800988a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800988e:	f000 fb27 	bl	8009ee0 <HAL_Delay>

			line_trace.running();
 8009892:	4816      	ldr	r0, [pc, #88]	; (80098ec <cppLoop+0x1bec>)
 8009894:	f7fa fc84 	bl	80041a0 <_ZN9LineTrace7runningEv>

			esc.off();
 8009898:	4809      	ldr	r0, [pc, #36]	; (80098c0 <cppLoop+0x1bc0>)
 800989a:	f7f7 fd73 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800989e:	f04f 32ff 	mov.w	r2, #4294967295
 80098a2:	2100      	movs	r1, #0
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <cppLoop+0x1bac>)
 80098a6:	f7f8 fd81 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80098aa:	e1ed      	b.n	8009c88 <cppLoop+0x1f88>
 80098ac:	2000060c 	.word	0x2000060c
 80098b0:	0801a134 	.word	0x0801a134
 80098b4:	0801a138 	.word	0x0801a138
 80098b8:	20000600 	.word	0x20000600
 80098bc:	3eb33333 	.word	0x3eb33333
 80098c0:	2001db98 	.word	0x2001db98
 80098c4:	0801a140 	.word	0x0801a140
 80098c8:	0801a144 	.word	0x0801a144
 80098cc:	20000630 	.word	0x20000630
 80098d0:	2001db1c 	.word	0x2001db1c
 80098d4:	00000000 	.word	0x00000000
 80098d8:	0801a150 	.word	0x0801a150
 80098dc:	0801a15c 	.word	0x0801a15c
 80098e0:	0801a168 	.word	0x0801a168
 80098e4:	200422c8 	.word	0x200422c8
 80098e8:	0801a00c 	.word	0x0801a00c
 80098ec:	2001db9c 	.word	0x2001db9c
 80098f0:	200422d8 	.word	0x200422d8
 80098f4:	0801a174 	.word	0x0801a174
 80098f8:	200422c0 	.word	0x200422c0
 80098fc:	200422d0 	.word	0x200422d0

	case 15:
		led.fullColor('W');
 8009900:	2157      	movs	r1, #87	; 0x57
 8009902:	48a3      	ldr	r0, [pc, #652]	; (8009b90 <cppLoop+0x1e90>)
 8009904:	f7f8 fc96 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009908:	f7f7 fbca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800990c:	2100      	movs	r1, #0
 800990e:	2000      	movs	r0, #0
 8009910:	f7f7 fbd6 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", line_trace.getKp()*1000);
 8009914:	489f      	ldr	r0, [pc, #636]	; (8009b94 <cppLoop+0x1e94>)
 8009916:	f7fa f956 	bl	8003bc6 <_ZN9LineTrace5getKpEv>
 800991a:	eeb0 7a40 	vmov.f32	s14, s0
 800991e:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8009b98 <cppLoop+0x1e98>
 8009922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009926:	ee17 0a90 	vmov	r0, s15
 800992a:	f7f6 fe25 	bl	8000578 <__aeabi_f2d>
 800992e:	4603      	mov	r3, r0
 8009930:	460c      	mov	r4, r1
 8009932:	461a      	mov	r2, r3
 8009934:	4623      	mov	r3, r4
 8009936:	4899      	ldr	r0, [pc, #612]	; (8009b9c <cppLoop+0x1e9c>)
 8009938:	f7f7 fbec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800993c:	2101      	movs	r1, #1
 800993e:	2000      	movs	r0, #0
 8009940:	f7f7 fbbe 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8009944:	4893      	ldr	r0, [pc, #588]	; (8009b94 <cppLoop+0x1e94>)
 8009946:	f7fa f94d 	bl	8003be4 <_ZN9LineTrace5getKiEv>
 800994a:	eeb0 7a40 	vmov.f32	s14, s0
 800994e:	eddf 7a94 	vldr	s15, [pc, #592]	; 8009ba0 <cppLoop+0x1ea0>
 8009952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009956:	ee17 0a90 	vmov	r0, s15
 800995a:	f7f6 fe0d 	bl	8000578 <__aeabi_f2d>
 800995e:	4605      	mov	r5, r0
 8009960:	460e      	mov	r6, r1
 8009962:	488c      	ldr	r0, [pc, #560]	; (8009b94 <cppLoop+0x1e94>)
 8009964:	f7fa f94d 	bl	8003c02 <_ZN9LineTrace5getKdEv>
 8009968:	eeb0 7a40 	vmov.f32	s14, s0
 800996c:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8009ba4 <cppLoop+0x1ea4>
 8009970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009974:	ee17 0a90 	vmov	r0, s15
 8009978:	f7f6 fdfe 	bl	8000578 <__aeabi_f2d>
 800997c:	4603      	mov	r3, r0
 800997e:	460c      	mov	r4, r1
 8009980:	e9cd 3400 	strd	r3, r4, [sp]
 8009984:	462a      	mov	r2, r5
 8009986:	4633      	mov	r3, r6
 8009988:	4887      	ldr	r0, [pc, #540]	; (8009ba8 <cppLoop+0x1ea8>)
 800998a:	f7f7 fbc3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800998e:	4887      	ldr	r0, [pc, #540]	; (8009bac <cppLoop+0x1eac>)
 8009990:	f7f8 fbec 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009994:	4603      	mov	r3, r0
 8009996:	2b08      	cmp	r3, #8
 8009998:	bf0c      	ite	eq
 800999a:	2301      	moveq	r3, #1
 800999c:	2300      	movne	r3, #0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d021      	beq.n	80099e8 <cppLoop+0x1ce8>
			led.LR(-1, 1);
 80099a4:	2201      	movs	r2, #1
 80099a6:	f04f 31ff 	mov.w	r1, #4294967295
 80099aa:	4879      	ldr	r0, [pc, #484]	; (8009b90 <cppLoop+0x1e90>)
 80099ac:	f7f8 fcfe 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80099b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099b4:	f000 fa94 	bl	8009ee0 <HAL_Delay>

			selector++;
 80099b8:	4b7d      	ldr	r3, [pc, #500]	; (8009bb0 <cppLoop+0x1eb0>)
 80099ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	3301      	adds	r3, #1
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	b21a      	sxth	r2, r3
 80099c6:	4b7a      	ldr	r3, [pc, #488]	; (8009bb0 <cppLoop+0x1eb0>)
 80099c8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80099ca:	4b79      	ldr	r3, [pc, #484]	; (8009bb0 <cppLoop+0x1eb0>)
 80099cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	dd02      	ble.n	80099da <cppLoop+0x1cda>
 80099d4:	4b76      	ldr	r3, [pc, #472]	; (8009bb0 <cppLoop+0x1eb0>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80099da:	2200      	movs	r2, #0
 80099dc:	f04f 31ff 	mov.w	r1, #4294967295
 80099e0:	486b      	ldr	r0, [pc, #428]	; (8009b90 <cppLoop+0x1e90>)
 80099e2:	f7f8 fce3 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80099e6:	e151      	b.n	8009c8c <cppLoop+0x1f8c>
		else if(joy_stick.getValue() == JOY_R){
 80099e8:	4870      	ldr	r0, [pc, #448]	; (8009bac <cppLoop+0x1eac>)
 80099ea:	f7f8 fbbf 	bl	800216c <_ZN8JoyStick8getValueEv>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b10      	cmp	r3, #16
 80099f2:	bf0c      	ite	eq
 80099f4:	2301      	moveq	r3, #1
 80099f6:	2300      	movne	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d058      	beq.n	8009ab0 <cppLoop+0x1db0>
			led.LR(-1, 1);
 80099fe:	2201      	movs	r2, #1
 8009a00:	f04f 31ff 	mov.w	r1, #4294967295
 8009a04:	4862      	ldr	r0, [pc, #392]	; (8009b90 <cppLoop+0x1e90>)
 8009a06:	f7f8 fcd1 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009a0a:	2064      	movs	r0, #100	; 0x64
 8009a0c:	f000 fa68 	bl	8009ee0 <HAL_Delay>
			if(selector == 0){
 8009a10:	4b67      	ldr	r3, [pc, #412]	; (8009bb0 <cppLoop+0x1eb0>)
 8009a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d113      	bne.n	8009a42 <cppLoop+0x1d42>
				adj_kp = adj_kp + 0.00001;
 8009a1a:	4b66      	ldr	r3, [pc, #408]	; (8009bb4 <cppLoop+0x1eb4>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f6 fdaa 	bl	8000578 <__aeabi_f2d>
 8009a24:	a354      	add	r3, pc, #336	; (adr r3, 8009b78 <cppLoop+0x1e78>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 fc47 	bl	80002bc <__adddf3>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	460c      	mov	r4, r1
 8009a32:	4618      	mov	r0, r3
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7f7 f8ef 	bl	8000c18 <__aeabi_d2f>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	4b5d      	ldr	r3, [pc, #372]	; (8009bb4 <cppLoop+0x1eb4>)
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	e02b      	b.n	8009a9a <cppLoop+0x1d9a>
			else if(selector == 1){
 8009a42:	4b5b      	ldr	r3, [pc, #364]	; (8009bb0 <cppLoop+0x1eb0>)
 8009a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d113      	bne.n	8009a74 <cppLoop+0x1d74>
				adj_ki = adj_ki + 0.0001;
 8009a4c:	4b5a      	ldr	r3, [pc, #360]	; (8009bb8 <cppLoop+0x1eb8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f6 fd91 	bl	8000578 <__aeabi_f2d>
 8009a56:	a34a      	add	r3, pc, #296	; (adr r3, 8009b80 <cppLoop+0x1e80>)
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	f7f6 fc2e 	bl	80002bc <__adddf3>
 8009a60:	4603      	mov	r3, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4618      	mov	r0, r3
 8009a66:	4621      	mov	r1, r4
 8009a68:	f7f7 f8d6 	bl	8000c18 <__aeabi_d2f>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	4b52      	ldr	r3, [pc, #328]	; (8009bb8 <cppLoop+0x1eb8>)
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e012      	b.n	8009a9a <cppLoop+0x1d9a>
				adj_kd = adj_kd + 0.000001;
 8009a74:	4b51      	ldr	r3, [pc, #324]	; (8009bbc <cppLoop+0x1ebc>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f6 fd7d 	bl	8000578 <__aeabi_f2d>
 8009a7e:	a342      	add	r3, pc, #264	; (adr r3, 8009b88 <cppLoop+0x1e88>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f6 fc1a 	bl	80002bc <__adddf3>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	4621      	mov	r1, r4
 8009a90:	f7f7 f8c2 	bl	8000c18 <__aeabi_d2f>
 8009a94:	4602      	mov	r2, r0
 8009a96:	4b49      	ldr	r3, [pc, #292]	; (8009bbc <cppLoop+0x1ebc>)
 8009a98:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009a9a:	2152      	movs	r1, #82	; 0x52
 8009a9c:	483c      	ldr	r0, [pc, #240]	; (8009b90 <cppLoop+0x1e90>)
 8009a9e:	f7f8 fbc9 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8009aa8:	4839      	ldr	r0, [pc, #228]	; (8009b90 <cppLoop+0x1e90>)
 8009aaa:	f7f8 fc7f 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8009aae:	e0ed      	b.n	8009c8c <cppLoop+0x1f8c>
		else if(joy_stick.getValue() == JOY_L){
 8009ab0:	483e      	ldr	r0, [pc, #248]	; (8009bac <cppLoop+0x1eac>)
 8009ab2:	f7f8 fb5b 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	bf0c      	ite	eq
 8009abc:	2301      	moveq	r3, #1
 8009abe:	2300      	movne	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d07c      	beq.n	8009bc0 <cppLoop+0x1ec0>
			led.LR(-1, 1);
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8009acc:	4830      	ldr	r0, [pc, #192]	; (8009b90 <cppLoop+0x1e90>)
 8009ace:	f7f8 fc6d 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009ad2:	2064      	movs	r0, #100	; 0x64
 8009ad4:	f000 fa04 	bl	8009ee0 <HAL_Delay>
			if(selector == 0){
 8009ad8:	4b35      	ldr	r3, [pc, #212]	; (8009bb0 <cppLoop+0x1eb0>)
 8009ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d113      	bne.n	8009b0a <cppLoop+0x1e0a>
				adj_kp = adj_kp - 0.00001;
 8009ae2:	4b34      	ldr	r3, [pc, #208]	; (8009bb4 <cppLoop+0x1eb4>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f6 fd46 	bl	8000578 <__aeabi_f2d>
 8009aec:	a322      	add	r3, pc, #136	; (adr r3, 8009b78 <cppLoop+0x1e78>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	f7f6 fbe1 	bl	80002b8 <__aeabi_dsub>
 8009af6:	4603      	mov	r3, r0
 8009af8:	460c      	mov	r4, r1
 8009afa:	4618      	mov	r0, r3
 8009afc:	4621      	mov	r1, r4
 8009afe:	f7f7 f88b 	bl	8000c18 <__aeabi_d2f>
 8009b02:	4602      	mov	r2, r0
 8009b04:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <cppLoop+0x1eb4>)
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e02b      	b.n	8009b62 <cppLoop+0x1e62>
			else if(selector == 1){
 8009b0a:	4b29      	ldr	r3, [pc, #164]	; (8009bb0 <cppLoop+0x1eb0>)
 8009b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d113      	bne.n	8009b3c <cppLoop+0x1e3c>
				adj_ki = adj_ki - 0.0001;
 8009b14:	4b28      	ldr	r3, [pc, #160]	; (8009bb8 <cppLoop+0x1eb8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7f6 fd2d 	bl	8000578 <__aeabi_f2d>
 8009b1e:	a318      	add	r3, pc, #96	; (adr r3, 8009b80 <cppLoop+0x1e80>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fbc8 	bl	80002b8 <__aeabi_dsub>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	4621      	mov	r1, r4
 8009b30:	f7f7 f872 	bl	8000c18 <__aeabi_d2f>
 8009b34:	4602      	mov	r2, r0
 8009b36:	4b20      	ldr	r3, [pc, #128]	; (8009bb8 <cppLoop+0x1eb8>)
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e012      	b.n	8009b62 <cppLoop+0x1e62>
				adj_kd = adj_kd - 0.000001;
 8009b3c:	4b1f      	ldr	r3, [pc, #124]	; (8009bbc <cppLoop+0x1ebc>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7f6 fd19 	bl	8000578 <__aeabi_f2d>
 8009b46:	a310      	add	r3, pc, #64	; (adr r3, 8009b88 <cppLoop+0x1e88>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fbb4 	bl	80002b8 <__aeabi_dsub>
 8009b50:	4603      	mov	r3, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	4618      	mov	r0, r3
 8009b56:	4621      	mov	r1, r4
 8009b58:	f7f7 f85e 	bl	8000c18 <__aeabi_d2f>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <cppLoop+0x1ebc>)
 8009b60:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009b62:	2152      	movs	r1, #82	; 0x52
 8009b64:	480a      	ldr	r0, [pc, #40]	; (8009b90 <cppLoop+0x1e90>)
 8009b66:	f7f8 fb65 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b70:	4807      	ldr	r0, [pc, #28]	; (8009b90 <cppLoop+0x1e90>)
 8009b72:	f7f8 fc1b 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8009b76:	e089      	b.n	8009c8c <cppLoop+0x1f8c>
 8009b78:	88e368f1 	.word	0x88e368f1
 8009b7c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009b80:	eb1c432d 	.word	0xeb1c432d
 8009b84:	3f1a36e2 	.word	0x3f1a36e2
 8009b88:	a0b5ed8d 	.word	0xa0b5ed8d
 8009b8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8009b90:	2000060c 	.word	0x2000060c
 8009b94:	2001db9c 	.word	0x2001db9c
 8009b98:	447a0000 	.word	0x447a0000
 8009b9c:	0801a180 	.word	0x0801a180
 8009ba0:	42c80000 	.word	0x42c80000
 8009ba4:	461c4000 	.word	0x461c4000
 8009ba8:	08019fc4 	.word	0x08019fc4
 8009bac:	20000600 	.word	0x20000600
 8009bb0:	2004227c 	.word	0x2004227c
 8009bb4:	20042288 	.word	0x20042288
 8009bb8:	20042290 	.word	0x20042290
 8009bbc:	20042298 	.word	0x20042298
		else if(joy_stick.getValue() == JOY_C){
 8009bc0:	4836      	ldr	r0, [pc, #216]	; (8009c9c <cppLoop+0x1f9c>)
 8009bc2:	f7f8 fad3 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d05a      	beq.n	8009c8c <cppLoop+0x1f8c>
			led.LR(-1, 1);
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8009bdc:	4830      	ldr	r0, [pc, #192]	; (8009ca0 <cppLoop+0x1fa0>)
 8009bde:	f7f8 fbe5 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009be2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009be6:	f000 f97b 	bl	8009ee0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009bea:	2300      	movs	r3, #0
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	4b2d      	ldr	r3, [pc, #180]	; (8009ca4 <cppLoop+0x1fa4>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	492d      	ldr	r1, [pc, #180]	; (8009ca8 <cppLoop+0x1fa8>)
 8009bf4:	482d      	ldr	r0, [pc, #180]	; (8009cac <cppLoop+0x1fac>)
 8009bf6:	f7f7 fe31 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <cppLoop+0x1fb0>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	492c      	ldr	r1, [pc, #176]	; (8009cb4 <cppLoop+0x1fb4>)
 8009c04:	4829      	ldr	r0, [pc, #164]	; (8009cac <cppLoop+0x1fac>)
 8009c06:	f7f7 fe29 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	4b2a      	ldr	r3, [pc, #168]	; (8009cb8 <cppLoop+0x1fb8>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	492a      	ldr	r1, [pc, #168]	; (8009cbc <cppLoop+0x1fbc>)
 8009c14:	4825      	ldr	r0, [pc, #148]	; (8009cac <cppLoop+0x1fac>)
 8009c16:	f7f7 fe21 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009c1a:	4b22      	ldr	r3, [pc, #136]	; (8009ca4 <cppLoop+0x1fa4>)
 8009c1c:	edd3 7a00 	vldr	s15, [r3]
 8009c20:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <cppLoop+0x1fb0>)
 8009c22:	ed93 7a00 	vldr	s14, [r3]
 8009c26:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <cppLoop+0x1fb8>)
 8009c28:	edd3 6a00 	vldr	s13, [r3]
 8009c2c:	eeb0 1a66 	vmov.f32	s2, s13
 8009c30:	eef0 0a47 	vmov.f32	s1, s14
 8009c34:	eeb0 0a67 	vmov.f32	s0, s15
 8009c38:	4821      	ldr	r0, [pc, #132]	; (8009cc0 <cppLoop+0x1fc0>)
 8009c3a:	f7f9 ffab 	bl	8003b94 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f04f 31ff 	mov.w	r1, #4294967295
 8009c44:	4816      	ldr	r0, [pc, #88]	; (8009ca0 <cppLoop+0x1fa0>)
 8009c46:	f7f8 fbb1 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8009c4a:	e01f      	b.n	8009c8c <cppLoop+0x1f8c>

	default:
		break;
 8009c4c:	bf00      	nop
 8009c4e:	e01e      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c50:	bf00      	nop
 8009c52:	e01c      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c54:	bf00      	nop
 8009c56:	e01a      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c58:	bf00      	nop
 8009c5a:	e018      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c5c:	bf00      	nop
 8009c5e:	e016      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c60:	bf00      	nop
 8009c62:	e014      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c64:	bf00      	nop
 8009c66:	e012      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c68:	bf00      	nop
 8009c6a:	e010      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c6c:	bf00      	nop
 8009c6e:	e00e      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c70:	bf00      	nop
 8009c72:	e00c      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c74:	bf00      	nop
 8009c76:	e00a      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c78:	bf00      	nop
 8009c7a:	e008      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c7c:	bf00      	nop
 8009c7e:	e006      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c80:	bf00      	nop
 8009c82:	e004      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c84:	bf00      	nop
 8009c86:	e002      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c88:	bf00      	nop
 8009c8a:	e000      	b.n	8009c8e <cppLoop+0x1f8e>
		break;
 8009c8c:	bf00      	nop

	}

	HAL_Delay(30);
 8009c8e:	201e      	movs	r0, #30
 8009c90:	f000 f926 	bl	8009ee0 <HAL_Delay>

}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	20000600 	.word	0x20000600
 8009ca0:	2000060c 	.word	0x2000060c
 8009ca4:	20042288 	.word	0x20042288
 8009ca8:	0801a18c 	.word	0x0801a18c
 8009cac:	08019fe0 	.word	0x08019fe0
 8009cb0:	20042290 	.word	0x20042290
 8009cb4:	0801a194 	.word	0x0801a194
 8009cb8:	20042298 	.word	0x20042298
 8009cbc:	0801a19c 	.word	0x0801a19c
 8009cc0:	2001db9c 	.word	0x2001db9c

08009cc4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af06      	add	r7, sp, #24
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d142      	bne.n	8009d5a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d13d      	bne.n	8009d5a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009cde:	4821      	ldr	r0, [pc, #132]	; (8009d64 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009ce0:	f7f8 fb9c 	bl	800241c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009ce4:	4820      	ldr	r0, [pc, #128]	; (8009d68 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009ce6:	f7fb fc17 	bl	8005518 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009cea:	4820      	ldr	r0, [pc, #128]	; (8009d6c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009cec:	f7f8 fa32 	bl	8002154 <_ZN8JoyStickC1Ev>
Motor motor;
 8009cf0:	481f      	ldr	r0, [pc, #124]	; (8009d70 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009cf2:	f7fb f822 	bl	8004d3a <_ZN5MotorC1Ev>
IMU imu;
 8009cf6:	481f      	ldr	r0, [pc, #124]	; (8009d74 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009cf8:	f7f8 f828 	bl	8001d4c <_ZN3IMUC1Ev>
Logger logger;
 8009cfc:	481e      	ldr	r0, [pc, #120]	; (8009d78 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009cfe:	f7fa fcf7 	bl	80046f0 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009d02:	481e      	ldr	r0, [pc, #120]	; (8009d7c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d04:	f7f7 fb62 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009d08:	4b1a      	ldr	r3, [pc, #104]	; (8009d74 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d0a:	4a1c      	ldr	r2, [pc, #112]	; (8009d7c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d0c:	4918      	ldr	r1, [pc, #96]	; (8009d70 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d0e:	481c      	ldr	r0, [pc, #112]	; (8009d80 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d10:	f7fb ffaa 	bl	8005c68 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009d14:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d16:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d18:	4918      	ldr	r1, [pc, #96]	; (8009d7c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d1a:	481a      	ldr	r0, [pc, #104]	; (8009d84 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d1c:	f7fb f90c 	bl	8004f38 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009d20:	4819      	ldr	r0, [pc, #100]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d22:	f7f7 fa57 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009d26:	4b18      	ldr	r3, [pc, #96]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d28:	9305      	str	r3, [sp, #20]
 8009d2a:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d30:	9303      	str	r3, [sp, #12]
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d34:	9302      	str	r3, [sp, #8]
 8009d36:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d40:	4a08      	ldr	r2, [pc, #32]	; (8009d64 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d42:	490b      	ldr	r1, [pc, #44]	; (8009d70 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d44:	4811      	ldr	r0, [pc, #68]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009d46:	f7f8 feb9 	bl	8002abc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009d4a:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d4c:	490a      	ldr	r1, [pc, #40]	; (8009d78 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d4e:	4810      	ldr	r0, [pc, #64]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d50:	f7fb fd50 	bl	80057f4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009d54:	480f      	ldr	r0, [pc, #60]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009d56:	f7fb fa71 	bl	800523c <_ZN13PathFollowingC1Ev>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	200002fc 	.word	0x200002fc
 8009d68:	200005f4 	.word	0x200005f4
 8009d6c:	20000600 	.word	0x20000600
 8009d70:	20000608 	.word	0x20000608
 8009d74:	2000061c 	.word	0x2000061c
 8009d78:	20000630 	.word	0x20000630
 8009d7c:	2001dafc 	.word	0x2001dafc
 8009d80:	2001db1c 	.word	0x2001db1c
 8009d84:	2001db58 	.word	0x2001db58
 8009d88:	2001db98 	.word	0x2001db98
 8009d8c:	2001db9c 	.word	0x2001db9c
 8009d90:	2002a944 	.word	0x2002a944
 8009d94:	2002ab50 	.word	0x2002ab50

08009d98 <_GLOBAL__sub_I_line_sensor>:
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009da0:	2001      	movs	r0, #1
 8009da2:	f7ff ff8f 	bl	8009cc4 <_Z41__static_initialization_and_destruction_0ii>
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dae:	e003      	b.n	8009db8 <LoopCopyDataInit>

08009db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009db0:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009db6:	3104      	adds	r1, #4

08009db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009db8:	480b      	ldr	r0, [pc, #44]	; (8009de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dba:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009dc0:	d3f6      	bcc.n	8009db0 <CopyDataInit>
  ldr  r2, =_sbss
 8009dc2:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009dc4:	e002      	b.n	8009dcc <LoopFillZerobss>

08009dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009dc8:	f842 3b04 	str.w	r3, [r2], #4

08009dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009dcc:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009dd0:	d3f9      	bcc.n	8009dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009dd2:	f7fd fe5b 	bl	8007a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009dd6:	f00b fdd3 	bl	8015980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009dda:	f7fc f995 	bl	8006108 <main>
  bx  lr    
 8009dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009de0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009de4:	0801a790 	.word	0x0801a790
  ldr  r0, =_sdata
 8009de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009dec:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009df0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009df4:	20046ce0 	.word	0x20046ce0

08009df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009df8:	e7fe      	b.n	8009df8 <ADC_IRQHandler>
	...

08009dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e00:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <HAL_Init+0x40>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a0d      	ldr	r2, [pc, #52]	; (8009e3c <HAL_Init+0x40>)
 8009e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e0c:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <HAL_Init+0x40>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <HAL_Init+0x40>)
 8009e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e18:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <HAL_Init+0x40>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a07      	ldr	r2, [pc, #28]	; (8009e3c <HAL_Init+0x40>)
 8009e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e24:	2003      	movs	r0, #3
 8009e26:	f000 fd51 	bl	800a8cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	f000 f808 	bl	8009e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e30:	f7fd f87c 	bl	8006f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	40023c00 	.word	0x40023c00

08009e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e48:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <HAL_InitTick+0x54>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	4b12      	ldr	r3, [pc, #72]	; (8009e98 <HAL_InitTick+0x58>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	4619      	mov	r1, r3
 8009e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fd69 	bl	800a936 <HAL_SYSTICK_Config>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e00e      	b.n	8009e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b0f      	cmp	r3, #15
 8009e72:	d80a      	bhi.n	8009e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e74:	2200      	movs	r2, #0
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7c:	f000 fd31 	bl	800a8e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009e80:	4a06      	ldr	r2, [pc, #24]	; (8009e9c <HAL_InitTick+0x5c>)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e000      	b.n	8009e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000000 	.word	0x20000000
 8009e98:	20000008 	.word	0x20000008
 8009e9c:	20000004 	.word	0x20000004

08009ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <HAL_IncTick+0x20>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <HAL_IncTick+0x24>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4413      	add	r3, r2
 8009eb0:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <HAL_IncTick+0x24>)
 8009eb2:	6013      	str	r3, [r2, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	20000008 	.word	0x20000008
 8009ec4:	20044c68 	.word	0x20044c68

08009ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
  return uwTick;
 8009ecc:	4b03      	ldr	r3, [pc, #12]	; (8009edc <HAL_GetTick+0x14>)
 8009ece:	681b      	ldr	r3, [r3, #0]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20044c68 	.word	0x20044c68

08009ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ee8:	f7ff ffee 	bl	8009ec8 <HAL_GetTick>
 8009eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef8:	d005      	beq.n	8009f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <HAL_Delay+0x40>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4413      	add	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f06:	bf00      	nop
 8009f08:	f7ff ffde 	bl	8009ec8 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d8f7      	bhi.n	8009f08 <HAL_Delay+0x28>
  {
  }
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000008 	.word	0x20000008

08009f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e033      	b.n	8009fa2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7fd f81a 	bl	8006f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d118      	bne.n	8009f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009f6a:	f023 0302 	bic.w	r3, r3, #2
 8009f6e:	f043 0202 	orr.w	r2, r3, #2
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa5a 	bl	800a430 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	f043 0201 	orr.w	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	641a      	str	r2, [r3, #64]	; 0x40
 8009f92:	e001      	b.n	8009f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <HAL_ADC_Start_DMA+0x1e>
 8009fc6:	2302      	movs	r3, #2
 8009fc8:	e0cc      	b.n	800a164 <HAL_ADC_Start_DMA+0x1b8>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d018      	beq.n	800a012 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689a      	ldr	r2, [r3, #8]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0201 	orr.w	r2, r2, #1
 8009fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009ff0:	4b5e      	ldr	r3, [pc, #376]	; (800a16c <HAL_ADC_Start_DMA+0x1c0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a5e      	ldr	r2, [pc, #376]	; (800a170 <HAL_ADC_Start_DMA+0x1c4>)
 8009ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffa:	0c9a      	lsrs	r2, r3, #18
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	4413      	add	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a004:	e002      	b.n	800a00c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3b01      	subs	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1f9      	bne.n	800a006 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	f040 80a0 	bne.w	800a162 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a02a:	f023 0301 	bic.w	r3, r3, #1
 800a02e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a04c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a060:	d106      	bne.n	800a070 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a066:	f023 0206 	bic.w	r2, r3, #6
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	645a      	str	r2, [r3, #68]	; 0x44
 800a06e:	e002      	b.n	800a076 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a07e:	4b3d      	ldr	r3, [pc, #244]	; (800a174 <HAL_ADC_Start_DMA+0x1c8>)
 800a080:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	4a3c      	ldr	r2, [pc, #240]	; (800a178 <HAL_ADC_Start_DMA+0x1cc>)
 800a088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08e:	4a3b      	ldr	r2, [pc, #236]	; (800a17c <HAL_ADC_Start_DMA+0x1d0>)
 800a090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a096:	4a3a      	ldr	r2, [pc, #232]	; (800a180 <HAL_ADC_Start_DMA+0x1d4>)
 800a098:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	334c      	adds	r3, #76	; 0x4c
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f000 fcea 	bl	800aaac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f003 031f 	and.w	r3, r3, #31
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d12a      	bne.n	800a13a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a26      	ldr	r2, [pc, #152]	; (800a184 <HAL_ADC_Start_DMA+0x1d8>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d015      	beq.n	800a11a <HAL_ADC_Start_DMA+0x16e>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a25      	ldr	r2, [pc, #148]	; (800a188 <HAL_ADC_Start_DMA+0x1dc>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d105      	bne.n	800a104 <HAL_ADC_Start_DMA+0x158>
 800a0f8:	4b1e      	ldr	r3, [pc, #120]	; (800a174 <HAL_ADC_Start_DMA+0x1c8>)
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f003 031f 	and.w	r3, r3, #31
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a20      	ldr	r2, [pc, #128]	; (800a18c <HAL_ADC_Start_DMA+0x1e0>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d129      	bne.n	800a162 <HAL_ADC_Start_DMA+0x1b6>
 800a10e:	4b19      	ldr	r3, [pc, #100]	; (800a174 <HAL_ADC_Start_DMA+0x1c8>)
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f003 031f 	and.w	r3, r3, #31
 800a116:	2b0f      	cmp	r3, #15
 800a118:	d823      	bhi.n	800a162 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d11c      	bne.n	800a162 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689a      	ldr	r2, [r3, #8]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	e013      	b.n	800a162 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a11      	ldr	r2, [pc, #68]	; (800a184 <HAL_ADC_Start_DMA+0x1d8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d10e      	bne.n	800a162 <HAL_ADC_Start_DMA+0x1b6>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d107      	bne.n	800a162 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a160:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000000 	.word	0x20000000
 800a170:	431bde83 	.word	0x431bde83
 800a174:	40012300 	.word	0x40012300
 800a178:	0800a629 	.word	0x0800a629
 800a17c:	0800a6e3 	.word	0x0800a6e3
 800a180:	0800a6ff 	.word	0x0800a6ff
 800a184:	40012000 	.word	0x40012000
 800a188:	40012100 	.word	0x40012100
 800a18c:	40012200 	.word	0x40012200

0800a190 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_ADC_ConfigChannel+0x1c>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e113      	b.n	800a410 <HAL_ADC_ConfigChannel+0x244>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b09      	cmp	r3, #9
 800a1f6:	d925      	bls.n	800a244 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68d9      	ldr	r1, [r3, #12]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	4613      	mov	r3, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	4413      	add	r3, r2
 800a20c:	3b1e      	subs	r3, #30
 800a20e:	2207      	movs	r2, #7
 800a210:	fa02 f303 	lsl.w	r3, r2, r3
 800a214:	43da      	mvns	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	400a      	ands	r2, r1
 800a21c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68d9      	ldr	r1, [r3, #12]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	4618      	mov	r0, r3
 800a230:	4603      	mov	r3, r0
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4403      	add	r3, r0
 800a236:	3b1e      	subs	r3, #30
 800a238:	409a      	lsls	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	60da      	str	r2, [r3, #12]
 800a242:	e022      	b.n	800a28a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6919      	ldr	r1, [r3, #16]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	461a      	mov	r2, r3
 800a252:	4613      	mov	r3, r2
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	4413      	add	r3, r2
 800a258:	2207      	movs	r2, #7
 800a25a:	fa02 f303 	lsl.w	r3, r2, r3
 800a25e:	43da      	mvns	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	400a      	ands	r2, r1
 800a266:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6919      	ldr	r1, [r3, #16]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	b29b      	uxth	r3, r3
 800a278:	4618      	mov	r0, r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4403      	add	r3, r0
 800a280:	409a      	lsls	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	2b06      	cmp	r3, #6
 800a290:	d824      	bhi.n	800a2dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3b05      	subs	r3, #5
 800a2a4:	221f      	movs	r2, #31
 800a2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2aa:	43da      	mvns	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	400a      	ands	r2, r1
 800a2b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	3b05      	subs	r3, #5
 800a2ce:	fa00 f203 	lsl.w	r2, r0, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	635a      	str	r2, [r3, #52]	; 0x34
 800a2da:	e04c      	b.n	800a376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	2b0c      	cmp	r3, #12
 800a2e2:	d824      	bhi.n	800a32e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3b23      	subs	r3, #35	; 0x23
 800a2f6:	221f      	movs	r2, #31
 800a2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fc:	43da      	mvns	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	400a      	ands	r2, r1
 800a304:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	4618      	mov	r0, r3
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	3b23      	subs	r3, #35	; 0x23
 800a320:	fa00 f203 	lsl.w	r2, r0, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	631a      	str	r2, [r3, #48]	; 0x30
 800a32c:	e023      	b.n	800a376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	3b41      	subs	r3, #65	; 0x41
 800a340:	221f      	movs	r2, #31
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	43da      	mvns	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	400a      	ands	r2, r1
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4618      	mov	r0, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	3b41      	subs	r3, #65	; 0x41
 800a36a:	fa00 f203 	lsl.w	r2, r0, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a376:	4b29      	ldr	r3, [pc, #164]	; (800a41c <HAL_ADC_ConfigChannel+0x250>)
 800a378:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a28      	ldr	r2, [pc, #160]	; (800a420 <HAL_ADC_ConfigChannel+0x254>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d10f      	bne.n	800a3a4 <HAL_ADC_ConfigChannel+0x1d8>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b12      	cmp	r3, #18
 800a38a:	d10b      	bne.n	800a3a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	; (800a420 <HAL_ADC_ConfigChannel+0x254>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d12b      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x23a>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <HAL_ADC_ConfigChannel+0x258>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <HAL_ADC_ConfigChannel+0x1f4>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b11      	cmp	r3, #17
 800a3be:	d122      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a11      	ldr	r2, [pc, #68]	; (800a424 <HAL_ADC_ConfigChannel+0x258>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d111      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a3e2:	4b11      	ldr	r3, [pc, #68]	; (800a428 <HAL_ADC_ConfigChannel+0x25c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a11      	ldr	r2, [pc, #68]	; (800a42c <HAL_ADC_ConfigChannel+0x260>)
 800a3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ec:	0c9a      	lsrs	r2, r3, #18
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a3f8:	e002      	b.n	800a400 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1f9      	bne.n	800a3fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40012300 	.word	0x40012300
 800a420:	40012000 	.word	0x40012000
 800a424:	10000012 	.word	0x10000012
 800a428:	20000000 	.word	0x20000000
 800a42c:	431bde83 	.word	0x431bde83

0800a430 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a438:	4b79      	ldr	r3, [pc, #484]	; (800a620 <ADC_Init+0x1f0>)
 800a43a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	431a      	orrs	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6859      	ldr	r1, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	021a      	lsls	r2, r3, #8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6859      	ldr	r1, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6899      	ldr	r1, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	4a58      	ldr	r2, [pc, #352]	; (800a624 <ADC_Init+0x1f4>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d022      	beq.n	800a50e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	689a      	ldr	r2, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a4d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6899      	ldr	r1, [r3, #8]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a4f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6899      	ldr	r1, [r3, #8]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	609a      	str	r2, [r3, #8]
 800a50c:	e00f      	b.n	800a52e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a51c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a52c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	689a      	ldr	r2, [r3, #8]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0202 	bic.w	r2, r2, #2
 800a53c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6899      	ldr	r1, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7e1b      	ldrb	r3, [r3, #24]
 800a548:	005a      	lsls	r2, r3, #1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01b      	beq.n	800a594 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a56a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a57a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6859      	ldr	r1, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	3b01      	subs	r3, #1
 800a588:	035a      	lsls	r2, r3, #13
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]
 800a592:	e007      	b.n	800a5a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	051a      	lsls	r2, r3, #20
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a5d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6899      	ldr	r1, [r3, #8]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5e6:	025a      	lsls	r2, r3, #9
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6899      	ldr	r1, [r3, #8]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	029a      	lsls	r2, r3, #10
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	609a      	str	r2, [r3, #8]
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	40012300 	.word	0x40012300
 800a624:	0f000001 	.word	0x0f000001

0800a628 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d13c      	bne.n	800a6bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d12b      	bne.n	800a6b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a660:	2b00      	cmp	r3, #0
 800a662:	d127      	bne.n	800a6b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d006      	beq.n	800a680 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d119      	bne.n	800a6b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0220 	bic.w	r2, r2, #32
 800a68e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d105      	bne.n	800a6b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ac:	f043 0201 	orr.w	r2, r3, #1
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f7ff fd6b 	bl	800a190 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a6ba:	e00e      	b.n	800a6da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	f003 0310 	and.w	r3, r3, #16
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7ff fd75 	bl	800a1b8 <HAL_ADC_ErrorCallback>
}
 800a6ce:	e004      	b.n	800a6da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	4798      	blx	r3
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff fd57 	bl	800a1a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2240      	movs	r2, #64	; 0x40
 800a710:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a716:	f043 0204 	orr.w	r2, r3, #4
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff fd4a 	bl	800a1b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a73c:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <__NVIC_SetPriorityGrouping+0x44>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a748:	4013      	ands	r3, r2
 800a74a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a75e:	4a04      	ldr	r2, [pc, #16]	; (800a770 <__NVIC_SetPriorityGrouping+0x44>)
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	60d3      	str	r3, [r2, #12]
}
 800a764:	bf00      	nop
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	e000ed00 	.word	0xe000ed00

0800a774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <__NVIC_GetPriorityGrouping+0x18>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	0a1b      	lsrs	r3, r3, #8
 800a77e:	f003 0307 	and.w	r3, r3, #7
}
 800a782:	4618      	mov	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	e000ed00 	.word	0xe000ed00

0800a790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	db0b      	blt.n	800a7ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	f003 021f 	and.w	r2, r3, #31
 800a7a8:	4907      	ldr	r1, [pc, #28]	; (800a7c8 <__NVIC_EnableIRQ+0x38>)
 800a7aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ae:	095b      	lsrs	r3, r3, #5
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	fa00 f202 	lsl.w	r2, r0, r2
 800a7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	e000e100 	.word	0xe000e100

0800a7cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6039      	str	r1, [r7, #0]
 800a7d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	db0a      	blt.n	800a7f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	490c      	ldr	r1, [pc, #48]	; (800a818 <__NVIC_SetPriority+0x4c>)
 800a7e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ea:	0112      	lsls	r2, r2, #4
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	440b      	add	r3, r1
 800a7f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a7f4:	e00a      	b.n	800a80c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4908      	ldr	r1, [pc, #32]	; (800a81c <__NVIC_SetPriority+0x50>)
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	3b04      	subs	r3, #4
 800a804:	0112      	lsls	r2, r2, #4
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	440b      	add	r3, r1
 800a80a:	761a      	strb	r2, [r3, #24]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	e000e100 	.word	0xe000e100
 800a81c:	e000ed00 	.word	0xe000ed00

0800a820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a820:	b480      	push	{r7}
 800a822:	b089      	sub	sp, #36	; 0x24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f1c3 0307 	rsb	r3, r3, #7
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	bf28      	it	cs
 800a83e:	2304      	movcs	r3, #4
 800a840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	3304      	adds	r3, #4
 800a846:	2b06      	cmp	r3, #6
 800a848:	d902      	bls.n	800a850 <NVIC_EncodePriority+0x30>
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	3b03      	subs	r3, #3
 800a84e:	e000      	b.n	800a852 <NVIC_EncodePriority+0x32>
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a854:	f04f 32ff 	mov.w	r2, #4294967295
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	fa02 f303 	lsl.w	r3, r2, r3
 800a85e:	43da      	mvns	r2, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	401a      	ands	r2, r3
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a868:	f04f 31ff 	mov.w	r1, #4294967295
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	fa01 f303 	lsl.w	r3, r1, r3
 800a872:	43d9      	mvns	r1, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a878:	4313      	orrs	r3, r2
         );
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3724      	adds	r7, #36	; 0x24
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3b01      	subs	r3, #1
 800a894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a898:	d301      	bcc.n	800a89e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a89a:	2301      	movs	r3, #1
 800a89c:	e00f      	b.n	800a8be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a89e:	4a0a      	ldr	r2, [pc, #40]	; (800a8c8 <SysTick_Config+0x40>)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8a6:	210f      	movs	r1, #15
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	f7ff ff8e 	bl	800a7cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8b0:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <SysTick_Config+0x40>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8b6:	4b04      	ldr	r3, [pc, #16]	; (800a8c8 <SysTick_Config+0x40>)
 800a8b8:	2207      	movs	r2, #7
 800a8ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	e000e010 	.word	0xe000e010

0800a8cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ff29 	bl	800a72c <__NVIC_SetPriorityGrouping>
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b086      	sub	sp, #24
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a8f4:	f7ff ff3e 	bl	800a774 <__NVIC_GetPriorityGrouping>
 800a8f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	68b9      	ldr	r1, [r7, #8]
 800a8fe:	6978      	ldr	r0, [r7, #20]
 800a900:	f7ff ff8e 	bl	800a820 <NVIC_EncodePriority>
 800a904:	4602      	mov	r2, r0
 800a906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a90a:	4611      	mov	r1, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff ff5d 	bl	800a7cc <__NVIC_SetPriority>
}
 800a912:	bf00      	nop
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	4603      	mov	r3, r0
 800a922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff ff31 	bl	800a790 <__NVIC_EnableIRQ>
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff ffa2 	bl	800a888 <SysTick_Config>
 800a944:	4603      	mov	r3, r0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a95c:	f7ff fab4 	bl	8009ec8 <HAL_GetTick>
 800a960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e099      	b.n	800aaa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 0201 	bic.w	r2, r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a98c:	e00f      	b.n	800a9ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a98e:	f7ff fa9b 	bl	8009ec8 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2b05      	cmp	r3, #5
 800a99a:	d908      	bls.n	800a9ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2203      	movs	r2, #3
 800a9a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e078      	b.n	800aaa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e8      	bne.n	800a98e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4b38      	ldr	r3, [pc, #224]	; (800aaa8 <HAL_DMA_Init+0x158>)
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d107      	bne.n	800aa18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa10:	4313      	orrs	r3, r2
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f023 0307 	bic.w	r3, r3, #7
 800aa2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d117      	bne.n	800aa72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00e      	beq.n	800aa72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fa9d 	bl	800af94 <DMA_CheckFifoParam>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d008      	beq.n	800aa72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2240      	movs	r2, #64	; 0x40
 800aa64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e016      	b.n	800aaa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa54 	bl	800af28 <DMA_CalcBaseAndBitshift>
 800aa80:	4603      	mov	r3, r0
 800aa82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa88:	223f      	movs	r2, #63	; 0x3f
 800aa8a:	409a      	lsls	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	f010803f 	.word	0xf010803f

0800aaac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <HAL_DMA_Start_IT+0x26>
 800aace:	2302      	movs	r3, #2
 800aad0:	e040      	b.n	800ab54 <HAL_DMA_Start_IT+0xa8>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d12f      	bne.n	800ab46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2202      	movs	r2, #2
 800aaea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f000 f9e6 	bl	800aecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab04:	223f      	movs	r2, #63	; 0x3f
 800ab06:	409a      	lsls	r2, r3
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0216 	orr.w	r2, r2, #22
 800ab1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0208 	orr.w	r2, r2, #8
 800ab32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0201 	orr.w	r2, r2, #1
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	e005      	b.n	800ab52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d004      	beq.n	800ab7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2280      	movs	r2, #128	; 0x80
 800ab74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e00c      	b.n	800ab94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0201 	bic.w	r2, r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abac:	4b92      	ldr	r3, [pc, #584]	; (800adf8 <HAL_DMA_IRQHandler+0x258>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a92      	ldr	r2, [pc, #584]	; (800adfc <HAL_DMA_IRQHandler+0x25c>)
 800abb2:	fba2 2303 	umull	r2, r3, r2, r3
 800abb6:	0a9b      	lsrs	r3, r3, #10
 800abb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abca:	2208      	movs	r2, #8
 800abcc:	409a      	lsls	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4013      	ands	r3, r2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01a      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d013      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 0204 	bic.w	r2, r2, #4
 800abf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf8:	2208      	movs	r2, #8
 800abfa:	409a      	lsls	r2, r3
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac04:	f043 0201 	orr.w	r2, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac10:	2201      	movs	r2, #1
 800ac12:	409a      	lsls	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4013      	ands	r3, r2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d012      	beq.n	800ac42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00b      	beq.n	800ac42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2e:	2201      	movs	r2, #1
 800ac30:	409a      	lsls	r2, r3
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3a:	f043 0202 	orr.w	r2, r3, #2
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac46:	2204      	movs	r2, #4
 800ac48:	409a      	lsls	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d012      	beq.n	800ac78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00b      	beq.n	800ac78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac64:	2204      	movs	r2, #4
 800ac66:	409a      	lsls	r2, r3
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac70:	f043 0204 	orr.w	r2, r3, #4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7c:	2210      	movs	r2, #16
 800ac7e:	409a      	lsls	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d043      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03c      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9a:	2210      	movs	r2, #16
 800ac9c:	409a      	lsls	r2, r3
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d018      	beq.n	800ace2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d108      	bne.n	800acd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d024      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	4798      	blx	r3
 800acce:	e01f      	b.n	800ad10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01b      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	4798      	blx	r3
 800ace0:	e016      	b.n	800ad10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acec:	2b00      	cmp	r3, #0
 800acee:	d107      	bne.n	800ad00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0208 	bic.w	r2, r2, #8
 800acfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad14:	2220      	movs	r2, #32
 800ad16:	409a      	lsls	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 808e 	beq.w	800ae3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 8086 	beq.w	800ae3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad36:	2220      	movs	r2, #32
 800ad38:	409a      	lsls	r2, r3
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b05      	cmp	r3, #5
 800ad48:	d136      	bne.n	800adb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 0216 	bic.w	r2, r2, #22
 800ad58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	695a      	ldr	r2, [r3, #20]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <HAL_DMA_IRQHandler+0x1da>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0208 	bic.w	r2, r2, #8
 800ad88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad8e:	223f      	movs	r2, #63	; 0x3f
 800ad90:	409a      	lsls	r2, r3
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d07d      	beq.n	800aeaa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	4798      	blx	r3
        }
        return;
 800adb6:	e078      	b.n	800aeaa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01c      	beq.n	800ae00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d108      	bne.n	800ade6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add8:	2b00      	cmp	r3, #0
 800adda:	d030      	beq.n	800ae3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	4798      	blx	r3
 800ade4:	e02b      	b.n	800ae3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d027      	beq.n	800ae3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
 800adf6:	e022      	b.n	800ae3e <HAL_DMA_IRQHandler+0x29e>
 800adf8:	20000000 	.word	0x20000000
 800adfc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10f      	bne.n	800ae2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f022 0210 	bic.w	r2, r2, #16
 800ae1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d032      	beq.n	800aeac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d022      	beq.n	800ae98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2205      	movs	r2, #5
 800ae56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0201 	bic.w	r2, r2, #1
 800ae68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	60bb      	str	r3, [r7, #8]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d307      	bcc.n	800ae86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f2      	bne.n	800ae6a <HAL_DMA_IRQHandler+0x2ca>
 800ae84:	e000      	b.n	800ae88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ae86:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
 800aea8:	e000      	b.n	800aeac <HAL_DMA_IRQHandler+0x30c>
        return;
 800aeaa:	bf00      	nop
    }
  }
}
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop

0800aeb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b40      	cmp	r3, #64	; 0x40
 800aef8:	d108      	bne.n	800af0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af0a:	e007      	b.n	800af1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	60da      	str	r2, [r3, #12]
}
 800af1c:	bf00      	nop
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	3b10      	subs	r3, #16
 800af38:	4a14      	ldr	r2, [pc, #80]	; (800af8c <DMA_CalcBaseAndBitshift+0x64>)
 800af3a:	fba2 2303 	umull	r2, r3, r2, r3
 800af3e:	091b      	lsrs	r3, r3, #4
 800af40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af42:	4a13      	ldr	r2, [pc, #76]	; (800af90 <DMA_CalcBaseAndBitshift+0x68>)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	4413      	add	r3, r2
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b03      	cmp	r3, #3
 800af54:	d909      	bls.n	800af6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	1d1a      	adds	r2, r3, #4
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	659a      	str	r2, [r3, #88]	; 0x58
 800af68:	e007      	b.n	800af7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	aaaaaaab 	.word	0xaaaaaaab
 800af90:	0801a1d8 	.word	0x0801a1d8

0800af94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d11f      	bne.n	800afee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d855      	bhi.n	800b060 <DMA_CheckFifoParam+0xcc>
 800afb4:	a201      	add	r2, pc, #4	; (adr r2, 800afbc <DMA_CheckFifoParam+0x28>)
 800afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afba:	bf00      	nop
 800afbc:	0800afcd 	.word	0x0800afcd
 800afc0:	0800afdf 	.word	0x0800afdf
 800afc4:	0800afcd 	.word	0x0800afcd
 800afc8:	0800b061 	.word	0x0800b061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d045      	beq.n	800b064 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afdc:	e042      	b.n	800b064 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800afe6:	d13f      	bne.n	800b068 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afec:	e03c      	b.n	800b068 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aff6:	d121      	bne.n	800b03c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b03      	cmp	r3, #3
 800affc:	d836      	bhi.n	800b06c <DMA_CheckFifoParam+0xd8>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <DMA_CheckFifoParam+0x70>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b015 	.word	0x0800b015
 800b008:	0800b01b 	.word	0x0800b01b
 800b00c:	0800b015 	.word	0x0800b015
 800b010:	0800b02d 	.word	0x0800b02d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	73fb      	strb	r3, [r7, #15]
      break;
 800b018:	e02f      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d024      	beq.n	800b070 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b02a:	e021      	b.n	800b070 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b034:	d11e      	bne.n	800b074 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b03a:	e01b      	b.n	800b074 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d902      	bls.n	800b048 <DMA_CheckFifoParam+0xb4>
 800b042:	2b03      	cmp	r3, #3
 800b044:	d003      	beq.n	800b04e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b046:	e018      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	73fb      	strb	r3, [r7, #15]
      break;
 800b04c:	e015      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00e      	beq.n	800b078 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	73fb      	strb	r3, [r7, #15]
      break;
 800b05e:	e00b      	b.n	800b078 <DMA_CheckFifoParam+0xe4>
      break;
 800b060:	bf00      	nop
 800b062:	e00a      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      break;
 800b064:	bf00      	nop
 800b066:	e008      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      break;
 800b068:	bf00      	nop
 800b06a:	e006      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      break;
 800b06c:	bf00      	nop
 800b06e:	e004      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      break;
 800b070:	bf00      	nop
 800b072:	e002      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      break;   
 800b074:	bf00      	nop
 800b076:	e000      	b.n	800b07a <DMA_CheckFifoParam+0xe6>
      break;
 800b078:	bf00      	nop
    }
  } 
  
  return status; 
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b088:	b480      	push	{r7}
 800b08a:	b089      	sub	sp, #36	; 0x24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b096:	2300      	movs	r3, #0
 800b098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b09e:	2300      	movs	r3, #0
 800b0a0:	61fb      	str	r3, [r7, #28]
 800b0a2:	e177      	b.n	800b394 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	f040 8166 	bne.w	800b38e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d00b      	beq.n	800b0e2 <HAL_GPIO_Init+0x5a>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d007      	beq.n	800b0e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0d6:	2b11      	cmp	r3, #17
 800b0d8:	d003      	beq.n	800b0e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	2b12      	cmp	r3, #18
 800b0e0:	d130      	bne.n	800b144 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	43db      	mvns	r3, r3
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	68da      	ldr	r2, [r3, #12]
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	fa02 f303 	lsl.w	r3, r2, r3
 800b106:	69ba      	ldr	r2, [r7, #24]
 800b108:	4313      	orrs	r3, r2
 800b10a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b118:	2201      	movs	r2, #1
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	fa02 f303 	lsl.w	r3, r2, r3
 800b120:	43db      	mvns	r3, r3
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	4013      	ands	r3, r2
 800b126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	091b      	lsrs	r3, r3, #4
 800b12e:	f003 0201 	and.w	r2, r3, #1
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	fa02 f303 	lsl.w	r3, r2, r3
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	2203      	movs	r2, #3
 800b150:	fa02 f303 	lsl.w	r3, r2, r3
 800b154:	43db      	mvns	r3, r3
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	4013      	ands	r3, r2
 800b15a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	fa02 f303 	lsl.w	r3, r2, r3
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d003      	beq.n	800b184 <HAL_GPIO_Init+0xfc>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	2b12      	cmp	r3, #18
 800b182:	d123      	bne.n	800b1cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	08da      	lsrs	r2, r3, #3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3208      	adds	r2, #8
 800b18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	f003 0307 	and.w	r3, r3, #7
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	220f      	movs	r2, #15
 800b19c:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a0:	43db      	mvns	r3, r3
 800b1a2:	69ba      	ldr	r2, [r7, #24]
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f003 0307 	and.w	r3, r3, #7
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	08da      	lsrs	r2, r3, #3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3208      	adds	r2, #8
 800b1c6:	69b9      	ldr	r1, [r7, #24]
 800b1c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	2203      	movs	r2, #3
 800b1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1dc:	43db      	mvns	r3, r3
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f003 0203 	and.w	r2, r3, #3
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 80c0 	beq.w	800b38e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	4b65      	ldr	r3, [pc, #404]	; (800b3a8 <HAL_GPIO_Init+0x320>)
 800b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b216:	4a64      	ldr	r2, [pc, #400]	; (800b3a8 <HAL_GPIO_Init+0x320>)
 800b218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b21c:	6453      	str	r3, [r2, #68]	; 0x44
 800b21e:	4b62      	ldr	r3, [pc, #392]	; (800b3a8 <HAL_GPIO_Init+0x320>)
 800b220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b226:	60fb      	str	r3, [r7, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b22a:	4a60      	ldr	r2, [pc, #384]	; (800b3ac <HAL_GPIO_Init+0x324>)
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	089b      	lsrs	r3, r3, #2
 800b230:	3302      	adds	r3, #2
 800b232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	220f      	movs	r2, #15
 800b242:	fa02 f303 	lsl.w	r3, r2, r3
 800b246:	43db      	mvns	r3, r3
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	4013      	ands	r3, r2
 800b24c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a57      	ldr	r2, [pc, #348]	; (800b3b0 <HAL_GPIO_Init+0x328>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d037      	beq.n	800b2c6 <HAL_GPIO_Init+0x23e>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a56      	ldr	r2, [pc, #344]	; (800b3b4 <HAL_GPIO_Init+0x32c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d031      	beq.n	800b2c2 <HAL_GPIO_Init+0x23a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a55      	ldr	r2, [pc, #340]	; (800b3b8 <HAL_GPIO_Init+0x330>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d02b      	beq.n	800b2be <HAL_GPIO_Init+0x236>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a54      	ldr	r2, [pc, #336]	; (800b3bc <HAL_GPIO_Init+0x334>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d025      	beq.n	800b2ba <HAL_GPIO_Init+0x232>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a53      	ldr	r2, [pc, #332]	; (800b3c0 <HAL_GPIO_Init+0x338>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d01f      	beq.n	800b2b6 <HAL_GPIO_Init+0x22e>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a52      	ldr	r2, [pc, #328]	; (800b3c4 <HAL_GPIO_Init+0x33c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d019      	beq.n	800b2b2 <HAL_GPIO_Init+0x22a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a51      	ldr	r2, [pc, #324]	; (800b3c8 <HAL_GPIO_Init+0x340>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d013      	beq.n	800b2ae <HAL_GPIO_Init+0x226>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a50      	ldr	r2, [pc, #320]	; (800b3cc <HAL_GPIO_Init+0x344>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00d      	beq.n	800b2aa <HAL_GPIO_Init+0x222>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a4f      	ldr	r2, [pc, #316]	; (800b3d0 <HAL_GPIO_Init+0x348>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d007      	beq.n	800b2a6 <HAL_GPIO_Init+0x21e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a4e      	ldr	r2, [pc, #312]	; (800b3d4 <HAL_GPIO_Init+0x34c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d101      	bne.n	800b2a2 <HAL_GPIO_Init+0x21a>
 800b29e:	2309      	movs	r3, #9
 800b2a0:	e012      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2a2:	230a      	movs	r3, #10
 800b2a4:	e010      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2a6:	2308      	movs	r3, #8
 800b2a8:	e00e      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2aa:	2307      	movs	r3, #7
 800b2ac:	e00c      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2ae:	2306      	movs	r3, #6
 800b2b0:	e00a      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2b2:	2305      	movs	r3, #5
 800b2b4:	e008      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2b6:	2304      	movs	r3, #4
 800b2b8:	e006      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e004      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e002      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <HAL_GPIO_Init+0x240>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	f002 0203 	and.w	r2, r2, #3
 800b2ce:	0092      	lsls	r2, r2, #2
 800b2d0:	4093      	lsls	r3, r2
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2d8:	4934      	ldr	r1, [pc, #208]	; (800b3ac <HAL_GPIO_Init+0x324>)
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	089b      	lsrs	r3, r3, #2
 800b2de:	3302      	adds	r3, #2
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b2e6:	4b3c      	ldr	r3, [pc, #240]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	43db      	mvns	r3, r3
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b30a:	4a33      	ldr	r2, [pc, #204]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b310:	4b31      	ldr	r3, [pc, #196]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	43db      	mvns	r3, r3
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	4013      	ands	r3, r2
 800b31e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	4313      	orrs	r3, r2
 800b332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b334:	4a28      	ldr	r2, [pc, #160]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b33a:	4b27      	ldr	r3, [pc, #156]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	43db      	mvns	r3, r3
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	4013      	ands	r3, r2
 800b348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b356:	69ba      	ldr	r2, [r7, #24]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b35e:	4a1e      	ldr	r2, [pc, #120]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b364:	4b1c      	ldr	r3, [pc, #112]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	43db      	mvns	r3, r3
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	4013      	ands	r3, r2
 800b372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	4313      	orrs	r3, r2
 800b386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b388:	4a13      	ldr	r2, [pc, #76]	; (800b3d8 <HAL_GPIO_Init+0x350>)
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	3301      	adds	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b0f      	cmp	r3, #15
 800b398:	f67f ae84 	bls.w	800b0a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b39c:	bf00      	nop
 800b39e:	3724      	adds	r7, #36	; 0x24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	40023800 	.word	0x40023800
 800b3ac:	40013800 	.word	0x40013800
 800b3b0:	40020000 	.word	0x40020000
 800b3b4:	40020400 	.word	0x40020400
 800b3b8:	40020800 	.word	0x40020800
 800b3bc:	40020c00 	.word	0x40020c00
 800b3c0:	40021000 	.word	0x40021000
 800b3c4:	40021400 	.word	0x40021400
 800b3c8:	40021800 	.word	0x40021800
 800b3cc:	40021c00 	.word	0x40021c00
 800b3d0:	40022000 	.word	0x40022000
 800b3d4:	40022400 	.word	0x40022400
 800b3d8:	40013c00 	.word	0x40013c00

0800b3dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691a      	ldr	r2, [r3, #16]
 800b3ec:	887b      	ldrh	r3, [r7, #2]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	73fb      	strb	r3, [r7, #15]
 800b3f8:	e001      	b.n	800b3fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	807b      	strh	r3, [r7, #2]
 800b418:	4613      	mov	r3, r2
 800b41a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b41c:	787b      	ldrb	r3, [r7, #1]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b422:	887a      	ldrh	r2, [r7, #2]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b428:	e003      	b.n	800b432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b42a:	887b      	ldrh	r3, [r7, #2]
 800b42c:	041a      	lsls	r2, r3, #16
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	619a      	str	r2, [r3, #24]
}
 800b432:	bf00      	nop
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
	...

0800b440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e11f      	b.n	800b692 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fb fe3a 	bl	80070e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2224      	movs	r2, #36	; 0x24
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0201 	bic.w	r2, r2, #1
 800b482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4a4:	f001 f96e 	bl	800c784 <HAL_RCC_GetPCLK1Freq>
 800b4a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4a7b      	ldr	r2, [pc, #492]	; (800b69c <HAL_I2C_Init+0x25c>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d807      	bhi.n	800b4c4 <HAL_I2C_Init+0x84>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4a7a      	ldr	r2, [pc, #488]	; (800b6a0 <HAL_I2C_Init+0x260>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	bf94      	ite	ls
 800b4bc:	2301      	movls	r3, #1
 800b4be:	2300      	movhi	r3, #0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	e006      	b.n	800b4d2 <HAL_I2C_Init+0x92>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4a77      	ldr	r2, [pc, #476]	; (800b6a4 <HAL_I2C_Init+0x264>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	bf94      	ite	ls
 800b4cc:	2301      	movls	r3, #1
 800b4ce:	2300      	movhi	r3, #0
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e0db      	b.n	800b692 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4a72      	ldr	r2, [pc, #456]	; (800b6a8 <HAL_I2C_Init+0x268>)
 800b4de:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e2:	0c9b      	lsrs	r3, r3, #18
 800b4e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	4a64      	ldr	r2, [pc, #400]	; (800b69c <HAL_I2C_Init+0x25c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d802      	bhi.n	800b514 <HAL_I2C_Init+0xd4>
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	3301      	adds	r3, #1
 800b512:	e009      	b.n	800b528 <HAL_I2C_Init+0xe8>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b51a:	fb02 f303 	mul.w	r3, r2, r3
 800b51e:	4a63      	ldr	r2, [pc, #396]	; (800b6ac <HAL_I2C_Init+0x26c>)
 800b520:	fba2 2303 	umull	r2, r3, r2, r3
 800b524:	099b      	lsrs	r3, r3, #6
 800b526:	3301      	adds	r3, #1
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	430b      	orrs	r3, r1
 800b52e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b53a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4956      	ldr	r1, [pc, #344]	; (800b69c <HAL_I2C_Init+0x25c>)
 800b544:	428b      	cmp	r3, r1
 800b546:	d80d      	bhi.n	800b564 <HAL_I2C_Init+0x124>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	1e59      	subs	r1, r3, #1
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	fbb1 f3f3 	udiv	r3, r1, r3
 800b556:	3301      	adds	r3, #1
 800b558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b55c:	2b04      	cmp	r3, #4
 800b55e:	bf38      	it	cc
 800b560:	2304      	movcc	r3, #4
 800b562:	e04f      	b.n	800b604 <HAL_I2C_Init+0x1c4>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d111      	bne.n	800b590 <HAL_I2C_Init+0x150>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	1e58      	subs	r0, r3, #1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6859      	ldr	r1, [r3, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	440b      	add	r3, r1
 800b57a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b57e:	3301      	adds	r3, #1
 800b580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b584:	2b00      	cmp	r3, #0
 800b586:	bf0c      	ite	eq
 800b588:	2301      	moveq	r3, #1
 800b58a:	2300      	movne	r3, #0
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	e012      	b.n	800b5b6 <HAL_I2C_Init+0x176>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	1e58      	subs	r0, r3, #1
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6859      	ldr	r1, [r3, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	440b      	add	r3, r1
 800b59e:	0099      	lsls	r1, r3, #2
 800b5a0:	440b      	add	r3, r1
 800b5a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bf0c      	ite	eq
 800b5b0:	2301      	moveq	r3, #1
 800b5b2:	2300      	movne	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <HAL_I2C_Init+0x17e>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e022      	b.n	800b604 <HAL_I2C_Init+0x1c4>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10e      	bne.n	800b5e4 <HAL_I2C_Init+0x1a4>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	1e58      	subs	r0, r3, #1
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6859      	ldr	r1, [r3, #4]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	440b      	add	r3, r1
 800b5d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5d8:	3301      	adds	r3, #1
 800b5da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5e2:	e00f      	b.n	800b604 <HAL_I2C_Init+0x1c4>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	1e58      	subs	r0, r3, #1
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6859      	ldr	r1, [r3, #4]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	0099      	lsls	r1, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b604:	6879      	ldr	r1, [r7, #4]
 800b606:	6809      	ldr	r1, [r1, #0]
 800b608:	4313      	orrs	r3, r2
 800b60a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	69da      	ldr	r2, [r3, #28]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	431a      	orrs	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	6911      	ldr	r1, [r2, #16]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	68d2      	ldr	r2, [r2, #12]
 800b63e:	4311      	orrs	r1, r2
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	430b      	orrs	r3, r1
 800b646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695a      	ldr	r2, [r3, #20]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0201 	orr.w	r2, r2, #1
 800b672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	000186a0 	.word	0x000186a0
 800b6a0:	001e847f 	.word	0x001e847f
 800b6a4:	003d08ff 	.word	0x003d08ff
 800b6a8:	431bde83 	.word	0x431bde83
 800b6ac:	10624dd3 	.word	0x10624dd3

0800b6b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	607a      	str	r2, [r7, #4]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	460b      	mov	r3, r1
 800b6be:	817b      	strh	r3, [r7, #10]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6c4:	f7fe fc00 	bl	8009ec8 <HAL_GetTick>
 800b6c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b20      	cmp	r3, #32
 800b6d4:	f040 80e0 	bne.w	800b898 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	2319      	movs	r3, #25
 800b6de:	2201      	movs	r2, #1
 800b6e0:	4970      	ldr	r1, [pc, #448]	; (800b8a4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 fc58 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e0d3      	b.n	800b89a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d101      	bne.n	800b700 <HAL_I2C_Master_Transmit+0x50>
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	e0cc      	b.n	800b89a <HAL_I2C_Master_Transmit+0x1ea>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b01      	cmp	r3, #1
 800b714:	d007      	beq.n	800b726 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b734:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2221      	movs	r2, #33	; 0x21
 800b73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2210      	movs	r2, #16
 800b742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	893a      	ldrh	r2, [r7, #8]
 800b756:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4a50      	ldr	r2, [pc, #320]	; (800b8a8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b768:	8979      	ldrh	r1, [r7, #10]
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	6a3a      	ldr	r2, [r7, #32]
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 fac2 	bl	800bcf8 <I2C_MasterRequestWrite>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e08d      	b.n	800b89a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b77e:	2300      	movs	r3, #0
 800b780:	613b      	str	r3, [r7, #16]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	613b      	str	r3, [r7, #16]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b794:	e066      	b.n	800b864 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	6a39      	ldr	r1, [r7, #32]
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 fcd2 	bl	800c144 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d107      	bne.n	800b7be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e06b      	b.n	800b89a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	781a      	ldrb	r2, [r3, #0]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	f003 0304 	and.w	r3, r3, #4
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d11b      	bne.n	800b838 <HAL_I2C_Master_Transmit+0x188>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b804:	2b00      	cmp	r3, #0
 800b806:	d017      	beq.n	800b838 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	781a      	ldrb	r2, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b822:	b29b      	uxth	r3, r3
 800b824:	3b01      	subs	r3, #1
 800b826:	b29a      	uxth	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b830:	3b01      	subs	r3, #1
 800b832:	b29a      	uxth	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	6a39      	ldr	r1, [r7, #32]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fcc2 	bl	800c1c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00d      	beq.n	800b864 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d107      	bne.n	800b860 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b85e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e01a      	b.n	800b89a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d194      	bne.n	800b796 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b87a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2220      	movs	r2, #32
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	e000      	b.n	800b89a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b898:	2302      	movs	r3, #2
  }
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	00100002 	.word	0x00100002
 800b8a8:	ffff0000 	.word	0xffff0000

0800b8ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08c      	sub	sp, #48	; 0x30
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	607a      	str	r2, [r7, #4]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	817b      	strh	r3, [r7, #10]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8c0:	f7fe fb02 	bl	8009ec8 <HAL_GetTick>
 800b8c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b20      	cmp	r3, #32
 800b8d0:	f040 820b 	bne.w	800bcea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2319      	movs	r3, #25
 800b8da:	2201      	movs	r2, #1
 800b8dc:	497c      	ldr	r1, [pc, #496]	; (800bad0 <HAL_I2C_Master_Receive+0x224>)
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 fb5a 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e1fe      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <HAL_I2C_Master_Receive+0x50>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e1f7      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d007      	beq.n	800b922 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0201 	orr.w	r2, r2, #1
 800b920:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b930:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2222      	movs	r2, #34	; 0x22
 800b936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2210      	movs	r2, #16
 800b93e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	893a      	ldrh	r2, [r7, #8]
 800b952:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b958:	b29a      	uxth	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4a5c      	ldr	r2, [pc, #368]	; (800bad4 <HAL_I2C_Master_Receive+0x228>)
 800b962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b964:	8979      	ldrh	r1, [r7, #10]
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 fa46 	bl	800bdfc <I2C_MasterRequestRead>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e1b8      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d113      	bne.n	800b9aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b982:	2300      	movs	r3, #0
 800b984:	623b      	str	r3, [r7, #32]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	623b      	str	r3, [r7, #32]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	623b      	str	r3, [r7, #32]
 800b996:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e18c      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d11b      	bne.n	800b9ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	61fb      	str	r3, [r7, #28]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9e6:	601a      	str	r2, [r3, #0]
 800b9e8:	e16c      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d11b      	bne.n	800ba2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba12:	2300      	movs	r3, #0
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	61bb      	str	r3, [r7, #24]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	61bb      	str	r3, [r7, #24]
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	e14c      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba50:	e138      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	f200 80f1 	bhi.w	800bc3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d123      	bne.n	800baac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 fbed 	bl	800c248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e139      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	691a      	ldr	r2, [r3, #16]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba94:	3b01      	subs	r3, #1
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	3b01      	subs	r3, #1
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baaa:	e10b      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d14e      	bne.n	800bb52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2200      	movs	r2, #0
 800babc:	4906      	ldr	r1, [pc, #24]	; (800bad8 <HAL_I2C_Master_Receive+0x22c>)
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 fa6a 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d008      	beq.n	800badc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e10e      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
 800bace:	bf00      	nop
 800bad0:	00100002 	.word	0x00100002
 800bad4:	ffff0000 	.word	0xffff0000
 800bad8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691a      	ldr	r2, [r3, #16]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	b2d2      	uxtb	r2, r2
 800baf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	3b01      	subs	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	b2d2      	uxtb	r2, r2
 800bb2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb50:	e0b8      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4966      	ldr	r1, [pc, #408]	; (800bcf4 <HAL_I2C_Master_Receive+0x448>)
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f000 fa1b 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e0bf      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691a      	ldr	r2, [r3, #16]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	b2d2      	uxtb	r2, r2
 800bb88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	3b01      	subs	r3, #1
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	494f      	ldr	r1, [pc, #316]	; (800bcf4 <HAL_I2C_Master_Receive+0x448>)
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f9ed 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e091      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	691a      	ldr	r2, [r3, #16]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	b2d2      	uxtb	r2, r2
 800bbe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	3b01      	subs	r3, #1
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	691a      	ldr	r2, [r3, #16]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc14:	b2d2      	uxtb	r2, r2
 800bc16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc26:	3b01      	subs	r3, #1
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc3c:	e042      	b.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 fb00 	bl	800c248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e04c      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	691a      	ldr	r2, [r3, #16]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	b2d2      	uxtb	r2, r2
 800bc5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	f003 0304 	and.w	r3, r3, #4
 800bc8e:	2b04      	cmp	r3, #4
 800bc90:	d118      	bne.n	800bcc4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	691a      	ldr	r2, [r3, #16]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	b2d2      	uxtb	r2, r2
 800bc9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f47f aec2 	bne.w	800ba52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	e000      	b.n	800bcec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bcea:	2302      	movs	r3, #2
  }
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3728      	adds	r7, #40	; 0x28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	00010004 	.word	0x00010004

0800bcf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	607a      	str	r2, [r7, #4]
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	460b      	mov	r3, r1
 800bd06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	2b08      	cmp	r3, #8
 800bd12:	d006      	beq.n	800bd22 <I2C_MasterRequestWrite+0x2a>
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d003      	beq.n	800bd22 <I2C_MasterRequestWrite+0x2a>
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd20:	d108      	bne.n	800bd34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	e00b      	b.n	800bd4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd38:	2b12      	cmp	r3, #18
 800bd3a:	d107      	bne.n	800bd4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 f91d 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00d      	beq.n	800bd80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd72:	d103      	bne.n	800bd7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e035      	b.n	800bdec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd88:	d108      	bne.n	800bd9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bd8a:	897b      	ldrh	r3, [r7, #10]
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	461a      	mov	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bd98:	611a      	str	r2, [r3, #16]
 800bd9a:	e01b      	b.n	800bdd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd9c:	897b      	ldrh	r3, [r7, #10]
 800bd9e:	11db      	asrs	r3, r3, #7
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f003 0306 	and.w	r3, r3, #6
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	f063 030f 	orn	r3, r3, #15
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	490e      	ldr	r1, [pc, #56]	; (800bdf4 <I2C_MasterRequestWrite+0xfc>)
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 f943 	bl	800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e010      	b.n	800bdec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bdca:	897b      	ldrh	r3, [r7, #10]
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4907      	ldr	r1, [pc, #28]	; (800bdf8 <I2C_MasterRequestWrite+0x100>)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f933 	bl	800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	00010008 	.word	0x00010008
 800bdf8:	00010002 	.word	0x00010002

0800bdfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af02      	add	r7, sp, #8
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	607a      	str	r2, [r7, #4]
 800be06:	603b      	str	r3, [r7, #0]
 800be08:	460b      	mov	r3, r1
 800be0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b08      	cmp	r3, #8
 800be26:	d006      	beq.n	800be36 <I2C_MasterRequestRead+0x3a>
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d003      	beq.n	800be36 <I2C_MasterRequestRead+0x3a>
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be34:	d108      	bne.n	800be48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	e00b      	b.n	800be60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4c:	2b11      	cmp	r3, #17
 800be4e:	d107      	bne.n	800be60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 f893 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00d      	beq.n	800be94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be86:	d103      	bne.n	800be90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e079      	b.n	800bf88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be9c:	d108      	bne.n	800beb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800be9e:	897b      	ldrh	r3, [r7, #10]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f043 0301 	orr.w	r3, r3, #1
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	611a      	str	r2, [r3, #16]
 800beae:	e05f      	b.n	800bf70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800beb0:	897b      	ldrh	r3, [r7, #10]
 800beb2:	11db      	asrs	r3, r3, #7
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	f003 0306 	and.w	r3, r3, #6
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f063 030f 	orn	r3, r3, #15
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	4930      	ldr	r1, [pc, #192]	; (800bf90 <I2C_MasterRequestRead+0x194>)
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f000 f8b9 	bl	800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e054      	b.n	800bf88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bede:	897b      	ldrh	r3, [r7, #10]
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4929      	ldr	r1, [pc, #164]	; (800bf94 <I2C_MasterRequestRead+0x198>)
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f8a9 	bl	800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e044      	b.n	800bf88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800befe:	2300      	movs	r3, #0
 800bf00:	613b      	str	r3, [r7, #16]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	613b      	str	r3, [r7, #16]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	613b      	str	r3, [r7, #16]
 800bf12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 f831 	bl	800bf98 <I2C_WaitOnFlagUntilTimeout>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00d      	beq.n	800bf58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4a:	d103      	bne.n	800bf54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e017      	b.n	800bf88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bf58:	897b      	ldrh	r3, [r7, #10]
 800bf5a:	11db      	asrs	r3, r3, #7
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	f003 0306 	and.w	r3, r3, #6
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	f063 030e 	orn	r3, r3, #14
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4907      	ldr	r1, [pc, #28]	; (800bf94 <I2C_MasterRequestRead+0x198>)
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f000 f865 	bl	800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e000      	b.n	800bf88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	00010008 	.word	0x00010008
 800bf94:	00010002 	.word	0x00010002

0800bf98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	603b      	str	r3, [r7, #0]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfa8:	e025      	b.n	800bff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb0:	d021      	beq.n	800bff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfb2:	f7fd ff89 	bl	8009ec8 <HAL_GetTick>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d302      	bcc.n	800bfc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d116      	bne.n	800bff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	f043 0220 	orr.w	r2, r3, #32
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e023      	b.n	800c03e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	0c1b      	lsrs	r3, r3, #16
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d10d      	bne.n	800c01c <I2C_WaitOnFlagUntilTimeout+0x84>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	43da      	mvns	r2, r3
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	4013      	ands	r3, r2
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	bf0c      	ite	eq
 800c012:	2301      	moveq	r3, #1
 800c014:	2300      	movne	r3, #0
 800c016:	b2db      	uxtb	r3, r3
 800c018:	461a      	mov	r2, r3
 800c01a:	e00c      	b.n	800c036 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	43da      	mvns	r2, r3
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	4013      	ands	r3, r2
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	bf0c      	ite	eq
 800c02e:	2301      	moveq	r3, #1
 800c030:	2300      	movne	r3, #0
 800c032:	b2db      	uxtb	r3, r3
 800c034:	461a      	mov	r2, r3
 800c036:	79fb      	ldrb	r3, [r7, #7]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d0b6      	beq.n	800bfaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
 800c052:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c054:	e051      	b.n	800c0fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	695b      	ldr	r3, [r3, #20]
 800c05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c064:	d123      	bne.n	800c0ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c074:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c07e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2220      	movs	r2, #32
 800c08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09a:	f043 0204 	orr.w	r2, r3, #4
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e046      	b.n	800c13c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d021      	beq.n	800c0fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0b6:	f7fd ff07 	bl	8009ec8 <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d302      	bcc.n	800c0cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d116      	bne.n	800c0fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e6:	f043 0220 	orr.w	r2, r3, #32
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e020      	b.n	800c13c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	0c1b      	lsrs	r3, r3, #16
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b01      	cmp	r3, #1
 800c102:	d10c      	bne.n	800c11e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	43da      	mvns	r2, r3
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	4013      	ands	r3, r2
 800c110:	b29b      	uxth	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	bf14      	ite	ne
 800c116:	2301      	movne	r3, #1
 800c118:	2300      	moveq	r3, #0
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	e00b      	b.n	800c136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	43da      	mvns	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	4013      	ands	r3, r2
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bf14      	ite	ne
 800c130:	2301      	movne	r3, #1
 800c132:	2300      	moveq	r3, #0
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d18d      	bne.n	800c056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c150:	e02d      	b.n	800c1ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 f8ce 	bl	800c2f4 <I2C_IsAcknowledgeFailed>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e02d      	b.n	800c1be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c168:	d021      	beq.n	800c1ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c16a:	f7fd fead 	bl	8009ec8 <HAL_GetTick>
 800c16e:	4602      	mov	r2, r0
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	429a      	cmp	r2, r3
 800c178:	d302      	bcc.n	800c180 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d116      	bne.n	800c1ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2220      	movs	r2, #32
 800c18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	f043 0220 	orr.w	r2, r3, #32
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e007      	b.n	800c1be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b8:	2b80      	cmp	r3, #128	; 0x80
 800c1ba:	d1ca      	bne.n	800c152 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	60f8      	str	r0, [r7, #12]
 800c1ce:	60b9      	str	r1, [r7, #8]
 800c1d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c1d2:	e02d      	b.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 f88d 	bl	800c2f4 <I2C_IsAcknowledgeFailed>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e02d      	b.n	800c240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d021      	beq.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ec:	f7fd fe6c 	bl	8009ec8 <HAL_GetTick>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d302      	bcc.n	800c202 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d116      	bne.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2220      	movs	r2, #32
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	f043 0220 	orr.w	r2, r3, #32
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e007      	b.n	800c240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	f003 0304 	and.w	r3, r3, #4
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d1ca      	bne.n	800c1d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c254:	e042      	b.n	800c2dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b10      	cmp	r3, #16
 800c262:	d119      	bne.n	800c298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f06f 0210 	mvn.w	r2, #16
 800c26c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2220      	movs	r2, #32
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	e029      	b.n	800c2ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c298:	f7fd fe16 	bl	8009ec8 <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d116      	bne.n	800c2dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c8:	f043 0220 	orr.w	r2, r3, #32
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e007      	b.n	800c2ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e6:	2b40      	cmp	r3, #64	; 0x40
 800c2e8:	d1b5      	bne.n	800c256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c30a:	d11b      	bne.n	800c344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2220      	movs	r2, #32
 800c320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c330:	f043 0204 	orr.w	r2, r3, #4
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
	...

0800c354 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c35a:	2300      	movs	r3, #0
 800c35c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c35e:	2300      	movs	r3, #0
 800c360:	603b      	str	r3, [r7, #0]
 800c362:	4b20      	ldr	r3, [pc, #128]	; (800c3e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c366:	4a1f      	ldr	r2, [pc, #124]	; (800c3e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c36c:	6413      	str	r3, [r2, #64]	; 0x40
 800c36e:	4b1d      	ldr	r3, [pc, #116]	; (800c3e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c37a:	4b1b      	ldr	r3, [pc, #108]	; (800c3e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800c37c:	2201      	movs	r2, #1
 800c37e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c380:	f7fd fda2 	bl	8009ec8 <HAL_GetTick>
 800c384:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c386:	e009      	b.n	800c39c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c388:	f7fd fd9e 	bl	8009ec8 <HAL_GetTick>
 800c38c:	4602      	mov	r2, r0
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c396:	d901      	bls.n	800c39c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c398:	2303      	movs	r3, #3
 800c39a:	e01f      	b.n	800c3dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c39c:	4b13      	ldr	r3, [pc, #76]	; (800c3ec <HAL_PWREx_EnableOverDrive+0x98>)
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a8:	d1ee      	bne.n	800c388 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c3aa:	4b11      	ldr	r3, [pc, #68]	; (800c3f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3b0:	f7fd fd8a 	bl	8009ec8 <HAL_GetTick>
 800c3b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3b6:	e009      	b.n	800c3cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3b8:	f7fd fd86 	bl	8009ec8 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3c6:	d901      	bls.n	800c3cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e007      	b.n	800c3dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3cc:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <HAL_PWREx_EnableOverDrive+0x98>)
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3d8:	d1ee      	bne.n	800c3b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	40023800 	.word	0x40023800
 800c3e8:	420e0040 	.word	0x420e0040
 800c3ec:	40007000 	.word	0x40007000
 800c3f0:	420e0044 	.word	0x420e0044

0800c3f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d101      	bne.n	800c408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e0cc      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c408:	4b68      	ldr	r3, [pc, #416]	; (800c5ac <HAL_RCC_ClockConfig+0x1b8>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 030f 	and.w	r3, r3, #15
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	429a      	cmp	r2, r3
 800c414:	d90c      	bls.n	800c430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c416:	4b65      	ldr	r3, [pc, #404]	; (800c5ac <HAL_RCC_ClockConfig+0x1b8>)
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c41e:	4b63      	ldr	r3, [pc, #396]	; (800c5ac <HAL_RCC_ClockConfig+0x1b8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d001      	beq.n	800c430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e0b8      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0302 	and.w	r3, r3, #2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d020      	beq.n	800c47e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c448:	4b59      	ldr	r3, [pc, #356]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	4a58      	ldr	r2, [pc, #352]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c44e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0308 	and.w	r3, r3, #8
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d005      	beq.n	800c46c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c460:	4b53      	ldr	r3, [pc, #332]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	4a52      	ldr	r2, [pc, #328]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c46a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c46c:	4b50      	ldr	r3, [pc, #320]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	494d      	ldr	r1, [pc, #308]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c47a:	4313      	orrs	r3, r2
 800c47c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d044      	beq.n	800c514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d107      	bne.n	800c4a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c492:	4b47      	ldr	r3, [pc, #284]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d119      	bne.n	800c4d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e07f      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d003      	beq.n	800c4b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d107      	bne.n	800c4c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4b2:	4b3f      	ldr	r3, [pc, #252]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e06f      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4c2:	4b3b      	ldr	r3, [pc, #236]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e067      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4d2:	4b37      	ldr	r3, [pc, #220]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	f023 0203 	bic.w	r2, r3, #3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	4934      	ldr	r1, [pc, #208]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c4e4:	f7fd fcf0 	bl	8009ec8 <HAL_GetTick>
 800c4e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4ea:	e00a      	b.n	800c502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4ec:	f7fd fcec 	bl	8009ec8 <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d901      	bls.n	800c502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e04f      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c502:	4b2b      	ldr	r3, [pc, #172]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	f003 020c 	and.w	r2, r3, #12
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	429a      	cmp	r2, r3
 800c512:	d1eb      	bne.n	800c4ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c514:	4b25      	ldr	r3, [pc, #148]	; (800c5ac <HAL_RCC_ClockConfig+0x1b8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 030f 	and.w	r3, r3, #15
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d20c      	bcs.n	800c53c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c522:	4b22      	ldr	r3, [pc, #136]	; (800c5ac <HAL_RCC_ClockConfig+0x1b8>)
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	b2d2      	uxtb	r2, r2
 800c528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c52a:	4b20      	ldr	r3, [pc, #128]	; (800c5ac <HAL_RCC_ClockConfig+0x1b8>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 030f 	and.w	r3, r3, #15
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	429a      	cmp	r2, r3
 800c536:	d001      	beq.n	800c53c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e032      	b.n	800c5a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d008      	beq.n	800c55a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	4916      	ldr	r1, [pc, #88]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c556:	4313      	orrs	r3, r2
 800c558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0308 	and.w	r3, r3, #8
 800c562:	2b00      	cmp	r3, #0
 800c564:	d009      	beq.n	800c57a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c566:	4b12      	ldr	r3, [pc, #72]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	490e      	ldr	r1, [pc, #56]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c576:	4313      	orrs	r3, r2
 800c578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c57a:	f000 f821 	bl	800c5c0 <HAL_RCC_GetSysClockFreq>
 800c57e:	4601      	mov	r1, r0
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <HAL_RCC_ClockConfig+0x1bc>)
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	091b      	lsrs	r3, r3, #4
 800c586:	f003 030f 	and.w	r3, r3, #15
 800c58a:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <HAL_RCC_ClockConfig+0x1c0>)
 800c58c:	5cd3      	ldrb	r3, [r2, r3]
 800c58e:	fa21 f303 	lsr.w	r3, r1, r3
 800c592:	4a09      	ldr	r2, [pc, #36]	; (800c5b8 <HAL_RCC_ClockConfig+0x1c4>)
 800c594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c596:	4b09      	ldr	r3, [pc, #36]	; (800c5bc <HAL_RCC_ClockConfig+0x1c8>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fd fc50 	bl	8009e40 <HAL_InitTick>

  return HAL_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	40023c00 	.word	0x40023c00
 800c5b0:	40023800 	.word	0x40023800
 800c5b4:	0801a1c0 	.word	0x0801a1c0
 800c5b8:	20000000 	.word	0x20000000
 800c5bc:	20000004 	.word	0x20000004

0800c5c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	607b      	str	r3, [r7, #4]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5d6:	4b63      	ldr	r3, [pc, #396]	; (800c764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f003 030c 	and.w	r3, r3, #12
 800c5de:	2b04      	cmp	r3, #4
 800c5e0:	d007      	beq.n	800c5f2 <HAL_RCC_GetSysClockFreq+0x32>
 800c5e2:	2b08      	cmp	r3, #8
 800c5e4:	d008      	beq.n	800c5f8 <HAL_RCC_GetSysClockFreq+0x38>
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f040 80b4 	bne.w	800c754 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c5ec:	4b5e      	ldr	r3, [pc, #376]	; (800c768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c5ee:	60bb      	str	r3, [r7, #8]
       break;
 800c5f0:	e0b3      	b.n	800c75a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c5f2:	4b5d      	ldr	r3, [pc, #372]	; (800c768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c5f4:	60bb      	str	r3, [r7, #8]
      break;
 800c5f6:	e0b0      	b.n	800c75a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c5f8:	4b5a      	ldr	r3, [pc, #360]	; (800c764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c600:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c602:	4b58      	ldr	r3, [pc, #352]	; (800c764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d04a      	beq.n	800c6a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c60e:	4b55      	ldr	r3, [pc, #340]	; (800c764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	099b      	lsrs	r3, r3, #6
 800c614:	f04f 0400 	mov.w	r4, #0
 800c618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	ea03 0501 	and.w	r5, r3, r1
 800c624:	ea04 0602 	and.w	r6, r4, r2
 800c628:	4629      	mov	r1, r5
 800c62a:	4632      	mov	r2, r6
 800c62c:	f04f 0300 	mov.w	r3, #0
 800c630:	f04f 0400 	mov.w	r4, #0
 800c634:	0154      	lsls	r4, r2, #5
 800c636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c63a:	014b      	lsls	r3, r1, #5
 800c63c:	4619      	mov	r1, r3
 800c63e:	4622      	mov	r2, r4
 800c640:	1b49      	subs	r1, r1, r5
 800c642:	eb62 0206 	sbc.w	r2, r2, r6
 800c646:	f04f 0300 	mov.w	r3, #0
 800c64a:	f04f 0400 	mov.w	r4, #0
 800c64e:	0194      	lsls	r4, r2, #6
 800c650:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c654:	018b      	lsls	r3, r1, #6
 800c656:	1a5b      	subs	r3, r3, r1
 800c658:	eb64 0402 	sbc.w	r4, r4, r2
 800c65c:	f04f 0100 	mov.w	r1, #0
 800c660:	f04f 0200 	mov.w	r2, #0
 800c664:	00e2      	lsls	r2, r4, #3
 800c666:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c66a:	00d9      	lsls	r1, r3, #3
 800c66c:	460b      	mov	r3, r1
 800c66e:	4614      	mov	r4, r2
 800c670:	195b      	adds	r3, r3, r5
 800c672:	eb44 0406 	adc.w	r4, r4, r6
 800c676:	f04f 0100 	mov.w	r1, #0
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	02a2      	lsls	r2, r4, #10
 800c680:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c684:	0299      	lsls	r1, r3, #10
 800c686:	460b      	mov	r3, r1
 800c688:	4614      	mov	r4, r2
 800c68a:	4618      	mov	r0, r3
 800c68c:	4621      	mov	r1, r4
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f04f 0400 	mov.w	r4, #0
 800c694:	461a      	mov	r2, r3
 800c696:	4623      	mov	r3, r4
 800c698:	f7f4 fb0e 	bl	8000cb8 <__aeabi_uldivmod>
 800c69c:	4603      	mov	r3, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	e049      	b.n	800c738 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6a4:	4b2f      	ldr	r3, [pc, #188]	; (800c764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	099b      	lsrs	r3, r3, #6
 800c6aa:	f04f 0400 	mov.w	r4, #0
 800c6ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c6b2:	f04f 0200 	mov.w	r2, #0
 800c6b6:	ea03 0501 	and.w	r5, r3, r1
 800c6ba:	ea04 0602 	and.w	r6, r4, r2
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	f04f 0300 	mov.w	r3, #0
 800c6c6:	f04f 0400 	mov.w	r4, #0
 800c6ca:	0154      	lsls	r4, r2, #5
 800c6cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c6d0:	014b      	lsls	r3, r1, #5
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	1b49      	subs	r1, r1, r5
 800c6d8:	eb62 0206 	sbc.w	r2, r2, r6
 800c6dc:	f04f 0300 	mov.w	r3, #0
 800c6e0:	f04f 0400 	mov.w	r4, #0
 800c6e4:	0194      	lsls	r4, r2, #6
 800c6e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c6ea:	018b      	lsls	r3, r1, #6
 800c6ec:	1a5b      	subs	r3, r3, r1
 800c6ee:	eb64 0402 	sbc.w	r4, r4, r2
 800c6f2:	f04f 0100 	mov.w	r1, #0
 800c6f6:	f04f 0200 	mov.w	r2, #0
 800c6fa:	00e2      	lsls	r2, r4, #3
 800c6fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c700:	00d9      	lsls	r1, r3, #3
 800c702:	460b      	mov	r3, r1
 800c704:	4614      	mov	r4, r2
 800c706:	195b      	adds	r3, r3, r5
 800c708:	eb44 0406 	adc.w	r4, r4, r6
 800c70c:	f04f 0100 	mov.w	r1, #0
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	02a2      	lsls	r2, r4, #10
 800c716:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c71a:	0299      	lsls	r1, r3, #10
 800c71c:	460b      	mov	r3, r1
 800c71e:	4614      	mov	r4, r2
 800c720:	4618      	mov	r0, r3
 800c722:	4621      	mov	r1, r4
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f04f 0400 	mov.w	r4, #0
 800c72a:	461a      	mov	r2, r3
 800c72c:	4623      	mov	r3, r4
 800c72e:	f7f4 fac3 	bl	8000cb8 <__aeabi_uldivmod>
 800c732:	4603      	mov	r3, r0
 800c734:	460c      	mov	r4, r1
 800c736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	0c1b      	lsrs	r3, r3, #16
 800c73e:	f003 0303 	and.w	r3, r3, #3
 800c742:	3301      	adds	r3, #1
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c750:	60bb      	str	r3, [r7, #8]
      break;
 800c752:	e002      	b.n	800c75a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c754:	4b04      	ldr	r3, [pc, #16]	; (800c768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c756:	60bb      	str	r3, [r7, #8]
      break;
 800c758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c75a:	68bb      	ldr	r3, [r7, #8]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c764:	40023800 	.word	0x40023800
 800c768:	00f42400 	.word	0x00f42400

0800c76c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c770:	4b03      	ldr	r3, [pc, #12]	; (800c780 <HAL_RCC_GetHCLKFreq+0x14>)
 800c772:	681b      	ldr	r3, [r3, #0]
}
 800c774:	4618      	mov	r0, r3
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	20000000 	.word	0x20000000

0800c784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c788:	f7ff fff0 	bl	800c76c <HAL_RCC_GetHCLKFreq>
 800c78c:	4601      	mov	r1, r0
 800c78e:	4b05      	ldr	r3, [pc, #20]	; (800c7a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	0a9b      	lsrs	r3, r3, #10
 800c794:	f003 0307 	and.w	r3, r3, #7
 800c798:	4a03      	ldr	r2, [pc, #12]	; (800c7a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c79a:	5cd3      	ldrb	r3, [r2, r3]
 800c79c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	40023800 	.word	0x40023800
 800c7a8:	0801a1d0 	.word	0x0801a1d0

0800c7ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7b0:	f7ff ffdc 	bl	800c76c <HAL_RCC_GetHCLKFreq>
 800c7b4:	4601      	mov	r1, r0
 800c7b6:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	0b5b      	lsrs	r3, r3, #13
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	4a03      	ldr	r2, [pc, #12]	; (800c7d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7c2:	5cd3      	ldrb	r3, [r2, r3]
 800c7c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	40023800 	.word	0x40023800
 800c7d0:	0801a1d0 	.word	0x0801a1d0

0800c7d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c7fc:	4b66      	ldr	r3, [pc, #408]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c802:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c80a:	4963      	ldr	r1, [pc, #396]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c81e:	4b5e      	ldr	r3, [pc, #376]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c824:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82c:	495a      	ldr	r1, [pc, #360]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10b      	bne.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d105      	bne.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c854:	2b00      	cmp	r3, #0
 800c856:	d075      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c858:	4b50      	ldr	r3, [pc, #320]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c85e:	f7fd fb33 	bl	8009ec8 <HAL_GetTick>
 800c862:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c864:	e008      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c866:	f7fd fb2f 	bl	8009ec8 <HAL_GetTick>
 800c86a:	4602      	mov	r2, r0
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	2b02      	cmp	r3, #2
 800c872:	d901      	bls.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c874:	2303      	movs	r3, #3
 800c876:	e1dc      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c878:	4b47      	ldr	r3, [pc, #284]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1f0      	bne.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d009      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	019a      	lsls	r2, r3, #6
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	071b      	lsls	r3, r3, #28
 800c89c:	493e      	ldr	r1, [pc, #248]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d01f      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8b0:	4b39      	ldr	r3, [pc, #228]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8b6:	0f1b      	lsrs	r3, r3, #28
 800c8b8:	f003 0307 	and.w	r3, r3, #7
 800c8bc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	019a      	lsls	r2, r3, #6
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	061b      	lsls	r3, r3, #24
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	071b      	lsls	r3, r3, #28
 800c8d0:	4931      	ldr	r1, [pc, #196]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c8d8:	4b2f      	ldr	r3, [pc, #188]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8de:	f023 021f 	bic.w	r2, r3, #31
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	492b      	ldr	r1, [pc, #172]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00d      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	019a      	lsls	r2, r3, #6
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	061b      	lsls	r3, r3, #24
 800c908:	431a      	orrs	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	071b      	lsls	r3, r3, #28
 800c910:	4921      	ldr	r1, [pc, #132]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c912:	4313      	orrs	r3, r2
 800c914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c918:	4b20      	ldr	r3, [pc, #128]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c91a:	2201      	movs	r2, #1
 800c91c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c91e:	f7fd fad3 	bl	8009ec8 <HAL_GetTick>
 800c922:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c924:	e008      	b.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c926:	f7fd facf 	bl	8009ec8 <HAL_GetTick>
 800c92a:	4602      	mov	r2, r0
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2b02      	cmp	r3, #2
 800c932:	d901      	bls.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e17c      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c938:	4b17      	ldr	r3, [pc, #92]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d0f0      	beq.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0304 	and.w	r3, r3, #4
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d112      	bne.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10c      	bne.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 80ce 	beq.w	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c96e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c972:	f040 80c8 	bne.w	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c976:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c97c:	f7fd faa4 	bl	8009ec8 <HAL_GetTick>
 800c980:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c982:	e00f      	b.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c984:	f7fd faa0 	bl	8009ec8 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d908      	bls.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e14d      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c996:	bf00      	nop
 800c998:	40023800 	.word	0x40023800
 800c99c:	42470068 	.word	0x42470068
 800c9a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9a4:	4ba5      	ldr	r3, [pc, #660]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9b0:	d0e8      	beq.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 0304 	and.w	r3, r3, #4
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d02e      	beq.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c9be:	4b9f      	ldr	r3, [pc, #636]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9c4:	0c1b      	lsrs	r3, r3, #16
 800c9c6:	f003 0303 	and.w	r3, r3, #3
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9d0:	4b9a      	ldr	r3, [pc, #616]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d6:	0f1b      	lsrs	r3, r3, #28
 800c9d8:	f003 0307 	and.w	r3, r3, #7
 800c9dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	019a      	lsls	r2, r3, #6
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	085b      	lsrs	r3, r3, #1
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	041b      	lsls	r3, r3, #16
 800c9ec:	431a      	orrs	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	061b      	lsls	r3, r3, #24
 800c9f4:	431a      	orrs	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	071b      	lsls	r3, r3, #28
 800c9fa:	4990      	ldr	r1, [pc, #576]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca02:	4b8e      	ldr	r3, [pc, #568]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	3b01      	subs	r3, #1
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	4989      	ldr	r1, [pc, #548]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 0308 	and.w	r3, r3, #8
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02c      	beq.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca28:	4b84      	ldr	r3, [pc, #528]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca2e:	0c1b      	lsrs	r3, r3, #16
 800ca30:	f003 0303 	and.w	r3, r3, #3
 800ca34:	3301      	adds	r3, #1
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca3a:	4b80      	ldr	r3, [pc, #512]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca40:	0e1b      	lsrs	r3, r3, #24
 800ca42:	f003 030f 	and.w	r3, r3, #15
 800ca46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	019a      	lsls	r2, r3, #6
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	085b      	lsrs	r3, r3, #1
 800ca52:	3b01      	subs	r3, #1
 800ca54:	041b      	lsls	r3, r3, #16
 800ca56:	431a      	orrs	r2, r3
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	061b      	lsls	r3, r3, #24
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	071b      	lsls	r3, r3, #28
 800ca64:	4975      	ldr	r1, [pc, #468]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ca6c:	4b73      	ldr	r3, [pc, #460]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7a:	4970      	ldr	r1, [pc, #448]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d024      	beq.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800ca92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca96:	d11f      	bne.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca98:	4b68      	ldr	r3, [pc, #416]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9e:	0e1b      	lsrs	r3, r3, #24
 800caa0:	f003 030f 	and.w	r3, r3, #15
 800caa4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800caa6:	4b65      	ldr	r3, [pc, #404]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caac:	0f1b      	lsrs	r3, r3, #28
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	019a      	lsls	r2, r3, #6
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	085b      	lsrs	r3, r3, #1
 800cac0:	3b01      	subs	r3, #1
 800cac2:	041b      	lsls	r3, r3, #16
 800cac4:	431a      	orrs	r2, r3
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	061b      	lsls	r3, r3, #24
 800caca:	431a      	orrs	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	071b      	lsls	r3, r3, #28
 800cad0:	495a      	ldr	r1, [pc, #360]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cad2:	4313      	orrs	r3, r2
 800cad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cad8:	4b59      	ldr	r3, [pc, #356]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cada:	2201      	movs	r2, #1
 800cadc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cade:	f7fd f9f3 	bl	8009ec8 <HAL_GetTick>
 800cae2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cae4:	e008      	b.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cae6:	f7fd f9ef 	bl	8009ec8 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d901      	bls.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e09c      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800caf8:	4b50      	ldr	r3, [pc, #320]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb04:	d1ef      	bne.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0320 	and.w	r3, r3, #32
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 8083 	beq.w	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb14:	2300      	movs	r3, #0
 800cb16:	60bb      	str	r3, [r7, #8]
 800cb18:	4b48      	ldr	r3, [pc, #288]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1c:	4a47      	ldr	r2, [pc, #284]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb22:	6413      	str	r3, [r2, #64]	; 0x40
 800cb24:	4b45      	ldr	r3, [pc, #276]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb2c:	60bb      	str	r3, [r7, #8]
 800cb2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb30:	4b44      	ldr	r3, [pc, #272]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a43      	ldr	r2, [pc, #268]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb3a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb3c:	f7fd f9c4 	bl	8009ec8 <HAL_GetTick>
 800cb40:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb42:	e008      	b.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cb44:	f7fd f9c0 	bl	8009ec8 <HAL_GetTick>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d901      	bls.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e06d      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb56:	4b3b      	ldr	r3, [pc, #236]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0f0      	beq.n	800cb44 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cb62:	4b36      	ldr	r3, [pc, #216]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb6a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d02f      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb7a:	69ba      	ldr	r2, [r7, #24]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d028      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb80:	4b2e      	ldr	r3, [pc, #184]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb88:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cb8a:	4b2f      	ldr	r3, [pc, #188]	; (800cc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cb90:	4b2d      	ldr	r3, [pc, #180]	; (800cc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cb96:	4a29      	ldr	r2, [pc, #164]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cb9c:	4b27      	ldr	r3, [pc, #156]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d114      	bne.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cba8:	f7fd f98e 	bl	8009ec8 <HAL_GetTick>
 800cbac:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbae:	e00a      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbb0:	f7fd f98a 	bl	8009ec8 <HAL_GetTick>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d901      	bls.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e035      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbc6:	4b1d      	ldr	r3, [pc, #116]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbca:	f003 0302 	and.w	r3, r3, #2
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d0ee      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbde:	d10d      	bne.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cbe0:	4b16      	ldr	r3, [pc, #88]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cbf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbf4:	4911      	ldr	r1, [pc, #68]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	608b      	str	r3, [r1, #8]
 800cbfa:	e005      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cbfc:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	4a0e      	ldr	r2, [pc, #56]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc06:	6093      	str	r3, [r2, #8]
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc14:	4909      	ldr	r1, [pc, #36]	; (800cc3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc16:	4313      	orrs	r3, r2
 800cc18:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f003 0310 	and.w	r3, r3, #16
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d004      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cc2c:	4b07      	ldr	r3, [pc, #28]	; (800cc4c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cc2e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3720      	adds	r7, #32
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	40023800 	.word	0x40023800
 800cc40:	42470070 	.word	0x42470070
 800cc44:	40007000 	.word	0x40007000
 800cc48:	42470e40 	.word	0x42470e40
 800cc4c:	424711e0 	.word	0x424711e0

0800cc50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d075      	beq.n	800cd54 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cc68:	4ba2      	ldr	r3, [pc, #648]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	f003 030c 	and.w	r3, r3, #12
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d00c      	beq.n	800cc8e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc74:	4b9f      	ldr	r3, [pc, #636]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cc7c:	2b08      	cmp	r3, #8
 800cc7e:	d112      	bne.n	800cca6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc80:	4b9c      	ldr	r3, [pc, #624]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc8c:	d10b      	bne.n	800cca6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc8e:	4b99      	ldr	r3, [pc, #612]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d05b      	beq.n	800cd52 <HAL_RCC_OscConfig+0x102>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d157      	bne.n	800cd52 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e20b      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccae:	d106      	bne.n	800ccbe <HAL_RCC_OscConfig+0x6e>
 800ccb0:	4b90      	ldr	r3, [pc, #576]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a8f      	ldr	r2, [pc, #572]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	e01d      	b.n	800ccfa <HAL_RCC_OscConfig+0xaa>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccc6:	d10c      	bne.n	800cce2 <HAL_RCC_OscConfig+0x92>
 800ccc8:	4b8a      	ldr	r3, [pc, #552]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a89      	ldr	r2, [pc, #548]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ccd2:	6013      	str	r3, [r2, #0]
 800ccd4:	4b87      	ldr	r3, [pc, #540]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a86      	ldr	r2, [pc, #536]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	e00b      	b.n	800ccfa <HAL_RCC_OscConfig+0xaa>
 800cce2:	4b84      	ldr	r3, [pc, #528]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a83      	ldr	r2, [pc, #524]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	4b81      	ldr	r3, [pc, #516]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a80      	ldr	r2, [pc, #512]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ccf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d013      	beq.n	800cd2a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd02:	f7fd f8e1 	bl	8009ec8 <HAL_GetTick>
 800cd06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd08:	e008      	b.n	800cd1c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd0a:	f7fd f8dd 	bl	8009ec8 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	2b64      	cmp	r3, #100	; 0x64
 800cd16:	d901      	bls.n	800cd1c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e1d0      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd1c:	4b75      	ldr	r3, [pc, #468]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0f0      	beq.n	800cd0a <HAL_RCC_OscConfig+0xba>
 800cd28:	e014      	b.n	800cd54 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd2a:	f7fd f8cd 	bl	8009ec8 <HAL_GetTick>
 800cd2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd30:	e008      	b.n	800cd44 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd32:	f7fd f8c9 	bl	8009ec8 <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b64      	cmp	r3, #100	; 0x64
 800cd3e:	d901      	bls.n	800cd44 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e1bc      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd44:	4b6b      	ldr	r3, [pc, #428]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1f0      	bne.n	800cd32 <HAL_RCC_OscConfig+0xe2>
 800cd50:	e000      	b.n	800cd54 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 0302 	and.w	r3, r3, #2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d063      	beq.n	800ce28 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cd60:	4b64      	ldr	r3, [pc, #400]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	f003 030c 	and.w	r3, r3, #12
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00b      	beq.n	800cd84 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd6c:	4b61      	ldr	r3, [pc, #388]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cd74:	2b08      	cmp	r3, #8
 800cd76:	d11c      	bne.n	800cdb2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd78:	4b5e      	ldr	r3, [pc, #376]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d116      	bne.n	800cdb2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cd84:	4b5b      	ldr	r3, [pc, #364]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d005      	beq.n	800cd9c <HAL_RCC_OscConfig+0x14c>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d001      	beq.n	800cd9c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e190      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd9c:	4b55      	ldr	r3, [pc, #340]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	4952      	ldr	r1, [pc, #328]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cdac:	4313      	orrs	r3, r2
 800cdae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdb0:	e03a      	b.n	800ce28 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d020      	beq.n	800cdfc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cdba:	4b4f      	ldr	r3, [pc, #316]	; (800cef8 <HAL_RCC_OscConfig+0x2a8>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdc0:	f7fd f882 	bl	8009ec8 <HAL_GetTick>
 800cdc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdc6:	e008      	b.n	800cdda <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cdc8:	f7fd f87e 	bl	8009ec8 <HAL_GetTick>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d901      	bls.n	800cdda <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e171      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdda:	4b46      	ldr	r3, [pc, #280]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 0302 	and.w	r3, r3, #2
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0f0      	beq.n	800cdc8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cde6:	4b43      	ldr	r3, [pc, #268]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	493f      	ldr	r1, [pc, #252]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	600b      	str	r3, [r1, #0]
 800cdfa:	e015      	b.n	800ce28 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdfc:	4b3e      	ldr	r3, [pc, #248]	; (800cef8 <HAL_RCC_OscConfig+0x2a8>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce02:	f7fd f861 	bl	8009ec8 <HAL_GetTick>
 800ce06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce08:	e008      	b.n	800ce1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce0a:	f7fd f85d 	bl	8009ec8 <HAL_GetTick>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d901      	bls.n	800ce1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e150      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce1c:	4b35      	ldr	r3, [pc, #212]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 0302 	and.w	r3, r3, #2
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1f0      	bne.n	800ce0a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 0308 	and.w	r3, r3, #8
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d030      	beq.n	800ce96 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	695b      	ldr	r3, [r3, #20]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d016      	beq.n	800ce6a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce3c:	4b2f      	ldr	r3, [pc, #188]	; (800cefc <HAL_RCC_OscConfig+0x2ac>)
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce42:	f7fd f841 	bl	8009ec8 <HAL_GetTick>
 800ce46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce48:	e008      	b.n	800ce5c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce4a:	f7fd f83d 	bl	8009ec8 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e130      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce5c:	4b25      	ldr	r3, [pc, #148]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ce5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0f0      	beq.n	800ce4a <HAL_RCC_OscConfig+0x1fa>
 800ce68:	e015      	b.n	800ce96 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce6a:	4b24      	ldr	r3, [pc, #144]	; (800cefc <HAL_RCC_OscConfig+0x2ac>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce70:	f7fd f82a 	bl	8009ec8 <HAL_GetTick>
 800ce74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce76:	e008      	b.n	800ce8a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce78:	f7fd f826 	bl	8009ec8 <HAL_GetTick>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d901      	bls.n	800ce8a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e119      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce8a:	4b1a      	ldr	r3, [pc, #104]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ce8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1f0      	bne.n	800ce78 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f003 0304 	and.w	r3, r3, #4
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 809f 	beq.w	800cfe2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cea4:	2300      	movs	r3, #0
 800cea6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cea8:	4b12      	ldr	r3, [pc, #72]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10f      	bne.n	800ced4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	60fb      	str	r3, [r7, #12]
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800ceba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebc:	4a0d      	ldr	r2, [pc, #52]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cec2:	6413      	str	r3, [r2, #64]	; 0x40
 800cec4:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <HAL_RCC_OscConfig+0x2a4>)
 800cec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ced0:	2301      	movs	r3, #1
 800ced2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ced4:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <HAL_RCC_OscConfig+0x2b0>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d120      	bne.n	800cf22 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <HAL_RCC_OscConfig+0x2b0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a06      	ldr	r2, [pc, #24]	; (800cf00 <HAL_RCC_OscConfig+0x2b0>)
 800cee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ceec:	f7fc ffec 	bl	8009ec8 <HAL_GetTick>
 800cef0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cef2:	e010      	b.n	800cf16 <HAL_RCC_OscConfig+0x2c6>
 800cef4:	40023800 	.word	0x40023800
 800cef8:	42470000 	.word	0x42470000
 800cefc:	42470e80 	.word	0x42470e80
 800cf00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf04:	f7fc ffe0 	bl	8009ec8 <HAL_GetTick>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d901      	bls.n	800cf16 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e0d3      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf16:	4b6c      	ldr	r3, [pc, #432]	; (800d0c8 <HAL_RCC_OscConfig+0x478>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0f0      	beq.n	800cf04 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d106      	bne.n	800cf38 <HAL_RCC_OscConfig+0x2e8>
 800cf2a:	4b68      	ldr	r3, [pc, #416]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2e:	4a67      	ldr	r2, [pc, #412]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf30:	f043 0301 	orr.w	r3, r3, #1
 800cf34:	6713      	str	r3, [r2, #112]	; 0x70
 800cf36:	e01c      	b.n	800cf72 <HAL_RCC_OscConfig+0x322>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	2b05      	cmp	r3, #5
 800cf3e:	d10c      	bne.n	800cf5a <HAL_RCC_OscConfig+0x30a>
 800cf40:	4b62      	ldr	r3, [pc, #392]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf44:	4a61      	ldr	r2, [pc, #388]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf46:	f043 0304 	orr.w	r3, r3, #4
 800cf4a:	6713      	str	r3, [r2, #112]	; 0x70
 800cf4c:	4b5f      	ldr	r3, [pc, #380]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf50:	4a5e      	ldr	r2, [pc, #376]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf52:	f043 0301 	orr.w	r3, r3, #1
 800cf56:	6713      	str	r3, [r2, #112]	; 0x70
 800cf58:	e00b      	b.n	800cf72 <HAL_RCC_OscConfig+0x322>
 800cf5a:	4b5c      	ldr	r3, [pc, #368]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5e:	4a5b      	ldr	r2, [pc, #364]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf60:	f023 0301 	bic.w	r3, r3, #1
 800cf64:	6713      	str	r3, [r2, #112]	; 0x70
 800cf66:	4b59      	ldr	r3, [pc, #356]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6a:	4a58      	ldr	r2, [pc, #352]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf6c:	f023 0304 	bic.w	r3, r3, #4
 800cf70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d015      	beq.n	800cfa6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf7a:	f7fc ffa5 	bl	8009ec8 <HAL_GetTick>
 800cf7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf80:	e00a      	b.n	800cf98 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf82:	f7fc ffa1 	bl	8009ec8 <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d901      	bls.n	800cf98 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cf94:	2303      	movs	r3, #3
 800cf96:	e092      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf98:	4b4c      	ldr	r3, [pc, #304]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cf9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9c:	f003 0302 	and.w	r3, r3, #2
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0ee      	beq.n	800cf82 <HAL_RCC_OscConfig+0x332>
 800cfa4:	e014      	b.n	800cfd0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfa6:	f7fc ff8f 	bl	8009ec8 <HAL_GetTick>
 800cfaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfac:	e00a      	b.n	800cfc4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfae:	f7fc ff8b 	bl	8009ec8 <HAL_GetTick>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d901      	bls.n	800cfc4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e07c      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfc4:	4b41      	ldr	r3, [pc, #260]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cfc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1ee      	bne.n	800cfae <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cfd0:	7dfb      	ldrb	r3, [r7, #23]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d105      	bne.n	800cfe2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cfd6:	4b3d      	ldr	r3, [pc, #244]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	4a3c      	ldr	r2, [pc, #240]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cfdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d068      	beq.n	800d0bc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cfea:	4b38      	ldr	r3, [pc, #224]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f003 030c 	and.w	r3, r3, #12
 800cff2:	2b08      	cmp	r3, #8
 800cff4:	d060      	beq.n	800d0b8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d145      	bne.n	800d08a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cffe:	4b34      	ldr	r3, [pc, #208]	; (800d0d0 <HAL_RCC_OscConfig+0x480>)
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d004:	f7fc ff60 	bl	8009ec8 <HAL_GetTick>
 800d008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d00a:	e008      	b.n	800d01e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d00c:	f7fc ff5c 	bl	8009ec8 <HAL_GetTick>
 800d010:	4602      	mov	r2, r0
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	2b02      	cmp	r3, #2
 800d018:	d901      	bls.n	800d01e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d01a:	2303      	movs	r3, #3
 800d01c:	e04f      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d01e:	4b2b      	ldr	r3, [pc, #172]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1f0      	bne.n	800d00c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	69da      	ldr	r2, [r3, #28]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a1b      	ldr	r3, [r3, #32]
 800d032:	431a      	orrs	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	019b      	lsls	r3, r3, #6
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d040:	085b      	lsrs	r3, r3, #1
 800d042:	3b01      	subs	r3, #1
 800d044:	041b      	lsls	r3, r3, #16
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04c:	061b      	lsls	r3, r3, #24
 800d04e:	431a      	orrs	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d054:	071b      	lsls	r3, r3, #28
 800d056:	491d      	ldr	r1, [pc, #116]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d05c:	4b1c      	ldr	r3, [pc, #112]	; (800d0d0 <HAL_RCC_OscConfig+0x480>)
 800d05e:	2201      	movs	r2, #1
 800d060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d062:	f7fc ff31 	bl	8009ec8 <HAL_GetTick>
 800d066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d068:	e008      	b.n	800d07c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d06a:	f7fc ff2d 	bl	8009ec8 <HAL_GetTick>
 800d06e:	4602      	mov	r2, r0
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	2b02      	cmp	r3, #2
 800d076:	d901      	bls.n	800d07c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	e020      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d07c:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0f0      	beq.n	800d06a <HAL_RCC_OscConfig+0x41a>
 800d088:	e018      	b.n	800d0bc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d08a:	4b11      	ldr	r3, [pc, #68]	; (800d0d0 <HAL_RCC_OscConfig+0x480>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d090:	f7fc ff1a 	bl	8009ec8 <HAL_GetTick>
 800d094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d096:	e008      	b.n	800d0aa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d098:	f7fc ff16 	bl	8009ec8 <HAL_GetTick>
 800d09c:	4602      	mov	r2, r0
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d901      	bls.n	800d0aa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	e009      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0aa:	4b08      	ldr	r3, [pc, #32]	; (800d0cc <HAL_RCC_OscConfig+0x47c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1f0      	bne.n	800d098 <HAL_RCC_OscConfig+0x448>
 800d0b6:	e001      	b.n	800d0bc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e000      	b.n	800d0be <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	40007000 	.word	0x40007000
 800d0cc:	40023800 	.word	0x40023800
 800d0d0:	42470060 	.word	0x42470060

0800d0d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e022      	b.n	800d12c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d105      	bne.n	800d0fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7fa f86d 	bl	80071d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2203      	movs	r2, #3
 800d102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f814 	bl	800d134 <HAL_SD_InitCard>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e00a      	b.n	800d12c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d134:	b5b0      	push	{r4, r5, r7, lr}
 800d136:	b08e      	sub	sp, #56	; 0x38
 800d138:	af04      	add	r7, sp, #16
 800d13a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d144:	2300      	movs	r3, #0
 800d146:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d148:	2300      	movs	r3, #0
 800d14a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d14c:	2300      	movs	r3, #0
 800d14e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d150:	2376      	movs	r3, #118	; 0x76
 800d152:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681d      	ldr	r5, [r3, #0]
 800d158:	466c      	mov	r4, sp
 800d15a:	f107 0314 	add.w	r3, r7, #20
 800d15e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d166:	f107 0308 	add.w	r3, r7, #8
 800d16a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d16c:	4628      	mov	r0, r5
 800d16e:	f003 fa87 	bl	8010680 <SDIO_Init>
 800d172:	4603      	mov	r3, r0
 800d174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	e031      	b.n	800d1e8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d184:	4b1a      	ldr	r3, [pc, #104]	; (800d1f0 <HAL_SD_InitCard+0xbc>)
 800d186:	2200      	movs	r2, #0
 800d188:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4618      	mov	r0, r3
 800d190:	f003 fabf 	bl	8010712 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d194:	4b16      	ldr	r3, [pc, #88]	; (800d1f0 <HAL_SD_InitCard+0xbc>)
 800d196:	2201      	movs	r2, #1
 800d198:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 ffc6 	bl	800e12c <SD_PowerON>
 800d1a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	431a      	orrs	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e013      	b.n	800d1e8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fee5 	bl	800df90 <SD_InitCard>
 800d1c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	431a      	orrs	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e000      	b.n	800d1e8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3728      	adds	r7, #40	; 0x28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d1f0:	422580a0 	.word	0x422580a0

0800d1f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08c      	sub	sp, #48	; 0x30
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d107      	bne.n	800d21c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d210:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	e0c7      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b01      	cmp	r3, #1
 800d226:	f040 80c0 	bne.w	800d3aa <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	441a      	add	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d907      	bls.n	800d24e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e0ae      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2203      	movs	r2, #3
 800d252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2200      	movs	r2, #0
 800d25c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d26c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d272:	4a50      	ldr	r2, [pc, #320]	; (800d3b4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	4a4f      	ldr	r2, [pc, #316]	; (800d3b8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d27c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d282:	2200      	movs	r2, #0
 800d284:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3380      	adds	r3, #128	; 0x80
 800d290:	4619      	mov	r1, r3
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	025b      	lsls	r3, r3, #9
 800d298:	089b      	lsrs	r3, r3, #2
 800d29a:	f7fd fc07 	bl	800aaac <HAL_DMA_Start_IT>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d017      	beq.n	800d2d4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d2b2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a40      	ldr	r2, [pc, #256]	; (800d3bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d2ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e06b      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d2d4:	4b3a      	ldr	r3, [pc, #232]	; (800d3c0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d002      	beq.n	800d2e8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	025b      	lsls	r3, r3, #9
 800d2e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f003 faa1 	bl	8010838 <SDMMC_CmdBlockLength>
 800d2f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00f      	beq.n	800d31e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a2e      	ldr	r2, [pc, #184]	; (800d3bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d304:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	431a      	orrs	r2, r3
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2201      	movs	r2, #1
 800d316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e046      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d31e:	f04f 33ff 	mov.w	r3, #4294967295
 800d322:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	025b      	lsls	r3, r3, #9
 800d328:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d32a:	2390      	movs	r3, #144	; 0x90
 800d32c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d32e:	2302      	movs	r3, #2
 800d330:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d332:	2300      	movs	r3, #0
 800d334:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d336:	2301      	movs	r3, #1
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f107 0210 	add.w	r2, r7, #16
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f003 fa4b 	bl	80107e0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d90a      	bls.n	800d366 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2282      	movs	r2, #130	; 0x82
 800d354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d35c:	4618      	mov	r0, r3
 800d35e:	f003 faaf 	bl	80108c0 <SDMMC_CmdReadMultiBlock>
 800d362:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d364:	e009      	b.n	800d37a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2281      	movs	r2, #129	; 0x81
 800d36a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d372:	4618      	mov	r0, r3
 800d374:	f003 fa82 	bl	801087c <SDMMC_CmdReadSingleBlock>
 800d378:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d012      	beq.n	800d3a6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a0d      	ldr	r2, [pc, #52]	; (800d3bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d386:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	431a      	orrs	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e002      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e000      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3aa:	2302      	movs	r3, #2
  }
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3730      	adds	r7, #48	; 0x30
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	0800dd9f 	.word	0x0800dd9f
 800d3b8:	0800de11 	.word	0x0800de11
 800d3bc:	004005ff 	.word	0x004005ff
 800d3c0:	4225858c 	.word	0x4225858c

0800d3c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b08c      	sub	sp, #48	; 0x30
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
 800d3d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d107      	bne.n	800d3ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e0ca      	b.n	800d582 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	f040 80c3 	bne.w	800d580 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d907      	bls.n	800d41e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e0b1      	b.n	800d582 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2203      	movs	r2, #3
 800d422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2200      	movs	r2, #0
 800d42c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f042 021a 	orr.w	r2, r2, #26
 800d43c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d442:	4a52      	ldr	r2, [pc, #328]	; (800d58c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44a:	4a51      	ldr	r2, [pc, #324]	; (800d590 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d44c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d452:	2200      	movs	r2, #0
 800d454:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d002      	beq.n	800d464 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d460:	025b      	lsls	r3, r3, #9
 800d462:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d46c:	4618      	mov	r0, r3
 800d46e:	f003 f9e3 	bl	8010838 <SDMMC_CmdBlockLength>
 800d472:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00f      	beq.n	800d49a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a45      	ldr	r2, [pc, #276]	; (800d594 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d480:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	431a      	orrs	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e073      	b.n	800d582 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d90a      	bls.n	800d4b6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	22a0      	movs	r2, #160	; 0xa0
 800d4a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f003 fa4b 	bl	8010948 <SDMMC_CmdWriteMultiBlock>
 800d4b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4b4:	e009      	b.n	800d4ca <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2290      	movs	r2, #144	; 0x90
 800d4ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f003 fa1e 	bl	8010904 <SDMMC_CmdWriteSingleBlock>
 800d4c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d012      	beq.n	800d4f6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a2f      	ldr	r2, [pc, #188]	; (800d594 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e045      	b.n	800d582 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d4f6:	4b28      	ldr	r3, [pc, #160]	; (800d598 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d500:	68b9      	ldr	r1, [r7, #8]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3380      	adds	r3, #128	; 0x80
 800d508:	461a      	mov	r2, r3
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	025b      	lsls	r3, r3, #9
 800d50e:	089b      	lsrs	r3, r3, #2
 800d510:	f7fd facc 	bl	800aaac <HAL_DMA_Start_IT>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d01a      	beq.n	800d550 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f022 021a 	bic.w	r2, r2, #26
 800d528:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a19      	ldr	r2, [pc, #100]	; (800d594 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d536:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	e018      	b.n	800d582 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	025b      	lsls	r3, r3, #9
 800d55a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d55c:	2390      	movs	r3, #144	; 0x90
 800d55e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d560:	2300      	movs	r3, #0
 800d562:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d564:	2300      	movs	r3, #0
 800d566:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d568:	2301      	movs	r3, #1
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f107 0210 	add.w	r2, r7, #16
 800d574:	4611      	mov	r1, r2
 800d576:	4618      	mov	r0, r3
 800d578:	f003 f932 	bl	80107e0 <SDIO_ConfigData>

      return HAL_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	e000      	b.n	800d582 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d580:	2302      	movs	r3, #2
  }
}
 800d582:	4618      	mov	r0, r3
 800d584:	3730      	adds	r7, #48	; 0x30
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	0800dd75 	.word	0x0800dd75
 800d590:	0800de11 	.word	0x0800de11
 800d594:	004005ff 	.word	0x004005ff
 800d598:	4225858c 	.word	0x4225858c

0800d59c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d008      	beq.n	800d5ca <HAL_SD_IRQHandler+0x2e>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f003 0308 	and.w	r3, r3, #8
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 ffc8 	bl	800e558 <SD_Read_IT>
 800d5c8:	e155      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 808f 	beq.w	800d6f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	6812      	ldr	r2, [r2, #0]
 800d5ee:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d5f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d5f6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f022 0201 	bic.w	r2, r2, #1
 800d606:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f003 0308 	and.w	r3, r3, #8
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d039      	beq.n	800d686 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f003 0302 	and.w	r3, r3, #2
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d104      	bne.n	800d626 <HAL_SD_IRQHandler+0x8a>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f003 0320 	and.w	r3, r3, #32
 800d622:	2b00      	cmp	r3, #0
 800d624:	d011      	beq.n	800d64a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f003 f9ae 	bl	801098c <SDMMC_CmdStopTransfer>
 800d630:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d008      	beq.n	800d64a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	431a      	orrs	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f91f 	bl	800d888 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d652:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d104      	bne.n	800d676 <HAL_SD_IRQHandler+0xda>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f003 0302 	and.w	r3, r3, #2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d003      	beq.n	800d67e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f003 fe04 	bl	8011284 <HAL_SD_RxCpltCallback>
 800d67c:	e0fb      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f003 fdf6 	bl	8011270 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d684:	e0f7      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 80f2 	beq.w	800d876 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0320 	and.w	r3, r3, #32
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d011      	beq.n	800d6c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f003 f973 	bl	801098c <SDMMC_CmdStopTransfer>
 800d6a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d008      	beq.n	800d6c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f8e4 	bl	800d888 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f040 80d5 	bne.w	800d876 <HAL_SD_IRQHandler+0x2da>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f003 0302 	and.w	r3, r3, #2
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f040 80cf 	bne.w	800d876 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f022 0208 	bic.w	r2, r2, #8
 800d6e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f003 fdbd 	bl	8011270 <HAL_SD_TxCpltCallback>
}
 800d6f6:	e0be      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d702:	2b00      	cmp	r3, #0
 800d704:	d008      	beq.n	800d718 <HAL_SD_IRQHandler+0x17c>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f003 0308 	and.w	r3, r3, #8
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d003      	beq.n	800d718 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 ff72 	bl	800e5fa <SD_Write_IT>
 800d716:	e0ae      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d722:	2b00      	cmp	r3, #0
 800d724:	f000 80a7 	beq.w	800d876 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d72e:	f003 0302 	and.w	r3, r3, #2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d005      	beq.n	800d742 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73a:	f043 0202 	orr.w	r2, r3, #2
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d005      	beq.n	800d75c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d754:	f043 0208 	orr.w	r2, r3, #8
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d762:	f003 0320 	and.w	r3, r3, #32
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	f043 0220 	orr.w	r2, r3, #32
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77c:	f003 0310 	and.w	r3, r3, #16
 800d780:	2b00      	cmp	r3, #0
 800d782:	d005      	beq.n	800d790 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d788:	f043 0210 	orr.w	r2, r3, #16
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f240 523a 	movw	r2, #1338	; 0x53a
 800d798:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f003 f8ec 	bl	801098c <SDMMC_CmdStopTransfer>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0308 	and.w	r3, r3, #8
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f855 	bl	800d888 <HAL_SD_ErrorCallback>
}
 800d7de:	e04a      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d045      	beq.n	800d876 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f003 0310 	and.w	r3, r3, #16
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d104      	bne.n	800d7fe <HAL_SD_IRQHandler+0x262>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f003 0320 	and.w	r3, r3, #32
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d011      	beq.n	800d822 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d802:	4a1f      	ldr	r2, [pc, #124]	; (800d880 <HAL_SD_IRQHandler+0x2e4>)
 800d804:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fd f9a6 	bl	800ab5c <HAL_DMA_Abort_IT>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d02f      	beq.n	800d876 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fb4a 	bl	800deb4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d820:	e029      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d104      	bne.n	800d836 <HAL_SD_IRQHandler+0x29a>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f003 0302 	and.w	r3, r3, #2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d011      	beq.n	800d85a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83a:	4a12      	ldr	r2, [pc, #72]	; (800d884 <HAL_SD_IRQHandler+0x2e8>)
 800d83c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d842:	4618      	mov	r0, r3
 800d844:	f7fd f98a 	bl	800ab5c <HAL_DMA_Abort_IT>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d013      	beq.n	800d876 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d852:	4618      	mov	r0, r3
 800d854:	f000 fb65 	bl	800df22 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d858:	e00d      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f003 fcf4 	bl	801125c <HAL_SD_AbortCallback>
}
 800d874:	e7ff      	b.n	800d876 <HAL_SD_IRQHandler+0x2da>
 800d876:	bf00      	nop
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	0800deb5 	.word	0x0800deb5
 800d884:	0800df23 	.word	0x0800df23

0800d888 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8aa:	0f9b      	lsrs	r3, r3, #30
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8b6:	0e9b      	lsrs	r3, r3, #26
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	f003 030f 	and.w	r3, r3, #15
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8c8:	0e1b      	lsrs	r3, r3, #24
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 0303 	and.w	r3, r3, #3
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8da:	0c1b      	lsrs	r3, r3, #16
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e6:	0a1b      	lsrs	r3, r3, #8
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8fc:	0d1b      	lsrs	r3, r3, #20
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d908:	0c1b      	lsrs	r3, r3, #16
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 030f 	and.w	r3, r3, #15
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d91a:	0bdb      	lsrs	r3, r3, #15
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0301 	and.w	r3, r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d92c:	0b9b      	lsrs	r3, r3, #14
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	b2da      	uxtb	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93e:	0b5b      	lsrs	r3, r3, #13
 800d940:	b2db      	uxtb	r3, r3
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	b2da      	uxtb	r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d950:	0b1b      	lsrs	r3, r3, #12
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 0301 	and.w	r3, r3, #1
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2200      	movs	r2, #0
 800d962:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d163      	bne.n	800da34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d970:	009a      	lsls	r2, r3, #2
 800d972:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d976:	4013      	ands	r3, r2
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d97c:	0f92      	lsrs	r2, r2, #30
 800d97e:	431a      	orrs	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d988:	0edb      	lsrs	r3, r3, #27
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0307 	and.w	r3, r3, #7
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d99a:	0e1b      	lsrs	r3, r3, #24
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 0307 	and.w	r3, r3, #7
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ac:	0d5b      	lsrs	r3, r3, #21
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0307 	and.w	r3, r3, #7
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9be:	0c9b      	lsrs	r3, r3, #18
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d0:	0bdb      	lsrs	r3, r3, #15
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0307 	and.w	r3, r3, #7
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	7e1b      	ldrb	r3, [r3, #24]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	f003 0307 	and.w	r3, r3, #7
 800d9f2:	3302      	adds	r3, #2
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d9fe:	fb02 f203 	mul.w	r2, r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	7a1b      	ldrb	r3, [r3, #8]
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	f003 030f 	and.w	r3, r3, #15
 800da10:	2201      	movs	r2, #1
 800da12:	409a      	lsls	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da20:	0a52      	lsrs	r2, r2, #9
 800da22:	fb02 f203 	mul.w	r2, r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da30:	661a      	str	r2, [r3, #96]	; 0x60
 800da32:	e031      	b.n	800da98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d11d      	bne.n	800da78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da40:	041b      	lsls	r3, r3, #16
 800da42:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da4a:	0c1b      	lsrs	r3, r3, #16
 800da4c:	431a      	orrs	r2, r3
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	3301      	adds	r3, #1
 800da58:	029a      	lsls	r2, r3, #10
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	661a      	str	r2, [r3, #96]	; 0x60
 800da76:	e00f      	b.n	800da98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a58      	ldr	r2, [pc, #352]	; (800dbe0 <HAL_SD_GetCardCSD+0x344>)
 800da7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e09d      	b.n	800dbd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da9c:	0b9b      	lsrs	r3, r3, #14
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f003 0301 	and.w	r3, r3, #1
 800daa4:	b2da      	uxtb	r2, r3
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daae:	09db      	lsrs	r3, r3, #7
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad0:	0fdb      	lsrs	r3, r3, #31
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dadc:	0f5b      	lsrs	r3, r3, #29
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 0303 	and.w	r3, r3, #3
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daee:	0e9b      	lsrs	r3, r3, #26
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db00:	0d9b      	lsrs	r3, r3, #22
 800db02:	b2db      	uxtb	r3, r3
 800db04:	f003 030f 	and.w	r3, r3, #15
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db12:	0d5b      	lsrs	r3, r3, #21
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2200      	movs	r2, #0
 800db26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2e:	0c1b      	lsrs	r3, r3, #16
 800db30:	b2db      	uxtb	r3, r3
 800db32:	f003 0301 	and.w	r3, r3, #1
 800db36:	b2da      	uxtb	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db42:	0bdb      	lsrs	r3, r3, #15
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db56:	0b9b      	lsrs	r3, r3, #14
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6a:	0b5b      	lsrs	r3, r3, #13
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	b2da      	uxtb	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7e:	0b1b      	lsrs	r3, r3, #12
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db92:	0a9b      	lsrs	r3, r3, #10
 800db94:	b2db      	uxtb	r3, r3
 800db96:	f003 0303 	and.w	r3, r3, #3
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba6:	0a1b      	lsrs	r3, r3, #8
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	f003 0303 	and.w	r3, r3, #3
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbba:	085b      	lsrs	r3, r3, #1
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	004005ff 	.word	0x004005ff

0800dbe4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc3c:	b5b0      	push	{r4, r5, r7, lr}
 800dc3e:	b08e      	sub	sp, #56	; 0x38
 800dc40:	af04      	add	r7, sp, #16
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2203      	movs	r2, #3
 800dc4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d02e      	beq.n	800dcb4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc5c:	d106      	bne.n	800dc6c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	639a      	str	r2, [r3, #56]	; 0x38
 800dc6a:	e029      	b.n	800dcc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc72:	d10a      	bne.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fb0f 	bl	800e298 <SD_WideBus_Enable>
 800dc7a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	431a      	orrs	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	639a      	str	r2, [r3, #56]	; 0x38
 800dc88:	e01a      	b.n	800dcc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10a      	bne.n	800dca6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fb4c 	bl	800e32e <SD_WideBus_Disable>
 800dc96:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
 800dca4:	e00c      	b.n	800dcc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	639a      	str	r2, [r3, #56]	; 0x38
 800dcb2:	e005      	b.n	800dcc0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d009      	beq.n	800dcdc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a18      	ldr	r2, [pc, #96]	; (800dd30 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dcce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e024      	b.n	800dd26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681d      	ldr	r5, [r3, #0]
 800dd02:	466c      	mov	r4, sp
 800dd04:	f107 0318 	add.w	r3, r7, #24
 800dd08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd10:	f107 030c 	add.w	r3, r7, #12
 800dd14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd16:	4628      	mov	r0, r5
 800dd18:	f002 fcb2 	bl	8010680 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3728      	adds	r7, #40	; 0x28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	004005ff 	.word	0x004005ff

0800dd34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dd40:	f107 030c 	add.w	r3, r7, #12
 800dd44:	4619      	mov	r1, r3
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fa7e 	bl	800e248 <SD_SendStatus>
 800dd4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d005      	beq.n	800dd60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	0a5b      	lsrs	r3, r3, #9
 800dd64:	f003 030f 	and.w	r3, r3, #15
 800dd68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd6a:	693b      	ldr	r3, [r7, #16]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dd92:	bf00      	nop
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddaa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb0:	2b82      	cmp	r3, #130	; 0x82
 800ddb2:	d111      	bne.n	800ddd8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f002 fde7 	bl	801098c <SDMMC_CmdStopTransfer>
 800ddbe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d008      	beq.n	800ddd8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	431a      	orrs	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fd58 	bl	800d888 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f022 0208 	bic.w	r2, r2, #8
 800dde6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f240 523a 	movw	r2, #1338	; 0x53a
 800ddf0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f003 fa3f 	bl	8011284 <HAL_SD_RxCpltCallback>
#endif
}
 800de06:	bf00      	nop
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7fd f848 	bl	800aeb4 <HAL_DMA_GetError>
 800de24:	4603      	mov	r3, r0
 800de26:	2b02      	cmp	r3, #2
 800de28:	d03e      	beq.n	800dea8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d002      	beq.n	800de46 <SD_DMAError+0x36>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d12d      	bne.n	800dea2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a19      	ldr	r2, [pc, #100]	; (800deb0 <SD_DMAError+0xa0>)
 800de4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800de5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800de6a:	6978      	ldr	r0, [r7, #20]
 800de6c:	f7ff ff62 	bl	800dd34 <HAL_SD_GetCardState>
 800de70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b06      	cmp	r3, #6
 800de76:	d002      	beq.n	800de7e <SD_DMAError+0x6e>
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d10a      	bne.n	800de94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4618      	mov	r0, r3
 800de84:	f002 fd82 	bl	801098c <SDMMC_CmdStopTransfer>
 800de88:	4602      	mov	r2, r0
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8e:	431a      	orrs	r2, r3
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	2201      	movs	r2, #1
 800de98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	2200      	movs	r2, #0
 800dea0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dea2:	6978      	ldr	r0, [r7, #20]
 800dea4:	f7ff fcf0 	bl	800d888 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dea8:	bf00      	nop
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	004005ff 	.word	0x004005ff

0800deb4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f240 523a 	movw	r2, #1338	; 0x53a
 800deca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f7ff ff31 	bl	800dd34 <HAL_SD_GetCardState>
 800ded2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2200      	movs	r2, #0
 800dee0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2b06      	cmp	r3, #6
 800dee6:	d002      	beq.n	800deee <SD_DMATxAbort+0x3a>
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b05      	cmp	r3, #5
 800deec:	d10a      	bne.n	800df04 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4618      	mov	r0, r3
 800def4:	f002 fd4a 	bl	801098c <SDMMC_CmdStopTransfer>
 800def8:	4602      	mov	r2, r0
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	431a      	orrs	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d103      	bne.n	800df14 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f003 f9a5 	bl	801125c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df12:	e002      	b.n	800df1a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff fcb7 	bl	800d888 <HAL_SD_ErrorCallback>
}
 800df1a:	bf00      	nop
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b084      	sub	sp, #16
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f240 523a 	movw	r2, #1338	; 0x53a
 800df38:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fefa 	bl	800dd34 <HAL_SD_GetCardState>
 800df40:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b06      	cmp	r3, #6
 800df54:	d002      	beq.n	800df5c <SD_DMARxAbort+0x3a>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b05      	cmp	r3, #5
 800df5a:	d10a      	bne.n	800df72 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4618      	mov	r0, r3
 800df62:	f002 fd13 	bl	801098c <SDMMC_CmdStopTransfer>
 800df66:	4602      	mov	r2, r0
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6c:	431a      	orrs	r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	2b00      	cmp	r3, #0
 800df78:	d103      	bne.n	800df82 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f003 f96e 	bl	801125c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df80:	e002      	b.n	800df88 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f7ff fc80 	bl	800d888 <HAL_SD_ErrorCallback>
}
 800df88:	bf00      	nop
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df90:	b5b0      	push	{r4, r5, r7, lr}
 800df92:	b094      	sub	sp, #80	; 0x50
 800df94:	af04      	add	r7, sp, #16
 800df96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800df98:	2301      	movs	r3, #1
 800df9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f002 fbc5 	bl	8010730 <SDIO_GetPowerState>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d102      	bne.n	800dfb2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dfb0:	e0b7      	b.n	800e122 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfb6:	2b03      	cmp	r3, #3
 800dfb8:	d02f      	beq.n	800e01a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f002 fdee 	bl	8010ba0 <SDMMC_CmdSendCID>
 800dfc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <SD_InitCard+0x40>
    {
      return errorstate;
 800dfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfce:	e0a8      	b.n	800e122 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f002 fbef 	bl	80107ba <SDIO_GetResponse>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2104      	movs	r1, #4
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f002 fbe6 	bl	80107ba <SDIO_GetResponse>
 800dfee:	4602      	mov	r2, r0
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2108      	movs	r1, #8
 800dffa:	4618      	mov	r0, r3
 800dffc:	f002 fbdd 	bl	80107ba <SDIO_GetResponse>
 800e000:	4602      	mov	r2, r0
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	210c      	movs	r1, #12
 800e00c:	4618      	mov	r0, r3
 800e00e:	f002 fbd4 	bl	80107ba <SDIO_GetResponse>
 800e012:	4602      	mov	r2, r0
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e01e:	2b03      	cmp	r3, #3
 800e020:	d00d      	beq.n	800e03e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f107 020e 	add.w	r2, r7, #14
 800e02a:	4611      	mov	r1, r2
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 fdf4 	bl	8010c1a <SDMMC_CmdSetRelAdd>
 800e032:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <SD_InitCard+0xae>
    {
      return errorstate;
 800e03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03c:	e071      	b.n	800e122 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e042:	2b03      	cmp	r3, #3
 800e044:	d036      	beq.n	800e0b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e046:	89fb      	ldrh	r3, [r7, #14]
 800e048:	461a      	mov	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e056:	041b      	lsls	r3, r3, #16
 800e058:	4619      	mov	r1, r3
 800e05a:	4610      	mov	r0, r2
 800e05c:	f002 fdbe 	bl	8010bdc <SDMMC_CmdSendCSD>
 800e060:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e064:	2b00      	cmp	r3, #0
 800e066:	d001      	beq.n	800e06c <SD_InitCard+0xdc>
    {
      return errorstate;
 800e068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06a:	e05a      	b.n	800e122 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2100      	movs	r1, #0
 800e072:	4618      	mov	r0, r3
 800e074:	f002 fba1 	bl	80107ba <SDIO_GetResponse>
 800e078:	4602      	mov	r2, r0
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2104      	movs	r1, #4
 800e084:	4618      	mov	r0, r3
 800e086:	f002 fb98 	bl	80107ba <SDIO_GetResponse>
 800e08a:	4602      	mov	r2, r0
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2108      	movs	r1, #8
 800e096:	4618      	mov	r0, r3
 800e098:	f002 fb8f 	bl	80107ba <SDIO_GetResponse>
 800e09c:	4602      	mov	r2, r0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	210c      	movs	r1, #12
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f002 fb86 	bl	80107ba <SDIO_GetResponse>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2104      	movs	r1, #4
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f002 fb7d 	bl	80107ba <SDIO_GetResponse>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	0d1a      	lsrs	r2, r3, #20
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0c8:	f107 0310 	add.w	r3, r7, #16
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff fbe4 	bl	800d89c <HAL_SD_GetCardCSD>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d002      	beq.n	800e0e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0de:	e020      	b.n	800e122 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6819      	ldr	r1, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e8:	041b      	lsls	r3, r3, #16
 800e0ea:	f04f 0400 	mov.w	r4, #0
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	4623      	mov	r3, r4
 800e0f2:	4608      	mov	r0, r1
 800e0f4:	f002 fc6c 	bl	80109d0 <SDMMC_CmdSelDesel>
 800e0f8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <SD_InitCard+0x174>
  {
    return errorstate;
 800e100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e102:	e00e      	b.n	800e122 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681d      	ldr	r5, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	466c      	mov	r4, sp
 800e10c:	f103 0210 	add.w	r2, r3, #16
 800e110:	ca07      	ldmia	r2, {r0, r1, r2}
 800e112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e116:	3304      	adds	r3, #4
 800e118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e11a:	4628      	mov	r0, r5
 800e11c:	f002 fab0 	bl	8010680 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3740      	adds	r7, #64	; 0x40
 800e126:	46bd      	mov	sp, r7
 800e128:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e12c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e134:	2300      	movs	r3, #0
 800e136:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e138:	2300      	movs	r3, #0
 800e13a:	617b      	str	r3, [r7, #20]
 800e13c:	2300      	movs	r3, #0
 800e13e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4618      	mov	r0, r3
 800e146:	f002 fc66 	bl	8010a16 <SDMMC_CmdGoIdleState>
 800e14a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d001      	beq.n	800e156 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	e072      	b.n	800e23c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f002 fc79 	bl	8010a52 <SDMMC_CmdOperCond>
 800e160:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00d      	beq.n	800e184 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4618      	mov	r0, r3
 800e174:	f002 fc4f 	bl	8010a16 <SDMMC_CmdGoIdleState>
 800e178:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <SD_PowerON+0x5e>
    {
      return errorstate;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	e05b      	b.n	800e23c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d137      	bne.n	800e202 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2100      	movs	r1, #0
 800e198:	4618      	mov	r0, r3
 800e19a:	f002 fc79 	bl	8010a90 <SDMMC_CmdAppCommand>
 800e19e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d02d      	beq.n	800e202 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1aa:	e047      	b.n	800e23c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f002 fc6c 	bl	8010a90 <SDMMC_CmdAppCommand>
 800e1b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <SD_PowerON+0x98>
    {
      return errorstate;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	e03b      	b.n	800e23c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	491e      	ldr	r1, [pc, #120]	; (800e244 <SD_PowerON+0x118>)
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f002 fc82 	bl	8010ad4 <SDMMC_CmdAppOperCommand>
 800e1d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1dc:	e02e      	b.n	800e23c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f002 fae8 	bl	80107ba <SDIO_GetResponse>
 800e1ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	0fdb      	lsrs	r3, r3, #31
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d101      	bne.n	800e1f8 <SD_PowerON+0xcc>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e000      	b.n	800e1fa <SD_PowerON+0xce>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	613b      	str	r3, [r7, #16]

    count++;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	3301      	adds	r3, #1
 800e200:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e208:	4293      	cmp	r3, r2
 800e20a:	d802      	bhi.n	800e212 <SD_PowerON+0xe6>
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d0cc      	beq.n	800e1ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e218:	4293      	cmp	r3, r2
 800e21a:	d902      	bls.n	800e222 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e21c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e220:	e00c      	b.n	800e23c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	645a      	str	r2, [r3, #68]	; 0x44
 800e232:	e002      	b.n	800e23a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	c1100000 	.word	0xc1100000

0800e248 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d102      	bne.n	800e25e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e25c:	e018      	b.n	800e290 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e266:	041b      	lsls	r3, r3, #16
 800e268:	4619      	mov	r1, r3
 800e26a:	4610      	mov	r0, r2
 800e26c:	f002 fcf6 	bl	8010c5c <SDMMC_CmdSendStatus>
 800e270:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	e009      	b.n	800e290 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2100      	movs	r1, #0
 800e282:	4618      	mov	r0, r3
 800e284:	f002 fa99 	bl	80107ba <SDIO_GetResponse>
 800e288:	4602      	mov	r2, r0
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	60fb      	str	r3, [r7, #12]
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f002 fa83 	bl	80107ba <SDIO_GetResponse>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2be:	d102      	bne.n	800e2c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2c4:	e02f      	b.n	800e326 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e2c6:	f107 030c 	add.w	r3, r7, #12
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f879 	bl	800e3c4 <SD_FindSCR>
 800e2d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	e023      	b.n	800e326 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d01c      	beq.n	800e322 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f0:	041b      	lsls	r3, r3, #16
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	f002 fbcb 	bl	8010a90 <SDMMC_CmdAppCommand>
 800e2fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	e00f      	b.n	800e326 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2102      	movs	r1, #2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f002 fc04 	bl	8010b1a <SDMMC_CmdBusWidth>
 800e312:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d001      	beq.n	800e31e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	e003      	b.n	800e326 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e31e:	2300      	movs	r3, #0
 800e320:	e001      	b.n	800e326 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e322:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e326:	4618      	mov	r0, r3
 800e328:	3718      	adds	r7, #24
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b086      	sub	sp, #24
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
 800e33a:	2300      	movs	r3, #0
 800e33c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2100      	movs	r1, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f002 fa38 	bl	80107ba <SDIO_GetResponse>
 800e34a:	4603      	mov	r3, r0
 800e34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e354:	d102      	bne.n	800e35c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e35a:	e02f      	b.n	800e3bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e35c:	f107 030c 	add.w	r3, r7, #12
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f82e 	bl	800e3c4 <SD_FindSCR>
 800e368:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	e023      	b.n	800e3bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d01c      	beq.n	800e3b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e386:	041b      	lsls	r3, r3, #16
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f002 fb80 	bl	8010a90 <SDMMC_CmdAppCommand>
 800e390:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	e00f      	b.n	800e3bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f002 fbb9 	bl	8010b1a <SDMMC_CmdBusWidth>
 800e3a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	e003      	b.n	800e3bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e001      	b.n	800e3bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3718      	adds	r7, #24
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b08f      	sub	sp, #60	; 0x3c
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e3ce:	f7fb fd7b 	bl	8009ec8 <HAL_GetTick>
 800e3d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e3d8:	2300      	movs	r3, #0
 800e3da:	60bb      	str	r3, [r7, #8]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2108      	movs	r1, #8
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f002 fa24 	bl	8010838 <SDMMC_CmdBlockLength>
 800e3f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <SD_FindSCR+0x38>
  {
    return errorstate;
 800e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fa:	e0a9      	b.n	800e550 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e404:	041b      	lsls	r3, r3, #16
 800e406:	4619      	mov	r1, r3
 800e408:	4610      	mov	r0, r2
 800e40a:	f002 fb41 	bl	8010a90 <SDMMC_CmdAppCommand>
 800e40e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e418:	e09a      	b.n	800e550 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e41a:	f04f 33ff 	mov.w	r3, #4294967295
 800e41e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e420:	2308      	movs	r3, #8
 800e422:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e424:	2330      	movs	r3, #48	; 0x30
 800e426:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e428:	2302      	movs	r3, #2
 800e42a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e430:	2301      	movs	r3, #1
 800e432:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f107 0210 	add.w	r2, r7, #16
 800e43c:	4611      	mov	r1, r2
 800e43e:	4618      	mov	r0, r3
 800e440:	f002 f9ce 	bl	80107e0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4618      	mov	r0, r3
 800e44a:	f002 fb88 	bl	8010b5e <SDMMC_CmdSendSCR>
 800e44e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	2b00      	cmp	r3, #0
 800e454:	d022      	beq.n	800e49c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	e07a      	b.n	800e550 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00e      	beq.n	800e486 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6819      	ldr	r1, [r3, #0]
 800e46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	f107 0208 	add.w	r2, r7, #8
 800e474:	18d4      	adds	r4, r2, r3
 800e476:	4608      	mov	r0, r1
 800e478:	f002 f92d 	bl	80106d6 <SDIO_ReadFIFO>
 800e47c:	4603      	mov	r3, r0
 800e47e:	6023      	str	r3, [r4, #0]
      index++;
 800e480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e482:	3301      	adds	r3, #1
 800e484:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e486:	f7fb fd1f 	bl	8009ec8 <HAL_GetTick>
 800e48a:	4602      	mov	r2, r0
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e494:	d102      	bne.n	800e49c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e49a:	e059      	b.n	800e550 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4a2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0d6      	beq.n	800e45a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b2:	f003 0308 	and.w	r3, r3, #8
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d005      	beq.n	800e4c6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2208      	movs	r2, #8
 800e4c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4c2:	2308      	movs	r3, #8
 800e4c4:	e044      	b.n	800e550 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4cc:	f003 0302 	and.w	r3, r3, #2
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2202      	movs	r2, #2
 800e4da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	e037      	b.n	800e550 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e6:	f003 0320 	and.w	r3, r3, #32
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d005      	beq.n	800e4fa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e4f6:	2320      	movs	r3, #32
 800e4f8:	e02a      	b.n	800e550 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800e502:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	061a      	lsls	r2, r3, #24
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	021b      	lsls	r3, r3, #8
 800e50c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e510:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	0a1b      	lsrs	r3, r3, #8
 800e516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e51a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	0e1b      	lsrs	r3, r3, #24
 800e520:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	601a      	str	r2, [r3, #0]
    scr++;
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	3304      	adds	r3, #4
 800e52a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	061a      	lsls	r2, r3, #24
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	021b      	lsls	r3, r3, #8
 800e534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e538:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	0a1b      	lsrs	r3, r3, #8
 800e53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e542:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	0e1b      	lsrs	r3, r3, #24
 800e548:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	373c      	adds	r7, #60	; 0x3c
 800e554:	46bd      	mov	sp, r7
 800e556:	bd90      	pop	{r4, r7, pc}

0800e558 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e564:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d03f      	beq.n	800e5f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e572:	2300      	movs	r3, #0
 800e574:	617b      	str	r3, [r7, #20]
 800e576:	e033      	b.n	800e5e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f002 f8aa 	bl	80106d6 <SDIO_ReadFIFO>
 800e582:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	b2da      	uxtb	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3301      	adds	r3, #1
 800e590:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	3b01      	subs	r3, #1
 800e596:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	0a1b      	lsrs	r3, r3, #8
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	0c1b      	lsrs	r3, r3, #16
 800e5b2:	b2da      	uxtb	r2, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	0e1b      	lsrs	r3, r3, #24
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	617b      	str	r3, [r7, #20]
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	2b07      	cmp	r3, #7
 800e5e4:	d9c8      	bls.n	800e578 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	693a      	ldr	r2, [r7, #16]
 800e5f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e5f2:	bf00      	nop
 800e5f4:	3718      	adds	r7, #24
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b086      	sub	sp, #24
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a1b      	ldr	r3, [r3, #32]
 800e606:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d043      	beq.n	800e69c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e614:	2300      	movs	r3, #0
 800e616:	617b      	str	r3, [r7, #20]
 800e618:	e037      	b.n	800e68a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3301      	adds	r3, #1
 800e624:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	3b01      	subs	r3, #1
 800e62a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	021a      	lsls	r2, r3, #8
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	4313      	orrs	r3, r2
 800e636:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3301      	adds	r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	3b01      	subs	r3, #1
 800e642:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	041a      	lsls	r2, r3, #16
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	3301      	adds	r3, #1
 800e654:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	3b01      	subs	r3, #1
 800e65a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	061a      	lsls	r2, r3, #24
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	4313      	orrs	r3, r2
 800e666:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3301      	adds	r3, #1
 800e66c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	3b01      	subs	r3, #1
 800e672:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f107 0208 	add.w	r2, r7, #8
 800e67c:	4611      	mov	r1, r2
 800e67e:	4618      	mov	r0, r3
 800e680:	f002 f836 	bl	80106f0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	3301      	adds	r3, #1
 800e688:	617b      	str	r3, [r7, #20]
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2b07      	cmp	r3, #7
 800e68e:	d9c4      	bls.n	800e61a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e69c:	bf00      	nop
 800e69e:	3718      	adds	r7, #24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e056      	b.n	800e764 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7f8 fe73 	bl	80073bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2202      	movs	r2, #2
 800e6da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	685a      	ldr	r2, [r3, #4]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	431a      	orrs	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	431a      	orrs	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	431a      	orrs	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	431a      	orrs	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	699b      	ldr	r3, [r3, #24]
 800e70e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e712:	431a      	orrs	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	69db      	ldr	r3, [r3, #28]
 800e718:	431a      	orrs	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	ea42 0103 	orr.w	r1, r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	430a      	orrs	r2, r1
 800e72c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	699b      	ldr	r3, [r3, #24]
 800e732:	0c1b      	lsrs	r3, r3, #16
 800e734:	f003 0104 	and.w	r1, r3, #4
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	430a      	orrs	r2, r1
 800e742:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	69da      	ldr	r2, [r3, #28]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e752:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2200      	movs	r2, #0
 800e758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2201      	movs	r2, #1
 800e75e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b088      	sub	sp, #32
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	4613      	mov	r3, r2
 800e77a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e786:	2b01      	cmp	r3, #1
 800e788:	d101      	bne.n	800e78e <HAL_SPI_Transmit+0x22>
 800e78a:	2302      	movs	r3, #2
 800e78c:	e11e      	b.n	800e9cc <HAL_SPI_Transmit+0x260>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e796:	f7fb fb97 	bl	8009ec8 <HAL_GetTick>
 800e79a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e79c:	88fb      	ldrh	r3, [r7, #6]
 800e79e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d002      	beq.n	800e7b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7b0:	e103      	b.n	800e9ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <HAL_SPI_Transmit+0x52>
 800e7b8:	88fb      	ldrh	r3, [r7, #6]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d102      	bne.n	800e7c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7c2:	e0fa      	b.n	800e9ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2203      	movs	r2, #3
 800e7c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	88fa      	ldrh	r2, [r7, #6]
 800e7dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	88fa      	ldrh	r2, [r7, #6]
 800e7e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e80a:	d107      	bne.n	800e81c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e81a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e826:	2b40      	cmp	r3, #64	; 0x40
 800e828:	d007      	beq.n	800e83a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e842:	d14b      	bne.n	800e8dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <HAL_SPI_Transmit+0xe6>
 800e84c:	8afb      	ldrh	r3, [r7, #22]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d13e      	bne.n	800e8d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e856:	881a      	ldrh	r2, [r3, #0]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e862:	1c9a      	adds	r2, r3, #2
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	3b01      	subs	r3, #1
 800e870:	b29a      	uxth	r2, r3
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e876:	e02b      	b.n	800e8d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	f003 0302 	and.w	r3, r3, #2
 800e882:	2b02      	cmp	r3, #2
 800e884:	d112      	bne.n	800e8ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88a:	881a      	ldrh	r2, [r3, #0]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e896:	1c9a      	adds	r2, r3, #2
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e8aa:	e011      	b.n	800e8d0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8ac:	f7fb fb0c 	bl	8009ec8 <HAL_GetTick>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	683a      	ldr	r2, [r7, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d803      	bhi.n	800e8c4 <HAL_SPI_Transmit+0x158>
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c2:	d102      	bne.n	800e8ca <HAL_SPI_Transmit+0x15e>
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d102      	bne.n	800e8d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e8ce:	e074      	b.n	800e9ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1ce      	bne.n	800e878 <HAL_SPI_Transmit+0x10c>
 800e8da:	e04c      	b.n	800e976 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <HAL_SPI_Transmit+0x17e>
 800e8e4:	8afb      	ldrh	r3, [r7, #22]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d140      	bne.n	800e96c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	330c      	adds	r3, #12
 800e8f4:	7812      	ldrb	r2, [r2, #0]
 800e8f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fc:	1c5a      	adds	r2, r3, #1
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e906:	b29b      	uxth	r3, r3
 800e908:	3b01      	subs	r3, #1
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e910:	e02c      	b.n	800e96c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	f003 0302 	and.w	r3, r3, #2
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d113      	bne.n	800e948 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	330c      	adds	r3, #12
 800e92a:	7812      	ldrb	r2, [r2, #0]
 800e92c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e932:	1c5a      	adds	r2, r3, #1
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	3b01      	subs	r3, #1
 800e940:	b29a      	uxth	r2, r3
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	86da      	strh	r2, [r3, #54]	; 0x36
 800e946:	e011      	b.n	800e96c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e948:	f7fb fabe 	bl	8009ec8 <HAL_GetTick>
 800e94c:	4602      	mov	r2, r0
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d803      	bhi.n	800e960 <HAL_SPI_Transmit+0x1f4>
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e95e:	d102      	bne.n	800e966 <HAL_SPI_Transmit+0x1fa>
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d102      	bne.n	800e96c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e966:	2303      	movs	r3, #3
 800e968:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e96a:	e026      	b.n	800e9ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e970:	b29b      	uxth	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1cd      	bne.n	800e912 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e976:	69ba      	ldr	r2, [r7, #24]
 800e978:	6839      	ldr	r1, [r7, #0]
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	f000 fba4 	bl	800f0c8 <SPI_EndRxTxTransaction>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d002      	beq.n	800e98c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2220      	movs	r2, #32
 800e98a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10a      	bne.n	800e9aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e994:	2300      	movs	r3, #0
 800e996:	613b      	str	r3, [r7, #16]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	613b      	str	r3, [r7, #16]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	613b      	str	r3, [r7, #16]
 800e9a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	77fb      	strb	r3, [r7, #31]
 800e9b6:	e000      	b.n	800e9ba <HAL_SPI_Transmit+0x24e>
  }

error:
 800e9b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3720      	adds	r7, #32
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b088      	sub	sp, #32
 800e9d8:	af02      	add	r7, sp, #8
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	603b      	str	r3, [r7, #0]
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9f0:	d112      	bne.n	800ea18 <HAL_SPI_Receive+0x44>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	689b      	ldr	r3, [r3, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10e      	bne.n	800ea18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2204      	movs	r2, #4
 800e9fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea02:	88fa      	ldrh	r2, [r7, #6]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	4613      	mov	r3, r2
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 f8e9 	bl	800ebe6 <HAL_SPI_TransmitReceive>
 800ea14:	4603      	mov	r3, r0
 800ea16:	e0e2      	b.n	800ebde <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d101      	bne.n	800ea26 <HAL_SPI_Receive+0x52>
 800ea22:	2302      	movs	r3, #2
 800ea24:	e0db      	b.n	800ebde <HAL_SPI_Receive+0x20a>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea2e:	f7fb fa4b 	bl	8009ec8 <HAL_GetTick>
 800ea32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d002      	beq.n	800ea46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ea40:	2302      	movs	r3, #2
 800ea42:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea44:	e0c2      	b.n	800ebcc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <HAL_SPI_Receive+0x7e>
 800ea4c:	88fb      	ldrh	r3, [r7, #6]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d102      	bne.n	800ea58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea56:	e0b9      	b.n	800ebcc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2204      	movs	r2, #4
 800ea5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	88fa      	ldrh	r2, [r7, #6]
 800ea70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	88fa      	ldrh	r2, [r7, #6]
 800ea76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2200      	movs	r2, #0
 800ea94:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea9e:	d107      	bne.n	800eab0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eaae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaba:	2b40      	cmp	r3, #64	; 0x40
 800eabc:	d007      	beq.n	800eace <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eacc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d162      	bne.n	800eb9c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ead6:	e02e      	b.n	800eb36 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d115      	bne.n	800eb12 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f103 020c 	add.w	r2, r3, #12
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf2:	7812      	ldrb	r2, [r2, #0]
 800eaf4:	b2d2      	uxtb	r2, r2
 800eaf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb10:	e011      	b.n	800eb36 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb12:	f7fb f9d9 	bl	8009ec8 <HAL_GetTick>
 800eb16:	4602      	mov	r2, r0
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d803      	bhi.n	800eb2a <HAL_SPI_Receive+0x156>
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb28:	d102      	bne.n	800eb30 <HAL_SPI_Receive+0x15c>
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800eb30:	2303      	movs	r3, #3
 800eb32:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb34:	e04a      	b.n	800ebcc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1cb      	bne.n	800ead8 <HAL_SPI_Receive+0x104>
 800eb40:	e031      	b.n	800eba6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d113      	bne.n	800eb78 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68da      	ldr	r2, [r3, #12]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5a:	b292      	uxth	r2, r2
 800eb5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	1c9a      	adds	r2, r3, #2
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb76:	e011      	b.n	800eb9c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb78:	f7fb f9a6 	bl	8009ec8 <HAL_GetTick>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d803      	bhi.n	800eb90 <HAL_SPI_Receive+0x1bc>
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8e:	d102      	bne.n	800eb96 <HAL_SPI_Receive+0x1c2>
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d102      	bne.n	800eb9c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800eb96:	2303      	movs	r3, #3
 800eb98:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb9a:	e017      	b.n	800ebcc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1cd      	bne.n	800eb42 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eba6:	693a      	ldr	r2, [r7, #16]
 800eba8:	6839      	ldr	r1, [r7, #0]
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f000 fa27 	bl	800effe <SPI_EndRxTransaction>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d002      	beq.n	800ebbc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2220      	movs	r2, #32
 800ebba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	75fb      	strb	r3, [r7, #23]
 800ebc8:	e000      	b.n	800ebcc <HAL_SPI_Receive+0x1f8>
  }

error :
 800ebca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ebdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3718      	adds	r7, #24
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b08c      	sub	sp, #48	; 0x30
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	60f8      	str	r0, [r7, #12]
 800ebee:	60b9      	str	r1, [r7, #8]
 800ebf0:	607a      	str	r2, [r7, #4]
 800ebf2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d101      	bne.n	800ec0c <HAL_SPI_TransmitReceive+0x26>
 800ec08:	2302      	movs	r3, #2
 800ec0a:	e18a      	b.n	800ef22 <HAL_SPI_TransmitReceive+0x33c>
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec14:	f7fb f958 	bl	8009ec8 <HAL_GetTick>
 800ec18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ec2a:	887b      	ldrh	r3, [r7, #2]
 800ec2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d00f      	beq.n	800ec56 <HAL_SPI_TransmitReceive+0x70>
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec3c:	d107      	bne.n	800ec4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d103      	bne.n	800ec4e <HAL_SPI_TransmitReceive+0x68>
 800ec46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec4a:	2b04      	cmp	r3, #4
 800ec4c:	d003      	beq.n	800ec56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ec4e:	2302      	movs	r3, #2
 800ec50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec54:	e15b      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d005      	beq.n	800ec68 <HAL_SPI_TransmitReceive+0x82>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <HAL_SPI_TransmitReceive+0x82>
 800ec62:	887b      	ldrh	r3, [r7, #2]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d103      	bne.n	800ec70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec6e:	e14e      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b04      	cmp	r3, #4
 800ec7a:	d003      	beq.n	800ec84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2205      	movs	r2, #5
 800ec80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	887a      	ldrh	r2, [r7, #2]
 800ec94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	887a      	ldrh	r2, [r7, #2]
 800ec9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	887a      	ldrh	r2, [r7, #2]
 800eca6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	887a      	ldrh	r2, [r7, #2]
 800ecac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecc4:	2b40      	cmp	r3, #64	; 0x40
 800ecc6:	d007      	beq.n	800ecd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ece0:	d178      	bne.n	800edd4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d002      	beq.n	800ecf0 <HAL_SPI_TransmitReceive+0x10a>
 800ecea:	8b7b      	ldrh	r3, [r7, #26]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d166      	bne.n	800edbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf4:	881a      	ldrh	r2, [r3, #0]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed00:	1c9a      	adds	r2, r3, #2
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed14:	e053      	b.n	800edbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	f003 0302 	and.w	r3, r3, #2
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d11b      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x176>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d016      	beq.n	800ed5c <HAL_SPI_TransmitReceive+0x176>
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d113      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed38:	881a      	ldrh	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed44:	1c9a      	adds	r2, r3, #2
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	f003 0301 	and.w	r3, r3, #1
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d119      	bne.n	800ed9e <HAL_SPI_TransmitReceive+0x1b8>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d014      	beq.n	800ed9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68da      	ldr	r2, [r3, #12]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7e:	b292      	uxth	r2, r2
 800ed80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed86:	1c9a      	adds	r2, r3, #2
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	3b01      	subs	r3, #1
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ed9e:	f7fb f893 	bl	8009ec8 <HAL_GetTick>
 800eda2:	4602      	mov	r2, r0
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edaa:	429a      	cmp	r2, r3
 800edac:	d807      	bhi.n	800edbe <HAL_SPI_TransmitReceive+0x1d8>
 800edae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb4:	d003      	beq.n	800edbe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800edbc:	e0a7      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1a6      	bne.n	800ed16 <HAL_SPI_TransmitReceive+0x130>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edcc:	b29b      	uxth	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1a1      	bne.n	800ed16 <HAL_SPI_TransmitReceive+0x130>
 800edd2:	e07c      	b.n	800eece <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <HAL_SPI_TransmitReceive+0x1fc>
 800eddc:	8b7b      	ldrh	r3, [r7, #26]
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d16b      	bne.n	800eeba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	330c      	adds	r3, #12
 800edec:	7812      	ldrb	r2, [r2, #0]
 800edee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	3b01      	subs	r3, #1
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee08:	e057      	b.n	800eeba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d11c      	bne.n	800ee52 <HAL_SPI_TransmitReceive+0x26c>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d017      	beq.n	800ee52 <HAL_SPI_TransmitReceive+0x26c>
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d114      	bne.n	800ee52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	330c      	adds	r3, #12
 800ee32:	7812      	ldrb	r2, [r2, #0]
 800ee34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3a:	1c5a      	adds	r2, r3, #1
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	3b01      	subs	r3, #1
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f003 0301 	and.w	r3, r3, #1
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d119      	bne.n	800ee94 <HAL_SPI_TransmitReceive+0x2ae>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d014      	beq.n	800ee94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68da      	ldr	r2, [r3, #12]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee74:	b2d2      	uxtb	r2, r2
 800ee76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee90:	2301      	movs	r3, #1
 800ee92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ee94:	f7fb f818 	bl	8009ec8 <HAL_GetTick>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d803      	bhi.n	800eeac <HAL_SPI_TransmitReceive+0x2c6>
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeaa:	d102      	bne.n	800eeb2 <HAL_SPI_TransmitReceive+0x2cc>
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d103      	bne.n	800eeba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eeb8:	e029      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d1a2      	bne.n	800ee0a <HAL_SPI_TransmitReceive+0x224>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d19d      	bne.n	800ee0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f000 f8f8 	bl	800f0c8 <SPI_EndRxTxTransaction>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d006      	beq.n	800eeec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2220      	movs	r2, #32
 800eee8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800eeea:	e010      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10b      	bne.n	800ef0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eef4:	2300      	movs	r3, #0
 800eef6:	617b      	str	r3, [r7, #20]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	e000      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ef0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3730      	adds	r7, #48	; 0x30
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	60f8      	str	r0, [r7, #12]
 800ef32:	60b9      	str	r1, [r7, #8]
 800ef34:	603b      	str	r3, [r7, #0]
 800ef36:	4613      	mov	r3, r2
 800ef38:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef3a:	e04c      	b.n	800efd6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef42:	d048      	beq.n	800efd6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ef44:	f7fa ffc0 	bl	8009ec8 <HAL_GetTick>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	683a      	ldr	r2, [r7, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d902      	bls.n	800ef5a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d13d      	bne.n	800efd6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ef68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef72:	d111      	bne.n	800ef98 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef7c:	d004      	beq.n	800ef88 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef86:	d107      	bne.n	800ef98 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efa0:	d10f      	bne.n	800efc2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800efc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2201      	movs	r2, #1
 800efc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800efd2:	2303      	movs	r3, #3
 800efd4:	e00f      	b.n	800eff6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	4013      	ands	r3, r2
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	bf0c      	ite	eq
 800efe6:	2301      	moveq	r3, #1
 800efe8:	2300      	movne	r3, #0
 800efea:	b2db      	uxtb	r3, r3
 800efec:	461a      	mov	r2, r3
 800efee:	79fb      	ldrb	r3, [r7, #7]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d1a3      	bne.n	800ef3c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800eff4:	2300      	movs	r3, #0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b086      	sub	sp, #24
 800f002:	af02      	add	r7, sp, #8
 800f004:	60f8      	str	r0, [r7, #12]
 800f006:	60b9      	str	r1, [r7, #8]
 800f008:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f012:	d111      	bne.n	800f038 <SPI_EndRxTransaction+0x3a>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f01c:	d004      	beq.n	800f028 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f026:	d107      	bne.n	800f038 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f036:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f040:	d12a      	bne.n	800f098 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	689b      	ldr	r3, [r3, #8]
 800f046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f04a:	d012      	beq.n	800f072 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2200      	movs	r2, #0
 800f054:	2180      	movs	r1, #128	; 0x80
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff ff67 	bl	800ef2a <SPI_WaitFlagStateUntilTimeout>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d02d      	beq.n	800f0be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f066:	f043 0220 	orr.w	r2, r3, #32
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f06e:	2303      	movs	r3, #3
 800f070:	e026      	b.n	800f0c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	2200      	movs	r2, #0
 800f07a:	2101      	movs	r1, #1
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f7ff ff54 	bl	800ef2a <SPI_WaitFlagStateUntilTimeout>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d01a      	beq.n	800f0be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08c:	f043 0220 	orr.w	r2, r3, #32
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f094:	2303      	movs	r3, #3
 800f096:	e013      	b.n	800f0c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff ff41 	bl	800ef2a <SPI_WaitFlagStateUntilTimeout>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d007      	beq.n	800f0be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0b2:	f043 0220 	orr.w	r2, r3, #32
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	e000      	b.n	800f0c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b088      	sub	sp, #32
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f0d4:	4b1b      	ldr	r3, [pc, #108]	; (800f144 <SPI_EndRxTxTransaction+0x7c>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a1b      	ldr	r2, [pc, #108]	; (800f148 <SPI_EndRxTxTransaction+0x80>)
 800f0da:	fba2 2303 	umull	r2, r3, r2, r3
 800f0de:	0d5b      	lsrs	r3, r3, #21
 800f0e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f0e4:	fb02 f303 	mul.w	r3, r2, r3
 800f0e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0f2:	d112      	bne.n	800f11a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2180      	movs	r1, #128	; 0x80
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff ff13 	bl	800ef2a <SPI_WaitFlagStateUntilTimeout>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d016      	beq.n	800f138 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f10e:	f043 0220 	orr.w	r2, r3, #32
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f116:	2303      	movs	r3, #3
 800f118:	e00f      	b.n	800f13a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00a      	beq.n	800f136 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	3b01      	subs	r3, #1
 800f124:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f130:	2b80      	cmp	r3, #128	; 0x80
 800f132:	d0f2      	beq.n	800f11a <SPI_EndRxTxTransaction+0x52>
 800f134:	e000      	b.n	800f138 <SPI_EndRxTxTransaction+0x70>
        break;
 800f136:	bf00      	nop
  }

  return HAL_OK;
 800f138:	2300      	movs	r3, #0
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20000000 	.word	0x20000000
 800f148:	165e9f81 	.word	0x165e9f81

0800f14c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d101      	bne.n	800f15e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e01d      	b.n	800f19a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f164:	b2db      	uxtb	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d106      	bne.n	800f178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7f8 f9de 	bl	8007534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2202      	movs	r2, #2
 800f17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	3304      	adds	r3, #4
 800f188:	4619      	mov	r1, r3
 800f18a:	4610      	mov	r0, r2
 800f18c:	f000 fb56 	bl	800f83c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f1a2:	b480      	push	{r7}
 800f1a4:	b085      	sub	sp, #20
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68da      	ldr	r2, [r3, #12]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f042 0201 	orr.w	r2, r2, #1
 800f1b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	f003 0307 	and.w	r3, r3, #7
 800f1c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2b06      	cmp	r3, #6
 800f1ca:	d007      	beq.n	800f1dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f042 0201 	orr.w	r2, r2, #1
 800f1da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d101      	bne.n	800f1fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e01d      	b.n	800f238 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b00      	cmp	r3, #0
 800f206:	d106      	bne.n	800f216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7f8 f91b 	bl	800744c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2202      	movs	r2, #2
 800f21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	3304      	adds	r3, #4
 800f226:	4619      	mov	r1, r3
 800f228:	4610      	mov	r0, r2
 800f22a:	f000 fb07 	bl	800f83c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f236:	2300      	movs	r3, #0
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2201      	movs	r2, #1
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 fd42 	bl	800fcdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a15      	ldr	r2, [pc, #84]	; (800f2b4 <HAL_TIM_PWM_Start+0x74>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d004      	beq.n	800f26c <HAL_TIM_PWM_Start+0x2c>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a14      	ldr	r2, [pc, #80]	; (800f2b8 <HAL_TIM_PWM_Start+0x78>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d101      	bne.n	800f270 <HAL_TIM_PWM_Start+0x30>
 800f26c:	2301      	movs	r3, #1
 800f26e:	e000      	b.n	800f272 <HAL_TIM_PWM_Start+0x32>
 800f270:	2300      	movs	r3, #0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d007      	beq.n	800f286 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	f003 0307 	and.w	r3, r3, #7
 800f290:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2b06      	cmp	r3, #6
 800f296:	d007      	beq.n	800f2a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f042 0201 	orr.w	r2, r2, #1
 800f2a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	40010000 	.word	0x40010000
 800f2b8:	40010400 	.word	0x40010400

0800f2bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e083      	b.n	800f3d8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d106      	bne.n	800f2ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7f8 f9b5 	bl	8007654 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2202      	movs	r2, #2
 800f2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	6812      	ldr	r2, [r2, #0]
 800f2fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f300:	f023 0307 	bic.w	r3, r3, #7
 800f304:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	3304      	adds	r3, #4
 800f30e:	4619      	mov	r1, r3
 800f310:	4610      	mov	r0, r2
 800f312:	f000 fa93 	bl	800f83c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	699b      	ldr	r3, [r3, #24]
 800f324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	6a1b      	ldr	r3, [r3, #32]
 800f32c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	697a      	ldr	r2, [r7, #20]
 800f334:	4313      	orrs	r3, r2
 800f336:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f33e:	f023 0303 	bic.w	r3, r3, #3
 800f342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	689a      	ldr	r2, [r3, #8]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	021b      	lsls	r3, r3, #8
 800f34e:	4313      	orrs	r3, r2
 800f350:	693a      	ldr	r2, [r7, #16]
 800f352:	4313      	orrs	r3, r2
 800f354:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f35c:	f023 030c 	bic.w	r3, r3, #12
 800f360:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f36c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	68da      	ldr	r2, [r3, #12]
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	021b      	lsls	r3, r3, #8
 800f378:	4313      	orrs	r3, r2
 800f37a:	693a      	ldr	r2, [r7, #16]
 800f37c:	4313      	orrs	r3, r2
 800f37e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	011a      	lsls	r2, r3, #4
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	6a1b      	ldr	r3, [r3, #32]
 800f38a:	031b      	lsls	r3, r3, #12
 800f38c:	4313      	orrs	r3, r2
 800f38e:	693a      	ldr	r2, [r7, #16]
 800f390:	4313      	orrs	r3, r2
 800f392:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f39a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f3a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	695b      	ldr	r3, [r3, #20]
 800f3ac:	011b      	lsls	r3, r3, #4
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	693a      	ldr	r2, [r7, #16]
 800f3c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3d6:	2300      	movs	r3, #0
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3718      	adds	r7, #24
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d002      	beq.n	800f3f6 <HAL_TIM_Encoder_Start+0x16>
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	d008      	beq.n	800f406 <HAL_TIM_Encoder_Start+0x26>
 800f3f4:	e00f      	b.n	800f416 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 fc6c 	bl	800fcdc <TIM_CCxChannelCmd>
      break;
 800f404:	e016      	b.n	800f434 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2201      	movs	r2, #1
 800f40c:	2104      	movs	r1, #4
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fc64 	bl	800fcdc <TIM_CCxChannelCmd>
      break;
 800f414:	e00e      	b.n	800f434 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2201      	movs	r2, #1
 800f41c:	2100      	movs	r1, #0
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fc5c 	bl	800fcdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2201      	movs	r2, #1
 800f42a:	2104      	movs	r1, #4
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 fc55 	bl	800fcdc <TIM_CCxChannelCmd>
      break;
 800f432:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f042 0201 	orr.w	r2, r2, #1
 800f442:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f444:	2300      	movs	r3, #0
}
 800f446:	4618      	mov	r0, r3
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b082      	sub	sp, #8
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	691b      	ldr	r3, [r3, #16]
 800f45c:	f003 0302 	and.w	r3, r3, #2
 800f460:	2b02      	cmp	r3, #2
 800f462:	d122      	bne.n	800f4aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	f003 0302 	and.w	r3, r3, #2
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d11b      	bne.n	800f4aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f06f 0202 	mvn.w	r2, #2
 800f47a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	699b      	ldr	r3, [r3, #24]
 800f488:	f003 0303 	and.w	r3, r3, #3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f9b5 	bl	800f800 <HAL_TIM_IC_CaptureCallback>
 800f496:	e005      	b.n	800f4a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f9a7 	bl	800f7ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f9b8 	bl	800f814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	f003 0304 	and.w	r3, r3, #4
 800f4b4:	2b04      	cmp	r3, #4
 800f4b6:	d122      	bne.n	800f4fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	f003 0304 	and.w	r3, r3, #4
 800f4c2:	2b04      	cmp	r3, #4
 800f4c4:	d11b      	bne.n	800f4fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f06f 0204 	mvn.w	r2, #4
 800f4ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f98b 	bl	800f800 <HAL_TIM_IC_CaptureCallback>
 800f4ea:	e005      	b.n	800f4f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f97d 	bl	800f7ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f98e 	bl	800f814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	f003 0308 	and.w	r3, r3, #8
 800f508:	2b08      	cmp	r3, #8
 800f50a:	d122      	bne.n	800f552 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	f003 0308 	and.w	r3, r3, #8
 800f516:	2b08      	cmp	r3, #8
 800f518:	d11b      	bne.n	800f552 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f06f 0208 	mvn.w	r2, #8
 800f522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2204      	movs	r2, #4
 800f528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	f003 0303 	and.w	r3, r3, #3
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f961 	bl	800f800 <HAL_TIM_IC_CaptureCallback>
 800f53e:	e005      	b.n	800f54c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 f953 	bl	800f7ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f000 f964 	bl	800f814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	f003 0310 	and.w	r3, r3, #16
 800f55c:	2b10      	cmp	r3, #16
 800f55e:	d122      	bne.n	800f5a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	f003 0310 	and.w	r3, r3, #16
 800f56a:	2b10      	cmp	r3, #16
 800f56c:	d11b      	bne.n	800f5a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f06f 0210 	mvn.w	r2, #16
 800f576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2208      	movs	r2, #8
 800f57c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d003      	beq.n	800f594 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 f937 	bl	800f800 <HAL_TIM_IC_CaptureCallback>
 800f592:	e005      	b.n	800f5a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 f929 	bl	800f7ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f93a 	bl	800f814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	691b      	ldr	r3, [r3, #16]
 800f5ac:	f003 0301 	and.w	r3, r3, #1
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d10e      	bne.n	800f5d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d107      	bne.n	800f5d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f06f 0201 	mvn.w	r2, #1
 800f5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7f6 fd2b 	bl	8006028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5dc:	2b80      	cmp	r3, #128	; 0x80
 800f5de:	d10e      	bne.n	800f5fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ea:	2b80      	cmp	r3, #128	; 0x80
 800f5ec:	d107      	bne.n	800f5fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 fc6d 	bl	800fed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f608:	2b40      	cmp	r3, #64	; 0x40
 800f60a:	d10e      	bne.n	800f62a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f616:	2b40      	cmp	r3, #64	; 0x40
 800f618:	d107      	bne.n	800f62a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f8ff 	bl	800f828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	f003 0320 	and.w	r3, r3, #32
 800f634:	2b20      	cmp	r3, #32
 800f636:	d10e      	bne.n	800f656 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	f003 0320 	and.w	r3, r3, #32
 800f642:	2b20      	cmp	r3, #32
 800f644:	d107      	bne.n	800f656 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f06f 0220 	mvn.w	r2, #32
 800f64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 fc37 	bl	800fec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f656:	bf00      	nop
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
	...

0800f660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f672:	2b01      	cmp	r3, #1
 800f674:	d101      	bne.n	800f67a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f676:	2302      	movs	r3, #2
 800f678:	e0b4      	b.n	800f7e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2202      	movs	r2, #2
 800f686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b0c      	cmp	r3, #12
 800f68e:	f200 809f 	bhi.w	800f7d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f692:	a201      	add	r2, pc, #4	; (adr r2, 800f698 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f698:	0800f6cd 	.word	0x0800f6cd
 800f69c:	0800f7d1 	.word	0x0800f7d1
 800f6a0:	0800f7d1 	.word	0x0800f7d1
 800f6a4:	0800f7d1 	.word	0x0800f7d1
 800f6a8:	0800f70d 	.word	0x0800f70d
 800f6ac:	0800f7d1 	.word	0x0800f7d1
 800f6b0:	0800f7d1 	.word	0x0800f7d1
 800f6b4:	0800f7d1 	.word	0x0800f7d1
 800f6b8:	0800f74f 	.word	0x0800f74f
 800f6bc:	0800f7d1 	.word	0x0800f7d1
 800f6c0:	0800f7d1 	.word	0x0800f7d1
 800f6c4:	0800f7d1 	.word	0x0800f7d1
 800f6c8:	0800f78f 	.word	0x0800f78f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	68b9      	ldr	r1, [r7, #8]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 f952 	bl	800f97c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	699a      	ldr	r2, [r3, #24]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f042 0208 	orr.w	r2, r2, #8
 800f6e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	699a      	ldr	r2, [r3, #24]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f022 0204 	bic.w	r2, r2, #4
 800f6f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	6999      	ldr	r1, [r3, #24]
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	691a      	ldr	r2, [r3, #16]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	619a      	str	r2, [r3, #24]
      break;
 800f70a:	e062      	b.n	800f7d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68b9      	ldr	r1, [r7, #8]
 800f712:	4618      	mov	r0, r3
 800f714:	f000 f9a2 	bl	800fa5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	699a      	ldr	r2, [r3, #24]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	699a      	ldr	r2, [r3, #24]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6999      	ldr	r1, [r3, #24]
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	021a      	lsls	r2, r3, #8
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	430a      	orrs	r2, r1
 800f74a:	619a      	str	r2, [r3, #24]
      break;
 800f74c:	e041      	b.n	800f7d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68b9      	ldr	r1, [r7, #8]
 800f754:	4618      	mov	r0, r3
 800f756:	f000 f9f7 	bl	800fb48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	69da      	ldr	r2, [r3, #28]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f042 0208 	orr.w	r2, r2, #8
 800f768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	69da      	ldr	r2, [r3, #28]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f022 0204 	bic.w	r2, r2, #4
 800f778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	69d9      	ldr	r1, [r3, #28]
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	691a      	ldr	r2, [r3, #16]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	430a      	orrs	r2, r1
 800f78a:	61da      	str	r2, [r3, #28]
      break;
 800f78c:	e021      	b.n	800f7d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	4618      	mov	r0, r3
 800f796:	f000 fa4b 	bl	800fc30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	69da      	ldr	r2, [r3, #28]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	69da      	ldr	r2, [r3, #28]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	69d9      	ldr	r1, [r3, #28]
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	691b      	ldr	r3, [r3, #16]
 800f7c4:	021a      	lsls	r2, r3, #8
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	430a      	orrs	r2, r1
 800f7cc:	61da      	str	r2, [r3, #28]
      break;
 800f7ce:	e000      	b.n	800f7d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f7d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f7f4:	bf00      	nop
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f81c:	bf00      	nop
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	4a40      	ldr	r2, [pc, #256]	; (800f950 <TIM_Base_SetConfig+0x114>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d013      	beq.n	800f87c <TIM_Base_SetConfig+0x40>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f85a:	d00f      	beq.n	800f87c <TIM_Base_SetConfig+0x40>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a3d      	ldr	r2, [pc, #244]	; (800f954 <TIM_Base_SetConfig+0x118>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d00b      	beq.n	800f87c <TIM_Base_SetConfig+0x40>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a3c      	ldr	r2, [pc, #240]	; (800f958 <TIM_Base_SetConfig+0x11c>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d007      	beq.n	800f87c <TIM_Base_SetConfig+0x40>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a3b      	ldr	r2, [pc, #236]	; (800f95c <TIM_Base_SetConfig+0x120>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d003      	beq.n	800f87c <TIM_Base_SetConfig+0x40>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a3a      	ldr	r2, [pc, #232]	; (800f960 <TIM_Base_SetConfig+0x124>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d108      	bne.n	800f88e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	4313      	orrs	r3, r2
 800f88c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4a2f      	ldr	r2, [pc, #188]	; (800f950 <TIM_Base_SetConfig+0x114>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d02b      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f89c:	d027      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a2c      	ldr	r2, [pc, #176]	; (800f954 <TIM_Base_SetConfig+0x118>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d023      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a2b      	ldr	r2, [pc, #172]	; (800f958 <TIM_Base_SetConfig+0x11c>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d01f      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a2a      	ldr	r2, [pc, #168]	; (800f95c <TIM_Base_SetConfig+0x120>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d01b      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a29      	ldr	r2, [pc, #164]	; (800f960 <TIM_Base_SetConfig+0x124>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d017      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a28      	ldr	r2, [pc, #160]	; (800f964 <TIM_Base_SetConfig+0x128>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d013      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a27      	ldr	r2, [pc, #156]	; (800f968 <TIM_Base_SetConfig+0x12c>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d00f      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a26      	ldr	r2, [pc, #152]	; (800f96c <TIM_Base_SetConfig+0x130>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d00b      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a25      	ldr	r2, [pc, #148]	; (800f970 <TIM_Base_SetConfig+0x134>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d007      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a24      	ldr	r2, [pc, #144]	; (800f974 <TIM_Base_SetConfig+0x138>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d003      	beq.n	800f8ee <TIM_Base_SetConfig+0xb2>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a23      	ldr	r2, [pc, #140]	; (800f978 <TIM_Base_SetConfig+0x13c>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d108      	bne.n	800f900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	689a      	ldr	r2, [r3, #8]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a0a      	ldr	r2, [pc, #40]	; (800f950 <TIM_Base_SetConfig+0x114>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d003      	beq.n	800f934 <TIM_Base_SetConfig+0xf8>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a0c      	ldr	r2, [pc, #48]	; (800f960 <TIM_Base_SetConfig+0x124>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d103      	bne.n	800f93c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	691a      	ldr	r2, [r3, #16]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2201      	movs	r2, #1
 800f940:	615a      	str	r2, [r3, #20]
}
 800f942:	bf00      	nop
 800f944:	3714      	adds	r7, #20
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	40010000 	.word	0x40010000
 800f954:	40000400 	.word	0x40000400
 800f958:	40000800 	.word	0x40000800
 800f95c:	40000c00 	.word	0x40000c00
 800f960:	40010400 	.word	0x40010400
 800f964:	40014000 	.word	0x40014000
 800f968:	40014400 	.word	0x40014400
 800f96c:	40014800 	.word	0x40014800
 800f970:	40001800 	.word	0x40001800
 800f974:	40001c00 	.word	0x40001c00
 800f978:	40002000 	.word	0x40002000

0800f97c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b087      	sub	sp, #28
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a1b      	ldr	r3, [r3, #32]
 800f98a:	f023 0201 	bic.w	r2, r3, #1
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6a1b      	ldr	r3, [r3, #32]
 800f996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	699b      	ldr	r3, [r3, #24]
 800f9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f023 0303 	bic.w	r3, r3, #3
 800f9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	f023 0302 	bic.w	r3, r3, #2
 800f9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a20      	ldr	r2, [pc, #128]	; (800fa54 <TIM_OC1_SetConfig+0xd8>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d003      	beq.n	800f9e0 <TIM_OC1_SetConfig+0x64>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a1f      	ldr	r2, [pc, #124]	; (800fa58 <TIM_OC1_SetConfig+0xdc>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d10c      	bne.n	800f9fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f023 0308 	bic.w	r3, r3, #8
 800f9e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	697a      	ldr	r2, [r7, #20]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	f023 0304 	bic.w	r3, r3, #4
 800f9f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a15      	ldr	r2, [pc, #84]	; (800fa54 <TIM_OC1_SetConfig+0xd8>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d003      	beq.n	800fa0a <TIM_OC1_SetConfig+0x8e>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a14      	ldr	r2, [pc, #80]	; (800fa58 <TIM_OC1_SetConfig+0xdc>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d111      	bne.n	800fa2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	693a      	ldr	r2, [r7, #16]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	699b      	ldr	r3, [r3, #24]
 800fa28:	693a      	ldr	r2, [r7, #16]
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	693a      	ldr	r2, [r7, #16]
 800fa32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	685a      	ldr	r2, [r3, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	697a      	ldr	r2, [r7, #20]
 800fa46:	621a      	str	r2, [r3, #32]
}
 800fa48:	bf00      	nop
 800fa4a:	371c      	adds	r7, #28
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr
 800fa54:	40010000 	.word	0x40010000
 800fa58:	40010400 	.word	0x40010400

0800fa5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b087      	sub	sp, #28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	f023 0210 	bic.w	r2, r3, #16
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6a1b      	ldr	r3, [r3, #32]
 800fa76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	021b      	lsls	r3, r3, #8
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	f023 0320 	bic.w	r3, r3, #32
 800faa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	011b      	lsls	r3, r3, #4
 800faae:	697a      	ldr	r2, [r7, #20]
 800fab0:	4313      	orrs	r3, r2
 800fab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a22      	ldr	r2, [pc, #136]	; (800fb40 <TIM_OC2_SetConfig+0xe4>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d003      	beq.n	800fac4 <TIM_OC2_SetConfig+0x68>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a21      	ldr	r2, [pc, #132]	; (800fb44 <TIM_OC2_SetConfig+0xe8>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d10d      	bne.n	800fae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	011b      	lsls	r3, r3, #4
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a17      	ldr	r2, [pc, #92]	; (800fb40 <TIM_OC2_SetConfig+0xe4>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d003      	beq.n	800faf0 <TIM_OC2_SetConfig+0x94>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a16      	ldr	r2, [pc, #88]	; (800fb44 <TIM_OC2_SetConfig+0xe8>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d113      	bne.n	800fb18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800faf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fafe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	695b      	ldr	r3, [r3, #20]
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	693a      	ldr	r2, [r7, #16]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	685a      	ldr	r2, [r3, #4]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	621a      	str	r2, [r3, #32]
}
 800fb32:	bf00      	nop
 800fb34:	371c      	adds	r7, #28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	40010000 	.word	0x40010000
 800fb44:	40010400 	.word	0x40010400

0800fb48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b087      	sub	sp, #28
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a1b      	ldr	r3, [r3, #32]
 800fb56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a1b      	ldr	r3, [r3, #32]
 800fb62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	69db      	ldr	r3, [r3, #28]
 800fb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f023 0303 	bic.w	r3, r3, #3
 800fb7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	021b      	lsls	r3, r3, #8
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4a21      	ldr	r2, [pc, #132]	; (800fc28 <TIM_OC3_SetConfig+0xe0>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d003      	beq.n	800fbae <TIM_OC3_SetConfig+0x66>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4a20      	ldr	r2, [pc, #128]	; (800fc2c <TIM_OC3_SetConfig+0xe4>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d10d      	bne.n	800fbca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	021b      	lsls	r3, r3, #8
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a16      	ldr	r2, [pc, #88]	; (800fc28 <TIM_OC3_SetConfig+0xe0>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d003      	beq.n	800fbda <TIM_OC3_SetConfig+0x92>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a15      	ldr	r2, [pc, #84]	; (800fc2c <TIM_OC3_SetConfig+0xe4>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d113      	bne.n	800fc02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	695b      	ldr	r3, [r3, #20]
 800fbee:	011b      	lsls	r3, r3, #4
 800fbf0:	693a      	ldr	r2, [r7, #16]
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	699b      	ldr	r3, [r3, #24]
 800fbfa:	011b      	lsls	r3, r3, #4
 800fbfc:	693a      	ldr	r2, [r7, #16]
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	693a      	ldr	r2, [r7, #16]
 800fc06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	621a      	str	r2, [r3, #32]
}
 800fc1c:	bf00      	nop
 800fc1e:	371c      	adds	r7, #28
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr
 800fc28:	40010000 	.word	0x40010000
 800fc2c:	40010400 	.word	0x40010400

0800fc30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a1b      	ldr	r3, [r3, #32]
 800fc4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	69db      	ldr	r3, [r3, #28]
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	021b      	lsls	r3, r3, #8
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	4313      	orrs	r3, r2
 800fc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	689b      	ldr	r3, [r3, #8]
 800fc80:	031b      	lsls	r3, r3, #12
 800fc82:	693a      	ldr	r2, [r7, #16]
 800fc84:	4313      	orrs	r3, r2
 800fc86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a12      	ldr	r2, [pc, #72]	; (800fcd4 <TIM_OC4_SetConfig+0xa4>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d003      	beq.n	800fc98 <TIM_OC4_SetConfig+0x68>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	4a11      	ldr	r2, [pc, #68]	; (800fcd8 <TIM_OC4_SetConfig+0xa8>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d109      	bne.n	800fcac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	695b      	ldr	r3, [r3, #20]
 800fca4:	019b      	lsls	r3, r3, #6
 800fca6:	697a      	ldr	r2, [r7, #20]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	693a      	ldr	r2, [r7, #16]
 800fcc4:	621a      	str	r2, [r3, #32]
}
 800fcc6:	bf00      	nop
 800fcc8:	371c      	adds	r7, #28
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	40010000 	.word	0x40010000
 800fcd8:	40010400 	.word	0x40010400

0800fcdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	f003 031f 	and.w	r3, r3, #31
 800fcee:	2201      	movs	r2, #1
 800fcf0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6a1a      	ldr	r2, [r3, #32]
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	43db      	mvns	r3, r3
 800fcfe:	401a      	ands	r2, r3
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6a1a      	ldr	r2, [r3, #32]
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	f003 031f 	and.w	r3, r3, #31
 800fd0e:	6879      	ldr	r1, [r7, #4]
 800fd10:	fa01 f303 	lsl.w	r3, r1, r3
 800fd14:	431a      	orrs	r2, r3
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	621a      	str	r2, [r3, #32]
}
 800fd1a:	bf00      	nop
 800fd1c:	371c      	adds	r7, #28
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr
	...

0800fd28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d101      	bne.n	800fd40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	e05a      	b.n	800fdf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2202      	movs	r2, #2
 800fd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4a21      	ldr	r2, [pc, #132]	; (800fe04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d022      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd8c:	d01d      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4a1d      	ldr	r2, [pc, #116]	; (800fe08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d018      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a1b      	ldr	r2, [pc, #108]	; (800fe0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d013      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a1a      	ldr	r2, [pc, #104]	; (800fe10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d00e      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a18      	ldr	r2, [pc, #96]	; (800fe14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d009      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a17      	ldr	r2, [pc, #92]	; (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d004      	beq.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a15      	ldr	r2, [pc, #84]	; (800fe1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d10c      	bne.n	800fde4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	68ba      	ldr	r2, [r7, #8]
 800fde2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3714      	adds	r7, #20
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	40010000 	.word	0x40010000
 800fe08:	40000400 	.word	0x40000400
 800fe0c:	40000800 	.word	0x40000800
 800fe10:	40000c00 	.word	0x40000c00
 800fe14:	40010400 	.word	0x40010400
 800fe18:	40014000 	.word	0x40014000
 800fe1c:	40001800 	.word	0x40001800

0800fe20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d101      	bne.n	800fe3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe38:	2302      	movs	r3, #2
 800fe3a:	e03d      	b.n	800feb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	695b      	ldr	r3, [r3, #20]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	69db      	ldr	r3, [r3, #28]
 800fea2:	4313      	orrs	r3, r2
 800fea4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3714      	adds	r7, #20
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d101      	bne.n	800fefe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fefa:	2301      	movs	r3, #1
 800fefc:	e03f      	b.n	800ff7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7f7 fcc8 	bl	80078a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2224      	movs	r2, #36	; 0x24
 800ff1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	68da      	ldr	r2, [r3, #12]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f829 	bl	800ff88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	691a      	ldr	r2, [r3, #16]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	695a      	ldr	r2, [r3, #20]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	68da      	ldr	r2, [r3, #12]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2220      	movs	r2, #32
 800ff70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2220      	movs	r2, #32
 800ff78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3708      	adds	r7, #8
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
	...

0800ff88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8c:	b085      	sub	sp, #20
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	68da      	ldr	r2, [r3, #12]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	430a      	orrs	r2, r1
 800ffa6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	689a      	ldr	r2, [r3, #8]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	431a      	orrs	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	431a      	orrs	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ffca:	f023 030c 	bic.w	r3, r3, #12
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	6812      	ldr	r2, [r2, #0]
 800ffd2:	68f9      	ldr	r1, [r7, #12]
 800ffd4:	430b      	orrs	r3, r1
 800ffd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	695b      	ldr	r3, [r3, #20]
 800ffde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	699a      	ldr	r2, [r3, #24]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	430a      	orrs	r2, r1
 800ffec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	69db      	ldr	r3, [r3, #28]
 800fff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fff6:	f040 818b 	bne.w	8010310 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4ac1      	ldr	r2, [pc, #772]	; (8010304 <UART_SetConfig+0x37c>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d005      	beq.n	8010010 <UART_SetConfig+0x88>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4abf      	ldr	r2, [pc, #764]	; (8010308 <UART_SetConfig+0x380>)
 801000a:	4293      	cmp	r3, r2
 801000c:	f040 80bd 	bne.w	801018a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010010:	f7fc fbcc 	bl	800c7ac <HAL_RCC_GetPCLK2Freq>
 8010014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	461d      	mov	r5, r3
 801001a:	f04f 0600 	mov.w	r6, #0
 801001e:	46a8      	mov	r8, r5
 8010020:	46b1      	mov	r9, r6
 8010022:	eb18 0308 	adds.w	r3, r8, r8
 8010026:	eb49 0409 	adc.w	r4, r9, r9
 801002a:	4698      	mov	r8, r3
 801002c:	46a1      	mov	r9, r4
 801002e:	eb18 0805 	adds.w	r8, r8, r5
 8010032:	eb49 0906 	adc.w	r9, r9, r6
 8010036:	f04f 0100 	mov.w	r1, #0
 801003a:	f04f 0200 	mov.w	r2, #0
 801003e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801004a:	4688      	mov	r8, r1
 801004c:	4691      	mov	r9, r2
 801004e:	eb18 0005 	adds.w	r0, r8, r5
 8010052:	eb49 0106 	adc.w	r1, r9, r6
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	461d      	mov	r5, r3
 801005c:	f04f 0600 	mov.w	r6, #0
 8010060:	196b      	adds	r3, r5, r5
 8010062:	eb46 0406 	adc.w	r4, r6, r6
 8010066:	461a      	mov	r2, r3
 8010068:	4623      	mov	r3, r4
 801006a:	f7f0 fe25 	bl	8000cb8 <__aeabi_uldivmod>
 801006e:	4603      	mov	r3, r0
 8010070:	460c      	mov	r4, r1
 8010072:	461a      	mov	r2, r3
 8010074:	4ba5      	ldr	r3, [pc, #660]	; (801030c <UART_SetConfig+0x384>)
 8010076:	fba3 2302 	umull	r2, r3, r3, r2
 801007a:	095b      	lsrs	r3, r3, #5
 801007c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	461d      	mov	r5, r3
 8010084:	f04f 0600 	mov.w	r6, #0
 8010088:	46a9      	mov	r9, r5
 801008a:	46b2      	mov	sl, r6
 801008c:	eb19 0309 	adds.w	r3, r9, r9
 8010090:	eb4a 040a 	adc.w	r4, sl, sl
 8010094:	4699      	mov	r9, r3
 8010096:	46a2      	mov	sl, r4
 8010098:	eb19 0905 	adds.w	r9, r9, r5
 801009c:	eb4a 0a06 	adc.w	sl, sl, r6
 80100a0:	f04f 0100 	mov.w	r1, #0
 80100a4:	f04f 0200 	mov.w	r2, #0
 80100a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100b4:	4689      	mov	r9, r1
 80100b6:	4692      	mov	sl, r2
 80100b8:	eb19 0005 	adds.w	r0, r9, r5
 80100bc:	eb4a 0106 	adc.w	r1, sl, r6
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	461d      	mov	r5, r3
 80100c6:	f04f 0600 	mov.w	r6, #0
 80100ca:	196b      	adds	r3, r5, r5
 80100cc:	eb46 0406 	adc.w	r4, r6, r6
 80100d0:	461a      	mov	r2, r3
 80100d2:	4623      	mov	r3, r4
 80100d4:	f7f0 fdf0 	bl	8000cb8 <__aeabi_uldivmod>
 80100d8:	4603      	mov	r3, r0
 80100da:	460c      	mov	r4, r1
 80100dc:	461a      	mov	r2, r3
 80100de:	4b8b      	ldr	r3, [pc, #556]	; (801030c <UART_SetConfig+0x384>)
 80100e0:	fba3 1302 	umull	r1, r3, r3, r2
 80100e4:	095b      	lsrs	r3, r3, #5
 80100e6:	2164      	movs	r1, #100	; 0x64
 80100e8:	fb01 f303 	mul.w	r3, r1, r3
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	00db      	lsls	r3, r3, #3
 80100f0:	3332      	adds	r3, #50	; 0x32
 80100f2:	4a86      	ldr	r2, [pc, #536]	; (801030c <UART_SetConfig+0x384>)
 80100f4:	fba2 2303 	umull	r2, r3, r2, r3
 80100f8:	095b      	lsrs	r3, r3, #5
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010100:	4498      	add	r8, r3
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	461d      	mov	r5, r3
 8010106:	f04f 0600 	mov.w	r6, #0
 801010a:	46a9      	mov	r9, r5
 801010c:	46b2      	mov	sl, r6
 801010e:	eb19 0309 	adds.w	r3, r9, r9
 8010112:	eb4a 040a 	adc.w	r4, sl, sl
 8010116:	4699      	mov	r9, r3
 8010118:	46a2      	mov	sl, r4
 801011a:	eb19 0905 	adds.w	r9, r9, r5
 801011e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010122:	f04f 0100 	mov.w	r1, #0
 8010126:	f04f 0200 	mov.w	r2, #0
 801012a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801012e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010136:	4689      	mov	r9, r1
 8010138:	4692      	mov	sl, r2
 801013a:	eb19 0005 	adds.w	r0, r9, r5
 801013e:	eb4a 0106 	adc.w	r1, sl, r6
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	461d      	mov	r5, r3
 8010148:	f04f 0600 	mov.w	r6, #0
 801014c:	196b      	adds	r3, r5, r5
 801014e:	eb46 0406 	adc.w	r4, r6, r6
 8010152:	461a      	mov	r2, r3
 8010154:	4623      	mov	r3, r4
 8010156:	f7f0 fdaf 	bl	8000cb8 <__aeabi_uldivmod>
 801015a:	4603      	mov	r3, r0
 801015c:	460c      	mov	r4, r1
 801015e:	461a      	mov	r2, r3
 8010160:	4b6a      	ldr	r3, [pc, #424]	; (801030c <UART_SetConfig+0x384>)
 8010162:	fba3 1302 	umull	r1, r3, r3, r2
 8010166:	095b      	lsrs	r3, r3, #5
 8010168:	2164      	movs	r1, #100	; 0x64
 801016a:	fb01 f303 	mul.w	r3, r1, r3
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	00db      	lsls	r3, r3, #3
 8010172:	3332      	adds	r3, #50	; 0x32
 8010174:	4a65      	ldr	r2, [pc, #404]	; (801030c <UART_SetConfig+0x384>)
 8010176:	fba2 2303 	umull	r2, r3, r2, r3
 801017a:	095b      	lsrs	r3, r3, #5
 801017c:	f003 0207 	and.w	r2, r3, #7
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4442      	add	r2, r8
 8010186:	609a      	str	r2, [r3, #8]
 8010188:	e26f      	b.n	801066a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801018a:	f7fc fafb 	bl	800c784 <HAL_RCC_GetPCLK1Freq>
 801018e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	461d      	mov	r5, r3
 8010194:	f04f 0600 	mov.w	r6, #0
 8010198:	46a8      	mov	r8, r5
 801019a:	46b1      	mov	r9, r6
 801019c:	eb18 0308 	adds.w	r3, r8, r8
 80101a0:	eb49 0409 	adc.w	r4, r9, r9
 80101a4:	4698      	mov	r8, r3
 80101a6:	46a1      	mov	r9, r4
 80101a8:	eb18 0805 	adds.w	r8, r8, r5
 80101ac:	eb49 0906 	adc.w	r9, r9, r6
 80101b0:	f04f 0100 	mov.w	r1, #0
 80101b4:	f04f 0200 	mov.w	r2, #0
 80101b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80101c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101c4:	4688      	mov	r8, r1
 80101c6:	4691      	mov	r9, r2
 80101c8:	eb18 0005 	adds.w	r0, r8, r5
 80101cc:	eb49 0106 	adc.w	r1, r9, r6
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	461d      	mov	r5, r3
 80101d6:	f04f 0600 	mov.w	r6, #0
 80101da:	196b      	adds	r3, r5, r5
 80101dc:	eb46 0406 	adc.w	r4, r6, r6
 80101e0:	461a      	mov	r2, r3
 80101e2:	4623      	mov	r3, r4
 80101e4:	f7f0 fd68 	bl	8000cb8 <__aeabi_uldivmod>
 80101e8:	4603      	mov	r3, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	461a      	mov	r2, r3
 80101ee:	4b47      	ldr	r3, [pc, #284]	; (801030c <UART_SetConfig+0x384>)
 80101f0:	fba3 2302 	umull	r2, r3, r3, r2
 80101f4:	095b      	lsrs	r3, r3, #5
 80101f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	461d      	mov	r5, r3
 80101fe:	f04f 0600 	mov.w	r6, #0
 8010202:	46a9      	mov	r9, r5
 8010204:	46b2      	mov	sl, r6
 8010206:	eb19 0309 	adds.w	r3, r9, r9
 801020a:	eb4a 040a 	adc.w	r4, sl, sl
 801020e:	4699      	mov	r9, r3
 8010210:	46a2      	mov	sl, r4
 8010212:	eb19 0905 	adds.w	r9, r9, r5
 8010216:	eb4a 0a06 	adc.w	sl, sl, r6
 801021a:	f04f 0100 	mov.w	r1, #0
 801021e:	f04f 0200 	mov.w	r2, #0
 8010222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010226:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801022a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801022e:	4689      	mov	r9, r1
 8010230:	4692      	mov	sl, r2
 8010232:	eb19 0005 	adds.w	r0, r9, r5
 8010236:	eb4a 0106 	adc.w	r1, sl, r6
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	461d      	mov	r5, r3
 8010240:	f04f 0600 	mov.w	r6, #0
 8010244:	196b      	adds	r3, r5, r5
 8010246:	eb46 0406 	adc.w	r4, r6, r6
 801024a:	461a      	mov	r2, r3
 801024c:	4623      	mov	r3, r4
 801024e:	f7f0 fd33 	bl	8000cb8 <__aeabi_uldivmod>
 8010252:	4603      	mov	r3, r0
 8010254:	460c      	mov	r4, r1
 8010256:	461a      	mov	r2, r3
 8010258:	4b2c      	ldr	r3, [pc, #176]	; (801030c <UART_SetConfig+0x384>)
 801025a:	fba3 1302 	umull	r1, r3, r3, r2
 801025e:	095b      	lsrs	r3, r3, #5
 8010260:	2164      	movs	r1, #100	; 0x64
 8010262:	fb01 f303 	mul.w	r3, r1, r3
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	3332      	adds	r3, #50	; 0x32
 801026c:	4a27      	ldr	r2, [pc, #156]	; (801030c <UART_SetConfig+0x384>)
 801026e:	fba2 2303 	umull	r2, r3, r2, r3
 8010272:	095b      	lsrs	r3, r3, #5
 8010274:	005b      	lsls	r3, r3, #1
 8010276:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801027a:	4498      	add	r8, r3
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	461d      	mov	r5, r3
 8010280:	f04f 0600 	mov.w	r6, #0
 8010284:	46a9      	mov	r9, r5
 8010286:	46b2      	mov	sl, r6
 8010288:	eb19 0309 	adds.w	r3, r9, r9
 801028c:	eb4a 040a 	adc.w	r4, sl, sl
 8010290:	4699      	mov	r9, r3
 8010292:	46a2      	mov	sl, r4
 8010294:	eb19 0905 	adds.w	r9, r9, r5
 8010298:	eb4a 0a06 	adc.w	sl, sl, r6
 801029c:	f04f 0100 	mov.w	r1, #0
 80102a0:	f04f 0200 	mov.w	r2, #0
 80102a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102b0:	4689      	mov	r9, r1
 80102b2:	4692      	mov	sl, r2
 80102b4:	eb19 0005 	adds.w	r0, r9, r5
 80102b8:	eb4a 0106 	adc.w	r1, sl, r6
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	461d      	mov	r5, r3
 80102c2:	f04f 0600 	mov.w	r6, #0
 80102c6:	196b      	adds	r3, r5, r5
 80102c8:	eb46 0406 	adc.w	r4, r6, r6
 80102cc:	461a      	mov	r2, r3
 80102ce:	4623      	mov	r3, r4
 80102d0:	f7f0 fcf2 	bl	8000cb8 <__aeabi_uldivmod>
 80102d4:	4603      	mov	r3, r0
 80102d6:	460c      	mov	r4, r1
 80102d8:	461a      	mov	r2, r3
 80102da:	4b0c      	ldr	r3, [pc, #48]	; (801030c <UART_SetConfig+0x384>)
 80102dc:	fba3 1302 	umull	r1, r3, r3, r2
 80102e0:	095b      	lsrs	r3, r3, #5
 80102e2:	2164      	movs	r1, #100	; 0x64
 80102e4:	fb01 f303 	mul.w	r3, r1, r3
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	00db      	lsls	r3, r3, #3
 80102ec:	3332      	adds	r3, #50	; 0x32
 80102ee:	4a07      	ldr	r2, [pc, #28]	; (801030c <UART_SetConfig+0x384>)
 80102f0:	fba2 2303 	umull	r2, r3, r2, r3
 80102f4:	095b      	lsrs	r3, r3, #5
 80102f6:	f003 0207 	and.w	r2, r3, #7
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4442      	add	r2, r8
 8010300:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010302:	e1b2      	b.n	801066a <UART_SetConfig+0x6e2>
 8010304:	40011000 	.word	0x40011000
 8010308:	40011400 	.word	0x40011400
 801030c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4ad7      	ldr	r2, [pc, #860]	; (8010674 <UART_SetConfig+0x6ec>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d005      	beq.n	8010326 <UART_SetConfig+0x39e>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4ad6      	ldr	r2, [pc, #856]	; (8010678 <UART_SetConfig+0x6f0>)
 8010320:	4293      	cmp	r3, r2
 8010322:	f040 80d1 	bne.w	80104c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010326:	f7fc fa41 	bl	800c7ac <HAL_RCC_GetPCLK2Freq>
 801032a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	469a      	mov	sl, r3
 8010330:	f04f 0b00 	mov.w	fp, #0
 8010334:	46d0      	mov	r8, sl
 8010336:	46d9      	mov	r9, fp
 8010338:	eb18 0308 	adds.w	r3, r8, r8
 801033c:	eb49 0409 	adc.w	r4, r9, r9
 8010340:	4698      	mov	r8, r3
 8010342:	46a1      	mov	r9, r4
 8010344:	eb18 080a 	adds.w	r8, r8, sl
 8010348:	eb49 090b 	adc.w	r9, r9, fp
 801034c:	f04f 0100 	mov.w	r1, #0
 8010350:	f04f 0200 	mov.w	r2, #0
 8010354:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010358:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801035c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010360:	4688      	mov	r8, r1
 8010362:	4691      	mov	r9, r2
 8010364:	eb1a 0508 	adds.w	r5, sl, r8
 8010368:	eb4b 0609 	adc.w	r6, fp, r9
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	4619      	mov	r1, r3
 8010372:	f04f 0200 	mov.w	r2, #0
 8010376:	f04f 0300 	mov.w	r3, #0
 801037a:	f04f 0400 	mov.w	r4, #0
 801037e:	0094      	lsls	r4, r2, #2
 8010380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010384:	008b      	lsls	r3, r1, #2
 8010386:	461a      	mov	r2, r3
 8010388:	4623      	mov	r3, r4
 801038a:	4628      	mov	r0, r5
 801038c:	4631      	mov	r1, r6
 801038e:	f7f0 fc93 	bl	8000cb8 <__aeabi_uldivmod>
 8010392:	4603      	mov	r3, r0
 8010394:	460c      	mov	r4, r1
 8010396:	461a      	mov	r2, r3
 8010398:	4bb8      	ldr	r3, [pc, #736]	; (801067c <UART_SetConfig+0x6f4>)
 801039a:	fba3 2302 	umull	r2, r3, r3, r2
 801039e:	095b      	lsrs	r3, r3, #5
 80103a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	469b      	mov	fp, r3
 80103a8:	f04f 0c00 	mov.w	ip, #0
 80103ac:	46d9      	mov	r9, fp
 80103ae:	46e2      	mov	sl, ip
 80103b0:	eb19 0309 	adds.w	r3, r9, r9
 80103b4:	eb4a 040a 	adc.w	r4, sl, sl
 80103b8:	4699      	mov	r9, r3
 80103ba:	46a2      	mov	sl, r4
 80103bc:	eb19 090b 	adds.w	r9, r9, fp
 80103c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103c4:	f04f 0100 	mov.w	r1, #0
 80103c8:	f04f 0200 	mov.w	r2, #0
 80103cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103d8:	4689      	mov	r9, r1
 80103da:	4692      	mov	sl, r2
 80103dc:	eb1b 0509 	adds.w	r5, fp, r9
 80103e0:	eb4c 060a 	adc.w	r6, ip, sl
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	4619      	mov	r1, r3
 80103ea:	f04f 0200 	mov.w	r2, #0
 80103ee:	f04f 0300 	mov.w	r3, #0
 80103f2:	f04f 0400 	mov.w	r4, #0
 80103f6:	0094      	lsls	r4, r2, #2
 80103f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103fc:	008b      	lsls	r3, r1, #2
 80103fe:	461a      	mov	r2, r3
 8010400:	4623      	mov	r3, r4
 8010402:	4628      	mov	r0, r5
 8010404:	4631      	mov	r1, r6
 8010406:	f7f0 fc57 	bl	8000cb8 <__aeabi_uldivmod>
 801040a:	4603      	mov	r3, r0
 801040c:	460c      	mov	r4, r1
 801040e:	461a      	mov	r2, r3
 8010410:	4b9a      	ldr	r3, [pc, #616]	; (801067c <UART_SetConfig+0x6f4>)
 8010412:	fba3 1302 	umull	r1, r3, r3, r2
 8010416:	095b      	lsrs	r3, r3, #5
 8010418:	2164      	movs	r1, #100	; 0x64
 801041a:	fb01 f303 	mul.w	r3, r1, r3
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	011b      	lsls	r3, r3, #4
 8010422:	3332      	adds	r3, #50	; 0x32
 8010424:	4a95      	ldr	r2, [pc, #596]	; (801067c <UART_SetConfig+0x6f4>)
 8010426:	fba2 2303 	umull	r2, r3, r2, r3
 801042a:	095b      	lsrs	r3, r3, #5
 801042c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010430:	4498      	add	r8, r3
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	469b      	mov	fp, r3
 8010436:	f04f 0c00 	mov.w	ip, #0
 801043a:	46d9      	mov	r9, fp
 801043c:	46e2      	mov	sl, ip
 801043e:	eb19 0309 	adds.w	r3, r9, r9
 8010442:	eb4a 040a 	adc.w	r4, sl, sl
 8010446:	4699      	mov	r9, r3
 8010448:	46a2      	mov	sl, r4
 801044a:	eb19 090b 	adds.w	r9, r9, fp
 801044e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010452:	f04f 0100 	mov.w	r1, #0
 8010456:	f04f 0200 	mov.w	r2, #0
 801045a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801045e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010466:	4689      	mov	r9, r1
 8010468:	4692      	mov	sl, r2
 801046a:	eb1b 0509 	adds.w	r5, fp, r9
 801046e:	eb4c 060a 	adc.w	r6, ip, sl
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	4619      	mov	r1, r3
 8010478:	f04f 0200 	mov.w	r2, #0
 801047c:	f04f 0300 	mov.w	r3, #0
 8010480:	f04f 0400 	mov.w	r4, #0
 8010484:	0094      	lsls	r4, r2, #2
 8010486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801048a:	008b      	lsls	r3, r1, #2
 801048c:	461a      	mov	r2, r3
 801048e:	4623      	mov	r3, r4
 8010490:	4628      	mov	r0, r5
 8010492:	4631      	mov	r1, r6
 8010494:	f7f0 fc10 	bl	8000cb8 <__aeabi_uldivmod>
 8010498:	4603      	mov	r3, r0
 801049a:	460c      	mov	r4, r1
 801049c:	461a      	mov	r2, r3
 801049e:	4b77      	ldr	r3, [pc, #476]	; (801067c <UART_SetConfig+0x6f4>)
 80104a0:	fba3 1302 	umull	r1, r3, r3, r2
 80104a4:	095b      	lsrs	r3, r3, #5
 80104a6:	2164      	movs	r1, #100	; 0x64
 80104a8:	fb01 f303 	mul.w	r3, r1, r3
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	011b      	lsls	r3, r3, #4
 80104b0:	3332      	adds	r3, #50	; 0x32
 80104b2:	4a72      	ldr	r2, [pc, #456]	; (801067c <UART_SetConfig+0x6f4>)
 80104b4:	fba2 2303 	umull	r2, r3, r2, r3
 80104b8:	095b      	lsrs	r3, r3, #5
 80104ba:	f003 020f 	and.w	r2, r3, #15
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4442      	add	r2, r8
 80104c4:	609a      	str	r2, [r3, #8]
 80104c6:	e0d0      	b.n	801066a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80104c8:	f7fc f95c 	bl	800c784 <HAL_RCC_GetPCLK1Freq>
 80104cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	469a      	mov	sl, r3
 80104d2:	f04f 0b00 	mov.w	fp, #0
 80104d6:	46d0      	mov	r8, sl
 80104d8:	46d9      	mov	r9, fp
 80104da:	eb18 0308 	adds.w	r3, r8, r8
 80104de:	eb49 0409 	adc.w	r4, r9, r9
 80104e2:	4698      	mov	r8, r3
 80104e4:	46a1      	mov	r9, r4
 80104e6:	eb18 080a 	adds.w	r8, r8, sl
 80104ea:	eb49 090b 	adc.w	r9, r9, fp
 80104ee:	f04f 0100 	mov.w	r1, #0
 80104f2:	f04f 0200 	mov.w	r2, #0
 80104f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80104fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80104fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010502:	4688      	mov	r8, r1
 8010504:	4691      	mov	r9, r2
 8010506:	eb1a 0508 	adds.w	r5, sl, r8
 801050a:	eb4b 0609 	adc.w	r6, fp, r9
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	4619      	mov	r1, r3
 8010514:	f04f 0200 	mov.w	r2, #0
 8010518:	f04f 0300 	mov.w	r3, #0
 801051c:	f04f 0400 	mov.w	r4, #0
 8010520:	0094      	lsls	r4, r2, #2
 8010522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010526:	008b      	lsls	r3, r1, #2
 8010528:	461a      	mov	r2, r3
 801052a:	4623      	mov	r3, r4
 801052c:	4628      	mov	r0, r5
 801052e:	4631      	mov	r1, r6
 8010530:	f7f0 fbc2 	bl	8000cb8 <__aeabi_uldivmod>
 8010534:	4603      	mov	r3, r0
 8010536:	460c      	mov	r4, r1
 8010538:	461a      	mov	r2, r3
 801053a:	4b50      	ldr	r3, [pc, #320]	; (801067c <UART_SetConfig+0x6f4>)
 801053c:	fba3 2302 	umull	r2, r3, r3, r2
 8010540:	095b      	lsrs	r3, r3, #5
 8010542:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	469b      	mov	fp, r3
 801054a:	f04f 0c00 	mov.w	ip, #0
 801054e:	46d9      	mov	r9, fp
 8010550:	46e2      	mov	sl, ip
 8010552:	eb19 0309 	adds.w	r3, r9, r9
 8010556:	eb4a 040a 	adc.w	r4, sl, sl
 801055a:	4699      	mov	r9, r3
 801055c:	46a2      	mov	sl, r4
 801055e:	eb19 090b 	adds.w	r9, r9, fp
 8010562:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010566:	f04f 0100 	mov.w	r1, #0
 801056a:	f04f 0200 	mov.w	r2, #0
 801056e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801057a:	4689      	mov	r9, r1
 801057c:	4692      	mov	sl, r2
 801057e:	eb1b 0509 	adds.w	r5, fp, r9
 8010582:	eb4c 060a 	adc.w	r6, ip, sl
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	4619      	mov	r1, r3
 801058c:	f04f 0200 	mov.w	r2, #0
 8010590:	f04f 0300 	mov.w	r3, #0
 8010594:	f04f 0400 	mov.w	r4, #0
 8010598:	0094      	lsls	r4, r2, #2
 801059a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801059e:	008b      	lsls	r3, r1, #2
 80105a0:	461a      	mov	r2, r3
 80105a2:	4623      	mov	r3, r4
 80105a4:	4628      	mov	r0, r5
 80105a6:	4631      	mov	r1, r6
 80105a8:	f7f0 fb86 	bl	8000cb8 <__aeabi_uldivmod>
 80105ac:	4603      	mov	r3, r0
 80105ae:	460c      	mov	r4, r1
 80105b0:	461a      	mov	r2, r3
 80105b2:	4b32      	ldr	r3, [pc, #200]	; (801067c <UART_SetConfig+0x6f4>)
 80105b4:	fba3 1302 	umull	r1, r3, r3, r2
 80105b8:	095b      	lsrs	r3, r3, #5
 80105ba:	2164      	movs	r1, #100	; 0x64
 80105bc:	fb01 f303 	mul.w	r3, r1, r3
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	011b      	lsls	r3, r3, #4
 80105c4:	3332      	adds	r3, #50	; 0x32
 80105c6:	4a2d      	ldr	r2, [pc, #180]	; (801067c <UART_SetConfig+0x6f4>)
 80105c8:	fba2 2303 	umull	r2, r3, r2, r3
 80105cc:	095b      	lsrs	r3, r3, #5
 80105ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105d2:	4498      	add	r8, r3
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	469b      	mov	fp, r3
 80105d8:	f04f 0c00 	mov.w	ip, #0
 80105dc:	46d9      	mov	r9, fp
 80105de:	46e2      	mov	sl, ip
 80105e0:	eb19 0309 	adds.w	r3, r9, r9
 80105e4:	eb4a 040a 	adc.w	r4, sl, sl
 80105e8:	4699      	mov	r9, r3
 80105ea:	46a2      	mov	sl, r4
 80105ec:	eb19 090b 	adds.w	r9, r9, fp
 80105f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80105f4:	f04f 0100 	mov.w	r1, #0
 80105f8:	f04f 0200 	mov.w	r2, #0
 80105fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010600:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010608:	4689      	mov	r9, r1
 801060a:	4692      	mov	sl, r2
 801060c:	eb1b 0509 	adds.w	r5, fp, r9
 8010610:	eb4c 060a 	adc.w	r6, ip, sl
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	4619      	mov	r1, r3
 801061a:	f04f 0200 	mov.w	r2, #0
 801061e:	f04f 0300 	mov.w	r3, #0
 8010622:	f04f 0400 	mov.w	r4, #0
 8010626:	0094      	lsls	r4, r2, #2
 8010628:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801062c:	008b      	lsls	r3, r1, #2
 801062e:	461a      	mov	r2, r3
 8010630:	4623      	mov	r3, r4
 8010632:	4628      	mov	r0, r5
 8010634:	4631      	mov	r1, r6
 8010636:	f7f0 fb3f 	bl	8000cb8 <__aeabi_uldivmod>
 801063a:	4603      	mov	r3, r0
 801063c:	460c      	mov	r4, r1
 801063e:	461a      	mov	r2, r3
 8010640:	4b0e      	ldr	r3, [pc, #56]	; (801067c <UART_SetConfig+0x6f4>)
 8010642:	fba3 1302 	umull	r1, r3, r3, r2
 8010646:	095b      	lsrs	r3, r3, #5
 8010648:	2164      	movs	r1, #100	; 0x64
 801064a:	fb01 f303 	mul.w	r3, r1, r3
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	011b      	lsls	r3, r3, #4
 8010652:	3332      	adds	r3, #50	; 0x32
 8010654:	4a09      	ldr	r2, [pc, #36]	; (801067c <UART_SetConfig+0x6f4>)
 8010656:	fba2 2303 	umull	r2, r3, r2, r3
 801065a:	095b      	lsrs	r3, r3, #5
 801065c:	f003 020f 	and.w	r2, r3, #15
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4442      	add	r2, r8
 8010666:	609a      	str	r2, [r3, #8]
}
 8010668:	e7ff      	b.n	801066a <UART_SetConfig+0x6e2>
 801066a:	bf00      	nop
 801066c:	3714      	adds	r7, #20
 801066e:	46bd      	mov	sp, r7
 8010670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010674:	40011000 	.word	0x40011000
 8010678:	40011400 	.word	0x40011400
 801067c:	51eb851f 	.word	0x51eb851f

08010680 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010680:	b084      	sub	sp, #16
 8010682:	b480      	push	{r7}
 8010684:	b085      	sub	sp, #20
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	f107 001c 	add.w	r0, r7, #28
 801068e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010698:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801069a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801069e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80106a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80106a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80106a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80106aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80106ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	431a      	orrs	r2, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3714      	adds	r7, #20
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	b004      	add	sp, #16
 80106d4:	4770      	bx	lr

080106d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b083      	sub	sp, #12
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010704:	2300      	movs	r3, #0
}
 8010706:	4618      	mov	r0, r3
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010712:	b580      	push	{r7, lr}
 8010714:	b082      	sub	sp, #8
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2203      	movs	r2, #3
 801071e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010720:	2002      	movs	r0, #2
 8010722:	f7f9 fbdd 	bl	8009ee0 <HAL_Delay>
  
  return HAL_OK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3708      	adds	r7, #8
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f003 0303 	and.w	r3, r3, #3
}
 8010740:	4618      	mov	r0, r3
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801074c:	b480      	push	{r7}
 801074e:	b085      	sub	sp, #20
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010756:	2300      	movs	r3, #0
 8010758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801076a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010770:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010776:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	4313      	orrs	r3, r2
 801077c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010786:	f023 030f 	bic.w	r3, r3, #15
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	431a      	orrs	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	b2db      	uxtb	r3, r3
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr

080107ba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80107ba:	b480      	push	{r7}
 80107bc:	b085      	sub	sp, #20
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3314      	adds	r3, #20
 80107c8:	461a      	mov	r2, r3
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	4413      	add	r3, r2
 80107ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
}  
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107ea:	2300      	movs	r3, #0
 80107ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010806:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801080c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010812:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010814:	68fa      	ldr	r2, [r7, #12]
 8010816:	4313      	orrs	r3, r2
 8010818:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	431a      	orrs	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801082a:	2300      	movs	r3, #0

}
 801082c:	4618      	mov	r0, r3
 801082e:	3714      	adds	r7, #20
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b088      	sub	sp, #32
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010846:	2310      	movs	r3, #16
 8010848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801084a:	2340      	movs	r3, #64	; 0x40
 801084c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801084e:	2300      	movs	r3, #0
 8010850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010858:	f107 0308 	add.w	r3, r7, #8
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff ff74 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010864:	f241 3288 	movw	r2, #5000	; 0x1388
 8010868:	2110      	movs	r1, #16
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fa40 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010872:	69fb      	ldr	r3, [r7, #28]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3720      	adds	r7, #32
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b088      	sub	sp, #32
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801088a:	2311      	movs	r3, #17
 801088c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801088e:	2340      	movs	r3, #64	; 0x40
 8010890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010892:	2300      	movs	r3, #0
 8010894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801089a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4619      	mov	r1, r3
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff ff52 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80108a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108ac:	2111      	movs	r1, #17
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 fa1e 	bl	8010cf0 <SDMMC_GetCmdResp1>
 80108b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b6:	69fb      	ldr	r3, [r7, #28]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3720      	adds	r7, #32
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80108ce:	2312      	movs	r3, #18
 80108d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108d2:	2340      	movs	r3, #64	; 0x40
 80108d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d6:	2300      	movs	r3, #0
 80108d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108e0:	f107 0308 	add.w	r3, r7, #8
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff ff30 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80108ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80108f0:	2112      	movs	r1, #18
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f000 f9fc 	bl	8010cf0 <SDMMC_GetCmdResp1>
 80108f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108fa:	69fb      	ldr	r3, [r7, #28]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3720      	adds	r7, #32
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b088      	sub	sp, #32
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010912:	2318      	movs	r3, #24
 8010914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010916:	2340      	movs	r3, #64	; 0x40
 8010918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801091a:	2300      	movs	r3, #0
 801091c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010924:	f107 0308 	add.w	r3, r7, #8
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7ff ff0e 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010930:	f241 3288 	movw	r2, #5000	; 0x1388
 8010934:	2118      	movs	r1, #24
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 f9da 	bl	8010cf0 <SDMMC_GetCmdResp1>
 801093c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801093e:	69fb      	ldr	r3, [r7, #28]
}
 8010940:	4618      	mov	r0, r3
 8010942:	3720      	adds	r7, #32
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b088      	sub	sp, #32
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010956:	2319      	movs	r3, #25
 8010958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801095a:	2340      	movs	r3, #64	; 0x40
 801095c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801095e:	2300      	movs	r3, #0
 8010960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010966:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010968:	f107 0308 	add.w	r3, r7, #8
 801096c:	4619      	mov	r1, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7ff feec 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010974:	f241 3288 	movw	r2, #5000	; 0x1388
 8010978:	2119      	movs	r1, #25
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 f9b8 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010982:	69fb      	ldr	r3, [r7, #28]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3720      	adds	r7, #32
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b088      	sub	sp, #32
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010994:	2300      	movs	r3, #0
 8010996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010998:	230c      	movs	r3, #12
 801099a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801099c:	2340      	movs	r3, #64	; 0x40
 801099e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109a0:	2300      	movs	r3, #0
 80109a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109aa:	f107 0308 	add.w	r3, r7, #8
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff fecb 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80109b6:	4a05      	ldr	r2, [pc, #20]	; (80109cc <SDMMC_CmdStopTransfer+0x40>)
 80109b8:	210c      	movs	r1, #12
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f998 	bl	8010cf0 <SDMMC_GetCmdResp1>
 80109c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c2:	69fb      	ldr	r3, [r7, #28]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3720      	adds	r7, #32
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	05f5e100 	.word	0x05f5e100

080109d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08a      	sub	sp, #40	; 0x28
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80109e0:	2307      	movs	r3, #7
 80109e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109e4:	2340      	movs	r3, #64	; 0x40
 80109e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109e8:	2300      	movs	r3, #0
 80109ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109f2:	f107 0310 	add.w	r3, r7, #16
 80109f6:	4619      	mov	r1, r3
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f7ff fea7 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80109fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a02:	2107      	movs	r1, #7
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f000 f973 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010a0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3728      	adds	r7, #40	; 0x28
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b088      	sub	sp, #32
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010a26:	2300      	movs	r3, #0
 8010a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a34:	f107 0308 	add.w	r3, r7, #8
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7ff fe86 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f92d 	bl	8010ca0 <SDMMC_GetCmdError>
 8010a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a48:	69fb      	ldr	r3, [r7, #28]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3720      	adds	r7, #32
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b088      	sub	sp, #32
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010a60:	2308      	movs	r3, #8
 8010a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a64:	2340      	movs	r3, #64	; 0x40
 8010a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a72:	f107 0308 	add.w	r3, r7, #8
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff fe67 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 fb16 	bl	80110b0 <SDMMC_GetCmdResp7>
 8010a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a86:	69fb      	ldr	r3, [r7, #28]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3720      	adds	r7, #32
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b088      	sub	sp, #32
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010a9e:	2337      	movs	r3, #55	; 0x37
 8010aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aa2:	2340      	movs	r3, #64	; 0x40
 8010aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ab0:	f107 0308 	add.w	r3, r7, #8
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff fe48 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ac0:	2137      	movs	r1, #55	; 0x37
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f914 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aca:	69fb      	ldr	r3, [r7, #28]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3720      	adds	r7, #32
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b088      	sub	sp, #32
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010aea:	2329      	movs	r3, #41	; 0x29
 8010aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aee:	2340      	movs	r3, #64	; 0x40
 8010af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010af2:	2300      	movs	r3, #0
 8010af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010afa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010afc:	f107 0308 	add.w	r3, r7, #8
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff fe22 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fa23 	bl	8010f54 <SDMMC_GetCmdResp3>
 8010b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b10:	69fb      	ldr	r3, [r7, #28]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3720      	adds	r7, #32
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b088      	sub	sp, #32
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b28:	2306      	movs	r3, #6
 8010b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b2c:	2340      	movs	r3, #64	; 0x40
 8010b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b30:	2300      	movs	r3, #0
 8010b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b3a:	f107 0308 	add.w	r3, r7, #8
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff fe03 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b4a:	2106      	movs	r1, #6
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 f8cf 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b54:	69fb      	ldr	r3, [r7, #28]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3720      	adds	r7, #32
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b088      	sub	sp, #32
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b66:	2300      	movs	r3, #0
 8010b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b6a:	2333      	movs	r3, #51	; 0x33
 8010b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b6e:	2340      	movs	r3, #64	; 0x40
 8010b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b72:	2300      	movs	r3, #0
 8010b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b7c:	f107 0308 	add.w	r3, r7, #8
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7ff fde2 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b8c:	2133      	movs	r1, #51	; 0x33
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f8ae 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b96:	69fb      	ldr	r3, [r7, #28]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3720      	adds	r7, #32
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b088      	sub	sp, #32
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bac:	2302      	movs	r3, #2
 8010bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010bb0:	23c0      	movs	r3, #192	; 0xc0
 8010bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bbe:	f107 0308 	add.w	r3, r7, #8
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff fdc1 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f97c 	bl	8010ec8 <SDMMC_GetCmdResp2>
 8010bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd2:	69fb      	ldr	r3, [r7, #28]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b088      	sub	sp, #32
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010bea:	2309      	movs	r3, #9
 8010bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010bee:	23c0      	movs	r3, #192	; 0xc0
 8010bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bfc:	f107 0308 	add.w	r3, r7, #8
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7ff fda2 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f95d 	bl	8010ec8 <SDMMC_GetCmdResp2>
 8010c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c10:	69fb      	ldr	r3, [r7, #28]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3720      	adds	r7, #32
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b088      	sub	sp, #32
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c24:	2300      	movs	r3, #0
 8010c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c30:	2300      	movs	r3, #0
 8010c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c3a:	f107 0308 	add.w	r3, r7, #8
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff fd83 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	2103      	movs	r1, #3
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 f9bc 	bl	8010fc8 <SDMMC_GetCmdResp6>
 8010c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c52:	69fb      	ldr	r3, [r7, #28]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3720      	adds	r7, #32
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b088      	sub	sp, #32
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c6a:	230d      	movs	r3, #13
 8010c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c6e:	2340      	movs	r3, #64	; 0x40
 8010c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c72:	2300      	movs	r3, #0
 8010c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c7c:	f107 0308 	add.w	r3, r7, #8
 8010c80:	4619      	mov	r1, r3
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff fd62 	bl	801074c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c8c:	210d      	movs	r1, #13
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f82e 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c96:	69fb      	ldr	r3, [r7, #28]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010ca0:	b490      	push	{r4, r7}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ca8:	4b0f      	ldr	r3, [pc, #60]	; (8010ce8 <SDMMC_GetCmdError+0x48>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a0f      	ldr	r2, [pc, #60]	; (8010cec <SDMMC_GetCmdError+0x4c>)
 8010cae:	fba2 2303 	umull	r2, r3, r2, r3
 8010cb2:	0a5b      	lsrs	r3, r3, #9
 8010cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cb8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cbc:	4623      	mov	r3, r4
 8010cbe:	1e5c      	subs	r4, r3, #1
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cc8:	e009      	b.n	8010cde <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0f2      	beq.n	8010cbc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	22c5      	movs	r2, #197	; 0xc5
 8010cda:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010cdc:	2300      	movs	r3, #0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bc90      	pop	{r4, r7}
 8010ce6:	4770      	bx	lr
 8010ce8:	20000000 	.word	0x20000000
 8010cec:	10624dd3 	.word	0x10624dd3

08010cf0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cfe:	4b6f      	ldr	r3, [pc, #444]	; (8010ebc <SDMMC_GetCmdResp1+0x1cc>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a6f      	ldr	r2, [pc, #444]	; (8010ec0 <SDMMC_GetCmdResp1+0x1d0>)
 8010d04:	fba2 2303 	umull	r2, r3, r2, r3
 8010d08:	0a5b      	lsrs	r3, r3, #9
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d10:	4623      	mov	r3, r4
 8010d12:	1e5c      	subs	r4, r3, #1
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d102      	bne.n	8010d1e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d1c:	e0c9      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d22:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d0f0      	beq.n	8010d10 <SDMMC_GetCmdResp1+0x20>
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1eb      	bne.n	8010d10 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d3c:	f003 0304 	and.w	r3, r3, #4
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d004      	beq.n	8010d4e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2204      	movs	r2, #4
 8010d48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d4a:	2304      	movs	r3, #4
 8010d4c:	e0b1      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d52:	f003 0301 	and.w	r3, r3, #1
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d004      	beq.n	8010d64 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d60:	2301      	movs	r3, #1
 8010d62:	e0a6      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	22c5      	movs	r2, #197	; 0xc5
 8010d68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010d6a:	68f8      	ldr	r0, [r7, #12]
 8010d6c:	f7ff fd18 	bl	80107a0 <SDIO_GetCommandResponse>
 8010d70:	4603      	mov	r3, r0
 8010d72:	461a      	mov	r2, r3
 8010d74:	7afb      	ldrb	r3, [r7, #11]
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d001      	beq.n	8010d7e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	e099      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010d7e:	2100      	movs	r1, #0
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f7ff fd1a 	bl	80107ba <SDIO_GetResponse>
 8010d86:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d88:	693a      	ldr	r2, [r7, #16]
 8010d8a:	4b4e      	ldr	r3, [pc, #312]	; (8010ec4 <SDMMC_GetCmdResp1+0x1d4>)
 8010d8c:	4013      	ands	r3, r2
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d101      	bne.n	8010d96 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010d92:	2300      	movs	r3, #0
 8010d94:	e08d      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	da02      	bge.n	8010da2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010da0:	e087      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d001      	beq.n	8010db0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010dac:	2340      	movs	r3, #64	; 0x40
 8010dae:	e080      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010dba:	2380      	movs	r3, #128	; 0x80
 8010dbc:	e079      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d002      	beq.n	8010dce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dcc:	e071      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d002      	beq.n	8010dde <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ddc:	e069      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d002      	beq.n	8010dee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dec:	e061      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dfc:	e059      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e0c:	e051      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e1c:	e049      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e2c:	e041      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e3c:	e039      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e4c:	e031      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e5c:	e029      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e6c:	e021      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010e7c:	e019      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010e8c:	e011      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010e9c:	e009      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	f003 0308 	and.w	r3, r3, #8
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ea8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010eac:	e001      	b.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	371c      	adds	r7, #28
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd90      	pop	{r4, r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	20000000 	.word	0x20000000
 8010ec0:	10624dd3 	.word	0x10624dd3
 8010ec4:	fdffe008 	.word	0xfdffe008

08010ec8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010ec8:	b490      	push	{r4, r7}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ed0:	4b1e      	ldr	r3, [pc, #120]	; (8010f4c <SDMMC_GetCmdResp2+0x84>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a1e      	ldr	r2, [pc, #120]	; (8010f50 <SDMMC_GetCmdResp2+0x88>)
 8010ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eda:	0a5b      	lsrs	r3, r3, #9
 8010edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ee0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ee4:	4623      	mov	r3, r4
 8010ee6:	1e5c      	subs	r4, r3, #1
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d102      	bne.n	8010ef2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ef0:	e026      	b.n	8010f40 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d0f0      	beq.n	8010ee4 <SDMMC_GetCmdResp2+0x1c>
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1eb      	bne.n	8010ee4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f10:	f003 0304 	and.w	r3, r3, #4
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d004      	beq.n	8010f22 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2204      	movs	r2, #4
 8010f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f1e:	2304      	movs	r3, #4
 8010f20:	e00e      	b.n	8010f40 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f26:	f003 0301 	and.w	r3, r3, #1
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d004      	beq.n	8010f38 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f34:	2301      	movs	r3, #1
 8010f36:	e003      	b.n	8010f40 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	22c5      	movs	r2, #197	; 0xc5
 8010f3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f3e:	2300      	movs	r3, #0
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3710      	adds	r7, #16
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bc90      	pop	{r4, r7}
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop
 8010f4c:	20000000 	.word	0x20000000
 8010f50:	10624dd3 	.word	0x10624dd3

08010f54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010f54:	b490      	push	{r4, r7}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f5c:	4b18      	ldr	r3, [pc, #96]	; (8010fc0 <SDMMC_GetCmdResp3+0x6c>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4a18      	ldr	r2, [pc, #96]	; (8010fc4 <SDMMC_GetCmdResp3+0x70>)
 8010f62:	fba2 2303 	umull	r2, r3, r2, r3
 8010f66:	0a5b      	lsrs	r3, r3, #9
 8010f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f70:	4623      	mov	r3, r4
 8010f72:	1e5c      	subs	r4, r3, #1
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d102      	bne.n	8010f7e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f7c:	e01b      	b.n	8010fb6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d0f0      	beq.n	8010f70 <SDMMC_GetCmdResp3+0x1c>
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1eb      	bne.n	8010f70 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f9c:	f003 0304 	and.w	r3, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d004      	beq.n	8010fae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2204      	movs	r2, #4
 8010fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010faa:	2304      	movs	r3, #4
 8010fac:	e003      	b.n	8010fb6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	22c5      	movs	r2, #197	; 0xc5
 8010fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bc90      	pop	{r4, r7}
 8010fbe:	4770      	bx	lr
 8010fc0:	20000000 	.word	0x20000000
 8010fc4:	10624dd3 	.word	0x10624dd3

08010fc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010fc8:	b590      	push	{r4, r7, lr}
 8010fca:	b087      	sub	sp, #28
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	607a      	str	r2, [r7, #4]
 8010fd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fd6:	4b34      	ldr	r3, [pc, #208]	; (80110a8 <SDMMC_GetCmdResp6+0xe0>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a34      	ldr	r2, [pc, #208]	; (80110ac <SDMMC_GetCmdResp6+0xe4>)
 8010fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8010fe0:	0a5b      	lsrs	r3, r3, #9
 8010fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fe6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010fea:	4623      	mov	r3, r4
 8010fec:	1e5c      	subs	r4, r3, #1
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d102      	bne.n	8010ff8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ff2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ff6:	e052      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ffc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011004:	2b00      	cmp	r3, #0
 8011006:	d0f0      	beq.n	8010fea <SDMMC_GetCmdResp6+0x22>
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1eb      	bne.n	8010fea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011016:	f003 0304 	and.w	r3, r3, #4
 801101a:	2b00      	cmp	r3, #0
 801101c:	d004      	beq.n	8011028 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2204      	movs	r2, #4
 8011022:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011024:	2304      	movs	r3, #4
 8011026:	e03a      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801102c:	f003 0301 	and.w	r3, r3, #1
 8011030:	2b00      	cmp	r3, #0
 8011032:	d004      	beq.n	801103e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2201      	movs	r2, #1
 8011038:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801103a:	2301      	movs	r3, #1
 801103c:	e02f      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7ff fbae 	bl	80107a0 <SDIO_GetCommandResponse>
 8011044:	4603      	mov	r3, r0
 8011046:	461a      	mov	r2, r3
 8011048:	7afb      	ldrb	r3, [r7, #11]
 801104a:	4293      	cmp	r3, r2
 801104c:	d001      	beq.n	8011052 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801104e:	2301      	movs	r3, #1
 8011050:	e025      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	22c5      	movs	r2, #197	; 0xc5
 8011056:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011058:	2100      	movs	r1, #0
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7ff fbad 	bl	80107ba <SDIO_GetResponse>
 8011060:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011068:	2b00      	cmp	r3, #0
 801106a:	d106      	bne.n	801107a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	0c1b      	lsrs	r3, r3, #16
 8011070:	b29a      	uxth	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011076:	2300      	movs	r3, #0
 8011078:	e011      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011088:	e009      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d002      	beq.n	801109a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011098:	e001      	b.n	801109e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801109a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801109e:	4618      	mov	r0, r3
 80110a0:	371c      	adds	r7, #28
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd90      	pop	{r4, r7, pc}
 80110a6:	bf00      	nop
 80110a8:	20000000 	.word	0x20000000
 80110ac:	10624dd3 	.word	0x10624dd3

080110b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80110b0:	b490      	push	{r4, r7}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110b8:	4b21      	ldr	r3, [pc, #132]	; (8011140 <SDMMC_GetCmdResp7+0x90>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a21      	ldr	r2, [pc, #132]	; (8011144 <SDMMC_GetCmdResp7+0x94>)
 80110be:	fba2 2303 	umull	r2, r3, r2, r3
 80110c2:	0a5b      	lsrs	r3, r3, #9
 80110c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110cc:	4623      	mov	r3, r4
 80110ce:	1e5c      	subs	r4, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110d8:	e02c      	b.n	8011134 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0f0      	beq.n	80110cc <SDMMC_GetCmdResp7+0x1c>
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1eb      	bne.n	80110cc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f8:	f003 0304 	and.w	r3, r3, #4
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d004      	beq.n	801110a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2204      	movs	r2, #4
 8011104:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011106:	2304      	movs	r3, #4
 8011108:	e014      	b.n	8011134 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801110e:	f003 0301 	and.w	r3, r3, #1
 8011112:	2b00      	cmp	r3, #0
 8011114:	d004      	beq.n	8011120 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2201      	movs	r2, #1
 801111a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801111c:	2301      	movs	r3, #1
 801111e:	e009      	b.n	8011134 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011128:	2b00      	cmp	r3, #0
 801112a:	d002      	beq.n	8011132 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2240      	movs	r2, #64	; 0x40
 8011130:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011132:	2300      	movs	r3, #0
  
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bc90      	pop	{r4, r7}
 801113c:	4770      	bx	lr
 801113e:	bf00      	nop
 8011140:	20000000 	.word	0x20000000
 8011144:	10624dd3 	.word	0x10624dd3

08011148 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801114c:	4904      	ldr	r1, [pc, #16]	; (8011160 <MX_FATFS_Init+0x18>)
 801114e:	4805      	ldr	r0, [pc, #20]	; (8011164 <MX_FATFS_Init+0x1c>)
 8011150:	f003 fb9c 	bl	801488c <FATFS_LinkDriver>
 8011154:	4603      	mov	r3, r0
 8011156:	461a      	mov	r2, r3
 8011158:	4b03      	ldr	r3, [pc, #12]	; (8011168 <MX_FATFS_Init+0x20>)
 801115a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801115c:	bf00      	nop
 801115e:	bd80      	pop	{r7, pc}
 8011160:	20044c70 	.word	0x20044c70
 8011164:	0801a1e0 	.word	0x0801a1e0
 8011168:	20044c6c 	.word	0x20044c6c

0801116c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011172:	2300      	movs	r3, #0
 8011174:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011176:	f000 f896 	bl	80112a6 <BSP_SD_IsDetected>
 801117a:	4603      	mov	r3, r0
 801117c:	2b01      	cmp	r3, #1
 801117e:	d001      	beq.n	8011184 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011180:	2301      	movs	r3, #1
 8011182:	e012      	b.n	80111aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011184:	480b      	ldr	r0, [pc, #44]	; (80111b4 <BSP_SD_Init+0x48>)
 8011186:	f7fb ffa5 	bl	800d0d4 <HAL_SD_Init>
 801118a:	4603      	mov	r3, r0
 801118c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801118e:	79fb      	ldrb	r3, [r7, #7]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d109      	bne.n	80111a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011198:	4806      	ldr	r0, [pc, #24]	; (80111b4 <BSP_SD_Init+0x48>)
 801119a:	f7fc fd4f 	bl	800dc3c <HAL_SD_ConfigWideBusOperation>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111a4:	2301      	movs	r3, #1
 80111a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111a8:	79fb      	ldrb	r3, [r7, #7]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20044a68 	.word	0x20044a68

080111b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80111c4:	2300      	movs	r3, #0
 80111c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	68ba      	ldr	r2, [r7, #8]
 80111cc:	68f9      	ldr	r1, [r7, #12]
 80111ce:	4806      	ldr	r0, [pc, #24]	; (80111e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80111d0:	f7fc f810 	bl	800d1f4 <HAL_SD_ReadBlocks_DMA>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d001      	beq.n	80111de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80111de:	7dfb      	ldrb	r3, [r7, #23]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3718      	adds	r7, #24
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	20044a68 	.word	0x20044a68

080111ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80111f8:	2300      	movs	r3, #0
 80111fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68ba      	ldr	r2, [r7, #8]
 8011200:	68f9      	ldr	r1, [r7, #12]
 8011202:	4806      	ldr	r0, [pc, #24]	; (801121c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011204:	f7fc f8de 	bl	800d3c4 <HAL_SD_WriteBlocks_DMA>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801120e:	2301      	movs	r3, #1
 8011210:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011212:	7dfb      	ldrb	r3, [r7, #23]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	20044a68 	.word	0x20044a68

08011220 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011224:	4805      	ldr	r0, [pc, #20]	; (801123c <BSP_SD_GetCardState+0x1c>)
 8011226:	f7fc fd85 	bl	800dd34 <HAL_SD_GetCardState>
 801122a:	4603      	mov	r3, r0
 801122c:	2b04      	cmp	r3, #4
 801122e:	bf14      	ite	ne
 8011230:	2301      	movne	r3, #1
 8011232:	2300      	moveq	r3, #0
 8011234:	b2db      	uxtb	r3, r3
}
 8011236:	4618      	mov	r0, r3
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	20044a68 	.word	0x20044a68

08011240 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011248:	6879      	ldr	r1, [r7, #4]
 801124a:	4803      	ldr	r0, [pc, #12]	; (8011258 <BSP_SD_GetCardInfo+0x18>)
 801124c:	f7fc fcca 	bl	800dbe4 <HAL_SD_GetCardInfo>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	20044a68 	.word	0x20044a68

0801125c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011264:	f000 f818 	bl	8011298 <BSP_SD_AbortCallback>
}
 8011268:	bf00      	nop
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011278:	f000 f9a8 	bl	80115cc <BSP_SD_WriteCpltCallback>
}
 801127c:	bf00      	nop
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801128c:	f000 f9aa 	bl	80115e4 <BSP_SD_ReadCpltCallback>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011298:	b480      	push	{r7}
 801129a:	af00      	add	r7, sp, #0

}
 801129c:	bf00      	nop
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr

080112a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b082      	sub	sp, #8
 80112aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112ac:	2301      	movs	r3, #1
 80112ae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80112b0:	f000 f80c 	bl	80112cc <BSP_PlatformIsDetected>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d101      	bne.n	80112be <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80112ba:	2300      	movs	r3, #0
 80112bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80112be:	79fb      	ldrb	r3, [r7, #7]
 80112c0:	b2db      	uxtb	r3, r3
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
	...

080112cc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80112d2:	2301      	movs	r3, #1
 80112d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80112d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80112da:	4806      	ldr	r0, [pc, #24]	; (80112f4 <BSP_PlatformIsDetected+0x28>)
 80112dc:	f7fa f87e 	bl	800b3dc <HAL_GPIO_ReadPin>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80112e6:	2300      	movs	r3, #0
 80112e8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80112ea:	79fb      	ldrb	r3, [r7, #7]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	40020000 	.word	0x40020000

080112f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011300:	f7f8 fde2 	bl	8009ec8 <HAL_GetTick>
 8011304:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011306:	e006      	b.n	8011316 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011308:	f7ff ff8a 	bl	8011220 <BSP_SD_GetCardState>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011312:	2300      	movs	r3, #0
 8011314:	e009      	b.n	801132a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011316:	f7f8 fdd7 	bl	8009ec8 <HAL_GetTick>
 801131a:	4602      	mov	r2, r0
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	1ad3      	subs	r3, r2, r3
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	429a      	cmp	r2, r3
 8011324:	d8f0      	bhi.n	8011308 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011326:	f04f 33ff 	mov.w	r3, #4294967295
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
	...

08011334 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801133e:	4b0b      	ldr	r3, [pc, #44]	; (801136c <SD_CheckStatus+0x38>)
 8011340:	2201      	movs	r2, #1
 8011342:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011344:	f7ff ff6c 	bl	8011220 <BSP_SD_GetCardState>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d107      	bne.n	801135e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801134e:	4b07      	ldr	r3, [pc, #28]	; (801136c <SD_CheckStatus+0x38>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	b2db      	uxtb	r3, r3
 8011354:	f023 0301 	bic.w	r3, r3, #1
 8011358:	b2da      	uxtb	r2, r3
 801135a:	4b04      	ldr	r3, [pc, #16]	; (801136c <SD_CheckStatus+0x38>)
 801135c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801135e:	4b03      	ldr	r3, [pc, #12]	; (801136c <SD_CheckStatus+0x38>)
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	b2db      	uxtb	r3, r3
}
 8011364:	4618      	mov	r0, r3
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	20000009 	.word	0x20000009

08011370 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	4603      	mov	r3, r0
 8011378:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801137a:	f7ff fef7 	bl	801116c <BSP_SD_Init>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d107      	bne.n	8011394 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011384:	79fb      	ldrb	r3, [r7, #7]
 8011386:	4618      	mov	r0, r3
 8011388:	f7ff ffd4 	bl	8011334 <SD_CheckStatus>
 801138c:	4603      	mov	r3, r0
 801138e:	461a      	mov	r2, r3
 8011390:	4b04      	ldr	r3, [pc, #16]	; (80113a4 <SD_initialize+0x34>)
 8011392:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011394:	4b03      	ldr	r3, [pc, #12]	; (80113a4 <SD_initialize+0x34>)
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	b2db      	uxtb	r3, r3
}
 801139a:	4618      	mov	r0, r3
 801139c:	3708      	adds	r7, #8
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	20000009 	.word	0x20000009

080113a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80113b2:	79fb      	ldrb	r3, [r7, #7]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff ffbd 	bl	8011334 <SD_CheckStatus>
 80113ba:	4603      	mov	r3, r0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b086      	sub	sp, #24
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60b9      	str	r1, [r7, #8]
 80113cc:	607a      	str	r2, [r7, #4]
 80113ce:	603b      	str	r3, [r7, #0]
 80113d0:	4603      	mov	r3, r0
 80113d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113d4:	2301      	movs	r3, #1
 80113d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80113dc:	f7ff ff8c 	bl	80112f8 <SD_CheckStatusWithTimeout>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da01      	bge.n	80113ea <SD_read+0x26>
  {
    return res;
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
 80113e8:	e03b      	b.n	8011462 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80113ea:	683a      	ldr	r2, [r7, #0]
 80113ec:	6879      	ldr	r1, [r7, #4]
 80113ee:	68b8      	ldr	r0, [r7, #8]
 80113f0:	f7ff fee2 	bl	80111b8 <BSP_SD_ReadBlocks_DMA>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d132      	bne.n	8011460 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80113fa:	4b1c      	ldr	r3, [pc, #112]	; (801146c <SD_read+0xa8>)
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011400:	f7f8 fd62 	bl	8009ec8 <HAL_GetTick>
 8011404:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011406:	bf00      	nop
 8011408:	4b18      	ldr	r3, [pc, #96]	; (801146c <SD_read+0xa8>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d108      	bne.n	8011422 <SD_read+0x5e>
 8011410:	f7f8 fd5a 	bl	8009ec8 <HAL_GetTick>
 8011414:	4602      	mov	r2, r0
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	f247 522f 	movw	r2, #29999	; 0x752f
 801141e:	4293      	cmp	r3, r2
 8011420:	d9f2      	bls.n	8011408 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011422:	4b12      	ldr	r3, [pc, #72]	; (801146c <SD_read+0xa8>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d102      	bne.n	8011430 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801142a:	2301      	movs	r3, #1
 801142c:	75fb      	strb	r3, [r7, #23]
 801142e:	e017      	b.n	8011460 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011430:	4b0e      	ldr	r3, [pc, #56]	; (801146c <SD_read+0xa8>)
 8011432:	2200      	movs	r2, #0
 8011434:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011436:	f7f8 fd47 	bl	8009ec8 <HAL_GetTick>
 801143a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801143c:	e007      	b.n	801144e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801143e:	f7ff feef 	bl	8011220 <BSP_SD_GetCardState>
 8011442:	4603      	mov	r3, r0
 8011444:	2b00      	cmp	r3, #0
 8011446:	d102      	bne.n	801144e <SD_read+0x8a>
          {
            res = RES_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801144c:	e008      	b.n	8011460 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801144e:	f7f8 fd3b 	bl	8009ec8 <HAL_GetTick>
 8011452:	4602      	mov	r2, r0
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	1ad3      	subs	r3, r2, r3
 8011458:	f247 522f 	movw	r2, #29999	; 0x752f
 801145c:	4293      	cmp	r3, r2
 801145e:	d9ee      	bls.n	801143e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011460:	7dfb      	ldrb	r3, [r7, #23]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3718      	adds	r7, #24
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	20042304 	.word	0x20042304

08011470 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	607a      	str	r2, [r7, #4]
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	4603      	mov	r3, r0
 801147e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011480:	2301      	movs	r3, #1
 8011482:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011484:	4b24      	ldr	r3, [pc, #144]	; (8011518 <SD_write+0xa8>)
 8011486:	2200      	movs	r2, #0
 8011488:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801148a:	f247 5030 	movw	r0, #30000	; 0x7530
 801148e:	f7ff ff33 	bl	80112f8 <SD_CheckStatusWithTimeout>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	da01      	bge.n	801149c <SD_write+0x2c>
  {
    return res;
 8011498:	7dfb      	ldrb	r3, [r7, #23]
 801149a:	e038      	b.n	801150e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801149c:	683a      	ldr	r2, [r7, #0]
 801149e:	6879      	ldr	r1, [r7, #4]
 80114a0:	68b8      	ldr	r0, [r7, #8]
 80114a2:	f7ff fea3 	bl	80111ec <BSP_SD_WriteBlocks_DMA>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d12f      	bne.n	801150c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80114ac:	f7f8 fd0c 	bl	8009ec8 <HAL_GetTick>
 80114b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114b2:	bf00      	nop
 80114b4:	4b18      	ldr	r3, [pc, #96]	; (8011518 <SD_write+0xa8>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d108      	bne.n	80114ce <SD_write+0x5e>
 80114bc:	f7f8 fd04 	bl	8009ec8 <HAL_GetTick>
 80114c0:	4602      	mov	r2, r0
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d9f2      	bls.n	80114b4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80114ce:	4b12      	ldr	r3, [pc, #72]	; (8011518 <SD_write+0xa8>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	75fb      	strb	r3, [r7, #23]
 80114da:	e017      	b.n	801150c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80114dc:	4b0e      	ldr	r3, [pc, #56]	; (8011518 <SD_write+0xa8>)
 80114de:	2200      	movs	r2, #0
 80114e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80114e2:	f7f8 fcf1 	bl	8009ec8 <HAL_GetTick>
 80114e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114e8:	e007      	b.n	80114fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80114ea:	f7ff fe99 	bl	8011220 <BSP_SD_GetCardState>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <SD_write+0x8a>
          {
            res = RES_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	75fb      	strb	r3, [r7, #23]
            break;
 80114f8:	e008      	b.n	801150c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114fa:	f7f8 fce5 	bl	8009ec8 <HAL_GetTick>
 80114fe:	4602      	mov	r2, r0
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	f247 522f 	movw	r2, #29999	; 0x752f
 8011508:	4293      	cmp	r3, r2
 801150a:	d9ee      	bls.n	80114ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801150c:	7dfb      	ldrb	r3, [r7, #23]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	20042300 	.word	0x20042300

0801151c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b08c      	sub	sp, #48	; 0x30
 8011520:	af00      	add	r7, sp, #0
 8011522:	4603      	mov	r3, r0
 8011524:	603a      	str	r2, [r7, #0]
 8011526:	71fb      	strb	r3, [r7, #7]
 8011528:	460b      	mov	r3, r1
 801152a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801152c:	2301      	movs	r3, #1
 801152e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011532:	4b25      	ldr	r3, [pc, #148]	; (80115c8 <SD_ioctl+0xac>)
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	b2db      	uxtb	r3, r3
 8011538:	f003 0301 	and.w	r3, r3, #1
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <SD_ioctl+0x28>
 8011540:	2303      	movs	r3, #3
 8011542:	e03c      	b.n	80115be <SD_ioctl+0xa2>

  switch (cmd)
 8011544:	79bb      	ldrb	r3, [r7, #6]
 8011546:	2b03      	cmp	r3, #3
 8011548:	d834      	bhi.n	80115b4 <SD_ioctl+0x98>
 801154a:	a201      	add	r2, pc, #4	; (adr r2, 8011550 <SD_ioctl+0x34>)
 801154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011550:	08011561 	.word	0x08011561
 8011554:	08011569 	.word	0x08011569
 8011558:	08011581 	.word	0x08011581
 801155c:	0801159b 	.word	0x0801159b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011566:	e028      	b.n	80115ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011568:	f107 030c 	add.w	r3, r7, #12
 801156c:	4618      	mov	r0, r3
 801156e:	f7ff fe67 	bl	8011240 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801157e:	e01c      	b.n	80115ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011580:	f107 030c 	add.w	r3, r7, #12
 8011584:	4618      	mov	r0, r3
 8011586:	f7ff fe5b 	bl	8011240 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158c:	b29a      	uxth	r2, r3
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011592:	2300      	movs	r3, #0
 8011594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011598:	e00f      	b.n	80115ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	4618      	mov	r0, r3
 80115a0:	f7ff fe4e 	bl	8011240 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	0a5a      	lsrs	r2, r3, #9
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115b2:	e002      	b.n	80115ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80115b4:	2304      	movs	r3, #4
 80115b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80115ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3730      	adds	r7, #48	; 0x30
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	20000009 	.word	0x20000009

080115cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80115cc:	b480      	push	{r7}
 80115ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80115d0:	4b03      	ldr	r3, [pc, #12]	; (80115e0 <BSP_SD_WriteCpltCallback+0x14>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	601a      	str	r2, [r3, #0]
}
 80115d6:	bf00      	nop
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr
 80115e0:	20042300 	.word	0x20042300

080115e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80115e4:	b480      	push	{r7}
 80115e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80115e8:	4b03      	ldr	r3, [pc, #12]	; (80115f8 <BSP_SD_ReadCpltCallback+0x14>)
 80115ea:	2201      	movs	r2, #1
 80115ec:	601a      	str	r2, [r3, #0]
}
 80115ee:	bf00      	nop
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr
 80115f8:	20042304 	.word	0x20042304

080115fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	4603      	mov	r3, r0
 8011604:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011606:	79fb      	ldrb	r3, [r7, #7]
 8011608:	4a08      	ldr	r2, [pc, #32]	; (801162c <disk_status+0x30>)
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	4413      	add	r3, r2
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	79fa      	ldrb	r2, [r7, #7]
 8011614:	4905      	ldr	r1, [pc, #20]	; (801162c <disk_status+0x30>)
 8011616:	440a      	add	r2, r1
 8011618:	7a12      	ldrb	r2, [r2, #8]
 801161a:	4610      	mov	r0, r2
 801161c:	4798      	blx	r3
 801161e:	4603      	mov	r3, r0
 8011620:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011622:	7bfb      	ldrb	r3, [r7, #15]
}
 8011624:	4618      	mov	r0, r3
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	20042330 	.word	0x20042330

08011630 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801163e:	79fb      	ldrb	r3, [r7, #7]
 8011640:	4a0d      	ldr	r2, [pc, #52]	; (8011678 <disk_initialize+0x48>)
 8011642:	5cd3      	ldrb	r3, [r2, r3]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d111      	bne.n	801166c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011648:	79fb      	ldrb	r3, [r7, #7]
 801164a:	4a0b      	ldr	r2, [pc, #44]	; (8011678 <disk_initialize+0x48>)
 801164c:	2101      	movs	r1, #1
 801164e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011650:	79fb      	ldrb	r3, [r7, #7]
 8011652:	4a09      	ldr	r2, [pc, #36]	; (8011678 <disk_initialize+0x48>)
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	79fa      	ldrb	r2, [r7, #7]
 801165e:	4906      	ldr	r1, [pc, #24]	; (8011678 <disk_initialize+0x48>)
 8011660:	440a      	add	r2, r1
 8011662:	7a12      	ldrb	r2, [r2, #8]
 8011664:	4610      	mov	r0, r2
 8011666:	4798      	blx	r3
 8011668:	4603      	mov	r3, r0
 801166a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801166c:	7bfb      	ldrb	r3, [r7, #15]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20042330 	.word	0x20042330

0801167c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801167c:	b590      	push	{r4, r7, lr}
 801167e:	b087      	sub	sp, #28
 8011680:	af00      	add	r7, sp, #0
 8011682:	60b9      	str	r1, [r7, #8]
 8011684:	607a      	str	r2, [r7, #4]
 8011686:	603b      	str	r3, [r7, #0]
 8011688:	4603      	mov	r3, r0
 801168a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801168c:	7bfb      	ldrb	r3, [r7, #15]
 801168e:	4a0a      	ldr	r2, [pc, #40]	; (80116b8 <disk_read+0x3c>)
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	4413      	add	r3, r2
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	689c      	ldr	r4, [r3, #8]
 8011698:	7bfb      	ldrb	r3, [r7, #15]
 801169a:	4a07      	ldr	r2, [pc, #28]	; (80116b8 <disk_read+0x3c>)
 801169c:	4413      	add	r3, r2
 801169e:	7a18      	ldrb	r0, [r3, #8]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	68b9      	ldr	r1, [r7, #8]
 80116a6:	47a0      	blx	r4
 80116a8:	4603      	mov	r3, r0
 80116aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80116ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	371c      	adds	r7, #28
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd90      	pop	{r4, r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20042330 	.word	0x20042330

080116bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80116bc:	b590      	push	{r4, r7, lr}
 80116be:	b087      	sub	sp, #28
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60b9      	str	r1, [r7, #8]
 80116c4:	607a      	str	r2, [r7, #4]
 80116c6:	603b      	str	r3, [r7, #0]
 80116c8:	4603      	mov	r3, r0
 80116ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80116cc:	7bfb      	ldrb	r3, [r7, #15]
 80116ce:	4a0a      	ldr	r2, [pc, #40]	; (80116f8 <disk_write+0x3c>)
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4413      	add	r3, r2
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	68dc      	ldr	r4, [r3, #12]
 80116d8:	7bfb      	ldrb	r3, [r7, #15]
 80116da:	4a07      	ldr	r2, [pc, #28]	; (80116f8 <disk_write+0x3c>)
 80116dc:	4413      	add	r3, r2
 80116de:	7a18      	ldrb	r0, [r3, #8]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	68b9      	ldr	r1, [r7, #8]
 80116e6:	47a0      	blx	r4
 80116e8:	4603      	mov	r3, r0
 80116ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80116ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	371c      	adds	r7, #28
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd90      	pop	{r4, r7, pc}
 80116f6:	bf00      	nop
 80116f8:	20042330 	.word	0x20042330

080116fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	4603      	mov	r3, r0
 8011704:	603a      	str	r2, [r7, #0]
 8011706:	71fb      	strb	r3, [r7, #7]
 8011708:	460b      	mov	r3, r1
 801170a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801170c:	79fb      	ldrb	r3, [r7, #7]
 801170e:	4a09      	ldr	r2, [pc, #36]	; (8011734 <disk_ioctl+0x38>)
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	691b      	ldr	r3, [r3, #16]
 8011718:	79fa      	ldrb	r2, [r7, #7]
 801171a:	4906      	ldr	r1, [pc, #24]	; (8011734 <disk_ioctl+0x38>)
 801171c:	440a      	add	r2, r1
 801171e:	7a10      	ldrb	r0, [r2, #8]
 8011720:	79b9      	ldrb	r1, [r7, #6]
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	4798      	blx	r3
 8011726:	4603      	mov	r3, r0
 8011728:	73fb      	strb	r3, [r7, #15]
  return res;
 801172a:	7bfb      	ldrb	r3, [r7, #15]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	20042330 	.word	0x20042330

08011738 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	3301      	adds	r3, #1
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011748:	89fb      	ldrh	r3, [r7, #14]
 801174a:	021b      	lsls	r3, r3, #8
 801174c:	b21a      	sxth	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	b21b      	sxth	r3, r3
 8011754:	4313      	orrs	r3, r2
 8011756:	b21b      	sxth	r3, r3
 8011758:	81fb      	strh	r3, [r7, #14]
	return rv;
 801175a:	89fb      	ldrh	r3, [r7, #14]
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	3303      	adds	r3, #3
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	021b      	lsls	r3, r3, #8
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	3202      	adds	r2, #2
 8011780:	7812      	ldrb	r2, [r2, #0]
 8011782:	4313      	orrs	r3, r2
 8011784:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	021b      	lsls	r3, r3, #8
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	3201      	adds	r2, #1
 801178e:	7812      	ldrb	r2, [r2, #0]
 8011790:	4313      	orrs	r3, r2
 8011792:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	021b      	lsls	r3, r3, #8
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	7812      	ldrb	r2, [r2, #0]
 801179c:	4313      	orrs	r3, r2
 801179e:	60fb      	str	r3, [r7, #12]
	return rv;
 80117a0:	68fb      	ldr	r3, [r7, #12]
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3714      	adds	r7, #20
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr

080117ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80117ae:	b480      	push	{r7}
 80117b0:	b083      	sub	sp, #12
 80117b2:	af00      	add	r7, sp, #0
 80117b4:	6078      	str	r0, [r7, #4]
 80117b6:	460b      	mov	r3, r1
 80117b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	1c5a      	adds	r2, r3, #1
 80117be:	607a      	str	r2, [r7, #4]
 80117c0:	887a      	ldrh	r2, [r7, #2]
 80117c2:	b2d2      	uxtb	r2, r2
 80117c4:	701a      	strb	r2, [r3, #0]
 80117c6:	887b      	ldrh	r3, [r7, #2]
 80117c8:	0a1b      	lsrs	r3, r3, #8
 80117ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	1c5a      	adds	r2, r3, #1
 80117d0:	607a      	str	r2, [r7, #4]
 80117d2:	887a      	ldrh	r2, [r7, #2]
 80117d4:	b2d2      	uxtb	r2, r2
 80117d6:	701a      	strb	r2, [r3, #0]
}
 80117d8:	bf00      	nop
 80117da:	370c      	adds	r7, #12
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	1c5a      	adds	r2, r3, #1
 80117f2:	607a      	str	r2, [r7, #4]
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	b2d2      	uxtb	r2, r2
 80117f8:	701a      	strb	r2, [r3, #0]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	0a1b      	lsrs	r3, r3, #8
 80117fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	1c5a      	adds	r2, r3, #1
 8011804:	607a      	str	r2, [r7, #4]
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	b2d2      	uxtb	r2, r2
 801180a:	701a      	strb	r2, [r3, #0]
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	0a1b      	lsrs	r3, r3, #8
 8011810:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	1c5a      	adds	r2, r3, #1
 8011816:	607a      	str	r2, [r7, #4]
 8011818:	683a      	ldr	r2, [r7, #0]
 801181a:	b2d2      	uxtb	r2, r2
 801181c:	701a      	strb	r2, [r3, #0]
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	0a1b      	lsrs	r3, r3, #8
 8011822:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	1c5a      	adds	r2, r3, #1
 8011828:	607a      	str	r2, [r7, #4]
 801182a:	683a      	ldr	r2, [r7, #0]
 801182c:	b2d2      	uxtb	r2, r2
 801182e:	701a      	strb	r2, [r3, #0]
}
 8011830:	bf00      	nop
 8011832:	370c      	adds	r7, #12
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801183c:	b480      	push	{r7}
 801183e:	b087      	sub	sp, #28
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d00d      	beq.n	8011872 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011856:	693a      	ldr	r2, [r7, #16]
 8011858:	1c53      	adds	r3, r2, #1
 801185a:	613b      	str	r3, [r7, #16]
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	1c59      	adds	r1, r3, #1
 8011860:	6179      	str	r1, [r7, #20]
 8011862:	7812      	ldrb	r2, [r2, #0]
 8011864:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	3b01      	subs	r3, #1
 801186a:	607b      	str	r3, [r7, #4]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1f1      	bne.n	8011856 <mem_cpy+0x1a>
	}
}
 8011872:	bf00      	nop
 8011874:	371c      	adds	r7, #28
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801187e:	b480      	push	{r7}
 8011880:	b087      	sub	sp, #28
 8011882:	af00      	add	r7, sp, #0
 8011884:	60f8      	str	r0, [r7, #12]
 8011886:	60b9      	str	r1, [r7, #8]
 8011888:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	1c5a      	adds	r2, r3, #1
 8011892:	617a      	str	r2, [r7, #20]
 8011894:	68ba      	ldr	r2, [r7, #8]
 8011896:	b2d2      	uxtb	r2, r2
 8011898:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	3b01      	subs	r3, #1
 801189e:	607b      	str	r3, [r7, #4]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1f3      	bne.n	801188e <mem_set+0x10>
}
 80118a6:	bf00      	nop
 80118a8:	371c      	adds	r7, #28
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr

080118b2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80118b2:	b480      	push	{r7}
 80118b4:	b089      	sub	sp, #36	; 0x24
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	60f8      	str	r0, [r7, #12]
 80118ba:	60b9      	str	r1, [r7, #8]
 80118bc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	61fb      	str	r3, [r7, #28]
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	61fa      	str	r2, [r7, #28]
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	4619      	mov	r1, r3
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	61ba      	str	r2, [r7, #24]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	1acb      	subs	r3, r1, r3
 80118de:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	3b01      	subs	r3, #1
 80118e4:	607b      	str	r3, [r7, #4]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <mem_cmp+0x40>
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d0eb      	beq.n	80118ca <mem_cmp+0x18>

	return r;
 80118f2:	697b      	ldr	r3, [r7, #20]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3724      	adds	r7, #36	; 0x24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr

08011900 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801190a:	e002      	b.n	8011912 <chk_chr+0x12>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3301      	adds	r3, #1
 8011910:	607b      	str	r3, [r7, #4]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d005      	beq.n	8011926 <chk_chr+0x26>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	461a      	mov	r2, r3
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	4293      	cmp	r3, r2
 8011924:	d1f2      	bne.n	801190c <chk_chr+0xc>
	return *str;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	781b      	ldrb	r3, [r3, #0]
}
 801192a:	4618      	mov	r0, r3
 801192c:	370c      	adds	r7, #12
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr
	...

08011938 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011938:	b480      	push	{r7}
 801193a:	b085      	sub	sp, #20
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011942:	2300      	movs	r3, #0
 8011944:	60bb      	str	r3, [r7, #8]
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	60fb      	str	r3, [r7, #12]
 801194a:	e029      	b.n	80119a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801194c:	4a27      	ldr	r2, [pc, #156]	; (80119ec <chk_lock+0xb4>)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	011b      	lsls	r3, r3, #4
 8011952:	4413      	add	r3, r2
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d01d      	beq.n	8011996 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801195a:	4a24      	ldr	r2, [pc, #144]	; (80119ec <chk_lock+0xb4>)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	011b      	lsls	r3, r3, #4
 8011960:	4413      	add	r3, r2
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	429a      	cmp	r2, r3
 801196a:	d116      	bne.n	801199a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801196c:	4a1f      	ldr	r2, [pc, #124]	; (80119ec <chk_lock+0xb4>)
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	011b      	lsls	r3, r3, #4
 8011972:	4413      	add	r3, r2
 8011974:	3304      	adds	r3, #4
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801197c:	429a      	cmp	r2, r3
 801197e:	d10c      	bne.n	801199a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011980:	4a1a      	ldr	r2, [pc, #104]	; (80119ec <chk_lock+0xb4>)
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	011b      	lsls	r3, r3, #4
 8011986:	4413      	add	r3, r2
 8011988:	3308      	adds	r3, #8
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011990:	429a      	cmp	r2, r3
 8011992:	d102      	bne.n	801199a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011994:	e007      	b.n	80119a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011996:	2301      	movs	r3, #1
 8011998:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	3301      	adds	r3, #1
 801199e:	60fb      	str	r3, [r7, #12]
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d9d2      	bls.n	801194c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d109      	bne.n	80119c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d102      	bne.n	80119b8 <chk_lock+0x80>
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d101      	bne.n	80119bc <chk_lock+0x84>
 80119b8:	2300      	movs	r3, #0
 80119ba:	e010      	b.n	80119de <chk_lock+0xa6>
 80119bc:	2312      	movs	r3, #18
 80119be:	e00e      	b.n	80119de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d108      	bne.n	80119d8 <chk_lock+0xa0>
 80119c6:	4a09      	ldr	r2, [pc, #36]	; (80119ec <chk_lock+0xb4>)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	011b      	lsls	r3, r3, #4
 80119cc:	4413      	add	r3, r2
 80119ce:	330c      	adds	r3, #12
 80119d0:	881b      	ldrh	r3, [r3, #0]
 80119d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119d6:	d101      	bne.n	80119dc <chk_lock+0xa4>
 80119d8:	2310      	movs	r3, #16
 80119da:	e000      	b.n	80119de <chk_lock+0xa6>
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3714      	adds	r7, #20
 80119e2:	46bd      	mov	sp, r7
 80119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	20042310 	.word	0x20042310

080119f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80119f0:	b480      	push	{r7}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80119f6:	2300      	movs	r3, #0
 80119f8:	607b      	str	r3, [r7, #4]
 80119fa:	e002      	b.n	8011a02 <enq_lock+0x12>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	3301      	adds	r3, #1
 8011a00:	607b      	str	r3, [r7, #4]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	d806      	bhi.n	8011a16 <enq_lock+0x26>
 8011a08:	4a09      	ldr	r2, [pc, #36]	; (8011a30 <enq_lock+0x40>)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	011b      	lsls	r3, r3, #4
 8011a0e:	4413      	add	r3, r2
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d1f2      	bne.n	80119fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2b02      	cmp	r3, #2
 8011a1a:	bf14      	ite	ne
 8011a1c:	2301      	movne	r3, #1
 8011a1e:	2300      	moveq	r3, #0
 8011a20:	b2db      	uxtb	r3, r3
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	20042310 	.word	0x20042310

08011a34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	e01f      	b.n	8011a84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a44:	4a41      	ldr	r2, [pc, #260]	; (8011b4c <inc_lock+0x118>)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	011b      	lsls	r3, r3, #4
 8011a4a:	4413      	add	r3, r2
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d113      	bne.n	8011a7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011a56:	4a3d      	ldr	r2, [pc, #244]	; (8011b4c <inc_lock+0x118>)
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	011b      	lsls	r3, r3, #4
 8011a5c:	4413      	add	r3, r2
 8011a5e:	3304      	adds	r3, #4
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d109      	bne.n	8011a7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011a6a:	4a38      	ldr	r2, [pc, #224]	; (8011b4c <inc_lock+0x118>)
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	011b      	lsls	r3, r3, #4
 8011a70:	4413      	add	r3, r2
 8011a72:	3308      	adds	r3, #8
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d006      	beq.n	8011a8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	3301      	adds	r3, #1
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d9dc      	bls.n	8011a44 <inc_lock+0x10>
 8011a8a:	e000      	b.n	8011a8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011a8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2b02      	cmp	r3, #2
 8011a92:	d132      	bne.n	8011afa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a94:	2300      	movs	r3, #0
 8011a96:	60fb      	str	r3, [r7, #12]
 8011a98:	e002      	b.n	8011aa0 <inc_lock+0x6c>
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d806      	bhi.n	8011ab4 <inc_lock+0x80>
 8011aa6:	4a29      	ldr	r2, [pc, #164]	; (8011b4c <inc_lock+0x118>)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	011b      	lsls	r3, r3, #4
 8011aac:	4413      	add	r3, r2
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d1f2      	bne.n	8011a9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2b02      	cmp	r3, #2
 8011ab8:	d101      	bne.n	8011abe <inc_lock+0x8a>
 8011aba:	2300      	movs	r3, #0
 8011abc:	e040      	b.n	8011b40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	4922      	ldr	r1, [pc, #136]	; (8011b4c <inc_lock+0x118>)
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	011b      	lsls	r3, r3, #4
 8011ac8:	440b      	add	r3, r1
 8011aca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	689a      	ldr	r2, [r3, #8]
 8011ad0:	491e      	ldr	r1, [pc, #120]	; (8011b4c <inc_lock+0x118>)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	011b      	lsls	r3, r3, #4
 8011ad6:	440b      	add	r3, r1
 8011ad8:	3304      	adds	r3, #4
 8011ada:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	695a      	ldr	r2, [r3, #20]
 8011ae0:	491a      	ldr	r1, [pc, #104]	; (8011b4c <inc_lock+0x118>)
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	011b      	lsls	r3, r3, #4
 8011ae6:	440b      	add	r3, r1
 8011ae8:	3308      	adds	r3, #8
 8011aea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011aec:	4a17      	ldr	r2, [pc, #92]	; (8011b4c <inc_lock+0x118>)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	011b      	lsls	r3, r3, #4
 8011af2:	4413      	add	r3, r2
 8011af4:	330c      	adds	r3, #12
 8011af6:	2200      	movs	r2, #0
 8011af8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d009      	beq.n	8011b14 <inc_lock+0xe0>
 8011b00:	4a12      	ldr	r2, [pc, #72]	; (8011b4c <inc_lock+0x118>)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	011b      	lsls	r3, r3, #4
 8011b06:	4413      	add	r3, r2
 8011b08:	330c      	adds	r3, #12
 8011b0a:	881b      	ldrh	r3, [r3, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d001      	beq.n	8011b14 <inc_lock+0xe0>
 8011b10:	2300      	movs	r3, #0
 8011b12:	e015      	b.n	8011b40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d108      	bne.n	8011b2c <inc_lock+0xf8>
 8011b1a:	4a0c      	ldr	r2, [pc, #48]	; (8011b4c <inc_lock+0x118>)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	011b      	lsls	r3, r3, #4
 8011b20:	4413      	add	r3, r2
 8011b22:	330c      	adds	r3, #12
 8011b24:	881b      	ldrh	r3, [r3, #0]
 8011b26:	3301      	adds	r3, #1
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	e001      	b.n	8011b30 <inc_lock+0xfc>
 8011b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b30:	4906      	ldr	r1, [pc, #24]	; (8011b4c <inc_lock+0x118>)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	011b      	lsls	r3, r3, #4
 8011b36:	440b      	add	r3, r1
 8011b38:	330c      	adds	r3, #12
 8011b3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	3301      	adds	r3, #1
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3714      	adds	r7, #20
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr
 8011b4c:	20042310 	.word	0x20042310

08011b50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b085      	sub	sp, #20
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3b01      	subs	r3, #1
 8011b5c:	607b      	str	r3, [r7, #4]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d825      	bhi.n	8011bb0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011b64:	4a17      	ldr	r2, [pc, #92]	; (8011bc4 <dec_lock+0x74>)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	011b      	lsls	r3, r3, #4
 8011b6a:	4413      	add	r3, r2
 8011b6c:	330c      	adds	r3, #12
 8011b6e:	881b      	ldrh	r3, [r3, #0]
 8011b70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011b72:	89fb      	ldrh	r3, [r7, #14]
 8011b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b78:	d101      	bne.n	8011b7e <dec_lock+0x2e>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011b7e:	89fb      	ldrh	r3, [r7, #14]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d002      	beq.n	8011b8a <dec_lock+0x3a>
 8011b84:	89fb      	ldrh	r3, [r7, #14]
 8011b86:	3b01      	subs	r3, #1
 8011b88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011b8a:	4a0e      	ldr	r2, [pc, #56]	; (8011bc4 <dec_lock+0x74>)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	011b      	lsls	r3, r3, #4
 8011b90:	4413      	add	r3, r2
 8011b92:	330c      	adds	r3, #12
 8011b94:	89fa      	ldrh	r2, [r7, #14]
 8011b96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011b98:	89fb      	ldrh	r3, [r7, #14]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d105      	bne.n	8011baa <dec_lock+0x5a>
 8011b9e:	4a09      	ldr	r2, [pc, #36]	; (8011bc4 <dec_lock+0x74>)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	011b      	lsls	r3, r3, #4
 8011ba4:	4413      	add	r3, r2
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011baa:	2300      	movs	r3, #0
 8011bac:	737b      	strb	r3, [r7, #13]
 8011bae:	e001      	b.n	8011bb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011bb4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop
 8011bc4:	20042310 	.word	0x20042310

08011bc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	60fb      	str	r3, [r7, #12]
 8011bd4:	e010      	b.n	8011bf8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011bd6:	4a0d      	ldr	r2, [pc, #52]	; (8011c0c <clear_lock+0x44>)
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	011b      	lsls	r3, r3, #4
 8011bdc:	4413      	add	r3, r2
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d105      	bne.n	8011bf2 <clear_lock+0x2a>
 8011be6:	4a09      	ldr	r2, [pc, #36]	; (8011c0c <clear_lock+0x44>)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	011b      	lsls	r3, r3, #4
 8011bec:	4413      	add	r3, r2
 8011bee:	2200      	movs	r2, #0
 8011bf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d9eb      	bls.n	8011bd6 <clear_lock+0xe>
	}
}
 8011bfe:	bf00      	nop
 8011c00:	3714      	adds	r7, #20
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop
 8011c0c:	20042310 	.word	0x20042310

08011c10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	78db      	ldrb	r3, [r3, #3]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d034      	beq.n	8011c8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	7858      	ldrb	r0, [r3, #1]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c34:	2301      	movs	r3, #1
 8011c36:	697a      	ldr	r2, [r7, #20]
 8011c38:	f7ff fd40 	bl	80116bc <disk_write>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d002      	beq.n	8011c48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c42:	2301      	movs	r3, #1
 8011c44:	73fb      	strb	r3, [r7, #15]
 8011c46:	e022      	b.n	8011c8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c52:	697a      	ldr	r2, [r7, #20]
 8011c54:	1ad2      	subs	r2, r2, r3
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a1b      	ldr	r3, [r3, #32]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d217      	bcs.n	8011c8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	789b      	ldrb	r3, [r3, #2]
 8011c62:	613b      	str	r3, [r7, #16]
 8011c64:	e010      	b.n	8011c88 <sync_window+0x78>
					wsect += fs->fsize;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a1b      	ldr	r3, [r3, #32]
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	7858      	ldrb	r0, [r3, #1]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	697a      	ldr	r2, [r7, #20]
 8011c7e:	f7ff fd1d 	bl	80116bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	613b      	str	r3, [r7, #16]
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d8eb      	bhi.n	8011c66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011caa:	683a      	ldr	r2, [r7, #0]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d01b      	beq.n	8011ce8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7ff ffad 	bl	8011c10 <sync_window>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011cba:	7bfb      	ldrb	r3, [r7, #15]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d113      	bne.n	8011ce8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7858      	ldrb	r0, [r3, #1]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cca:	2301      	movs	r3, #1
 8011ccc:	683a      	ldr	r2, [r7, #0]
 8011cce:	f7ff fcd5 	bl	801167c <disk_read>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d004      	beq.n	8011ce2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	683a      	ldr	r2, [r7, #0]
 8011ce6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
	...

08011cf4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7ff ff87 	bl	8011c10 <sync_window>
 8011d02:	4603      	mov	r3, r0
 8011d04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d06:	7bfb      	ldrb	r3, [r7, #15]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d159      	bne.n	8011dc0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	2b03      	cmp	r3, #3
 8011d12:	d149      	bne.n	8011da8 <sync_fs+0xb4>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	791b      	ldrb	r3, [r3, #4]
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d145      	bne.n	8011da8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	899b      	ldrh	r3, [r3, #12]
 8011d26:	461a      	mov	r2, r3
 8011d28:	2100      	movs	r1, #0
 8011d2a:	f7ff fda8 	bl	801187e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	3338      	adds	r3, #56	; 0x38
 8011d32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d36:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff fd37 	bl	80117ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	3338      	adds	r3, #56	; 0x38
 8011d44:	4921      	ldr	r1, [pc, #132]	; (8011dcc <sync_fs+0xd8>)
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7ff fd4c 	bl	80117e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3338      	adds	r3, #56	; 0x38
 8011d50:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011d54:	491e      	ldr	r1, [pc, #120]	; (8011dd0 <sync_fs+0xdc>)
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7ff fd44 	bl	80117e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	3338      	adds	r3, #56	; 0x38
 8011d60:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	695b      	ldr	r3, [r3, #20]
 8011d68:	4619      	mov	r1, r3
 8011d6a:	4610      	mov	r0, r2
 8011d6c:	f7ff fd3a 	bl	80117e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	3338      	adds	r3, #56	; 0x38
 8011d74:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4610      	mov	r0, r2
 8011d80:	f7ff fd30 	bl	80117e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	7858      	ldrb	r0, [r3, #1]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	f7ff fc8d 	bl	80116bc <disk_write>
			fs->fsi_flag = 0;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2200      	movs	r2, #0
 8011da6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	785b      	ldrb	r3, [r3, #1]
 8011dac:	2200      	movs	r2, #0
 8011dae:	2100      	movs	r1, #0
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7ff fca3 	bl	80116fc <disk_ioctl>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d001      	beq.n	8011dc0 <sync_fs+0xcc>
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	41615252 	.word	0x41615252
 8011dd0:	61417272 	.word	0x61417272

08011dd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b083      	sub	sp, #12
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	3b02      	subs	r3, #2
 8011de2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	69db      	ldr	r3, [r3, #28]
 8011de8:	3b02      	subs	r3, #2
 8011dea:	683a      	ldr	r2, [r7, #0]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d301      	bcc.n	8011df4 <clust2sect+0x20>
 8011df0:	2300      	movs	r3, #0
 8011df2:	e008      	b.n	8011e06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	895b      	ldrh	r3, [r3, #10]
 8011df8:	461a      	mov	r2, r3
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	fb03 f202 	mul.w	r2, r3, r2
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e04:	4413      	add	r3, r2
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr

08011e12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b086      	sub	sp, #24
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d904      	bls.n	8011e32 <get_fat+0x20>
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	69db      	ldr	r3, [r3, #28]
 8011e2c:	683a      	ldr	r2, [r7, #0]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d302      	bcc.n	8011e38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e32:	2301      	movs	r3, #1
 8011e34:	617b      	str	r3, [r7, #20]
 8011e36:	e0b7      	b.n	8011fa8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e38:	f04f 33ff 	mov.w	r3, #4294967295
 8011e3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d05a      	beq.n	8011efc <get_fat+0xea>
 8011e46:	2b03      	cmp	r3, #3
 8011e48:	d07d      	beq.n	8011f46 <get_fat+0x134>
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	f040 80a2 	bne.w	8011f94 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	085b      	lsrs	r3, r3, #1
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	4619      	mov	r1, r3
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e6e:	4413      	add	r3, r2
 8011e70:	4619      	mov	r1, r3
 8011e72:	6938      	ldr	r0, [r7, #16]
 8011e74:	f7ff ff10 	bl	8011c98 <move_window>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f040 808d 	bne.w	8011f9a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	1c5a      	adds	r2, r3, #1
 8011e84:	60fa      	str	r2, [r7, #12]
 8011e86:	693a      	ldr	r2, [r7, #16]
 8011e88:	8992      	ldrh	r2, [r2, #12]
 8011e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e8e:	fb02 f201 	mul.w	r2, r2, r1
 8011e92:	1a9b      	subs	r3, r3, r2
 8011e94:	693a      	ldr	r2, [r7, #16]
 8011e96:	4413      	add	r3, r2
 8011e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011e9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eae:	4413      	add	r3, r2
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	6938      	ldr	r0, [r7, #16]
 8011eb4:	f7ff fef0 	bl	8011c98 <move_window>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d16f      	bne.n	8011f9e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	899b      	ldrh	r3, [r3, #12]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eca:	fb02 f201 	mul.w	r2, r2, r1
 8011ece:	1a9b      	subs	r3, r3, r2
 8011ed0:	693a      	ldr	r2, [r7, #16]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ed8:	021b      	lsls	r3, r3, #8
 8011eda:	461a      	mov	r2, r3
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	f003 0301 	and.w	r3, r3, #1
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <get_fat+0xe0>
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	091b      	lsrs	r3, r3, #4
 8011ef0:	e002      	b.n	8011ef8 <get_fat+0xe6>
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011ef8:	617b      	str	r3, [r7, #20]
			break;
 8011efa:	e055      	b.n	8011fa8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	899b      	ldrh	r3, [r3, #12]
 8011f04:	085b      	lsrs	r3, r3, #1
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	4619      	mov	r1, r3
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f10:	4413      	add	r3, r2
 8011f12:	4619      	mov	r1, r3
 8011f14:	6938      	ldr	r0, [r7, #16]
 8011f16:	f7ff febf 	bl	8011c98 <move_window>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d140      	bne.n	8011fa2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	005b      	lsls	r3, r3, #1
 8011f2a:	693a      	ldr	r2, [r7, #16]
 8011f2c:	8992      	ldrh	r2, [r2, #12]
 8011f2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f32:	fb02 f200 	mul.w	r2, r2, r0
 8011f36:	1a9b      	subs	r3, r3, r2
 8011f38:	440b      	add	r3, r1
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff fbfc 	bl	8011738 <ld_word>
 8011f40:	4603      	mov	r3, r0
 8011f42:	617b      	str	r3, [r7, #20]
			break;
 8011f44:	e030      	b.n	8011fa8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	899b      	ldrh	r3, [r3, #12]
 8011f4e:	089b      	lsrs	r3, r3, #2
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	4619      	mov	r1, r3
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f5a:	4413      	add	r3, r2
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	6938      	ldr	r0, [r7, #16]
 8011f60:	f7ff fe9a 	bl	8011c98 <move_window>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d11d      	bne.n	8011fa6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	693a      	ldr	r2, [r7, #16]
 8011f76:	8992      	ldrh	r2, [r2, #12]
 8011f78:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f7c:	fb02 f200 	mul.w	r2, r2, r0
 8011f80:	1a9b      	subs	r3, r3, r2
 8011f82:	440b      	add	r3, r1
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7ff fbef 	bl	8011768 <ld_dword>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011f90:	617b      	str	r3, [r7, #20]
			break;
 8011f92:	e009      	b.n	8011fa8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011f94:	2301      	movs	r3, #1
 8011f96:	617b      	str	r3, [r7, #20]
 8011f98:	e006      	b.n	8011fa8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f9a:	bf00      	nop
 8011f9c:	e004      	b.n	8011fa8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f9e:	bf00      	nop
 8011fa0:	e002      	b.n	8011fa8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fa2:	bf00      	nop
 8011fa4:	e000      	b.n	8011fa8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fa6:	bf00      	nop
		}
	}

	return val;
 8011fa8:	697b      	ldr	r3, [r7, #20]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011fb2:	b590      	push	{r4, r7, lr}
 8011fb4:	b089      	sub	sp, #36	; 0x24
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	60f8      	str	r0, [r7, #12]
 8011fba:	60b9      	str	r1, [r7, #8]
 8011fbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011fbe:	2302      	movs	r3, #2
 8011fc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	f240 8106 	bls.w	80121d6 <put_fat+0x224>
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	69db      	ldr	r3, [r3, #28]
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	f080 8100 	bcs.w	80121d6 <put_fat+0x224>
		switch (fs->fs_type) {
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	f000 8088 	beq.w	80120f0 <put_fat+0x13e>
 8011fe0:	2b03      	cmp	r3, #3
 8011fe2:	f000 80b0 	beq.w	8012146 <put_fat+0x194>
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	f040 80f5 	bne.w	80121d6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	61bb      	str	r3, [r7, #24]
 8011ff0:	69bb      	ldr	r3, [r7, #24]
 8011ff2:	085b      	lsrs	r3, r3, #1
 8011ff4:	69ba      	ldr	r2, [r7, #24]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	899b      	ldrh	r3, [r3, #12]
 8012002:	4619      	mov	r1, r3
 8012004:	69bb      	ldr	r3, [r7, #24]
 8012006:	fbb3 f3f1 	udiv	r3, r3, r1
 801200a:	4413      	add	r3, r2
 801200c:	4619      	mov	r1, r3
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f7ff fe42 	bl	8011c98 <move_window>
 8012014:	4603      	mov	r3, r0
 8012016:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012018:	7ffb      	ldrb	r3, [r7, #31]
 801201a:	2b00      	cmp	r3, #0
 801201c:	f040 80d4 	bne.w	80121c8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	1c5a      	adds	r2, r3, #1
 801202a:	61ba      	str	r2, [r7, #24]
 801202c:	68fa      	ldr	r2, [r7, #12]
 801202e:	8992      	ldrh	r2, [r2, #12]
 8012030:	fbb3 f0f2 	udiv	r0, r3, r2
 8012034:	fb02 f200 	mul.w	r2, r2, r0
 8012038:	1a9b      	subs	r3, r3, r2
 801203a:	440b      	add	r3, r1
 801203c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	f003 0301 	and.w	r3, r3, #1
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00d      	beq.n	8012064 <put_fat+0xb2>
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	b25b      	sxtb	r3, r3
 801204e:	f003 030f 	and.w	r3, r3, #15
 8012052:	b25a      	sxtb	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	b2db      	uxtb	r3, r3
 8012058:	011b      	lsls	r3, r3, #4
 801205a:	b25b      	sxtb	r3, r3
 801205c:	4313      	orrs	r3, r2
 801205e:	b25b      	sxtb	r3, r3
 8012060:	b2db      	uxtb	r3, r3
 8012062:	e001      	b.n	8012068 <put_fat+0xb6>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	b2db      	uxtb	r3, r3
 8012068:	697a      	ldr	r2, [r7, #20]
 801206a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2201      	movs	r2, #1
 8012070:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	899b      	ldrh	r3, [r3, #12]
 801207a:	4619      	mov	r1, r3
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012082:	4413      	add	r3, r2
 8012084:	4619      	mov	r1, r3
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f7ff fe06 	bl	8011c98 <move_window>
 801208c:	4603      	mov	r3, r0
 801208e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012090:	7ffb      	ldrb	r3, [r7, #31]
 8012092:	2b00      	cmp	r3, #0
 8012094:	f040 809a 	bne.w	80121cc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	899b      	ldrh	r3, [r3, #12]
 80120a2:	461a      	mov	r2, r3
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80120aa:	fb02 f200 	mul.w	r2, r2, r0
 80120ae:	1a9b      	subs	r3, r3, r2
 80120b0:	440b      	add	r3, r1
 80120b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	f003 0301 	and.w	r3, r3, #1
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d003      	beq.n	80120c6 <put_fat+0x114>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	091b      	lsrs	r3, r3, #4
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	e00e      	b.n	80120e4 <put_fat+0x132>
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	b25b      	sxtb	r3, r3
 80120cc:	f023 030f 	bic.w	r3, r3, #15
 80120d0:	b25a      	sxtb	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	0a1b      	lsrs	r3, r3, #8
 80120d6:	b25b      	sxtb	r3, r3
 80120d8:	f003 030f 	and.w	r3, r3, #15
 80120dc:	b25b      	sxtb	r3, r3
 80120de:	4313      	orrs	r3, r2
 80120e0:	b25b      	sxtb	r3, r3
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	697a      	ldr	r2, [r7, #20]
 80120e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2201      	movs	r2, #1
 80120ec:	70da      	strb	r2, [r3, #3]
			break;
 80120ee:	e072      	b.n	80121d6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	899b      	ldrh	r3, [r3, #12]
 80120f8:	085b      	lsrs	r3, r3, #1
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	4619      	mov	r1, r3
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	fbb3 f3f1 	udiv	r3, r3, r1
 8012104:	4413      	add	r3, r2
 8012106:	4619      	mov	r1, r3
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f7ff fdc5 	bl	8011c98 <move_window>
 801210e:	4603      	mov	r3, r0
 8012110:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012112:	7ffb      	ldrb	r3, [r7, #31]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d15b      	bne.n	80121d0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	68fa      	ldr	r2, [r7, #12]
 8012124:	8992      	ldrh	r2, [r2, #12]
 8012126:	fbb3 f0f2 	udiv	r0, r3, r2
 801212a:	fb02 f200 	mul.w	r2, r2, r0
 801212e:	1a9b      	subs	r3, r3, r2
 8012130:	440b      	add	r3, r1
 8012132:	687a      	ldr	r2, [r7, #4]
 8012134:	b292      	uxth	r2, r2
 8012136:	4611      	mov	r1, r2
 8012138:	4618      	mov	r0, r3
 801213a:	f7ff fb38 	bl	80117ae <st_word>
			fs->wflag = 1;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2201      	movs	r2, #1
 8012142:	70da      	strb	r2, [r3, #3]
			break;
 8012144:	e047      	b.n	80121d6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	899b      	ldrh	r3, [r3, #12]
 801214e:	089b      	lsrs	r3, r3, #2
 8012150:	b29b      	uxth	r3, r3
 8012152:	4619      	mov	r1, r3
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	fbb3 f3f1 	udiv	r3, r3, r1
 801215a:	4413      	add	r3, r2
 801215c:	4619      	mov	r1, r3
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f7ff fd9a 	bl	8011c98 <move_window>
 8012164:	4603      	mov	r3, r0
 8012166:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012168:	7ffb      	ldrb	r3, [r7, #31]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d132      	bne.n	80121d4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	8992      	ldrh	r2, [r2, #12]
 8012182:	fbb3 f0f2 	udiv	r0, r3, r2
 8012186:	fb02 f200 	mul.w	r2, r2, r0
 801218a:	1a9b      	subs	r3, r3, r2
 801218c:	440b      	add	r3, r1
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff faea 	bl	8011768 <ld_dword>
 8012194:	4603      	mov	r3, r0
 8012196:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801219a:	4323      	orrs	r3, r4
 801219c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	009b      	lsls	r3, r3, #2
 80121a8:	68fa      	ldr	r2, [r7, #12]
 80121aa:	8992      	ldrh	r2, [r2, #12]
 80121ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80121b0:	fb02 f200 	mul.w	r2, r2, r0
 80121b4:	1a9b      	subs	r3, r3, r2
 80121b6:	440b      	add	r3, r1
 80121b8:	6879      	ldr	r1, [r7, #4]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7ff fb12 	bl	80117e4 <st_dword>
			fs->wflag = 1;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2201      	movs	r2, #1
 80121c4:	70da      	strb	r2, [r3, #3]
			break;
 80121c6:	e006      	b.n	80121d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121c8:	bf00      	nop
 80121ca:	e004      	b.n	80121d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121cc:	bf00      	nop
 80121ce:	e002      	b.n	80121d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121d0:	bf00      	nop
 80121d2:	e000      	b.n	80121d6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121d4:	bf00      	nop
		}
	}
	return res;
 80121d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3724      	adds	r7, #36	; 0x24
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd90      	pop	{r4, r7, pc}

080121e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b088      	sub	sp, #32
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d904      	bls.n	8012206 <remove_chain+0x26>
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	69db      	ldr	r3, [r3, #28]
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	429a      	cmp	r2, r3
 8012204:	d301      	bcc.n	801220a <remove_chain+0x2a>
 8012206:	2302      	movs	r3, #2
 8012208:	e04b      	b.n	80122a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00c      	beq.n	801222a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012210:	f04f 32ff 	mov.w	r2, #4294967295
 8012214:	6879      	ldr	r1, [r7, #4]
 8012216:	69b8      	ldr	r0, [r7, #24]
 8012218:	f7ff fecb 	bl	8011fb2 <put_fat>
 801221c:	4603      	mov	r3, r0
 801221e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012220:	7ffb      	ldrb	r3, [r7, #31]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d001      	beq.n	801222a <remove_chain+0x4a>
 8012226:	7ffb      	ldrb	r3, [r7, #31]
 8012228:	e03b      	b.n	80122a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f7ff fdf0 	bl	8011e12 <get_fat>
 8012232:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d031      	beq.n	801229e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d101      	bne.n	8012244 <remove_chain+0x64>
 8012240:	2302      	movs	r3, #2
 8012242:	e02e      	b.n	80122a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224a:	d101      	bne.n	8012250 <remove_chain+0x70>
 801224c:	2301      	movs	r3, #1
 801224e:	e028      	b.n	80122a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012250:	2200      	movs	r2, #0
 8012252:	68b9      	ldr	r1, [r7, #8]
 8012254:	69b8      	ldr	r0, [r7, #24]
 8012256:	f7ff feac 	bl	8011fb2 <put_fat>
 801225a:	4603      	mov	r3, r0
 801225c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801225e:	7ffb      	ldrb	r3, [r7, #31]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d001      	beq.n	8012268 <remove_chain+0x88>
 8012264:	7ffb      	ldrb	r3, [r7, #31]
 8012266:	e01c      	b.n	80122a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	695a      	ldr	r2, [r3, #20]
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	69db      	ldr	r3, [r3, #28]
 8012270:	3b02      	subs	r3, #2
 8012272:	429a      	cmp	r2, r3
 8012274:	d20b      	bcs.n	801228e <remove_chain+0xae>
			fs->free_clst++;
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	695b      	ldr	r3, [r3, #20]
 801227a:	1c5a      	adds	r2, r3, #1
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	791b      	ldrb	r3, [r3, #4]
 8012284:	f043 0301 	orr.w	r3, r3, #1
 8012288:	b2da      	uxtb	r2, r3
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	69db      	ldr	r3, [r3, #28]
 8012296:	68ba      	ldr	r2, [r7, #8]
 8012298:	429a      	cmp	r2, r3
 801229a:	d3c6      	bcc.n	801222a <remove_chain+0x4a>
 801229c:	e000      	b.n	80122a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801229e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122a0:	2300      	movs	r3, #0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3720      	adds	r7, #32
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b088      	sub	sp, #32
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d10d      	bne.n	80122dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d004      	beq.n	80122d6 <create_chain+0x2c>
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	69ba      	ldr	r2, [r7, #24]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d31b      	bcc.n	801230e <create_chain+0x64>
 80122d6:	2301      	movs	r3, #1
 80122d8:	61bb      	str	r3, [r7, #24]
 80122da:	e018      	b.n	801230e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7ff fd97 	bl	8011e12 <get_fat>
 80122e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d801      	bhi.n	80122f0 <create_chain+0x46>
 80122ec:	2301      	movs	r3, #1
 80122ee:	e070      	b.n	80123d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122f6:	d101      	bne.n	80122fc <create_chain+0x52>
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	e06a      	b.n	80123d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	69db      	ldr	r3, [r3, #28]
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	429a      	cmp	r2, r3
 8012304:	d201      	bcs.n	801230a <create_chain+0x60>
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	e063      	b.n	80123d2 <create_chain+0x128>
		scl = clst;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	3301      	adds	r3, #1
 8012316:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	69db      	ldr	r3, [r3, #28]
 801231c:	69fa      	ldr	r2, [r7, #28]
 801231e:	429a      	cmp	r2, r3
 8012320:	d307      	bcc.n	8012332 <create_chain+0x88>
				ncl = 2;
 8012322:	2302      	movs	r3, #2
 8012324:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012326:	69fa      	ldr	r2, [r7, #28]
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	429a      	cmp	r2, r3
 801232c:	d901      	bls.n	8012332 <create_chain+0x88>
 801232e:	2300      	movs	r3, #0
 8012330:	e04f      	b.n	80123d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012332:	69f9      	ldr	r1, [r7, #28]
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7ff fd6c 	bl	8011e12 <get_fat>
 801233a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00e      	beq.n	8012360 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d003      	beq.n	8012350 <create_chain+0xa6>
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801234e:	d101      	bne.n	8012354 <create_chain+0xaa>
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	e03e      	b.n	80123d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012354:	69fa      	ldr	r2, [r7, #28]
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	429a      	cmp	r2, r3
 801235a:	d1da      	bne.n	8012312 <create_chain+0x68>
 801235c:	2300      	movs	r3, #0
 801235e:	e038      	b.n	80123d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012360:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012362:	f04f 32ff 	mov.w	r2, #4294967295
 8012366:	69f9      	ldr	r1, [r7, #28]
 8012368:	6938      	ldr	r0, [r7, #16]
 801236a:	f7ff fe22 	bl	8011fb2 <put_fat>
 801236e:	4603      	mov	r3, r0
 8012370:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012372:	7dfb      	ldrb	r3, [r7, #23]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d109      	bne.n	801238c <create_chain+0xe2>
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d006      	beq.n	801238c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801237e:	69fa      	ldr	r2, [r7, #28]
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6938      	ldr	r0, [r7, #16]
 8012384:	f7ff fe15 	bl	8011fb2 <put_fat>
 8012388:	4603      	mov	r3, r0
 801238a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801238c:	7dfb      	ldrb	r3, [r7, #23]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d116      	bne.n	80123c0 <create_chain+0x116>
		fs->last_clst = ncl;
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	69fa      	ldr	r2, [r7, #28]
 8012396:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	695a      	ldr	r2, [r3, #20]
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	69db      	ldr	r3, [r3, #28]
 80123a0:	3b02      	subs	r3, #2
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d804      	bhi.n	80123b0 <create_chain+0x106>
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	695b      	ldr	r3, [r3, #20]
 80123aa:	1e5a      	subs	r2, r3, #1
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	791b      	ldrb	r3, [r3, #4]
 80123b4:	f043 0301 	orr.w	r3, r3, #1
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	711a      	strb	r2, [r3, #4]
 80123be:	e007      	b.n	80123d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d102      	bne.n	80123cc <create_chain+0x122>
 80123c6:	f04f 33ff 	mov.w	r3, #4294967295
 80123ca:	e000      	b.n	80123ce <create_chain+0x124>
 80123cc:	2301      	movs	r3, #1
 80123ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80123d0:	69fb      	ldr	r3, [r7, #28]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3720      	adds	r7, #32
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80123da:	b480      	push	{r7}
 80123dc:	b087      	sub	sp, #28
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
 80123e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ee:	3304      	adds	r3, #4
 80123f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	899b      	ldrh	r3, [r3, #12]
 80123f6:	461a      	mov	r2, r3
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	8952      	ldrh	r2, [r2, #10]
 8012402:	fbb3 f3f2 	udiv	r3, r3, r2
 8012406:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	1d1a      	adds	r2, r3, #4
 801240c:	613a      	str	r2, [r7, #16]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d101      	bne.n	801241c <clmt_clust+0x42>
 8012418:	2300      	movs	r3, #0
 801241a:	e010      	b.n	801243e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	429a      	cmp	r2, r3
 8012422:	d307      	bcc.n	8012434 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012424:	697a      	ldr	r2, [r7, #20]
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	1ad3      	subs	r3, r2, r3
 801242a:	617b      	str	r3, [r7, #20]
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	3304      	adds	r3, #4
 8012430:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012432:	e7e9      	b.n	8012408 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012434:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	4413      	add	r3, r2
}
 801243e:	4618      	mov	r0, r3
 8012440:	371c      	adds	r7, #28
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr

0801244a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b086      	sub	sp, #24
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
 8012452:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012460:	d204      	bcs.n	801246c <dir_sdi+0x22>
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	f003 031f 	and.w	r3, r3, #31
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <dir_sdi+0x26>
		return FR_INT_ERR;
 801246c:	2302      	movs	r3, #2
 801246e:	e071      	b.n	8012554 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <dir_sdi+0x46>
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	2b02      	cmp	r3, #2
 8012488:	d902      	bls.n	8012490 <dir_sdi+0x46>
		clst = fs->dirbase;
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801248e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d10c      	bne.n	80124b0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	095b      	lsrs	r3, r3, #5
 801249a:	693a      	ldr	r2, [r7, #16]
 801249c:	8912      	ldrh	r2, [r2, #8]
 801249e:	4293      	cmp	r3, r2
 80124a0:	d301      	bcc.n	80124a6 <dir_sdi+0x5c>
 80124a2:	2302      	movs	r3, #2
 80124a4:	e056      	b.n	8012554 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	61da      	str	r2, [r3, #28]
 80124ae:	e02d      	b.n	801250c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	895b      	ldrh	r3, [r3, #10]
 80124b4:	461a      	mov	r2, r3
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	899b      	ldrh	r3, [r3, #12]
 80124ba:	fb03 f302 	mul.w	r3, r3, r2
 80124be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124c0:	e019      	b.n	80124f6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6979      	ldr	r1, [r7, #20]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7ff fca3 	bl	8011e12 <get_fat>
 80124cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d4:	d101      	bne.n	80124da <dir_sdi+0x90>
 80124d6:	2301      	movs	r3, #1
 80124d8:	e03c      	b.n	8012554 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d904      	bls.n	80124ea <dir_sdi+0xa0>
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	69db      	ldr	r3, [r3, #28]
 80124e4:	697a      	ldr	r2, [r7, #20]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d301      	bcc.n	80124ee <dir_sdi+0xa4>
 80124ea:	2302      	movs	r3, #2
 80124ec:	e032      	b.n	8012554 <dir_sdi+0x10a>
			ofs -= csz;
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	1ad3      	subs	r3, r2, r3
 80124f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124f6:	683a      	ldr	r2, [r7, #0]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d2e1      	bcs.n	80124c2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80124fe:	6979      	ldr	r1, [r7, #20]
 8012500:	6938      	ldr	r0, [r7, #16]
 8012502:	f7ff fc67 	bl	8011dd4 <clust2sect>
 8012506:	4602      	mov	r2, r0
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	697a      	ldr	r2, [r7, #20]
 8012510:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	69db      	ldr	r3, [r3, #28]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d101      	bne.n	801251e <dir_sdi+0xd4>
 801251a:	2302      	movs	r3, #2
 801251c:	e01a      	b.n	8012554 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	69da      	ldr	r2, [r3, #28]
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	899b      	ldrh	r3, [r3, #12]
 8012526:	4619      	mov	r1, r3
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	fbb3 f3f1 	udiv	r3, r3, r1
 801252e:	441a      	add	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	899b      	ldrh	r3, [r3, #12]
 801253e:	461a      	mov	r2, r3
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	fbb3 f0f2 	udiv	r0, r3, r2
 8012546:	fb02 f200 	mul.w	r2, r2, r0
 801254a:	1a9b      	subs	r3, r3, r2
 801254c:	18ca      	adds	r2, r1, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012552:	2300      	movs	r3, #0
}
 8012554:	4618      	mov	r0, r3
 8012556:	3718      	adds	r7, #24
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	695b      	ldr	r3, [r3, #20]
 8012570:	3320      	adds	r3, #32
 8012572:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	69db      	ldr	r3, [r3, #28]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d003      	beq.n	8012584 <dir_next+0x28>
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012582:	d301      	bcc.n	8012588 <dir_next+0x2c>
 8012584:	2304      	movs	r3, #4
 8012586:	e0bb      	b.n	8012700 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	899b      	ldrh	r3, [r3, #12]
 801258c:	461a      	mov	r2, r3
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	fbb3 f1f2 	udiv	r1, r3, r2
 8012594:	fb02 f201 	mul.w	r2, r2, r1
 8012598:	1a9b      	subs	r3, r3, r2
 801259a:	2b00      	cmp	r3, #0
 801259c:	f040 809d 	bne.w	80126da <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	69db      	ldr	r3, [r3, #28]
 80125a4:	1c5a      	adds	r2, r3, #1
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	699b      	ldr	r3, [r3, #24]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d10b      	bne.n	80125ca <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	095b      	lsrs	r3, r3, #5
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	8912      	ldrh	r2, [r2, #8]
 80125ba:	4293      	cmp	r3, r2
 80125bc:	f0c0 808d 	bcc.w	80126da <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2200      	movs	r2, #0
 80125c4:	61da      	str	r2, [r3, #28]
 80125c6:	2304      	movs	r3, #4
 80125c8:	e09a      	b.n	8012700 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	899b      	ldrh	r3, [r3, #12]
 80125ce:	461a      	mov	r2, r3
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	8952      	ldrh	r2, [r2, #10]
 80125da:	3a01      	subs	r2, #1
 80125dc:	4013      	ands	r3, r2
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d17b      	bne.n	80126da <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	699b      	ldr	r3, [r3, #24]
 80125e8:	4619      	mov	r1, r3
 80125ea:	4610      	mov	r0, r2
 80125ec:	f7ff fc11 	bl	8011e12 <get_fat>
 80125f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d801      	bhi.n	80125fc <dir_next+0xa0>
 80125f8:	2302      	movs	r3, #2
 80125fa:	e081      	b.n	8012700 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012602:	d101      	bne.n	8012608 <dir_next+0xac>
 8012604:	2301      	movs	r3, #1
 8012606:	e07b      	b.n	8012700 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	69db      	ldr	r3, [r3, #28]
 801260c:	697a      	ldr	r2, [r7, #20]
 801260e:	429a      	cmp	r2, r3
 8012610:	d359      	bcc.n	80126c6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d104      	bne.n	8012622 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	61da      	str	r2, [r3, #28]
 801261e:	2304      	movs	r3, #4
 8012620:	e06e      	b.n	8012700 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	699b      	ldr	r3, [r3, #24]
 8012628:	4619      	mov	r1, r3
 801262a:	4610      	mov	r0, r2
 801262c:	f7ff fe3d 	bl	80122aa <create_chain>
 8012630:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d101      	bne.n	801263c <dir_next+0xe0>
 8012638:	2307      	movs	r3, #7
 801263a:	e061      	b.n	8012700 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	2b01      	cmp	r3, #1
 8012640:	d101      	bne.n	8012646 <dir_next+0xea>
 8012642:	2302      	movs	r3, #2
 8012644:	e05c      	b.n	8012700 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264c:	d101      	bne.n	8012652 <dir_next+0xf6>
 801264e:	2301      	movs	r3, #1
 8012650:	e056      	b.n	8012700 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f7ff fadc 	bl	8011c10 <sync_window>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d001      	beq.n	8012662 <dir_next+0x106>
 801265e:	2301      	movs	r3, #1
 8012660:	e04e      	b.n	8012700 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	899b      	ldrh	r3, [r3, #12]
 801266c:	461a      	mov	r2, r3
 801266e:	2100      	movs	r1, #0
 8012670:	f7ff f905 	bl	801187e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012674:	2300      	movs	r3, #0
 8012676:	613b      	str	r3, [r7, #16]
 8012678:	6979      	ldr	r1, [r7, #20]
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f7ff fbaa 	bl	8011dd4 <clust2sect>
 8012680:	4602      	mov	r2, r0
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	635a      	str	r2, [r3, #52]	; 0x34
 8012686:	e012      	b.n	80126ae <dir_next+0x152>
						fs->wflag = 1;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2201      	movs	r2, #1
 801268c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ff fabe 	bl	8011c10 <sync_window>
 8012694:	4603      	mov	r3, r0
 8012696:	2b00      	cmp	r3, #0
 8012698:	d001      	beq.n	801269e <dir_next+0x142>
 801269a:	2301      	movs	r3, #1
 801269c:	e030      	b.n	8012700 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	3301      	adds	r3, #1
 80126a2:	613b      	str	r3, [r7, #16]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126a8:	1c5a      	adds	r2, r3, #1
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	635a      	str	r2, [r3, #52]	; 0x34
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	895b      	ldrh	r3, [r3, #10]
 80126b2:	461a      	mov	r2, r3
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d3e6      	bcc.n	8012688 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	1ad2      	subs	r2, r2, r3
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	697a      	ldr	r2, [r7, #20]
 80126ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80126cc:	6979      	ldr	r1, [r7, #20]
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7ff fb80 	bl	8011dd4 <clust2sect>
 80126d4:	4602      	mov	r2, r0
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	899b      	ldrh	r3, [r3, #12]
 80126ea:	461a      	mov	r2, r3
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80126f2:	fb02 f200 	mul.w	r2, r2, r0
 80126f6:	1a9b      	subs	r3, r3, r2
 80126f8:	18ca      	adds	r2, r1, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80126fe:	2300      	movs	r3, #0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012718:	2100      	movs	r1, #0
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ff fe95 	bl	801244a <dir_sdi>
 8012720:	4603      	mov	r3, r0
 8012722:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d12b      	bne.n	8012782 <dir_alloc+0x7a>
		n = 0;
 801272a:	2300      	movs	r3, #0
 801272c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	69db      	ldr	r3, [r3, #28]
 8012732:	4619      	mov	r1, r3
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f7ff faaf 	bl	8011c98 <move_window>
 801273a:	4603      	mov	r3, r0
 801273c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801273e:	7dfb      	ldrb	r3, [r7, #23]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d11d      	bne.n	8012780 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6a1b      	ldr	r3, [r3, #32]
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2be5      	cmp	r3, #229	; 0xe5
 801274c:	d004      	beq.n	8012758 <dir_alloc+0x50>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6a1b      	ldr	r3, [r3, #32]
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d107      	bne.n	8012768 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	3301      	adds	r3, #1
 801275c:	613b      	str	r3, [r7, #16]
 801275e:	693a      	ldr	r2, [r7, #16]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	429a      	cmp	r2, r3
 8012764:	d102      	bne.n	801276c <dir_alloc+0x64>
 8012766:	e00c      	b.n	8012782 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012768:	2300      	movs	r3, #0
 801276a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801276c:	2101      	movs	r1, #1
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7ff fef4 	bl	801255c <dir_next>
 8012774:	4603      	mov	r3, r0
 8012776:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012778:	7dfb      	ldrb	r3, [r7, #23]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d0d7      	beq.n	801272e <dir_alloc+0x26>
 801277e:	e000      	b.n	8012782 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012780:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012782:	7dfb      	ldrb	r3, [r7, #23]
 8012784:	2b04      	cmp	r3, #4
 8012786:	d101      	bne.n	801278c <dir_alloc+0x84>
 8012788:	2307      	movs	r3, #7
 801278a:	75fb      	strb	r3, [r7, #23]
	return res;
 801278c:	7dfb      	ldrb	r3, [r7, #23]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b084      	sub	sp, #16
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	331a      	adds	r3, #26
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7fe ffc7 	bl	8011738 <ld_word>
 80127aa:	4603      	mov	r3, r0
 80127ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	2b03      	cmp	r3, #3
 80127b4:	d109      	bne.n	80127ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	3314      	adds	r3, #20
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fe ffbc 	bl	8011738 <ld_word>
 80127c0:	4603      	mov	r3, r0
 80127c2:	041b      	lsls	r3, r3, #16
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	4313      	orrs	r3, r2
 80127c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80127ca:	68fb      	ldr	r3, [r7, #12]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3710      	adds	r7, #16
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	331a      	adds	r3, #26
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	b292      	uxth	r2, r2
 80127e8:	4611      	mov	r1, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe ffdf 	bl	80117ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	2b03      	cmp	r3, #3
 80127f6:	d109      	bne.n	801280c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	f103 0214 	add.w	r2, r3, #20
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	0c1b      	lsrs	r3, r3, #16
 8012802:	b29b      	uxth	r3, r3
 8012804:	4619      	mov	r1, r3
 8012806:	4610      	mov	r0, r2
 8012808:	f7fe ffd1 	bl	80117ae <st_word>
	}
}
 801280c:	bf00      	nop
 801280e:	3710      	adds	r7, #16
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b086      	sub	sp, #24
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801281e:	2304      	movs	r3, #4
 8012820:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012828:	e03c      	b.n	80128a4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	69db      	ldr	r3, [r3, #28]
 801282e:	4619      	mov	r1, r3
 8012830:	6938      	ldr	r0, [r7, #16]
 8012832:	f7ff fa31 	bl	8011c98 <move_window>
 8012836:	4603      	mov	r3, r0
 8012838:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801283a:	7dfb      	ldrb	r3, [r7, #23]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d136      	bne.n	80128ae <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6a1b      	ldr	r3, [r3, #32]
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012848:	7bfb      	ldrb	r3, [r7, #15]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d102      	bne.n	8012854 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801284e:	2304      	movs	r3, #4
 8012850:	75fb      	strb	r3, [r7, #23]
 8012852:	e031      	b.n	80128b8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6a1b      	ldr	r3, [r3, #32]
 8012858:	330b      	adds	r3, #11
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012860:	73bb      	strb	r3, [r7, #14]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	7bba      	ldrb	r2, [r7, #14]
 8012866:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	2be5      	cmp	r3, #229	; 0xe5
 801286c:	d011      	beq.n	8012892 <dir_read+0x7e>
 801286e:	7bfb      	ldrb	r3, [r7, #15]
 8012870:	2b2e      	cmp	r3, #46	; 0x2e
 8012872:	d00e      	beq.n	8012892 <dir_read+0x7e>
 8012874:	7bbb      	ldrb	r3, [r7, #14]
 8012876:	2b0f      	cmp	r3, #15
 8012878:	d00b      	beq.n	8012892 <dir_read+0x7e>
 801287a:	7bbb      	ldrb	r3, [r7, #14]
 801287c:	f023 0320 	bic.w	r3, r3, #32
 8012880:	2b08      	cmp	r3, #8
 8012882:	bf0c      	ite	eq
 8012884:	2301      	moveq	r3, #1
 8012886:	2300      	movne	r3, #0
 8012888:	b2db      	uxtb	r3, r3
 801288a:	461a      	mov	r2, r3
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	4293      	cmp	r3, r2
 8012890:	d00f      	beq.n	80128b2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012892:	2100      	movs	r1, #0
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7ff fe61 	bl	801255c <dir_next>
 801289a:	4603      	mov	r3, r0
 801289c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801289e:	7dfb      	ldrb	r3, [r7, #23]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d108      	bne.n	80128b6 <dir_read+0xa2>
	while (dp->sect) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	69db      	ldr	r3, [r3, #28]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1be      	bne.n	801282a <dir_read+0x16>
 80128ac:	e004      	b.n	80128b8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128ae:	bf00      	nop
 80128b0:	e002      	b.n	80128b8 <dir_read+0xa4>
				break;
 80128b2:	bf00      	nop
 80128b4:	e000      	b.n	80128b8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128b6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80128b8:	7dfb      	ldrb	r3, [r7, #23]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d002      	beq.n	80128c4 <dir_read+0xb0>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	61da      	str	r2, [r3, #28]
	return res;
 80128c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3718      	adds	r7, #24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b086      	sub	sp, #24
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80128dc:	2100      	movs	r1, #0
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f7ff fdb3 	bl	801244a <dir_sdi>
 80128e4:	4603      	mov	r3, r0
 80128e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80128e8:	7dfb      	ldrb	r3, [r7, #23]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d001      	beq.n	80128f2 <dir_find+0x24>
 80128ee:	7dfb      	ldrb	r3, [r7, #23]
 80128f0:	e03e      	b.n	8012970 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	69db      	ldr	r3, [r3, #28]
 80128f6:	4619      	mov	r1, r3
 80128f8:	6938      	ldr	r0, [r7, #16]
 80128fa:	f7ff f9cd 	bl	8011c98 <move_window>
 80128fe:	4603      	mov	r3, r0
 8012900:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012902:	7dfb      	ldrb	r3, [r7, #23]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d12f      	bne.n	8012968 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6a1b      	ldr	r3, [r3, #32]
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012910:	7bfb      	ldrb	r3, [r7, #15]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d102      	bne.n	801291c <dir_find+0x4e>
 8012916:	2304      	movs	r3, #4
 8012918:	75fb      	strb	r3, [r7, #23]
 801291a:	e028      	b.n	801296e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6a1b      	ldr	r3, [r3, #32]
 8012920:	330b      	adds	r3, #11
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012928:	b2da      	uxtb	r2, r3
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a1b      	ldr	r3, [r3, #32]
 8012932:	330b      	adds	r3, #11
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	f003 0308 	and.w	r3, r3, #8
 801293a:	2b00      	cmp	r3, #0
 801293c:	d10a      	bne.n	8012954 <dir_find+0x86>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6a18      	ldr	r0, [r3, #32]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	3324      	adds	r3, #36	; 0x24
 8012946:	220b      	movs	r2, #11
 8012948:	4619      	mov	r1, r3
 801294a:	f7fe ffb2 	bl	80118b2 <mem_cmp>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00b      	beq.n	801296c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012954:	2100      	movs	r1, #0
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7ff fe00 	bl	801255c <dir_next>
 801295c:	4603      	mov	r3, r0
 801295e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012960:	7dfb      	ldrb	r3, [r7, #23]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d0c5      	beq.n	80128f2 <dir_find+0x24>
 8012966:	e002      	b.n	801296e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012968:	bf00      	nop
 801296a:	e000      	b.n	801296e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801296c:	bf00      	nop

	return res;
 801296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3718      	adds	r7, #24
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012986:	2101      	movs	r1, #1
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7ff febd 	bl	8012708 <dir_alloc>
 801298e:	4603      	mov	r3, r0
 8012990:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012992:	7bfb      	ldrb	r3, [r7, #15]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d11c      	bne.n	80129d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	69db      	ldr	r3, [r3, #28]
 801299c:	4619      	mov	r1, r3
 801299e:	68b8      	ldr	r0, [r7, #8]
 80129a0:	f7ff f97a 	bl	8011c98 <move_window>
 80129a4:	4603      	mov	r3, r0
 80129a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129a8:	7bfb      	ldrb	r3, [r7, #15]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d111      	bne.n	80129d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6a1b      	ldr	r3, [r3, #32]
 80129b2:	2220      	movs	r2, #32
 80129b4:	2100      	movs	r1, #0
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fe ff61 	bl	801187e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6a18      	ldr	r0, [r3, #32]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3324      	adds	r3, #36	; 0x24
 80129c4:	220b      	movs	r2, #11
 80129c6:	4619      	mov	r1, r3
 80129c8:	f7fe ff38 	bl	801183c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2201      	movs	r2, #1
 80129d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80129d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	69db      	ldr	r3, [r3, #28]
 80129ee:	4619      	mov	r1, r3
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7ff f951 	bl	8011c98 <move_window>
 80129f6:	4603      	mov	r3, r0
 80129f8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80129fa:	7afb      	ldrb	r3, [r7, #11]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d106      	bne.n	8012a0e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6a1b      	ldr	r3, [r3, #32]
 8012a04:	22e5      	movs	r2, #229	; 0xe5
 8012a06:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2201      	movs	r2, #1
 8012a0c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b088      	sub	sp, #32
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	60fb      	str	r3, [r7, #12]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	3324      	adds	r3, #36	; 0x24
 8012a2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012a2e:	220b      	movs	r2, #11
 8012a30:	2120      	movs	r1, #32
 8012a32:	68b8      	ldr	r0, [r7, #8]
 8012a34:	f7fe ff23 	bl	801187e <mem_set>
	si = i = 0; ni = 8;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	613b      	str	r3, [r7, #16]
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	617b      	str	r3, [r7, #20]
 8012a40:	2308      	movs	r3, #8
 8012a42:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012a44:	68fa      	ldr	r2, [r7, #12]
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	4413      	add	r3, r2
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8012a4e:	d12f      	bne.n	8012ab0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	1c5a      	adds	r2, r3, #1
 8012a54:	617a      	str	r2, [r7, #20]
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	4413      	add	r3, r2
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012a5e:	7ffb      	ldrb	r3, [r7, #31]
 8012a60:	2b2e      	cmp	r3, #46	; 0x2e
 8012a62:	d10a      	bne.n	8012a7a <create_name+0x62>
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	2b02      	cmp	r3, #2
 8012a68:	d807      	bhi.n	8012a7a <create_name+0x62>
			sfn[i++] = c;
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	1c5a      	adds	r2, r3, #1
 8012a6e:	613a      	str	r2, [r7, #16]
 8012a70:	68ba      	ldr	r2, [r7, #8]
 8012a72:	4413      	add	r3, r2
 8012a74:	7ffa      	ldrb	r2, [r7, #31]
 8012a76:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012a78:	e7ea      	b.n	8012a50 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012a7a:	7ffb      	ldrb	r3, [r7, #31]
 8012a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a7e:	d007      	beq.n	8012a90 <create_name+0x78>
 8012a80:	7ffb      	ldrb	r3, [r7, #31]
 8012a82:	2b5c      	cmp	r3, #92	; 0x5c
 8012a84:	d004      	beq.n	8012a90 <create_name+0x78>
 8012a86:	7ffb      	ldrb	r3, [r7, #31]
 8012a88:	2b20      	cmp	r3, #32
 8012a8a:	d901      	bls.n	8012a90 <create_name+0x78>
 8012a8c:	2306      	movs	r3, #6
 8012a8e:	e084      	b.n	8012b9a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	441a      	add	r2, r3
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012a9a:	7ffb      	ldrb	r3, [r7, #31]
 8012a9c:	2b20      	cmp	r3, #32
 8012a9e:	d801      	bhi.n	8012aa4 <create_name+0x8c>
 8012aa0:	2224      	movs	r2, #36	; 0x24
 8012aa2:	e000      	b.n	8012aa6 <create_name+0x8e>
 8012aa4:	2220      	movs	r2, #32
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	330b      	adds	r3, #11
 8012aaa:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012aac:	2300      	movs	r3, #0
 8012aae:	e074      	b.n	8012b9a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	617a      	str	r2, [r7, #20]
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	4413      	add	r3, r2
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012abe:	7ffb      	ldrb	r3, [r7, #31]
 8012ac0:	2b20      	cmp	r3, #32
 8012ac2:	d94e      	bls.n	8012b62 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ac4:	7ffb      	ldrb	r3, [r7, #31]
 8012ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8012ac8:	d006      	beq.n	8012ad8 <create_name+0xc0>
 8012aca:	7ffb      	ldrb	r3, [r7, #31]
 8012acc:	2b5c      	cmp	r3, #92	; 0x5c
 8012ace:	d110      	bne.n	8012af2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012ad0:	e002      	b.n	8012ad8 <create_name+0xc0>
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	617b      	str	r3, [r7, #20]
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	4413      	add	r3, r2
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8012ae2:	d0f6      	beq.n	8012ad2 <create_name+0xba>
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	4413      	add	r3, r2
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	2b5c      	cmp	r3, #92	; 0x5c
 8012aee:	d0f0      	beq.n	8012ad2 <create_name+0xba>
			break;
 8012af0:	e038      	b.n	8012b64 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012af2:	7ffb      	ldrb	r3, [r7, #31]
 8012af4:	2b2e      	cmp	r3, #46	; 0x2e
 8012af6:	d003      	beq.n	8012b00 <create_name+0xe8>
 8012af8:	693a      	ldr	r2, [r7, #16]
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d30c      	bcc.n	8012b1a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	2b0b      	cmp	r3, #11
 8012b04:	d002      	beq.n	8012b0c <create_name+0xf4>
 8012b06:	7ffb      	ldrb	r3, [r7, #31]
 8012b08:	2b2e      	cmp	r3, #46	; 0x2e
 8012b0a:	d001      	beq.n	8012b10 <create_name+0xf8>
 8012b0c:	2306      	movs	r3, #6
 8012b0e:	e044      	b.n	8012b9a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012b10:	2308      	movs	r3, #8
 8012b12:	613b      	str	r3, [r7, #16]
 8012b14:	230b      	movs	r3, #11
 8012b16:	61bb      	str	r3, [r7, #24]
			continue;
 8012b18:	e022      	b.n	8012b60 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	da04      	bge.n	8012b2c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b22:	7ffb      	ldrb	r3, [r7, #31]
 8012b24:	3b80      	subs	r3, #128	; 0x80
 8012b26:	4a1f      	ldr	r2, [pc, #124]	; (8012ba4 <create_name+0x18c>)
 8012b28:	5cd3      	ldrb	r3, [r2, r3]
 8012b2a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b2c:	7ffb      	ldrb	r3, [r7, #31]
 8012b2e:	4619      	mov	r1, r3
 8012b30:	481d      	ldr	r0, [pc, #116]	; (8012ba8 <create_name+0x190>)
 8012b32:	f7fe fee5 	bl	8011900 <chk_chr>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <create_name+0x128>
 8012b3c:	2306      	movs	r3, #6
 8012b3e:	e02c      	b.n	8012b9a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012b40:	7ffb      	ldrb	r3, [r7, #31]
 8012b42:	2b60      	cmp	r3, #96	; 0x60
 8012b44:	d905      	bls.n	8012b52 <create_name+0x13a>
 8012b46:	7ffb      	ldrb	r3, [r7, #31]
 8012b48:	2b7a      	cmp	r3, #122	; 0x7a
 8012b4a:	d802      	bhi.n	8012b52 <create_name+0x13a>
 8012b4c:	7ffb      	ldrb	r3, [r7, #31]
 8012b4e:	3b20      	subs	r3, #32
 8012b50:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	1c5a      	adds	r2, r3, #1
 8012b56:	613a      	str	r2, [r7, #16]
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	7ffa      	ldrb	r2, [r7, #31]
 8012b5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012b60:	e7a6      	b.n	8012ab0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012b62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012b64:	68fa      	ldr	r2, [r7, #12]
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	441a      	add	r2, r3
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d101      	bne.n	8012b78 <create_name+0x160>
 8012b74:	2306      	movs	r3, #6
 8012b76:	e010      	b.n	8012b9a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	2be5      	cmp	r3, #229	; 0xe5
 8012b7e:	d102      	bne.n	8012b86 <create_name+0x16e>
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	2205      	movs	r2, #5
 8012b84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012b86:	7ffb      	ldrb	r3, [r7, #31]
 8012b88:	2b20      	cmp	r3, #32
 8012b8a:	d801      	bhi.n	8012b90 <create_name+0x178>
 8012b8c:	2204      	movs	r2, #4
 8012b8e:	e000      	b.n	8012b92 <create_name+0x17a>
 8012b90:	2200      	movs	r2, #0
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	330b      	adds	r3, #11
 8012b96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012b98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3720      	adds	r7, #32
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	0801a1f4 	.word	0x0801a1f4
 8012ba8:	0801a1a4 	.word	0x0801a1a4

08012bac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b086      	sub	sp, #24
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b2f      	cmp	r3, #47	; 0x2f
 8012bc6:	d00b      	beq.n	8012be0 <follow_path+0x34>
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	2b5c      	cmp	r3, #92	; 0x5c
 8012bce:	d007      	beq.n	8012be0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	699a      	ldr	r2, [r3, #24]
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	609a      	str	r2, [r3, #8]
 8012bd8:	e00d      	b.n	8012bf6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	603b      	str	r3, [r7, #0]
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	2b2f      	cmp	r3, #47	; 0x2f
 8012be6:	d0f8      	beq.n	8012bda <follow_path+0x2e>
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b5c      	cmp	r3, #92	; 0x5c
 8012bee:	d0f4      	beq.n	8012bda <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	2b1f      	cmp	r3, #31
 8012bfc:	d80a      	bhi.n	8012c14 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2280      	movs	r2, #128	; 0x80
 8012c02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c06:	2100      	movs	r1, #0
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f7ff fc1e 	bl	801244a <dir_sdi>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	75fb      	strb	r3, [r7, #23]
 8012c12:	e05b      	b.n	8012ccc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c14:	463b      	mov	r3, r7
 8012c16:	4619      	mov	r1, r3
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff fefd 	bl	8012a18 <create_name>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c22:	7dfb      	ldrb	r3, [r7, #23]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d14c      	bne.n	8012cc2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7ff fe50 	bl	80128ce <dir_find>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c3a:	7dfb      	ldrb	r3, [r7, #23]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d01b      	beq.n	8012c78 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
 8012c42:	2b04      	cmp	r3, #4
 8012c44:	d13f      	bne.n	8012cc6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012c46:	7afb      	ldrb	r3, [r7, #11]
 8012c48:	f003 0320 	and.w	r3, r3, #32
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00b      	beq.n	8012c68 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012c50:	7afb      	ldrb	r3, [r7, #11]
 8012c52:	f003 0304 	and.w	r3, r3, #4
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d031      	beq.n	8012cbe <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2280      	movs	r2, #128	; 0x80
 8012c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012c62:	2300      	movs	r3, #0
 8012c64:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012c66:	e02e      	b.n	8012cc6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012c68:	7afb      	ldrb	r3, [r7, #11]
 8012c6a:	f003 0304 	and.w	r3, r3, #4
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d129      	bne.n	8012cc6 <follow_path+0x11a>
 8012c72:	2305      	movs	r3, #5
 8012c74:	75fb      	strb	r3, [r7, #23]
				break;
 8012c76:	e026      	b.n	8012cc6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c78:	7afb      	ldrb	r3, [r7, #11]
 8012c7a:	f003 0304 	and.w	r3, r3, #4
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d123      	bne.n	8012cca <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	799b      	ldrb	r3, [r3, #6]
 8012c86:	f003 0310 	and.w	r3, r3, #16
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d102      	bne.n	8012c94 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012c8e:	2305      	movs	r3, #5
 8012c90:	75fb      	strb	r3, [r7, #23]
 8012c92:	e01b      	b.n	8012ccc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	695b      	ldr	r3, [r3, #20]
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	8992      	ldrh	r2, [r2, #12]
 8012ca2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ca6:	fb02 f200 	mul.w	r2, r2, r0
 8012caa:	1a9b      	subs	r3, r3, r2
 8012cac:	440b      	add	r3, r1
 8012cae:	4619      	mov	r1, r3
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f7ff fd70 	bl	8012796 <ld_clust>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	609a      	str	r2, [r3, #8]
 8012cbc:	e7aa      	b.n	8012c14 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012cbe:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012cc0:	e7a8      	b.n	8012c14 <follow_path+0x68>
			if (res != FR_OK) break;
 8012cc2:	bf00      	nop
 8012cc4:	e002      	b.n	8012ccc <follow_path+0x120>
				break;
 8012cc6:	bf00      	nop
 8012cc8:	e000      	b.n	8012ccc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012cca:	bf00      	nop
			}
		}
	}

	return res;
 8012ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3718      	adds	r7, #24
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012cd6:	b480      	push	{r7}
 8012cd8:	b087      	sub	sp, #28
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012cde:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d031      	beq.n	8012d50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	617b      	str	r3, [r7, #20]
 8012cf2:	e002      	b.n	8012cfa <get_ldnumber+0x24>
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	617b      	str	r3, [r7, #20]
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	2b20      	cmp	r3, #32
 8012d00:	d903      	bls.n	8012d0a <get_ldnumber+0x34>
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	2b3a      	cmp	r3, #58	; 0x3a
 8012d08:	d1f4      	bne.n	8012cf4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d10:	d11c      	bne.n	8012d4c <get_ldnumber+0x76>
			tp = *path;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	60fa      	str	r2, [r7, #12]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	3b30      	subs	r3, #48	; 0x30
 8012d22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	2b09      	cmp	r3, #9
 8012d28:	d80e      	bhi.n	8012d48 <get_ldnumber+0x72>
 8012d2a:	68fa      	ldr	r2, [r7, #12]
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d10a      	bne.n	8012d48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d107      	bne.n	8012d48 <get_ldnumber+0x72>
					vol = (int)i;
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	617b      	str	r3, [r7, #20]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	697a      	ldr	r2, [r7, #20]
 8012d46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	e002      	b.n	8012d52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d50:	693b      	ldr	r3, [r7, #16]
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	371c      	adds	r7, #28
 8012d56:	46bd      	mov	sp, r7
 8012d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5c:	4770      	bx	lr
	...

08012d60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	70da      	strb	r2, [r3, #3]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f04f 32ff 	mov.w	r2, #4294967295
 8012d76:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f7fe ff8c 	bl	8011c98 <move_window>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d001      	beq.n	8012d8a <check_fs+0x2a>
 8012d86:	2304      	movs	r3, #4
 8012d88:	e038      	b.n	8012dfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	3338      	adds	r3, #56	; 0x38
 8012d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fe fcd0 	bl	8011738 <ld_word>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d001      	beq.n	8012da8 <check_fs+0x48>
 8012da4:	2303      	movs	r3, #3
 8012da6:	e029      	b.n	8012dfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012dae:	2be9      	cmp	r3, #233	; 0xe9
 8012db0:	d009      	beq.n	8012dc6 <check_fs+0x66>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012db8:	2beb      	cmp	r3, #235	; 0xeb
 8012dba:	d11e      	bne.n	8012dfa <check_fs+0x9a>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012dc2:	2b90      	cmp	r3, #144	; 0x90
 8012dc4:	d119      	bne.n	8012dfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	3338      	adds	r3, #56	; 0x38
 8012dca:	3336      	adds	r3, #54	; 0x36
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fe fccb 	bl	8011768 <ld_dword>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012dd8:	4a0a      	ldr	r2, [pc, #40]	; (8012e04 <check_fs+0xa4>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d101      	bne.n	8012de2 <check_fs+0x82>
 8012dde:	2300      	movs	r3, #0
 8012de0:	e00c      	b.n	8012dfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	3338      	adds	r3, #56	; 0x38
 8012de6:	3352      	adds	r3, #82	; 0x52
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fe fcbd 	bl	8011768 <ld_dword>
 8012dee:	4602      	mov	r2, r0
 8012df0:	4b05      	ldr	r3, [pc, #20]	; (8012e08 <check_fs+0xa8>)
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d101      	bne.n	8012dfa <check_fs+0x9a>
 8012df6:	2300      	movs	r3, #0
 8012df8:	e000      	b.n	8012dfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012dfa:	2302      	movs	r3, #2
}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	00544146 	.word	0x00544146
 8012e08:	33544146 	.word	0x33544146

08012e0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b096      	sub	sp, #88	; 0x58
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	4613      	mov	r3, r2
 8012e18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f7ff ff58 	bl	8012cd6 <get_ldnumber>
 8012e26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	da01      	bge.n	8012e32 <find_volume+0x26>
 8012e2e:	230b      	movs	r3, #11
 8012e30:	e268      	b.n	8013304 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e32:	4ab0      	ldr	r2, [pc, #704]	; (80130f4 <find_volume+0x2e8>)
 8012e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d101      	bne.n	8012e46 <find_volume+0x3a>
 8012e42:	230c      	movs	r3, #12
 8012e44:	e25e      	b.n	8013304 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e4c:	79fb      	ldrb	r3, [r7, #7]
 8012e4e:	f023 0301 	bic.w	r3, r3, #1
 8012e52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d01a      	beq.n	8012e92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5e:	785b      	ldrb	r3, [r3, #1]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fe fbcb 	bl	80115fc <disk_status>
 8012e66:	4603      	mov	r3, r0
 8012e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e70:	f003 0301 	and.w	r3, r3, #1
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d10c      	bne.n	8012e92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012e78:	79fb      	ldrb	r3, [r7, #7]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d007      	beq.n	8012e8e <find_volume+0x82>
 8012e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e82:	f003 0304 	and.w	r3, r3, #4
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d001      	beq.n	8012e8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012e8a:	230a      	movs	r3, #10
 8012e8c:	e23a      	b.n	8013304 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e238      	b.n	8013304 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e94:	2200      	movs	r2, #0
 8012e96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea2:	785b      	ldrb	r3, [r3, #1]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7fe fbc3 	bl	8011630 <disk_initialize>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eb4:	f003 0301 	and.w	r3, r3, #1
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d001      	beq.n	8012ec0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ebc:	2303      	movs	r3, #3
 8012ebe:	e221      	b.n	8013304 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ec0:	79fb      	ldrb	r3, [r7, #7]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d007      	beq.n	8012ed6 <find_volume+0xca>
 8012ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eca:	f003 0304 	and.w	r3, r3, #4
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d001      	beq.n	8012ed6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012ed2:	230a      	movs	r3, #10
 8012ed4:	e216      	b.n	8013304 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed8:	7858      	ldrb	r0, [r3, #1]
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	330c      	adds	r3, #12
 8012ede:	461a      	mov	r2, r3
 8012ee0:	2102      	movs	r1, #2
 8012ee2:	f7fe fc0b 	bl	80116fc <disk_ioctl>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d001      	beq.n	8012ef0 <find_volume+0xe4>
 8012eec:	2301      	movs	r3, #1
 8012eee:	e209      	b.n	8013304 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef2:	899b      	ldrh	r3, [r3, #12]
 8012ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ef8:	d80d      	bhi.n	8012f16 <find_volume+0x10a>
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	899b      	ldrh	r3, [r3, #12]
 8012efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f02:	d308      	bcc.n	8012f16 <find_volume+0x10a>
 8012f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f06:	899b      	ldrh	r3, [r3, #12]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0c:	899b      	ldrh	r3, [r3, #12]
 8012f0e:	3b01      	subs	r3, #1
 8012f10:	4013      	ands	r3, r2
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d001      	beq.n	8012f1a <find_volume+0x10e>
 8012f16:	2301      	movs	r3, #1
 8012f18:	e1f4      	b.n	8013304 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f22:	f7ff ff1d 	bl	8012d60 <check_fs>
 8012f26:	4603      	mov	r3, r0
 8012f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d14b      	bne.n	8012fcc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f34:	2300      	movs	r3, #0
 8012f36:	643b      	str	r3, [r7, #64]	; 0x40
 8012f38:	e01f      	b.n	8012f7a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f42:	011b      	lsls	r3, r3, #4
 8012f44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012f48:	4413      	add	r3, r2
 8012f4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4e:	3304      	adds	r3, #4
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d006      	beq.n	8012f64 <find_volume+0x158>
 8012f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f58:	3308      	adds	r3, #8
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fe fc04 	bl	8011768 <ld_dword>
 8012f60:	4602      	mov	r2, r0
 8012f62:	e000      	b.n	8012f66 <find_volume+0x15a>
 8012f64:	2200      	movs	r2, #0
 8012f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012f6e:	440b      	add	r3, r1
 8012f70:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f76:	3301      	adds	r3, #1
 8012f78:	643b      	str	r3, [r7, #64]	; 0x40
 8012f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f7c:	2b03      	cmp	r3, #3
 8012f7e:	d9dc      	bls.n	8012f3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012f80:	2300      	movs	r3, #0
 8012f82:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d002      	beq.n	8012f90 <find_volume+0x184>
 8012f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f92:	009b      	lsls	r3, r3, #2
 8012f94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012f98:	4413      	add	r3, r2
 8012f9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012f9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d005      	beq.n	8012fb2 <find_volume+0x1a6>
 8012fa6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012faa:	f7ff fed9 	bl	8012d60 <check_fs>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	e000      	b.n	8012fb4 <find_volume+0x1a8>
 8012fb2:	2303      	movs	r3, #3
 8012fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d905      	bls.n	8012fcc <find_volume+0x1c0>
 8012fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8012fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fc8:	2b03      	cmp	r3, #3
 8012fca:	d9e1      	bls.n	8012f90 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fd0:	2b04      	cmp	r3, #4
 8012fd2:	d101      	bne.n	8012fd8 <find_volume+0x1cc>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e195      	b.n	8013304 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d901      	bls.n	8012fe4 <find_volume+0x1d8>
 8012fe0:	230d      	movs	r3, #13
 8012fe2:	e18f      	b.n	8013304 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	3338      	adds	r3, #56	; 0x38
 8012fe8:	330b      	adds	r3, #11
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fe fba4 	bl	8011738 <ld_word>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff6:	899b      	ldrh	r3, [r3, #12]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d001      	beq.n	8013000 <find_volume+0x1f4>
 8012ffc:	230d      	movs	r3, #13
 8012ffe:	e181      	b.n	8013304 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013002:	3338      	adds	r3, #56	; 0x38
 8013004:	3316      	adds	r3, #22
 8013006:	4618      	mov	r0, r3
 8013008:	f7fe fb96 	bl	8011738 <ld_word>
 801300c:	4603      	mov	r3, r0
 801300e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <find_volume+0x218>
 8013016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013018:	3338      	adds	r3, #56	; 0x38
 801301a:	3324      	adds	r3, #36	; 0x24
 801301c:	4618      	mov	r0, r3
 801301e:	f7fe fba3 	bl	8011768 <ld_dword>
 8013022:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013028:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013032:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013036:	789b      	ldrb	r3, [r3, #2]
 8013038:	2b01      	cmp	r3, #1
 801303a:	d005      	beq.n	8013048 <find_volume+0x23c>
 801303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303e:	789b      	ldrb	r3, [r3, #2]
 8013040:	2b02      	cmp	r3, #2
 8013042:	d001      	beq.n	8013048 <find_volume+0x23c>
 8013044:	230d      	movs	r3, #13
 8013046:	e15d      	b.n	8013304 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	789b      	ldrb	r3, [r3, #2]
 801304c:	461a      	mov	r2, r3
 801304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013050:	fb02 f303 	mul.w	r3, r2, r3
 8013054:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801305c:	b29a      	uxth	r2, r3
 801305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013060:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013064:	895b      	ldrh	r3, [r3, #10]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d008      	beq.n	801307c <find_volume+0x270>
 801306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306c:	895b      	ldrh	r3, [r3, #10]
 801306e:	461a      	mov	r2, r3
 8013070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013072:	895b      	ldrh	r3, [r3, #10]
 8013074:	3b01      	subs	r3, #1
 8013076:	4013      	ands	r3, r2
 8013078:	2b00      	cmp	r3, #0
 801307a:	d001      	beq.n	8013080 <find_volume+0x274>
 801307c:	230d      	movs	r3, #13
 801307e:	e141      	b.n	8013304 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013082:	3338      	adds	r3, #56	; 0x38
 8013084:	3311      	adds	r3, #17
 8013086:	4618      	mov	r0, r3
 8013088:	f7fe fb56 	bl	8011738 <ld_word>
 801308c:	4603      	mov	r3, r0
 801308e:	461a      	mov	r2, r3
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013096:	891b      	ldrh	r3, [r3, #8]
 8013098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801309a:	8992      	ldrh	r2, [r2, #12]
 801309c:	0952      	lsrs	r2, r2, #5
 801309e:	b292      	uxth	r2, r2
 80130a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80130a4:	fb02 f201 	mul.w	r2, r2, r1
 80130a8:	1a9b      	subs	r3, r3, r2
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d001      	beq.n	80130b4 <find_volume+0x2a8>
 80130b0:	230d      	movs	r3, #13
 80130b2:	e127      	b.n	8013304 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	3338      	adds	r3, #56	; 0x38
 80130b8:	3313      	adds	r3, #19
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7fe fb3c 	bl	8011738 <ld_word>
 80130c0:	4603      	mov	r3, r0
 80130c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80130c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d106      	bne.n	80130d8 <find_volume+0x2cc>
 80130ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130cc:	3338      	adds	r3, #56	; 0x38
 80130ce:	3320      	adds	r3, #32
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fe fb49 	bl	8011768 <ld_dword>
 80130d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80130d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130da:	3338      	adds	r3, #56	; 0x38
 80130dc:	330e      	adds	r3, #14
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fe fb2a 	bl	8011738 <ld_word>
 80130e4:	4603      	mov	r3, r0
 80130e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80130e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d104      	bne.n	80130f8 <find_volume+0x2ec>
 80130ee:	230d      	movs	r3, #13
 80130f0:	e108      	b.n	8013304 <find_volume+0x4f8>
 80130f2:	bf00      	nop
 80130f4:	20042308 	.word	0x20042308

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80130f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130fc:	4413      	add	r3, r2
 80130fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013100:	8911      	ldrh	r1, [r2, #8]
 8013102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013104:	8992      	ldrh	r2, [r2, #12]
 8013106:	0952      	lsrs	r2, r2, #5
 8013108:	b292      	uxth	r2, r2
 801310a:	fbb1 f2f2 	udiv	r2, r1, r2
 801310e:	b292      	uxth	r2, r2
 8013110:	4413      	add	r3, r2
 8013112:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013118:	429a      	cmp	r2, r3
 801311a:	d201      	bcs.n	8013120 <find_volume+0x314>
 801311c:	230d      	movs	r3, #13
 801311e:	e0f1      	b.n	8013304 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013128:	8952      	ldrh	r2, [r2, #10]
 801312a:	fbb3 f3f2 	udiv	r3, r3, r2
 801312e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	2b00      	cmp	r3, #0
 8013134:	d101      	bne.n	801313a <find_volume+0x32e>
 8013136:	230d      	movs	r3, #13
 8013138:	e0e4      	b.n	8013304 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801313a:	2303      	movs	r3, #3
 801313c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013142:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013146:	4293      	cmp	r3, r2
 8013148:	d802      	bhi.n	8013150 <find_volume+0x344>
 801314a:	2302      	movs	r3, #2
 801314c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013156:	4293      	cmp	r3, r2
 8013158:	d802      	bhi.n	8013160 <find_volume+0x354>
 801315a:	2301      	movs	r3, #1
 801315c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	1c9a      	adds	r2, r3, #2
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801316c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801316e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013172:	441a      	add	r2, r3
 8013174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013176:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317c:	441a      	add	r2, r3
 801317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013180:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8013182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013186:	2b03      	cmp	r3, #3
 8013188:	d11e      	bne.n	80131c8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318c:	3338      	adds	r3, #56	; 0x38
 801318e:	332a      	adds	r3, #42	; 0x2a
 8013190:	4618      	mov	r0, r3
 8013192:	f7fe fad1 	bl	8011738 <ld_word>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d001      	beq.n	80131a0 <find_volume+0x394>
 801319c:	230d      	movs	r3, #13
 801319e:	e0b1      	b.n	8013304 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80131a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a2:	891b      	ldrh	r3, [r3, #8]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d001      	beq.n	80131ac <find_volume+0x3a0>
 80131a8:	230d      	movs	r3, #13
 80131aa:	e0ab      	b.n	8013304 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80131ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ae:	3338      	adds	r3, #56	; 0x38
 80131b0:	332c      	adds	r3, #44	; 0x2c
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fe fad8 	bl	8011768 <ld_dword>
 80131b8:	4602      	mov	r2, r0
 80131ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80131be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c0:	69db      	ldr	r3, [r3, #28]
 80131c2:	009b      	lsls	r3, r3, #2
 80131c4:	647b      	str	r3, [r7, #68]	; 0x44
 80131c6:	e01f      	b.n	8013208 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	891b      	ldrh	r3, [r3, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d101      	bne.n	80131d4 <find_volume+0x3c8>
 80131d0:	230d      	movs	r3, #13
 80131d2:	e097      	b.n	8013304 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131da:	441a      	add	r2, r3
 80131dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131de:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80131e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131e4:	2b02      	cmp	r3, #2
 80131e6:	d103      	bne.n	80131f0 <find_volume+0x3e4>
 80131e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ea:	69db      	ldr	r3, [r3, #28]
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	e00a      	b.n	8013206 <find_volume+0x3fa>
 80131f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f2:	69da      	ldr	r2, [r3, #28]
 80131f4:	4613      	mov	r3, r2
 80131f6:	005b      	lsls	r3, r3, #1
 80131f8:	4413      	add	r3, r2
 80131fa:	085a      	lsrs	r2, r3, #1
 80131fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fe:	69db      	ldr	r3, [r3, #28]
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013206:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320a:	6a1a      	ldr	r2, [r3, #32]
 801320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320e:	899b      	ldrh	r3, [r3, #12]
 8013210:	4619      	mov	r1, r3
 8013212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013214:	440b      	add	r3, r1
 8013216:	3b01      	subs	r3, #1
 8013218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801321a:	8989      	ldrh	r1, [r1, #12]
 801321c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013220:	429a      	cmp	r2, r3
 8013222:	d201      	bcs.n	8013228 <find_volume+0x41c>
 8013224:	230d      	movs	r3, #13
 8013226:	e06d      	b.n	8013304 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	f04f 32ff 	mov.w	r2, #4294967295
 801322e:	615a      	str	r2, [r3, #20]
 8013230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013232:	695a      	ldr	r2, [r3, #20]
 8013234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013236:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	2280      	movs	r2, #128	; 0x80
 801323c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801323e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013242:	2b03      	cmp	r3, #3
 8013244:	d149      	bne.n	80132da <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013248:	3338      	adds	r3, #56	; 0x38
 801324a:	3330      	adds	r3, #48	; 0x30
 801324c:	4618      	mov	r0, r3
 801324e:	f7fe fa73 	bl	8011738 <ld_word>
 8013252:	4603      	mov	r3, r0
 8013254:	2b01      	cmp	r3, #1
 8013256:	d140      	bne.n	80132da <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801325a:	3301      	adds	r3, #1
 801325c:	4619      	mov	r1, r3
 801325e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013260:	f7fe fd1a 	bl	8011c98 <move_window>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d137      	bne.n	80132da <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326c:	2200      	movs	r2, #0
 801326e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	3338      	adds	r3, #56	; 0x38
 8013274:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013278:	4618      	mov	r0, r3
 801327a:	f7fe fa5d 	bl	8011738 <ld_word>
 801327e:	4603      	mov	r3, r0
 8013280:	461a      	mov	r2, r3
 8013282:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013286:	429a      	cmp	r2, r3
 8013288:	d127      	bne.n	80132da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328c:	3338      	adds	r3, #56	; 0x38
 801328e:	4618      	mov	r0, r3
 8013290:	f7fe fa6a 	bl	8011768 <ld_dword>
 8013294:	4602      	mov	r2, r0
 8013296:	4b1d      	ldr	r3, [pc, #116]	; (801330c <find_volume+0x500>)
 8013298:	429a      	cmp	r2, r3
 801329a:	d11e      	bne.n	80132da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329e:	3338      	adds	r3, #56	; 0x38
 80132a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7fe fa5f 	bl	8011768 <ld_dword>
 80132aa:	4602      	mov	r2, r0
 80132ac:	4b18      	ldr	r3, [pc, #96]	; (8013310 <find_volume+0x504>)
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d113      	bne.n	80132da <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80132b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b4:	3338      	adds	r3, #56	; 0x38
 80132b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7fe fa54 	bl	8011768 <ld_dword>
 80132c0:	4602      	mov	r2, r0
 80132c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80132c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c8:	3338      	adds	r3, #56	; 0x38
 80132ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fe fa4a 	bl	8011768 <ld_dword>
 80132d4:	4602      	mov	r2, r0
 80132d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80132da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80132e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80132e2:	4b0c      	ldr	r3, [pc, #48]	; (8013314 <find_volume+0x508>)
 80132e4:	881b      	ldrh	r3, [r3, #0]
 80132e6:	3301      	adds	r3, #1
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	4b0a      	ldr	r3, [pc, #40]	; (8013314 <find_volume+0x508>)
 80132ec:	801a      	strh	r2, [r3, #0]
 80132ee:	4b09      	ldr	r3, [pc, #36]	; (8013314 <find_volume+0x508>)
 80132f0:	881a      	ldrh	r2, [r3, #0]
 80132f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80132f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f8:	2200      	movs	r2, #0
 80132fa:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80132fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132fe:	f7fe fc63 	bl	8011bc8 <clear_lock>
#endif
	return FR_OK;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3758      	adds	r7, #88	; 0x58
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	41615252 	.word	0x41615252
 8013310:	61417272 	.word	0x61417272
 8013314:	2004230c 	.word	0x2004230c

08013318 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013322:	2309      	movs	r3, #9
 8013324:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d01c      	beq.n	8013366 <validate+0x4e>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d018      	beq.n	8013366 <validate+0x4e>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d013      	beq.n	8013366 <validate+0x4e>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	889a      	ldrh	r2, [r3, #4]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	88db      	ldrh	r3, [r3, #6]
 8013348:	429a      	cmp	r2, r3
 801334a:	d10c      	bne.n	8013366 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	785b      	ldrb	r3, [r3, #1]
 8013352:	4618      	mov	r0, r3
 8013354:	f7fe f952 	bl	80115fc <disk_status>
 8013358:	4603      	mov	r3, r0
 801335a:	f003 0301 	and.w	r3, r3, #1
 801335e:	2b00      	cmp	r3, #0
 8013360:	d101      	bne.n	8013366 <validate+0x4e>
			res = FR_OK;
 8013362:	2300      	movs	r3, #0
 8013364:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013366:	7bfb      	ldrb	r3, [r7, #15]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d102      	bne.n	8013372 <validate+0x5a>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	e000      	b.n	8013374 <validate+0x5c>
 8013372:	2300      	movs	r3, #0
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	6013      	str	r3, [r2, #0]
	return res;
 8013378:	7bfb      	ldrb	r3, [r7, #15]
}
 801337a:	4618      	mov	r0, r3
 801337c:	3710      	adds	r7, #16
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
	...

08013384 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b088      	sub	sp, #32
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	4613      	mov	r3, r2
 8013390:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013396:	f107 0310 	add.w	r3, r7, #16
 801339a:	4618      	mov	r0, r3
 801339c:	f7ff fc9b 	bl	8012cd6 <get_ldnumber>
 80133a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	da01      	bge.n	80133ac <f_mount+0x28>
 80133a8:	230b      	movs	r3, #11
 80133aa:	e02b      	b.n	8013404 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80133ac:	4a17      	ldr	r2, [pc, #92]	; (801340c <f_mount+0x88>)
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d005      	beq.n	80133c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80133bc:	69b8      	ldr	r0, [r7, #24]
 80133be:	f7fe fc03 	bl	8011bc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	2200      	movs	r2, #0
 80133c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d002      	beq.n	80133d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2200      	movs	r2, #0
 80133d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	490d      	ldr	r1, [pc, #52]	; (801340c <f_mount+0x88>)
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d002      	beq.n	80133ea <f_mount+0x66>
 80133e4:	79fb      	ldrb	r3, [r7, #7]
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d001      	beq.n	80133ee <f_mount+0x6a>
 80133ea:	2300      	movs	r3, #0
 80133ec:	e00a      	b.n	8013404 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80133ee:	f107 010c 	add.w	r1, r7, #12
 80133f2:	f107 0308 	add.w	r3, r7, #8
 80133f6:	2200      	movs	r2, #0
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff fd07 	bl	8012e0c <find_volume>
 80133fe:	4603      	mov	r3, r0
 8013400:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013402:	7dfb      	ldrb	r3, [r7, #23]
}
 8013404:	4618      	mov	r0, r3
 8013406:	3720      	adds	r7, #32
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	20042308 	.word	0x20042308

08013410 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b098      	sub	sp, #96	; 0x60
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	4613      	mov	r3, r2
 801341c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d101      	bne.n	8013428 <f_open+0x18>
 8013424:	2309      	movs	r3, #9
 8013426:	e1ba      	b.n	801379e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013428:	79fb      	ldrb	r3, [r7, #7]
 801342a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801342e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013430:	79fa      	ldrb	r2, [r7, #7]
 8013432:	f107 0110 	add.w	r1, r7, #16
 8013436:	f107 0308 	add.w	r3, r7, #8
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff fce6 	bl	8012e0c <find_volume>
 8013440:	4603      	mov	r3, r0
 8013442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801344a:	2b00      	cmp	r3, #0
 801344c:	f040 819e 	bne.w	801378c <f_open+0x37c>
		dj.obj.fs = fs;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013454:	68ba      	ldr	r2, [r7, #8]
 8013456:	f107 0314 	add.w	r3, r7, #20
 801345a:	4611      	mov	r1, r2
 801345c:	4618      	mov	r0, r3
 801345e:	f7ff fba5 	bl	8012bac <follow_path>
 8013462:	4603      	mov	r3, r0
 8013464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801346c:	2b00      	cmp	r3, #0
 801346e:	d11a      	bne.n	80134a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013470:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013474:	b25b      	sxtb	r3, r3
 8013476:	2b00      	cmp	r3, #0
 8013478:	da03      	bge.n	8013482 <f_open+0x72>
				res = FR_INVALID_NAME;
 801347a:	2306      	movs	r3, #6
 801347c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013480:	e011      	b.n	80134a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013482:	79fb      	ldrb	r3, [r7, #7]
 8013484:	f023 0301 	bic.w	r3, r3, #1
 8013488:	2b00      	cmp	r3, #0
 801348a:	bf14      	ite	ne
 801348c:	2301      	movne	r3, #1
 801348e:	2300      	moveq	r3, #0
 8013490:	b2db      	uxtb	r3, r3
 8013492:	461a      	mov	r2, r3
 8013494:	f107 0314 	add.w	r3, r7, #20
 8013498:	4611      	mov	r1, r2
 801349a:	4618      	mov	r0, r3
 801349c:	f7fe fa4c 	bl	8011938 <chk_lock>
 80134a0:	4603      	mov	r3, r0
 80134a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134a6:	79fb      	ldrb	r3, [r7, #7]
 80134a8:	f003 031c 	and.w	r3, r3, #28
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d07e      	beq.n	80135ae <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80134b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d017      	beq.n	80134e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80134b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134bc:	2b04      	cmp	r3, #4
 80134be:	d10e      	bne.n	80134de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80134c0:	f7fe fa96 	bl	80119f0 <enq_lock>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d006      	beq.n	80134d8 <f_open+0xc8>
 80134ca:	f107 0314 	add.w	r3, r7, #20
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff fa52 	bl	8012978 <dir_register>
 80134d4:	4603      	mov	r3, r0
 80134d6:	e000      	b.n	80134da <f_open+0xca>
 80134d8:	2312      	movs	r3, #18
 80134da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80134de:	79fb      	ldrb	r3, [r7, #7]
 80134e0:	f043 0308 	orr.w	r3, r3, #8
 80134e4:	71fb      	strb	r3, [r7, #7]
 80134e6:	e010      	b.n	801350a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80134e8:	7ebb      	ldrb	r3, [r7, #26]
 80134ea:	f003 0311 	and.w	r3, r3, #17
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d003      	beq.n	80134fa <f_open+0xea>
					res = FR_DENIED;
 80134f2:	2307      	movs	r3, #7
 80134f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134f8:	e007      	b.n	801350a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80134fa:	79fb      	ldrb	r3, [r7, #7]
 80134fc:	f003 0304 	and.w	r3, r3, #4
 8013500:	2b00      	cmp	r3, #0
 8013502:	d002      	beq.n	801350a <f_open+0xfa>
 8013504:	2308      	movs	r3, #8
 8013506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801350a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801350e:	2b00      	cmp	r3, #0
 8013510:	d167      	bne.n	80135e2 <f_open+0x1d2>
 8013512:	79fb      	ldrb	r3, [r7, #7]
 8013514:	f003 0308 	and.w	r3, r3, #8
 8013518:	2b00      	cmp	r3, #0
 801351a:	d062      	beq.n	80135e2 <f_open+0x1d2>
				dw = GET_FATTIME();
 801351c:	4ba2      	ldr	r3, [pc, #648]	; (80137a8 <f_open+0x398>)
 801351e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013522:	330e      	adds	r3, #14
 8013524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013526:	4618      	mov	r0, r3
 8013528:	f7fe f95c 	bl	80117e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801352e:	3316      	adds	r3, #22
 8013530:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013532:	4618      	mov	r0, r3
 8013534:	f7fe f956 	bl	80117e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353a:	330b      	adds	r3, #11
 801353c:	2220      	movs	r2, #32
 801353e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013544:	4611      	mov	r1, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff f925 	bl	8012796 <ld_clust>
 801354c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013552:	2200      	movs	r2, #0
 8013554:	4618      	mov	r0, r3
 8013556:	f7ff f93d 	bl	80127d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355c:	331c      	adds	r3, #28
 801355e:	2100      	movs	r1, #0
 8013560:	4618      	mov	r0, r3
 8013562:	f7fe f93f 	bl	80117e4 <st_dword>
					fs->wflag = 1;
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	2201      	movs	r2, #1
 801356a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801356c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801356e:	2b00      	cmp	r3, #0
 8013570:	d037      	beq.n	80135e2 <f_open+0x1d2>
						dw = fs->winsect;
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013576:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013578:	f107 0314 	add.w	r3, r7, #20
 801357c:	2200      	movs	r2, #0
 801357e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013580:	4618      	mov	r0, r3
 8013582:	f7fe fe2d 	bl	80121e0 <remove_chain>
 8013586:	4603      	mov	r3, r0
 8013588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801358c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013590:	2b00      	cmp	r3, #0
 8013592:	d126      	bne.n	80135e2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013598:	4618      	mov	r0, r3
 801359a:	f7fe fb7d 	bl	8011c98 <move_window>
 801359e:	4603      	mov	r3, r0
 80135a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135a8:	3a01      	subs	r2, #1
 80135aa:	611a      	str	r2, [r3, #16]
 80135ac:	e019      	b.n	80135e2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80135ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d115      	bne.n	80135e2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80135b6:	7ebb      	ldrb	r3, [r7, #26]
 80135b8:	f003 0310 	and.w	r3, r3, #16
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d003      	beq.n	80135c8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80135c0:	2304      	movs	r3, #4
 80135c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135c6:	e00c      	b.n	80135e2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80135c8:	79fb      	ldrb	r3, [r7, #7]
 80135ca:	f003 0302 	and.w	r3, r3, #2
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d007      	beq.n	80135e2 <f_open+0x1d2>
 80135d2:	7ebb      	ldrb	r3, [r7, #26]
 80135d4:	f003 0301 	and.w	r3, r3, #1
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d002      	beq.n	80135e2 <f_open+0x1d2>
						res = FR_DENIED;
 80135dc:	2307      	movs	r3, #7
 80135de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80135e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d128      	bne.n	801363c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80135ea:	79fb      	ldrb	r3, [r7, #7]
 80135ec:	f003 0308 	and.w	r3, r3, #8
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d003      	beq.n	80135fc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80135f4:	79fb      	ldrb	r3, [r7, #7]
 80135f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135fa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	f023 0301 	bic.w	r3, r3, #1
 8013610:	2b00      	cmp	r3, #0
 8013612:	bf14      	ite	ne
 8013614:	2301      	movne	r3, #1
 8013616:	2300      	moveq	r3, #0
 8013618:	b2db      	uxtb	r3, r3
 801361a:	461a      	mov	r2, r3
 801361c:	f107 0314 	add.w	r3, r7, #20
 8013620:	4611      	mov	r1, r2
 8013622:	4618      	mov	r0, r3
 8013624:	f7fe fa06 	bl	8011a34 <inc_lock>
 8013628:	4602      	mov	r2, r0
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	691b      	ldr	r3, [r3, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d102      	bne.n	801363c <f_open+0x22c>
 8013636:	2302      	movs	r3, #2
 8013638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801363c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013640:	2b00      	cmp	r3, #0
 8013642:	f040 80a3 	bne.w	801378c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801364a:	4611      	mov	r1, r2
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff f8a2 	bl	8012796 <ld_clust>
 8013652:	4602      	mov	r2, r0
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801365a:	331c      	adds	r3, #28
 801365c:	4618      	mov	r0, r3
 801365e:	f7fe f883 	bl	8011768 <ld_dword>
 8013662:	4602      	mov	r2, r0
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2200      	movs	r2, #0
 801366c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801366e:	693a      	ldr	r2, [r7, #16]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	88da      	ldrh	r2, [r3, #6]
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	79fa      	ldrb	r2, [r7, #7]
 8013680:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2200      	movs	r2, #0
 8013686:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2200      	movs	r2, #0
 8013692:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	3330      	adds	r3, #48	; 0x30
 8013698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801369c:	2100      	movs	r1, #0
 801369e:	4618      	mov	r0, r3
 80136a0:	f7fe f8ed 	bl	801187e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80136a4:	79fb      	ldrb	r3, [r7, #7]
 80136a6:	f003 0320 	and.w	r3, r3, #32
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d06e      	beq.n	801378c <f_open+0x37c>
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d06a      	beq.n	801378c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	68da      	ldr	r2, [r3, #12]
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	895b      	ldrh	r3, [r3, #10]
 80136c2:	461a      	mov	r2, r3
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	899b      	ldrh	r3, [r3, #12]
 80136c8:	fb03 f302 	mul.w	r3, r3, r2
 80136cc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	689b      	ldr	r3, [r3, #8]
 80136d2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	657b      	str	r3, [r7, #84]	; 0x54
 80136da:	e016      	b.n	801370a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fe fb96 	bl	8011e12 <get_fat>
 80136e6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80136e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d802      	bhi.n	80136f4 <f_open+0x2e4>
 80136ee:	2302      	movs	r3, #2
 80136f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80136f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136fa:	d102      	bne.n	8013702 <f_open+0x2f2>
 80136fc:	2301      	movs	r3, #1
 80136fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013706:	1ad3      	subs	r3, r2, r3
 8013708:	657b      	str	r3, [r7, #84]	; 0x54
 801370a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801370e:	2b00      	cmp	r3, #0
 8013710:	d103      	bne.n	801371a <f_open+0x30a>
 8013712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013716:	429a      	cmp	r2, r3
 8013718:	d8e0      	bhi.n	80136dc <f_open+0x2cc>
				}
				fp->clust = clst;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801371e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013724:	2b00      	cmp	r3, #0
 8013726:	d131      	bne.n	801378c <f_open+0x37c>
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	899b      	ldrh	r3, [r3, #12]
 801372c:	461a      	mov	r2, r3
 801372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013730:	fbb3 f1f2 	udiv	r1, r3, r2
 8013734:	fb02 f201 	mul.w	r2, r2, r1
 8013738:	1a9b      	subs	r3, r3, r2
 801373a:	2b00      	cmp	r3, #0
 801373c:	d026      	beq.n	801378c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013742:	4618      	mov	r0, r3
 8013744:	f7fe fb46 	bl	8011dd4 <clust2sect>
 8013748:	6478      	str	r0, [r7, #68]	; 0x44
 801374a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801374c:	2b00      	cmp	r3, #0
 801374e:	d103      	bne.n	8013758 <f_open+0x348>
						res = FR_INT_ERR;
 8013750:	2302      	movs	r3, #2
 8013752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013756:	e019      	b.n	801378c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	899b      	ldrh	r3, [r3, #12]
 801375c:	461a      	mov	r2, r3
 801375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013760:	fbb3 f2f2 	udiv	r2, r3, r2
 8013764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013766:	441a      	add	r2, r3
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	7858      	ldrb	r0, [r3, #1]
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	6a1a      	ldr	r2, [r3, #32]
 801377a:	2301      	movs	r3, #1
 801377c:	f7fd ff7e 	bl	801167c <disk_read>
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	d002      	beq.n	801378c <f_open+0x37c>
 8013786:	2301      	movs	r3, #1
 8013788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801378c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013790:	2b00      	cmp	r3, #0
 8013792:	d002      	beq.n	801379a <f_open+0x38a>
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	2200      	movs	r2, #0
 8013798:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801379a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3760      	adds	r7, #96	; 0x60
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	274a0000 	.word	0x274a0000

080137ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08e      	sub	sp, #56	; 0x38
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f107 0214 	add.w	r2, r7, #20
 80137ca:	4611      	mov	r1, r2
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff fda3 	bl	8013318 <validate>
 80137d2:	4603      	mov	r3, r0
 80137d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80137d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d107      	bne.n	80137f0 <f_read+0x44>
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	7d5b      	ldrb	r3, [r3, #21]
 80137e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80137e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <f_read+0x4a>
 80137f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137f4:	e135      	b.n	8013a62 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	7d1b      	ldrb	r3, [r3, #20]
 80137fa:	f003 0301 	and.w	r3, r3, #1
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d101      	bne.n	8013806 <f_read+0x5a>
 8013802:	2307      	movs	r3, #7
 8013804:	e12d      	b.n	8013a62 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	68da      	ldr	r2, [r3, #12]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	699b      	ldr	r3, [r3, #24]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	6a3b      	ldr	r3, [r7, #32]
 8013816:	429a      	cmp	r2, r3
 8013818:	f240 811e 	bls.w	8013a58 <f_read+0x2ac>
 801381c:	6a3b      	ldr	r3, [r7, #32]
 801381e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013820:	e11a      	b.n	8013a58 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	699b      	ldr	r3, [r3, #24]
 8013826:	697a      	ldr	r2, [r7, #20]
 8013828:	8992      	ldrh	r2, [r2, #12]
 801382a:	fbb3 f1f2 	udiv	r1, r3, r2
 801382e:	fb02 f201 	mul.w	r2, r2, r1
 8013832:	1a9b      	subs	r3, r3, r2
 8013834:	2b00      	cmp	r3, #0
 8013836:	f040 80d5 	bne.w	80139e4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	699b      	ldr	r3, [r3, #24]
 801383e:	697a      	ldr	r2, [r7, #20]
 8013840:	8992      	ldrh	r2, [r2, #12]
 8013842:	fbb3 f3f2 	udiv	r3, r3, r2
 8013846:	697a      	ldr	r2, [r7, #20]
 8013848:	8952      	ldrh	r2, [r2, #10]
 801384a:	3a01      	subs	r2, #1
 801384c:	4013      	ands	r3, r2
 801384e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d12f      	bne.n	80138b6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	699b      	ldr	r3, [r3, #24]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d103      	bne.n	8013866 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	689b      	ldr	r3, [r3, #8]
 8013862:	633b      	str	r3, [r7, #48]	; 0x30
 8013864:	e013      	b.n	801388e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386a:	2b00      	cmp	r3, #0
 801386c:	d007      	beq.n	801387e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	699b      	ldr	r3, [r3, #24]
 8013872:	4619      	mov	r1, r3
 8013874:	68f8      	ldr	r0, [r7, #12]
 8013876:	f7fe fdb0 	bl	80123da <clmt_clust>
 801387a:	6338      	str	r0, [r7, #48]	; 0x30
 801387c:	e007      	b.n	801388e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801387e:	68fa      	ldr	r2, [r7, #12]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	69db      	ldr	r3, [r3, #28]
 8013884:	4619      	mov	r1, r3
 8013886:	4610      	mov	r0, r2
 8013888:	f7fe fac3 	bl	8011e12 <get_fat>
 801388c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013890:	2b01      	cmp	r3, #1
 8013892:	d804      	bhi.n	801389e <f_read+0xf2>
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2202      	movs	r2, #2
 8013898:	755a      	strb	r2, [r3, #21]
 801389a:	2302      	movs	r3, #2
 801389c:	e0e1      	b.n	8013a62 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a4:	d104      	bne.n	80138b0 <f_read+0x104>
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2201      	movs	r2, #1
 80138aa:	755a      	strb	r2, [r3, #21]
 80138ac:	2301      	movs	r3, #1
 80138ae:	e0d8      	b.n	8013a62 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80138b6:	697a      	ldr	r2, [r7, #20]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	69db      	ldr	r3, [r3, #28]
 80138bc:	4619      	mov	r1, r3
 80138be:	4610      	mov	r0, r2
 80138c0:	f7fe fa88 	bl	8011dd4 <clust2sect>
 80138c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80138c6:	69bb      	ldr	r3, [r7, #24]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d104      	bne.n	80138d6 <f_read+0x12a>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2202      	movs	r2, #2
 80138d0:	755a      	strb	r2, [r3, #21]
 80138d2:	2302      	movs	r3, #2
 80138d4:	e0c5      	b.n	8013a62 <f_read+0x2b6>
			sect += csect;
 80138d6:	69ba      	ldr	r2, [r7, #24]
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	4413      	add	r3, r2
 80138dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	899b      	ldrh	r3, [r3, #12]
 80138e2:	461a      	mov	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80138ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d041      	beq.n	8013976 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80138f2:	69fa      	ldr	r2, [r7, #28]
 80138f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f6:	4413      	add	r3, r2
 80138f8:	697a      	ldr	r2, [r7, #20]
 80138fa:	8952      	ldrh	r2, [r2, #10]
 80138fc:	4293      	cmp	r3, r2
 80138fe:	d905      	bls.n	801390c <f_read+0x160>
					cc = fs->csize - csect;
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	895b      	ldrh	r3, [r3, #10]
 8013904:	461a      	mov	r2, r3
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	1ad3      	subs	r3, r2, r3
 801390a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	7858      	ldrb	r0, [r3, #1]
 8013910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013912:	69ba      	ldr	r2, [r7, #24]
 8013914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013916:	f7fd feb1 	bl	801167c <disk_read>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d004      	beq.n	801392a <f_read+0x17e>
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2201      	movs	r2, #1
 8013924:	755a      	strb	r2, [r3, #21]
 8013926:	2301      	movs	r3, #1
 8013928:	e09b      	b.n	8013a62 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	7d1b      	ldrb	r3, [r3, #20]
 801392e:	b25b      	sxtb	r3, r3
 8013930:	2b00      	cmp	r3, #0
 8013932:	da18      	bge.n	8013966 <f_read+0x1ba>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	6a1a      	ldr	r2, [r3, #32]
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801393e:	429a      	cmp	r2, r3
 8013940:	d911      	bls.n	8013966 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	6a1a      	ldr	r2, [r3, #32]
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	697a      	ldr	r2, [r7, #20]
 801394c:	8992      	ldrh	r2, [r2, #12]
 801394e:	fb02 f303 	mul.w	r3, r2, r3
 8013952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013954:	18d0      	adds	r0, r2, r3
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	899b      	ldrh	r3, [r3, #12]
 8013960:	461a      	mov	r2, r3
 8013962:	f7fd ff6b 	bl	801183c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	899b      	ldrh	r3, [r3, #12]
 801396a:	461a      	mov	r2, r3
 801396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396e:	fb02 f303 	mul.w	r3, r2, r3
 8013972:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013974:	e05c      	b.n	8013a30 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	6a1b      	ldr	r3, [r3, #32]
 801397a:	69ba      	ldr	r2, [r7, #24]
 801397c:	429a      	cmp	r2, r3
 801397e:	d02e      	beq.n	80139de <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	7d1b      	ldrb	r3, [r3, #20]
 8013984:	b25b      	sxtb	r3, r3
 8013986:	2b00      	cmp	r3, #0
 8013988:	da18      	bge.n	80139bc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	7858      	ldrb	r0, [r3, #1]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6a1a      	ldr	r2, [r3, #32]
 8013998:	2301      	movs	r3, #1
 801399a:	f7fd fe8f 	bl	80116bc <disk_write>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d004      	beq.n	80139ae <f_read+0x202>
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2201      	movs	r2, #1
 80139a8:	755a      	strb	r2, [r3, #21]
 80139aa:	2301      	movs	r3, #1
 80139ac:	e059      	b.n	8013a62 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	7d1b      	ldrb	r3, [r3, #20]
 80139b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139b6:	b2da      	uxtb	r2, r3
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	7858      	ldrb	r0, [r3, #1]
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139c6:	2301      	movs	r3, #1
 80139c8:	69ba      	ldr	r2, [r7, #24]
 80139ca:	f7fd fe57 	bl	801167c <disk_read>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d004      	beq.n	80139de <f_read+0x232>
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2201      	movs	r2, #1
 80139d8:	755a      	strb	r2, [r3, #21]
 80139da:	2301      	movs	r3, #1
 80139dc:	e041      	b.n	8013a62 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	69ba      	ldr	r2, [r7, #24]
 80139e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	899b      	ldrh	r3, [r3, #12]
 80139e8:	4618      	mov	r0, r3
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	699b      	ldr	r3, [r3, #24]
 80139ee:	697a      	ldr	r2, [r7, #20]
 80139f0:	8992      	ldrh	r2, [r2, #12]
 80139f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80139f6:	fb02 f201 	mul.w	r2, r2, r1
 80139fa:	1a9b      	subs	r3, r3, r2
 80139fc:	1ac3      	subs	r3, r0, r3
 80139fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d901      	bls.n	8013a0c <f_read+0x260>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	699b      	ldr	r3, [r3, #24]
 8013a16:	697a      	ldr	r2, [r7, #20]
 8013a18:	8992      	ldrh	r2, [r2, #12]
 8013a1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a1e:	fb02 f200 	mul.w	r2, r2, r0
 8013a22:	1a9b      	subs	r3, r3, r2
 8013a24:	440b      	add	r3, r1
 8013a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a28:	4619      	mov	r1, r3
 8013a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a2c:	f7fd ff06 	bl	801183c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a34:	4413      	add	r3, r2
 8013a36:	627b      	str	r3, [r7, #36]	; 0x24
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	699a      	ldr	r2, [r3, #24]
 8013a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3e:	441a      	add	r2, r3
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	619a      	str	r2, [r3, #24]
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a4a:	441a      	add	r2, r3
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	601a      	str	r2, [r3, #0]
 8013a50:	687a      	ldr	r2, [r7, #4]
 8013a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f47f aee1 	bne.w	8013822 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3738      	adds	r7, #56	; 0x38
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b08c      	sub	sp, #48	; 0x30
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	60f8      	str	r0, [r7, #12]
 8013a72:	60b9      	str	r1, [r7, #8]
 8013a74:	607a      	str	r2, [r7, #4]
 8013a76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	f107 0210 	add.w	r2, r7, #16
 8013a88:	4611      	mov	r1, r2
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7ff fc44 	bl	8013318 <validate>
 8013a90:	4603      	mov	r3, r0
 8013a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d107      	bne.n	8013aae <f_write+0x44>
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	7d5b      	ldrb	r3, [r3, #21]
 8013aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d002      	beq.n	8013ab4 <f_write+0x4a>
 8013aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ab2:	e16a      	b.n	8013d8a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	7d1b      	ldrb	r3, [r3, #20]
 8013ab8:	f003 0302 	and.w	r3, r3, #2
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d101      	bne.n	8013ac4 <f_write+0x5a>
 8013ac0:	2307      	movs	r3, #7
 8013ac2:	e162      	b.n	8013d8a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	699a      	ldr	r2, [r3, #24]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	441a      	add	r2, r3
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	699b      	ldr	r3, [r3, #24]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	f080 814c 	bcs.w	8013d6e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	699b      	ldr	r3, [r3, #24]
 8013ada:	43db      	mvns	r3, r3
 8013adc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013ade:	e146      	b.n	8013d6e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	699b      	ldr	r3, [r3, #24]
 8013ae4:	693a      	ldr	r2, [r7, #16]
 8013ae6:	8992      	ldrh	r2, [r2, #12]
 8013ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013aec:	fb02 f201 	mul.w	r2, r2, r1
 8013af0:	1a9b      	subs	r3, r3, r2
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	f040 80f1 	bne.w	8013cda <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	699b      	ldr	r3, [r3, #24]
 8013afc:	693a      	ldr	r2, [r7, #16]
 8013afe:	8992      	ldrh	r2, [r2, #12]
 8013b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b04:	693a      	ldr	r2, [r7, #16]
 8013b06:	8952      	ldrh	r2, [r2, #10]
 8013b08:	3a01      	subs	r2, #1
 8013b0a:	4013      	ands	r3, r2
 8013b0c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013b0e:	69bb      	ldr	r3, [r7, #24]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d143      	bne.n	8013b9c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	699b      	ldr	r3, [r3, #24]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d10c      	bne.n	8013b36 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	689b      	ldr	r3, [r3, #8]
 8013b20:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d11a      	bne.n	8013b5e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7fe fbbc 	bl	80122aa <create_chain>
 8013b32:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b34:	e013      	b.n	8013b5e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d007      	beq.n	8013b4e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	699b      	ldr	r3, [r3, #24]
 8013b42:	4619      	mov	r1, r3
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f7fe fc48 	bl	80123da <clmt_clust>
 8013b4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b4c:	e007      	b.n	8013b5e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b4e:	68fa      	ldr	r2, [r7, #12]
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	69db      	ldr	r3, [r3, #28]
 8013b54:	4619      	mov	r1, r3
 8013b56:	4610      	mov	r0, r2
 8013b58:	f7fe fba7 	bl	80122aa <create_chain>
 8013b5c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f000 8109 	beq.w	8013d78 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d104      	bne.n	8013b76 <f_write+0x10c>
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2202      	movs	r2, #2
 8013b70:	755a      	strb	r2, [r3, #21]
 8013b72:	2302      	movs	r3, #2
 8013b74:	e109      	b.n	8013d8a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b7c:	d104      	bne.n	8013b88 <f_write+0x11e>
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	755a      	strb	r2, [r3, #21]
 8013b84:	2301      	movs	r3, #1
 8013b86:	e100      	b.n	8013d8a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b8c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d102      	bne.n	8013b9c <f_write+0x132>
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b9a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ba0:	b25b      	sxtb	r3, r3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	da18      	bge.n	8013bd8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	7858      	ldrb	r0, [r3, #1]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	6a1a      	ldr	r2, [r3, #32]
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	f7fd fd81 	bl	80116bc <disk_write>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d004      	beq.n	8013bca <f_write+0x160>
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	755a      	strb	r2, [r3, #21]
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e0df      	b.n	8013d8a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	7d1b      	ldrb	r3, [r3, #20]
 8013bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bd2:	b2da      	uxtb	r2, r3
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013bd8:	693a      	ldr	r2, [r7, #16]
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	69db      	ldr	r3, [r3, #28]
 8013bde:	4619      	mov	r1, r3
 8013be0:	4610      	mov	r0, r2
 8013be2:	f7fe f8f7 	bl	8011dd4 <clust2sect>
 8013be6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d104      	bne.n	8013bf8 <f_write+0x18e>
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	755a      	strb	r2, [r3, #21]
 8013bf4:	2302      	movs	r3, #2
 8013bf6:	e0c8      	b.n	8013d8a <f_write+0x320>
			sect += csect;
 8013bf8:	697a      	ldr	r2, [r7, #20]
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	899b      	ldrh	r3, [r3, #12]
 8013c04:	461a      	mov	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c0c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d043      	beq.n	8013c9c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c14:	69ba      	ldr	r2, [r7, #24]
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	4413      	add	r3, r2
 8013c1a:	693a      	ldr	r2, [r7, #16]
 8013c1c:	8952      	ldrh	r2, [r2, #10]
 8013c1e:	4293      	cmp	r3, r2
 8013c20:	d905      	bls.n	8013c2e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	895b      	ldrh	r3, [r3, #10]
 8013c26:	461a      	mov	r2, r3
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	1ad3      	subs	r3, r2, r3
 8013c2c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	7858      	ldrb	r0, [r3, #1]
 8013c32:	6a3b      	ldr	r3, [r7, #32]
 8013c34:	697a      	ldr	r2, [r7, #20]
 8013c36:	69f9      	ldr	r1, [r7, #28]
 8013c38:	f7fd fd40 	bl	80116bc <disk_write>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d004      	beq.n	8013c4c <f_write+0x1e2>
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2201      	movs	r2, #1
 8013c46:	755a      	strb	r2, [r3, #21]
 8013c48:	2301      	movs	r3, #1
 8013c4a:	e09e      	b.n	8013d8a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	6a1a      	ldr	r2, [r3, #32]
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	6a3a      	ldr	r2, [r7, #32]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d918      	bls.n	8013c8c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6a1a      	ldr	r2, [r3, #32]
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	1ad3      	subs	r3, r2, r3
 8013c68:	693a      	ldr	r2, [r7, #16]
 8013c6a:	8992      	ldrh	r2, [r2, #12]
 8013c6c:	fb02 f303 	mul.w	r3, r2, r3
 8013c70:	69fa      	ldr	r2, [r7, #28]
 8013c72:	18d1      	adds	r1, r2, r3
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	899b      	ldrh	r3, [r3, #12]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	f7fd fddf 	bl	801183c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	7d1b      	ldrb	r3, [r3, #20]
 8013c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c86:	b2da      	uxtb	r2, r3
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	899b      	ldrh	r3, [r3, #12]
 8013c90:	461a      	mov	r2, r3
 8013c92:	6a3b      	ldr	r3, [r7, #32]
 8013c94:	fb02 f303 	mul.w	r3, r2, r3
 8013c98:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013c9a:	e04b      	b.n	8013d34 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	6a1b      	ldr	r3, [r3, #32]
 8013ca0:	697a      	ldr	r2, [r7, #20]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d016      	beq.n	8013cd4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	699a      	ldr	r2, [r3, #24]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d210      	bcs.n	8013cd4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	7858      	ldrb	r0, [r3, #1]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	697a      	ldr	r2, [r7, #20]
 8013cc0:	f7fd fcdc 	bl	801167c <disk_read>
 8013cc4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d004      	beq.n	8013cd4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2201      	movs	r2, #1
 8013cce:	755a      	strb	r2, [r3, #21]
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e05a      	b.n	8013d8a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	697a      	ldr	r2, [r7, #20]
 8013cd8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	899b      	ldrh	r3, [r3, #12]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	699b      	ldr	r3, [r3, #24]
 8013ce4:	693a      	ldr	r2, [r7, #16]
 8013ce6:	8992      	ldrh	r2, [r2, #12]
 8013ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013cec:	fb02 f201 	mul.w	r2, r2, r1
 8013cf0:	1a9b      	subs	r3, r3, r2
 8013cf2:	1ac3      	subs	r3, r0, r3
 8013cf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d901      	bls.n	8013d02 <f_write+0x298>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	699b      	ldr	r3, [r3, #24]
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	8992      	ldrh	r2, [r2, #12]
 8013d10:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d14:	fb02 f200 	mul.w	r2, r2, r0
 8013d18:	1a9b      	subs	r3, r3, r2
 8013d1a:	440b      	add	r3, r1
 8013d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d1e:	69f9      	ldr	r1, [r7, #28]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fd fd8b 	bl	801183c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	7d1b      	ldrb	r3, [r3, #20]
 8013d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013d34:	69fa      	ldr	r2, [r7, #28]
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	4413      	add	r3, r2
 8013d3a:	61fb      	str	r3, [r7, #28]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	699a      	ldr	r2, [r3, #24]
 8013d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d42:	441a      	add	r2, r3
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	619a      	str	r2, [r3, #24]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	68da      	ldr	r2, [r3, #12]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	699b      	ldr	r3, [r3, #24]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	bf38      	it	cc
 8013d54:	461a      	movcc	r2, r3
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	60da      	str	r2, [r3, #12]
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	681a      	ldr	r2, [r3, #0]
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d60:	441a      	add	r2, r3
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	1ad3      	subs	r3, r2, r3
 8013d6c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f47f aeb5 	bne.w	8013ae0 <f_write+0x76>
 8013d76:	e000      	b.n	8013d7a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d78:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	7d1b      	ldrb	r3, [r3, #20]
 8013d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d82:	b2da      	uxtb	r2, r3
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3730      	adds	r7, #48	; 0x30
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
	...

08013d94 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b086      	sub	sp, #24
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f107 0208 	add.w	r2, r7, #8
 8013da2:	4611      	mov	r1, r2
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7ff fab7 	bl	8013318 <validate>
 8013daa:	4603      	mov	r3, r0
 8013dac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013dae:	7dfb      	ldrb	r3, [r7, #23]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d167      	bne.n	8013e84 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	7d1b      	ldrb	r3, [r3, #20]
 8013db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d061      	beq.n	8013e84 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	7d1b      	ldrb	r3, [r3, #20]
 8013dc4:	b25b      	sxtb	r3, r3
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	da15      	bge.n	8013df6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	7858      	ldrb	r0, [r3, #1]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6a1a      	ldr	r2, [r3, #32]
 8013dd8:	2301      	movs	r3, #1
 8013dda:	f7fd fc6f 	bl	80116bc <disk_write>
 8013dde:	4603      	mov	r3, r0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d001      	beq.n	8013de8 <f_sync+0x54>
 8013de4:	2301      	movs	r3, #1
 8013de6:	e04e      	b.n	8013e86 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	7d1b      	ldrb	r3, [r3, #20]
 8013dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013df0:	b2da      	uxtb	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013df6:	4b26      	ldr	r3, [pc, #152]	; (8013e90 <f_sync+0xfc>)
 8013df8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013dfa:	68ba      	ldr	r2, [r7, #8]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e00:	4619      	mov	r1, r3
 8013e02:	4610      	mov	r0, r2
 8013e04:	f7fd ff48 	bl	8011c98 <move_window>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013e0c:	7dfb      	ldrb	r3, [r7, #23]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d138      	bne.n	8013e84 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e16:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	330b      	adds	r3, #11
 8013e1c:	781a      	ldrb	r2, [r3, #0]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	330b      	adds	r3, #11
 8013e22:	f042 0220 	orr.w	r2, r2, #32
 8013e26:	b2d2      	uxtb	r2, r2
 8013e28:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	461a      	mov	r2, r3
 8013e34:	68f9      	ldr	r1, [r7, #12]
 8013e36:	f7fe fccd 	bl	80127d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	f103 021c 	add.w	r2, r3, #28
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	4619      	mov	r1, r3
 8013e46:	4610      	mov	r0, r2
 8013e48:	f7fd fccc 	bl	80117e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3316      	adds	r3, #22
 8013e50:	6939      	ldr	r1, [r7, #16]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7fd fcc6 	bl	80117e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	3312      	adds	r3, #18
 8013e5c:	2100      	movs	r1, #0
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7fd fca5 	bl	80117ae <st_word>
					fs->wflag = 1;
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	2201      	movs	r2, #1
 8013e68:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7fd ff41 	bl	8011cf4 <sync_fs>
 8013e72:	4603      	mov	r3, r0
 8013e74:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	7d1b      	ldrb	r3, [r3, #20]
 8013e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e7e:	b2da      	uxtb	r2, r3
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3718      	adds	r7, #24
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	274a0000 	.word	0x274a0000

08013e94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f7ff ff79 	bl	8013d94 <f_sync>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013ea6:	7bfb      	ldrb	r3, [r7, #15]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d118      	bne.n	8013ede <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f107 0208 	add.w	r2, r7, #8
 8013eb2:	4611      	mov	r1, r2
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7ff fa2f 	bl	8013318 <validate>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013ebe:	7bfb      	ldrb	r3, [r7, #15]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d10c      	bne.n	8013ede <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fd fe41 	bl	8011b50 <dec_lock>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013ed2:	7bfb      	ldrb	r3, [r7, #15]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d102      	bne.n	8013ede <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2200      	movs	r2, #0
 8013edc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013ee8:	b590      	push	{r4, r7, lr}
 8013eea:	b091      	sub	sp, #68	; 0x44
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013ef0:	f107 0108 	add.w	r1, r7, #8
 8013ef4:	1d3b      	adds	r3, r7, #4
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fe ff87 	bl	8012e0c <find_volume>
 8013efe:	4603      	mov	r3, r0
 8013f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013f04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d131      	bne.n	8013f70 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	f107 030c 	add.w	r3, r7, #12
 8013f16:	4611      	mov	r1, r2
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7fe fe47 	bl	8012bac <follow_path>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d11a      	bne.n	8013f62 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013f30:	b25b      	sxtb	r3, r3
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	da03      	bge.n	8013f3e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	697a      	ldr	r2, [r7, #20]
 8013f3a:	619a      	str	r2, [r3, #24]
 8013f3c:	e011      	b.n	8013f62 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013f3e:	7cbb      	ldrb	r3, [r7, #18]
 8013f40:	f003 0310 	and.w	r3, r3, #16
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d009      	beq.n	8013f5c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f4c:	68bc      	ldr	r4, [r7, #8]
 8013f4e:	4611      	mov	r1, r2
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7fe fc20 	bl	8012796 <ld_clust>
 8013f56:	4603      	mov	r3, r0
 8013f58:	61a3      	str	r3, [r4, #24]
 8013f5a:	e002      	b.n	8013f62 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013f5c:	2305      	movs	r3, #5
 8013f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013f62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f66:	2b04      	cmp	r3, #4
 8013f68:	d102      	bne.n	8013f70 <f_chdir+0x88>
 8013f6a:	2305      	movs	r3, #5
 8013f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3744      	adds	r7, #68	; 0x44
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd90      	pop	{r4, r7, pc}

08013f7c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b090      	sub	sp, #64	; 0x40
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f107 0208 	add.w	r2, r7, #8
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7ff f9c2 	bl	8013318 <validate>
 8013f94:	4603      	mov	r3, r0
 8013f96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013f9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d103      	bne.n	8013faa <f_lseek+0x2e>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	7d5b      	ldrb	r3, [r3, #21]
 8013fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013faa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d002      	beq.n	8013fb8 <f_lseek+0x3c>
 8013fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fb6:	e201      	b.n	80143bc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f000 80d9 	beq.w	8014174 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fc8:	d15a      	bne.n	8014080 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fce:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd2:	1d1a      	adds	r2, r3, #4
 8013fd4:	627a      	str	r2, [r7, #36]	; 0x24
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	617b      	str	r3, [r7, #20]
 8013fda:	2302      	movs	r3, #2
 8013fdc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	689b      	ldr	r3, [r3, #8]
 8013fe2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d03a      	beq.n	8014060 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fec:	613b      	str	r3, [r7, #16]
 8013fee:	2300      	movs	r3, #0
 8013ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	3302      	adds	r3, #2
 8013ff6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffa:	60fb      	str	r3, [r7, #12]
 8013ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffe:	3301      	adds	r3, #1
 8014000:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014006:	4618      	mov	r0, r3
 8014008:	f7fd ff03 	bl	8011e12 <get_fat>
 801400c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014010:	2b01      	cmp	r3, #1
 8014012:	d804      	bhi.n	801401e <f_lseek+0xa2>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2202      	movs	r2, #2
 8014018:	755a      	strb	r2, [r3, #21]
 801401a:	2302      	movs	r3, #2
 801401c:	e1ce      	b.n	80143bc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014024:	d104      	bne.n	8014030 <f_lseek+0xb4>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2201      	movs	r2, #1
 801402a:	755a      	strb	r2, [r3, #21]
 801402c:	2301      	movs	r3, #1
 801402e:	e1c5      	b.n	80143bc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	3301      	adds	r3, #1
 8014034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014036:	429a      	cmp	r2, r3
 8014038:	d0de      	beq.n	8013ff8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801403a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	429a      	cmp	r2, r3
 8014040:	d809      	bhi.n	8014056 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014044:	1d1a      	adds	r2, r3, #4
 8014046:	627a      	str	r2, [r7, #36]	; 0x24
 8014048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801404a:	601a      	str	r2, [r3, #0]
 801404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404e:	1d1a      	adds	r2, r3, #4
 8014050:	627a      	str	r2, [r7, #36]	; 0x24
 8014052:	693a      	ldr	r2, [r7, #16]
 8014054:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	69db      	ldr	r3, [r3, #28]
 801405a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801405c:	429a      	cmp	r2, r3
 801405e:	d3c4      	bcc.n	8013fea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014066:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	429a      	cmp	r2, r3
 801406e:	d803      	bhi.n	8014078 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014072:	2200      	movs	r2, #0
 8014074:	601a      	str	r2, [r3, #0]
 8014076:	e19f      	b.n	80143b8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014078:	2311      	movs	r3, #17
 801407a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801407e:	e19b      	b.n	80143b8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	683a      	ldr	r2, [r7, #0]
 8014086:	429a      	cmp	r2, r3
 8014088:	d902      	bls.n	8014090 <f_lseek+0x114>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	f000 818d 	beq.w	80143b8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	3b01      	subs	r3, #1
 80140a2:	4619      	mov	r1, r3
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7fe f998 	bl	80123da <clmt_clust>
 80140aa:	4602      	mov	r2, r0
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80140b0:	68ba      	ldr	r2, [r7, #8]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	69db      	ldr	r3, [r3, #28]
 80140b6:	4619      	mov	r1, r3
 80140b8:	4610      	mov	r0, r2
 80140ba:	f7fd fe8b 	bl	8011dd4 <clust2sect>
 80140be:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d104      	bne.n	80140d0 <f_lseek+0x154>
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2202      	movs	r2, #2
 80140ca:	755a      	strb	r2, [r3, #21]
 80140cc:	2302      	movs	r3, #2
 80140ce:	e175      	b.n	80143bc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	3b01      	subs	r3, #1
 80140d4:	68ba      	ldr	r2, [r7, #8]
 80140d6:	8992      	ldrh	r2, [r2, #12]
 80140d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	8952      	ldrh	r2, [r2, #10]
 80140e0:	3a01      	subs	r2, #1
 80140e2:	4013      	ands	r3, r2
 80140e4:	69ba      	ldr	r2, [r7, #24]
 80140e6:	4413      	add	r3, r2
 80140e8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	699b      	ldr	r3, [r3, #24]
 80140ee:	68ba      	ldr	r2, [r7, #8]
 80140f0:	8992      	ldrh	r2, [r2, #12]
 80140f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80140f6:	fb02 f201 	mul.w	r2, r2, r1
 80140fa:	1a9b      	subs	r3, r3, r2
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f000 815b 	beq.w	80143b8 <f_lseek+0x43c>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a1b      	ldr	r3, [r3, #32]
 8014106:	69ba      	ldr	r2, [r7, #24]
 8014108:	429a      	cmp	r2, r3
 801410a:	f000 8155 	beq.w	80143b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	7d1b      	ldrb	r3, [r3, #20]
 8014112:	b25b      	sxtb	r3, r3
 8014114:	2b00      	cmp	r3, #0
 8014116:	da18      	bge.n	801414a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	7858      	ldrb	r0, [r3, #1]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a1a      	ldr	r2, [r3, #32]
 8014126:	2301      	movs	r3, #1
 8014128:	f7fd fac8 	bl	80116bc <disk_write>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d004      	beq.n	801413c <f_lseek+0x1c0>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2201      	movs	r2, #1
 8014136:	755a      	strb	r2, [r3, #21]
 8014138:	2301      	movs	r3, #1
 801413a:	e13f      	b.n	80143bc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	7d1b      	ldrb	r3, [r3, #20]
 8014140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014144:	b2da      	uxtb	r2, r3
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	7858      	ldrb	r0, [r3, #1]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014154:	2301      	movs	r3, #1
 8014156:	69ba      	ldr	r2, [r7, #24]
 8014158:	f7fd fa90 	bl	801167c <disk_read>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d004      	beq.n	801416c <f_lseek+0x1f0>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2201      	movs	r2, #1
 8014166:	755a      	strb	r2, [r3, #21]
 8014168:	2301      	movs	r3, #1
 801416a:	e127      	b.n	80143bc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	69ba      	ldr	r2, [r7, #24]
 8014170:	621a      	str	r2, [r3, #32]
 8014172:	e121      	b.n	80143b8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	683a      	ldr	r2, [r7, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d908      	bls.n	8014190 <f_lseek+0x214>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	7d1b      	ldrb	r3, [r3, #20]
 8014182:	f003 0302 	and.w	r3, r3, #2
 8014186:	2b00      	cmp	r3, #0
 8014188:	d102      	bne.n	8014190 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	68db      	ldr	r3, [r3, #12]
 801418e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	699b      	ldr	r3, [r3, #24]
 8014194:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014196:	2300      	movs	r3, #0
 8014198:	637b      	str	r3, [r7, #52]	; 0x34
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801419e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f000 80b5 	beq.w	8014312 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	895b      	ldrh	r3, [r3, #10]
 80141ac:	461a      	mov	r2, r3
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	899b      	ldrh	r3, [r3, #12]
 80141b2:	fb03 f302 	mul.w	r3, r3, r2
 80141b6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80141b8:	6a3b      	ldr	r3, [r7, #32]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d01b      	beq.n	80141f6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	1e5a      	subs	r2, r3, #1
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80141c8:	6a3b      	ldr	r3, [r7, #32]
 80141ca:	1e59      	subs	r1, r3, #1
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d30f      	bcc.n	80141f6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80141d6:	6a3b      	ldr	r3, [r7, #32]
 80141d8:	1e5a      	subs	r2, r3, #1
 80141da:	69fb      	ldr	r3, [r7, #28]
 80141dc:	425b      	negs	r3, r3
 80141de:	401a      	ands	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	699b      	ldr	r3, [r3, #24]
 80141e8:	683a      	ldr	r2, [r7, #0]
 80141ea:	1ad3      	subs	r3, r2, r3
 80141ec:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	69db      	ldr	r3, [r3, #28]
 80141f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80141f4:	e022      	b.n	801423c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	689b      	ldr	r3, [r3, #8]
 80141fa:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80141fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d119      	bne.n	8014236 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2100      	movs	r1, #0
 8014206:	4618      	mov	r0, r3
 8014208:	f7fe f84f 	bl	80122aa <create_chain>
 801420c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014210:	2b01      	cmp	r3, #1
 8014212:	d104      	bne.n	801421e <f_lseek+0x2a2>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2202      	movs	r2, #2
 8014218:	755a      	strb	r2, [r3, #21]
 801421a:	2302      	movs	r3, #2
 801421c:	e0ce      	b.n	80143bc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014224:	d104      	bne.n	8014230 <f_lseek+0x2b4>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2201      	movs	r2, #1
 801422a:	755a      	strb	r2, [r3, #21]
 801422c:	2301      	movs	r3, #1
 801422e:	e0c5      	b.n	80143bc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014234:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801423a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801423e:	2b00      	cmp	r3, #0
 8014240:	d067      	beq.n	8014312 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014242:	e03a      	b.n	80142ba <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014244:	683a      	ldr	r2, [r7, #0]
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	603b      	str	r3, [r7, #0]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	699a      	ldr	r2, [r3, #24]
 8014250:	69fb      	ldr	r3, [r7, #28]
 8014252:	441a      	add	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	7d1b      	ldrb	r3, [r3, #20]
 801425c:	f003 0302 	and.w	r3, r3, #2
 8014260:	2b00      	cmp	r3, #0
 8014262:	d00b      	beq.n	801427c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014268:	4618      	mov	r0, r3
 801426a:	f7fe f81e 	bl	80122aa <create_chain>
 801426e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014272:	2b00      	cmp	r3, #0
 8014274:	d108      	bne.n	8014288 <f_lseek+0x30c>
							ofs = 0; break;
 8014276:	2300      	movs	r3, #0
 8014278:	603b      	str	r3, [r7, #0]
 801427a:	e022      	b.n	80142c2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014280:	4618      	mov	r0, r3
 8014282:	f7fd fdc6 	bl	8011e12 <get_fat>
 8014286:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801428e:	d104      	bne.n	801429a <f_lseek+0x31e>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2201      	movs	r2, #1
 8014294:	755a      	strb	r2, [r3, #21]
 8014296:	2301      	movs	r3, #1
 8014298:	e090      	b.n	80143bc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429c:	2b01      	cmp	r3, #1
 801429e:	d904      	bls.n	80142aa <f_lseek+0x32e>
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	69db      	ldr	r3, [r3, #28]
 80142a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d304      	bcc.n	80142b4 <f_lseek+0x338>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2202      	movs	r2, #2
 80142ae:	755a      	strb	r2, [r3, #21]
 80142b0:	2302      	movs	r3, #2
 80142b2:	e083      	b.n	80143bc <f_lseek+0x440>
					fp->clust = clst;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142b8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80142ba:	683a      	ldr	r2, [r7, #0]
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d8c0      	bhi.n	8014244 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	699a      	ldr	r2, [r3, #24]
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	441a      	add	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	899b      	ldrh	r3, [r3, #12]
 80142d2:	461a      	mov	r2, r3
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80142da:	fb02 f201 	mul.w	r2, r2, r1
 80142de:	1a9b      	subs	r3, r3, r2
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d016      	beq.n	8014312 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fd fd73 	bl	8011dd4 <clust2sect>
 80142ee:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80142f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d104      	bne.n	8014300 <f_lseek+0x384>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2202      	movs	r2, #2
 80142fa:	755a      	strb	r2, [r3, #21]
 80142fc:	2302      	movs	r3, #2
 80142fe:	e05d      	b.n	80143bc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	899b      	ldrh	r3, [r3, #12]
 8014304:	461a      	mov	r2, r3
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	fbb3 f3f2 	udiv	r3, r3, r2
 801430c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801430e:	4413      	add	r3, r2
 8014310:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	699a      	ldr	r2, [r3, #24]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	429a      	cmp	r2, r3
 801431c:	d90a      	bls.n	8014334 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	699a      	ldr	r2, [r3, #24]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	7d1b      	ldrb	r3, [r3, #20]
 801432a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801432e:	b2da      	uxtb	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	699b      	ldr	r3, [r3, #24]
 8014338:	68ba      	ldr	r2, [r7, #8]
 801433a:	8992      	ldrh	r2, [r2, #12]
 801433c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014340:	fb02 f201 	mul.w	r2, r2, r1
 8014344:	1a9b      	subs	r3, r3, r2
 8014346:	2b00      	cmp	r3, #0
 8014348:	d036      	beq.n	80143b8 <f_lseek+0x43c>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6a1b      	ldr	r3, [r3, #32]
 801434e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014350:	429a      	cmp	r2, r3
 8014352:	d031      	beq.n	80143b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	7d1b      	ldrb	r3, [r3, #20]
 8014358:	b25b      	sxtb	r3, r3
 801435a:	2b00      	cmp	r3, #0
 801435c:	da18      	bge.n	8014390 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	7858      	ldrb	r0, [r3, #1]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6a1a      	ldr	r2, [r3, #32]
 801436c:	2301      	movs	r3, #1
 801436e:	f7fd f9a5 	bl	80116bc <disk_write>
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d004      	beq.n	8014382 <f_lseek+0x406>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2201      	movs	r2, #1
 801437c:	755a      	strb	r2, [r3, #21]
 801437e:	2301      	movs	r3, #1
 8014380:	e01c      	b.n	80143bc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7d1b      	ldrb	r3, [r3, #20]
 8014386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801438a:	b2da      	uxtb	r2, r3
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	7858      	ldrb	r0, [r3, #1]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801439a:	2301      	movs	r3, #1
 801439c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801439e:	f7fd f96d 	bl	801167c <disk_read>
 80143a2:	4603      	mov	r3, r0
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d004      	beq.n	80143b2 <f_lseek+0x436>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2201      	movs	r2, #1
 80143ac:	755a      	strb	r2, [r3, #21]
 80143ae:	2301      	movs	r3, #1
 80143b0:	e004      	b.n	80143bc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143b6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80143b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3740      	adds	r7, #64	; 0x40
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b09e      	sub	sp, #120	; 0x78
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80143cc:	2300      	movs	r3, #0
 80143ce:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143d0:	f107 010c 	add.w	r1, r7, #12
 80143d4:	1d3b      	adds	r3, r7, #4
 80143d6:	2202      	movs	r2, #2
 80143d8:	4618      	mov	r0, r3
 80143da:	f7fe fd17 	bl	8012e0c <find_volume>
 80143de:	4603      	mov	r3, r0
 80143e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80143e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	f040 80a4 	bne.w	801453a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80143f2:	687a      	ldr	r2, [r7, #4]
 80143f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80143f8:	4611      	mov	r1, r2
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fe fbd6 	bl	8012bac <follow_path>
 8014400:	4603      	mov	r3, r0
 8014402:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014406:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801440a:	2b00      	cmp	r3, #0
 801440c:	d108      	bne.n	8014420 <f_unlink+0x5c>
 801440e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014412:	f003 0320 	and.w	r3, r3, #32
 8014416:	2b00      	cmp	r3, #0
 8014418:	d002      	beq.n	8014420 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801441a:	2306      	movs	r3, #6
 801441c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014420:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014424:	2b00      	cmp	r3, #0
 8014426:	d108      	bne.n	801443a <f_unlink+0x76>
 8014428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801442c:	2102      	movs	r1, #2
 801442e:	4618      	mov	r0, r3
 8014430:	f7fd fa82 	bl	8011938 <chk_lock>
 8014434:	4603      	mov	r3, r0
 8014436:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801443a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801443e:	2b00      	cmp	r3, #0
 8014440:	d17b      	bne.n	801453a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014442:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014446:	b25b      	sxtb	r3, r3
 8014448:	2b00      	cmp	r3, #0
 801444a:	da03      	bge.n	8014454 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801444c:	2306      	movs	r3, #6
 801444e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014452:	e008      	b.n	8014466 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014454:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014458:	f003 0301 	and.w	r3, r3, #1
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014460:	2307      	movs	r3, #7
 8014462:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014466:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801446a:	2b00      	cmp	r3, #0
 801446c:	d13d      	bne.n	80144ea <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014472:	4611      	mov	r1, r2
 8014474:	4618      	mov	r0, r3
 8014476:	f7fe f98e 	bl	8012796 <ld_clust>
 801447a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801447c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014480:	f003 0310 	and.w	r3, r3, #16
 8014484:	2b00      	cmp	r3, #0
 8014486:	d030      	beq.n	80144ea <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	699b      	ldr	r3, [r3, #24]
 801448c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801448e:	429a      	cmp	r2, r3
 8014490:	d103      	bne.n	801449a <f_unlink+0xd6>
						res = FR_DENIED;
 8014492:	2307      	movs	r3, #7
 8014494:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014498:	e027      	b.n	80144ea <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801449e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144a0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80144a2:	f107 0310 	add.w	r3, r7, #16
 80144a6:	2100      	movs	r1, #0
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fd ffce 	bl	801244a <dir_sdi>
 80144ae:	4603      	mov	r3, r0
 80144b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80144b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d116      	bne.n	80144ea <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80144bc:	f107 0310 	add.w	r3, r7, #16
 80144c0:	2100      	movs	r1, #0
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7fe f9a6 	bl	8012814 <dir_read>
 80144c8:	4603      	mov	r3, r0
 80144ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80144ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d102      	bne.n	80144dc <f_unlink+0x118>
 80144d6:	2307      	movs	r3, #7
 80144d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80144dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144e0:	2b04      	cmp	r3, #4
 80144e2:	d102      	bne.n	80144ea <f_unlink+0x126>
 80144e4:	2300      	movs	r3, #0
 80144e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80144ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d123      	bne.n	801453a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80144f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7fe fa70 	bl	80129dc <dir_remove>
 80144fc:	4603      	mov	r3, r0
 80144fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014502:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014506:	2b00      	cmp	r3, #0
 8014508:	d10c      	bne.n	8014524 <f_unlink+0x160>
 801450a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801450c:	2b00      	cmp	r3, #0
 801450e:	d009      	beq.n	8014524 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014514:	2200      	movs	r2, #0
 8014516:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014518:	4618      	mov	r0, r3
 801451a:	f7fd fe61 	bl	80121e0 <remove_chain>
 801451e:	4603      	mov	r3, r0
 8014520:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014524:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014528:	2b00      	cmp	r3, #0
 801452a:	d106      	bne.n	801453a <f_unlink+0x176>
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	4618      	mov	r0, r3
 8014530:	f7fd fbe0 	bl	8011cf4 <sync_fs>
 8014534:	4603      	mov	r3, r0
 8014536:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801453a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801453e:	4618      	mov	r0, r3
 8014540:	3778      	adds	r7, #120	; 0x78
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
	...

08014548 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b096      	sub	sp, #88	; 0x58
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014550:	f107 0108 	add.w	r1, r7, #8
 8014554:	1d3b      	adds	r3, r7, #4
 8014556:	2202      	movs	r2, #2
 8014558:	4618      	mov	r0, r3
 801455a:	f7fe fc57 	bl	8012e0c <find_volume>
 801455e:	4603      	mov	r3, r0
 8014560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801456c:	2b00      	cmp	r3, #0
 801456e:	f040 80fe 	bne.w	801476e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	f107 030c 	add.w	r3, r7, #12
 8014578:	4611      	mov	r1, r2
 801457a:	4618      	mov	r0, r3
 801457c:	f7fe fb16 	bl	8012bac <follow_path>
 8014580:	4603      	mov	r3, r0
 8014582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801458a:	2b00      	cmp	r3, #0
 801458c:	d102      	bne.n	8014594 <f_mkdir+0x4c>
 801458e:	2308      	movs	r3, #8
 8014590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014598:	2b04      	cmp	r3, #4
 801459a:	d108      	bne.n	80145ae <f_mkdir+0x66>
 801459c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80145a0:	f003 0320 	and.w	r3, r3, #32
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d002      	beq.n	80145ae <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80145a8:	2306      	movs	r3, #6
 80145aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80145ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145b2:	2b04      	cmp	r3, #4
 80145b4:	f040 80db 	bne.w	801476e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80145b8:	f107 030c 	add.w	r3, r7, #12
 80145bc:	2100      	movs	r1, #0
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fd fe73 	bl	80122aa <create_chain>
 80145c4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	895b      	ldrh	r3, [r3, #10]
 80145ca:	461a      	mov	r2, r3
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	899b      	ldrh	r3, [r3, #12]
 80145d0:	fb03 f302 	mul.w	r3, r3, r2
 80145d4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80145d6:	2300      	movs	r3, #0
 80145d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80145dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d102      	bne.n	80145e8 <f_mkdir+0xa0>
 80145e2:	2307      	movs	r3, #7
 80145e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80145e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	d102      	bne.n	80145f4 <f_mkdir+0xac>
 80145ee:	2302      	movs	r3, #2
 80145f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80145f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145fa:	d102      	bne.n	8014602 <f_mkdir+0xba>
 80145fc:	2301      	movs	r3, #1
 80145fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014602:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014606:	2b00      	cmp	r3, #0
 8014608:	d106      	bne.n	8014618 <f_mkdir+0xd0>
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	4618      	mov	r0, r3
 801460e:	f7fd faff 	bl	8011c10 <sync_window>
 8014612:	4603      	mov	r3, r0
 8014614:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014618:	4b58      	ldr	r3, [pc, #352]	; (801477c <f_mkdir+0x234>)
 801461a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801461c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014620:	2b00      	cmp	r3, #0
 8014622:	d16c      	bne.n	80146fe <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014628:	4618      	mov	r0, r3
 801462a:	f7fd fbd3 	bl	8011dd4 <clust2sect>
 801462e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	3338      	adds	r3, #56	; 0x38
 8014634:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	899b      	ldrh	r3, [r3, #12]
 801463a:	461a      	mov	r2, r3
 801463c:	2100      	movs	r1, #0
 801463e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014640:	f7fd f91d 	bl	801187e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014644:	220b      	movs	r2, #11
 8014646:	2120      	movs	r1, #32
 8014648:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801464a:	f7fd f918 	bl	801187e <mem_set>
					dir[DIR_Name] = '.';
 801464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014650:	222e      	movs	r2, #46	; 0x2e
 8014652:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014656:	330b      	adds	r3, #11
 8014658:	2210      	movs	r2, #16
 801465a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801465e:	3316      	adds	r3, #22
 8014660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014662:	4618      	mov	r0, r3
 8014664:	f7fd f8be 	bl	80117e4 <st_dword>
					st_clust(fs, dir, dcl);
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801466c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe f8b0 	bl	80127d4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014676:	3320      	adds	r3, #32
 8014678:	2220      	movs	r2, #32
 801467a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801467c:	4618      	mov	r0, r3
 801467e:	f7fd f8dd 	bl	801183c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014684:	3321      	adds	r3, #33	; 0x21
 8014686:	222e      	movs	r2, #46	; 0x2e
 8014688:	701a      	strb	r2, [r3, #0]
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	2b03      	cmp	r3, #3
 8014694:	d106      	bne.n	80146a4 <f_mkdir+0x15c>
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801469a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801469c:	429a      	cmp	r2, r3
 801469e:	d101      	bne.n	80146a4 <f_mkdir+0x15c>
 80146a0:	2300      	movs	r3, #0
 80146a2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80146a4:	68b8      	ldr	r0, [r7, #8]
 80146a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a8:	3320      	adds	r3, #32
 80146aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146ac:	4619      	mov	r1, r3
 80146ae:	f7fe f891 	bl	80127d4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	895b      	ldrh	r3, [r3, #10]
 80146b6:	653b      	str	r3, [r7, #80]	; 0x50
 80146b8:	e01c      	b.n	80146f4 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80146ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146bc:	1c5a      	adds	r2, r3, #1
 80146be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80146c0:	68ba      	ldr	r2, [r7, #8]
 80146c2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	2201      	movs	r2, #1
 80146c8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7fd fa9f 	bl	8011c10 <sync_window>
 80146d2:	4603      	mov	r3, r0
 80146d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80146d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10d      	bne.n	80146fc <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	899b      	ldrh	r3, [r3, #12]
 80146e4:	461a      	mov	r2, r3
 80146e6:	2100      	movs	r1, #0
 80146e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80146ea:	f7fd f8c8 	bl	801187e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146f0:	3b01      	subs	r3, #1
 80146f2:	653b      	str	r3, [r7, #80]	; 0x50
 80146f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d1df      	bne.n	80146ba <f_mkdir+0x172>
 80146fa:	e000      	b.n	80146fe <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80146fc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80146fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014702:	2b00      	cmp	r3, #0
 8014704:	d107      	bne.n	8014716 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014706:	f107 030c 	add.w	r3, r7, #12
 801470a:	4618      	mov	r0, r3
 801470c:	f7fe f934 	bl	8012978 <dir_register>
 8014710:	4603      	mov	r3, r0
 8014712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014716:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801471a:	2b00      	cmp	r3, #0
 801471c:	d120      	bne.n	8014760 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014720:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014724:	3316      	adds	r3, #22
 8014726:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014728:	4618      	mov	r0, r3
 801472a:	f7fd f85b 	bl	80117e4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014732:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014734:	4618      	mov	r0, r3
 8014736:	f7fe f84d 	bl	80127d4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801473c:	330b      	adds	r3, #11
 801473e:	2210      	movs	r2, #16
 8014740:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	2201      	movs	r2, #1
 8014746:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801474c:	2b00      	cmp	r3, #0
 801474e:	d10e      	bne.n	801476e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	4618      	mov	r0, r3
 8014754:	f7fd face 	bl	8011cf4 <sync_fs>
 8014758:	4603      	mov	r3, r0
 801475a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801475e:	e006      	b.n	801476e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014760:	f107 030c 	add.w	r3, r7, #12
 8014764:	2200      	movs	r2, #0
 8014766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014768:	4618      	mov	r0, r3
 801476a:	f7fd fd39 	bl	80121e0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801476e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014772:	4618      	mov	r0, r3
 8014774:	3758      	adds	r7, #88	; 0x58
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	274a0000 	.word	0x274a0000

08014780 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b088      	sub	sp, #32
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014794:	e017      	b.n	80147c6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014796:	f107 0310 	add.w	r3, r7, #16
 801479a:	f107 0114 	add.w	r1, r7, #20
 801479e:	2201      	movs	r2, #1
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f7ff f803 	bl	80137ac <f_read>
		if (rc != 1) break;
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d112      	bne.n	80147d2 <f_gets+0x52>
		c = s[0];
 80147ac:	7d3b      	ldrb	r3, [r7, #20]
 80147ae:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	1c5a      	adds	r2, r3, #1
 80147b4:	61ba      	str	r2, [r7, #24]
 80147b6:	7dfa      	ldrb	r2, [r7, #23]
 80147b8:	701a      	strb	r2, [r3, #0]
		n++;
 80147ba:	69fb      	ldr	r3, [r7, #28]
 80147bc:	3301      	adds	r3, #1
 80147be:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80147c0:	7dfb      	ldrb	r3, [r7, #23]
 80147c2:	2b0a      	cmp	r3, #10
 80147c4:	d007      	beq.n	80147d6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	3b01      	subs	r3, #1
 80147ca:	69fa      	ldr	r2, [r7, #28]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	dbe2      	blt.n	8014796 <f_gets+0x16>
 80147d0:	e002      	b.n	80147d8 <f_gets+0x58>
		if (rc != 1) break;
 80147d2:	bf00      	nop
 80147d4:	e000      	b.n	80147d8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80147d6:	bf00      	nop
	}
	*p = 0;
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	2200      	movs	r2, #0
 80147dc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d001      	beq.n	80147e8 <f_gets+0x68>
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	e000      	b.n	80147ea <f_gets+0x6a>
 80147e8:	2300      	movs	r3, #0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3720      	adds	r7, #32
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
	...

080147f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80147f4:	b480      	push	{r7}
 80147f6:	b087      	sub	sp, #28
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	4613      	mov	r3, r2
 8014800:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014802:	2301      	movs	r3, #1
 8014804:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014806:	2300      	movs	r3, #0
 8014808:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801480a:	4b1f      	ldr	r3, [pc, #124]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 801480c:	7a5b      	ldrb	r3, [r3, #9]
 801480e:	b2db      	uxtb	r3, r3
 8014810:	2b00      	cmp	r3, #0
 8014812:	d131      	bne.n	8014878 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014814:	4b1c      	ldr	r3, [pc, #112]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 8014816:	7a5b      	ldrb	r3, [r3, #9]
 8014818:	b2db      	uxtb	r3, r3
 801481a:	461a      	mov	r2, r3
 801481c:	4b1a      	ldr	r3, [pc, #104]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 801481e:	2100      	movs	r1, #0
 8014820:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014822:	4b19      	ldr	r3, [pc, #100]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 8014824:	7a5b      	ldrb	r3, [r3, #9]
 8014826:	b2db      	uxtb	r3, r3
 8014828:	4a17      	ldr	r2, [pc, #92]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	4413      	add	r3, r2
 801482e:	68fa      	ldr	r2, [r7, #12]
 8014830:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014832:	4b15      	ldr	r3, [pc, #84]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 8014834:	7a5b      	ldrb	r3, [r3, #9]
 8014836:	b2db      	uxtb	r3, r3
 8014838:	461a      	mov	r2, r3
 801483a:	4b13      	ldr	r3, [pc, #76]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 801483c:	4413      	add	r3, r2
 801483e:	79fa      	ldrb	r2, [r7, #7]
 8014840:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014842:	4b11      	ldr	r3, [pc, #68]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 8014844:	7a5b      	ldrb	r3, [r3, #9]
 8014846:	b2db      	uxtb	r3, r3
 8014848:	1c5a      	adds	r2, r3, #1
 801484a:	b2d1      	uxtb	r1, r2
 801484c:	4a0e      	ldr	r2, [pc, #56]	; (8014888 <FATFS_LinkDriverEx+0x94>)
 801484e:	7251      	strb	r1, [r2, #9]
 8014850:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014852:	7dbb      	ldrb	r3, [r7, #22]
 8014854:	3330      	adds	r3, #48	; 0x30
 8014856:	b2da      	uxtb	r2, r3
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	3301      	adds	r3, #1
 8014860:	223a      	movs	r2, #58	; 0x3a
 8014862:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	3302      	adds	r3, #2
 8014868:	222f      	movs	r2, #47	; 0x2f
 801486a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	3303      	adds	r3, #3
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014874:	2300      	movs	r3, #0
 8014876:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014878:	7dfb      	ldrb	r3, [r7, #23]
}
 801487a:	4618      	mov	r0, r3
 801487c:	371c      	adds	r7, #28
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	20042330 	.word	0x20042330

0801488c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014896:	2200      	movs	r2, #0
 8014898:	6839      	ldr	r1, [r7, #0]
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f7ff ffaa 	bl	80147f4 <FATFS_LinkDriverEx>
 80148a0:	4603      	mov	r3, r0
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3708      	adds	r7, #8
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}

080148aa <__cxa_guard_acquire>:
 80148aa:	6803      	ldr	r3, [r0, #0]
 80148ac:	07db      	lsls	r3, r3, #31
 80148ae:	d406      	bmi.n	80148be <__cxa_guard_acquire+0x14>
 80148b0:	7843      	ldrb	r3, [r0, #1]
 80148b2:	b103      	cbz	r3, 80148b6 <__cxa_guard_acquire+0xc>
 80148b4:	deff      	udf	#255	; 0xff
 80148b6:	2301      	movs	r3, #1
 80148b8:	7043      	strb	r3, [r0, #1]
 80148ba:	4618      	mov	r0, r3
 80148bc:	4770      	bx	lr
 80148be:	2000      	movs	r0, #0
 80148c0:	4770      	bx	lr

080148c2 <__cxa_guard_release>:
 80148c2:	2301      	movs	r3, #1
 80148c4:	6003      	str	r3, [r0, #0]
 80148c6:	4770      	bx	lr

080148c8 <cos>:
 80148c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148ca:	ec51 0b10 	vmov	r0, r1, d0
 80148ce:	4a1e      	ldr	r2, [pc, #120]	; (8014948 <cos+0x80>)
 80148d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148d4:	4293      	cmp	r3, r2
 80148d6:	dc06      	bgt.n	80148e6 <cos+0x1e>
 80148d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014940 <cos+0x78>
 80148dc:	f000 fa74 	bl	8014dc8 <__kernel_cos>
 80148e0:	ec51 0b10 	vmov	r0, r1, d0
 80148e4:	e007      	b.n	80148f6 <cos+0x2e>
 80148e6:	4a19      	ldr	r2, [pc, #100]	; (801494c <cos+0x84>)
 80148e8:	4293      	cmp	r3, r2
 80148ea:	dd09      	ble.n	8014900 <cos+0x38>
 80148ec:	ee10 2a10 	vmov	r2, s0
 80148f0:	460b      	mov	r3, r1
 80148f2:	f7eb fce1 	bl	80002b8 <__aeabi_dsub>
 80148f6:	ec41 0b10 	vmov	d0, r0, r1
 80148fa:	b005      	add	sp, #20
 80148fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014900:	4668      	mov	r0, sp
 8014902:	f000 f86d 	bl	80149e0 <__ieee754_rem_pio2>
 8014906:	f000 0003 	and.w	r0, r0, #3
 801490a:	2801      	cmp	r0, #1
 801490c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014910:	ed9d 0b00 	vldr	d0, [sp]
 8014914:	d007      	beq.n	8014926 <cos+0x5e>
 8014916:	2802      	cmp	r0, #2
 8014918:	d00e      	beq.n	8014938 <cos+0x70>
 801491a:	2800      	cmp	r0, #0
 801491c:	d0de      	beq.n	80148dc <cos+0x14>
 801491e:	2001      	movs	r0, #1
 8014920:	f000 fe5a 	bl	80155d8 <__kernel_sin>
 8014924:	e7dc      	b.n	80148e0 <cos+0x18>
 8014926:	f000 fe57 	bl	80155d8 <__kernel_sin>
 801492a:	ec53 2b10 	vmov	r2, r3, d0
 801492e:	ee10 0a10 	vmov	r0, s0
 8014932:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014936:	e7de      	b.n	80148f6 <cos+0x2e>
 8014938:	f000 fa46 	bl	8014dc8 <__kernel_cos>
 801493c:	e7f5      	b.n	801492a <cos+0x62>
 801493e:	bf00      	nop
	...
 8014948:	3fe921fb 	.word	0x3fe921fb
 801494c:	7fefffff 	.word	0x7fefffff

08014950 <sin>:
 8014950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014952:	ec51 0b10 	vmov	r0, r1, d0
 8014956:	4a20      	ldr	r2, [pc, #128]	; (80149d8 <sin+0x88>)
 8014958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801495c:	4293      	cmp	r3, r2
 801495e:	dc07      	bgt.n	8014970 <sin+0x20>
 8014960:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80149d0 <sin+0x80>
 8014964:	2000      	movs	r0, #0
 8014966:	f000 fe37 	bl	80155d8 <__kernel_sin>
 801496a:	ec51 0b10 	vmov	r0, r1, d0
 801496e:	e007      	b.n	8014980 <sin+0x30>
 8014970:	4a1a      	ldr	r2, [pc, #104]	; (80149dc <sin+0x8c>)
 8014972:	4293      	cmp	r3, r2
 8014974:	dd09      	ble.n	801498a <sin+0x3a>
 8014976:	ee10 2a10 	vmov	r2, s0
 801497a:	460b      	mov	r3, r1
 801497c:	f7eb fc9c 	bl	80002b8 <__aeabi_dsub>
 8014980:	ec41 0b10 	vmov	d0, r0, r1
 8014984:	b005      	add	sp, #20
 8014986:	f85d fb04 	ldr.w	pc, [sp], #4
 801498a:	4668      	mov	r0, sp
 801498c:	f000 f828 	bl	80149e0 <__ieee754_rem_pio2>
 8014990:	f000 0003 	and.w	r0, r0, #3
 8014994:	2801      	cmp	r0, #1
 8014996:	ed9d 1b02 	vldr	d1, [sp, #8]
 801499a:	ed9d 0b00 	vldr	d0, [sp]
 801499e:	d004      	beq.n	80149aa <sin+0x5a>
 80149a0:	2802      	cmp	r0, #2
 80149a2:	d005      	beq.n	80149b0 <sin+0x60>
 80149a4:	b970      	cbnz	r0, 80149c4 <sin+0x74>
 80149a6:	2001      	movs	r0, #1
 80149a8:	e7dd      	b.n	8014966 <sin+0x16>
 80149aa:	f000 fa0d 	bl	8014dc8 <__kernel_cos>
 80149ae:	e7dc      	b.n	801496a <sin+0x1a>
 80149b0:	2001      	movs	r0, #1
 80149b2:	f000 fe11 	bl	80155d8 <__kernel_sin>
 80149b6:	ec53 2b10 	vmov	r2, r3, d0
 80149ba:	ee10 0a10 	vmov	r0, s0
 80149be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80149c2:	e7dd      	b.n	8014980 <sin+0x30>
 80149c4:	f000 fa00 	bl	8014dc8 <__kernel_cos>
 80149c8:	e7f5      	b.n	80149b6 <sin+0x66>
 80149ca:	bf00      	nop
 80149cc:	f3af 8000 	nop.w
	...
 80149d8:	3fe921fb 	.word	0x3fe921fb
 80149dc:	7fefffff 	.word	0x7fefffff

080149e0 <__ieee754_rem_pio2>:
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	ec57 6b10 	vmov	r6, r7, d0
 80149e8:	4bc3      	ldr	r3, [pc, #780]	; (8014cf8 <__ieee754_rem_pio2+0x318>)
 80149ea:	b08d      	sub	sp, #52	; 0x34
 80149ec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80149f0:	4598      	cmp	r8, r3
 80149f2:	4604      	mov	r4, r0
 80149f4:	9704      	str	r7, [sp, #16]
 80149f6:	dc07      	bgt.n	8014a08 <__ieee754_rem_pio2+0x28>
 80149f8:	2200      	movs	r2, #0
 80149fa:	2300      	movs	r3, #0
 80149fc:	ed84 0b00 	vstr	d0, [r4]
 8014a00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014a04:	2500      	movs	r5, #0
 8014a06:	e027      	b.n	8014a58 <__ieee754_rem_pio2+0x78>
 8014a08:	4bbc      	ldr	r3, [pc, #752]	; (8014cfc <__ieee754_rem_pio2+0x31c>)
 8014a0a:	4598      	cmp	r8, r3
 8014a0c:	dc75      	bgt.n	8014afa <__ieee754_rem_pio2+0x11a>
 8014a0e:	9b04      	ldr	r3, [sp, #16]
 8014a10:	4dbb      	ldr	r5, [pc, #748]	; (8014d00 <__ieee754_rem_pio2+0x320>)
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	ee10 0a10 	vmov	r0, s0
 8014a18:	a3a9      	add	r3, pc, #676	; (adr r3, 8014cc0 <__ieee754_rem_pio2+0x2e0>)
 8014a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1e:	4639      	mov	r1, r7
 8014a20:	dd36      	ble.n	8014a90 <__ieee754_rem_pio2+0xb0>
 8014a22:	f7eb fc49 	bl	80002b8 <__aeabi_dsub>
 8014a26:	45a8      	cmp	r8, r5
 8014a28:	4606      	mov	r6, r0
 8014a2a:	460f      	mov	r7, r1
 8014a2c:	d018      	beq.n	8014a60 <__ieee754_rem_pio2+0x80>
 8014a2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014cc8 <__ieee754_rem_pio2+0x2e8>)
 8014a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a34:	f7eb fc40 	bl	80002b8 <__aeabi_dsub>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	e9c4 2300 	strd	r2, r3, [r4]
 8014a40:	4630      	mov	r0, r6
 8014a42:	4639      	mov	r1, r7
 8014a44:	f7eb fc38 	bl	80002b8 <__aeabi_dsub>
 8014a48:	a39f      	add	r3, pc, #636	; (adr r3, 8014cc8 <__ieee754_rem_pio2+0x2e8>)
 8014a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4e:	f7eb fc33 	bl	80002b8 <__aeabi_dsub>
 8014a52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a56:	2501      	movs	r5, #1
 8014a58:	4628      	mov	r0, r5
 8014a5a:	b00d      	add	sp, #52	; 0x34
 8014a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a60:	a39b      	add	r3, pc, #620	; (adr r3, 8014cd0 <__ieee754_rem_pio2+0x2f0>)
 8014a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a66:	f7eb fc27 	bl	80002b8 <__aeabi_dsub>
 8014a6a:	a39b      	add	r3, pc, #620	; (adr r3, 8014cd8 <__ieee754_rem_pio2+0x2f8>)
 8014a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a70:	4606      	mov	r6, r0
 8014a72:	460f      	mov	r7, r1
 8014a74:	f7eb fc20 	bl	80002b8 <__aeabi_dsub>
 8014a78:	4602      	mov	r2, r0
 8014a7a:	460b      	mov	r3, r1
 8014a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8014a80:	4630      	mov	r0, r6
 8014a82:	4639      	mov	r1, r7
 8014a84:	f7eb fc18 	bl	80002b8 <__aeabi_dsub>
 8014a88:	a393      	add	r3, pc, #588	; (adr r3, 8014cd8 <__ieee754_rem_pio2+0x2f8>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	e7de      	b.n	8014a4e <__ieee754_rem_pio2+0x6e>
 8014a90:	f7eb fc14 	bl	80002bc <__adddf3>
 8014a94:	45a8      	cmp	r8, r5
 8014a96:	4606      	mov	r6, r0
 8014a98:	460f      	mov	r7, r1
 8014a9a:	d016      	beq.n	8014aca <__ieee754_rem_pio2+0xea>
 8014a9c:	a38a      	add	r3, pc, #552	; (adr r3, 8014cc8 <__ieee754_rem_pio2+0x2e8>)
 8014a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa2:	f7eb fc0b 	bl	80002bc <__adddf3>
 8014aa6:	4602      	mov	r2, r0
 8014aa8:	460b      	mov	r3, r1
 8014aaa:	e9c4 2300 	strd	r2, r3, [r4]
 8014aae:	4630      	mov	r0, r6
 8014ab0:	4639      	mov	r1, r7
 8014ab2:	f7eb fc01 	bl	80002b8 <__aeabi_dsub>
 8014ab6:	a384      	add	r3, pc, #528	; (adr r3, 8014cc8 <__ieee754_rem_pio2+0x2e8>)
 8014ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014abc:	f7eb fbfe 	bl	80002bc <__adddf3>
 8014ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8014ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014ac8:	e7c6      	b.n	8014a58 <__ieee754_rem_pio2+0x78>
 8014aca:	a381      	add	r3, pc, #516	; (adr r3, 8014cd0 <__ieee754_rem_pio2+0x2f0>)
 8014acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad0:	f7eb fbf4 	bl	80002bc <__adddf3>
 8014ad4:	a380      	add	r3, pc, #512	; (adr r3, 8014cd8 <__ieee754_rem_pio2+0x2f8>)
 8014ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ada:	4606      	mov	r6, r0
 8014adc:	460f      	mov	r7, r1
 8014ade:	f7eb fbed 	bl	80002bc <__adddf3>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	e9c4 2300 	strd	r2, r3, [r4]
 8014aea:	4630      	mov	r0, r6
 8014aec:	4639      	mov	r1, r7
 8014aee:	f7eb fbe3 	bl	80002b8 <__aeabi_dsub>
 8014af2:	a379      	add	r3, pc, #484	; (adr r3, 8014cd8 <__ieee754_rem_pio2+0x2f8>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	e7e0      	b.n	8014abc <__ieee754_rem_pio2+0xdc>
 8014afa:	4b82      	ldr	r3, [pc, #520]	; (8014d04 <__ieee754_rem_pio2+0x324>)
 8014afc:	4598      	cmp	r8, r3
 8014afe:	f300 80d0 	bgt.w	8014ca2 <__ieee754_rem_pio2+0x2c2>
 8014b02:	f000 fe23 	bl	801574c <fabs>
 8014b06:	ec57 6b10 	vmov	r6, r7, d0
 8014b0a:	ee10 0a10 	vmov	r0, s0
 8014b0e:	a374      	add	r3, pc, #464	; (adr r3, 8014ce0 <__ieee754_rem_pio2+0x300>)
 8014b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b14:	4639      	mov	r1, r7
 8014b16:	f7eb fd87 	bl	8000628 <__aeabi_dmul>
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	4b7a      	ldr	r3, [pc, #488]	; (8014d08 <__ieee754_rem_pio2+0x328>)
 8014b1e:	f7eb fbcd 	bl	80002bc <__adddf3>
 8014b22:	f7ec f831 	bl	8000b88 <__aeabi_d2iz>
 8014b26:	4605      	mov	r5, r0
 8014b28:	f7eb fd14 	bl	8000554 <__aeabi_i2d>
 8014b2c:	a364      	add	r3, pc, #400	; (adr r3, 8014cc0 <__ieee754_rem_pio2+0x2e0>)
 8014b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b36:	f7eb fd77 	bl	8000628 <__aeabi_dmul>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	4630      	mov	r0, r6
 8014b40:	4639      	mov	r1, r7
 8014b42:	f7eb fbb9 	bl	80002b8 <__aeabi_dsub>
 8014b46:	a360      	add	r3, pc, #384	; (adr r3, 8014cc8 <__ieee754_rem_pio2+0x2e8>)
 8014b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4c:	4682      	mov	sl, r0
 8014b4e:	468b      	mov	fp, r1
 8014b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b54:	f7eb fd68 	bl	8000628 <__aeabi_dmul>
 8014b58:	2d1f      	cmp	r5, #31
 8014b5a:	4606      	mov	r6, r0
 8014b5c:	460f      	mov	r7, r1
 8014b5e:	dc0c      	bgt.n	8014b7a <__ieee754_rem_pio2+0x19a>
 8014b60:	1e6a      	subs	r2, r5, #1
 8014b62:	4b6a      	ldr	r3, [pc, #424]	; (8014d0c <__ieee754_rem_pio2+0x32c>)
 8014b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b68:	4543      	cmp	r3, r8
 8014b6a:	d006      	beq.n	8014b7a <__ieee754_rem_pio2+0x19a>
 8014b6c:	4632      	mov	r2, r6
 8014b6e:	463b      	mov	r3, r7
 8014b70:	4650      	mov	r0, sl
 8014b72:	4659      	mov	r1, fp
 8014b74:	f7eb fba0 	bl	80002b8 <__aeabi_dsub>
 8014b78:	e00e      	b.n	8014b98 <__ieee754_rem_pio2+0x1b8>
 8014b7a:	4632      	mov	r2, r6
 8014b7c:	463b      	mov	r3, r7
 8014b7e:	4650      	mov	r0, sl
 8014b80:	4659      	mov	r1, fp
 8014b82:	f7eb fb99 	bl	80002b8 <__aeabi_dsub>
 8014b86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014b8a:	9305      	str	r3, [sp, #20]
 8014b8c:	9a05      	ldr	r2, [sp, #20]
 8014b8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	2b10      	cmp	r3, #16
 8014b96:	dc02      	bgt.n	8014b9e <__ieee754_rem_pio2+0x1be>
 8014b98:	e9c4 0100 	strd	r0, r1, [r4]
 8014b9c:	e039      	b.n	8014c12 <__ieee754_rem_pio2+0x232>
 8014b9e:	a34c      	add	r3, pc, #304	; (adr r3, 8014cd0 <__ieee754_rem_pio2+0x2f0>)
 8014ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ba8:	f7eb fd3e 	bl	8000628 <__aeabi_dmul>
 8014bac:	4606      	mov	r6, r0
 8014bae:	460f      	mov	r7, r1
 8014bb0:	4602      	mov	r2, r0
 8014bb2:	460b      	mov	r3, r1
 8014bb4:	4650      	mov	r0, sl
 8014bb6:	4659      	mov	r1, fp
 8014bb8:	f7eb fb7e 	bl	80002b8 <__aeabi_dsub>
 8014bbc:	4602      	mov	r2, r0
 8014bbe:	460b      	mov	r3, r1
 8014bc0:	4680      	mov	r8, r0
 8014bc2:	4689      	mov	r9, r1
 8014bc4:	4650      	mov	r0, sl
 8014bc6:	4659      	mov	r1, fp
 8014bc8:	f7eb fb76 	bl	80002b8 <__aeabi_dsub>
 8014bcc:	4632      	mov	r2, r6
 8014bce:	463b      	mov	r3, r7
 8014bd0:	f7eb fb72 	bl	80002b8 <__aeabi_dsub>
 8014bd4:	a340      	add	r3, pc, #256	; (adr r3, 8014cd8 <__ieee754_rem_pio2+0x2f8>)
 8014bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bda:	4606      	mov	r6, r0
 8014bdc:	460f      	mov	r7, r1
 8014bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014be2:	f7eb fd21 	bl	8000628 <__aeabi_dmul>
 8014be6:	4632      	mov	r2, r6
 8014be8:	463b      	mov	r3, r7
 8014bea:	f7eb fb65 	bl	80002b8 <__aeabi_dsub>
 8014bee:	4602      	mov	r2, r0
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	460f      	mov	r7, r1
 8014bf6:	4640      	mov	r0, r8
 8014bf8:	4649      	mov	r1, r9
 8014bfa:	f7eb fb5d 	bl	80002b8 <__aeabi_dsub>
 8014bfe:	9a05      	ldr	r2, [sp, #20]
 8014c00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	2b31      	cmp	r3, #49	; 0x31
 8014c08:	dc20      	bgt.n	8014c4c <__ieee754_rem_pio2+0x26c>
 8014c0a:	e9c4 0100 	strd	r0, r1, [r4]
 8014c0e:	46c2      	mov	sl, r8
 8014c10:	46cb      	mov	fp, r9
 8014c12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014c16:	4650      	mov	r0, sl
 8014c18:	4642      	mov	r2, r8
 8014c1a:	464b      	mov	r3, r9
 8014c1c:	4659      	mov	r1, fp
 8014c1e:	f7eb fb4b 	bl	80002b8 <__aeabi_dsub>
 8014c22:	463b      	mov	r3, r7
 8014c24:	4632      	mov	r2, r6
 8014c26:	f7eb fb47 	bl	80002b8 <__aeabi_dsub>
 8014c2a:	9b04      	ldr	r3, [sp, #16]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c32:	f6bf af11 	bge.w	8014a58 <__ieee754_rem_pio2+0x78>
 8014c36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c3a:	6063      	str	r3, [r4, #4]
 8014c3c:	f8c4 8000 	str.w	r8, [r4]
 8014c40:	60a0      	str	r0, [r4, #8]
 8014c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c46:	60e3      	str	r3, [r4, #12]
 8014c48:	426d      	negs	r5, r5
 8014c4a:	e705      	b.n	8014a58 <__ieee754_rem_pio2+0x78>
 8014c4c:	a326      	add	r3, pc, #152	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x308>)
 8014c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c56:	f7eb fce7 	bl	8000628 <__aeabi_dmul>
 8014c5a:	4606      	mov	r6, r0
 8014c5c:	460f      	mov	r7, r1
 8014c5e:	4602      	mov	r2, r0
 8014c60:	460b      	mov	r3, r1
 8014c62:	4640      	mov	r0, r8
 8014c64:	4649      	mov	r1, r9
 8014c66:	f7eb fb27 	bl	80002b8 <__aeabi_dsub>
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	4682      	mov	sl, r0
 8014c70:	468b      	mov	fp, r1
 8014c72:	4640      	mov	r0, r8
 8014c74:	4649      	mov	r1, r9
 8014c76:	f7eb fb1f 	bl	80002b8 <__aeabi_dsub>
 8014c7a:	4632      	mov	r2, r6
 8014c7c:	463b      	mov	r3, r7
 8014c7e:	f7eb fb1b 	bl	80002b8 <__aeabi_dsub>
 8014c82:	a31b      	add	r3, pc, #108	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x310>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	4606      	mov	r6, r0
 8014c8a:	460f      	mov	r7, r1
 8014c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c90:	f7eb fcca 	bl	8000628 <__aeabi_dmul>
 8014c94:	4632      	mov	r2, r6
 8014c96:	463b      	mov	r3, r7
 8014c98:	f7eb fb0e 	bl	80002b8 <__aeabi_dsub>
 8014c9c:	4606      	mov	r6, r0
 8014c9e:	460f      	mov	r7, r1
 8014ca0:	e764      	b.n	8014b6c <__ieee754_rem_pio2+0x18c>
 8014ca2:	4b1b      	ldr	r3, [pc, #108]	; (8014d10 <__ieee754_rem_pio2+0x330>)
 8014ca4:	4598      	cmp	r8, r3
 8014ca6:	dd35      	ble.n	8014d14 <__ieee754_rem_pio2+0x334>
 8014ca8:	ee10 2a10 	vmov	r2, s0
 8014cac:	463b      	mov	r3, r7
 8014cae:	4630      	mov	r0, r6
 8014cb0:	4639      	mov	r1, r7
 8014cb2:	f7eb fb01 	bl	80002b8 <__aeabi_dsub>
 8014cb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014cba:	e9c4 0100 	strd	r0, r1, [r4]
 8014cbe:	e6a1      	b.n	8014a04 <__ieee754_rem_pio2+0x24>
 8014cc0:	54400000 	.word	0x54400000
 8014cc4:	3ff921fb 	.word	0x3ff921fb
 8014cc8:	1a626331 	.word	0x1a626331
 8014ccc:	3dd0b461 	.word	0x3dd0b461
 8014cd0:	1a600000 	.word	0x1a600000
 8014cd4:	3dd0b461 	.word	0x3dd0b461
 8014cd8:	2e037073 	.word	0x2e037073
 8014cdc:	3ba3198a 	.word	0x3ba3198a
 8014ce0:	6dc9c883 	.word	0x6dc9c883
 8014ce4:	3fe45f30 	.word	0x3fe45f30
 8014ce8:	2e000000 	.word	0x2e000000
 8014cec:	3ba3198a 	.word	0x3ba3198a
 8014cf0:	252049c1 	.word	0x252049c1
 8014cf4:	397b839a 	.word	0x397b839a
 8014cf8:	3fe921fb 	.word	0x3fe921fb
 8014cfc:	4002d97b 	.word	0x4002d97b
 8014d00:	3ff921fb 	.word	0x3ff921fb
 8014d04:	413921fb 	.word	0x413921fb
 8014d08:	3fe00000 	.word	0x3fe00000
 8014d0c:	0801a274 	.word	0x0801a274
 8014d10:	7fefffff 	.word	0x7fefffff
 8014d14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014d18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014d1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014d20:	4630      	mov	r0, r6
 8014d22:	460f      	mov	r7, r1
 8014d24:	f7eb ff30 	bl	8000b88 <__aeabi_d2iz>
 8014d28:	f7eb fc14 	bl	8000554 <__aeabi_i2d>
 8014d2c:	4602      	mov	r2, r0
 8014d2e:	460b      	mov	r3, r1
 8014d30:	4630      	mov	r0, r6
 8014d32:	4639      	mov	r1, r7
 8014d34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d38:	f7eb fabe 	bl	80002b8 <__aeabi_dsub>
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	4b1f      	ldr	r3, [pc, #124]	; (8014dbc <__ieee754_rem_pio2+0x3dc>)
 8014d40:	f7eb fc72 	bl	8000628 <__aeabi_dmul>
 8014d44:	460f      	mov	r7, r1
 8014d46:	4606      	mov	r6, r0
 8014d48:	f7eb ff1e 	bl	8000b88 <__aeabi_d2iz>
 8014d4c:	f7eb fc02 	bl	8000554 <__aeabi_i2d>
 8014d50:	4602      	mov	r2, r0
 8014d52:	460b      	mov	r3, r1
 8014d54:	4630      	mov	r0, r6
 8014d56:	4639      	mov	r1, r7
 8014d58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d5c:	f7eb faac 	bl	80002b8 <__aeabi_dsub>
 8014d60:	2200      	movs	r2, #0
 8014d62:	4b16      	ldr	r3, [pc, #88]	; (8014dbc <__ieee754_rem_pio2+0x3dc>)
 8014d64:	f7eb fc60 	bl	8000628 <__aeabi_dmul>
 8014d68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014d6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014d70:	f04f 0803 	mov.w	r8, #3
 8014d74:	2600      	movs	r6, #0
 8014d76:	2700      	movs	r7, #0
 8014d78:	4632      	mov	r2, r6
 8014d7a:	463b      	mov	r3, r7
 8014d7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8014d84:	f7eb feb8 	bl	8000af8 <__aeabi_dcmpeq>
 8014d88:	b9b0      	cbnz	r0, 8014db8 <__ieee754_rem_pio2+0x3d8>
 8014d8a:	4b0d      	ldr	r3, [pc, #52]	; (8014dc0 <__ieee754_rem_pio2+0x3e0>)
 8014d8c:	9301      	str	r3, [sp, #4]
 8014d8e:	2302      	movs	r3, #2
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	462a      	mov	r2, r5
 8014d94:	4643      	mov	r3, r8
 8014d96:	4621      	mov	r1, r4
 8014d98:	a806      	add	r0, sp, #24
 8014d9a:	f000 f8dd 	bl	8014f58 <__kernel_rem_pio2>
 8014d9e:	9b04      	ldr	r3, [sp, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	4605      	mov	r5, r0
 8014da4:	f6bf ae58 	bge.w	8014a58 <__ieee754_rem_pio2+0x78>
 8014da8:	6863      	ldr	r3, [r4, #4]
 8014daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014dae:	6063      	str	r3, [r4, #4]
 8014db0:	68e3      	ldr	r3, [r4, #12]
 8014db2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014db6:	e746      	b.n	8014c46 <__ieee754_rem_pio2+0x266>
 8014db8:	46d0      	mov	r8, sl
 8014dba:	e7dd      	b.n	8014d78 <__ieee754_rem_pio2+0x398>
 8014dbc:	41700000 	.word	0x41700000
 8014dc0:	0801a2f4 	.word	0x0801a2f4
 8014dc4:	00000000 	.word	0x00000000

08014dc8 <__kernel_cos>:
 8014dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ec59 8b10 	vmov	r8, r9, d0
 8014dd0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014dd4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014dd8:	ed2d 8b02 	vpush	{d8}
 8014ddc:	eeb0 8a41 	vmov.f32	s16, s2
 8014de0:	eef0 8a61 	vmov.f32	s17, s3
 8014de4:	da07      	bge.n	8014df6 <__kernel_cos+0x2e>
 8014de6:	ee10 0a10 	vmov	r0, s0
 8014dea:	4649      	mov	r1, r9
 8014dec:	f7eb fecc 	bl	8000b88 <__aeabi_d2iz>
 8014df0:	2800      	cmp	r0, #0
 8014df2:	f000 8089 	beq.w	8014f08 <__kernel_cos+0x140>
 8014df6:	4642      	mov	r2, r8
 8014df8:	464b      	mov	r3, r9
 8014dfa:	4640      	mov	r0, r8
 8014dfc:	4649      	mov	r1, r9
 8014dfe:	f7eb fc13 	bl	8000628 <__aeabi_dmul>
 8014e02:	2200      	movs	r2, #0
 8014e04:	4b4e      	ldr	r3, [pc, #312]	; (8014f40 <__kernel_cos+0x178>)
 8014e06:	4604      	mov	r4, r0
 8014e08:	460d      	mov	r5, r1
 8014e0a:	f7eb fc0d 	bl	8000628 <__aeabi_dmul>
 8014e0e:	a340      	add	r3, pc, #256	; (adr r3, 8014f10 <__kernel_cos+0x148>)
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e14:	4682      	mov	sl, r0
 8014e16:	468b      	mov	fp, r1
 8014e18:	4620      	mov	r0, r4
 8014e1a:	4629      	mov	r1, r5
 8014e1c:	f7eb fc04 	bl	8000628 <__aeabi_dmul>
 8014e20:	a33d      	add	r3, pc, #244	; (adr r3, 8014f18 <__kernel_cos+0x150>)
 8014e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e26:	f7eb fa49 	bl	80002bc <__adddf3>
 8014e2a:	4622      	mov	r2, r4
 8014e2c:	462b      	mov	r3, r5
 8014e2e:	f7eb fbfb 	bl	8000628 <__aeabi_dmul>
 8014e32:	a33b      	add	r3, pc, #236	; (adr r3, 8014f20 <__kernel_cos+0x158>)
 8014e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e38:	f7eb fa3e 	bl	80002b8 <__aeabi_dsub>
 8014e3c:	4622      	mov	r2, r4
 8014e3e:	462b      	mov	r3, r5
 8014e40:	f7eb fbf2 	bl	8000628 <__aeabi_dmul>
 8014e44:	a338      	add	r3, pc, #224	; (adr r3, 8014f28 <__kernel_cos+0x160>)
 8014e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4a:	f7eb fa37 	bl	80002bc <__adddf3>
 8014e4e:	4622      	mov	r2, r4
 8014e50:	462b      	mov	r3, r5
 8014e52:	f7eb fbe9 	bl	8000628 <__aeabi_dmul>
 8014e56:	a336      	add	r3, pc, #216	; (adr r3, 8014f30 <__kernel_cos+0x168>)
 8014e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5c:	f7eb fa2c 	bl	80002b8 <__aeabi_dsub>
 8014e60:	4622      	mov	r2, r4
 8014e62:	462b      	mov	r3, r5
 8014e64:	f7eb fbe0 	bl	8000628 <__aeabi_dmul>
 8014e68:	a333      	add	r3, pc, #204	; (adr r3, 8014f38 <__kernel_cos+0x170>)
 8014e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6e:	f7eb fa25 	bl	80002bc <__adddf3>
 8014e72:	4622      	mov	r2, r4
 8014e74:	462b      	mov	r3, r5
 8014e76:	f7eb fbd7 	bl	8000628 <__aeabi_dmul>
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	f7eb fbd3 	bl	8000628 <__aeabi_dmul>
 8014e82:	ec53 2b18 	vmov	r2, r3, d8
 8014e86:	4604      	mov	r4, r0
 8014e88:	460d      	mov	r5, r1
 8014e8a:	4640      	mov	r0, r8
 8014e8c:	4649      	mov	r1, r9
 8014e8e:	f7eb fbcb 	bl	8000628 <__aeabi_dmul>
 8014e92:	460b      	mov	r3, r1
 8014e94:	4602      	mov	r2, r0
 8014e96:	4629      	mov	r1, r5
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f7eb fa0d 	bl	80002b8 <__aeabi_dsub>
 8014e9e:	4b29      	ldr	r3, [pc, #164]	; (8014f44 <__kernel_cos+0x17c>)
 8014ea0:	429e      	cmp	r6, r3
 8014ea2:	4680      	mov	r8, r0
 8014ea4:	4689      	mov	r9, r1
 8014ea6:	dc11      	bgt.n	8014ecc <__kernel_cos+0x104>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	4650      	mov	r0, sl
 8014eae:	4659      	mov	r1, fp
 8014eb0:	f7eb fa02 	bl	80002b8 <__aeabi_dsub>
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	4924      	ldr	r1, [pc, #144]	; (8014f48 <__kernel_cos+0x180>)
 8014eb8:	4602      	mov	r2, r0
 8014eba:	2000      	movs	r0, #0
 8014ebc:	f7eb f9fc 	bl	80002b8 <__aeabi_dsub>
 8014ec0:	ecbd 8b02 	vpop	{d8}
 8014ec4:	ec41 0b10 	vmov	d0, r0, r1
 8014ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ecc:	4b1f      	ldr	r3, [pc, #124]	; (8014f4c <__kernel_cos+0x184>)
 8014ece:	491e      	ldr	r1, [pc, #120]	; (8014f48 <__kernel_cos+0x180>)
 8014ed0:	429e      	cmp	r6, r3
 8014ed2:	bfcc      	ite	gt
 8014ed4:	4d1e      	ldrgt	r5, [pc, #120]	; (8014f50 <__kernel_cos+0x188>)
 8014ed6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014eda:	2400      	movs	r4, #0
 8014edc:	4622      	mov	r2, r4
 8014ede:	462b      	mov	r3, r5
 8014ee0:	2000      	movs	r0, #0
 8014ee2:	f7eb f9e9 	bl	80002b8 <__aeabi_dsub>
 8014ee6:	4622      	mov	r2, r4
 8014ee8:	4606      	mov	r6, r0
 8014eea:	460f      	mov	r7, r1
 8014eec:	462b      	mov	r3, r5
 8014eee:	4650      	mov	r0, sl
 8014ef0:	4659      	mov	r1, fp
 8014ef2:	f7eb f9e1 	bl	80002b8 <__aeabi_dsub>
 8014ef6:	4642      	mov	r2, r8
 8014ef8:	464b      	mov	r3, r9
 8014efa:	f7eb f9dd 	bl	80002b8 <__aeabi_dsub>
 8014efe:	4602      	mov	r2, r0
 8014f00:	460b      	mov	r3, r1
 8014f02:	4630      	mov	r0, r6
 8014f04:	4639      	mov	r1, r7
 8014f06:	e7d9      	b.n	8014ebc <__kernel_cos+0xf4>
 8014f08:	2000      	movs	r0, #0
 8014f0a:	490f      	ldr	r1, [pc, #60]	; (8014f48 <__kernel_cos+0x180>)
 8014f0c:	e7d8      	b.n	8014ec0 <__kernel_cos+0xf8>
 8014f0e:	bf00      	nop
 8014f10:	be8838d4 	.word	0xbe8838d4
 8014f14:	bda8fae9 	.word	0xbda8fae9
 8014f18:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f1c:	3e21ee9e 	.word	0x3e21ee9e
 8014f20:	809c52ad 	.word	0x809c52ad
 8014f24:	3e927e4f 	.word	0x3e927e4f
 8014f28:	19cb1590 	.word	0x19cb1590
 8014f2c:	3efa01a0 	.word	0x3efa01a0
 8014f30:	16c15177 	.word	0x16c15177
 8014f34:	3f56c16c 	.word	0x3f56c16c
 8014f38:	5555554c 	.word	0x5555554c
 8014f3c:	3fa55555 	.word	0x3fa55555
 8014f40:	3fe00000 	.word	0x3fe00000
 8014f44:	3fd33332 	.word	0x3fd33332
 8014f48:	3ff00000 	.word	0x3ff00000
 8014f4c:	3fe90000 	.word	0x3fe90000
 8014f50:	3fd20000 	.word	0x3fd20000
 8014f54:	00000000 	.word	0x00000000

08014f58 <__kernel_rem_pio2>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	ed2d 8b02 	vpush	{d8}
 8014f60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014f64:	1ed4      	subs	r4, r2, #3
 8014f66:	9308      	str	r3, [sp, #32]
 8014f68:	9101      	str	r1, [sp, #4]
 8014f6a:	4bc5      	ldr	r3, [pc, #788]	; (8015280 <__kernel_rem_pio2+0x328>)
 8014f6c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8014f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f74:	9304      	str	r3, [sp, #16]
 8014f76:	9b08      	ldr	r3, [sp, #32]
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	9307      	str	r3, [sp, #28]
 8014f7c:	2318      	movs	r3, #24
 8014f7e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014f82:	f06f 0317 	mvn.w	r3, #23
 8014f86:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014f8a:	fb04 3303 	mla	r3, r4, r3, r3
 8014f8e:	eb03 0a02 	add.w	sl, r3, r2
 8014f92:	9b04      	ldr	r3, [sp, #16]
 8014f94:	9a07      	ldr	r2, [sp, #28]
 8014f96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015270 <__kernel_rem_pio2+0x318>
 8014f9a:	eb03 0802 	add.w	r8, r3, r2
 8014f9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014fa0:	1aa7      	subs	r7, r4, r2
 8014fa2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014fa6:	ae22      	add	r6, sp, #136	; 0x88
 8014fa8:	2500      	movs	r5, #0
 8014faa:	4545      	cmp	r5, r8
 8014fac:	dd13      	ble.n	8014fd6 <__kernel_rem_pio2+0x7e>
 8014fae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015270 <__kernel_rem_pio2+0x318>
 8014fb2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	9b04      	ldr	r3, [sp, #16]
 8014fba:	429e      	cmp	r6, r3
 8014fbc:	dc32      	bgt.n	8015024 <__kernel_rem_pio2+0xcc>
 8014fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc0:	9302      	str	r3, [sp, #8]
 8014fc2:	9b08      	ldr	r3, [sp, #32]
 8014fc4:	199d      	adds	r5, r3, r6
 8014fc6:	ab22      	add	r3, sp, #136	; 0x88
 8014fc8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fcc:	9306      	str	r3, [sp, #24]
 8014fce:	ec59 8b18 	vmov	r8, r9, d8
 8014fd2:	2700      	movs	r7, #0
 8014fd4:	e01f      	b.n	8015016 <__kernel_rem_pio2+0xbe>
 8014fd6:	42ef      	cmn	r7, r5
 8014fd8:	d407      	bmi.n	8014fea <__kernel_rem_pio2+0x92>
 8014fda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014fde:	f7eb fab9 	bl	8000554 <__aeabi_i2d>
 8014fe2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014fe6:	3501      	adds	r5, #1
 8014fe8:	e7df      	b.n	8014faa <__kernel_rem_pio2+0x52>
 8014fea:	ec51 0b18 	vmov	r0, r1, d8
 8014fee:	e7f8      	b.n	8014fe2 <__kernel_rem_pio2+0x8a>
 8014ff0:	9906      	ldr	r1, [sp, #24]
 8014ff2:	9d02      	ldr	r5, [sp, #8]
 8014ff4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014ff8:	9106      	str	r1, [sp, #24]
 8014ffa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014ffe:	9502      	str	r5, [sp, #8]
 8015000:	f7eb fb12 	bl	8000628 <__aeabi_dmul>
 8015004:	4602      	mov	r2, r0
 8015006:	460b      	mov	r3, r1
 8015008:	4640      	mov	r0, r8
 801500a:	4649      	mov	r1, r9
 801500c:	f7eb f956 	bl	80002bc <__adddf3>
 8015010:	3701      	adds	r7, #1
 8015012:	4680      	mov	r8, r0
 8015014:	4689      	mov	r9, r1
 8015016:	9b07      	ldr	r3, [sp, #28]
 8015018:	429f      	cmp	r7, r3
 801501a:	dde9      	ble.n	8014ff0 <__kernel_rem_pio2+0x98>
 801501c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015020:	3601      	adds	r6, #1
 8015022:	e7c9      	b.n	8014fb8 <__kernel_rem_pio2+0x60>
 8015024:	9b04      	ldr	r3, [sp, #16]
 8015026:	aa0e      	add	r2, sp, #56	; 0x38
 8015028:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801502c:	930c      	str	r3, [sp, #48]	; 0x30
 801502e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015030:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015034:	9c04      	ldr	r4, [sp, #16]
 8015036:	930b      	str	r3, [sp, #44]	; 0x2c
 8015038:	ab9a      	add	r3, sp, #616	; 0x268
 801503a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801503e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015046:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801504a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801504e:	ab9a      	add	r3, sp, #616	; 0x268
 8015050:	445b      	add	r3, fp
 8015052:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8015056:	2500      	movs	r5, #0
 8015058:	1b63      	subs	r3, r4, r5
 801505a:	2b00      	cmp	r3, #0
 801505c:	dc78      	bgt.n	8015150 <__kernel_rem_pio2+0x1f8>
 801505e:	4650      	mov	r0, sl
 8015060:	ec49 8b10 	vmov	d0, r8, r9
 8015064:	f000 fc00 	bl	8015868 <scalbn>
 8015068:	ec57 6b10 	vmov	r6, r7, d0
 801506c:	2200      	movs	r2, #0
 801506e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015072:	ee10 0a10 	vmov	r0, s0
 8015076:	4639      	mov	r1, r7
 8015078:	f7eb fad6 	bl	8000628 <__aeabi_dmul>
 801507c:	ec41 0b10 	vmov	d0, r0, r1
 8015080:	f000 fb6e 	bl	8015760 <floor>
 8015084:	2200      	movs	r2, #0
 8015086:	ec51 0b10 	vmov	r0, r1, d0
 801508a:	4b7e      	ldr	r3, [pc, #504]	; (8015284 <__kernel_rem_pio2+0x32c>)
 801508c:	f7eb facc 	bl	8000628 <__aeabi_dmul>
 8015090:	4602      	mov	r2, r0
 8015092:	460b      	mov	r3, r1
 8015094:	4630      	mov	r0, r6
 8015096:	4639      	mov	r1, r7
 8015098:	f7eb f90e 	bl	80002b8 <__aeabi_dsub>
 801509c:	460f      	mov	r7, r1
 801509e:	4606      	mov	r6, r0
 80150a0:	f7eb fd72 	bl	8000b88 <__aeabi_d2iz>
 80150a4:	9006      	str	r0, [sp, #24]
 80150a6:	f7eb fa55 	bl	8000554 <__aeabi_i2d>
 80150aa:	4602      	mov	r2, r0
 80150ac:	460b      	mov	r3, r1
 80150ae:	4630      	mov	r0, r6
 80150b0:	4639      	mov	r1, r7
 80150b2:	f7eb f901 	bl	80002b8 <__aeabi_dsub>
 80150b6:	f1ba 0f00 	cmp.w	sl, #0
 80150ba:	4606      	mov	r6, r0
 80150bc:	460f      	mov	r7, r1
 80150be:	dd6c      	ble.n	801519a <__kernel_rem_pio2+0x242>
 80150c0:	1e62      	subs	r2, r4, #1
 80150c2:	ab0e      	add	r3, sp, #56	; 0x38
 80150c4:	f1ca 0118 	rsb	r1, sl, #24
 80150c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80150cc:	9d06      	ldr	r5, [sp, #24]
 80150ce:	fa40 f301 	asr.w	r3, r0, r1
 80150d2:	441d      	add	r5, r3
 80150d4:	408b      	lsls	r3, r1
 80150d6:	1ac0      	subs	r0, r0, r3
 80150d8:	ab0e      	add	r3, sp, #56	; 0x38
 80150da:	9506      	str	r5, [sp, #24]
 80150dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80150e0:	f1ca 0317 	rsb	r3, sl, #23
 80150e4:	fa40 f303 	asr.w	r3, r0, r3
 80150e8:	9302      	str	r3, [sp, #8]
 80150ea:	9b02      	ldr	r3, [sp, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dd62      	ble.n	80151b6 <__kernel_rem_pio2+0x25e>
 80150f0:	9b06      	ldr	r3, [sp, #24]
 80150f2:	2200      	movs	r2, #0
 80150f4:	3301      	adds	r3, #1
 80150f6:	9306      	str	r3, [sp, #24]
 80150f8:	4615      	mov	r5, r2
 80150fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80150fe:	4294      	cmp	r4, r2
 8015100:	f300 8095 	bgt.w	801522e <__kernel_rem_pio2+0x2d6>
 8015104:	f1ba 0f00 	cmp.w	sl, #0
 8015108:	dd07      	ble.n	801511a <__kernel_rem_pio2+0x1c2>
 801510a:	f1ba 0f01 	cmp.w	sl, #1
 801510e:	f000 80a2 	beq.w	8015256 <__kernel_rem_pio2+0x2fe>
 8015112:	f1ba 0f02 	cmp.w	sl, #2
 8015116:	f000 80c1 	beq.w	801529c <__kernel_rem_pio2+0x344>
 801511a:	9b02      	ldr	r3, [sp, #8]
 801511c:	2b02      	cmp	r3, #2
 801511e:	d14a      	bne.n	80151b6 <__kernel_rem_pio2+0x25e>
 8015120:	4632      	mov	r2, r6
 8015122:	463b      	mov	r3, r7
 8015124:	2000      	movs	r0, #0
 8015126:	4958      	ldr	r1, [pc, #352]	; (8015288 <__kernel_rem_pio2+0x330>)
 8015128:	f7eb f8c6 	bl	80002b8 <__aeabi_dsub>
 801512c:	4606      	mov	r6, r0
 801512e:	460f      	mov	r7, r1
 8015130:	2d00      	cmp	r5, #0
 8015132:	d040      	beq.n	80151b6 <__kernel_rem_pio2+0x25e>
 8015134:	4650      	mov	r0, sl
 8015136:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015278 <__kernel_rem_pio2+0x320>
 801513a:	f000 fb95 	bl	8015868 <scalbn>
 801513e:	4630      	mov	r0, r6
 8015140:	4639      	mov	r1, r7
 8015142:	ec53 2b10 	vmov	r2, r3, d0
 8015146:	f7eb f8b7 	bl	80002b8 <__aeabi_dsub>
 801514a:	4606      	mov	r6, r0
 801514c:	460f      	mov	r7, r1
 801514e:	e032      	b.n	80151b6 <__kernel_rem_pio2+0x25e>
 8015150:	2200      	movs	r2, #0
 8015152:	4b4e      	ldr	r3, [pc, #312]	; (801528c <__kernel_rem_pio2+0x334>)
 8015154:	4640      	mov	r0, r8
 8015156:	4649      	mov	r1, r9
 8015158:	f7eb fa66 	bl	8000628 <__aeabi_dmul>
 801515c:	f7eb fd14 	bl	8000b88 <__aeabi_d2iz>
 8015160:	f7eb f9f8 	bl	8000554 <__aeabi_i2d>
 8015164:	2200      	movs	r2, #0
 8015166:	4b4a      	ldr	r3, [pc, #296]	; (8015290 <__kernel_rem_pio2+0x338>)
 8015168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801516c:	f7eb fa5c 	bl	8000628 <__aeabi_dmul>
 8015170:	4602      	mov	r2, r0
 8015172:	460b      	mov	r3, r1
 8015174:	4640      	mov	r0, r8
 8015176:	4649      	mov	r1, r9
 8015178:	f7eb f89e 	bl	80002b8 <__aeabi_dsub>
 801517c:	f7eb fd04 	bl	8000b88 <__aeabi_d2iz>
 8015180:	ab0e      	add	r3, sp, #56	; 0x38
 8015182:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8015186:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801518a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801518e:	f7eb f895 	bl	80002bc <__adddf3>
 8015192:	3501      	adds	r5, #1
 8015194:	4680      	mov	r8, r0
 8015196:	4689      	mov	r9, r1
 8015198:	e75e      	b.n	8015058 <__kernel_rem_pio2+0x100>
 801519a:	d105      	bne.n	80151a8 <__kernel_rem_pio2+0x250>
 801519c:	1e63      	subs	r3, r4, #1
 801519e:	aa0e      	add	r2, sp, #56	; 0x38
 80151a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151a4:	15c3      	asrs	r3, r0, #23
 80151a6:	e79f      	b.n	80150e8 <__kernel_rem_pio2+0x190>
 80151a8:	2200      	movs	r2, #0
 80151aa:	4b3a      	ldr	r3, [pc, #232]	; (8015294 <__kernel_rem_pio2+0x33c>)
 80151ac:	f7eb fcc2 	bl	8000b34 <__aeabi_dcmpge>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d139      	bne.n	8015228 <__kernel_rem_pio2+0x2d0>
 80151b4:	9002      	str	r0, [sp, #8]
 80151b6:	2200      	movs	r2, #0
 80151b8:	2300      	movs	r3, #0
 80151ba:	4630      	mov	r0, r6
 80151bc:	4639      	mov	r1, r7
 80151be:	f7eb fc9b 	bl	8000af8 <__aeabi_dcmpeq>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	f000 80c7 	beq.w	8015356 <__kernel_rem_pio2+0x3fe>
 80151c8:	1e65      	subs	r5, r4, #1
 80151ca:	462b      	mov	r3, r5
 80151cc:	2200      	movs	r2, #0
 80151ce:	9904      	ldr	r1, [sp, #16]
 80151d0:	428b      	cmp	r3, r1
 80151d2:	da6a      	bge.n	80152aa <__kernel_rem_pio2+0x352>
 80151d4:	2a00      	cmp	r2, #0
 80151d6:	f000 8088 	beq.w	80152ea <__kernel_rem_pio2+0x392>
 80151da:	ab0e      	add	r3, sp, #56	; 0x38
 80151dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80151e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 80b4 	beq.w	8015352 <__kernel_rem_pio2+0x3fa>
 80151ea:	4650      	mov	r0, sl
 80151ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015278 <__kernel_rem_pio2+0x320>
 80151f0:	f000 fb3a 	bl	8015868 <scalbn>
 80151f4:	00ec      	lsls	r4, r5, #3
 80151f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80151f8:	191e      	adds	r6, r3, r4
 80151fa:	ec59 8b10 	vmov	r8, r9, d0
 80151fe:	f106 0a08 	add.w	sl, r6, #8
 8015202:	462f      	mov	r7, r5
 8015204:	2f00      	cmp	r7, #0
 8015206:	f280 80df 	bge.w	80153c8 <__kernel_rem_pio2+0x470>
 801520a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015270 <__kernel_rem_pio2+0x318>
 801520e:	f04f 0a00 	mov.w	sl, #0
 8015212:	eba5 030a 	sub.w	r3, r5, sl
 8015216:	2b00      	cmp	r3, #0
 8015218:	f2c0 810a 	blt.w	8015430 <__kernel_rem_pio2+0x4d8>
 801521c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015298 <__kernel_rem_pio2+0x340>
 8015220:	ec59 8b18 	vmov	r8, r9, d8
 8015224:	2700      	movs	r7, #0
 8015226:	e0f5      	b.n	8015414 <__kernel_rem_pio2+0x4bc>
 8015228:	2302      	movs	r3, #2
 801522a:	9302      	str	r3, [sp, #8]
 801522c:	e760      	b.n	80150f0 <__kernel_rem_pio2+0x198>
 801522e:	ab0e      	add	r3, sp, #56	; 0x38
 8015230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015234:	b94d      	cbnz	r5, 801524a <__kernel_rem_pio2+0x2f2>
 8015236:	b12b      	cbz	r3, 8015244 <__kernel_rem_pio2+0x2ec>
 8015238:	a80e      	add	r0, sp, #56	; 0x38
 801523a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801523e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015242:	2301      	movs	r3, #1
 8015244:	3201      	adds	r2, #1
 8015246:	461d      	mov	r5, r3
 8015248:	e759      	b.n	80150fe <__kernel_rem_pio2+0x1a6>
 801524a:	a80e      	add	r0, sp, #56	; 0x38
 801524c:	1acb      	subs	r3, r1, r3
 801524e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015252:	462b      	mov	r3, r5
 8015254:	e7f6      	b.n	8015244 <__kernel_rem_pio2+0x2ec>
 8015256:	1e62      	subs	r2, r4, #1
 8015258:	ab0e      	add	r3, sp, #56	; 0x38
 801525a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015262:	a90e      	add	r1, sp, #56	; 0x38
 8015264:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015268:	e757      	b.n	801511a <__kernel_rem_pio2+0x1c2>
 801526a:	bf00      	nop
 801526c:	f3af 8000 	nop.w
	...
 801527c:	3ff00000 	.word	0x3ff00000
 8015280:	0801a440 	.word	0x0801a440
 8015284:	40200000 	.word	0x40200000
 8015288:	3ff00000 	.word	0x3ff00000
 801528c:	3e700000 	.word	0x3e700000
 8015290:	41700000 	.word	0x41700000
 8015294:	3fe00000 	.word	0x3fe00000
 8015298:	0801a400 	.word	0x0801a400
 801529c:	1e62      	subs	r2, r4, #1
 801529e:	ab0e      	add	r3, sp, #56	; 0x38
 80152a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80152a8:	e7db      	b.n	8015262 <__kernel_rem_pio2+0x30a>
 80152aa:	a90e      	add	r1, sp, #56	; 0x38
 80152ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80152b0:	3b01      	subs	r3, #1
 80152b2:	430a      	orrs	r2, r1
 80152b4:	e78b      	b.n	80151ce <__kernel_rem_pio2+0x276>
 80152b6:	3301      	adds	r3, #1
 80152b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80152bc:	2900      	cmp	r1, #0
 80152be:	d0fa      	beq.n	80152b6 <__kernel_rem_pio2+0x35e>
 80152c0:	9a08      	ldr	r2, [sp, #32]
 80152c2:	4422      	add	r2, r4
 80152c4:	00d2      	lsls	r2, r2, #3
 80152c6:	a922      	add	r1, sp, #136	; 0x88
 80152c8:	18e3      	adds	r3, r4, r3
 80152ca:	9206      	str	r2, [sp, #24]
 80152cc:	440a      	add	r2, r1
 80152ce:	9302      	str	r3, [sp, #8]
 80152d0:	f10b 0108 	add.w	r1, fp, #8
 80152d4:	f102 0308 	add.w	r3, r2, #8
 80152d8:	1c66      	adds	r6, r4, #1
 80152da:	910a      	str	r1, [sp, #40]	; 0x28
 80152dc:	2500      	movs	r5, #0
 80152de:	930d      	str	r3, [sp, #52]	; 0x34
 80152e0:	9b02      	ldr	r3, [sp, #8]
 80152e2:	42b3      	cmp	r3, r6
 80152e4:	da04      	bge.n	80152f0 <__kernel_rem_pio2+0x398>
 80152e6:	461c      	mov	r4, r3
 80152e8:	e6a6      	b.n	8015038 <__kernel_rem_pio2+0xe0>
 80152ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152ec:	2301      	movs	r3, #1
 80152ee:	e7e3      	b.n	80152b8 <__kernel_rem_pio2+0x360>
 80152f0:	9b06      	ldr	r3, [sp, #24]
 80152f2:	18ef      	adds	r7, r5, r3
 80152f4:	ab22      	add	r3, sp, #136	; 0x88
 80152f6:	441f      	add	r7, r3
 80152f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80152fe:	f7eb f929 	bl	8000554 <__aeabi_i2d>
 8015302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015304:	461c      	mov	r4, r3
 8015306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015308:	e9c7 0100 	strd	r0, r1, [r7]
 801530c:	eb03 0b05 	add.w	fp, r3, r5
 8015310:	2700      	movs	r7, #0
 8015312:	f04f 0800 	mov.w	r8, #0
 8015316:	f04f 0900 	mov.w	r9, #0
 801531a:	9b07      	ldr	r3, [sp, #28]
 801531c:	429f      	cmp	r7, r3
 801531e:	dd08      	ble.n	8015332 <__kernel_rem_pio2+0x3da>
 8015320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015322:	aa72      	add	r2, sp, #456	; 0x1c8
 8015324:	18eb      	adds	r3, r5, r3
 8015326:	4413      	add	r3, r2
 8015328:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801532c:	3601      	adds	r6, #1
 801532e:	3508      	adds	r5, #8
 8015330:	e7d6      	b.n	80152e0 <__kernel_rem_pio2+0x388>
 8015332:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015336:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801533a:	f7eb f975 	bl	8000628 <__aeabi_dmul>
 801533e:	4602      	mov	r2, r0
 8015340:	460b      	mov	r3, r1
 8015342:	4640      	mov	r0, r8
 8015344:	4649      	mov	r1, r9
 8015346:	f7ea ffb9 	bl	80002bc <__adddf3>
 801534a:	3701      	adds	r7, #1
 801534c:	4680      	mov	r8, r0
 801534e:	4689      	mov	r9, r1
 8015350:	e7e3      	b.n	801531a <__kernel_rem_pio2+0x3c2>
 8015352:	3d01      	subs	r5, #1
 8015354:	e741      	b.n	80151da <__kernel_rem_pio2+0x282>
 8015356:	f1ca 0000 	rsb	r0, sl, #0
 801535a:	ec47 6b10 	vmov	d0, r6, r7
 801535e:	f000 fa83 	bl	8015868 <scalbn>
 8015362:	ec57 6b10 	vmov	r6, r7, d0
 8015366:	2200      	movs	r2, #0
 8015368:	4b99      	ldr	r3, [pc, #612]	; (80155d0 <__kernel_rem_pio2+0x678>)
 801536a:	ee10 0a10 	vmov	r0, s0
 801536e:	4639      	mov	r1, r7
 8015370:	f7eb fbe0 	bl	8000b34 <__aeabi_dcmpge>
 8015374:	b1f8      	cbz	r0, 80153b6 <__kernel_rem_pio2+0x45e>
 8015376:	2200      	movs	r2, #0
 8015378:	4b96      	ldr	r3, [pc, #600]	; (80155d4 <__kernel_rem_pio2+0x67c>)
 801537a:	4630      	mov	r0, r6
 801537c:	4639      	mov	r1, r7
 801537e:	f7eb f953 	bl	8000628 <__aeabi_dmul>
 8015382:	f7eb fc01 	bl	8000b88 <__aeabi_d2iz>
 8015386:	4680      	mov	r8, r0
 8015388:	f7eb f8e4 	bl	8000554 <__aeabi_i2d>
 801538c:	2200      	movs	r2, #0
 801538e:	4b90      	ldr	r3, [pc, #576]	; (80155d0 <__kernel_rem_pio2+0x678>)
 8015390:	f7eb f94a 	bl	8000628 <__aeabi_dmul>
 8015394:	460b      	mov	r3, r1
 8015396:	4602      	mov	r2, r0
 8015398:	4639      	mov	r1, r7
 801539a:	4630      	mov	r0, r6
 801539c:	f7ea ff8c 	bl	80002b8 <__aeabi_dsub>
 80153a0:	f7eb fbf2 	bl	8000b88 <__aeabi_d2iz>
 80153a4:	1c65      	adds	r5, r4, #1
 80153a6:	ab0e      	add	r3, sp, #56	; 0x38
 80153a8:	f10a 0a18 	add.w	sl, sl, #24
 80153ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80153b4:	e719      	b.n	80151ea <__kernel_rem_pio2+0x292>
 80153b6:	4630      	mov	r0, r6
 80153b8:	4639      	mov	r1, r7
 80153ba:	f7eb fbe5 	bl	8000b88 <__aeabi_d2iz>
 80153be:	ab0e      	add	r3, sp, #56	; 0x38
 80153c0:	4625      	mov	r5, r4
 80153c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153c6:	e710      	b.n	80151ea <__kernel_rem_pio2+0x292>
 80153c8:	ab0e      	add	r3, sp, #56	; 0x38
 80153ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80153ce:	f7eb f8c1 	bl	8000554 <__aeabi_i2d>
 80153d2:	4642      	mov	r2, r8
 80153d4:	464b      	mov	r3, r9
 80153d6:	f7eb f927 	bl	8000628 <__aeabi_dmul>
 80153da:	2200      	movs	r2, #0
 80153dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80153e0:	4b7c      	ldr	r3, [pc, #496]	; (80155d4 <__kernel_rem_pio2+0x67c>)
 80153e2:	4640      	mov	r0, r8
 80153e4:	4649      	mov	r1, r9
 80153e6:	f7eb f91f 	bl	8000628 <__aeabi_dmul>
 80153ea:	3f01      	subs	r7, #1
 80153ec:	4680      	mov	r8, r0
 80153ee:	4689      	mov	r9, r1
 80153f0:	e708      	b.n	8015204 <__kernel_rem_pio2+0x2ac>
 80153f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80153f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80153fe:	f7eb f913 	bl	8000628 <__aeabi_dmul>
 8015402:	4602      	mov	r2, r0
 8015404:	460b      	mov	r3, r1
 8015406:	4640      	mov	r0, r8
 8015408:	4649      	mov	r1, r9
 801540a:	f7ea ff57 	bl	80002bc <__adddf3>
 801540e:	3701      	adds	r7, #1
 8015410:	4680      	mov	r8, r0
 8015412:	4689      	mov	r9, r1
 8015414:	9b04      	ldr	r3, [sp, #16]
 8015416:	429f      	cmp	r7, r3
 8015418:	dc01      	bgt.n	801541e <__kernel_rem_pio2+0x4c6>
 801541a:	45ba      	cmp	sl, r7
 801541c:	dae9      	bge.n	80153f2 <__kernel_rem_pio2+0x49a>
 801541e:	ab4a      	add	r3, sp, #296	; 0x128
 8015420:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015424:	e9c3 8900 	strd	r8, r9, [r3]
 8015428:	f10a 0a01 	add.w	sl, sl, #1
 801542c:	3e08      	subs	r6, #8
 801542e:	e6f0      	b.n	8015212 <__kernel_rem_pio2+0x2ba>
 8015430:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015432:	2b03      	cmp	r3, #3
 8015434:	d85b      	bhi.n	80154ee <__kernel_rem_pio2+0x596>
 8015436:	e8df f003 	tbb	[pc, r3]
 801543a:	264a      	.short	0x264a
 801543c:	0226      	.short	0x0226
 801543e:	ab9a      	add	r3, sp, #616	; 0x268
 8015440:	441c      	add	r4, r3
 8015442:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015446:	46a2      	mov	sl, r4
 8015448:	46ab      	mov	fp, r5
 801544a:	f1bb 0f00 	cmp.w	fp, #0
 801544e:	dc6c      	bgt.n	801552a <__kernel_rem_pio2+0x5d2>
 8015450:	46a2      	mov	sl, r4
 8015452:	46ab      	mov	fp, r5
 8015454:	f1bb 0f01 	cmp.w	fp, #1
 8015458:	f300 8086 	bgt.w	8015568 <__kernel_rem_pio2+0x610>
 801545c:	2000      	movs	r0, #0
 801545e:	2100      	movs	r1, #0
 8015460:	2d01      	cmp	r5, #1
 8015462:	f300 80a0 	bgt.w	80155a6 <__kernel_rem_pio2+0x64e>
 8015466:	9b02      	ldr	r3, [sp, #8]
 8015468:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801546c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015470:	2b00      	cmp	r3, #0
 8015472:	f040 809e 	bne.w	80155b2 <__kernel_rem_pio2+0x65a>
 8015476:	9b01      	ldr	r3, [sp, #4]
 8015478:	e9c3 7800 	strd	r7, r8, [r3]
 801547c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015480:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015484:	e033      	b.n	80154ee <__kernel_rem_pio2+0x596>
 8015486:	3408      	adds	r4, #8
 8015488:	ab4a      	add	r3, sp, #296	; 0x128
 801548a:	441c      	add	r4, r3
 801548c:	462e      	mov	r6, r5
 801548e:	2000      	movs	r0, #0
 8015490:	2100      	movs	r1, #0
 8015492:	2e00      	cmp	r6, #0
 8015494:	da3a      	bge.n	801550c <__kernel_rem_pio2+0x5b4>
 8015496:	9b02      	ldr	r3, [sp, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d03d      	beq.n	8015518 <__kernel_rem_pio2+0x5c0>
 801549c:	4602      	mov	r2, r0
 801549e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154a2:	9c01      	ldr	r4, [sp, #4]
 80154a4:	e9c4 2300 	strd	r2, r3, [r4]
 80154a8:	4602      	mov	r2, r0
 80154aa:	460b      	mov	r3, r1
 80154ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80154b0:	f7ea ff02 	bl	80002b8 <__aeabi_dsub>
 80154b4:	ae4c      	add	r6, sp, #304	; 0x130
 80154b6:	2401      	movs	r4, #1
 80154b8:	42a5      	cmp	r5, r4
 80154ba:	da30      	bge.n	801551e <__kernel_rem_pio2+0x5c6>
 80154bc:	9b02      	ldr	r3, [sp, #8]
 80154be:	b113      	cbz	r3, 80154c6 <__kernel_rem_pio2+0x56e>
 80154c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154c4:	4619      	mov	r1, r3
 80154c6:	9b01      	ldr	r3, [sp, #4]
 80154c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80154cc:	e00f      	b.n	80154ee <__kernel_rem_pio2+0x596>
 80154ce:	ab9a      	add	r3, sp, #616	; 0x268
 80154d0:	441c      	add	r4, r3
 80154d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80154d6:	2000      	movs	r0, #0
 80154d8:	2100      	movs	r1, #0
 80154da:	2d00      	cmp	r5, #0
 80154dc:	da10      	bge.n	8015500 <__kernel_rem_pio2+0x5a8>
 80154de:	9b02      	ldr	r3, [sp, #8]
 80154e0:	b113      	cbz	r3, 80154e8 <__kernel_rem_pio2+0x590>
 80154e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154e6:	4619      	mov	r1, r3
 80154e8:	9b01      	ldr	r3, [sp, #4]
 80154ea:	e9c3 0100 	strd	r0, r1, [r3]
 80154ee:	9b06      	ldr	r3, [sp, #24]
 80154f0:	f003 0007 	and.w	r0, r3, #7
 80154f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80154f8:	ecbd 8b02 	vpop	{d8}
 80154fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015500:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015504:	f7ea feda 	bl	80002bc <__adddf3>
 8015508:	3d01      	subs	r5, #1
 801550a:	e7e6      	b.n	80154da <__kernel_rem_pio2+0x582>
 801550c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015510:	f7ea fed4 	bl	80002bc <__adddf3>
 8015514:	3e01      	subs	r6, #1
 8015516:	e7bc      	b.n	8015492 <__kernel_rem_pio2+0x53a>
 8015518:	4602      	mov	r2, r0
 801551a:	460b      	mov	r3, r1
 801551c:	e7c1      	b.n	80154a2 <__kernel_rem_pio2+0x54a>
 801551e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015522:	f7ea fecb 	bl	80002bc <__adddf3>
 8015526:	3401      	adds	r4, #1
 8015528:	e7c6      	b.n	80154b8 <__kernel_rem_pio2+0x560>
 801552a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801552e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015532:	4640      	mov	r0, r8
 8015534:	ec53 2b17 	vmov	r2, r3, d7
 8015538:	4649      	mov	r1, r9
 801553a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801553e:	f7ea febd 	bl	80002bc <__adddf3>
 8015542:	4602      	mov	r2, r0
 8015544:	460b      	mov	r3, r1
 8015546:	4606      	mov	r6, r0
 8015548:	460f      	mov	r7, r1
 801554a:	4640      	mov	r0, r8
 801554c:	4649      	mov	r1, r9
 801554e:	f7ea feb3 	bl	80002b8 <__aeabi_dsub>
 8015552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015556:	f7ea feb1 	bl	80002bc <__adddf3>
 801555a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801555e:	e9ca 0100 	strd	r0, r1, [sl]
 8015562:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015566:	e770      	b.n	801544a <__kernel_rem_pio2+0x4f2>
 8015568:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801556c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015570:	4630      	mov	r0, r6
 8015572:	ec53 2b17 	vmov	r2, r3, d7
 8015576:	4639      	mov	r1, r7
 8015578:	ed8d 7b04 	vstr	d7, [sp, #16]
 801557c:	f7ea fe9e 	bl	80002bc <__adddf3>
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	4680      	mov	r8, r0
 8015586:	4689      	mov	r9, r1
 8015588:	4630      	mov	r0, r6
 801558a:	4639      	mov	r1, r7
 801558c:	f7ea fe94 	bl	80002b8 <__aeabi_dsub>
 8015590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015594:	f7ea fe92 	bl	80002bc <__adddf3>
 8015598:	f10b 3bff 	add.w	fp, fp, #4294967295
 801559c:	e9ca 0100 	strd	r0, r1, [sl]
 80155a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80155a4:	e756      	b.n	8015454 <__kernel_rem_pio2+0x4fc>
 80155a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155aa:	f7ea fe87 	bl	80002bc <__adddf3>
 80155ae:	3d01      	subs	r5, #1
 80155b0:	e756      	b.n	8015460 <__kernel_rem_pio2+0x508>
 80155b2:	9b01      	ldr	r3, [sp, #4]
 80155b4:	9a01      	ldr	r2, [sp, #4]
 80155b6:	601f      	str	r7, [r3, #0]
 80155b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80155bc:	605c      	str	r4, [r3, #4]
 80155be:	609d      	str	r5, [r3, #8]
 80155c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80155c4:	60d3      	str	r3, [r2, #12]
 80155c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155ca:	6110      	str	r0, [r2, #16]
 80155cc:	6153      	str	r3, [r2, #20]
 80155ce:	e78e      	b.n	80154ee <__kernel_rem_pio2+0x596>
 80155d0:	41700000 	.word	0x41700000
 80155d4:	3e700000 	.word	0x3e700000

080155d8 <__kernel_sin>:
 80155d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155dc:	ec55 4b10 	vmov	r4, r5, d0
 80155e0:	b085      	sub	sp, #20
 80155e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80155e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80155ea:	ed8d 1b00 	vstr	d1, [sp]
 80155ee:	9002      	str	r0, [sp, #8]
 80155f0:	da06      	bge.n	8015600 <__kernel_sin+0x28>
 80155f2:	ee10 0a10 	vmov	r0, s0
 80155f6:	4629      	mov	r1, r5
 80155f8:	f7eb fac6 	bl	8000b88 <__aeabi_d2iz>
 80155fc:	2800      	cmp	r0, #0
 80155fe:	d051      	beq.n	80156a4 <__kernel_sin+0xcc>
 8015600:	4622      	mov	r2, r4
 8015602:	462b      	mov	r3, r5
 8015604:	4620      	mov	r0, r4
 8015606:	4629      	mov	r1, r5
 8015608:	f7eb f80e 	bl	8000628 <__aeabi_dmul>
 801560c:	4682      	mov	sl, r0
 801560e:	468b      	mov	fp, r1
 8015610:	4602      	mov	r2, r0
 8015612:	460b      	mov	r3, r1
 8015614:	4620      	mov	r0, r4
 8015616:	4629      	mov	r1, r5
 8015618:	f7eb f806 	bl	8000628 <__aeabi_dmul>
 801561c:	a341      	add	r3, pc, #260	; (adr r3, 8015724 <__kernel_sin+0x14c>)
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	4680      	mov	r8, r0
 8015624:	4689      	mov	r9, r1
 8015626:	4650      	mov	r0, sl
 8015628:	4659      	mov	r1, fp
 801562a:	f7ea fffd 	bl	8000628 <__aeabi_dmul>
 801562e:	a33f      	add	r3, pc, #252	; (adr r3, 801572c <__kernel_sin+0x154>)
 8015630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015634:	f7ea fe40 	bl	80002b8 <__aeabi_dsub>
 8015638:	4652      	mov	r2, sl
 801563a:	465b      	mov	r3, fp
 801563c:	f7ea fff4 	bl	8000628 <__aeabi_dmul>
 8015640:	a33c      	add	r3, pc, #240	; (adr r3, 8015734 <__kernel_sin+0x15c>)
 8015642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015646:	f7ea fe39 	bl	80002bc <__adddf3>
 801564a:	4652      	mov	r2, sl
 801564c:	465b      	mov	r3, fp
 801564e:	f7ea ffeb 	bl	8000628 <__aeabi_dmul>
 8015652:	a33a      	add	r3, pc, #232	; (adr r3, 801573c <__kernel_sin+0x164>)
 8015654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015658:	f7ea fe2e 	bl	80002b8 <__aeabi_dsub>
 801565c:	4652      	mov	r2, sl
 801565e:	465b      	mov	r3, fp
 8015660:	f7ea ffe2 	bl	8000628 <__aeabi_dmul>
 8015664:	a337      	add	r3, pc, #220	; (adr r3, 8015744 <__kernel_sin+0x16c>)
 8015666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566a:	f7ea fe27 	bl	80002bc <__adddf3>
 801566e:	9b02      	ldr	r3, [sp, #8]
 8015670:	4606      	mov	r6, r0
 8015672:	460f      	mov	r7, r1
 8015674:	b9db      	cbnz	r3, 80156ae <__kernel_sin+0xd6>
 8015676:	4602      	mov	r2, r0
 8015678:	460b      	mov	r3, r1
 801567a:	4650      	mov	r0, sl
 801567c:	4659      	mov	r1, fp
 801567e:	f7ea ffd3 	bl	8000628 <__aeabi_dmul>
 8015682:	a325      	add	r3, pc, #148	; (adr r3, 8015718 <__kernel_sin+0x140>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7ea fe16 	bl	80002b8 <__aeabi_dsub>
 801568c:	4642      	mov	r2, r8
 801568e:	464b      	mov	r3, r9
 8015690:	f7ea ffca 	bl	8000628 <__aeabi_dmul>
 8015694:	4602      	mov	r2, r0
 8015696:	460b      	mov	r3, r1
 8015698:	4620      	mov	r0, r4
 801569a:	4629      	mov	r1, r5
 801569c:	f7ea fe0e 	bl	80002bc <__adddf3>
 80156a0:	4604      	mov	r4, r0
 80156a2:	460d      	mov	r5, r1
 80156a4:	ec45 4b10 	vmov	d0, r4, r5
 80156a8:	b005      	add	sp, #20
 80156aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ae:	2200      	movs	r2, #0
 80156b0:	4b1b      	ldr	r3, [pc, #108]	; (8015720 <__kernel_sin+0x148>)
 80156b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156b6:	f7ea ffb7 	bl	8000628 <__aeabi_dmul>
 80156ba:	4632      	mov	r2, r6
 80156bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156c0:	463b      	mov	r3, r7
 80156c2:	4640      	mov	r0, r8
 80156c4:	4649      	mov	r1, r9
 80156c6:	f7ea ffaf 	bl	8000628 <__aeabi_dmul>
 80156ca:	4602      	mov	r2, r0
 80156cc:	460b      	mov	r3, r1
 80156ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156d2:	f7ea fdf1 	bl	80002b8 <__aeabi_dsub>
 80156d6:	4652      	mov	r2, sl
 80156d8:	465b      	mov	r3, fp
 80156da:	f7ea ffa5 	bl	8000628 <__aeabi_dmul>
 80156de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156e2:	f7ea fde9 	bl	80002b8 <__aeabi_dsub>
 80156e6:	a30c      	add	r3, pc, #48	; (adr r3, 8015718 <__kernel_sin+0x140>)
 80156e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ec:	4606      	mov	r6, r0
 80156ee:	460f      	mov	r7, r1
 80156f0:	4640      	mov	r0, r8
 80156f2:	4649      	mov	r1, r9
 80156f4:	f7ea ff98 	bl	8000628 <__aeabi_dmul>
 80156f8:	4602      	mov	r2, r0
 80156fa:	460b      	mov	r3, r1
 80156fc:	4630      	mov	r0, r6
 80156fe:	4639      	mov	r1, r7
 8015700:	f7ea fddc 	bl	80002bc <__adddf3>
 8015704:	4602      	mov	r2, r0
 8015706:	460b      	mov	r3, r1
 8015708:	4620      	mov	r0, r4
 801570a:	4629      	mov	r1, r5
 801570c:	f7ea fdd4 	bl	80002b8 <__aeabi_dsub>
 8015710:	e7c6      	b.n	80156a0 <__kernel_sin+0xc8>
 8015712:	bf00      	nop
 8015714:	f3af 8000 	nop.w
 8015718:	55555549 	.word	0x55555549
 801571c:	3fc55555 	.word	0x3fc55555
 8015720:	3fe00000 	.word	0x3fe00000
 8015724:	5acfd57c 	.word	0x5acfd57c
 8015728:	3de5d93a 	.word	0x3de5d93a
 801572c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015730:	3e5ae5e6 	.word	0x3e5ae5e6
 8015734:	57b1fe7d 	.word	0x57b1fe7d
 8015738:	3ec71de3 	.word	0x3ec71de3
 801573c:	19c161d5 	.word	0x19c161d5
 8015740:	3f2a01a0 	.word	0x3f2a01a0
 8015744:	1110f8a6 	.word	0x1110f8a6
 8015748:	3f811111 	.word	0x3f811111

0801574c <fabs>:
 801574c:	ec51 0b10 	vmov	r0, r1, d0
 8015750:	ee10 2a10 	vmov	r2, s0
 8015754:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015758:	ec43 2b10 	vmov	d0, r2, r3
 801575c:	4770      	bx	lr
	...

08015760 <floor>:
 8015760:	ec51 0b10 	vmov	r0, r1, d0
 8015764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015768:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801576c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015770:	2e13      	cmp	r6, #19
 8015772:	460c      	mov	r4, r1
 8015774:	ee10 5a10 	vmov	r5, s0
 8015778:	4680      	mov	r8, r0
 801577a:	dc34      	bgt.n	80157e6 <floor+0x86>
 801577c:	2e00      	cmp	r6, #0
 801577e:	da16      	bge.n	80157ae <floor+0x4e>
 8015780:	a335      	add	r3, pc, #212	; (adr r3, 8015858 <floor+0xf8>)
 8015782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015786:	f7ea fd99 	bl	80002bc <__adddf3>
 801578a:	2200      	movs	r2, #0
 801578c:	2300      	movs	r3, #0
 801578e:	f7eb f9db 	bl	8000b48 <__aeabi_dcmpgt>
 8015792:	b148      	cbz	r0, 80157a8 <floor+0x48>
 8015794:	2c00      	cmp	r4, #0
 8015796:	da59      	bge.n	801584c <floor+0xec>
 8015798:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801579c:	4a30      	ldr	r2, [pc, #192]	; (8015860 <floor+0x100>)
 801579e:	432b      	orrs	r3, r5
 80157a0:	2500      	movs	r5, #0
 80157a2:	42ab      	cmp	r3, r5
 80157a4:	bf18      	it	ne
 80157a6:	4614      	movne	r4, r2
 80157a8:	4621      	mov	r1, r4
 80157aa:	4628      	mov	r0, r5
 80157ac:	e025      	b.n	80157fa <floor+0x9a>
 80157ae:	4f2d      	ldr	r7, [pc, #180]	; (8015864 <floor+0x104>)
 80157b0:	4137      	asrs	r7, r6
 80157b2:	ea01 0307 	and.w	r3, r1, r7
 80157b6:	4303      	orrs	r3, r0
 80157b8:	d01f      	beq.n	80157fa <floor+0x9a>
 80157ba:	a327      	add	r3, pc, #156	; (adr r3, 8015858 <floor+0xf8>)
 80157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c0:	f7ea fd7c 	bl	80002bc <__adddf3>
 80157c4:	2200      	movs	r2, #0
 80157c6:	2300      	movs	r3, #0
 80157c8:	f7eb f9be 	bl	8000b48 <__aeabi_dcmpgt>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	d0eb      	beq.n	80157a8 <floor+0x48>
 80157d0:	2c00      	cmp	r4, #0
 80157d2:	bfbe      	ittt	lt
 80157d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80157d8:	fa43 f606 	asrlt.w	r6, r3, r6
 80157dc:	19a4      	addlt	r4, r4, r6
 80157de:	ea24 0407 	bic.w	r4, r4, r7
 80157e2:	2500      	movs	r5, #0
 80157e4:	e7e0      	b.n	80157a8 <floor+0x48>
 80157e6:	2e33      	cmp	r6, #51	; 0x33
 80157e8:	dd0b      	ble.n	8015802 <floor+0xa2>
 80157ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80157ee:	d104      	bne.n	80157fa <floor+0x9a>
 80157f0:	ee10 2a10 	vmov	r2, s0
 80157f4:	460b      	mov	r3, r1
 80157f6:	f7ea fd61 	bl	80002bc <__adddf3>
 80157fa:	ec41 0b10 	vmov	d0, r0, r1
 80157fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015802:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015806:	f04f 33ff 	mov.w	r3, #4294967295
 801580a:	fa23 f707 	lsr.w	r7, r3, r7
 801580e:	4207      	tst	r7, r0
 8015810:	d0f3      	beq.n	80157fa <floor+0x9a>
 8015812:	a311      	add	r3, pc, #68	; (adr r3, 8015858 <floor+0xf8>)
 8015814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015818:	f7ea fd50 	bl	80002bc <__adddf3>
 801581c:	2200      	movs	r2, #0
 801581e:	2300      	movs	r3, #0
 8015820:	f7eb f992 	bl	8000b48 <__aeabi_dcmpgt>
 8015824:	2800      	cmp	r0, #0
 8015826:	d0bf      	beq.n	80157a8 <floor+0x48>
 8015828:	2c00      	cmp	r4, #0
 801582a:	da02      	bge.n	8015832 <floor+0xd2>
 801582c:	2e14      	cmp	r6, #20
 801582e:	d103      	bne.n	8015838 <floor+0xd8>
 8015830:	3401      	adds	r4, #1
 8015832:	ea25 0507 	bic.w	r5, r5, r7
 8015836:	e7b7      	b.n	80157a8 <floor+0x48>
 8015838:	2301      	movs	r3, #1
 801583a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801583e:	fa03 f606 	lsl.w	r6, r3, r6
 8015842:	4435      	add	r5, r6
 8015844:	4545      	cmp	r5, r8
 8015846:	bf38      	it	cc
 8015848:	18e4      	addcc	r4, r4, r3
 801584a:	e7f2      	b.n	8015832 <floor+0xd2>
 801584c:	2500      	movs	r5, #0
 801584e:	462c      	mov	r4, r5
 8015850:	e7aa      	b.n	80157a8 <floor+0x48>
 8015852:	bf00      	nop
 8015854:	f3af 8000 	nop.w
 8015858:	8800759c 	.word	0x8800759c
 801585c:	7e37e43c 	.word	0x7e37e43c
 8015860:	bff00000 	.word	0xbff00000
 8015864:	000fffff 	.word	0x000fffff

08015868 <scalbn>:
 8015868:	b570      	push	{r4, r5, r6, lr}
 801586a:	ec55 4b10 	vmov	r4, r5, d0
 801586e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015872:	4606      	mov	r6, r0
 8015874:	462b      	mov	r3, r5
 8015876:	b9aa      	cbnz	r2, 80158a4 <scalbn+0x3c>
 8015878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801587c:	4323      	orrs	r3, r4
 801587e:	d03b      	beq.n	80158f8 <scalbn+0x90>
 8015880:	4b31      	ldr	r3, [pc, #196]	; (8015948 <scalbn+0xe0>)
 8015882:	4629      	mov	r1, r5
 8015884:	2200      	movs	r2, #0
 8015886:	ee10 0a10 	vmov	r0, s0
 801588a:	f7ea fecd 	bl	8000628 <__aeabi_dmul>
 801588e:	4b2f      	ldr	r3, [pc, #188]	; (801594c <scalbn+0xe4>)
 8015890:	429e      	cmp	r6, r3
 8015892:	4604      	mov	r4, r0
 8015894:	460d      	mov	r5, r1
 8015896:	da12      	bge.n	80158be <scalbn+0x56>
 8015898:	a327      	add	r3, pc, #156	; (adr r3, 8015938 <scalbn+0xd0>)
 801589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801589e:	f7ea fec3 	bl	8000628 <__aeabi_dmul>
 80158a2:	e009      	b.n	80158b8 <scalbn+0x50>
 80158a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80158a8:	428a      	cmp	r2, r1
 80158aa:	d10c      	bne.n	80158c6 <scalbn+0x5e>
 80158ac:	ee10 2a10 	vmov	r2, s0
 80158b0:	4620      	mov	r0, r4
 80158b2:	4629      	mov	r1, r5
 80158b4:	f7ea fd02 	bl	80002bc <__adddf3>
 80158b8:	4604      	mov	r4, r0
 80158ba:	460d      	mov	r5, r1
 80158bc:	e01c      	b.n	80158f8 <scalbn+0x90>
 80158be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80158c2:	460b      	mov	r3, r1
 80158c4:	3a36      	subs	r2, #54	; 0x36
 80158c6:	4432      	add	r2, r6
 80158c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80158cc:	428a      	cmp	r2, r1
 80158ce:	dd0b      	ble.n	80158e8 <scalbn+0x80>
 80158d0:	ec45 4b11 	vmov	d1, r4, r5
 80158d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015940 <scalbn+0xd8>
 80158d8:	f000 f83c 	bl	8015954 <copysign>
 80158dc:	a318      	add	r3, pc, #96	; (adr r3, 8015940 <scalbn+0xd8>)
 80158de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e2:	ec51 0b10 	vmov	r0, r1, d0
 80158e6:	e7da      	b.n	801589e <scalbn+0x36>
 80158e8:	2a00      	cmp	r2, #0
 80158ea:	dd08      	ble.n	80158fe <scalbn+0x96>
 80158ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80158f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80158f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80158f8:	ec45 4b10 	vmov	d0, r4, r5
 80158fc:	bd70      	pop	{r4, r5, r6, pc}
 80158fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015902:	da0d      	bge.n	8015920 <scalbn+0xb8>
 8015904:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015908:	429e      	cmp	r6, r3
 801590a:	ec45 4b11 	vmov	d1, r4, r5
 801590e:	dce1      	bgt.n	80158d4 <scalbn+0x6c>
 8015910:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015938 <scalbn+0xd0>
 8015914:	f000 f81e 	bl	8015954 <copysign>
 8015918:	a307      	add	r3, pc, #28	; (adr r3, 8015938 <scalbn+0xd0>)
 801591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801591e:	e7e0      	b.n	80158e2 <scalbn+0x7a>
 8015920:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015924:	3236      	adds	r2, #54	; 0x36
 8015926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801592a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801592e:	4620      	mov	r0, r4
 8015930:	4629      	mov	r1, r5
 8015932:	2200      	movs	r2, #0
 8015934:	4b06      	ldr	r3, [pc, #24]	; (8015950 <scalbn+0xe8>)
 8015936:	e7b2      	b.n	801589e <scalbn+0x36>
 8015938:	c2f8f359 	.word	0xc2f8f359
 801593c:	01a56e1f 	.word	0x01a56e1f
 8015940:	8800759c 	.word	0x8800759c
 8015944:	7e37e43c 	.word	0x7e37e43c
 8015948:	43500000 	.word	0x43500000
 801594c:	ffff3cb0 	.word	0xffff3cb0
 8015950:	3c900000 	.word	0x3c900000

08015954 <copysign>:
 8015954:	ec51 0b10 	vmov	r0, r1, d0
 8015958:	ee11 0a90 	vmov	r0, s3
 801595c:	ee10 2a10 	vmov	r2, s0
 8015960:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015964:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015968:	ea41 0300 	orr.w	r3, r1, r0
 801596c:	ec43 2b10 	vmov	d0, r2, r3
 8015970:	4770      	bx	lr
	...

08015974 <__errno>:
 8015974:	4b01      	ldr	r3, [pc, #4]	; (801597c <__errno+0x8>)
 8015976:	6818      	ldr	r0, [r3, #0]
 8015978:	4770      	bx	lr
 801597a:	bf00      	nop
 801597c:	2000000c 	.word	0x2000000c

08015980 <__libc_init_array>:
 8015980:	b570      	push	{r4, r5, r6, lr}
 8015982:	4e0d      	ldr	r6, [pc, #52]	; (80159b8 <__libc_init_array+0x38>)
 8015984:	4c0d      	ldr	r4, [pc, #52]	; (80159bc <__libc_init_array+0x3c>)
 8015986:	1ba4      	subs	r4, r4, r6
 8015988:	10a4      	asrs	r4, r4, #2
 801598a:	2500      	movs	r5, #0
 801598c:	42a5      	cmp	r5, r4
 801598e:	d109      	bne.n	80159a4 <__libc_init_array+0x24>
 8015990:	4e0b      	ldr	r6, [pc, #44]	; (80159c0 <__libc_init_array+0x40>)
 8015992:	4c0c      	ldr	r4, [pc, #48]	; (80159c4 <__libc_init_array+0x44>)
 8015994:	f004 f9e6 	bl	8019d64 <_init>
 8015998:	1ba4      	subs	r4, r4, r6
 801599a:	10a4      	asrs	r4, r4, #2
 801599c:	2500      	movs	r5, #0
 801599e:	42a5      	cmp	r5, r4
 80159a0:	d105      	bne.n	80159ae <__libc_init_array+0x2e>
 80159a2:	bd70      	pop	{r4, r5, r6, pc}
 80159a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159a8:	4798      	blx	r3
 80159aa:	3501      	adds	r5, #1
 80159ac:	e7ee      	b.n	801598c <__libc_init_array+0xc>
 80159ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159b2:	4798      	blx	r3
 80159b4:	3501      	adds	r5, #1
 80159b6:	e7f2      	b.n	801599e <__libc_init_array+0x1e>
 80159b8:	0801a784 	.word	0x0801a784
 80159bc:	0801a784 	.word	0x0801a784
 80159c0:	0801a784 	.word	0x0801a784
 80159c4:	0801a78c 	.word	0x0801a78c

080159c8 <memset>:
 80159c8:	4402      	add	r2, r0
 80159ca:	4603      	mov	r3, r0
 80159cc:	4293      	cmp	r3, r2
 80159ce:	d100      	bne.n	80159d2 <memset+0xa>
 80159d0:	4770      	bx	lr
 80159d2:	f803 1b01 	strb.w	r1, [r3], #1
 80159d6:	e7f9      	b.n	80159cc <memset+0x4>

080159d8 <__cvt>:
 80159d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159dc:	ec55 4b10 	vmov	r4, r5, d0
 80159e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80159e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80159e6:	2d00      	cmp	r5, #0
 80159e8:	460e      	mov	r6, r1
 80159ea:	4691      	mov	r9, r2
 80159ec:	4619      	mov	r1, r3
 80159ee:	bfb8      	it	lt
 80159f0:	4622      	movlt	r2, r4
 80159f2:	462b      	mov	r3, r5
 80159f4:	f027 0720 	bic.w	r7, r7, #32
 80159f8:	bfbb      	ittet	lt
 80159fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80159fe:	461d      	movlt	r5, r3
 8015a00:	2300      	movge	r3, #0
 8015a02:	232d      	movlt	r3, #45	; 0x2d
 8015a04:	bfb8      	it	lt
 8015a06:	4614      	movlt	r4, r2
 8015a08:	2f46      	cmp	r7, #70	; 0x46
 8015a0a:	700b      	strb	r3, [r1, #0]
 8015a0c:	d004      	beq.n	8015a18 <__cvt+0x40>
 8015a0e:	2f45      	cmp	r7, #69	; 0x45
 8015a10:	d100      	bne.n	8015a14 <__cvt+0x3c>
 8015a12:	3601      	adds	r6, #1
 8015a14:	2102      	movs	r1, #2
 8015a16:	e000      	b.n	8015a1a <__cvt+0x42>
 8015a18:	2103      	movs	r1, #3
 8015a1a:	ab03      	add	r3, sp, #12
 8015a1c:	9301      	str	r3, [sp, #4]
 8015a1e:	ab02      	add	r3, sp, #8
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	4632      	mov	r2, r6
 8015a24:	4653      	mov	r3, sl
 8015a26:	ec45 4b10 	vmov	d0, r4, r5
 8015a2a:	f001 fdfd 	bl	8017628 <_dtoa_r>
 8015a2e:	2f47      	cmp	r7, #71	; 0x47
 8015a30:	4680      	mov	r8, r0
 8015a32:	d102      	bne.n	8015a3a <__cvt+0x62>
 8015a34:	f019 0f01 	tst.w	r9, #1
 8015a38:	d026      	beq.n	8015a88 <__cvt+0xb0>
 8015a3a:	2f46      	cmp	r7, #70	; 0x46
 8015a3c:	eb08 0906 	add.w	r9, r8, r6
 8015a40:	d111      	bne.n	8015a66 <__cvt+0x8e>
 8015a42:	f898 3000 	ldrb.w	r3, [r8]
 8015a46:	2b30      	cmp	r3, #48	; 0x30
 8015a48:	d10a      	bne.n	8015a60 <__cvt+0x88>
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	4620      	mov	r0, r4
 8015a50:	4629      	mov	r1, r5
 8015a52:	f7eb f851 	bl	8000af8 <__aeabi_dcmpeq>
 8015a56:	b918      	cbnz	r0, 8015a60 <__cvt+0x88>
 8015a58:	f1c6 0601 	rsb	r6, r6, #1
 8015a5c:	f8ca 6000 	str.w	r6, [sl]
 8015a60:	f8da 3000 	ldr.w	r3, [sl]
 8015a64:	4499      	add	r9, r3
 8015a66:	2200      	movs	r2, #0
 8015a68:	2300      	movs	r3, #0
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	4629      	mov	r1, r5
 8015a6e:	f7eb f843 	bl	8000af8 <__aeabi_dcmpeq>
 8015a72:	b938      	cbnz	r0, 8015a84 <__cvt+0xac>
 8015a74:	2230      	movs	r2, #48	; 0x30
 8015a76:	9b03      	ldr	r3, [sp, #12]
 8015a78:	454b      	cmp	r3, r9
 8015a7a:	d205      	bcs.n	8015a88 <__cvt+0xb0>
 8015a7c:	1c59      	adds	r1, r3, #1
 8015a7e:	9103      	str	r1, [sp, #12]
 8015a80:	701a      	strb	r2, [r3, #0]
 8015a82:	e7f8      	b.n	8015a76 <__cvt+0x9e>
 8015a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8015a88:	9b03      	ldr	r3, [sp, #12]
 8015a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a8c:	eba3 0308 	sub.w	r3, r3, r8
 8015a90:	4640      	mov	r0, r8
 8015a92:	6013      	str	r3, [r2, #0]
 8015a94:	b004      	add	sp, #16
 8015a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015a9a <__exponent>:
 8015a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a9c:	2900      	cmp	r1, #0
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	bfba      	itte	lt
 8015aa2:	4249      	neglt	r1, r1
 8015aa4:	232d      	movlt	r3, #45	; 0x2d
 8015aa6:	232b      	movge	r3, #43	; 0x2b
 8015aa8:	2909      	cmp	r1, #9
 8015aaa:	f804 2b02 	strb.w	r2, [r4], #2
 8015aae:	7043      	strb	r3, [r0, #1]
 8015ab0:	dd20      	ble.n	8015af4 <__exponent+0x5a>
 8015ab2:	f10d 0307 	add.w	r3, sp, #7
 8015ab6:	461f      	mov	r7, r3
 8015ab8:	260a      	movs	r6, #10
 8015aba:	fb91 f5f6 	sdiv	r5, r1, r6
 8015abe:	fb06 1115 	mls	r1, r6, r5, r1
 8015ac2:	3130      	adds	r1, #48	; 0x30
 8015ac4:	2d09      	cmp	r5, #9
 8015ac6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015aca:	f103 32ff 	add.w	r2, r3, #4294967295
 8015ace:	4629      	mov	r1, r5
 8015ad0:	dc09      	bgt.n	8015ae6 <__exponent+0x4c>
 8015ad2:	3130      	adds	r1, #48	; 0x30
 8015ad4:	3b02      	subs	r3, #2
 8015ad6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015ada:	42bb      	cmp	r3, r7
 8015adc:	4622      	mov	r2, r4
 8015ade:	d304      	bcc.n	8015aea <__exponent+0x50>
 8015ae0:	1a10      	subs	r0, r2, r0
 8015ae2:	b003      	add	sp, #12
 8015ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ae6:	4613      	mov	r3, r2
 8015ae8:	e7e7      	b.n	8015aba <__exponent+0x20>
 8015aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aee:	f804 2b01 	strb.w	r2, [r4], #1
 8015af2:	e7f2      	b.n	8015ada <__exponent+0x40>
 8015af4:	2330      	movs	r3, #48	; 0x30
 8015af6:	4419      	add	r1, r3
 8015af8:	7083      	strb	r3, [r0, #2]
 8015afa:	1d02      	adds	r2, r0, #4
 8015afc:	70c1      	strb	r1, [r0, #3]
 8015afe:	e7ef      	b.n	8015ae0 <__exponent+0x46>

08015b00 <_printf_float>:
 8015b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b04:	b08d      	sub	sp, #52	; 0x34
 8015b06:	460c      	mov	r4, r1
 8015b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015b0c:	4616      	mov	r6, r2
 8015b0e:	461f      	mov	r7, r3
 8015b10:	4605      	mov	r5, r0
 8015b12:	f002 fe7b 	bl	801880c <_localeconv_r>
 8015b16:	6803      	ldr	r3, [r0, #0]
 8015b18:	9304      	str	r3, [sp, #16]
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7ea fb70 	bl	8000200 <strlen>
 8015b20:	2300      	movs	r3, #0
 8015b22:	930a      	str	r3, [sp, #40]	; 0x28
 8015b24:	f8d8 3000 	ldr.w	r3, [r8]
 8015b28:	9005      	str	r0, [sp, #20]
 8015b2a:	3307      	adds	r3, #7
 8015b2c:	f023 0307 	bic.w	r3, r3, #7
 8015b30:	f103 0208 	add.w	r2, r3, #8
 8015b34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015b38:	f8d4 b000 	ldr.w	fp, [r4]
 8015b3c:	f8c8 2000 	str.w	r2, [r8]
 8015b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015b48:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015b4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b50:	9307      	str	r3, [sp, #28]
 8015b52:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b56:	f04f 32ff 	mov.w	r2, #4294967295
 8015b5a:	4ba7      	ldr	r3, [pc, #668]	; (8015df8 <_printf_float+0x2f8>)
 8015b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b60:	f7ea fffc 	bl	8000b5c <__aeabi_dcmpun>
 8015b64:	bb70      	cbnz	r0, 8015bc4 <_printf_float+0xc4>
 8015b66:	f04f 32ff 	mov.w	r2, #4294967295
 8015b6a:	4ba3      	ldr	r3, [pc, #652]	; (8015df8 <_printf_float+0x2f8>)
 8015b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b70:	f7ea ffd6 	bl	8000b20 <__aeabi_dcmple>
 8015b74:	bb30      	cbnz	r0, 8015bc4 <_printf_float+0xc4>
 8015b76:	2200      	movs	r2, #0
 8015b78:	2300      	movs	r3, #0
 8015b7a:	4640      	mov	r0, r8
 8015b7c:	4649      	mov	r1, r9
 8015b7e:	f7ea ffc5 	bl	8000b0c <__aeabi_dcmplt>
 8015b82:	b110      	cbz	r0, 8015b8a <_printf_float+0x8a>
 8015b84:	232d      	movs	r3, #45	; 0x2d
 8015b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b8a:	4a9c      	ldr	r2, [pc, #624]	; (8015dfc <_printf_float+0x2fc>)
 8015b8c:	4b9c      	ldr	r3, [pc, #624]	; (8015e00 <_printf_float+0x300>)
 8015b8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015b92:	bf8c      	ite	hi
 8015b94:	4690      	movhi	r8, r2
 8015b96:	4698      	movls	r8, r3
 8015b98:	2303      	movs	r3, #3
 8015b9a:	f02b 0204 	bic.w	r2, fp, #4
 8015b9e:	6123      	str	r3, [r4, #16]
 8015ba0:	6022      	str	r2, [r4, #0]
 8015ba2:	f04f 0900 	mov.w	r9, #0
 8015ba6:	9700      	str	r7, [sp, #0]
 8015ba8:	4633      	mov	r3, r6
 8015baa:	aa0b      	add	r2, sp, #44	; 0x2c
 8015bac:	4621      	mov	r1, r4
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f000 f9e6 	bl	8015f80 <_printf_common>
 8015bb4:	3001      	adds	r0, #1
 8015bb6:	f040 808d 	bne.w	8015cd4 <_printf_float+0x1d4>
 8015bba:	f04f 30ff 	mov.w	r0, #4294967295
 8015bbe:	b00d      	add	sp, #52	; 0x34
 8015bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc4:	4642      	mov	r2, r8
 8015bc6:	464b      	mov	r3, r9
 8015bc8:	4640      	mov	r0, r8
 8015bca:	4649      	mov	r1, r9
 8015bcc:	f7ea ffc6 	bl	8000b5c <__aeabi_dcmpun>
 8015bd0:	b110      	cbz	r0, 8015bd8 <_printf_float+0xd8>
 8015bd2:	4a8c      	ldr	r2, [pc, #560]	; (8015e04 <_printf_float+0x304>)
 8015bd4:	4b8c      	ldr	r3, [pc, #560]	; (8015e08 <_printf_float+0x308>)
 8015bd6:	e7da      	b.n	8015b8e <_printf_float+0x8e>
 8015bd8:	6861      	ldr	r1, [r4, #4]
 8015bda:	1c4b      	adds	r3, r1, #1
 8015bdc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015be0:	a80a      	add	r0, sp, #40	; 0x28
 8015be2:	d13e      	bne.n	8015c62 <_printf_float+0x162>
 8015be4:	2306      	movs	r3, #6
 8015be6:	6063      	str	r3, [r4, #4]
 8015be8:	2300      	movs	r3, #0
 8015bea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015bee:	ab09      	add	r3, sp, #36	; 0x24
 8015bf0:	9300      	str	r3, [sp, #0]
 8015bf2:	ec49 8b10 	vmov	d0, r8, r9
 8015bf6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015bfa:	6022      	str	r2, [r4, #0]
 8015bfc:	f8cd a004 	str.w	sl, [sp, #4]
 8015c00:	6861      	ldr	r1, [r4, #4]
 8015c02:	4628      	mov	r0, r5
 8015c04:	f7ff fee8 	bl	80159d8 <__cvt>
 8015c08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015c0c:	2b47      	cmp	r3, #71	; 0x47
 8015c0e:	4680      	mov	r8, r0
 8015c10:	d109      	bne.n	8015c26 <_printf_float+0x126>
 8015c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c14:	1cd8      	adds	r0, r3, #3
 8015c16:	db02      	blt.n	8015c1e <_printf_float+0x11e>
 8015c18:	6862      	ldr	r2, [r4, #4]
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	dd47      	ble.n	8015cae <_printf_float+0x1ae>
 8015c1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015c22:	fa5f fa8a 	uxtb.w	sl, sl
 8015c26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c2c:	d824      	bhi.n	8015c78 <_printf_float+0x178>
 8015c2e:	3901      	subs	r1, #1
 8015c30:	4652      	mov	r2, sl
 8015c32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c36:	9109      	str	r1, [sp, #36]	; 0x24
 8015c38:	f7ff ff2f 	bl	8015a9a <__exponent>
 8015c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c3e:	1813      	adds	r3, r2, r0
 8015c40:	2a01      	cmp	r2, #1
 8015c42:	4681      	mov	r9, r0
 8015c44:	6123      	str	r3, [r4, #16]
 8015c46:	dc02      	bgt.n	8015c4e <_printf_float+0x14e>
 8015c48:	6822      	ldr	r2, [r4, #0]
 8015c4a:	07d1      	lsls	r1, r2, #31
 8015c4c:	d501      	bpl.n	8015c52 <_printf_float+0x152>
 8015c4e:	3301      	adds	r3, #1
 8015c50:	6123      	str	r3, [r4, #16]
 8015c52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d0a5      	beq.n	8015ba6 <_printf_float+0xa6>
 8015c5a:	232d      	movs	r3, #45	; 0x2d
 8015c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c60:	e7a1      	b.n	8015ba6 <_printf_float+0xa6>
 8015c62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015c66:	f000 8177 	beq.w	8015f58 <_printf_float+0x458>
 8015c6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015c6e:	d1bb      	bne.n	8015be8 <_printf_float+0xe8>
 8015c70:	2900      	cmp	r1, #0
 8015c72:	d1b9      	bne.n	8015be8 <_printf_float+0xe8>
 8015c74:	2301      	movs	r3, #1
 8015c76:	e7b6      	b.n	8015be6 <_printf_float+0xe6>
 8015c78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015c7c:	d119      	bne.n	8015cb2 <_printf_float+0x1b2>
 8015c7e:	2900      	cmp	r1, #0
 8015c80:	6863      	ldr	r3, [r4, #4]
 8015c82:	dd0c      	ble.n	8015c9e <_printf_float+0x19e>
 8015c84:	6121      	str	r1, [r4, #16]
 8015c86:	b913      	cbnz	r3, 8015c8e <_printf_float+0x18e>
 8015c88:	6822      	ldr	r2, [r4, #0]
 8015c8a:	07d2      	lsls	r2, r2, #31
 8015c8c:	d502      	bpl.n	8015c94 <_printf_float+0x194>
 8015c8e:	3301      	adds	r3, #1
 8015c90:	440b      	add	r3, r1
 8015c92:	6123      	str	r3, [r4, #16]
 8015c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c96:	65a3      	str	r3, [r4, #88]	; 0x58
 8015c98:	f04f 0900 	mov.w	r9, #0
 8015c9c:	e7d9      	b.n	8015c52 <_printf_float+0x152>
 8015c9e:	b913      	cbnz	r3, 8015ca6 <_printf_float+0x1a6>
 8015ca0:	6822      	ldr	r2, [r4, #0]
 8015ca2:	07d0      	lsls	r0, r2, #31
 8015ca4:	d501      	bpl.n	8015caa <_printf_float+0x1aa>
 8015ca6:	3302      	adds	r3, #2
 8015ca8:	e7f3      	b.n	8015c92 <_printf_float+0x192>
 8015caa:	2301      	movs	r3, #1
 8015cac:	e7f1      	b.n	8015c92 <_printf_float+0x192>
 8015cae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015cb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cb6:	4293      	cmp	r3, r2
 8015cb8:	db05      	blt.n	8015cc6 <_printf_float+0x1c6>
 8015cba:	6822      	ldr	r2, [r4, #0]
 8015cbc:	6123      	str	r3, [r4, #16]
 8015cbe:	07d1      	lsls	r1, r2, #31
 8015cc0:	d5e8      	bpl.n	8015c94 <_printf_float+0x194>
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	e7e5      	b.n	8015c92 <_printf_float+0x192>
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	bfd4      	ite	le
 8015cca:	f1c3 0302 	rsble	r3, r3, #2
 8015cce:	2301      	movgt	r3, #1
 8015cd0:	4413      	add	r3, r2
 8015cd2:	e7de      	b.n	8015c92 <_printf_float+0x192>
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	055a      	lsls	r2, r3, #21
 8015cd8:	d407      	bmi.n	8015cea <_printf_float+0x1ea>
 8015cda:	6923      	ldr	r3, [r4, #16]
 8015cdc:	4642      	mov	r2, r8
 8015cde:	4631      	mov	r1, r6
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	47b8      	blx	r7
 8015ce4:	3001      	adds	r0, #1
 8015ce6:	d12b      	bne.n	8015d40 <_printf_float+0x240>
 8015ce8:	e767      	b.n	8015bba <_printf_float+0xba>
 8015cea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015cee:	f240 80dc 	bls.w	8015eaa <_printf_float+0x3aa>
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015cfa:	f7ea fefd 	bl	8000af8 <__aeabi_dcmpeq>
 8015cfe:	2800      	cmp	r0, #0
 8015d00:	d033      	beq.n	8015d6a <_printf_float+0x26a>
 8015d02:	2301      	movs	r3, #1
 8015d04:	4a41      	ldr	r2, [pc, #260]	; (8015e0c <_printf_float+0x30c>)
 8015d06:	4631      	mov	r1, r6
 8015d08:	4628      	mov	r0, r5
 8015d0a:	47b8      	blx	r7
 8015d0c:	3001      	adds	r0, #1
 8015d0e:	f43f af54 	beq.w	8015bba <_printf_float+0xba>
 8015d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d16:	429a      	cmp	r2, r3
 8015d18:	db02      	blt.n	8015d20 <_printf_float+0x220>
 8015d1a:	6823      	ldr	r3, [r4, #0]
 8015d1c:	07d8      	lsls	r0, r3, #31
 8015d1e:	d50f      	bpl.n	8015d40 <_printf_float+0x240>
 8015d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d24:	4631      	mov	r1, r6
 8015d26:	4628      	mov	r0, r5
 8015d28:	47b8      	blx	r7
 8015d2a:	3001      	adds	r0, #1
 8015d2c:	f43f af45 	beq.w	8015bba <_printf_float+0xba>
 8015d30:	f04f 0800 	mov.w	r8, #0
 8015d34:	f104 091a 	add.w	r9, r4, #26
 8015d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d3a:	3b01      	subs	r3, #1
 8015d3c:	4543      	cmp	r3, r8
 8015d3e:	dc09      	bgt.n	8015d54 <_printf_float+0x254>
 8015d40:	6823      	ldr	r3, [r4, #0]
 8015d42:	079b      	lsls	r3, r3, #30
 8015d44:	f100 8103 	bmi.w	8015f4e <_printf_float+0x44e>
 8015d48:	68e0      	ldr	r0, [r4, #12]
 8015d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d4c:	4298      	cmp	r0, r3
 8015d4e:	bfb8      	it	lt
 8015d50:	4618      	movlt	r0, r3
 8015d52:	e734      	b.n	8015bbe <_printf_float+0xbe>
 8015d54:	2301      	movs	r3, #1
 8015d56:	464a      	mov	r2, r9
 8015d58:	4631      	mov	r1, r6
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	47b8      	blx	r7
 8015d5e:	3001      	adds	r0, #1
 8015d60:	f43f af2b 	beq.w	8015bba <_printf_float+0xba>
 8015d64:	f108 0801 	add.w	r8, r8, #1
 8015d68:	e7e6      	b.n	8015d38 <_printf_float+0x238>
 8015d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	dc2b      	bgt.n	8015dc8 <_printf_float+0x2c8>
 8015d70:	2301      	movs	r3, #1
 8015d72:	4a26      	ldr	r2, [pc, #152]	; (8015e0c <_printf_float+0x30c>)
 8015d74:	4631      	mov	r1, r6
 8015d76:	4628      	mov	r0, r5
 8015d78:	47b8      	blx	r7
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	f43f af1d 	beq.w	8015bba <_printf_float+0xba>
 8015d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d82:	b923      	cbnz	r3, 8015d8e <_printf_float+0x28e>
 8015d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d86:	b913      	cbnz	r3, 8015d8e <_printf_float+0x28e>
 8015d88:	6823      	ldr	r3, [r4, #0]
 8015d8a:	07d9      	lsls	r1, r3, #31
 8015d8c:	d5d8      	bpl.n	8015d40 <_printf_float+0x240>
 8015d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d92:	4631      	mov	r1, r6
 8015d94:	4628      	mov	r0, r5
 8015d96:	47b8      	blx	r7
 8015d98:	3001      	adds	r0, #1
 8015d9a:	f43f af0e 	beq.w	8015bba <_printf_float+0xba>
 8015d9e:	f04f 0900 	mov.w	r9, #0
 8015da2:	f104 0a1a 	add.w	sl, r4, #26
 8015da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da8:	425b      	negs	r3, r3
 8015daa:	454b      	cmp	r3, r9
 8015dac:	dc01      	bgt.n	8015db2 <_printf_float+0x2b2>
 8015dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015db0:	e794      	b.n	8015cdc <_printf_float+0x1dc>
 8015db2:	2301      	movs	r3, #1
 8015db4:	4652      	mov	r2, sl
 8015db6:	4631      	mov	r1, r6
 8015db8:	4628      	mov	r0, r5
 8015dba:	47b8      	blx	r7
 8015dbc:	3001      	adds	r0, #1
 8015dbe:	f43f aefc 	beq.w	8015bba <_printf_float+0xba>
 8015dc2:	f109 0901 	add.w	r9, r9, #1
 8015dc6:	e7ee      	b.n	8015da6 <_printf_float+0x2a6>
 8015dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	bfa8      	it	ge
 8015dd0:	461a      	movge	r2, r3
 8015dd2:	2a00      	cmp	r2, #0
 8015dd4:	4691      	mov	r9, r2
 8015dd6:	dd07      	ble.n	8015de8 <_printf_float+0x2e8>
 8015dd8:	4613      	mov	r3, r2
 8015dda:	4631      	mov	r1, r6
 8015ddc:	4642      	mov	r2, r8
 8015dde:	4628      	mov	r0, r5
 8015de0:	47b8      	blx	r7
 8015de2:	3001      	adds	r0, #1
 8015de4:	f43f aee9 	beq.w	8015bba <_printf_float+0xba>
 8015de8:	f104 031a 	add.w	r3, r4, #26
 8015dec:	f04f 0b00 	mov.w	fp, #0
 8015df0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015df4:	9306      	str	r3, [sp, #24]
 8015df6:	e015      	b.n	8015e24 <_printf_float+0x324>
 8015df8:	7fefffff 	.word	0x7fefffff
 8015dfc:	0801a454 	.word	0x0801a454
 8015e00:	0801a450 	.word	0x0801a450
 8015e04:	0801a45c 	.word	0x0801a45c
 8015e08:	0801a458 	.word	0x0801a458
 8015e0c:	0801a613 	.word	0x0801a613
 8015e10:	2301      	movs	r3, #1
 8015e12:	9a06      	ldr	r2, [sp, #24]
 8015e14:	4631      	mov	r1, r6
 8015e16:	4628      	mov	r0, r5
 8015e18:	47b8      	blx	r7
 8015e1a:	3001      	adds	r0, #1
 8015e1c:	f43f aecd 	beq.w	8015bba <_printf_float+0xba>
 8015e20:	f10b 0b01 	add.w	fp, fp, #1
 8015e24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015e28:	ebaa 0309 	sub.w	r3, sl, r9
 8015e2c:	455b      	cmp	r3, fp
 8015e2e:	dcef      	bgt.n	8015e10 <_printf_float+0x310>
 8015e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e34:	429a      	cmp	r2, r3
 8015e36:	44d0      	add	r8, sl
 8015e38:	db15      	blt.n	8015e66 <_printf_float+0x366>
 8015e3a:	6823      	ldr	r3, [r4, #0]
 8015e3c:	07da      	lsls	r2, r3, #31
 8015e3e:	d412      	bmi.n	8015e66 <_printf_float+0x366>
 8015e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e44:	eba3 020a 	sub.w	r2, r3, sl
 8015e48:	eba3 0a01 	sub.w	sl, r3, r1
 8015e4c:	4592      	cmp	sl, r2
 8015e4e:	bfa8      	it	ge
 8015e50:	4692      	movge	sl, r2
 8015e52:	f1ba 0f00 	cmp.w	sl, #0
 8015e56:	dc0e      	bgt.n	8015e76 <_printf_float+0x376>
 8015e58:	f04f 0800 	mov.w	r8, #0
 8015e5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e60:	f104 091a 	add.w	r9, r4, #26
 8015e64:	e019      	b.n	8015e9a <_printf_float+0x39a>
 8015e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e6a:	4631      	mov	r1, r6
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	47b8      	blx	r7
 8015e70:	3001      	adds	r0, #1
 8015e72:	d1e5      	bne.n	8015e40 <_printf_float+0x340>
 8015e74:	e6a1      	b.n	8015bba <_printf_float+0xba>
 8015e76:	4653      	mov	r3, sl
 8015e78:	4642      	mov	r2, r8
 8015e7a:	4631      	mov	r1, r6
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	47b8      	blx	r7
 8015e80:	3001      	adds	r0, #1
 8015e82:	d1e9      	bne.n	8015e58 <_printf_float+0x358>
 8015e84:	e699      	b.n	8015bba <_printf_float+0xba>
 8015e86:	2301      	movs	r3, #1
 8015e88:	464a      	mov	r2, r9
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	47b8      	blx	r7
 8015e90:	3001      	adds	r0, #1
 8015e92:	f43f ae92 	beq.w	8015bba <_printf_float+0xba>
 8015e96:	f108 0801 	add.w	r8, r8, #1
 8015e9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e9e:	1a9b      	subs	r3, r3, r2
 8015ea0:	eba3 030a 	sub.w	r3, r3, sl
 8015ea4:	4543      	cmp	r3, r8
 8015ea6:	dcee      	bgt.n	8015e86 <_printf_float+0x386>
 8015ea8:	e74a      	b.n	8015d40 <_printf_float+0x240>
 8015eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eac:	2a01      	cmp	r2, #1
 8015eae:	dc01      	bgt.n	8015eb4 <_printf_float+0x3b4>
 8015eb0:	07db      	lsls	r3, r3, #31
 8015eb2:	d53a      	bpl.n	8015f2a <_printf_float+0x42a>
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	4642      	mov	r2, r8
 8015eb8:	4631      	mov	r1, r6
 8015eba:	4628      	mov	r0, r5
 8015ebc:	47b8      	blx	r7
 8015ebe:	3001      	adds	r0, #1
 8015ec0:	f43f ae7b 	beq.w	8015bba <_printf_float+0xba>
 8015ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ec8:	4631      	mov	r1, r6
 8015eca:	4628      	mov	r0, r5
 8015ecc:	47b8      	blx	r7
 8015ece:	3001      	adds	r0, #1
 8015ed0:	f108 0801 	add.w	r8, r8, #1
 8015ed4:	f43f ae71 	beq.w	8015bba <_printf_float+0xba>
 8015ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eda:	2200      	movs	r2, #0
 8015edc:	f103 3aff 	add.w	sl, r3, #4294967295
 8015ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	f7ea fe07 	bl	8000af8 <__aeabi_dcmpeq>
 8015eea:	b9c8      	cbnz	r0, 8015f20 <_printf_float+0x420>
 8015eec:	4653      	mov	r3, sl
 8015eee:	4642      	mov	r2, r8
 8015ef0:	4631      	mov	r1, r6
 8015ef2:	4628      	mov	r0, r5
 8015ef4:	47b8      	blx	r7
 8015ef6:	3001      	adds	r0, #1
 8015ef8:	d10e      	bne.n	8015f18 <_printf_float+0x418>
 8015efa:	e65e      	b.n	8015bba <_printf_float+0xba>
 8015efc:	2301      	movs	r3, #1
 8015efe:	4652      	mov	r2, sl
 8015f00:	4631      	mov	r1, r6
 8015f02:	4628      	mov	r0, r5
 8015f04:	47b8      	blx	r7
 8015f06:	3001      	adds	r0, #1
 8015f08:	f43f ae57 	beq.w	8015bba <_printf_float+0xba>
 8015f0c:	f108 0801 	add.w	r8, r8, #1
 8015f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f12:	3b01      	subs	r3, #1
 8015f14:	4543      	cmp	r3, r8
 8015f16:	dcf1      	bgt.n	8015efc <_printf_float+0x3fc>
 8015f18:	464b      	mov	r3, r9
 8015f1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f1e:	e6de      	b.n	8015cde <_printf_float+0x1de>
 8015f20:	f04f 0800 	mov.w	r8, #0
 8015f24:	f104 0a1a 	add.w	sl, r4, #26
 8015f28:	e7f2      	b.n	8015f10 <_printf_float+0x410>
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	e7df      	b.n	8015eee <_printf_float+0x3ee>
 8015f2e:	2301      	movs	r3, #1
 8015f30:	464a      	mov	r2, r9
 8015f32:	4631      	mov	r1, r6
 8015f34:	4628      	mov	r0, r5
 8015f36:	47b8      	blx	r7
 8015f38:	3001      	adds	r0, #1
 8015f3a:	f43f ae3e 	beq.w	8015bba <_printf_float+0xba>
 8015f3e:	f108 0801 	add.w	r8, r8, #1
 8015f42:	68e3      	ldr	r3, [r4, #12]
 8015f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f46:	1a9b      	subs	r3, r3, r2
 8015f48:	4543      	cmp	r3, r8
 8015f4a:	dcf0      	bgt.n	8015f2e <_printf_float+0x42e>
 8015f4c:	e6fc      	b.n	8015d48 <_printf_float+0x248>
 8015f4e:	f04f 0800 	mov.w	r8, #0
 8015f52:	f104 0919 	add.w	r9, r4, #25
 8015f56:	e7f4      	b.n	8015f42 <_printf_float+0x442>
 8015f58:	2900      	cmp	r1, #0
 8015f5a:	f43f ae8b 	beq.w	8015c74 <_printf_float+0x174>
 8015f5e:	2300      	movs	r3, #0
 8015f60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015f64:	ab09      	add	r3, sp, #36	; 0x24
 8015f66:	9300      	str	r3, [sp, #0]
 8015f68:	ec49 8b10 	vmov	d0, r8, r9
 8015f6c:	6022      	str	r2, [r4, #0]
 8015f6e:	f8cd a004 	str.w	sl, [sp, #4]
 8015f72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015f76:	4628      	mov	r0, r5
 8015f78:	f7ff fd2e 	bl	80159d8 <__cvt>
 8015f7c:	4680      	mov	r8, r0
 8015f7e:	e648      	b.n	8015c12 <_printf_float+0x112>

08015f80 <_printf_common>:
 8015f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f84:	4691      	mov	r9, r2
 8015f86:	461f      	mov	r7, r3
 8015f88:	688a      	ldr	r2, [r1, #8]
 8015f8a:	690b      	ldr	r3, [r1, #16]
 8015f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015f90:	4293      	cmp	r3, r2
 8015f92:	bfb8      	it	lt
 8015f94:	4613      	movlt	r3, r2
 8015f96:	f8c9 3000 	str.w	r3, [r9]
 8015f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015f9e:	4606      	mov	r6, r0
 8015fa0:	460c      	mov	r4, r1
 8015fa2:	b112      	cbz	r2, 8015faa <_printf_common+0x2a>
 8015fa4:	3301      	adds	r3, #1
 8015fa6:	f8c9 3000 	str.w	r3, [r9]
 8015faa:	6823      	ldr	r3, [r4, #0]
 8015fac:	0699      	lsls	r1, r3, #26
 8015fae:	bf42      	ittt	mi
 8015fb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015fb4:	3302      	addmi	r3, #2
 8015fb6:	f8c9 3000 	strmi.w	r3, [r9]
 8015fba:	6825      	ldr	r5, [r4, #0]
 8015fbc:	f015 0506 	ands.w	r5, r5, #6
 8015fc0:	d107      	bne.n	8015fd2 <_printf_common+0x52>
 8015fc2:	f104 0a19 	add.w	sl, r4, #25
 8015fc6:	68e3      	ldr	r3, [r4, #12]
 8015fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8015fcc:	1a9b      	subs	r3, r3, r2
 8015fce:	42ab      	cmp	r3, r5
 8015fd0:	dc28      	bgt.n	8016024 <_printf_common+0xa4>
 8015fd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015fd6:	6822      	ldr	r2, [r4, #0]
 8015fd8:	3300      	adds	r3, #0
 8015fda:	bf18      	it	ne
 8015fdc:	2301      	movne	r3, #1
 8015fde:	0692      	lsls	r2, r2, #26
 8015fe0:	d42d      	bmi.n	801603e <_printf_common+0xbe>
 8015fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015fe6:	4639      	mov	r1, r7
 8015fe8:	4630      	mov	r0, r6
 8015fea:	47c0      	blx	r8
 8015fec:	3001      	adds	r0, #1
 8015fee:	d020      	beq.n	8016032 <_printf_common+0xb2>
 8015ff0:	6823      	ldr	r3, [r4, #0]
 8015ff2:	68e5      	ldr	r5, [r4, #12]
 8015ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8015ff8:	f003 0306 	and.w	r3, r3, #6
 8015ffc:	2b04      	cmp	r3, #4
 8015ffe:	bf08      	it	eq
 8016000:	1aad      	subeq	r5, r5, r2
 8016002:	68a3      	ldr	r3, [r4, #8]
 8016004:	6922      	ldr	r2, [r4, #16]
 8016006:	bf0c      	ite	eq
 8016008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801600c:	2500      	movne	r5, #0
 801600e:	4293      	cmp	r3, r2
 8016010:	bfc4      	itt	gt
 8016012:	1a9b      	subgt	r3, r3, r2
 8016014:	18ed      	addgt	r5, r5, r3
 8016016:	f04f 0900 	mov.w	r9, #0
 801601a:	341a      	adds	r4, #26
 801601c:	454d      	cmp	r5, r9
 801601e:	d11a      	bne.n	8016056 <_printf_common+0xd6>
 8016020:	2000      	movs	r0, #0
 8016022:	e008      	b.n	8016036 <_printf_common+0xb6>
 8016024:	2301      	movs	r3, #1
 8016026:	4652      	mov	r2, sl
 8016028:	4639      	mov	r1, r7
 801602a:	4630      	mov	r0, r6
 801602c:	47c0      	blx	r8
 801602e:	3001      	adds	r0, #1
 8016030:	d103      	bne.n	801603a <_printf_common+0xba>
 8016032:	f04f 30ff 	mov.w	r0, #4294967295
 8016036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801603a:	3501      	adds	r5, #1
 801603c:	e7c3      	b.n	8015fc6 <_printf_common+0x46>
 801603e:	18e1      	adds	r1, r4, r3
 8016040:	1c5a      	adds	r2, r3, #1
 8016042:	2030      	movs	r0, #48	; 0x30
 8016044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016048:	4422      	add	r2, r4
 801604a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801604e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016052:	3302      	adds	r3, #2
 8016054:	e7c5      	b.n	8015fe2 <_printf_common+0x62>
 8016056:	2301      	movs	r3, #1
 8016058:	4622      	mov	r2, r4
 801605a:	4639      	mov	r1, r7
 801605c:	4630      	mov	r0, r6
 801605e:	47c0      	blx	r8
 8016060:	3001      	adds	r0, #1
 8016062:	d0e6      	beq.n	8016032 <_printf_common+0xb2>
 8016064:	f109 0901 	add.w	r9, r9, #1
 8016068:	e7d8      	b.n	801601c <_printf_common+0x9c>
	...

0801606c <_printf_i>:
 801606c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016070:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016074:	460c      	mov	r4, r1
 8016076:	7e09      	ldrb	r1, [r1, #24]
 8016078:	b085      	sub	sp, #20
 801607a:	296e      	cmp	r1, #110	; 0x6e
 801607c:	4617      	mov	r7, r2
 801607e:	4606      	mov	r6, r0
 8016080:	4698      	mov	r8, r3
 8016082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016084:	f000 80b3 	beq.w	80161ee <_printf_i+0x182>
 8016088:	d822      	bhi.n	80160d0 <_printf_i+0x64>
 801608a:	2963      	cmp	r1, #99	; 0x63
 801608c:	d036      	beq.n	80160fc <_printf_i+0x90>
 801608e:	d80a      	bhi.n	80160a6 <_printf_i+0x3a>
 8016090:	2900      	cmp	r1, #0
 8016092:	f000 80b9 	beq.w	8016208 <_printf_i+0x19c>
 8016096:	2958      	cmp	r1, #88	; 0x58
 8016098:	f000 8083 	beq.w	80161a2 <_printf_i+0x136>
 801609c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80160a4:	e032      	b.n	801610c <_printf_i+0xa0>
 80160a6:	2964      	cmp	r1, #100	; 0x64
 80160a8:	d001      	beq.n	80160ae <_printf_i+0x42>
 80160aa:	2969      	cmp	r1, #105	; 0x69
 80160ac:	d1f6      	bne.n	801609c <_printf_i+0x30>
 80160ae:	6820      	ldr	r0, [r4, #0]
 80160b0:	6813      	ldr	r3, [r2, #0]
 80160b2:	0605      	lsls	r5, r0, #24
 80160b4:	f103 0104 	add.w	r1, r3, #4
 80160b8:	d52a      	bpl.n	8016110 <_printf_i+0xa4>
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	6011      	str	r1, [r2, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	da03      	bge.n	80160ca <_printf_i+0x5e>
 80160c2:	222d      	movs	r2, #45	; 0x2d
 80160c4:	425b      	negs	r3, r3
 80160c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80160ca:	486f      	ldr	r0, [pc, #444]	; (8016288 <_printf_i+0x21c>)
 80160cc:	220a      	movs	r2, #10
 80160ce:	e039      	b.n	8016144 <_printf_i+0xd8>
 80160d0:	2973      	cmp	r1, #115	; 0x73
 80160d2:	f000 809d 	beq.w	8016210 <_printf_i+0x1a4>
 80160d6:	d808      	bhi.n	80160ea <_printf_i+0x7e>
 80160d8:	296f      	cmp	r1, #111	; 0x6f
 80160da:	d020      	beq.n	801611e <_printf_i+0xb2>
 80160dc:	2970      	cmp	r1, #112	; 0x70
 80160de:	d1dd      	bne.n	801609c <_printf_i+0x30>
 80160e0:	6823      	ldr	r3, [r4, #0]
 80160e2:	f043 0320 	orr.w	r3, r3, #32
 80160e6:	6023      	str	r3, [r4, #0]
 80160e8:	e003      	b.n	80160f2 <_printf_i+0x86>
 80160ea:	2975      	cmp	r1, #117	; 0x75
 80160ec:	d017      	beq.n	801611e <_printf_i+0xb2>
 80160ee:	2978      	cmp	r1, #120	; 0x78
 80160f0:	d1d4      	bne.n	801609c <_printf_i+0x30>
 80160f2:	2378      	movs	r3, #120	; 0x78
 80160f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80160f8:	4864      	ldr	r0, [pc, #400]	; (801628c <_printf_i+0x220>)
 80160fa:	e055      	b.n	80161a8 <_printf_i+0x13c>
 80160fc:	6813      	ldr	r3, [r2, #0]
 80160fe:	1d19      	adds	r1, r3, #4
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	6011      	str	r1, [r2, #0]
 8016104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801610c:	2301      	movs	r3, #1
 801610e:	e08c      	b.n	801622a <_printf_i+0x1be>
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	6011      	str	r1, [r2, #0]
 8016114:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016118:	bf18      	it	ne
 801611a:	b21b      	sxthne	r3, r3
 801611c:	e7cf      	b.n	80160be <_printf_i+0x52>
 801611e:	6813      	ldr	r3, [r2, #0]
 8016120:	6825      	ldr	r5, [r4, #0]
 8016122:	1d18      	adds	r0, r3, #4
 8016124:	6010      	str	r0, [r2, #0]
 8016126:	0628      	lsls	r0, r5, #24
 8016128:	d501      	bpl.n	801612e <_printf_i+0xc2>
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	e002      	b.n	8016134 <_printf_i+0xc8>
 801612e:	0668      	lsls	r0, r5, #25
 8016130:	d5fb      	bpl.n	801612a <_printf_i+0xbe>
 8016132:	881b      	ldrh	r3, [r3, #0]
 8016134:	4854      	ldr	r0, [pc, #336]	; (8016288 <_printf_i+0x21c>)
 8016136:	296f      	cmp	r1, #111	; 0x6f
 8016138:	bf14      	ite	ne
 801613a:	220a      	movne	r2, #10
 801613c:	2208      	moveq	r2, #8
 801613e:	2100      	movs	r1, #0
 8016140:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016144:	6865      	ldr	r5, [r4, #4]
 8016146:	60a5      	str	r5, [r4, #8]
 8016148:	2d00      	cmp	r5, #0
 801614a:	f2c0 8095 	blt.w	8016278 <_printf_i+0x20c>
 801614e:	6821      	ldr	r1, [r4, #0]
 8016150:	f021 0104 	bic.w	r1, r1, #4
 8016154:	6021      	str	r1, [r4, #0]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d13d      	bne.n	80161d6 <_printf_i+0x16a>
 801615a:	2d00      	cmp	r5, #0
 801615c:	f040 808e 	bne.w	801627c <_printf_i+0x210>
 8016160:	4665      	mov	r5, ip
 8016162:	2a08      	cmp	r2, #8
 8016164:	d10b      	bne.n	801617e <_printf_i+0x112>
 8016166:	6823      	ldr	r3, [r4, #0]
 8016168:	07db      	lsls	r3, r3, #31
 801616a:	d508      	bpl.n	801617e <_printf_i+0x112>
 801616c:	6923      	ldr	r3, [r4, #16]
 801616e:	6862      	ldr	r2, [r4, #4]
 8016170:	429a      	cmp	r2, r3
 8016172:	bfde      	ittt	le
 8016174:	2330      	movle	r3, #48	; 0x30
 8016176:	f805 3c01 	strble.w	r3, [r5, #-1]
 801617a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801617e:	ebac 0305 	sub.w	r3, ip, r5
 8016182:	6123      	str	r3, [r4, #16]
 8016184:	f8cd 8000 	str.w	r8, [sp]
 8016188:	463b      	mov	r3, r7
 801618a:	aa03      	add	r2, sp, #12
 801618c:	4621      	mov	r1, r4
 801618e:	4630      	mov	r0, r6
 8016190:	f7ff fef6 	bl	8015f80 <_printf_common>
 8016194:	3001      	adds	r0, #1
 8016196:	d14d      	bne.n	8016234 <_printf_i+0x1c8>
 8016198:	f04f 30ff 	mov.w	r0, #4294967295
 801619c:	b005      	add	sp, #20
 801619e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161a2:	4839      	ldr	r0, [pc, #228]	; (8016288 <_printf_i+0x21c>)
 80161a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80161a8:	6813      	ldr	r3, [r2, #0]
 80161aa:	6821      	ldr	r1, [r4, #0]
 80161ac:	1d1d      	adds	r5, r3, #4
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	6015      	str	r5, [r2, #0]
 80161b2:	060a      	lsls	r2, r1, #24
 80161b4:	d50b      	bpl.n	80161ce <_printf_i+0x162>
 80161b6:	07ca      	lsls	r2, r1, #31
 80161b8:	bf44      	itt	mi
 80161ba:	f041 0120 	orrmi.w	r1, r1, #32
 80161be:	6021      	strmi	r1, [r4, #0]
 80161c0:	b91b      	cbnz	r3, 80161ca <_printf_i+0x15e>
 80161c2:	6822      	ldr	r2, [r4, #0]
 80161c4:	f022 0220 	bic.w	r2, r2, #32
 80161c8:	6022      	str	r2, [r4, #0]
 80161ca:	2210      	movs	r2, #16
 80161cc:	e7b7      	b.n	801613e <_printf_i+0xd2>
 80161ce:	064d      	lsls	r5, r1, #25
 80161d0:	bf48      	it	mi
 80161d2:	b29b      	uxthmi	r3, r3
 80161d4:	e7ef      	b.n	80161b6 <_printf_i+0x14a>
 80161d6:	4665      	mov	r5, ip
 80161d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80161dc:	fb02 3311 	mls	r3, r2, r1, r3
 80161e0:	5cc3      	ldrb	r3, [r0, r3]
 80161e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80161e6:	460b      	mov	r3, r1
 80161e8:	2900      	cmp	r1, #0
 80161ea:	d1f5      	bne.n	80161d8 <_printf_i+0x16c>
 80161ec:	e7b9      	b.n	8016162 <_printf_i+0xf6>
 80161ee:	6813      	ldr	r3, [r2, #0]
 80161f0:	6825      	ldr	r5, [r4, #0]
 80161f2:	6961      	ldr	r1, [r4, #20]
 80161f4:	1d18      	adds	r0, r3, #4
 80161f6:	6010      	str	r0, [r2, #0]
 80161f8:	0628      	lsls	r0, r5, #24
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	d501      	bpl.n	8016202 <_printf_i+0x196>
 80161fe:	6019      	str	r1, [r3, #0]
 8016200:	e002      	b.n	8016208 <_printf_i+0x19c>
 8016202:	066a      	lsls	r2, r5, #25
 8016204:	d5fb      	bpl.n	80161fe <_printf_i+0x192>
 8016206:	8019      	strh	r1, [r3, #0]
 8016208:	2300      	movs	r3, #0
 801620a:	6123      	str	r3, [r4, #16]
 801620c:	4665      	mov	r5, ip
 801620e:	e7b9      	b.n	8016184 <_printf_i+0x118>
 8016210:	6813      	ldr	r3, [r2, #0]
 8016212:	1d19      	adds	r1, r3, #4
 8016214:	6011      	str	r1, [r2, #0]
 8016216:	681d      	ldr	r5, [r3, #0]
 8016218:	6862      	ldr	r2, [r4, #4]
 801621a:	2100      	movs	r1, #0
 801621c:	4628      	mov	r0, r5
 801621e:	f7e9 fff7 	bl	8000210 <memchr>
 8016222:	b108      	cbz	r0, 8016228 <_printf_i+0x1bc>
 8016224:	1b40      	subs	r0, r0, r5
 8016226:	6060      	str	r0, [r4, #4]
 8016228:	6863      	ldr	r3, [r4, #4]
 801622a:	6123      	str	r3, [r4, #16]
 801622c:	2300      	movs	r3, #0
 801622e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016232:	e7a7      	b.n	8016184 <_printf_i+0x118>
 8016234:	6923      	ldr	r3, [r4, #16]
 8016236:	462a      	mov	r2, r5
 8016238:	4639      	mov	r1, r7
 801623a:	4630      	mov	r0, r6
 801623c:	47c0      	blx	r8
 801623e:	3001      	adds	r0, #1
 8016240:	d0aa      	beq.n	8016198 <_printf_i+0x12c>
 8016242:	6823      	ldr	r3, [r4, #0]
 8016244:	079b      	lsls	r3, r3, #30
 8016246:	d413      	bmi.n	8016270 <_printf_i+0x204>
 8016248:	68e0      	ldr	r0, [r4, #12]
 801624a:	9b03      	ldr	r3, [sp, #12]
 801624c:	4298      	cmp	r0, r3
 801624e:	bfb8      	it	lt
 8016250:	4618      	movlt	r0, r3
 8016252:	e7a3      	b.n	801619c <_printf_i+0x130>
 8016254:	2301      	movs	r3, #1
 8016256:	464a      	mov	r2, r9
 8016258:	4639      	mov	r1, r7
 801625a:	4630      	mov	r0, r6
 801625c:	47c0      	blx	r8
 801625e:	3001      	adds	r0, #1
 8016260:	d09a      	beq.n	8016198 <_printf_i+0x12c>
 8016262:	3501      	adds	r5, #1
 8016264:	68e3      	ldr	r3, [r4, #12]
 8016266:	9a03      	ldr	r2, [sp, #12]
 8016268:	1a9b      	subs	r3, r3, r2
 801626a:	42ab      	cmp	r3, r5
 801626c:	dcf2      	bgt.n	8016254 <_printf_i+0x1e8>
 801626e:	e7eb      	b.n	8016248 <_printf_i+0x1dc>
 8016270:	2500      	movs	r5, #0
 8016272:	f104 0919 	add.w	r9, r4, #25
 8016276:	e7f5      	b.n	8016264 <_printf_i+0x1f8>
 8016278:	2b00      	cmp	r3, #0
 801627a:	d1ac      	bne.n	80161d6 <_printf_i+0x16a>
 801627c:	7803      	ldrb	r3, [r0, #0]
 801627e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016282:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016286:	e76c      	b.n	8016162 <_printf_i+0xf6>
 8016288:	0801a460 	.word	0x0801a460
 801628c:	0801a471 	.word	0x0801a471

08016290 <_scanf_float>:
 8016290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016294:	469a      	mov	sl, r3
 8016296:	688b      	ldr	r3, [r1, #8]
 8016298:	4616      	mov	r6, r2
 801629a:	1e5a      	subs	r2, r3, #1
 801629c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80162a0:	b087      	sub	sp, #28
 80162a2:	bf83      	ittte	hi
 80162a4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80162a8:	189b      	addhi	r3, r3, r2
 80162aa:	9301      	strhi	r3, [sp, #4]
 80162ac:	2300      	movls	r3, #0
 80162ae:	bf86      	itte	hi
 80162b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80162b4:	608b      	strhi	r3, [r1, #8]
 80162b6:	9301      	strls	r3, [sp, #4]
 80162b8:	680b      	ldr	r3, [r1, #0]
 80162ba:	4688      	mov	r8, r1
 80162bc:	f04f 0b00 	mov.w	fp, #0
 80162c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80162c4:	f848 3b1c 	str.w	r3, [r8], #28
 80162c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80162cc:	4607      	mov	r7, r0
 80162ce:	460c      	mov	r4, r1
 80162d0:	4645      	mov	r5, r8
 80162d2:	465a      	mov	r2, fp
 80162d4:	46d9      	mov	r9, fp
 80162d6:	f8cd b008 	str.w	fp, [sp, #8]
 80162da:	68a1      	ldr	r1, [r4, #8]
 80162dc:	b181      	cbz	r1, 8016300 <_scanf_float+0x70>
 80162de:	6833      	ldr	r3, [r6, #0]
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	2b49      	cmp	r3, #73	; 0x49
 80162e4:	d071      	beq.n	80163ca <_scanf_float+0x13a>
 80162e6:	d84d      	bhi.n	8016384 <_scanf_float+0xf4>
 80162e8:	2b39      	cmp	r3, #57	; 0x39
 80162ea:	d840      	bhi.n	801636e <_scanf_float+0xde>
 80162ec:	2b31      	cmp	r3, #49	; 0x31
 80162ee:	f080 8088 	bcs.w	8016402 <_scanf_float+0x172>
 80162f2:	2b2d      	cmp	r3, #45	; 0x2d
 80162f4:	f000 8090 	beq.w	8016418 <_scanf_float+0x188>
 80162f8:	d815      	bhi.n	8016326 <_scanf_float+0x96>
 80162fa:	2b2b      	cmp	r3, #43	; 0x2b
 80162fc:	f000 808c 	beq.w	8016418 <_scanf_float+0x188>
 8016300:	f1b9 0f00 	cmp.w	r9, #0
 8016304:	d003      	beq.n	801630e <_scanf_float+0x7e>
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	3a01      	subs	r2, #1
 8016310:	2a01      	cmp	r2, #1
 8016312:	f200 80ea 	bhi.w	80164ea <_scanf_float+0x25a>
 8016316:	4545      	cmp	r5, r8
 8016318:	f200 80dc 	bhi.w	80164d4 <_scanf_float+0x244>
 801631c:	2601      	movs	r6, #1
 801631e:	4630      	mov	r0, r6
 8016320:	b007      	add	sp, #28
 8016322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016326:	2b2e      	cmp	r3, #46	; 0x2e
 8016328:	f000 809f 	beq.w	801646a <_scanf_float+0x1da>
 801632c:	2b30      	cmp	r3, #48	; 0x30
 801632e:	d1e7      	bne.n	8016300 <_scanf_float+0x70>
 8016330:	6820      	ldr	r0, [r4, #0]
 8016332:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016336:	d064      	beq.n	8016402 <_scanf_float+0x172>
 8016338:	9b01      	ldr	r3, [sp, #4]
 801633a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801633e:	6020      	str	r0, [r4, #0]
 8016340:	f109 0901 	add.w	r9, r9, #1
 8016344:	b11b      	cbz	r3, 801634e <_scanf_float+0xbe>
 8016346:	3b01      	subs	r3, #1
 8016348:	3101      	adds	r1, #1
 801634a:	9301      	str	r3, [sp, #4]
 801634c:	60a1      	str	r1, [r4, #8]
 801634e:	68a3      	ldr	r3, [r4, #8]
 8016350:	3b01      	subs	r3, #1
 8016352:	60a3      	str	r3, [r4, #8]
 8016354:	6923      	ldr	r3, [r4, #16]
 8016356:	3301      	adds	r3, #1
 8016358:	6123      	str	r3, [r4, #16]
 801635a:	6873      	ldr	r3, [r6, #4]
 801635c:	3b01      	subs	r3, #1
 801635e:	2b00      	cmp	r3, #0
 8016360:	6073      	str	r3, [r6, #4]
 8016362:	f340 80ac 	ble.w	80164be <_scanf_float+0x22e>
 8016366:	6833      	ldr	r3, [r6, #0]
 8016368:	3301      	adds	r3, #1
 801636a:	6033      	str	r3, [r6, #0]
 801636c:	e7b5      	b.n	80162da <_scanf_float+0x4a>
 801636e:	2b45      	cmp	r3, #69	; 0x45
 8016370:	f000 8085 	beq.w	801647e <_scanf_float+0x1ee>
 8016374:	2b46      	cmp	r3, #70	; 0x46
 8016376:	d06a      	beq.n	801644e <_scanf_float+0x1be>
 8016378:	2b41      	cmp	r3, #65	; 0x41
 801637a:	d1c1      	bne.n	8016300 <_scanf_float+0x70>
 801637c:	2a01      	cmp	r2, #1
 801637e:	d1bf      	bne.n	8016300 <_scanf_float+0x70>
 8016380:	2202      	movs	r2, #2
 8016382:	e046      	b.n	8016412 <_scanf_float+0x182>
 8016384:	2b65      	cmp	r3, #101	; 0x65
 8016386:	d07a      	beq.n	801647e <_scanf_float+0x1ee>
 8016388:	d818      	bhi.n	80163bc <_scanf_float+0x12c>
 801638a:	2b54      	cmp	r3, #84	; 0x54
 801638c:	d066      	beq.n	801645c <_scanf_float+0x1cc>
 801638e:	d811      	bhi.n	80163b4 <_scanf_float+0x124>
 8016390:	2b4e      	cmp	r3, #78	; 0x4e
 8016392:	d1b5      	bne.n	8016300 <_scanf_float+0x70>
 8016394:	2a00      	cmp	r2, #0
 8016396:	d146      	bne.n	8016426 <_scanf_float+0x196>
 8016398:	f1b9 0f00 	cmp.w	r9, #0
 801639c:	d145      	bne.n	801642a <_scanf_float+0x19a>
 801639e:	6821      	ldr	r1, [r4, #0]
 80163a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80163a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80163a8:	d13f      	bne.n	801642a <_scanf_float+0x19a>
 80163aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163ae:	6021      	str	r1, [r4, #0]
 80163b0:	2201      	movs	r2, #1
 80163b2:	e02e      	b.n	8016412 <_scanf_float+0x182>
 80163b4:	2b59      	cmp	r3, #89	; 0x59
 80163b6:	d01e      	beq.n	80163f6 <_scanf_float+0x166>
 80163b8:	2b61      	cmp	r3, #97	; 0x61
 80163ba:	e7de      	b.n	801637a <_scanf_float+0xea>
 80163bc:	2b6e      	cmp	r3, #110	; 0x6e
 80163be:	d0e9      	beq.n	8016394 <_scanf_float+0x104>
 80163c0:	d815      	bhi.n	80163ee <_scanf_float+0x15e>
 80163c2:	2b66      	cmp	r3, #102	; 0x66
 80163c4:	d043      	beq.n	801644e <_scanf_float+0x1be>
 80163c6:	2b69      	cmp	r3, #105	; 0x69
 80163c8:	d19a      	bne.n	8016300 <_scanf_float+0x70>
 80163ca:	f1bb 0f00 	cmp.w	fp, #0
 80163ce:	d138      	bne.n	8016442 <_scanf_float+0x1b2>
 80163d0:	f1b9 0f00 	cmp.w	r9, #0
 80163d4:	d197      	bne.n	8016306 <_scanf_float+0x76>
 80163d6:	6821      	ldr	r1, [r4, #0]
 80163d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80163dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80163e0:	d195      	bne.n	801630e <_scanf_float+0x7e>
 80163e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163e6:	6021      	str	r1, [r4, #0]
 80163e8:	f04f 0b01 	mov.w	fp, #1
 80163ec:	e011      	b.n	8016412 <_scanf_float+0x182>
 80163ee:	2b74      	cmp	r3, #116	; 0x74
 80163f0:	d034      	beq.n	801645c <_scanf_float+0x1cc>
 80163f2:	2b79      	cmp	r3, #121	; 0x79
 80163f4:	d184      	bne.n	8016300 <_scanf_float+0x70>
 80163f6:	f1bb 0f07 	cmp.w	fp, #7
 80163fa:	d181      	bne.n	8016300 <_scanf_float+0x70>
 80163fc:	f04f 0b08 	mov.w	fp, #8
 8016400:	e007      	b.n	8016412 <_scanf_float+0x182>
 8016402:	eb12 0f0b 	cmn.w	r2, fp
 8016406:	f47f af7b 	bne.w	8016300 <_scanf_float+0x70>
 801640a:	6821      	ldr	r1, [r4, #0]
 801640c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016410:	6021      	str	r1, [r4, #0]
 8016412:	702b      	strb	r3, [r5, #0]
 8016414:	3501      	adds	r5, #1
 8016416:	e79a      	b.n	801634e <_scanf_float+0xbe>
 8016418:	6821      	ldr	r1, [r4, #0]
 801641a:	0608      	lsls	r0, r1, #24
 801641c:	f57f af70 	bpl.w	8016300 <_scanf_float+0x70>
 8016420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016424:	e7f4      	b.n	8016410 <_scanf_float+0x180>
 8016426:	2a02      	cmp	r2, #2
 8016428:	d047      	beq.n	80164ba <_scanf_float+0x22a>
 801642a:	f1bb 0f01 	cmp.w	fp, #1
 801642e:	d003      	beq.n	8016438 <_scanf_float+0x1a8>
 8016430:	f1bb 0f04 	cmp.w	fp, #4
 8016434:	f47f af64 	bne.w	8016300 <_scanf_float+0x70>
 8016438:	f10b 0b01 	add.w	fp, fp, #1
 801643c:	fa5f fb8b 	uxtb.w	fp, fp
 8016440:	e7e7      	b.n	8016412 <_scanf_float+0x182>
 8016442:	f1bb 0f03 	cmp.w	fp, #3
 8016446:	d0f7      	beq.n	8016438 <_scanf_float+0x1a8>
 8016448:	f1bb 0f05 	cmp.w	fp, #5
 801644c:	e7f2      	b.n	8016434 <_scanf_float+0x1a4>
 801644e:	f1bb 0f02 	cmp.w	fp, #2
 8016452:	f47f af55 	bne.w	8016300 <_scanf_float+0x70>
 8016456:	f04f 0b03 	mov.w	fp, #3
 801645a:	e7da      	b.n	8016412 <_scanf_float+0x182>
 801645c:	f1bb 0f06 	cmp.w	fp, #6
 8016460:	f47f af4e 	bne.w	8016300 <_scanf_float+0x70>
 8016464:	f04f 0b07 	mov.w	fp, #7
 8016468:	e7d3      	b.n	8016412 <_scanf_float+0x182>
 801646a:	6821      	ldr	r1, [r4, #0]
 801646c:	0588      	lsls	r0, r1, #22
 801646e:	f57f af47 	bpl.w	8016300 <_scanf_float+0x70>
 8016472:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016476:	6021      	str	r1, [r4, #0]
 8016478:	f8cd 9008 	str.w	r9, [sp, #8]
 801647c:	e7c9      	b.n	8016412 <_scanf_float+0x182>
 801647e:	6821      	ldr	r1, [r4, #0]
 8016480:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016484:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016488:	d006      	beq.n	8016498 <_scanf_float+0x208>
 801648a:	0548      	lsls	r0, r1, #21
 801648c:	f57f af38 	bpl.w	8016300 <_scanf_float+0x70>
 8016490:	f1b9 0f00 	cmp.w	r9, #0
 8016494:	f43f af3b 	beq.w	801630e <_scanf_float+0x7e>
 8016498:	0588      	lsls	r0, r1, #22
 801649a:	bf58      	it	pl
 801649c:	9802      	ldrpl	r0, [sp, #8]
 801649e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164a2:	bf58      	it	pl
 80164a4:	eba9 0000 	subpl.w	r0, r9, r0
 80164a8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80164ac:	bf58      	it	pl
 80164ae:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80164b2:	6021      	str	r1, [r4, #0]
 80164b4:	f04f 0900 	mov.w	r9, #0
 80164b8:	e7ab      	b.n	8016412 <_scanf_float+0x182>
 80164ba:	2203      	movs	r2, #3
 80164bc:	e7a9      	b.n	8016412 <_scanf_float+0x182>
 80164be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80164c2:	9205      	str	r2, [sp, #20]
 80164c4:	4631      	mov	r1, r6
 80164c6:	4638      	mov	r0, r7
 80164c8:	4798      	blx	r3
 80164ca:	9a05      	ldr	r2, [sp, #20]
 80164cc:	2800      	cmp	r0, #0
 80164ce:	f43f af04 	beq.w	80162da <_scanf_float+0x4a>
 80164d2:	e715      	b.n	8016300 <_scanf_float+0x70>
 80164d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164dc:	4632      	mov	r2, r6
 80164de:	4638      	mov	r0, r7
 80164e0:	4798      	blx	r3
 80164e2:	6923      	ldr	r3, [r4, #16]
 80164e4:	3b01      	subs	r3, #1
 80164e6:	6123      	str	r3, [r4, #16]
 80164e8:	e715      	b.n	8016316 <_scanf_float+0x86>
 80164ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 80164ee:	2b06      	cmp	r3, #6
 80164f0:	d80a      	bhi.n	8016508 <_scanf_float+0x278>
 80164f2:	f1bb 0f02 	cmp.w	fp, #2
 80164f6:	d968      	bls.n	80165ca <_scanf_float+0x33a>
 80164f8:	f1ab 0b03 	sub.w	fp, fp, #3
 80164fc:	fa5f fb8b 	uxtb.w	fp, fp
 8016500:	eba5 0b0b 	sub.w	fp, r5, fp
 8016504:	455d      	cmp	r5, fp
 8016506:	d14b      	bne.n	80165a0 <_scanf_float+0x310>
 8016508:	6823      	ldr	r3, [r4, #0]
 801650a:	05da      	lsls	r2, r3, #23
 801650c:	d51f      	bpl.n	801654e <_scanf_float+0x2be>
 801650e:	055b      	lsls	r3, r3, #21
 8016510:	d468      	bmi.n	80165e4 <_scanf_float+0x354>
 8016512:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016516:	6923      	ldr	r3, [r4, #16]
 8016518:	2965      	cmp	r1, #101	; 0x65
 801651a:	f103 33ff 	add.w	r3, r3, #4294967295
 801651e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016522:	6123      	str	r3, [r4, #16]
 8016524:	d00d      	beq.n	8016542 <_scanf_float+0x2b2>
 8016526:	2945      	cmp	r1, #69	; 0x45
 8016528:	d00b      	beq.n	8016542 <_scanf_float+0x2b2>
 801652a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801652e:	4632      	mov	r2, r6
 8016530:	4638      	mov	r0, r7
 8016532:	4798      	blx	r3
 8016534:	6923      	ldr	r3, [r4, #16]
 8016536:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801653a:	3b01      	subs	r3, #1
 801653c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016540:	6123      	str	r3, [r4, #16]
 8016542:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016546:	4632      	mov	r2, r6
 8016548:	4638      	mov	r0, r7
 801654a:	4798      	blx	r3
 801654c:	465d      	mov	r5, fp
 801654e:	6826      	ldr	r6, [r4, #0]
 8016550:	f016 0610 	ands.w	r6, r6, #16
 8016554:	d17a      	bne.n	801664c <_scanf_float+0x3bc>
 8016556:	702e      	strb	r6, [r5, #0]
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016562:	d142      	bne.n	80165ea <_scanf_float+0x35a>
 8016564:	9b02      	ldr	r3, [sp, #8]
 8016566:	eba9 0303 	sub.w	r3, r9, r3
 801656a:	425a      	negs	r2, r3
 801656c:	2b00      	cmp	r3, #0
 801656e:	d149      	bne.n	8016604 <_scanf_float+0x374>
 8016570:	2200      	movs	r2, #0
 8016572:	4641      	mov	r1, r8
 8016574:	4638      	mov	r0, r7
 8016576:	f000 ff0b 	bl	8017390 <_strtod_r>
 801657a:	6825      	ldr	r5, [r4, #0]
 801657c:	f8da 3000 	ldr.w	r3, [sl]
 8016580:	f015 0f02 	tst.w	r5, #2
 8016584:	f103 0204 	add.w	r2, r3, #4
 8016588:	ec59 8b10 	vmov	r8, r9, d0
 801658c:	f8ca 2000 	str.w	r2, [sl]
 8016590:	d043      	beq.n	801661a <_scanf_float+0x38a>
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	e9c3 8900 	strd	r8, r9, [r3]
 8016598:	68e3      	ldr	r3, [r4, #12]
 801659a:	3301      	adds	r3, #1
 801659c:	60e3      	str	r3, [r4, #12]
 801659e:	e6be      	b.n	801631e <_scanf_float+0x8e>
 80165a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165a8:	4632      	mov	r2, r6
 80165aa:	4638      	mov	r0, r7
 80165ac:	4798      	blx	r3
 80165ae:	6923      	ldr	r3, [r4, #16]
 80165b0:	3b01      	subs	r3, #1
 80165b2:	6123      	str	r3, [r4, #16]
 80165b4:	e7a6      	b.n	8016504 <_scanf_float+0x274>
 80165b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165ba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165be:	4632      	mov	r2, r6
 80165c0:	4638      	mov	r0, r7
 80165c2:	4798      	blx	r3
 80165c4:	6923      	ldr	r3, [r4, #16]
 80165c6:	3b01      	subs	r3, #1
 80165c8:	6123      	str	r3, [r4, #16]
 80165ca:	4545      	cmp	r5, r8
 80165cc:	d8f3      	bhi.n	80165b6 <_scanf_float+0x326>
 80165ce:	e6a5      	b.n	801631c <_scanf_float+0x8c>
 80165d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165d8:	4632      	mov	r2, r6
 80165da:	4638      	mov	r0, r7
 80165dc:	4798      	blx	r3
 80165de:	6923      	ldr	r3, [r4, #16]
 80165e0:	3b01      	subs	r3, #1
 80165e2:	6123      	str	r3, [r4, #16]
 80165e4:	4545      	cmp	r5, r8
 80165e6:	d8f3      	bhi.n	80165d0 <_scanf_float+0x340>
 80165e8:	e698      	b.n	801631c <_scanf_float+0x8c>
 80165ea:	9b03      	ldr	r3, [sp, #12]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d0bf      	beq.n	8016570 <_scanf_float+0x2e0>
 80165f0:	9904      	ldr	r1, [sp, #16]
 80165f2:	230a      	movs	r3, #10
 80165f4:	4632      	mov	r2, r6
 80165f6:	3101      	adds	r1, #1
 80165f8:	4638      	mov	r0, r7
 80165fa:	f000 ff55 	bl	80174a8 <_strtol_r>
 80165fe:	9b03      	ldr	r3, [sp, #12]
 8016600:	9d04      	ldr	r5, [sp, #16]
 8016602:	1ac2      	subs	r2, r0, r3
 8016604:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016608:	429d      	cmp	r5, r3
 801660a:	bf28      	it	cs
 801660c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016610:	490f      	ldr	r1, [pc, #60]	; (8016650 <_scanf_float+0x3c0>)
 8016612:	4628      	mov	r0, r5
 8016614:	f000 f858 	bl	80166c8 <siprintf>
 8016618:	e7aa      	b.n	8016570 <_scanf_float+0x2e0>
 801661a:	f015 0504 	ands.w	r5, r5, #4
 801661e:	d1b8      	bne.n	8016592 <_scanf_float+0x302>
 8016620:	681f      	ldr	r7, [r3, #0]
 8016622:	ee10 2a10 	vmov	r2, s0
 8016626:	464b      	mov	r3, r9
 8016628:	ee10 0a10 	vmov	r0, s0
 801662c:	4649      	mov	r1, r9
 801662e:	f7ea fa95 	bl	8000b5c <__aeabi_dcmpun>
 8016632:	b128      	cbz	r0, 8016640 <_scanf_float+0x3b0>
 8016634:	4628      	mov	r0, r5
 8016636:	f000 f80d 	bl	8016654 <nanf>
 801663a:	ed87 0a00 	vstr	s0, [r7]
 801663e:	e7ab      	b.n	8016598 <_scanf_float+0x308>
 8016640:	4640      	mov	r0, r8
 8016642:	4649      	mov	r1, r9
 8016644:	f7ea fae8 	bl	8000c18 <__aeabi_d2f>
 8016648:	6038      	str	r0, [r7, #0]
 801664a:	e7a5      	b.n	8016598 <_scanf_float+0x308>
 801664c:	2600      	movs	r6, #0
 801664e:	e666      	b.n	801631e <_scanf_float+0x8e>
 8016650:	0801a482 	.word	0x0801a482

08016654 <nanf>:
 8016654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801665c <nanf+0x8>
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	7fc00000 	.word	0x7fc00000

08016660 <sniprintf>:
 8016660:	b40c      	push	{r2, r3}
 8016662:	b530      	push	{r4, r5, lr}
 8016664:	4b17      	ldr	r3, [pc, #92]	; (80166c4 <sniprintf+0x64>)
 8016666:	1e0c      	subs	r4, r1, #0
 8016668:	b09d      	sub	sp, #116	; 0x74
 801666a:	681d      	ldr	r5, [r3, #0]
 801666c:	da08      	bge.n	8016680 <sniprintf+0x20>
 801666e:	238b      	movs	r3, #139	; 0x8b
 8016670:	602b      	str	r3, [r5, #0]
 8016672:	f04f 30ff 	mov.w	r0, #4294967295
 8016676:	b01d      	add	sp, #116	; 0x74
 8016678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801667c:	b002      	add	sp, #8
 801667e:	4770      	bx	lr
 8016680:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016688:	bf14      	ite	ne
 801668a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801668e:	4623      	moveq	r3, r4
 8016690:	9304      	str	r3, [sp, #16]
 8016692:	9307      	str	r3, [sp, #28]
 8016694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016698:	9002      	str	r0, [sp, #8]
 801669a:	9006      	str	r0, [sp, #24]
 801669c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166a2:	ab21      	add	r3, sp, #132	; 0x84
 80166a4:	a902      	add	r1, sp, #8
 80166a6:	4628      	mov	r0, r5
 80166a8:	9301      	str	r3, [sp, #4]
 80166aa:	f002 fdf1 	bl	8019290 <_svfiprintf_r>
 80166ae:	1c43      	adds	r3, r0, #1
 80166b0:	bfbc      	itt	lt
 80166b2:	238b      	movlt	r3, #139	; 0x8b
 80166b4:	602b      	strlt	r3, [r5, #0]
 80166b6:	2c00      	cmp	r4, #0
 80166b8:	d0dd      	beq.n	8016676 <sniprintf+0x16>
 80166ba:	9b02      	ldr	r3, [sp, #8]
 80166bc:	2200      	movs	r2, #0
 80166be:	701a      	strb	r2, [r3, #0]
 80166c0:	e7d9      	b.n	8016676 <sniprintf+0x16>
 80166c2:	bf00      	nop
 80166c4:	2000000c 	.word	0x2000000c

080166c8 <siprintf>:
 80166c8:	b40e      	push	{r1, r2, r3}
 80166ca:	b500      	push	{lr}
 80166cc:	b09c      	sub	sp, #112	; 0x70
 80166ce:	ab1d      	add	r3, sp, #116	; 0x74
 80166d0:	9002      	str	r0, [sp, #8]
 80166d2:	9006      	str	r0, [sp, #24]
 80166d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80166d8:	4809      	ldr	r0, [pc, #36]	; (8016700 <siprintf+0x38>)
 80166da:	9107      	str	r1, [sp, #28]
 80166dc:	9104      	str	r1, [sp, #16]
 80166de:	4909      	ldr	r1, [pc, #36]	; (8016704 <siprintf+0x3c>)
 80166e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80166e4:	9105      	str	r1, [sp, #20]
 80166e6:	6800      	ldr	r0, [r0, #0]
 80166e8:	9301      	str	r3, [sp, #4]
 80166ea:	a902      	add	r1, sp, #8
 80166ec:	f002 fdd0 	bl	8019290 <_svfiprintf_r>
 80166f0:	9b02      	ldr	r3, [sp, #8]
 80166f2:	2200      	movs	r2, #0
 80166f4:	701a      	strb	r2, [r3, #0]
 80166f6:	b01c      	add	sp, #112	; 0x70
 80166f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80166fc:	b003      	add	sp, #12
 80166fe:	4770      	bx	lr
 8016700:	2000000c 	.word	0x2000000c
 8016704:	ffff0208 	.word	0xffff0208

08016708 <siscanf>:
 8016708:	b40e      	push	{r1, r2, r3}
 801670a:	b530      	push	{r4, r5, lr}
 801670c:	b09c      	sub	sp, #112	; 0x70
 801670e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016710:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016714:	f854 5b04 	ldr.w	r5, [r4], #4
 8016718:	f8ad 2014 	strh.w	r2, [sp, #20]
 801671c:	9002      	str	r0, [sp, #8]
 801671e:	9006      	str	r0, [sp, #24]
 8016720:	f7e9 fd6e 	bl	8000200 <strlen>
 8016724:	4b0b      	ldr	r3, [pc, #44]	; (8016754 <siscanf+0x4c>)
 8016726:	9003      	str	r0, [sp, #12]
 8016728:	9007      	str	r0, [sp, #28]
 801672a:	930b      	str	r3, [sp, #44]	; 0x2c
 801672c:	480a      	ldr	r0, [pc, #40]	; (8016758 <siscanf+0x50>)
 801672e:	9401      	str	r4, [sp, #4]
 8016730:	2300      	movs	r3, #0
 8016732:	930f      	str	r3, [sp, #60]	; 0x3c
 8016734:	9314      	str	r3, [sp, #80]	; 0x50
 8016736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801673a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801673e:	462a      	mov	r2, r5
 8016740:	4623      	mov	r3, r4
 8016742:	a902      	add	r1, sp, #8
 8016744:	6800      	ldr	r0, [r0, #0]
 8016746:	f002 fef5 	bl	8019534 <__ssvfiscanf_r>
 801674a:	b01c      	add	sp, #112	; 0x70
 801674c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016750:	b003      	add	sp, #12
 8016752:	4770      	bx	lr
 8016754:	0801675d 	.word	0x0801675d
 8016758:	2000000c 	.word	0x2000000c

0801675c <__seofread>:
 801675c:	2000      	movs	r0, #0
 801675e:	4770      	bx	lr

08016760 <strcpy>:
 8016760:	4603      	mov	r3, r0
 8016762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016766:	f803 2b01 	strb.w	r2, [r3], #1
 801676a:	2a00      	cmp	r2, #0
 801676c:	d1f9      	bne.n	8016762 <strcpy+0x2>
 801676e:	4770      	bx	lr

08016770 <sulp>:
 8016770:	b570      	push	{r4, r5, r6, lr}
 8016772:	4604      	mov	r4, r0
 8016774:	460d      	mov	r5, r1
 8016776:	ec45 4b10 	vmov	d0, r4, r5
 801677a:	4616      	mov	r6, r2
 801677c:	f002 fb44 	bl	8018e08 <__ulp>
 8016780:	ec51 0b10 	vmov	r0, r1, d0
 8016784:	b17e      	cbz	r6, 80167a6 <sulp+0x36>
 8016786:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801678a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801678e:	2b00      	cmp	r3, #0
 8016790:	dd09      	ble.n	80167a6 <sulp+0x36>
 8016792:	051b      	lsls	r3, r3, #20
 8016794:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016798:	2400      	movs	r4, #0
 801679a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801679e:	4622      	mov	r2, r4
 80167a0:	462b      	mov	r3, r5
 80167a2:	f7e9 ff41 	bl	8000628 <__aeabi_dmul>
 80167a6:	bd70      	pop	{r4, r5, r6, pc}

080167a8 <_strtod_l>:
 80167a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ac:	461f      	mov	r7, r3
 80167ae:	b0a1      	sub	sp, #132	; 0x84
 80167b0:	2300      	movs	r3, #0
 80167b2:	4681      	mov	r9, r0
 80167b4:	4638      	mov	r0, r7
 80167b6:	460e      	mov	r6, r1
 80167b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80167ba:	931c      	str	r3, [sp, #112]	; 0x70
 80167bc:	f002 f824 	bl	8018808 <__localeconv_l>
 80167c0:	4680      	mov	r8, r0
 80167c2:	6800      	ldr	r0, [r0, #0]
 80167c4:	f7e9 fd1c 	bl	8000200 <strlen>
 80167c8:	f04f 0a00 	mov.w	sl, #0
 80167cc:	4604      	mov	r4, r0
 80167ce:	f04f 0b00 	mov.w	fp, #0
 80167d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80167d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167d6:	781a      	ldrb	r2, [r3, #0]
 80167d8:	2a0d      	cmp	r2, #13
 80167da:	d832      	bhi.n	8016842 <_strtod_l+0x9a>
 80167dc:	2a09      	cmp	r2, #9
 80167de:	d236      	bcs.n	801684e <_strtod_l+0xa6>
 80167e0:	2a00      	cmp	r2, #0
 80167e2:	d03e      	beq.n	8016862 <_strtod_l+0xba>
 80167e4:	2300      	movs	r3, #0
 80167e6:	930d      	str	r3, [sp, #52]	; 0x34
 80167e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80167ea:	782b      	ldrb	r3, [r5, #0]
 80167ec:	2b30      	cmp	r3, #48	; 0x30
 80167ee:	f040 80ac 	bne.w	801694a <_strtod_l+0x1a2>
 80167f2:	786b      	ldrb	r3, [r5, #1]
 80167f4:	2b58      	cmp	r3, #88	; 0x58
 80167f6:	d001      	beq.n	80167fc <_strtod_l+0x54>
 80167f8:	2b78      	cmp	r3, #120	; 0x78
 80167fa:	d167      	bne.n	80168cc <_strtod_l+0x124>
 80167fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167fe:	9301      	str	r3, [sp, #4]
 8016800:	ab1c      	add	r3, sp, #112	; 0x70
 8016802:	9300      	str	r3, [sp, #0]
 8016804:	9702      	str	r7, [sp, #8]
 8016806:	ab1d      	add	r3, sp, #116	; 0x74
 8016808:	4a88      	ldr	r2, [pc, #544]	; (8016a2c <_strtod_l+0x284>)
 801680a:	a91b      	add	r1, sp, #108	; 0x6c
 801680c:	4648      	mov	r0, r9
 801680e:	f001 fd12 	bl	8018236 <__gethex>
 8016812:	f010 0407 	ands.w	r4, r0, #7
 8016816:	4606      	mov	r6, r0
 8016818:	d005      	beq.n	8016826 <_strtod_l+0x7e>
 801681a:	2c06      	cmp	r4, #6
 801681c:	d12b      	bne.n	8016876 <_strtod_l+0xce>
 801681e:	3501      	adds	r5, #1
 8016820:	2300      	movs	r3, #0
 8016822:	951b      	str	r5, [sp, #108]	; 0x6c
 8016824:	930d      	str	r3, [sp, #52]	; 0x34
 8016826:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016828:	2b00      	cmp	r3, #0
 801682a:	f040 859a 	bne.w	8017362 <_strtod_l+0xbba>
 801682e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016830:	b1e3      	cbz	r3, 801686c <_strtod_l+0xc4>
 8016832:	4652      	mov	r2, sl
 8016834:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016838:	ec43 2b10 	vmov	d0, r2, r3
 801683c:	b021      	add	sp, #132	; 0x84
 801683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016842:	2a2b      	cmp	r2, #43	; 0x2b
 8016844:	d015      	beq.n	8016872 <_strtod_l+0xca>
 8016846:	2a2d      	cmp	r2, #45	; 0x2d
 8016848:	d004      	beq.n	8016854 <_strtod_l+0xac>
 801684a:	2a20      	cmp	r2, #32
 801684c:	d1ca      	bne.n	80167e4 <_strtod_l+0x3c>
 801684e:	3301      	adds	r3, #1
 8016850:	931b      	str	r3, [sp, #108]	; 0x6c
 8016852:	e7bf      	b.n	80167d4 <_strtod_l+0x2c>
 8016854:	2201      	movs	r2, #1
 8016856:	920d      	str	r2, [sp, #52]	; 0x34
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	921b      	str	r2, [sp, #108]	; 0x6c
 801685c:	785b      	ldrb	r3, [r3, #1]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d1c2      	bne.n	80167e8 <_strtod_l+0x40>
 8016862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016864:	961b      	str	r6, [sp, #108]	; 0x6c
 8016866:	2b00      	cmp	r3, #0
 8016868:	f040 8579 	bne.w	801735e <_strtod_l+0xbb6>
 801686c:	4652      	mov	r2, sl
 801686e:	465b      	mov	r3, fp
 8016870:	e7e2      	b.n	8016838 <_strtod_l+0x90>
 8016872:	2200      	movs	r2, #0
 8016874:	e7ef      	b.n	8016856 <_strtod_l+0xae>
 8016876:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016878:	b13a      	cbz	r2, 801688a <_strtod_l+0xe2>
 801687a:	2135      	movs	r1, #53	; 0x35
 801687c:	a81e      	add	r0, sp, #120	; 0x78
 801687e:	f002 fbbb 	bl	8018ff8 <__copybits>
 8016882:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016884:	4648      	mov	r0, r9
 8016886:	f002 f828 	bl	80188da <_Bfree>
 801688a:	3c01      	subs	r4, #1
 801688c:	2c04      	cmp	r4, #4
 801688e:	d806      	bhi.n	801689e <_strtod_l+0xf6>
 8016890:	e8df f004 	tbb	[pc, r4]
 8016894:	1714030a 	.word	0x1714030a
 8016898:	0a          	.byte	0x0a
 8016899:	00          	.byte	0x00
 801689a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801689e:	0730      	lsls	r0, r6, #28
 80168a0:	d5c1      	bpl.n	8016826 <_strtod_l+0x7e>
 80168a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80168a6:	e7be      	b.n	8016826 <_strtod_l+0x7e>
 80168a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80168ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80168ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80168b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80168b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80168ba:	e7f0      	b.n	801689e <_strtod_l+0xf6>
 80168bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016a30 <_strtod_l+0x288>
 80168c0:	e7ed      	b.n	801689e <_strtod_l+0xf6>
 80168c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80168c6:	f04f 3aff 	mov.w	sl, #4294967295
 80168ca:	e7e8      	b.n	801689e <_strtod_l+0xf6>
 80168cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ce:	1c5a      	adds	r2, r3, #1
 80168d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80168d2:	785b      	ldrb	r3, [r3, #1]
 80168d4:	2b30      	cmp	r3, #48	; 0x30
 80168d6:	d0f9      	beq.n	80168cc <_strtod_l+0x124>
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d0a4      	beq.n	8016826 <_strtod_l+0x7e>
 80168dc:	2301      	movs	r3, #1
 80168de:	2500      	movs	r5, #0
 80168e0:	9306      	str	r3, [sp, #24]
 80168e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168e4:	9308      	str	r3, [sp, #32]
 80168e6:	9507      	str	r5, [sp, #28]
 80168e8:	9505      	str	r5, [sp, #20]
 80168ea:	220a      	movs	r2, #10
 80168ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80168ee:	7807      	ldrb	r7, [r0, #0]
 80168f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80168f4:	b2d9      	uxtb	r1, r3
 80168f6:	2909      	cmp	r1, #9
 80168f8:	d929      	bls.n	801694e <_strtod_l+0x1a6>
 80168fa:	4622      	mov	r2, r4
 80168fc:	f8d8 1000 	ldr.w	r1, [r8]
 8016900:	f003 f902 	bl	8019b08 <strncmp>
 8016904:	2800      	cmp	r0, #0
 8016906:	d031      	beq.n	801696c <_strtod_l+0x1c4>
 8016908:	2000      	movs	r0, #0
 801690a:	9c05      	ldr	r4, [sp, #20]
 801690c:	9004      	str	r0, [sp, #16]
 801690e:	463b      	mov	r3, r7
 8016910:	4602      	mov	r2, r0
 8016912:	2b65      	cmp	r3, #101	; 0x65
 8016914:	d001      	beq.n	801691a <_strtod_l+0x172>
 8016916:	2b45      	cmp	r3, #69	; 0x45
 8016918:	d114      	bne.n	8016944 <_strtod_l+0x19c>
 801691a:	b924      	cbnz	r4, 8016926 <_strtod_l+0x17e>
 801691c:	b910      	cbnz	r0, 8016924 <_strtod_l+0x17c>
 801691e:	9b06      	ldr	r3, [sp, #24]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d09e      	beq.n	8016862 <_strtod_l+0xba>
 8016924:	2400      	movs	r4, #0
 8016926:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016928:	1c73      	adds	r3, r6, #1
 801692a:	931b      	str	r3, [sp, #108]	; 0x6c
 801692c:	7873      	ldrb	r3, [r6, #1]
 801692e:	2b2b      	cmp	r3, #43	; 0x2b
 8016930:	d078      	beq.n	8016a24 <_strtod_l+0x27c>
 8016932:	2b2d      	cmp	r3, #45	; 0x2d
 8016934:	d070      	beq.n	8016a18 <_strtod_l+0x270>
 8016936:	f04f 0c00 	mov.w	ip, #0
 801693a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801693e:	2f09      	cmp	r7, #9
 8016940:	d97c      	bls.n	8016a3c <_strtod_l+0x294>
 8016942:	961b      	str	r6, [sp, #108]	; 0x6c
 8016944:	f04f 0e00 	mov.w	lr, #0
 8016948:	e09a      	b.n	8016a80 <_strtod_l+0x2d8>
 801694a:	2300      	movs	r3, #0
 801694c:	e7c7      	b.n	80168de <_strtod_l+0x136>
 801694e:	9905      	ldr	r1, [sp, #20]
 8016950:	2908      	cmp	r1, #8
 8016952:	bfdd      	ittte	le
 8016954:	9907      	ldrle	r1, [sp, #28]
 8016956:	fb02 3301 	mlale	r3, r2, r1, r3
 801695a:	9307      	strle	r3, [sp, #28]
 801695c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016960:	9b05      	ldr	r3, [sp, #20]
 8016962:	3001      	adds	r0, #1
 8016964:	3301      	adds	r3, #1
 8016966:	9305      	str	r3, [sp, #20]
 8016968:	901b      	str	r0, [sp, #108]	; 0x6c
 801696a:	e7bf      	b.n	80168ec <_strtod_l+0x144>
 801696c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801696e:	191a      	adds	r2, r3, r4
 8016970:	921b      	str	r2, [sp, #108]	; 0x6c
 8016972:	9a05      	ldr	r2, [sp, #20]
 8016974:	5d1b      	ldrb	r3, [r3, r4]
 8016976:	2a00      	cmp	r2, #0
 8016978:	d037      	beq.n	80169ea <_strtod_l+0x242>
 801697a:	9c05      	ldr	r4, [sp, #20]
 801697c:	4602      	mov	r2, r0
 801697e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016982:	2909      	cmp	r1, #9
 8016984:	d913      	bls.n	80169ae <_strtod_l+0x206>
 8016986:	2101      	movs	r1, #1
 8016988:	9104      	str	r1, [sp, #16]
 801698a:	e7c2      	b.n	8016912 <_strtod_l+0x16a>
 801698c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801698e:	1c5a      	adds	r2, r3, #1
 8016990:	921b      	str	r2, [sp, #108]	; 0x6c
 8016992:	785b      	ldrb	r3, [r3, #1]
 8016994:	3001      	adds	r0, #1
 8016996:	2b30      	cmp	r3, #48	; 0x30
 8016998:	d0f8      	beq.n	801698c <_strtod_l+0x1e4>
 801699a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801699e:	2a08      	cmp	r2, #8
 80169a0:	f200 84e4 	bhi.w	801736c <_strtod_l+0xbc4>
 80169a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169a6:	9208      	str	r2, [sp, #32]
 80169a8:	4602      	mov	r2, r0
 80169aa:	2000      	movs	r0, #0
 80169ac:	4604      	mov	r4, r0
 80169ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80169b2:	f100 0101 	add.w	r1, r0, #1
 80169b6:	d012      	beq.n	80169de <_strtod_l+0x236>
 80169b8:	440a      	add	r2, r1
 80169ba:	eb00 0c04 	add.w	ip, r0, r4
 80169be:	4621      	mov	r1, r4
 80169c0:	270a      	movs	r7, #10
 80169c2:	458c      	cmp	ip, r1
 80169c4:	d113      	bne.n	80169ee <_strtod_l+0x246>
 80169c6:	1821      	adds	r1, r4, r0
 80169c8:	2908      	cmp	r1, #8
 80169ca:	f104 0401 	add.w	r4, r4, #1
 80169ce:	4404      	add	r4, r0
 80169d0:	dc19      	bgt.n	8016a06 <_strtod_l+0x25e>
 80169d2:	9b07      	ldr	r3, [sp, #28]
 80169d4:	210a      	movs	r1, #10
 80169d6:	fb01 e303 	mla	r3, r1, r3, lr
 80169da:	9307      	str	r3, [sp, #28]
 80169dc:	2100      	movs	r1, #0
 80169de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169e0:	1c58      	adds	r0, r3, #1
 80169e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80169e4:	785b      	ldrb	r3, [r3, #1]
 80169e6:	4608      	mov	r0, r1
 80169e8:	e7c9      	b.n	801697e <_strtod_l+0x1d6>
 80169ea:	9805      	ldr	r0, [sp, #20]
 80169ec:	e7d3      	b.n	8016996 <_strtod_l+0x1ee>
 80169ee:	2908      	cmp	r1, #8
 80169f0:	f101 0101 	add.w	r1, r1, #1
 80169f4:	dc03      	bgt.n	80169fe <_strtod_l+0x256>
 80169f6:	9b07      	ldr	r3, [sp, #28]
 80169f8:	437b      	muls	r3, r7
 80169fa:	9307      	str	r3, [sp, #28]
 80169fc:	e7e1      	b.n	80169c2 <_strtod_l+0x21a>
 80169fe:	2910      	cmp	r1, #16
 8016a00:	bfd8      	it	le
 8016a02:	437d      	mulle	r5, r7
 8016a04:	e7dd      	b.n	80169c2 <_strtod_l+0x21a>
 8016a06:	2c10      	cmp	r4, #16
 8016a08:	bfdc      	itt	le
 8016a0a:	210a      	movle	r1, #10
 8016a0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016a10:	e7e4      	b.n	80169dc <_strtod_l+0x234>
 8016a12:	2301      	movs	r3, #1
 8016a14:	9304      	str	r3, [sp, #16]
 8016a16:	e781      	b.n	801691c <_strtod_l+0x174>
 8016a18:	f04f 0c01 	mov.w	ip, #1
 8016a1c:	1cb3      	adds	r3, r6, #2
 8016a1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a20:	78b3      	ldrb	r3, [r6, #2]
 8016a22:	e78a      	b.n	801693a <_strtod_l+0x192>
 8016a24:	f04f 0c00 	mov.w	ip, #0
 8016a28:	e7f8      	b.n	8016a1c <_strtod_l+0x274>
 8016a2a:	bf00      	nop
 8016a2c:	0801a488 	.word	0x0801a488
 8016a30:	7ff00000 	.word	0x7ff00000
 8016a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a36:	1c5f      	adds	r7, r3, #1
 8016a38:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a3a:	785b      	ldrb	r3, [r3, #1]
 8016a3c:	2b30      	cmp	r3, #48	; 0x30
 8016a3e:	d0f9      	beq.n	8016a34 <_strtod_l+0x28c>
 8016a40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016a44:	2f08      	cmp	r7, #8
 8016a46:	f63f af7d 	bhi.w	8016944 <_strtod_l+0x19c>
 8016a4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016a4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a50:	930a      	str	r3, [sp, #40]	; 0x28
 8016a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a54:	1c5f      	adds	r7, r3, #1
 8016a56:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a58:	785b      	ldrb	r3, [r3, #1]
 8016a5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016a5e:	f1b8 0f09 	cmp.w	r8, #9
 8016a62:	d937      	bls.n	8016ad4 <_strtod_l+0x32c>
 8016a64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a66:	1a7f      	subs	r7, r7, r1
 8016a68:	2f08      	cmp	r7, #8
 8016a6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016a6e:	dc37      	bgt.n	8016ae0 <_strtod_l+0x338>
 8016a70:	45be      	cmp	lr, r7
 8016a72:	bfa8      	it	ge
 8016a74:	46be      	movge	lr, r7
 8016a76:	f1bc 0f00 	cmp.w	ip, #0
 8016a7a:	d001      	beq.n	8016a80 <_strtod_l+0x2d8>
 8016a7c:	f1ce 0e00 	rsb	lr, lr, #0
 8016a80:	2c00      	cmp	r4, #0
 8016a82:	d151      	bne.n	8016b28 <_strtod_l+0x380>
 8016a84:	2800      	cmp	r0, #0
 8016a86:	f47f aece 	bne.w	8016826 <_strtod_l+0x7e>
 8016a8a:	9a06      	ldr	r2, [sp, #24]
 8016a8c:	2a00      	cmp	r2, #0
 8016a8e:	f47f aeca 	bne.w	8016826 <_strtod_l+0x7e>
 8016a92:	9a04      	ldr	r2, [sp, #16]
 8016a94:	2a00      	cmp	r2, #0
 8016a96:	f47f aee4 	bne.w	8016862 <_strtod_l+0xba>
 8016a9a:	2b4e      	cmp	r3, #78	; 0x4e
 8016a9c:	d027      	beq.n	8016aee <_strtod_l+0x346>
 8016a9e:	dc21      	bgt.n	8016ae4 <_strtod_l+0x33c>
 8016aa0:	2b49      	cmp	r3, #73	; 0x49
 8016aa2:	f47f aede 	bne.w	8016862 <_strtod_l+0xba>
 8016aa6:	49a0      	ldr	r1, [pc, #640]	; (8016d28 <_strtod_l+0x580>)
 8016aa8:	a81b      	add	r0, sp, #108	; 0x6c
 8016aaa:	f001 fdf7 	bl	801869c <__match>
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	f43f aed7 	beq.w	8016862 <_strtod_l+0xba>
 8016ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ab6:	499d      	ldr	r1, [pc, #628]	; (8016d2c <_strtod_l+0x584>)
 8016ab8:	3b01      	subs	r3, #1
 8016aba:	a81b      	add	r0, sp, #108	; 0x6c
 8016abc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016abe:	f001 fded 	bl	801869c <__match>
 8016ac2:	b910      	cbnz	r0, 8016aca <_strtod_l+0x322>
 8016ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016aca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016d40 <_strtod_l+0x598>
 8016ace:	f04f 0a00 	mov.w	sl, #0
 8016ad2:	e6a8      	b.n	8016826 <_strtod_l+0x7e>
 8016ad4:	210a      	movs	r1, #10
 8016ad6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016ada:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016ade:	e7b8      	b.n	8016a52 <_strtod_l+0x2aa>
 8016ae0:	46be      	mov	lr, r7
 8016ae2:	e7c8      	b.n	8016a76 <_strtod_l+0x2ce>
 8016ae4:	2b69      	cmp	r3, #105	; 0x69
 8016ae6:	d0de      	beq.n	8016aa6 <_strtod_l+0x2fe>
 8016ae8:	2b6e      	cmp	r3, #110	; 0x6e
 8016aea:	f47f aeba 	bne.w	8016862 <_strtod_l+0xba>
 8016aee:	4990      	ldr	r1, [pc, #576]	; (8016d30 <_strtod_l+0x588>)
 8016af0:	a81b      	add	r0, sp, #108	; 0x6c
 8016af2:	f001 fdd3 	bl	801869c <__match>
 8016af6:	2800      	cmp	r0, #0
 8016af8:	f43f aeb3 	beq.w	8016862 <_strtod_l+0xba>
 8016afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	2b28      	cmp	r3, #40	; 0x28
 8016b02:	d10e      	bne.n	8016b22 <_strtod_l+0x37a>
 8016b04:	aa1e      	add	r2, sp, #120	; 0x78
 8016b06:	498b      	ldr	r1, [pc, #556]	; (8016d34 <_strtod_l+0x58c>)
 8016b08:	a81b      	add	r0, sp, #108	; 0x6c
 8016b0a:	f001 fddb 	bl	80186c4 <__hexnan>
 8016b0e:	2805      	cmp	r0, #5
 8016b10:	d107      	bne.n	8016b22 <_strtod_l+0x37a>
 8016b12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016b18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016b1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016b20:	e681      	b.n	8016826 <_strtod_l+0x7e>
 8016b22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016d48 <_strtod_l+0x5a0>
 8016b26:	e7d2      	b.n	8016ace <_strtod_l+0x326>
 8016b28:	ebae 0302 	sub.w	r3, lr, r2
 8016b2c:	9306      	str	r3, [sp, #24]
 8016b2e:	9b05      	ldr	r3, [sp, #20]
 8016b30:	9807      	ldr	r0, [sp, #28]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	bf08      	it	eq
 8016b36:	4623      	moveq	r3, r4
 8016b38:	2c10      	cmp	r4, #16
 8016b3a:	9305      	str	r3, [sp, #20]
 8016b3c:	46a0      	mov	r8, r4
 8016b3e:	bfa8      	it	ge
 8016b40:	f04f 0810 	movge.w	r8, #16
 8016b44:	f7e9 fcf6 	bl	8000534 <__aeabi_ui2d>
 8016b48:	2c09      	cmp	r4, #9
 8016b4a:	4682      	mov	sl, r0
 8016b4c:	468b      	mov	fp, r1
 8016b4e:	dc13      	bgt.n	8016b78 <_strtod_l+0x3d0>
 8016b50:	9b06      	ldr	r3, [sp, #24]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	f43f ae67 	beq.w	8016826 <_strtod_l+0x7e>
 8016b58:	9b06      	ldr	r3, [sp, #24]
 8016b5a:	dd7a      	ble.n	8016c52 <_strtod_l+0x4aa>
 8016b5c:	2b16      	cmp	r3, #22
 8016b5e:	dc61      	bgt.n	8016c24 <_strtod_l+0x47c>
 8016b60:	4a75      	ldr	r2, [pc, #468]	; (8016d38 <_strtod_l+0x590>)
 8016b62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016b66:	e9de 0100 	ldrd	r0, r1, [lr]
 8016b6a:	4652      	mov	r2, sl
 8016b6c:	465b      	mov	r3, fp
 8016b6e:	f7e9 fd5b 	bl	8000628 <__aeabi_dmul>
 8016b72:	4682      	mov	sl, r0
 8016b74:	468b      	mov	fp, r1
 8016b76:	e656      	b.n	8016826 <_strtod_l+0x7e>
 8016b78:	4b6f      	ldr	r3, [pc, #444]	; (8016d38 <_strtod_l+0x590>)
 8016b7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016b7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016b82:	f7e9 fd51 	bl	8000628 <__aeabi_dmul>
 8016b86:	4606      	mov	r6, r0
 8016b88:	4628      	mov	r0, r5
 8016b8a:	460f      	mov	r7, r1
 8016b8c:	f7e9 fcd2 	bl	8000534 <__aeabi_ui2d>
 8016b90:	4602      	mov	r2, r0
 8016b92:	460b      	mov	r3, r1
 8016b94:	4630      	mov	r0, r6
 8016b96:	4639      	mov	r1, r7
 8016b98:	f7e9 fb90 	bl	80002bc <__adddf3>
 8016b9c:	2c0f      	cmp	r4, #15
 8016b9e:	4682      	mov	sl, r0
 8016ba0:	468b      	mov	fp, r1
 8016ba2:	ddd5      	ble.n	8016b50 <_strtod_l+0x3a8>
 8016ba4:	9b06      	ldr	r3, [sp, #24]
 8016ba6:	eba4 0808 	sub.w	r8, r4, r8
 8016baa:	4498      	add	r8, r3
 8016bac:	f1b8 0f00 	cmp.w	r8, #0
 8016bb0:	f340 8096 	ble.w	8016ce0 <_strtod_l+0x538>
 8016bb4:	f018 030f 	ands.w	r3, r8, #15
 8016bb8:	d00a      	beq.n	8016bd0 <_strtod_l+0x428>
 8016bba:	495f      	ldr	r1, [pc, #380]	; (8016d38 <_strtod_l+0x590>)
 8016bbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016bc0:	4652      	mov	r2, sl
 8016bc2:	465b      	mov	r3, fp
 8016bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bc8:	f7e9 fd2e 	bl	8000628 <__aeabi_dmul>
 8016bcc:	4682      	mov	sl, r0
 8016bce:	468b      	mov	fp, r1
 8016bd0:	f038 080f 	bics.w	r8, r8, #15
 8016bd4:	d073      	beq.n	8016cbe <_strtod_l+0x516>
 8016bd6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016bda:	dd47      	ble.n	8016c6c <_strtod_l+0x4c4>
 8016bdc:	2400      	movs	r4, #0
 8016bde:	46a0      	mov	r8, r4
 8016be0:	9407      	str	r4, [sp, #28]
 8016be2:	9405      	str	r4, [sp, #20]
 8016be4:	2322      	movs	r3, #34	; 0x22
 8016be6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016d40 <_strtod_l+0x598>
 8016bea:	f8c9 3000 	str.w	r3, [r9]
 8016bee:	f04f 0a00 	mov.w	sl, #0
 8016bf2:	9b07      	ldr	r3, [sp, #28]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	f43f ae16 	beq.w	8016826 <_strtod_l+0x7e>
 8016bfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016bfc:	4648      	mov	r0, r9
 8016bfe:	f001 fe6c 	bl	80188da <_Bfree>
 8016c02:	9905      	ldr	r1, [sp, #20]
 8016c04:	4648      	mov	r0, r9
 8016c06:	f001 fe68 	bl	80188da <_Bfree>
 8016c0a:	4641      	mov	r1, r8
 8016c0c:	4648      	mov	r0, r9
 8016c0e:	f001 fe64 	bl	80188da <_Bfree>
 8016c12:	9907      	ldr	r1, [sp, #28]
 8016c14:	4648      	mov	r0, r9
 8016c16:	f001 fe60 	bl	80188da <_Bfree>
 8016c1a:	4621      	mov	r1, r4
 8016c1c:	4648      	mov	r0, r9
 8016c1e:	f001 fe5c 	bl	80188da <_Bfree>
 8016c22:	e600      	b.n	8016826 <_strtod_l+0x7e>
 8016c24:	9a06      	ldr	r2, [sp, #24]
 8016c26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016c2a:	4293      	cmp	r3, r2
 8016c2c:	dbba      	blt.n	8016ba4 <_strtod_l+0x3fc>
 8016c2e:	4d42      	ldr	r5, [pc, #264]	; (8016d38 <_strtod_l+0x590>)
 8016c30:	f1c4 040f 	rsb	r4, r4, #15
 8016c34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016c38:	4652      	mov	r2, sl
 8016c3a:	465b      	mov	r3, fp
 8016c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c40:	f7e9 fcf2 	bl	8000628 <__aeabi_dmul>
 8016c44:	9b06      	ldr	r3, [sp, #24]
 8016c46:	1b1c      	subs	r4, r3, r4
 8016c48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016c4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c50:	e78d      	b.n	8016b6e <_strtod_l+0x3c6>
 8016c52:	f113 0f16 	cmn.w	r3, #22
 8016c56:	dba5      	blt.n	8016ba4 <_strtod_l+0x3fc>
 8016c58:	4a37      	ldr	r2, [pc, #220]	; (8016d38 <_strtod_l+0x590>)
 8016c5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016c5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016c62:	4650      	mov	r0, sl
 8016c64:	4659      	mov	r1, fp
 8016c66:	f7e9 fe09 	bl	800087c <__aeabi_ddiv>
 8016c6a:	e782      	b.n	8016b72 <_strtod_l+0x3ca>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	4e33      	ldr	r6, [pc, #204]	; (8016d3c <_strtod_l+0x594>)
 8016c70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016c74:	4650      	mov	r0, sl
 8016c76:	4659      	mov	r1, fp
 8016c78:	461d      	mov	r5, r3
 8016c7a:	f1b8 0f01 	cmp.w	r8, #1
 8016c7e:	dc21      	bgt.n	8016cc4 <_strtod_l+0x51c>
 8016c80:	b10b      	cbz	r3, 8016c86 <_strtod_l+0x4de>
 8016c82:	4682      	mov	sl, r0
 8016c84:	468b      	mov	fp, r1
 8016c86:	4b2d      	ldr	r3, [pc, #180]	; (8016d3c <_strtod_l+0x594>)
 8016c88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016c8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016c90:	4652      	mov	r2, sl
 8016c92:	465b      	mov	r3, fp
 8016c94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016c98:	f7e9 fcc6 	bl	8000628 <__aeabi_dmul>
 8016c9c:	4b28      	ldr	r3, [pc, #160]	; (8016d40 <_strtod_l+0x598>)
 8016c9e:	460a      	mov	r2, r1
 8016ca0:	400b      	ands	r3, r1
 8016ca2:	4928      	ldr	r1, [pc, #160]	; (8016d44 <_strtod_l+0x59c>)
 8016ca4:	428b      	cmp	r3, r1
 8016ca6:	4682      	mov	sl, r0
 8016ca8:	d898      	bhi.n	8016bdc <_strtod_l+0x434>
 8016caa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016cae:	428b      	cmp	r3, r1
 8016cb0:	bf86      	itte	hi
 8016cb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016d4c <_strtod_l+0x5a4>
 8016cb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016cba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	9304      	str	r3, [sp, #16]
 8016cc2:	e077      	b.n	8016db4 <_strtod_l+0x60c>
 8016cc4:	f018 0f01 	tst.w	r8, #1
 8016cc8:	d006      	beq.n	8016cd8 <_strtod_l+0x530>
 8016cca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd2:	f7e9 fca9 	bl	8000628 <__aeabi_dmul>
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	3501      	adds	r5, #1
 8016cda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016cde:	e7cc      	b.n	8016c7a <_strtod_l+0x4d2>
 8016ce0:	d0ed      	beq.n	8016cbe <_strtod_l+0x516>
 8016ce2:	f1c8 0800 	rsb	r8, r8, #0
 8016ce6:	f018 020f 	ands.w	r2, r8, #15
 8016cea:	d00a      	beq.n	8016d02 <_strtod_l+0x55a>
 8016cec:	4b12      	ldr	r3, [pc, #72]	; (8016d38 <_strtod_l+0x590>)
 8016cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016cf2:	4650      	mov	r0, sl
 8016cf4:	4659      	mov	r1, fp
 8016cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfa:	f7e9 fdbf 	bl	800087c <__aeabi_ddiv>
 8016cfe:	4682      	mov	sl, r0
 8016d00:	468b      	mov	fp, r1
 8016d02:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016d06:	d0da      	beq.n	8016cbe <_strtod_l+0x516>
 8016d08:	f1b8 0f1f 	cmp.w	r8, #31
 8016d0c:	dd20      	ble.n	8016d50 <_strtod_l+0x5a8>
 8016d0e:	2400      	movs	r4, #0
 8016d10:	46a0      	mov	r8, r4
 8016d12:	9407      	str	r4, [sp, #28]
 8016d14:	9405      	str	r4, [sp, #20]
 8016d16:	2322      	movs	r3, #34	; 0x22
 8016d18:	f04f 0a00 	mov.w	sl, #0
 8016d1c:	f04f 0b00 	mov.w	fp, #0
 8016d20:	f8c9 3000 	str.w	r3, [r9]
 8016d24:	e765      	b.n	8016bf2 <_strtod_l+0x44a>
 8016d26:	bf00      	nop
 8016d28:	0801a455 	.word	0x0801a455
 8016d2c:	0801a4db 	.word	0x0801a4db
 8016d30:	0801a45d 	.word	0x0801a45d
 8016d34:	0801a49c 	.word	0x0801a49c
 8016d38:	0801a518 	.word	0x0801a518
 8016d3c:	0801a4f0 	.word	0x0801a4f0
 8016d40:	7ff00000 	.word	0x7ff00000
 8016d44:	7ca00000 	.word	0x7ca00000
 8016d48:	fff80000 	.word	0xfff80000
 8016d4c:	7fefffff 	.word	0x7fefffff
 8016d50:	f018 0310 	ands.w	r3, r8, #16
 8016d54:	bf18      	it	ne
 8016d56:	236a      	movne	r3, #106	; 0x6a
 8016d58:	4da0      	ldr	r5, [pc, #640]	; (8016fdc <_strtod_l+0x834>)
 8016d5a:	9304      	str	r3, [sp, #16]
 8016d5c:	4650      	mov	r0, sl
 8016d5e:	4659      	mov	r1, fp
 8016d60:	2300      	movs	r3, #0
 8016d62:	f1b8 0f00 	cmp.w	r8, #0
 8016d66:	f300 810a 	bgt.w	8016f7e <_strtod_l+0x7d6>
 8016d6a:	b10b      	cbz	r3, 8016d70 <_strtod_l+0x5c8>
 8016d6c:	4682      	mov	sl, r0
 8016d6e:	468b      	mov	fp, r1
 8016d70:	9b04      	ldr	r3, [sp, #16]
 8016d72:	b1bb      	cbz	r3, 8016da4 <_strtod_l+0x5fc>
 8016d74:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016d78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	4659      	mov	r1, fp
 8016d80:	dd10      	ble.n	8016da4 <_strtod_l+0x5fc>
 8016d82:	2b1f      	cmp	r3, #31
 8016d84:	f340 8107 	ble.w	8016f96 <_strtod_l+0x7ee>
 8016d88:	2b34      	cmp	r3, #52	; 0x34
 8016d8a:	bfde      	ittt	le
 8016d8c:	3b20      	suble	r3, #32
 8016d8e:	f04f 32ff 	movle.w	r2, #4294967295
 8016d92:	fa02 f303 	lslle.w	r3, r2, r3
 8016d96:	f04f 0a00 	mov.w	sl, #0
 8016d9a:	bfcc      	ite	gt
 8016d9c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016da0:	ea03 0b01 	andle.w	fp, r3, r1
 8016da4:	2200      	movs	r2, #0
 8016da6:	2300      	movs	r3, #0
 8016da8:	4650      	mov	r0, sl
 8016daa:	4659      	mov	r1, fp
 8016dac:	f7e9 fea4 	bl	8000af8 <__aeabi_dcmpeq>
 8016db0:	2800      	cmp	r0, #0
 8016db2:	d1ac      	bne.n	8016d0e <_strtod_l+0x566>
 8016db4:	9b07      	ldr	r3, [sp, #28]
 8016db6:	9300      	str	r3, [sp, #0]
 8016db8:	9a05      	ldr	r2, [sp, #20]
 8016dba:	9908      	ldr	r1, [sp, #32]
 8016dbc:	4623      	mov	r3, r4
 8016dbe:	4648      	mov	r0, r9
 8016dc0:	f001 fddd 	bl	801897e <__s2b>
 8016dc4:	9007      	str	r0, [sp, #28]
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	f43f af08 	beq.w	8016bdc <_strtod_l+0x434>
 8016dcc:	9a06      	ldr	r2, [sp, #24]
 8016dce:	9b06      	ldr	r3, [sp, #24]
 8016dd0:	2a00      	cmp	r2, #0
 8016dd2:	f1c3 0300 	rsb	r3, r3, #0
 8016dd6:	bfa8      	it	ge
 8016dd8:	2300      	movge	r3, #0
 8016dda:	930e      	str	r3, [sp, #56]	; 0x38
 8016ddc:	2400      	movs	r4, #0
 8016dde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016de2:	9316      	str	r3, [sp, #88]	; 0x58
 8016de4:	46a0      	mov	r8, r4
 8016de6:	9b07      	ldr	r3, [sp, #28]
 8016de8:	4648      	mov	r0, r9
 8016dea:	6859      	ldr	r1, [r3, #4]
 8016dec:	f001 fd41 	bl	8018872 <_Balloc>
 8016df0:	9005      	str	r0, [sp, #20]
 8016df2:	2800      	cmp	r0, #0
 8016df4:	f43f aef6 	beq.w	8016be4 <_strtod_l+0x43c>
 8016df8:	9b07      	ldr	r3, [sp, #28]
 8016dfa:	691a      	ldr	r2, [r3, #16]
 8016dfc:	3202      	adds	r2, #2
 8016dfe:	f103 010c 	add.w	r1, r3, #12
 8016e02:	0092      	lsls	r2, r2, #2
 8016e04:	300c      	adds	r0, #12
 8016e06:	f001 fd29 	bl	801885c <memcpy>
 8016e0a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e0c:	a91d      	add	r1, sp, #116	; 0x74
 8016e0e:	ec4b ab10 	vmov	d0, sl, fp
 8016e12:	4648      	mov	r0, r9
 8016e14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016e18:	f002 f86c 	bl	8018ef4 <__d2b>
 8016e1c:	901c      	str	r0, [sp, #112]	; 0x70
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	f43f aee0 	beq.w	8016be4 <_strtod_l+0x43c>
 8016e24:	2101      	movs	r1, #1
 8016e26:	4648      	mov	r0, r9
 8016e28:	f001 fe35 	bl	8018a96 <__i2b>
 8016e2c:	4680      	mov	r8, r0
 8016e2e:	2800      	cmp	r0, #0
 8016e30:	f43f aed8 	beq.w	8016be4 <_strtod_l+0x43c>
 8016e34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016e36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e38:	2e00      	cmp	r6, #0
 8016e3a:	bfab      	itete	ge
 8016e3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016e3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016e40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016e42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016e44:	bfac      	ite	ge
 8016e46:	18f7      	addge	r7, r6, r3
 8016e48:	1b9d      	sublt	r5, r3, r6
 8016e4a:	9b04      	ldr	r3, [sp, #16]
 8016e4c:	1af6      	subs	r6, r6, r3
 8016e4e:	4416      	add	r6, r2
 8016e50:	4b63      	ldr	r3, [pc, #396]	; (8016fe0 <_strtod_l+0x838>)
 8016e52:	3e01      	subs	r6, #1
 8016e54:	429e      	cmp	r6, r3
 8016e56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016e5a:	f280 80af 	bge.w	8016fbc <_strtod_l+0x814>
 8016e5e:	1b9b      	subs	r3, r3, r6
 8016e60:	2b1f      	cmp	r3, #31
 8016e62:	eba2 0203 	sub.w	r2, r2, r3
 8016e66:	f04f 0101 	mov.w	r1, #1
 8016e6a:	f300 809b 	bgt.w	8016fa4 <_strtod_l+0x7fc>
 8016e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8016e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e74:	2300      	movs	r3, #0
 8016e76:	930a      	str	r3, [sp, #40]	; 0x28
 8016e78:	18be      	adds	r6, r7, r2
 8016e7a:	9b04      	ldr	r3, [sp, #16]
 8016e7c:	42b7      	cmp	r7, r6
 8016e7e:	4415      	add	r5, r2
 8016e80:	441d      	add	r5, r3
 8016e82:	463b      	mov	r3, r7
 8016e84:	bfa8      	it	ge
 8016e86:	4633      	movge	r3, r6
 8016e88:	42ab      	cmp	r3, r5
 8016e8a:	bfa8      	it	ge
 8016e8c:	462b      	movge	r3, r5
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	bfc2      	ittt	gt
 8016e92:	1af6      	subgt	r6, r6, r3
 8016e94:	1aed      	subgt	r5, r5, r3
 8016e96:	1aff      	subgt	r7, r7, r3
 8016e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e9a:	b1bb      	cbz	r3, 8016ecc <_strtod_l+0x724>
 8016e9c:	4641      	mov	r1, r8
 8016e9e:	461a      	mov	r2, r3
 8016ea0:	4648      	mov	r0, r9
 8016ea2:	f001 fe97 	bl	8018bd4 <__pow5mult>
 8016ea6:	4680      	mov	r8, r0
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	f43f ae9b 	beq.w	8016be4 <_strtod_l+0x43c>
 8016eae:	4601      	mov	r1, r0
 8016eb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016eb2:	4648      	mov	r0, r9
 8016eb4:	f001 fdf8 	bl	8018aa8 <__multiply>
 8016eb8:	900c      	str	r0, [sp, #48]	; 0x30
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	f43f ae92 	beq.w	8016be4 <_strtod_l+0x43c>
 8016ec0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ec2:	4648      	mov	r0, r9
 8016ec4:	f001 fd09 	bl	80188da <_Bfree>
 8016ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016eca:	931c      	str	r3, [sp, #112]	; 0x70
 8016ecc:	2e00      	cmp	r6, #0
 8016ece:	dc7a      	bgt.n	8016fc6 <_strtod_l+0x81e>
 8016ed0:	9b06      	ldr	r3, [sp, #24]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	dd08      	ble.n	8016ee8 <_strtod_l+0x740>
 8016ed6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016ed8:	9905      	ldr	r1, [sp, #20]
 8016eda:	4648      	mov	r0, r9
 8016edc:	f001 fe7a 	bl	8018bd4 <__pow5mult>
 8016ee0:	9005      	str	r0, [sp, #20]
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	f43f ae7e 	beq.w	8016be4 <_strtod_l+0x43c>
 8016ee8:	2d00      	cmp	r5, #0
 8016eea:	dd08      	ble.n	8016efe <_strtod_l+0x756>
 8016eec:	462a      	mov	r2, r5
 8016eee:	9905      	ldr	r1, [sp, #20]
 8016ef0:	4648      	mov	r0, r9
 8016ef2:	f001 febd 	bl	8018c70 <__lshift>
 8016ef6:	9005      	str	r0, [sp, #20]
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	f43f ae73 	beq.w	8016be4 <_strtod_l+0x43c>
 8016efe:	2f00      	cmp	r7, #0
 8016f00:	dd08      	ble.n	8016f14 <_strtod_l+0x76c>
 8016f02:	4641      	mov	r1, r8
 8016f04:	463a      	mov	r2, r7
 8016f06:	4648      	mov	r0, r9
 8016f08:	f001 feb2 	bl	8018c70 <__lshift>
 8016f0c:	4680      	mov	r8, r0
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	f43f ae68 	beq.w	8016be4 <_strtod_l+0x43c>
 8016f14:	9a05      	ldr	r2, [sp, #20]
 8016f16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f18:	4648      	mov	r0, r9
 8016f1a:	f001 ff17 	bl	8018d4c <__mdiff>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	2800      	cmp	r0, #0
 8016f22:	f43f ae5f 	beq.w	8016be4 <_strtod_l+0x43c>
 8016f26:	68c3      	ldr	r3, [r0, #12]
 8016f28:	930c      	str	r3, [sp, #48]	; 0x30
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	60c3      	str	r3, [r0, #12]
 8016f2e:	4641      	mov	r1, r8
 8016f30:	f001 fef2 	bl	8018d18 <__mcmp>
 8016f34:	2800      	cmp	r0, #0
 8016f36:	da55      	bge.n	8016fe4 <_strtod_l+0x83c>
 8016f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f3a:	b9e3      	cbnz	r3, 8016f76 <_strtod_l+0x7ce>
 8016f3c:	f1ba 0f00 	cmp.w	sl, #0
 8016f40:	d119      	bne.n	8016f76 <_strtod_l+0x7ce>
 8016f42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f46:	b9b3      	cbnz	r3, 8016f76 <_strtod_l+0x7ce>
 8016f48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f4c:	0d1b      	lsrs	r3, r3, #20
 8016f4e:	051b      	lsls	r3, r3, #20
 8016f50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016f54:	d90f      	bls.n	8016f76 <_strtod_l+0x7ce>
 8016f56:	6963      	ldr	r3, [r4, #20]
 8016f58:	b913      	cbnz	r3, 8016f60 <_strtod_l+0x7b8>
 8016f5a:	6923      	ldr	r3, [r4, #16]
 8016f5c:	2b01      	cmp	r3, #1
 8016f5e:	dd0a      	ble.n	8016f76 <_strtod_l+0x7ce>
 8016f60:	4621      	mov	r1, r4
 8016f62:	2201      	movs	r2, #1
 8016f64:	4648      	mov	r0, r9
 8016f66:	f001 fe83 	bl	8018c70 <__lshift>
 8016f6a:	4641      	mov	r1, r8
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	f001 fed3 	bl	8018d18 <__mcmp>
 8016f72:	2800      	cmp	r0, #0
 8016f74:	dc67      	bgt.n	8017046 <_strtod_l+0x89e>
 8016f76:	9b04      	ldr	r3, [sp, #16]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d171      	bne.n	8017060 <_strtod_l+0x8b8>
 8016f7c:	e63d      	b.n	8016bfa <_strtod_l+0x452>
 8016f7e:	f018 0f01 	tst.w	r8, #1
 8016f82:	d004      	beq.n	8016f8e <_strtod_l+0x7e6>
 8016f84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f88:	f7e9 fb4e 	bl	8000628 <__aeabi_dmul>
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016f92:	3508      	adds	r5, #8
 8016f94:	e6e5      	b.n	8016d62 <_strtod_l+0x5ba>
 8016f96:	f04f 32ff 	mov.w	r2, #4294967295
 8016f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8016f9e:	ea03 0a0a 	and.w	sl, r3, sl
 8016fa2:	e6ff      	b.n	8016da4 <_strtod_l+0x5fc>
 8016fa4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016fa8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016fac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016fb0:	36e2      	adds	r6, #226	; 0xe2
 8016fb2:	fa01 f306 	lsl.w	r3, r1, r6
 8016fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016fba:	e75d      	b.n	8016e78 <_strtod_l+0x6d0>
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fc4:	e758      	b.n	8016e78 <_strtod_l+0x6d0>
 8016fc6:	4632      	mov	r2, r6
 8016fc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fca:	4648      	mov	r0, r9
 8016fcc:	f001 fe50 	bl	8018c70 <__lshift>
 8016fd0:	901c      	str	r0, [sp, #112]	; 0x70
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	f47f af7c 	bne.w	8016ed0 <_strtod_l+0x728>
 8016fd8:	e604      	b.n	8016be4 <_strtod_l+0x43c>
 8016fda:	bf00      	nop
 8016fdc:	0801a4b0 	.word	0x0801a4b0
 8016fe0:	fffffc02 	.word	0xfffffc02
 8016fe4:	465d      	mov	r5, fp
 8016fe6:	f040 8086 	bne.w	80170f6 <_strtod_l+0x94e>
 8016fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016fec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ff0:	b32a      	cbz	r2, 801703e <_strtod_l+0x896>
 8016ff2:	4aaf      	ldr	r2, [pc, #700]	; (80172b0 <_strtod_l+0xb08>)
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	d153      	bne.n	80170a0 <_strtod_l+0x8f8>
 8016ff8:	9b04      	ldr	r3, [sp, #16]
 8016ffa:	4650      	mov	r0, sl
 8016ffc:	b1d3      	cbz	r3, 8017034 <_strtod_l+0x88c>
 8016ffe:	4aad      	ldr	r2, [pc, #692]	; (80172b4 <_strtod_l+0xb0c>)
 8017000:	402a      	ands	r2, r5
 8017002:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017006:	f04f 31ff 	mov.w	r1, #4294967295
 801700a:	d816      	bhi.n	801703a <_strtod_l+0x892>
 801700c:	0d12      	lsrs	r2, r2, #20
 801700e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017012:	fa01 f303 	lsl.w	r3, r1, r3
 8017016:	4298      	cmp	r0, r3
 8017018:	d142      	bne.n	80170a0 <_strtod_l+0x8f8>
 801701a:	4ba7      	ldr	r3, [pc, #668]	; (80172b8 <_strtod_l+0xb10>)
 801701c:	429d      	cmp	r5, r3
 801701e:	d102      	bne.n	8017026 <_strtod_l+0x87e>
 8017020:	3001      	adds	r0, #1
 8017022:	f43f addf 	beq.w	8016be4 <_strtod_l+0x43c>
 8017026:	4ba3      	ldr	r3, [pc, #652]	; (80172b4 <_strtod_l+0xb0c>)
 8017028:	402b      	ands	r3, r5
 801702a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801702e:	f04f 0a00 	mov.w	sl, #0
 8017032:	e7a0      	b.n	8016f76 <_strtod_l+0x7ce>
 8017034:	f04f 33ff 	mov.w	r3, #4294967295
 8017038:	e7ed      	b.n	8017016 <_strtod_l+0x86e>
 801703a:	460b      	mov	r3, r1
 801703c:	e7eb      	b.n	8017016 <_strtod_l+0x86e>
 801703e:	bb7b      	cbnz	r3, 80170a0 <_strtod_l+0x8f8>
 8017040:	f1ba 0f00 	cmp.w	sl, #0
 8017044:	d12c      	bne.n	80170a0 <_strtod_l+0x8f8>
 8017046:	9904      	ldr	r1, [sp, #16]
 8017048:	4a9a      	ldr	r2, [pc, #616]	; (80172b4 <_strtod_l+0xb0c>)
 801704a:	465b      	mov	r3, fp
 801704c:	b1f1      	cbz	r1, 801708c <_strtod_l+0x8e4>
 801704e:	ea02 010b 	and.w	r1, r2, fp
 8017052:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017056:	dc19      	bgt.n	801708c <_strtod_l+0x8e4>
 8017058:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801705c:	f77f ae5b 	ble.w	8016d16 <_strtod_l+0x56e>
 8017060:	4a96      	ldr	r2, [pc, #600]	; (80172bc <_strtod_l+0xb14>)
 8017062:	2300      	movs	r3, #0
 8017064:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017068:	4650      	mov	r0, sl
 801706a:	4659      	mov	r1, fp
 801706c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017070:	f7e9 fada 	bl	8000628 <__aeabi_dmul>
 8017074:	4682      	mov	sl, r0
 8017076:	468b      	mov	fp, r1
 8017078:	2900      	cmp	r1, #0
 801707a:	f47f adbe 	bne.w	8016bfa <_strtod_l+0x452>
 801707e:	2800      	cmp	r0, #0
 8017080:	f47f adbb 	bne.w	8016bfa <_strtod_l+0x452>
 8017084:	2322      	movs	r3, #34	; 0x22
 8017086:	f8c9 3000 	str.w	r3, [r9]
 801708a:	e5b6      	b.n	8016bfa <_strtod_l+0x452>
 801708c:	4013      	ands	r3, r2
 801708e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017092:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017096:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801709a:	f04f 3aff 	mov.w	sl, #4294967295
 801709e:	e76a      	b.n	8016f76 <_strtod_l+0x7ce>
 80170a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170a2:	b193      	cbz	r3, 80170ca <_strtod_l+0x922>
 80170a4:	422b      	tst	r3, r5
 80170a6:	f43f af66 	beq.w	8016f76 <_strtod_l+0x7ce>
 80170aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ac:	9a04      	ldr	r2, [sp, #16]
 80170ae:	4650      	mov	r0, sl
 80170b0:	4659      	mov	r1, fp
 80170b2:	b173      	cbz	r3, 80170d2 <_strtod_l+0x92a>
 80170b4:	f7ff fb5c 	bl	8016770 <sulp>
 80170b8:	4602      	mov	r2, r0
 80170ba:	460b      	mov	r3, r1
 80170bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80170c0:	f7e9 f8fc 	bl	80002bc <__adddf3>
 80170c4:	4682      	mov	sl, r0
 80170c6:	468b      	mov	fp, r1
 80170c8:	e755      	b.n	8016f76 <_strtod_l+0x7ce>
 80170ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170cc:	ea13 0f0a 	tst.w	r3, sl
 80170d0:	e7e9      	b.n	80170a6 <_strtod_l+0x8fe>
 80170d2:	f7ff fb4d 	bl	8016770 <sulp>
 80170d6:	4602      	mov	r2, r0
 80170d8:	460b      	mov	r3, r1
 80170da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80170de:	f7e9 f8eb 	bl	80002b8 <__aeabi_dsub>
 80170e2:	2200      	movs	r2, #0
 80170e4:	2300      	movs	r3, #0
 80170e6:	4682      	mov	sl, r0
 80170e8:	468b      	mov	fp, r1
 80170ea:	f7e9 fd05 	bl	8000af8 <__aeabi_dcmpeq>
 80170ee:	2800      	cmp	r0, #0
 80170f0:	f47f ae11 	bne.w	8016d16 <_strtod_l+0x56e>
 80170f4:	e73f      	b.n	8016f76 <_strtod_l+0x7ce>
 80170f6:	4641      	mov	r1, r8
 80170f8:	4620      	mov	r0, r4
 80170fa:	f001 ff4a 	bl	8018f92 <__ratio>
 80170fe:	ec57 6b10 	vmov	r6, r7, d0
 8017102:	2200      	movs	r2, #0
 8017104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017108:	ee10 0a10 	vmov	r0, s0
 801710c:	4639      	mov	r1, r7
 801710e:	f7e9 fd07 	bl	8000b20 <__aeabi_dcmple>
 8017112:	2800      	cmp	r0, #0
 8017114:	d077      	beq.n	8017206 <_strtod_l+0xa5e>
 8017116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017118:	2b00      	cmp	r3, #0
 801711a:	d04a      	beq.n	80171b2 <_strtod_l+0xa0a>
 801711c:	4b68      	ldr	r3, [pc, #416]	; (80172c0 <_strtod_l+0xb18>)
 801711e:	2200      	movs	r2, #0
 8017120:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017124:	4f66      	ldr	r7, [pc, #408]	; (80172c0 <_strtod_l+0xb18>)
 8017126:	2600      	movs	r6, #0
 8017128:	4b62      	ldr	r3, [pc, #392]	; (80172b4 <_strtod_l+0xb0c>)
 801712a:	402b      	ands	r3, r5
 801712c:	930f      	str	r3, [sp, #60]	; 0x3c
 801712e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017130:	4b64      	ldr	r3, [pc, #400]	; (80172c4 <_strtod_l+0xb1c>)
 8017132:	429a      	cmp	r2, r3
 8017134:	f040 80ce 	bne.w	80172d4 <_strtod_l+0xb2c>
 8017138:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801713c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017140:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017144:	ec4b ab10 	vmov	d0, sl, fp
 8017148:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801714c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017150:	f001 fe5a 	bl	8018e08 <__ulp>
 8017154:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017158:	ec53 2b10 	vmov	r2, r3, d0
 801715c:	f7e9 fa64 	bl	8000628 <__aeabi_dmul>
 8017160:	4652      	mov	r2, sl
 8017162:	465b      	mov	r3, fp
 8017164:	f7e9 f8aa 	bl	80002bc <__adddf3>
 8017168:	460b      	mov	r3, r1
 801716a:	4952      	ldr	r1, [pc, #328]	; (80172b4 <_strtod_l+0xb0c>)
 801716c:	4a56      	ldr	r2, [pc, #344]	; (80172c8 <_strtod_l+0xb20>)
 801716e:	4019      	ands	r1, r3
 8017170:	4291      	cmp	r1, r2
 8017172:	4682      	mov	sl, r0
 8017174:	d95b      	bls.n	801722e <_strtod_l+0xa86>
 8017176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017178:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801717c:	4293      	cmp	r3, r2
 801717e:	d103      	bne.n	8017188 <_strtod_l+0x9e0>
 8017180:	9b08      	ldr	r3, [sp, #32]
 8017182:	3301      	adds	r3, #1
 8017184:	f43f ad2e 	beq.w	8016be4 <_strtod_l+0x43c>
 8017188:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80172b8 <_strtod_l+0xb10>
 801718c:	f04f 3aff 	mov.w	sl, #4294967295
 8017190:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017192:	4648      	mov	r0, r9
 8017194:	f001 fba1 	bl	80188da <_Bfree>
 8017198:	9905      	ldr	r1, [sp, #20]
 801719a:	4648      	mov	r0, r9
 801719c:	f001 fb9d 	bl	80188da <_Bfree>
 80171a0:	4641      	mov	r1, r8
 80171a2:	4648      	mov	r0, r9
 80171a4:	f001 fb99 	bl	80188da <_Bfree>
 80171a8:	4621      	mov	r1, r4
 80171aa:	4648      	mov	r0, r9
 80171ac:	f001 fb95 	bl	80188da <_Bfree>
 80171b0:	e619      	b.n	8016de6 <_strtod_l+0x63e>
 80171b2:	f1ba 0f00 	cmp.w	sl, #0
 80171b6:	d11a      	bne.n	80171ee <_strtod_l+0xa46>
 80171b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171bc:	b9eb      	cbnz	r3, 80171fa <_strtod_l+0xa52>
 80171be:	2200      	movs	r2, #0
 80171c0:	4b3f      	ldr	r3, [pc, #252]	; (80172c0 <_strtod_l+0xb18>)
 80171c2:	4630      	mov	r0, r6
 80171c4:	4639      	mov	r1, r7
 80171c6:	f7e9 fca1 	bl	8000b0c <__aeabi_dcmplt>
 80171ca:	b9c8      	cbnz	r0, 8017200 <_strtod_l+0xa58>
 80171cc:	4630      	mov	r0, r6
 80171ce:	4639      	mov	r1, r7
 80171d0:	2200      	movs	r2, #0
 80171d2:	4b3e      	ldr	r3, [pc, #248]	; (80172cc <_strtod_l+0xb24>)
 80171d4:	f7e9 fa28 	bl	8000628 <__aeabi_dmul>
 80171d8:	4606      	mov	r6, r0
 80171da:	460f      	mov	r7, r1
 80171dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80171e0:	9618      	str	r6, [sp, #96]	; 0x60
 80171e2:	9319      	str	r3, [sp, #100]	; 0x64
 80171e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80171e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171ec:	e79c      	b.n	8017128 <_strtod_l+0x980>
 80171ee:	f1ba 0f01 	cmp.w	sl, #1
 80171f2:	d102      	bne.n	80171fa <_strtod_l+0xa52>
 80171f4:	2d00      	cmp	r5, #0
 80171f6:	f43f ad8e 	beq.w	8016d16 <_strtod_l+0x56e>
 80171fa:	2200      	movs	r2, #0
 80171fc:	4b34      	ldr	r3, [pc, #208]	; (80172d0 <_strtod_l+0xb28>)
 80171fe:	e78f      	b.n	8017120 <_strtod_l+0x978>
 8017200:	2600      	movs	r6, #0
 8017202:	4f32      	ldr	r7, [pc, #200]	; (80172cc <_strtod_l+0xb24>)
 8017204:	e7ea      	b.n	80171dc <_strtod_l+0xa34>
 8017206:	4b31      	ldr	r3, [pc, #196]	; (80172cc <_strtod_l+0xb24>)
 8017208:	4630      	mov	r0, r6
 801720a:	4639      	mov	r1, r7
 801720c:	2200      	movs	r2, #0
 801720e:	f7e9 fa0b 	bl	8000628 <__aeabi_dmul>
 8017212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017214:	4606      	mov	r6, r0
 8017216:	460f      	mov	r7, r1
 8017218:	b933      	cbnz	r3, 8017228 <_strtod_l+0xa80>
 801721a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801721e:	9010      	str	r0, [sp, #64]	; 0x40
 8017220:	9311      	str	r3, [sp, #68]	; 0x44
 8017222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017226:	e7df      	b.n	80171e8 <_strtod_l+0xa40>
 8017228:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801722c:	e7f9      	b.n	8017222 <_strtod_l+0xa7a>
 801722e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017232:	9b04      	ldr	r3, [sp, #16]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d1ab      	bne.n	8017190 <_strtod_l+0x9e8>
 8017238:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801723c:	0d1b      	lsrs	r3, r3, #20
 801723e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017240:	051b      	lsls	r3, r3, #20
 8017242:	429a      	cmp	r2, r3
 8017244:	465d      	mov	r5, fp
 8017246:	d1a3      	bne.n	8017190 <_strtod_l+0x9e8>
 8017248:	4639      	mov	r1, r7
 801724a:	4630      	mov	r0, r6
 801724c:	f7e9 fc9c 	bl	8000b88 <__aeabi_d2iz>
 8017250:	f7e9 f980 	bl	8000554 <__aeabi_i2d>
 8017254:	460b      	mov	r3, r1
 8017256:	4602      	mov	r2, r0
 8017258:	4639      	mov	r1, r7
 801725a:	4630      	mov	r0, r6
 801725c:	f7e9 f82c 	bl	80002b8 <__aeabi_dsub>
 8017260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017262:	4606      	mov	r6, r0
 8017264:	460f      	mov	r7, r1
 8017266:	b933      	cbnz	r3, 8017276 <_strtod_l+0xace>
 8017268:	f1ba 0f00 	cmp.w	sl, #0
 801726c:	d103      	bne.n	8017276 <_strtod_l+0xace>
 801726e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017272:	2d00      	cmp	r5, #0
 8017274:	d06d      	beq.n	8017352 <_strtod_l+0xbaa>
 8017276:	a30a      	add	r3, pc, #40	; (adr r3, 80172a0 <_strtod_l+0xaf8>)
 8017278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727c:	4630      	mov	r0, r6
 801727e:	4639      	mov	r1, r7
 8017280:	f7e9 fc44 	bl	8000b0c <__aeabi_dcmplt>
 8017284:	2800      	cmp	r0, #0
 8017286:	f47f acb8 	bne.w	8016bfa <_strtod_l+0x452>
 801728a:	a307      	add	r3, pc, #28	; (adr r3, 80172a8 <_strtod_l+0xb00>)
 801728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017290:	4630      	mov	r0, r6
 8017292:	4639      	mov	r1, r7
 8017294:	f7e9 fc58 	bl	8000b48 <__aeabi_dcmpgt>
 8017298:	2800      	cmp	r0, #0
 801729a:	f43f af79 	beq.w	8017190 <_strtod_l+0x9e8>
 801729e:	e4ac      	b.n	8016bfa <_strtod_l+0x452>
 80172a0:	94a03595 	.word	0x94a03595
 80172a4:	3fdfffff 	.word	0x3fdfffff
 80172a8:	35afe535 	.word	0x35afe535
 80172ac:	3fe00000 	.word	0x3fe00000
 80172b0:	000fffff 	.word	0x000fffff
 80172b4:	7ff00000 	.word	0x7ff00000
 80172b8:	7fefffff 	.word	0x7fefffff
 80172bc:	39500000 	.word	0x39500000
 80172c0:	3ff00000 	.word	0x3ff00000
 80172c4:	7fe00000 	.word	0x7fe00000
 80172c8:	7c9fffff 	.word	0x7c9fffff
 80172cc:	3fe00000 	.word	0x3fe00000
 80172d0:	bff00000 	.word	0xbff00000
 80172d4:	9b04      	ldr	r3, [sp, #16]
 80172d6:	b333      	cbz	r3, 8017326 <_strtod_l+0xb7e>
 80172d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80172de:	d822      	bhi.n	8017326 <_strtod_l+0xb7e>
 80172e0:	a327      	add	r3, pc, #156	; (adr r3, 8017380 <_strtod_l+0xbd8>)
 80172e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e6:	4630      	mov	r0, r6
 80172e8:	4639      	mov	r1, r7
 80172ea:	f7e9 fc19 	bl	8000b20 <__aeabi_dcmple>
 80172ee:	b1a0      	cbz	r0, 801731a <_strtod_l+0xb72>
 80172f0:	4639      	mov	r1, r7
 80172f2:	4630      	mov	r0, r6
 80172f4:	f7e9 fc70 	bl	8000bd8 <__aeabi_d2uiz>
 80172f8:	2800      	cmp	r0, #0
 80172fa:	bf08      	it	eq
 80172fc:	2001      	moveq	r0, #1
 80172fe:	f7e9 f919 	bl	8000534 <__aeabi_ui2d>
 8017302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017304:	4606      	mov	r6, r0
 8017306:	460f      	mov	r7, r1
 8017308:	bb03      	cbnz	r3, 801734c <_strtod_l+0xba4>
 801730a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801730e:	9012      	str	r0, [sp, #72]	; 0x48
 8017310:	9313      	str	r3, [sp, #76]	; 0x4c
 8017312:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017316:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801731a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801731c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801731e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017322:	1a9b      	subs	r3, r3, r2
 8017324:	930b      	str	r3, [sp, #44]	; 0x2c
 8017326:	ed9d 0b08 	vldr	d0, [sp, #32]
 801732a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801732e:	f001 fd6b 	bl	8018e08 <__ulp>
 8017332:	4650      	mov	r0, sl
 8017334:	ec53 2b10 	vmov	r2, r3, d0
 8017338:	4659      	mov	r1, fp
 801733a:	f7e9 f975 	bl	8000628 <__aeabi_dmul>
 801733e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017342:	f7e8 ffbb 	bl	80002bc <__adddf3>
 8017346:	4682      	mov	sl, r0
 8017348:	468b      	mov	fp, r1
 801734a:	e772      	b.n	8017232 <_strtod_l+0xa8a>
 801734c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017350:	e7df      	b.n	8017312 <_strtod_l+0xb6a>
 8017352:	a30d      	add	r3, pc, #52	; (adr r3, 8017388 <_strtod_l+0xbe0>)
 8017354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017358:	f7e9 fbd8 	bl	8000b0c <__aeabi_dcmplt>
 801735c:	e79c      	b.n	8017298 <_strtod_l+0xaf0>
 801735e:	2300      	movs	r3, #0
 8017360:	930d      	str	r3, [sp, #52]	; 0x34
 8017362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017366:	6013      	str	r3, [r2, #0]
 8017368:	f7ff ba61 	b.w	801682e <_strtod_l+0x86>
 801736c:	2b65      	cmp	r3, #101	; 0x65
 801736e:	f04f 0200 	mov.w	r2, #0
 8017372:	f43f ab4e 	beq.w	8016a12 <_strtod_l+0x26a>
 8017376:	2101      	movs	r1, #1
 8017378:	4614      	mov	r4, r2
 801737a:	9104      	str	r1, [sp, #16]
 801737c:	f7ff bacb 	b.w	8016916 <_strtod_l+0x16e>
 8017380:	ffc00000 	.word	0xffc00000
 8017384:	41dfffff 	.word	0x41dfffff
 8017388:	94a03595 	.word	0x94a03595
 801738c:	3fcfffff 	.word	0x3fcfffff

08017390 <_strtod_r>:
 8017390:	4b05      	ldr	r3, [pc, #20]	; (80173a8 <_strtod_r+0x18>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	b410      	push	{r4}
 8017396:	6a1b      	ldr	r3, [r3, #32]
 8017398:	4c04      	ldr	r4, [pc, #16]	; (80173ac <_strtod_r+0x1c>)
 801739a:	2b00      	cmp	r3, #0
 801739c:	bf08      	it	eq
 801739e:	4623      	moveq	r3, r4
 80173a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173a4:	f7ff ba00 	b.w	80167a8 <_strtod_l>
 80173a8:	2000000c 	.word	0x2000000c
 80173ac:	20000070 	.word	0x20000070

080173b0 <_strtol_l.isra.0>:
 80173b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173b4:	4680      	mov	r8, r0
 80173b6:	4689      	mov	r9, r1
 80173b8:	4692      	mov	sl, r2
 80173ba:	461e      	mov	r6, r3
 80173bc:	460f      	mov	r7, r1
 80173be:	463d      	mov	r5, r7
 80173c0:	9808      	ldr	r0, [sp, #32]
 80173c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173c6:	f001 fa0d 	bl	80187e4 <__locale_ctype_ptr_l>
 80173ca:	4420      	add	r0, r4
 80173cc:	7843      	ldrb	r3, [r0, #1]
 80173ce:	f013 0308 	ands.w	r3, r3, #8
 80173d2:	d132      	bne.n	801743a <_strtol_l.isra.0+0x8a>
 80173d4:	2c2d      	cmp	r4, #45	; 0x2d
 80173d6:	d132      	bne.n	801743e <_strtol_l.isra.0+0x8e>
 80173d8:	787c      	ldrb	r4, [r7, #1]
 80173da:	1cbd      	adds	r5, r7, #2
 80173dc:	2201      	movs	r2, #1
 80173de:	2e00      	cmp	r6, #0
 80173e0:	d05d      	beq.n	801749e <_strtol_l.isra.0+0xee>
 80173e2:	2e10      	cmp	r6, #16
 80173e4:	d109      	bne.n	80173fa <_strtol_l.isra.0+0x4a>
 80173e6:	2c30      	cmp	r4, #48	; 0x30
 80173e8:	d107      	bne.n	80173fa <_strtol_l.isra.0+0x4a>
 80173ea:	782b      	ldrb	r3, [r5, #0]
 80173ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80173f0:	2b58      	cmp	r3, #88	; 0x58
 80173f2:	d14f      	bne.n	8017494 <_strtol_l.isra.0+0xe4>
 80173f4:	786c      	ldrb	r4, [r5, #1]
 80173f6:	2610      	movs	r6, #16
 80173f8:	3502      	adds	r5, #2
 80173fa:	2a00      	cmp	r2, #0
 80173fc:	bf14      	ite	ne
 80173fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017402:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017406:	2700      	movs	r7, #0
 8017408:	fbb1 fcf6 	udiv	ip, r1, r6
 801740c:	4638      	mov	r0, r7
 801740e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017412:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017416:	2b09      	cmp	r3, #9
 8017418:	d817      	bhi.n	801744a <_strtol_l.isra.0+0x9a>
 801741a:	461c      	mov	r4, r3
 801741c:	42a6      	cmp	r6, r4
 801741e:	dd23      	ble.n	8017468 <_strtol_l.isra.0+0xb8>
 8017420:	1c7b      	adds	r3, r7, #1
 8017422:	d007      	beq.n	8017434 <_strtol_l.isra.0+0x84>
 8017424:	4584      	cmp	ip, r0
 8017426:	d31c      	bcc.n	8017462 <_strtol_l.isra.0+0xb2>
 8017428:	d101      	bne.n	801742e <_strtol_l.isra.0+0x7e>
 801742a:	45a6      	cmp	lr, r4
 801742c:	db19      	blt.n	8017462 <_strtol_l.isra.0+0xb2>
 801742e:	fb00 4006 	mla	r0, r0, r6, r4
 8017432:	2701      	movs	r7, #1
 8017434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017438:	e7eb      	b.n	8017412 <_strtol_l.isra.0+0x62>
 801743a:	462f      	mov	r7, r5
 801743c:	e7bf      	b.n	80173be <_strtol_l.isra.0+0xe>
 801743e:	2c2b      	cmp	r4, #43	; 0x2b
 8017440:	bf04      	itt	eq
 8017442:	1cbd      	addeq	r5, r7, #2
 8017444:	787c      	ldrbeq	r4, [r7, #1]
 8017446:	461a      	mov	r2, r3
 8017448:	e7c9      	b.n	80173de <_strtol_l.isra.0+0x2e>
 801744a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801744e:	2b19      	cmp	r3, #25
 8017450:	d801      	bhi.n	8017456 <_strtol_l.isra.0+0xa6>
 8017452:	3c37      	subs	r4, #55	; 0x37
 8017454:	e7e2      	b.n	801741c <_strtol_l.isra.0+0x6c>
 8017456:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801745a:	2b19      	cmp	r3, #25
 801745c:	d804      	bhi.n	8017468 <_strtol_l.isra.0+0xb8>
 801745e:	3c57      	subs	r4, #87	; 0x57
 8017460:	e7dc      	b.n	801741c <_strtol_l.isra.0+0x6c>
 8017462:	f04f 37ff 	mov.w	r7, #4294967295
 8017466:	e7e5      	b.n	8017434 <_strtol_l.isra.0+0x84>
 8017468:	1c7b      	adds	r3, r7, #1
 801746a:	d108      	bne.n	801747e <_strtol_l.isra.0+0xce>
 801746c:	2322      	movs	r3, #34	; 0x22
 801746e:	f8c8 3000 	str.w	r3, [r8]
 8017472:	4608      	mov	r0, r1
 8017474:	f1ba 0f00 	cmp.w	sl, #0
 8017478:	d107      	bne.n	801748a <_strtol_l.isra.0+0xda>
 801747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801747e:	b102      	cbz	r2, 8017482 <_strtol_l.isra.0+0xd2>
 8017480:	4240      	negs	r0, r0
 8017482:	f1ba 0f00 	cmp.w	sl, #0
 8017486:	d0f8      	beq.n	801747a <_strtol_l.isra.0+0xca>
 8017488:	b10f      	cbz	r7, 801748e <_strtol_l.isra.0+0xde>
 801748a:	f105 39ff 	add.w	r9, r5, #4294967295
 801748e:	f8ca 9000 	str.w	r9, [sl]
 8017492:	e7f2      	b.n	801747a <_strtol_l.isra.0+0xca>
 8017494:	2430      	movs	r4, #48	; 0x30
 8017496:	2e00      	cmp	r6, #0
 8017498:	d1af      	bne.n	80173fa <_strtol_l.isra.0+0x4a>
 801749a:	2608      	movs	r6, #8
 801749c:	e7ad      	b.n	80173fa <_strtol_l.isra.0+0x4a>
 801749e:	2c30      	cmp	r4, #48	; 0x30
 80174a0:	d0a3      	beq.n	80173ea <_strtol_l.isra.0+0x3a>
 80174a2:	260a      	movs	r6, #10
 80174a4:	e7a9      	b.n	80173fa <_strtol_l.isra.0+0x4a>
	...

080174a8 <_strtol_r>:
 80174a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174aa:	4c06      	ldr	r4, [pc, #24]	; (80174c4 <_strtol_r+0x1c>)
 80174ac:	4d06      	ldr	r5, [pc, #24]	; (80174c8 <_strtol_r+0x20>)
 80174ae:	6824      	ldr	r4, [r4, #0]
 80174b0:	6a24      	ldr	r4, [r4, #32]
 80174b2:	2c00      	cmp	r4, #0
 80174b4:	bf08      	it	eq
 80174b6:	462c      	moveq	r4, r5
 80174b8:	9400      	str	r4, [sp, #0]
 80174ba:	f7ff ff79 	bl	80173b0 <_strtol_l.isra.0>
 80174be:	b003      	add	sp, #12
 80174c0:	bd30      	pop	{r4, r5, pc}
 80174c2:	bf00      	nop
 80174c4:	2000000c 	.word	0x2000000c
 80174c8:	20000070 	.word	0x20000070

080174cc <_vsiprintf_r>:
 80174cc:	b500      	push	{lr}
 80174ce:	b09b      	sub	sp, #108	; 0x6c
 80174d0:	9100      	str	r1, [sp, #0]
 80174d2:	9104      	str	r1, [sp, #16]
 80174d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174d8:	9105      	str	r1, [sp, #20]
 80174da:	9102      	str	r1, [sp, #8]
 80174dc:	4905      	ldr	r1, [pc, #20]	; (80174f4 <_vsiprintf_r+0x28>)
 80174de:	9103      	str	r1, [sp, #12]
 80174e0:	4669      	mov	r1, sp
 80174e2:	f001 fed5 	bl	8019290 <_svfiprintf_r>
 80174e6:	9b00      	ldr	r3, [sp, #0]
 80174e8:	2200      	movs	r2, #0
 80174ea:	701a      	strb	r2, [r3, #0]
 80174ec:	b01b      	add	sp, #108	; 0x6c
 80174ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80174f2:	bf00      	nop
 80174f4:	ffff0208 	.word	0xffff0208

080174f8 <vsiprintf>:
 80174f8:	4613      	mov	r3, r2
 80174fa:	460a      	mov	r2, r1
 80174fc:	4601      	mov	r1, r0
 80174fe:	4802      	ldr	r0, [pc, #8]	; (8017508 <vsiprintf+0x10>)
 8017500:	6800      	ldr	r0, [r0, #0]
 8017502:	f7ff bfe3 	b.w	80174cc <_vsiprintf_r>
 8017506:	bf00      	nop
 8017508:	2000000c 	.word	0x2000000c

0801750c <quorem>:
 801750c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017510:	6903      	ldr	r3, [r0, #16]
 8017512:	690c      	ldr	r4, [r1, #16]
 8017514:	42a3      	cmp	r3, r4
 8017516:	4680      	mov	r8, r0
 8017518:	f2c0 8082 	blt.w	8017620 <quorem+0x114>
 801751c:	3c01      	subs	r4, #1
 801751e:	f101 0714 	add.w	r7, r1, #20
 8017522:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017526:	f100 0614 	add.w	r6, r0, #20
 801752a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801752e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017532:	eb06 030c 	add.w	r3, r6, ip
 8017536:	3501      	adds	r5, #1
 8017538:	eb07 090c 	add.w	r9, r7, ip
 801753c:	9301      	str	r3, [sp, #4]
 801753e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017542:	b395      	cbz	r5, 80175aa <quorem+0x9e>
 8017544:	f04f 0a00 	mov.w	sl, #0
 8017548:	4638      	mov	r0, r7
 801754a:	46b6      	mov	lr, r6
 801754c:	46d3      	mov	fp, sl
 801754e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017552:	b293      	uxth	r3, r2
 8017554:	fb05 a303 	mla	r3, r5, r3, sl
 8017558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801755c:	b29b      	uxth	r3, r3
 801755e:	ebab 0303 	sub.w	r3, fp, r3
 8017562:	0c12      	lsrs	r2, r2, #16
 8017564:	f8de b000 	ldr.w	fp, [lr]
 8017568:	fb05 a202 	mla	r2, r5, r2, sl
 801756c:	fa13 f38b 	uxtah	r3, r3, fp
 8017570:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017574:	fa1f fb82 	uxth.w	fp, r2
 8017578:	f8de 2000 	ldr.w	r2, [lr]
 801757c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017584:	b29b      	uxth	r3, r3
 8017586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801758a:	4581      	cmp	r9, r0
 801758c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017590:	f84e 3b04 	str.w	r3, [lr], #4
 8017594:	d2db      	bcs.n	801754e <quorem+0x42>
 8017596:	f856 300c 	ldr.w	r3, [r6, ip]
 801759a:	b933      	cbnz	r3, 80175aa <quorem+0x9e>
 801759c:	9b01      	ldr	r3, [sp, #4]
 801759e:	3b04      	subs	r3, #4
 80175a0:	429e      	cmp	r6, r3
 80175a2:	461a      	mov	r2, r3
 80175a4:	d330      	bcc.n	8017608 <quorem+0xfc>
 80175a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80175aa:	4640      	mov	r0, r8
 80175ac:	f001 fbb4 	bl	8018d18 <__mcmp>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	db25      	blt.n	8017600 <quorem+0xf4>
 80175b4:	3501      	adds	r5, #1
 80175b6:	4630      	mov	r0, r6
 80175b8:	f04f 0c00 	mov.w	ip, #0
 80175bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80175c0:	f8d0 e000 	ldr.w	lr, [r0]
 80175c4:	b293      	uxth	r3, r2
 80175c6:	ebac 0303 	sub.w	r3, ip, r3
 80175ca:	0c12      	lsrs	r2, r2, #16
 80175cc:	fa13 f38e 	uxtah	r3, r3, lr
 80175d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80175d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80175d8:	b29b      	uxth	r3, r3
 80175da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175de:	45b9      	cmp	r9, r7
 80175e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80175e4:	f840 3b04 	str.w	r3, [r0], #4
 80175e8:	d2e8      	bcs.n	80175bc <quorem+0xb0>
 80175ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80175ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80175f2:	b92a      	cbnz	r2, 8017600 <quorem+0xf4>
 80175f4:	3b04      	subs	r3, #4
 80175f6:	429e      	cmp	r6, r3
 80175f8:	461a      	mov	r2, r3
 80175fa:	d30b      	bcc.n	8017614 <quorem+0x108>
 80175fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8017600:	4628      	mov	r0, r5
 8017602:	b003      	add	sp, #12
 8017604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017608:	6812      	ldr	r2, [r2, #0]
 801760a:	3b04      	subs	r3, #4
 801760c:	2a00      	cmp	r2, #0
 801760e:	d1ca      	bne.n	80175a6 <quorem+0x9a>
 8017610:	3c01      	subs	r4, #1
 8017612:	e7c5      	b.n	80175a0 <quorem+0x94>
 8017614:	6812      	ldr	r2, [r2, #0]
 8017616:	3b04      	subs	r3, #4
 8017618:	2a00      	cmp	r2, #0
 801761a:	d1ef      	bne.n	80175fc <quorem+0xf0>
 801761c:	3c01      	subs	r4, #1
 801761e:	e7ea      	b.n	80175f6 <quorem+0xea>
 8017620:	2000      	movs	r0, #0
 8017622:	e7ee      	b.n	8017602 <quorem+0xf6>
 8017624:	0000      	movs	r0, r0
	...

08017628 <_dtoa_r>:
 8017628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801762c:	ec57 6b10 	vmov	r6, r7, d0
 8017630:	b097      	sub	sp, #92	; 0x5c
 8017632:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017634:	9106      	str	r1, [sp, #24]
 8017636:	4604      	mov	r4, r0
 8017638:	920b      	str	r2, [sp, #44]	; 0x2c
 801763a:	9312      	str	r3, [sp, #72]	; 0x48
 801763c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017640:	e9cd 6700 	strd	r6, r7, [sp]
 8017644:	b93d      	cbnz	r5, 8017656 <_dtoa_r+0x2e>
 8017646:	2010      	movs	r0, #16
 8017648:	f001 f8ee 	bl	8018828 <malloc>
 801764c:	6260      	str	r0, [r4, #36]	; 0x24
 801764e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017652:	6005      	str	r5, [r0, #0]
 8017654:	60c5      	str	r5, [r0, #12]
 8017656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017658:	6819      	ldr	r1, [r3, #0]
 801765a:	b151      	cbz	r1, 8017672 <_dtoa_r+0x4a>
 801765c:	685a      	ldr	r2, [r3, #4]
 801765e:	604a      	str	r2, [r1, #4]
 8017660:	2301      	movs	r3, #1
 8017662:	4093      	lsls	r3, r2
 8017664:	608b      	str	r3, [r1, #8]
 8017666:	4620      	mov	r0, r4
 8017668:	f001 f937 	bl	80188da <_Bfree>
 801766c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801766e:	2200      	movs	r2, #0
 8017670:	601a      	str	r2, [r3, #0]
 8017672:	1e3b      	subs	r3, r7, #0
 8017674:	bfbb      	ittet	lt
 8017676:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801767a:	9301      	strlt	r3, [sp, #4]
 801767c:	2300      	movge	r3, #0
 801767e:	2201      	movlt	r2, #1
 8017680:	bfac      	ite	ge
 8017682:	f8c8 3000 	strge.w	r3, [r8]
 8017686:	f8c8 2000 	strlt.w	r2, [r8]
 801768a:	4baf      	ldr	r3, [pc, #700]	; (8017948 <_dtoa_r+0x320>)
 801768c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017690:	ea33 0308 	bics.w	r3, r3, r8
 8017694:	d114      	bne.n	80176c0 <_dtoa_r+0x98>
 8017696:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017698:	f242 730f 	movw	r3, #9999	; 0x270f
 801769c:	6013      	str	r3, [r2, #0]
 801769e:	9b00      	ldr	r3, [sp, #0]
 80176a0:	b923      	cbnz	r3, 80176ac <_dtoa_r+0x84>
 80176a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80176a6:	2800      	cmp	r0, #0
 80176a8:	f000 8542 	beq.w	8018130 <_dtoa_r+0xb08>
 80176ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801795c <_dtoa_r+0x334>
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	f000 8544 	beq.w	8018140 <_dtoa_r+0xb18>
 80176b8:	f10b 0303 	add.w	r3, fp, #3
 80176bc:	f000 bd3e 	b.w	801813c <_dtoa_r+0xb14>
 80176c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80176c4:	2200      	movs	r2, #0
 80176c6:	2300      	movs	r3, #0
 80176c8:	4630      	mov	r0, r6
 80176ca:	4639      	mov	r1, r7
 80176cc:	f7e9 fa14 	bl	8000af8 <__aeabi_dcmpeq>
 80176d0:	4681      	mov	r9, r0
 80176d2:	b168      	cbz	r0, 80176f0 <_dtoa_r+0xc8>
 80176d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176d6:	2301      	movs	r3, #1
 80176d8:	6013      	str	r3, [r2, #0]
 80176da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176dc:	2b00      	cmp	r3, #0
 80176de:	f000 8524 	beq.w	801812a <_dtoa_r+0xb02>
 80176e2:	4b9a      	ldr	r3, [pc, #616]	; (801794c <_dtoa_r+0x324>)
 80176e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80176e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80176ea:	6013      	str	r3, [r2, #0]
 80176ec:	f000 bd28 	b.w	8018140 <_dtoa_r+0xb18>
 80176f0:	aa14      	add	r2, sp, #80	; 0x50
 80176f2:	a915      	add	r1, sp, #84	; 0x54
 80176f4:	ec47 6b10 	vmov	d0, r6, r7
 80176f8:	4620      	mov	r0, r4
 80176fa:	f001 fbfb 	bl	8018ef4 <__d2b>
 80176fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017702:	9004      	str	r0, [sp, #16]
 8017704:	2d00      	cmp	r5, #0
 8017706:	d07c      	beq.n	8017802 <_dtoa_r+0x1da>
 8017708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801770c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017710:	46b2      	mov	sl, r6
 8017712:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801771a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801771e:	2200      	movs	r2, #0
 8017720:	4b8b      	ldr	r3, [pc, #556]	; (8017950 <_dtoa_r+0x328>)
 8017722:	4650      	mov	r0, sl
 8017724:	4659      	mov	r1, fp
 8017726:	f7e8 fdc7 	bl	80002b8 <__aeabi_dsub>
 801772a:	a381      	add	r3, pc, #516	; (adr r3, 8017930 <_dtoa_r+0x308>)
 801772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017730:	f7e8 ff7a 	bl	8000628 <__aeabi_dmul>
 8017734:	a380      	add	r3, pc, #512	; (adr r3, 8017938 <_dtoa_r+0x310>)
 8017736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773a:	f7e8 fdbf 	bl	80002bc <__adddf3>
 801773e:	4606      	mov	r6, r0
 8017740:	4628      	mov	r0, r5
 8017742:	460f      	mov	r7, r1
 8017744:	f7e8 ff06 	bl	8000554 <__aeabi_i2d>
 8017748:	a37d      	add	r3, pc, #500	; (adr r3, 8017940 <_dtoa_r+0x318>)
 801774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774e:	f7e8 ff6b 	bl	8000628 <__aeabi_dmul>
 8017752:	4602      	mov	r2, r0
 8017754:	460b      	mov	r3, r1
 8017756:	4630      	mov	r0, r6
 8017758:	4639      	mov	r1, r7
 801775a:	f7e8 fdaf 	bl	80002bc <__adddf3>
 801775e:	4606      	mov	r6, r0
 8017760:	460f      	mov	r7, r1
 8017762:	f7e9 fa11 	bl	8000b88 <__aeabi_d2iz>
 8017766:	2200      	movs	r2, #0
 8017768:	4682      	mov	sl, r0
 801776a:	2300      	movs	r3, #0
 801776c:	4630      	mov	r0, r6
 801776e:	4639      	mov	r1, r7
 8017770:	f7e9 f9cc 	bl	8000b0c <__aeabi_dcmplt>
 8017774:	b148      	cbz	r0, 801778a <_dtoa_r+0x162>
 8017776:	4650      	mov	r0, sl
 8017778:	f7e8 feec 	bl	8000554 <__aeabi_i2d>
 801777c:	4632      	mov	r2, r6
 801777e:	463b      	mov	r3, r7
 8017780:	f7e9 f9ba 	bl	8000af8 <__aeabi_dcmpeq>
 8017784:	b908      	cbnz	r0, 801778a <_dtoa_r+0x162>
 8017786:	f10a 3aff 	add.w	sl, sl, #4294967295
 801778a:	f1ba 0f16 	cmp.w	sl, #22
 801778e:	d859      	bhi.n	8017844 <_dtoa_r+0x21c>
 8017790:	4970      	ldr	r1, [pc, #448]	; (8017954 <_dtoa_r+0x32c>)
 8017792:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801779a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801779e:	f7e9 f9d3 	bl	8000b48 <__aeabi_dcmpgt>
 80177a2:	2800      	cmp	r0, #0
 80177a4:	d050      	beq.n	8017848 <_dtoa_r+0x220>
 80177a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177aa:	2300      	movs	r3, #0
 80177ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80177ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177b0:	1b5d      	subs	r5, r3, r5
 80177b2:	f1b5 0801 	subs.w	r8, r5, #1
 80177b6:	bf49      	itett	mi
 80177b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80177bc:	2300      	movpl	r3, #0
 80177be:	9305      	strmi	r3, [sp, #20]
 80177c0:	f04f 0800 	movmi.w	r8, #0
 80177c4:	bf58      	it	pl
 80177c6:	9305      	strpl	r3, [sp, #20]
 80177c8:	f1ba 0f00 	cmp.w	sl, #0
 80177cc:	db3e      	blt.n	801784c <_dtoa_r+0x224>
 80177ce:	2300      	movs	r3, #0
 80177d0:	44d0      	add	r8, sl
 80177d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80177d6:	9307      	str	r3, [sp, #28]
 80177d8:	9b06      	ldr	r3, [sp, #24]
 80177da:	2b09      	cmp	r3, #9
 80177dc:	f200 8090 	bhi.w	8017900 <_dtoa_r+0x2d8>
 80177e0:	2b05      	cmp	r3, #5
 80177e2:	bfc4      	itt	gt
 80177e4:	3b04      	subgt	r3, #4
 80177e6:	9306      	strgt	r3, [sp, #24]
 80177e8:	9b06      	ldr	r3, [sp, #24]
 80177ea:	f1a3 0302 	sub.w	r3, r3, #2
 80177ee:	bfcc      	ite	gt
 80177f0:	2500      	movgt	r5, #0
 80177f2:	2501      	movle	r5, #1
 80177f4:	2b03      	cmp	r3, #3
 80177f6:	f200 808f 	bhi.w	8017918 <_dtoa_r+0x2f0>
 80177fa:	e8df f003 	tbb	[pc, r3]
 80177fe:	7f7d      	.short	0x7f7d
 8017800:	7131      	.short	0x7131
 8017802:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017806:	441d      	add	r5, r3
 8017808:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801780c:	2820      	cmp	r0, #32
 801780e:	dd13      	ble.n	8017838 <_dtoa_r+0x210>
 8017810:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017814:	9b00      	ldr	r3, [sp, #0]
 8017816:	fa08 f800 	lsl.w	r8, r8, r0
 801781a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801781e:	fa23 f000 	lsr.w	r0, r3, r0
 8017822:	ea48 0000 	orr.w	r0, r8, r0
 8017826:	f7e8 fe85 	bl	8000534 <__aeabi_ui2d>
 801782a:	2301      	movs	r3, #1
 801782c:	4682      	mov	sl, r0
 801782e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017832:	3d01      	subs	r5, #1
 8017834:	9313      	str	r3, [sp, #76]	; 0x4c
 8017836:	e772      	b.n	801771e <_dtoa_r+0xf6>
 8017838:	9b00      	ldr	r3, [sp, #0]
 801783a:	f1c0 0020 	rsb	r0, r0, #32
 801783e:	fa03 f000 	lsl.w	r0, r3, r0
 8017842:	e7f0      	b.n	8017826 <_dtoa_r+0x1fe>
 8017844:	2301      	movs	r3, #1
 8017846:	e7b1      	b.n	80177ac <_dtoa_r+0x184>
 8017848:	900f      	str	r0, [sp, #60]	; 0x3c
 801784a:	e7b0      	b.n	80177ae <_dtoa_r+0x186>
 801784c:	9b05      	ldr	r3, [sp, #20]
 801784e:	eba3 030a 	sub.w	r3, r3, sl
 8017852:	9305      	str	r3, [sp, #20]
 8017854:	f1ca 0300 	rsb	r3, sl, #0
 8017858:	9307      	str	r3, [sp, #28]
 801785a:	2300      	movs	r3, #0
 801785c:	930e      	str	r3, [sp, #56]	; 0x38
 801785e:	e7bb      	b.n	80177d8 <_dtoa_r+0x1b0>
 8017860:	2301      	movs	r3, #1
 8017862:	930a      	str	r3, [sp, #40]	; 0x28
 8017864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017866:	2b00      	cmp	r3, #0
 8017868:	dd59      	ble.n	801791e <_dtoa_r+0x2f6>
 801786a:	9302      	str	r3, [sp, #8]
 801786c:	4699      	mov	r9, r3
 801786e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017870:	2200      	movs	r2, #0
 8017872:	6072      	str	r2, [r6, #4]
 8017874:	2204      	movs	r2, #4
 8017876:	f102 0014 	add.w	r0, r2, #20
 801787a:	4298      	cmp	r0, r3
 801787c:	6871      	ldr	r1, [r6, #4]
 801787e:	d953      	bls.n	8017928 <_dtoa_r+0x300>
 8017880:	4620      	mov	r0, r4
 8017882:	f000 fff6 	bl	8018872 <_Balloc>
 8017886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017888:	6030      	str	r0, [r6, #0]
 801788a:	f1b9 0f0e 	cmp.w	r9, #14
 801788e:	f8d3 b000 	ldr.w	fp, [r3]
 8017892:	f200 80e6 	bhi.w	8017a62 <_dtoa_r+0x43a>
 8017896:	2d00      	cmp	r5, #0
 8017898:	f000 80e3 	beq.w	8017a62 <_dtoa_r+0x43a>
 801789c:	ed9d 7b00 	vldr	d7, [sp]
 80178a0:	f1ba 0f00 	cmp.w	sl, #0
 80178a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80178a8:	dd74      	ble.n	8017994 <_dtoa_r+0x36c>
 80178aa:	4a2a      	ldr	r2, [pc, #168]	; (8017954 <_dtoa_r+0x32c>)
 80178ac:	f00a 030f 	and.w	r3, sl, #15
 80178b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80178b4:	ed93 7b00 	vldr	d7, [r3]
 80178b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80178bc:	06f0      	lsls	r0, r6, #27
 80178be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80178c2:	d565      	bpl.n	8017990 <_dtoa_r+0x368>
 80178c4:	4b24      	ldr	r3, [pc, #144]	; (8017958 <_dtoa_r+0x330>)
 80178c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80178ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80178ce:	f7e8 ffd5 	bl	800087c <__aeabi_ddiv>
 80178d2:	e9cd 0100 	strd	r0, r1, [sp]
 80178d6:	f006 060f 	and.w	r6, r6, #15
 80178da:	2503      	movs	r5, #3
 80178dc:	4f1e      	ldr	r7, [pc, #120]	; (8017958 <_dtoa_r+0x330>)
 80178de:	e04c      	b.n	801797a <_dtoa_r+0x352>
 80178e0:	2301      	movs	r3, #1
 80178e2:	930a      	str	r3, [sp, #40]	; 0x28
 80178e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178e6:	4453      	add	r3, sl
 80178e8:	f103 0901 	add.w	r9, r3, #1
 80178ec:	9302      	str	r3, [sp, #8]
 80178ee:	464b      	mov	r3, r9
 80178f0:	2b01      	cmp	r3, #1
 80178f2:	bfb8      	it	lt
 80178f4:	2301      	movlt	r3, #1
 80178f6:	e7ba      	b.n	801786e <_dtoa_r+0x246>
 80178f8:	2300      	movs	r3, #0
 80178fa:	e7b2      	b.n	8017862 <_dtoa_r+0x23a>
 80178fc:	2300      	movs	r3, #0
 80178fe:	e7f0      	b.n	80178e2 <_dtoa_r+0x2ba>
 8017900:	2501      	movs	r5, #1
 8017902:	2300      	movs	r3, #0
 8017904:	9306      	str	r3, [sp, #24]
 8017906:	950a      	str	r5, [sp, #40]	; 0x28
 8017908:	f04f 33ff 	mov.w	r3, #4294967295
 801790c:	9302      	str	r3, [sp, #8]
 801790e:	4699      	mov	r9, r3
 8017910:	2200      	movs	r2, #0
 8017912:	2312      	movs	r3, #18
 8017914:	920b      	str	r2, [sp, #44]	; 0x2c
 8017916:	e7aa      	b.n	801786e <_dtoa_r+0x246>
 8017918:	2301      	movs	r3, #1
 801791a:	930a      	str	r3, [sp, #40]	; 0x28
 801791c:	e7f4      	b.n	8017908 <_dtoa_r+0x2e0>
 801791e:	2301      	movs	r3, #1
 8017920:	9302      	str	r3, [sp, #8]
 8017922:	4699      	mov	r9, r3
 8017924:	461a      	mov	r2, r3
 8017926:	e7f5      	b.n	8017914 <_dtoa_r+0x2ec>
 8017928:	3101      	adds	r1, #1
 801792a:	6071      	str	r1, [r6, #4]
 801792c:	0052      	lsls	r2, r2, #1
 801792e:	e7a2      	b.n	8017876 <_dtoa_r+0x24e>
 8017930:	636f4361 	.word	0x636f4361
 8017934:	3fd287a7 	.word	0x3fd287a7
 8017938:	8b60c8b3 	.word	0x8b60c8b3
 801793c:	3fc68a28 	.word	0x3fc68a28
 8017940:	509f79fb 	.word	0x509f79fb
 8017944:	3fd34413 	.word	0x3fd34413
 8017948:	7ff00000 	.word	0x7ff00000
 801794c:	0801a614 	.word	0x0801a614
 8017950:	3ff80000 	.word	0x3ff80000
 8017954:	0801a518 	.word	0x0801a518
 8017958:	0801a4f0 	.word	0x0801a4f0
 801795c:	0801a4e1 	.word	0x0801a4e1
 8017960:	07f1      	lsls	r1, r6, #31
 8017962:	d508      	bpl.n	8017976 <_dtoa_r+0x34e>
 8017964:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017968:	e9d7 2300 	ldrd	r2, r3, [r7]
 801796c:	f7e8 fe5c 	bl	8000628 <__aeabi_dmul>
 8017970:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017974:	3501      	adds	r5, #1
 8017976:	1076      	asrs	r6, r6, #1
 8017978:	3708      	adds	r7, #8
 801797a:	2e00      	cmp	r6, #0
 801797c:	d1f0      	bne.n	8017960 <_dtoa_r+0x338>
 801797e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017986:	f7e8 ff79 	bl	800087c <__aeabi_ddiv>
 801798a:	e9cd 0100 	strd	r0, r1, [sp]
 801798e:	e01a      	b.n	80179c6 <_dtoa_r+0x39e>
 8017990:	2502      	movs	r5, #2
 8017992:	e7a3      	b.n	80178dc <_dtoa_r+0x2b4>
 8017994:	f000 80a0 	beq.w	8017ad8 <_dtoa_r+0x4b0>
 8017998:	f1ca 0600 	rsb	r6, sl, #0
 801799c:	4b9f      	ldr	r3, [pc, #636]	; (8017c1c <_dtoa_r+0x5f4>)
 801799e:	4fa0      	ldr	r7, [pc, #640]	; (8017c20 <_dtoa_r+0x5f8>)
 80179a0:	f006 020f 	and.w	r2, r6, #15
 80179a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80179b0:	f7e8 fe3a 	bl	8000628 <__aeabi_dmul>
 80179b4:	e9cd 0100 	strd	r0, r1, [sp]
 80179b8:	1136      	asrs	r6, r6, #4
 80179ba:	2300      	movs	r3, #0
 80179bc:	2502      	movs	r5, #2
 80179be:	2e00      	cmp	r6, #0
 80179c0:	d17f      	bne.n	8017ac2 <_dtoa_r+0x49a>
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1e1      	bne.n	801798a <_dtoa_r+0x362>
 80179c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	f000 8087 	beq.w	8017adc <_dtoa_r+0x4b4>
 80179ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80179d2:	2200      	movs	r2, #0
 80179d4:	4b93      	ldr	r3, [pc, #588]	; (8017c24 <_dtoa_r+0x5fc>)
 80179d6:	4630      	mov	r0, r6
 80179d8:	4639      	mov	r1, r7
 80179da:	f7e9 f897 	bl	8000b0c <__aeabi_dcmplt>
 80179de:	2800      	cmp	r0, #0
 80179e0:	d07c      	beq.n	8017adc <_dtoa_r+0x4b4>
 80179e2:	f1b9 0f00 	cmp.w	r9, #0
 80179e6:	d079      	beq.n	8017adc <_dtoa_r+0x4b4>
 80179e8:	9b02      	ldr	r3, [sp, #8]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	dd35      	ble.n	8017a5a <_dtoa_r+0x432>
 80179ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80179f2:	9308      	str	r3, [sp, #32]
 80179f4:	4639      	mov	r1, r7
 80179f6:	2200      	movs	r2, #0
 80179f8:	4b8b      	ldr	r3, [pc, #556]	; (8017c28 <_dtoa_r+0x600>)
 80179fa:	4630      	mov	r0, r6
 80179fc:	f7e8 fe14 	bl	8000628 <__aeabi_dmul>
 8017a00:	e9cd 0100 	strd	r0, r1, [sp]
 8017a04:	9f02      	ldr	r7, [sp, #8]
 8017a06:	3501      	adds	r5, #1
 8017a08:	4628      	mov	r0, r5
 8017a0a:	f7e8 fda3 	bl	8000554 <__aeabi_i2d>
 8017a0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a12:	f7e8 fe09 	bl	8000628 <__aeabi_dmul>
 8017a16:	2200      	movs	r2, #0
 8017a18:	4b84      	ldr	r3, [pc, #528]	; (8017c2c <_dtoa_r+0x604>)
 8017a1a:	f7e8 fc4f 	bl	80002bc <__adddf3>
 8017a1e:	4605      	mov	r5, r0
 8017a20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017a24:	2f00      	cmp	r7, #0
 8017a26:	d15d      	bne.n	8017ae4 <_dtoa_r+0x4bc>
 8017a28:	2200      	movs	r2, #0
 8017a2a:	4b81      	ldr	r3, [pc, #516]	; (8017c30 <_dtoa_r+0x608>)
 8017a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a30:	f7e8 fc42 	bl	80002b8 <__aeabi_dsub>
 8017a34:	462a      	mov	r2, r5
 8017a36:	4633      	mov	r3, r6
 8017a38:	e9cd 0100 	strd	r0, r1, [sp]
 8017a3c:	f7e9 f884 	bl	8000b48 <__aeabi_dcmpgt>
 8017a40:	2800      	cmp	r0, #0
 8017a42:	f040 8288 	bne.w	8017f56 <_dtoa_r+0x92e>
 8017a46:	462a      	mov	r2, r5
 8017a48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a50:	f7e9 f85c 	bl	8000b0c <__aeabi_dcmplt>
 8017a54:	2800      	cmp	r0, #0
 8017a56:	f040 827c 	bne.w	8017f52 <_dtoa_r+0x92a>
 8017a5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a5e:	e9cd 2300 	strd	r2, r3, [sp]
 8017a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	f2c0 8150 	blt.w	8017d0a <_dtoa_r+0x6e2>
 8017a6a:	f1ba 0f0e 	cmp.w	sl, #14
 8017a6e:	f300 814c 	bgt.w	8017d0a <_dtoa_r+0x6e2>
 8017a72:	4b6a      	ldr	r3, [pc, #424]	; (8017c1c <_dtoa_r+0x5f4>)
 8017a74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017a78:	ed93 7b00 	vldr	d7, [r3]
 8017a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017a84:	f280 80d8 	bge.w	8017c38 <_dtoa_r+0x610>
 8017a88:	f1b9 0f00 	cmp.w	r9, #0
 8017a8c:	f300 80d4 	bgt.w	8017c38 <_dtoa_r+0x610>
 8017a90:	f040 825e 	bne.w	8017f50 <_dtoa_r+0x928>
 8017a94:	2200      	movs	r2, #0
 8017a96:	4b66      	ldr	r3, [pc, #408]	; (8017c30 <_dtoa_r+0x608>)
 8017a98:	ec51 0b17 	vmov	r0, r1, d7
 8017a9c:	f7e8 fdc4 	bl	8000628 <__aeabi_dmul>
 8017aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017aa4:	f7e9 f846 	bl	8000b34 <__aeabi_dcmpge>
 8017aa8:	464f      	mov	r7, r9
 8017aaa:	464e      	mov	r6, r9
 8017aac:	2800      	cmp	r0, #0
 8017aae:	f040 8234 	bne.w	8017f1a <_dtoa_r+0x8f2>
 8017ab2:	2331      	movs	r3, #49	; 0x31
 8017ab4:	f10b 0501 	add.w	r5, fp, #1
 8017ab8:	f88b 3000 	strb.w	r3, [fp]
 8017abc:	f10a 0a01 	add.w	sl, sl, #1
 8017ac0:	e22f      	b.n	8017f22 <_dtoa_r+0x8fa>
 8017ac2:	07f2      	lsls	r2, r6, #31
 8017ac4:	d505      	bpl.n	8017ad2 <_dtoa_r+0x4aa>
 8017ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017aca:	f7e8 fdad 	bl	8000628 <__aeabi_dmul>
 8017ace:	3501      	adds	r5, #1
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	1076      	asrs	r6, r6, #1
 8017ad4:	3708      	adds	r7, #8
 8017ad6:	e772      	b.n	80179be <_dtoa_r+0x396>
 8017ad8:	2502      	movs	r5, #2
 8017ada:	e774      	b.n	80179c6 <_dtoa_r+0x39e>
 8017adc:	f8cd a020 	str.w	sl, [sp, #32]
 8017ae0:	464f      	mov	r7, r9
 8017ae2:	e791      	b.n	8017a08 <_dtoa_r+0x3e0>
 8017ae4:	4b4d      	ldr	r3, [pc, #308]	; (8017c1c <_dtoa_r+0x5f4>)
 8017ae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017aea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d047      	beq.n	8017b84 <_dtoa_r+0x55c>
 8017af4:	4602      	mov	r2, r0
 8017af6:	460b      	mov	r3, r1
 8017af8:	2000      	movs	r0, #0
 8017afa:	494e      	ldr	r1, [pc, #312]	; (8017c34 <_dtoa_r+0x60c>)
 8017afc:	f7e8 febe 	bl	800087c <__aeabi_ddiv>
 8017b00:	462a      	mov	r2, r5
 8017b02:	4633      	mov	r3, r6
 8017b04:	f7e8 fbd8 	bl	80002b8 <__aeabi_dsub>
 8017b08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b0c:	465d      	mov	r5, fp
 8017b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b12:	f7e9 f839 	bl	8000b88 <__aeabi_d2iz>
 8017b16:	4606      	mov	r6, r0
 8017b18:	f7e8 fd1c 	bl	8000554 <__aeabi_i2d>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	460b      	mov	r3, r1
 8017b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b24:	f7e8 fbc8 	bl	80002b8 <__aeabi_dsub>
 8017b28:	3630      	adds	r6, #48	; 0x30
 8017b2a:	f805 6b01 	strb.w	r6, [r5], #1
 8017b2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b32:	e9cd 0100 	strd	r0, r1, [sp]
 8017b36:	f7e8 ffe9 	bl	8000b0c <__aeabi_dcmplt>
 8017b3a:	2800      	cmp	r0, #0
 8017b3c:	d163      	bne.n	8017c06 <_dtoa_r+0x5de>
 8017b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b42:	2000      	movs	r0, #0
 8017b44:	4937      	ldr	r1, [pc, #220]	; (8017c24 <_dtoa_r+0x5fc>)
 8017b46:	f7e8 fbb7 	bl	80002b8 <__aeabi_dsub>
 8017b4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b4e:	f7e8 ffdd 	bl	8000b0c <__aeabi_dcmplt>
 8017b52:	2800      	cmp	r0, #0
 8017b54:	f040 80b7 	bne.w	8017cc6 <_dtoa_r+0x69e>
 8017b58:	eba5 030b 	sub.w	r3, r5, fp
 8017b5c:	429f      	cmp	r7, r3
 8017b5e:	f77f af7c 	ble.w	8017a5a <_dtoa_r+0x432>
 8017b62:	2200      	movs	r2, #0
 8017b64:	4b30      	ldr	r3, [pc, #192]	; (8017c28 <_dtoa_r+0x600>)
 8017b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b6a:	f7e8 fd5d 	bl	8000628 <__aeabi_dmul>
 8017b6e:	2200      	movs	r2, #0
 8017b70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b74:	4b2c      	ldr	r3, [pc, #176]	; (8017c28 <_dtoa_r+0x600>)
 8017b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b7a:	f7e8 fd55 	bl	8000628 <__aeabi_dmul>
 8017b7e:	e9cd 0100 	strd	r0, r1, [sp]
 8017b82:	e7c4      	b.n	8017b0e <_dtoa_r+0x4e6>
 8017b84:	462a      	mov	r2, r5
 8017b86:	4633      	mov	r3, r6
 8017b88:	f7e8 fd4e 	bl	8000628 <__aeabi_dmul>
 8017b8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b90:	eb0b 0507 	add.w	r5, fp, r7
 8017b94:	465e      	mov	r6, fp
 8017b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b9a:	f7e8 fff5 	bl	8000b88 <__aeabi_d2iz>
 8017b9e:	4607      	mov	r7, r0
 8017ba0:	f7e8 fcd8 	bl	8000554 <__aeabi_i2d>
 8017ba4:	3730      	adds	r7, #48	; 0x30
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	460b      	mov	r3, r1
 8017baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bae:	f7e8 fb83 	bl	80002b8 <__aeabi_dsub>
 8017bb2:	f806 7b01 	strb.w	r7, [r6], #1
 8017bb6:	42ae      	cmp	r6, r5
 8017bb8:	e9cd 0100 	strd	r0, r1, [sp]
 8017bbc:	f04f 0200 	mov.w	r2, #0
 8017bc0:	d126      	bne.n	8017c10 <_dtoa_r+0x5e8>
 8017bc2:	4b1c      	ldr	r3, [pc, #112]	; (8017c34 <_dtoa_r+0x60c>)
 8017bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bc8:	f7e8 fb78 	bl	80002bc <__adddf3>
 8017bcc:	4602      	mov	r2, r0
 8017bce:	460b      	mov	r3, r1
 8017bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bd4:	f7e8 ffb8 	bl	8000b48 <__aeabi_dcmpgt>
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	d174      	bne.n	8017cc6 <_dtoa_r+0x69e>
 8017bdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017be0:	2000      	movs	r0, #0
 8017be2:	4914      	ldr	r1, [pc, #80]	; (8017c34 <_dtoa_r+0x60c>)
 8017be4:	f7e8 fb68 	bl	80002b8 <__aeabi_dsub>
 8017be8:	4602      	mov	r2, r0
 8017bea:	460b      	mov	r3, r1
 8017bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bf0:	f7e8 ff8c 	bl	8000b0c <__aeabi_dcmplt>
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	f43f af30 	beq.w	8017a5a <_dtoa_r+0x432>
 8017bfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017bfe:	2b30      	cmp	r3, #48	; 0x30
 8017c00:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c04:	d002      	beq.n	8017c0c <_dtoa_r+0x5e4>
 8017c06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017c0a:	e04a      	b.n	8017ca2 <_dtoa_r+0x67a>
 8017c0c:	4615      	mov	r5, r2
 8017c0e:	e7f4      	b.n	8017bfa <_dtoa_r+0x5d2>
 8017c10:	4b05      	ldr	r3, [pc, #20]	; (8017c28 <_dtoa_r+0x600>)
 8017c12:	f7e8 fd09 	bl	8000628 <__aeabi_dmul>
 8017c16:	e9cd 0100 	strd	r0, r1, [sp]
 8017c1a:	e7bc      	b.n	8017b96 <_dtoa_r+0x56e>
 8017c1c:	0801a518 	.word	0x0801a518
 8017c20:	0801a4f0 	.word	0x0801a4f0
 8017c24:	3ff00000 	.word	0x3ff00000
 8017c28:	40240000 	.word	0x40240000
 8017c2c:	401c0000 	.word	0x401c0000
 8017c30:	40140000 	.word	0x40140000
 8017c34:	3fe00000 	.word	0x3fe00000
 8017c38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c3c:	465d      	mov	r5, fp
 8017c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c42:	4630      	mov	r0, r6
 8017c44:	4639      	mov	r1, r7
 8017c46:	f7e8 fe19 	bl	800087c <__aeabi_ddiv>
 8017c4a:	f7e8 ff9d 	bl	8000b88 <__aeabi_d2iz>
 8017c4e:	4680      	mov	r8, r0
 8017c50:	f7e8 fc80 	bl	8000554 <__aeabi_i2d>
 8017c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c58:	f7e8 fce6 	bl	8000628 <__aeabi_dmul>
 8017c5c:	4602      	mov	r2, r0
 8017c5e:	460b      	mov	r3, r1
 8017c60:	4630      	mov	r0, r6
 8017c62:	4639      	mov	r1, r7
 8017c64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017c68:	f7e8 fb26 	bl	80002b8 <__aeabi_dsub>
 8017c6c:	f805 6b01 	strb.w	r6, [r5], #1
 8017c70:	eba5 060b 	sub.w	r6, r5, fp
 8017c74:	45b1      	cmp	r9, r6
 8017c76:	4602      	mov	r2, r0
 8017c78:	460b      	mov	r3, r1
 8017c7a:	d139      	bne.n	8017cf0 <_dtoa_r+0x6c8>
 8017c7c:	f7e8 fb1e 	bl	80002bc <__adddf3>
 8017c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c84:	4606      	mov	r6, r0
 8017c86:	460f      	mov	r7, r1
 8017c88:	f7e8 ff5e 	bl	8000b48 <__aeabi_dcmpgt>
 8017c8c:	b9c8      	cbnz	r0, 8017cc2 <_dtoa_r+0x69a>
 8017c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c92:	4630      	mov	r0, r6
 8017c94:	4639      	mov	r1, r7
 8017c96:	f7e8 ff2f 	bl	8000af8 <__aeabi_dcmpeq>
 8017c9a:	b110      	cbz	r0, 8017ca2 <_dtoa_r+0x67a>
 8017c9c:	f018 0f01 	tst.w	r8, #1
 8017ca0:	d10f      	bne.n	8017cc2 <_dtoa_r+0x69a>
 8017ca2:	9904      	ldr	r1, [sp, #16]
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f000 fe18 	bl	80188da <_Bfree>
 8017caa:	2300      	movs	r3, #0
 8017cac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cae:	702b      	strb	r3, [r5, #0]
 8017cb0:	f10a 0301 	add.w	r3, sl, #1
 8017cb4:	6013      	str	r3, [r2, #0]
 8017cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f000 8241 	beq.w	8018140 <_dtoa_r+0xb18>
 8017cbe:	601d      	str	r5, [r3, #0]
 8017cc0:	e23e      	b.n	8018140 <_dtoa_r+0xb18>
 8017cc2:	f8cd a020 	str.w	sl, [sp, #32]
 8017cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017cca:	2a39      	cmp	r2, #57	; 0x39
 8017ccc:	f105 33ff 	add.w	r3, r5, #4294967295
 8017cd0:	d108      	bne.n	8017ce4 <_dtoa_r+0x6bc>
 8017cd2:	459b      	cmp	fp, r3
 8017cd4:	d10a      	bne.n	8017cec <_dtoa_r+0x6c4>
 8017cd6:	9b08      	ldr	r3, [sp, #32]
 8017cd8:	3301      	adds	r3, #1
 8017cda:	9308      	str	r3, [sp, #32]
 8017cdc:	2330      	movs	r3, #48	; 0x30
 8017cde:	f88b 3000 	strb.w	r3, [fp]
 8017ce2:	465b      	mov	r3, fp
 8017ce4:	781a      	ldrb	r2, [r3, #0]
 8017ce6:	3201      	adds	r2, #1
 8017ce8:	701a      	strb	r2, [r3, #0]
 8017cea:	e78c      	b.n	8017c06 <_dtoa_r+0x5de>
 8017cec:	461d      	mov	r5, r3
 8017cee:	e7ea      	b.n	8017cc6 <_dtoa_r+0x69e>
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	4b9b      	ldr	r3, [pc, #620]	; (8017f60 <_dtoa_r+0x938>)
 8017cf4:	f7e8 fc98 	bl	8000628 <__aeabi_dmul>
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	460f      	mov	r7, r1
 8017d00:	f7e8 fefa 	bl	8000af8 <__aeabi_dcmpeq>
 8017d04:	2800      	cmp	r0, #0
 8017d06:	d09a      	beq.n	8017c3e <_dtoa_r+0x616>
 8017d08:	e7cb      	b.n	8017ca2 <_dtoa_r+0x67a>
 8017d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d0c:	2a00      	cmp	r2, #0
 8017d0e:	f000 808b 	beq.w	8017e28 <_dtoa_r+0x800>
 8017d12:	9a06      	ldr	r2, [sp, #24]
 8017d14:	2a01      	cmp	r2, #1
 8017d16:	dc6e      	bgt.n	8017df6 <_dtoa_r+0x7ce>
 8017d18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d1a:	2a00      	cmp	r2, #0
 8017d1c:	d067      	beq.n	8017dee <_dtoa_r+0x7c6>
 8017d1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017d22:	9f07      	ldr	r7, [sp, #28]
 8017d24:	9d05      	ldr	r5, [sp, #20]
 8017d26:	9a05      	ldr	r2, [sp, #20]
 8017d28:	2101      	movs	r1, #1
 8017d2a:	441a      	add	r2, r3
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	9205      	str	r2, [sp, #20]
 8017d30:	4498      	add	r8, r3
 8017d32:	f000 feb0 	bl	8018a96 <__i2b>
 8017d36:	4606      	mov	r6, r0
 8017d38:	2d00      	cmp	r5, #0
 8017d3a:	dd0c      	ble.n	8017d56 <_dtoa_r+0x72e>
 8017d3c:	f1b8 0f00 	cmp.w	r8, #0
 8017d40:	dd09      	ble.n	8017d56 <_dtoa_r+0x72e>
 8017d42:	4545      	cmp	r5, r8
 8017d44:	9a05      	ldr	r2, [sp, #20]
 8017d46:	462b      	mov	r3, r5
 8017d48:	bfa8      	it	ge
 8017d4a:	4643      	movge	r3, r8
 8017d4c:	1ad2      	subs	r2, r2, r3
 8017d4e:	9205      	str	r2, [sp, #20]
 8017d50:	1aed      	subs	r5, r5, r3
 8017d52:	eba8 0803 	sub.w	r8, r8, r3
 8017d56:	9b07      	ldr	r3, [sp, #28]
 8017d58:	b1eb      	cbz	r3, 8017d96 <_dtoa_r+0x76e>
 8017d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d067      	beq.n	8017e30 <_dtoa_r+0x808>
 8017d60:	b18f      	cbz	r7, 8017d86 <_dtoa_r+0x75e>
 8017d62:	4631      	mov	r1, r6
 8017d64:	463a      	mov	r2, r7
 8017d66:	4620      	mov	r0, r4
 8017d68:	f000 ff34 	bl	8018bd4 <__pow5mult>
 8017d6c:	9a04      	ldr	r2, [sp, #16]
 8017d6e:	4601      	mov	r1, r0
 8017d70:	4606      	mov	r6, r0
 8017d72:	4620      	mov	r0, r4
 8017d74:	f000 fe98 	bl	8018aa8 <__multiply>
 8017d78:	9904      	ldr	r1, [sp, #16]
 8017d7a:	9008      	str	r0, [sp, #32]
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	f000 fdac 	bl	80188da <_Bfree>
 8017d82:	9b08      	ldr	r3, [sp, #32]
 8017d84:	9304      	str	r3, [sp, #16]
 8017d86:	9b07      	ldr	r3, [sp, #28]
 8017d88:	1bda      	subs	r2, r3, r7
 8017d8a:	d004      	beq.n	8017d96 <_dtoa_r+0x76e>
 8017d8c:	9904      	ldr	r1, [sp, #16]
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f000 ff20 	bl	8018bd4 <__pow5mult>
 8017d94:	9004      	str	r0, [sp, #16]
 8017d96:	2101      	movs	r1, #1
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f000 fe7c 	bl	8018a96 <__i2b>
 8017d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017da0:	4607      	mov	r7, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	f000 81d0 	beq.w	8018148 <_dtoa_r+0xb20>
 8017da8:	461a      	mov	r2, r3
 8017daa:	4601      	mov	r1, r0
 8017dac:	4620      	mov	r0, r4
 8017dae:	f000 ff11 	bl	8018bd4 <__pow5mult>
 8017db2:	9b06      	ldr	r3, [sp, #24]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	4607      	mov	r7, r0
 8017db8:	dc40      	bgt.n	8017e3c <_dtoa_r+0x814>
 8017dba:	9b00      	ldr	r3, [sp, #0]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d139      	bne.n	8017e34 <_dtoa_r+0x80c>
 8017dc0:	9b01      	ldr	r3, [sp, #4]
 8017dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d136      	bne.n	8017e38 <_dtoa_r+0x810>
 8017dca:	9b01      	ldr	r3, [sp, #4]
 8017dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017dd0:	0d1b      	lsrs	r3, r3, #20
 8017dd2:	051b      	lsls	r3, r3, #20
 8017dd4:	b12b      	cbz	r3, 8017de2 <_dtoa_r+0x7ba>
 8017dd6:	9b05      	ldr	r3, [sp, #20]
 8017dd8:	3301      	adds	r3, #1
 8017dda:	9305      	str	r3, [sp, #20]
 8017ddc:	f108 0801 	add.w	r8, r8, #1
 8017de0:	2301      	movs	r3, #1
 8017de2:	9307      	str	r3, [sp, #28]
 8017de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d12a      	bne.n	8017e40 <_dtoa_r+0x818>
 8017dea:	2001      	movs	r0, #1
 8017dec:	e030      	b.n	8017e50 <_dtoa_r+0x828>
 8017dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017df0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017df4:	e795      	b.n	8017d22 <_dtoa_r+0x6fa>
 8017df6:	9b07      	ldr	r3, [sp, #28]
 8017df8:	f109 37ff 	add.w	r7, r9, #4294967295
 8017dfc:	42bb      	cmp	r3, r7
 8017dfe:	bfbf      	itttt	lt
 8017e00:	9b07      	ldrlt	r3, [sp, #28]
 8017e02:	9707      	strlt	r7, [sp, #28]
 8017e04:	1afa      	sublt	r2, r7, r3
 8017e06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017e08:	bfbb      	ittet	lt
 8017e0a:	189b      	addlt	r3, r3, r2
 8017e0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e0e:	1bdf      	subge	r7, r3, r7
 8017e10:	2700      	movlt	r7, #0
 8017e12:	f1b9 0f00 	cmp.w	r9, #0
 8017e16:	bfb5      	itete	lt
 8017e18:	9b05      	ldrlt	r3, [sp, #20]
 8017e1a:	9d05      	ldrge	r5, [sp, #20]
 8017e1c:	eba3 0509 	sublt.w	r5, r3, r9
 8017e20:	464b      	movge	r3, r9
 8017e22:	bfb8      	it	lt
 8017e24:	2300      	movlt	r3, #0
 8017e26:	e77e      	b.n	8017d26 <_dtoa_r+0x6fe>
 8017e28:	9f07      	ldr	r7, [sp, #28]
 8017e2a:	9d05      	ldr	r5, [sp, #20]
 8017e2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017e2e:	e783      	b.n	8017d38 <_dtoa_r+0x710>
 8017e30:	9a07      	ldr	r2, [sp, #28]
 8017e32:	e7ab      	b.n	8017d8c <_dtoa_r+0x764>
 8017e34:	2300      	movs	r3, #0
 8017e36:	e7d4      	b.n	8017de2 <_dtoa_r+0x7ba>
 8017e38:	9b00      	ldr	r3, [sp, #0]
 8017e3a:	e7d2      	b.n	8017de2 <_dtoa_r+0x7ba>
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	9307      	str	r3, [sp, #28]
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017e46:	6918      	ldr	r0, [r3, #16]
 8017e48:	f000 fdd7 	bl	80189fa <__hi0bits>
 8017e4c:	f1c0 0020 	rsb	r0, r0, #32
 8017e50:	4440      	add	r0, r8
 8017e52:	f010 001f 	ands.w	r0, r0, #31
 8017e56:	d047      	beq.n	8017ee8 <_dtoa_r+0x8c0>
 8017e58:	f1c0 0320 	rsb	r3, r0, #32
 8017e5c:	2b04      	cmp	r3, #4
 8017e5e:	dd3b      	ble.n	8017ed8 <_dtoa_r+0x8b0>
 8017e60:	9b05      	ldr	r3, [sp, #20]
 8017e62:	f1c0 001c 	rsb	r0, r0, #28
 8017e66:	4403      	add	r3, r0
 8017e68:	9305      	str	r3, [sp, #20]
 8017e6a:	4405      	add	r5, r0
 8017e6c:	4480      	add	r8, r0
 8017e6e:	9b05      	ldr	r3, [sp, #20]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	dd05      	ble.n	8017e80 <_dtoa_r+0x858>
 8017e74:	461a      	mov	r2, r3
 8017e76:	9904      	ldr	r1, [sp, #16]
 8017e78:	4620      	mov	r0, r4
 8017e7a:	f000 fef9 	bl	8018c70 <__lshift>
 8017e7e:	9004      	str	r0, [sp, #16]
 8017e80:	f1b8 0f00 	cmp.w	r8, #0
 8017e84:	dd05      	ble.n	8017e92 <_dtoa_r+0x86a>
 8017e86:	4639      	mov	r1, r7
 8017e88:	4642      	mov	r2, r8
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f000 fef0 	bl	8018c70 <__lshift>
 8017e90:	4607      	mov	r7, r0
 8017e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e94:	b353      	cbz	r3, 8017eec <_dtoa_r+0x8c4>
 8017e96:	4639      	mov	r1, r7
 8017e98:	9804      	ldr	r0, [sp, #16]
 8017e9a:	f000 ff3d 	bl	8018d18 <__mcmp>
 8017e9e:	2800      	cmp	r0, #0
 8017ea0:	da24      	bge.n	8017eec <_dtoa_r+0x8c4>
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	220a      	movs	r2, #10
 8017ea6:	9904      	ldr	r1, [sp, #16]
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	f000 fd2d 	bl	8018908 <__multadd>
 8017eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017eb0:	9004      	str	r0, [sp, #16]
 8017eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	f000 814d 	beq.w	8018156 <_dtoa_r+0xb2e>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	4631      	mov	r1, r6
 8017ec0:	220a      	movs	r2, #10
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f000 fd20 	bl	8018908 <__multadd>
 8017ec8:	9b02      	ldr	r3, [sp, #8]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	4606      	mov	r6, r0
 8017ece:	dc4f      	bgt.n	8017f70 <_dtoa_r+0x948>
 8017ed0:	9b06      	ldr	r3, [sp, #24]
 8017ed2:	2b02      	cmp	r3, #2
 8017ed4:	dd4c      	ble.n	8017f70 <_dtoa_r+0x948>
 8017ed6:	e011      	b.n	8017efc <_dtoa_r+0x8d4>
 8017ed8:	d0c9      	beq.n	8017e6e <_dtoa_r+0x846>
 8017eda:	9a05      	ldr	r2, [sp, #20]
 8017edc:	331c      	adds	r3, #28
 8017ede:	441a      	add	r2, r3
 8017ee0:	9205      	str	r2, [sp, #20]
 8017ee2:	441d      	add	r5, r3
 8017ee4:	4498      	add	r8, r3
 8017ee6:	e7c2      	b.n	8017e6e <_dtoa_r+0x846>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	e7f6      	b.n	8017eda <_dtoa_r+0x8b2>
 8017eec:	f1b9 0f00 	cmp.w	r9, #0
 8017ef0:	dc38      	bgt.n	8017f64 <_dtoa_r+0x93c>
 8017ef2:	9b06      	ldr	r3, [sp, #24]
 8017ef4:	2b02      	cmp	r3, #2
 8017ef6:	dd35      	ble.n	8017f64 <_dtoa_r+0x93c>
 8017ef8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017efc:	9b02      	ldr	r3, [sp, #8]
 8017efe:	b963      	cbnz	r3, 8017f1a <_dtoa_r+0x8f2>
 8017f00:	4639      	mov	r1, r7
 8017f02:	2205      	movs	r2, #5
 8017f04:	4620      	mov	r0, r4
 8017f06:	f000 fcff 	bl	8018908 <__multadd>
 8017f0a:	4601      	mov	r1, r0
 8017f0c:	4607      	mov	r7, r0
 8017f0e:	9804      	ldr	r0, [sp, #16]
 8017f10:	f000 ff02 	bl	8018d18 <__mcmp>
 8017f14:	2800      	cmp	r0, #0
 8017f16:	f73f adcc 	bgt.w	8017ab2 <_dtoa_r+0x48a>
 8017f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f1c:	465d      	mov	r5, fp
 8017f1e:	ea6f 0a03 	mvn.w	sl, r3
 8017f22:	f04f 0900 	mov.w	r9, #0
 8017f26:	4639      	mov	r1, r7
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f000 fcd6 	bl	80188da <_Bfree>
 8017f2e:	2e00      	cmp	r6, #0
 8017f30:	f43f aeb7 	beq.w	8017ca2 <_dtoa_r+0x67a>
 8017f34:	f1b9 0f00 	cmp.w	r9, #0
 8017f38:	d005      	beq.n	8017f46 <_dtoa_r+0x91e>
 8017f3a:	45b1      	cmp	r9, r6
 8017f3c:	d003      	beq.n	8017f46 <_dtoa_r+0x91e>
 8017f3e:	4649      	mov	r1, r9
 8017f40:	4620      	mov	r0, r4
 8017f42:	f000 fcca 	bl	80188da <_Bfree>
 8017f46:	4631      	mov	r1, r6
 8017f48:	4620      	mov	r0, r4
 8017f4a:	f000 fcc6 	bl	80188da <_Bfree>
 8017f4e:	e6a8      	b.n	8017ca2 <_dtoa_r+0x67a>
 8017f50:	2700      	movs	r7, #0
 8017f52:	463e      	mov	r6, r7
 8017f54:	e7e1      	b.n	8017f1a <_dtoa_r+0x8f2>
 8017f56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017f5a:	463e      	mov	r6, r7
 8017f5c:	e5a9      	b.n	8017ab2 <_dtoa_r+0x48a>
 8017f5e:	bf00      	nop
 8017f60:	40240000 	.word	0x40240000
 8017f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f66:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	f000 80fa 	beq.w	8018164 <_dtoa_r+0xb3c>
 8017f70:	2d00      	cmp	r5, #0
 8017f72:	dd05      	ble.n	8017f80 <_dtoa_r+0x958>
 8017f74:	4631      	mov	r1, r6
 8017f76:	462a      	mov	r2, r5
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f000 fe79 	bl	8018c70 <__lshift>
 8017f7e:	4606      	mov	r6, r0
 8017f80:	9b07      	ldr	r3, [sp, #28]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d04c      	beq.n	8018020 <_dtoa_r+0x9f8>
 8017f86:	6871      	ldr	r1, [r6, #4]
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f000 fc72 	bl	8018872 <_Balloc>
 8017f8e:	6932      	ldr	r2, [r6, #16]
 8017f90:	3202      	adds	r2, #2
 8017f92:	4605      	mov	r5, r0
 8017f94:	0092      	lsls	r2, r2, #2
 8017f96:	f106 010c 	add.w	r1, r6, #12
 8017f9a:	300c      	adds	r0, #12
 8017f9c:	f000 fc5e 	bl	801885c <memcpy>
 8017fa0:	2201      	movs	r2, #1
 8017fa2:	4629      	mov	r1, r5
 8017fa4:	4620      	mov	r0, r4
 8017fa6:	f000 fe63 	bl	8018c70 <__lshift>
 8017faa:	9b00      	ldr	r3, [sp, #0]
 8017fac:	f8cd b014 	str.w	fp, [sp, #20]
 8017fb0:	f003 0301 	and.w	r3, r3, #1
 8017fb4:	46b1      	mov	r9, r6
 8017fb6:	9307      	str	r3, [sp, #28]
 8017fb8:	4606      	mov	r6, r0
 8017fba:	4639      	mov	r1, r7
 8017fbc:	9804      	ldr	r0, [sp, #16]
 8017fbe:	f7ff faa5 	bl	801750c <quorem>
 8017fc2:	4649      	mov	r1, r9
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017fca:	9804      	ldr	r0, [sp, #16]
 8017fcc:	f000 fea4 	bl	8018d18 <__mcmp>
 8017fd0:	4632      	mov	r2, r6
 8017fd2:	9000      	str	r0, [sp, #0]
 8017fd4:	4639      	mov	r1, r7
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	f000 feb8 	bl	8018d4c <__mdiff>
 8017fdc:	68c3      	ldr	r3, [r0, #12]
 8017fde:	4602      	mov	r2, r0
 8017fe0:	bb03      	cbnz	r3, 8018024 <_dtoa_r+0x9fc>
 8017fe2:	4601      	mov	r1, r0
 8017fe4:	9008      	str	r0, [sp, #32]
 8017fe6:	9804      	ldr	r0, [sp, #16]
 8017fe8:	f000 fe96 	bl	8018d18 <__mcmp>
 8017fec:	9a08      	ldr	r2, [sp, #32]
 8017fee:	4603      	mov	r3, r0
 8017ff0:	4611      	mov	r1, r2
 8017ff2:	4620      	mov	r0, r4
 8017ff4:	9308      	str	r3, [sp, #32]
 8017ff6:	f000 fc70 	bl	80188da <_Bfree>
 8017ffa:	9b08      	ldr	r3, [sp, #32]
 8017ffc:	b9a3      	cbnz	r3, 8018028 <_dtoa_r+0xa00>
 8017ffe:	9a06      	ldr	r2, [sp, #24]
 8018000:	b992      	cbnz	r2, 8018028 <_dtoa_r+0xa00>
 8018002:	9a07      	ldr	r2, [sp, #28]
 8018004:	b982      	cbnz	r2, 8018028 <_dtoa_r+0xa00>
 8018006:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801800a:	d029      	beq.n	8018060 <_dtoa_r+0xa38>
 801800c:	9b00      	ldr	r3, [sp, #0]
 801800e:	2b00      	cmp	r3, #0
 8018010:	dd01      	ble.n	8018016 <_dtoa_r+0x9ee>
 8018012:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018016:	9b05      	ldr	r3, [sp, #20]
 8018018:	1c5d      	adds	r5, r3, #1
 801801a:	f883 8000 	strb.w	r8, [r3]
 801801e:	e782      	b.n	8017f26 <_dtoa_r+0x8fe>
 8018020:	4630      	mov	r0, r6
 8018022:	e7c2      	b.n	8017faa <_dtoa_r+0x982>
 8018024:	2301      	movs	r3, #1
 8018026:	e7e3      	b.n	8017ff0 <_dtoa_r+0x9c8>
 8018028:	9a00      	ldr	r2, [sp, #0]
 801802a:	2a00      	cmp	r2, #0
 801802c:	db04      	blt.n	8018038 <_dtoa_r+0xa10>
 801802e:	d125      	bne.n	801807c <_dtoa_r+0xa54>
 8018030:	9a06      	ldr	r2, [sp, #24]
 8018032:	bb1a      	cbnz	r2, 801807c <_dtoa_r+0xa54>
 8018034:	9a07      	ldr	r2, [sp, #28]
 8018036:	bb0a      	cbnz	r2, 801807c <_dtoa_r+0xa54>
 8018038:	2b00      	cmp	r3, #0
 801803a:	ddec      	ble.n	8018016 <_dtoa_r+0x9ee>
 801803c:	2201      	movs	r2, #1
 801803e:	9904      	ldr	r1, [sp, #16]
 8018040:	4620      	mov	r0, r4
 8018042:	f000 fe15 	bl	8018c70 <__lshift>
 8018046:	4639      	mov	r1, r7
 8018048:	9004      	str	r0, [sp, #16]
 801804a:	f000 fe65 	bl	8018d18 <__mcmp>
 801804e:	2800      	cmp	r0, #0
 8018050:	dc03      	bgt.n	801805a <_dtoa_r+0xa32>
 8018052:	d1e0      	bne.n	8018016 <_dtoa_r+0x9ee>
 8018054:	f018 0f01 	tst.w	r8, #1
 8018058:	d0dd      	beq.n	8018016 <_dtoa_r+0x9ee>
 801805a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801805e:	d1d8      	bne.n	8018012 <_dtoa_r+0x9ea>
 8018060:	9b05      	ldr	r3, [sp, #20]
 8018062:	9a05      	ldr	r2, [sp, #20]
 8018064:	1c5d      	adds	r5, r3, #1
 8018066:	2339      	movs	r3, #57	; 0x39
 8018068:	7013      	strb	r3, [r2, #0]
 801806a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801806e:	2b39      	cmp	r3, #57	; 0x39
 8018070:	f105 32ff 	add.w	r2, r5, #4294967295
 8018074:	d04f      	beq.n	8018116 <_dtoa_r+0xaee>
 8018076:	3301      	adds	r3, #1
 8018078:	7013      	strb	r3, [r2, #0]
 801807a:	e754      	b.n	8017f26 <_dtoa_r+0x8fe>
 801807c:	9a05      	ldr	r2, [sp, #20]
 801807e:	2b00      	cmp	r3, #0
 8018080:	f102 0501 	add.w	r5, r2, #1
 8018084:	dd06      	ble.n	8018094 <_dtoa_r+0xa6c>
 8018086:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801808a:	d0e9      	beq.n	8018060 <_dtoa_r+0xa38>
 801808c:	f108 0801 	add.w	r8, r8, #1
 8018090:	9b05      	ldr	r3, [sp, #20]
 8018092:	e7c2      	b.n	801801a <_dtoa_r+0x9f2>
 8018094:	9a02      	ldr	r2, [sp, #8]
 8018096:	f805 8c01 	strb.w	r8, [r5, #-1]
 801809a:	eba5 030b 	sub.w	r3, r5, fp
 801809e:	4293      	cmp	r3, r2
 80180a0:	d021      	beq.n	80180e6 <_dtoa_r+0xabe>
 80180a2:	2300      	movs	r3, #0
 80180a4:	220a      	movs	r2, #10
 80180a6:	9904      	ldr	r1, [sp, #16]
 80180a8:	4620      	mov	r0, r4
 80180aa:	f000 fc2d 	bl	8018908 <__multadd>
 80180ae:	45b1      	cmp	r9, r6
 80180b0:	9004      	str	r0, [sp, #16]
 80180b2:	f04f 0300 	mov.w	r3, #0
 80180b6:	f04f 020a 	mov.w	r2, #10
 80180ba:	4649      	mov	r1, r9
 80180bc:	4620      	mov	r0, r4
 80180be:	d105      	bne.n	80180cc <_dtoa_r+0xaa4>
 80180c0:	f000 fc22 	bl	8018908 <__multadd>
 80180c4:	4681      	mov	r9, r0
 80180c6:	4606      	mov	r6, r0
 80180c8:	9505      	str	r5, [sp, #20]
 80180ca:	e776      	b.n	8017fba <_dtoa_r+0x992>
 80180cc:	f000 fc1c 	bl	8018908 <__multadd>
 80180d0:	4631      	mov	r1, r6
 80180d2:	4681      	mov	r9, r0
 80180d4:	2300      	movs	r3, #0
 80180d6:	220a      	movs	r2, #10
 80180d8:	4620      	mov	r0, r4
 80180da:	f000 fc15 	bl	8018908 <__multadd>
 80180de:	4606      	mov	r6, r0
 80180e0:	e7f2      	b.n	80180c8 <_dtoa_r+0xaa0>
 80180e2:	f04f 0900 	mov.w	r9, #0
 80180e6:	2201      	movs	r2, #1
 80180e8:	9904      	ldr	r1, [sp, #16]
 80180ea:	4620      	mov	r0, r4
 80180ec:	f000 fdc0 	bl	8018c70 <__lshift>
 80180f0:	4639      	mov	r1, r7
 80180f2:	9004      	str	r0, [sp, #16]
 80180f4:	f000 fe10 	bl	8018d18 <__mcmp>
 80180f8:	2800      	cmp	r0, #0
 80180fa:	dcb6      	bgt.n	801806a <_dtoa_r+0xa42>
 80180fc:	d102      	bne.n	8018104 <_dtoa_r+0xadc>
 80180fe:	f018 0f01 	tst.w	r8, #1
 8018102:	d1b2      	bne.n	801806a <_dtoa_r+0xa42>
 8018104:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018108:	2b30      	cmp	r3, #48	; 0x30
 801810a:	f105 32ff 	add.w	r2, r5, #4294967295
 801810e:	f47f af0a 	bne.w	8017f26 <_dtoa_r+0x8fe>
 8018112:	4615      	mov	r5, r2
 8018114:	e7f6      	b.n	8018104 <_dtoa_r+0xadc>
 8018116:	4593      	cmp	fp, r2
 8018118:	d105      	bne.n	8018126 <_dtoa_r+0xafe>
 801811a:	2331      	movs	r3, #49	; 0x31
 801811c:	f10a 0a01 	add.w	sl, sl, #1
 8018120:	f88b 3000 	strb.w	r3, [fp]
 8018124:	e6ff      	b.n	8017f26 <_dtoa_r+0x8fe>
 8018126:	4615      	mov	r5, r2
 8018128:	e79f      	b.n	801806a <_dtoa_r+0xa42>
 801812a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018190 <_dtoa_r+0xb68>
 801812e:	e007      	b.n	8018140 <_dtoa_r+0xb18>
 8018130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018132:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018194 <_dtoa_r+0xb6c>
 8018136:	b11b      	cbz	r3, 8018140 <_dtoa_r+0xb18>
 8018138:	f10b 0308 	add.w	r3, fp, #8
 801813c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801813e:	6013      	str	r3, [r2, #0]
 8018140:	4658      	mov	r0, fp
 8018142:	b017      	add	sp, #92	; 0x5c
 8018144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	9b06      	ldr	r3, [sp, #24]
 801814a:	2b01      	cmp	r3, #1
 801814c:	f77f ae35 	ble.w	8017dba <_dtoa_r+0x792>
 8018150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018152:	9307      	str	r3, [sp, #28]
 8018154:	e649      	b.n	8017dea <_dtoa_r+0x7c2>
 8018156:	9b02      	ldr	r3, [sp, #8]
 8018158:	2b00      	cmp	r3, #0
 801815a:	dc03      	bgt.n	8018164 <_dtoa_r+0xb3c>
 801815c:	9b06      	ldr	r3, [sp, #24]
 801815e:	2b02      	cmp	r3, #2
 8018160:	f73f aecc 	bgt.w	8017efc <_dtoa_r+0x8d4>
 8018164:	465d      	mov	r5, fp
 8018166:	4639      	mov	r1, r7
 8018168:	9804      	ldr	r0, [sp, #16]
 801816a:	f7ff f9cf 	bl	801750c <quorem>
 801816e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018172:	f805 8b01 	strb.w	r8, [r5], #1
 8018176:	9a02      	ldr	r2, [sp, #8]
 8018178:	eba5 030b 	sub.w	r3, r5, fp
 801817c:	429a      	cmp	r2, r3
 801817e:	ddb0      	ble.n	80180e2 <_dtoa_r+0xaba>
 8018180:	2300      	movs	r3, #0
 8018182:	220a      	movs	r2, #10
 8018184:	9904      	ldr	r1, [sp, #16]
 8018186:	4620      	mov	r0, r4
 8018188:	f000 fbbe 	bl	8018908 <__multadd>
 801818c:	9004      	str	r0, [sp, #16]
 801818e:	e7ea      	b.n	8018166 <_dtoa_r+0xb3e>
 8018190:	0801a613 	.word	0x0801a613
 8018194:	0801a4d8 	.word	0x0801a4d8

08018198 <rshift>:
 8018198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801819a:	6906      	ldr	r6, [r0, #16]
 801819c:	114b      	asrs	r3, r1, #5
 801819e:	429e      	cmp	r6, r3
 80181a0:	f100 0414 	add.w	r4, r0, #20
 80181a4:	dd30      	ble.n	8018208 <rshift+0x70>
 80181a6:	f011 011f 	ands.w	r1, r1, #31
 80181aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80181ae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80181b2:	d108      	bne.n	80181c6 <rshift+0x2e>
 80181b4:	4621      	mov	r1, r4
 80181b6:	42b2      	cmp	r2, r6
 80181b8:	460b      	mov	r3, r1
 80181ba:	d211      	bcs.n	80181e0 <rshift+0x48>
 80181bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80181c0:	f841 3b04 	str.w	r3, [r1], #4
 80181c4:	e7f7      	b.n	80181b6 <rshift+0x1e>
 80181c6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80181ca:	f1c1 0c20 	rsb	ip, r1, #32
 80181ce:	40cd      	lsrs	r5, r1
 80181d0:	3204      	adds	r2, #4
 80181d2:	4623      	mov	r3, r4
 80181d4:	42b2      	cmp	r2, r6
 80181d6:	4617      	mov	r7, r2
 80181d8:	d30c      	bcc.n	80181f4 <rshift+0x5c>
 80181da:	601d      	str	r5, [r3, #0]
 80181dc:	b105      	cbz	r5, 80181e0 <rshift+0x48>
 80181de:	3304      	adds	r3, #4
 80181e0:	1b1a      	subs	r2, r3, r4
 80181e2:	42a3      	cmp	r3, r4
 80181e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80181e8:	bf08      	it	eq
 80181ea:	2300      	moveq	r3, #0
 80181ec:	6102      	str	r2, [r0, #16]
 80181ee:	bf08      	it	eq
 80181f0:	6143      	streq	r3, [r0, #20]
 80181f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181f4:	683f      	ldr	r7, [r7, #0]
 80181f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80181fa:	433d      	orrs	r5, r7
 80181fc:	f843 5b04 	str.w	r5, [r3], #4
 8018200:	f852 5b04 	ldr.w	r5, [r2], #4
 8018204:	40cd      	lsrs	r5, r1
 8018206:	e7e5      	b.n	80181d4 <rshift+0x3c>
 8018208:	4623      	mov	r3, r4
 801820a:	e7e9      	b.n	80181e0 <rshift+0x48>

0801820c <__hexdig_fun>:
 801820c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018210:	2b09      	cmp	r3, #9
 8018212:	d802      	bhi.n	801821a <__hexdig_fun+0xe>
 8018214:	3820      	subs	r0, #32
 8018216:	b2c0      	uxtb	r0, r0
 8018218:	4770      	bx	lr
 801821a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801821e:	2b05      	cmp	r3, #5
 8018220:	d801      	bhi.n	8018226 <__hexdig_fun+0x1a>
 8018222:	3847      	subs	r0, #71	; 0x47
 8018224:	e7f7      	b.n	8018216 <__hexdig_fun+0xa>
 8018226:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801822a:	2b05      	cmp	r3, #5
 801822c:	d801      	bhi.n	8018232 <__hexdig_fun+0x26>
 801822e:	3827      	subs	r0, #39	; 0x27
 8018230:	e7f1      	b.n	8018216 <__hexdig_fun+0xa>
 8018232:	2000      	movs	r0, #0
 8018234:	4770      	bx	lr

08018236 <__gethex>:
 8018236:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801823a:	b08b      	sub	sp, #44	; 0x2c
 801823c:	468a      	mov	sl, r1
 801823e:	9002      	str	r0, [sp, #8]
 8018240:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018242:	9306      	str	r3, [sp, #24]
 8018244:	4690      	mov	r8, r2
 8018246:	f000 fadf 	bl	8018808 <__localeconv_l>
 801824a:	6803      	ldr	r3, [r0, #0]
 801824c:	9303      	str	r3, [sp, #12]
 801824e:	4618      	mov	r0, r3
 8018250:	f7e7 ffd6 	bl	8000200 <strlen>
 8018254:	9b03      	ldr	r3, [sp, #12]
 8018256:	9001      	str	r0, [sp, #4]
 8018258:	4403      	add	r3, r0
 801825a:	f04f 0b00 	mov.w	fp, #0
 801825e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018262:	9307      	str	r3, [sp, #28]
 8018264:	f8da 3000 	ldr.w	r3, [sl]
 8018268:	3302      	adds	r3, #2
 801826a:	461f      	mov	r7, r3
 801826c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018270:	2830      	cmp	r0, #48	; 0x30
 8018272:	d06c      	beq.n	801834e <__gethex+0x118>
 8018274:	f7ff ffca 	bl	801820c <__hexdig_fun>
 8018278:	4604      	mov	r4, r0
 801827a:	2800      	cmp	r0, #0
 801827c:	d16a      	bne.n	8018354 <__gethex+0x11e>
 801827e:	9a01      	ldr	r2, [sp, #4]
 8018280:	9903      	ldr	r1, [sp, #12]
 8018282:	4638      	mov	r0, r7
 8018284:	f001 fc40 	bl	8019b08 <strncmp>
 8018288:	2800      	cmp	r0, #0
 801828a:	d166      	bne.n	801835a <__gethex+0x124>
 801828c:	9b01      	ldr	r3, [sp, #4]
 801828e:	5cf8      	ldrb	r0, [r7, r3]
 8018290:	18fe      	adds	r6, r7, r3
 8018292:	f7ff ffbb 	bl	801820c <__hexdig_fun>
 8018296:	2800      	cmp	r0, #0
 8018298:	d062      	beq.n	8018360 <__gethex+0x12a>
 801829a:	4633      	mov	r3, r6
 801829c:	7818      	ldrb	r0, [r3, #0]
 801829e:	2830      	cmp	r0, #48	; 0x30
 80182a0:	461f      	mov	r7, r3
 80182a2:	f103 0301 	add.w	r3, r3, #1
 80182a6:	d0f9      	beq.n	801829c <__gethex+0x66>
 80182a8:	f7ff ffb0 	bl	801820c <__hexdig_fun>
 80182ac:	fab0 f580 	clz	r5, r0
 80182b0:	096d      	lsrs	r5, r5, #5
 80182b2:	4634      	mov	r4, r6
 80182b4:	f04f 0b01 	mov.w	fp, #1
 80182b8:	463a      	mov	r2, r7
 80182ba:	4616      	mov	r6, r2
 80182bc:	3201      	adds	r2, #1
 80182be:	7830      	ldrb	r0, [r6, #0]
 80182c0:	f7ff ffa4 	bl	801820c <__hexdig_fun>
 80182c4:	2800      	cmp	r0, #0
 80182c6:	d1f8      	bne.n	80182ba <__gethex+0x84>
 80182c8:	9a01      	ldr	r2, [sp, #4]
 80182ca:	9903      	ldr	r1, [sp, #12]
 80182cc:	4630      	mov	r0, r6
 80182ce:	f001 fc1b 	bl	8019b08 <strncmp>
 80182d2:	b950      	cbnz	r0, 80182ea <__gethex+0xb4>
 80182d4:	b954      	cbnz	r4, 80182ec <__gethex+0xb6>
 80182d6:	9b01      	ldr	r3, [sp, #4]
 80182d8:	18f4      	adds	r4, r6, r3
 80182da:	4622      	mov	r2, r4
 80182dc:	4616      	mov	r6, r2
 80182de:	3201      	adds	r2, #1
 80182e0:	7830      	ldrb	r0, [r6, #0]
 80182e2:	f7ff ff93 	bl	801820c <__hexdig_fun>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d1f8      	bne.n	80182dc <__gethex+0xa6>
 80182ea:	b10c      	cbz	r4, 80182f0 <__gethex+0xba>
 80182ec:	1ba4      	subs	r4, r4, r6
 80182ee:	00a4      	lsls	r4, r4, #2
 80182f0:	7833      	ldrb	r3, [r6, #0]
 80182f2:	2b50      	cmp	r3, #80	; 0x50
 80182f4:	d001      	beq.n	80182fa <__gethex+0xc4>
 80182f6:	2b70      	cmp	r3, #112	; 0x70
 80182f8:	d140      	bne.n	801837c <__gethex+0x146>
 80182fa:	7873      	ldrb	r3, [r6, #1]
 80182fc:	2b2b      	cmp	r3, #43	; 0x2b
 80182fe:	d031      	beq.n	8018364 <__gethex+0x12e>
 8018300:	2b2d      	cmp	r3, #45	; 0x2d
 8018302:	d033      	beq.n	801836c <__gethex+0x136>
 8018304:	1c71      	adds	r1, r6, #1
 8018306:	f04f 0900 	mov.w	r9, #0
 801830a:	7808      	ldrb	r0, [r1, #0]
 801830c:	f7ff ff7e 	bl	801820c <__hexdig_fun>
 8018310:	1e43      	subs	r3, r0, #1
 8018312:	b2db      	uxtb	r3, r3
 8018314:	2b18      	cmp	r3, #24
 8018316:	d831      	bhi.n	801837c <__gethex+0x146>
 8018318:	f1a0 0210 	sub.w	r2, r0, #16
 801831c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018320:	f7ff ff74 	bl	801820c <__hexdig_fun>
 8018324:	1e43      	subs	r3, r0, #1
 8018326:	b2db      	uxtb	r3, r3
 8018328:	2b18      	cmp	r3, #24
 801832a:	d922      	bls.n	8018372 <__gethex+0x13c>
 801832c:	f1b9 0f00 	cmp.w	r9, #0
 8018330:	d000      	beq.n	8018334 <__gethex+0xfe>
 8018332:	4252      	negs	r2, r2
 8018334:	4414      	add	r4, r2
 8018336:	f8ca 1000 	str.w	r1, [sl]
 801833a:	b30d      	cbz	r5, 8018380 <__gethex+0x14a>
 801833c:	f1bb 0f00 	cmp.w	fp, #0
 8018340:	bf0c      	ite	eq
 8018342:	2706      	moveq	r7, #6
 8018344:	2700      	movne	r7, #0
 8018346:	4638      	mov	r0, r7
 8018348:	b00b      	add	sp, #44	; 0x2c
 801834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801834e:	f10b 0b01 	add.w	fp, fp, #1
 8018352:	e78a      	b.n	801826a <__gethex+0x34>
 8018354:	2500      	movs	r5, #0
 8018356:	462c      	mov	r4, r5
 8018358:	e7ae      	b.n	80182b8 <__gethex+0x82>
 801835a:	463e      	mov	r6, r7
 801835c:	2501      	movs	r5, #1
 801835e:	e7c7      	b.n	80182f0 <__gethex+0xba>
 8018360:	4604      	mov	r4, r0
 8018362:	e7fb      	b.n	801835c <__gethex+0x126>
 8018364:	f04f 0900 	mov.w	r9, #0
 8018368:	1cb1      	adds	r1, r6, #2
 801836a:	e7ce      	b.n	801830a <__gethex+0xd4>
 801836c:	f04f 0901 	mov.w	r9, #1
 8018370:	e7fa      	b.n	8018368 <__gethex+0x132>
 8018372:	230a      	movs	r3, #10
 8018374:	fb03 0202 	mla	r2, r3, r2, r0
 8018378:	3a10      	subs	r2, #16
 801837a:	e7cf      	b.n	801831c <__gethex+0xe6>
 801837c:	4631      	mov	r1, r6
 801837e:	e7da      	b.n	8018336 <__gethex+0x100>
 8018380:	1bf3      	subs	r3, r6, r7
 8018382:	3b01      	subs	r3, #1
 8018384:	4629      	mov	r1, r5
 8018386:	2b07      	cmp	r3, #7
 8018388:	dc49      	bgt.n	801841e <__gethex+0x1e8>
 801838a:	9802      	ldr	r0, [sp, #8]
 801838c:	f000 fa71 	bl	8018872 <_Balloc>
 8018390:	9b01      	ldr	r3, [sp, #4]
 8018392:	f100 0914 	add.w	r9, r0, #20
 8018396:	f04f 0b00 	mov.w	fp, #0
 801839a:	f1c3 0301 	rsb	r3, r3, #1
 801839e:	4605      	mov	r5, r0
 80183a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80183a4:	46da      	mov	sl, fp
 80183a6:	9308      	str	r3, [sp, #32]
 80183a8:	42b7      	cmp	r7, r6
 80183aa:	d33b      	bcc.n	8018424 <__gethex+0x1ee>
 80183ac:	9804      	ldr	r0, [sp, #16]
 80183ae:	f840 ab04 	str.w	sl, [r0], #4
 80183b2:	eba0 0009 	sub.w	r0, r0, r9
 80183b6:	1080      	asrs	r0, r0, #2
 80183b8:	6128      	str	r0, [r5, #16]
 80183ba:	0147      	lsls	r7, r0, #5
 80183bc:	4650      	mov	r0, sl
 80183be:	f000 fb1c 	bl	80189fa <__hi0bits>
 80183c2:	f8d8 6000 	ldr.w	r6, [r8]
 80183c6:	1a3f      	subs	r7, r7, r0
 80183c8:	42b7      	cmp	r7, r6
 80183ca:	dd64      	ble.n	8018496 <__gethex+0x260>
 80183cc:	1bbf      	subs	r7, r7, r6
 80183ce:	4639      	mov	r1, r7
 80183d0:	4628      	mov	r0, r5
 80183d2:	f000 fe2b 	bl	801902c <__any_on>
 80183d6:	4682      	mov	sl, r0
 80183d8:	b178      	cbz	r0, 80183fa <__gethex+0x1c4>
 80183da:	1e7b      	subs	r3, r7, #1
 80183dc:	1159      	asrs	r1, r3, #5
 80183de:	f003 021f 	and.w	r2, r3, #31
 80183e2:	f04f 0a01 	mov.w	sl, #1
 80183e6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80183ea:	fa0a f202 	lsl.w	r2, sl, r2
 80183ee:	420a      	tst	r2, r1
 80183f0:	d003      	beq.n	80183fa <__gethex+0x1c4>
 80183f2:	4553      	cmp	r3, sl
 80183f4:	dc46      	bgt.n	8018484 <__gethex+0x24e>
 80183f6:	f04f 0a02 	mov.w	sl, #2
 80183fa:	4639      	mov	r1, r7
 80183fc:	4628      	mov	r0, r5
 80183fe:	f7ff fecb 	bl	8018198 <rshift>
 8018402:	443c      	add	r4, r7
 8018404:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018408:	42a3      	cmp	r3, r4
 801840a:	da52      	bge.n	80184b2 <__gethex+0x27c>
 801840c:	4629      	mov	r1, r5
 801840e:	9802      	ldr	r0, [sp, #8]
 8018410:	f000 fa63 	bl	80188da <_Bfree>
 8018414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018416:	2300      	movs	r3, #0
 8018418:	6013      	str	r3, [r2, #0]
 801841a:	27a3      	movs	r7, #163	; 0xa3
 801841c:	e793      	b.n	8018346 <__gethex+0x110>
 801841e:	3101      	adds	r1, #1
 8018420:	105b      	asrs	r3, r3, #1
 8018422:	e7b0      	b.n	8018386 <__gethex+0x150>
 8018424:	1e73      	subs	r3, r6, #1
 8018426:	9305      	str	r3, [sp, #20]
 8018428:	9a07      	ldr	r2, [sp, #28]
 801842a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801842e:	4293      	cmp	r3, r2
 8018430:	d018      	beq.n	8018464 <__gethex+0x22e>
 8018432:	f1bb 0f20 	cmp.w	fp, #32
 8018436:	d107      	bne.n	8018448 <__gethex+0x212>
 8018438:	9b04      	ldr	r3, [sp, #16]
 801843a:	f8c3 a000 	str.w	sl, [r3]
 801843e:	3304      	adds	r3, #4
 8018440:	f04f 0a00 	mov.w	sl, #0
 8018444:	9304      	str	r3, [sp, #16]
 8018446:	46d3      	mov	fp, sl
 8018448:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801844c:	f7ff fede 	bl	801820c <__hexdig_fun>
 8018450:	f000 000f 	and.w	r0, r0, #15
 8018454:	fa00 f00b 	lsl.w	r0, r0, fp
 8018458:	ea4a 0a00 	orr.w	sl, sl, r0
 801845c:	f10b 0b04 	add.w	fp, fp, #4
 8018460:	9b05      	ldr	r3, [sp, #20]
 8018462:	e00d      	b.n	8018480 <__gethex+0x24a>
 8018464:	9b05      	ldr	r3, [sp, #20]
 8018466:	9a08      	ldr	r2, [sp, #32]
 8018468:	4413      	add	r3, r2
 801846a:	42bb      	cmp	r3, r7
 801846c:	d3e1      	bcc.n	8018432 <__gethex+0x1fc>
 801846e:	4618      	mov	r0, r3
 8018470:	9a01      	ldr	r2, [sp, #4]
 8018472:	9903      	ldr	r1, [sp, #12]
 8018474:	9309      	str	r3, [sp, #36]	; 0x24
 8018476:	f001 fb47 	bl	8019b08 <strncmp>
 801847a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801847c:	2800      	cmp	r0, #0
 801847e:	d1d8      	bne.n	8018432 <__gethex+0x1fc>
 8018480:	461e      	mov	r6, r3
 8018482:	e791      	b.n	80183a8 <__gethex+0x172>
 8018484:	1eb9      	subs	r1, r7, #2
 8018486:	4628      	mov	r0, r5
 8018488:	f000 fdd0 	bl	801902c <__any_on>
 801848c:	2800      	cmp	r0, #0
 801848e:	d0b2      	beq.n	80183f6 <__gethex+0x1c0>
 8018490:	f04f 0a03 	mov.w	sl, #3
 8018494:	e7b1      	b.n	80183fa <__gethex+0x1c4>
 8018496:	da09      	bge.n	80184ac <__gethex+0x276>
 8018498:	1bf7      	subs	r7, r6, r7
 801849a:	4629      	mov	r1, r5
 801849c:	463a      	mov	r2, r7
 801849e:	9802      	ldr	r0, [sp, #8]
 80184a0:	f000 fbe6 	bl	8018c70 <__lshift>
 80184a4:	1be4      	subs	r4, r4, r7
 80184a6:	4605      	mov	r5, r0
 80184a8:	f100 0914 	add.w	r9, r0, #20
 80184ac:	f04f 0a00 	mov.w	sl, #0
 80184b0:	e7a8      	b.n	8018404 <__gethex+0x1ce>
 80184b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80184b6:	42a0      	cmp	r0, r4
 80184b8:	dd6a      	ble.n	8018590 <__gethex+0x35a>
 80184ba:	1b04      	subs	r4, r0, r4
 80184bc:	42a6      	cmp	r6, r4
 80184be:	dc2e      	bgt.n	801851e <__gethex+0x2e8>
 80184c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184c4:	2b02      	cmp	r3, #2
 80184c6:	d022      	beq.n	801850e <__gethex+0x2d8>
 80184c8:	2b03      	cmp	r3, #3
 80184ca:	d024      	beq.n	8018516 <__gethex+0x2e0>
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	d115      	bne.n	80184fc <__gethex+0x2c6>
 80184d0:	42a6      	cmp	r6, r4
 80184d2:	d113      	bne.n	80184fc <__gethex+0x2c6>
 80184d4:	2e01      	cmp	r6, #1
 80184d6:	dc0b      	bgt.n	80184f0 <__gethex+0x2ba>
 80184d8:	9a06      	ldr	r2, [sp, #24]
 80184da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80184de:	6013      	str	r3, [r2, #0]
 80184e0:	2301      	movs	r3, #1
 80184e2:	612b      	str	r3, [r5, #16]
 80184e4:	f8c9 3000 	str.w	r3, [r9]
 80184e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184ea:	2762      	movs	r7, #98	; 0x62
 80184ec:	601d      	str	r5, [r3, #0]
 80184ee:	e72a      	b.n	8018346 <__gethex+0x110>
 80184f0:	1e71      	subs	r1, r6, #1
 80184f2:	4628      	mov	r0, r5
 80184f4:	f000 fd9a 	bl	801902c <__any_on>
 80184f8:	2800      	cmp	r0, #0
 80184fa:	d1ed      	bne.n	80184d8 <__gethex+0x2a2>
 80184fc:	4629      	mov	r1, r5
 80184fe:	9802      	ldr	r0, [sp, #8]
 8018500:	f000 f9eb 	bl	80188da <_Bfree>
 8018504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018506:	2300      	movs	r3, #0
 8018508:	6013      	str	r3, [r2, #0]
 801850a:	2750      	movs	r7, #80	; 0x50
 801850c:	e71b      	b.n	8018346 <__gethex+0x110>
 801850e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018510:	2b00      	cmp	r3, #0
 8018512:	d0e1      	beq.n	80184d8 <__gethex+0x2a2>
 8018514:	e7f2      	b.n	80184fc <__gethex+0x2c6>
 8018516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018518:	2b00      	cmp	r3, #0
 801851a:	d1dd      	bne.n	80184d8 <__gethex+0x2a2>
 801851c:	e7ee      	b.n	80184fc <__gethex+0x2c6>
 801851e:	1e67      	subs	r7, r4, #1
 8018520:	f1ba 0f00 	cmp.w	sl, #0
 8018524:	d131      	bne.n	801858a <__gethex+0x354>
 8018526:	b127      	cbz	r7, 8018532 <__gethex+0x2fc>
 8018528:	4639      	mov	r1, r7
 801852a:	4628      	mov	r0, r5
 801852c:	f000 fd7e 	bl	801902c <__any_on>
 8018530:	4682      	mov	sl, r0
 8018532:	117a      	asrs	r2, r7, #5
 8018534:	2301      	movs	r3, #1
 8018536:	f007 071f 	and.w	r7, r7, #31
 801853a:	fa03 f707 	lsl.w	r7, r3, r7
 801853e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018542:	4621      	mov	r1, r4
 8018544:	421f      	tst	r7, r3
 8018546:	4628      	mov	r0, r5
 8018548:	bf18      	it	ne
 801854a:	f04a 0a02 	orrne.w	sl, sl, #2
 801854e:	1b36      	subs	r6, r6, r4
 8018550:	f7ff fe22 	bl	8018198 <rshift>
 8018554:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018558:	2702      	movs	r7, #2
 801855a:	f1ba 0f00 	cmp.w	sl, #0
 801855e:	d048      	beq.n	80185f2 <__gethex+0x3bc>
 8018560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018564:	2b02      	cmp	r3, #2
 8018566:	d015      	beq.n	8018594 <__gethex+0x35e>
 8018568:	2b03      	cmp	r3, #3
 801856a:	d017      	beq.n	801859c <__gethex+0x366>
 801856c:	2b01      	cmp	r3, #1
 801856e:	d109      	bne.n	8018584 <__gethex+0x34e>
 8018570:	f01a 0f02 	tst.w	sl, #2
 8018574:	d006      	beq.n	8018584 <__gethex+0x34e>
 8018576:	f8d9 3000 	ldr.w	r3, [r9]
 801857a:	ea4a 0a03 	orr.w	sl, sl, r3
 801857e:	f01a 0f01 	tst.w	sl, #1
 8018582:	d10e      	bne.n	80185a2 <__gethex+0x36c>
 8018584:	f047 0710 	orr.w	r7, r7, #16
 8018588:	e033      	b.n	80185f2 <__gethex+0x3bc>
 801858a:	f04f 0a01 	mov.w	sl, #1
 801858e:	e7d0      	b.n	8018532 <__gethex+0x2fc>
 8018590:	2701      	movs	r7, #1
 8018592:	e7e2      	b.n	801855a <__gethex+0x324>
 8018594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018596:	f1c3 0301 	rsb	r3, r3, #1
 801859a:	9315      	str	r3, [sp, #84]	; 0x54
 801859c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d0f0      	beq.n	8018584 <__gethex+0x34e>
 80185a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80185a6:	f105 0314 	add.w	r3, r5, #20
 80185aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80185ae:	eb03 010a 	add.w	r1, r3, sl
 80185b2:	f04f 0c00 	mov.w	ip, #0
 80185b6:	4618      	mov	r0, r3
 80185b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80185bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80185c0:	d01c      	beq.n	80185fc <__gethex+0x3c6>
 80185c2:	3201      	adds	r2, #1
 80185c4:	6002      	str	r2, [r0, #0]
 80185c6:	2f02      	cmp	r7, #2
 80185c8:	f105 0314 	add.w	r3, r5, #20
 80185cc:	d138      	bne.n	8018640 <__gethex+0x40a>
 80185ce:	f8d8 2000 	ldr.w	r2, [r8]
 80185d2:	3a01      	subs	r2, #1
 80185d4:	42b2      	cmp	r2, r6
 80185d6:	d10a      	bne.n	80185ee <__gethex+0x3b8>
 80185d8:	1171      	asrs	r1, r6, #5
 80185da:	2201      	movs	r2, #1
 80185dc:	f006 061f 	and.w	r6, r6, #31
 80185e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80185e4:	fa02 f606 	lsl.w	r6, r2, r6
 80185e8:	421e      	tst	r6, r3
 80185ea:	bf18      	it	ne
 80185ec:	4617      	movne	r7, r2
 80185ee:	f047 0720 	orr.w	r7, r7, #32
 80185f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80185f4:	601d      	str	r5, [r3, #0]
 80185f6:	9b06      	ldr	r3, [sp, #24]
 80185f8:	601c      	str	r4, [r3, #0]
 80185fa:	e6a4      	b.n	8018346 <__gethex+0x110>
 80185fc:	4299      	cmp	r1, r3
 80185fe:	f843 cc04 	str.w	ip, [r3, #-4]
 8018602:	d8d8      	bhi.n	80185b6 <__gethex+0x380>
 8018604:	68ab      	ldr	r3, [r5, #8]
 8018606:	4599      	cmp	r9, r3
 8018608:	db12      	blt.n	8018630 <__gethex+0x3fa>
 801860a:	6869      	ldr	r1, [r5, #4]
 801860c:	9802      	ldr	r0, [sp, #8]
 801860e:	3101      	adds	r1, #1
 8018610:	f000 f92f 	bl	8018872 <_Balloc>
 8018614:	692a      	ldr	r2, [r5, #16]
 8018616:	3202      	adds	r2, #2
 8018618:	f105 010c 	add.w	r1, r5, #12
 801861c:	4683      	mov	fp, r0
 801861e:	0092      	lsls	r2, r2, #2
 8018620:	300c      	adds	r0, #12
 8018622:	f000 f91b 	bl	801885c <memcpy>
 8018626:	4629      	mov	r1, r5
 8018628:	9802      	ldr	r0, [sp, #8]
 801862a:	f000 f956 	bl	80188da <_Bfree>
 801862e:	465d      	mov	r5, fp
 8018630:	692b      	ldr	r3, [r5, #16]
 8018632:	1c5a      	adds	r2, r3, #1
 8018634:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018638:	612a      	str	r2, [r5, #16]
 801863a:	2201      	movs	r2, #1
 801863c:	615a      	str	r2, [r3, #20]
 801863e:	e7c2      	b.n	80185c6 <__gethex+0x390>
 8018640:	692a      	ldr	r2, [r5, #16]
 8018642:	454a      	cmp	r2, r9
 8018644:	dd0b      	ble.n	801865e <__gethex+0x428>
 8018646:	2101      	movs	r1, #1
 8018648:	4628      	mov	r0, r5
 801864a:	f7ff fda5 	bl	8018198 <rshift>
 801864e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018652:	3401      	adds	r4, #1
 8018654:	42a3      	cmp	r3, r4
 8018656:	f6ff aed9 	blt.w	801840c <__gethex+0x1d6>
 801865a:	2701      	movs	r7, #1
 801865c:	e7c7      	b.n	80185ee <__gethex+0x3b8>
 801865e:	f016 061f 	ands.w	r6, r6, #31
 8018662:	d0fa      	beq.n	801865a <__gethex+0x424>
 8018664:	449a      	add	sl, r3
 8018666:	f1c6 0620 	rsb	r6, r6, #32
 801866a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801866e:	f000 f9c4 	bl	80189fa <__hi0bits>
 8018672:	42b0      	cmp	r0, r6
 8018674:	dbe7      	blt.n	8018646 <__gethex+0x410>
 8018676:	e7f0      	b.n	801865a <__gethex+0x424>

08018678 <L_shift>:
 8018678:	f1c2 0208 	rsb	r2, r2, #8
 801867c:	0092      	lsls	r2, r2, #2
 801867e:	b570      	push	{r4, r5, r6, lr}
 8018680:	f1c2 0620 	rsb	r6, r2, #32
 8018684:	6843      	ldr	r3, [r0, #4]
 8018686:	6804      	ldr	r4, [r0, #0]
 8018688:	fa03 f506 	lsl.w	r5, r3, r6
 801868c:	432c      	orrs	r4, r5
 801868e:	40d3      	lsrs	r3, r2
 8018690:	6004      	str	r4, [r0, #0]
 8018692:	f840 3f04 	str.w	r3, [r0, #4]!
 8018696:	4288      	cmp	r0, r1
 8018698:	d3f4      	bcc.n	8018684 <L_shift+0xc>
 801869a:	bd70      	pop	{r4, r5, r6, pc}

0801869c <__match>:
 801869c:	b530      	push	{r4, r5, lr}
 801869e:	6803      	ldr	r3, [r0, #0]
 80186a0:	3301      	adds	r3, #1
 80186a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186a6:	b914      	cbnz	r4, 80186ae <__match+0x12>
 80186a8:	6003      	str	r3, [r0, #0]
 80186aa:	2001      	movs	r0, #1
 80186ac:	bd30      	pop	{r4, r5, pc}
 80186ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80186b6:	2d19      	cmp	r5, #25
 80186b8:	bf98      	it	ls
 80186ba:	3220      	addls	r2, #32
 80186bc:	42a2      	cmp	r2, r4
 80186be:	d0f0      	beq.n	80186a2 <__match+0x6>
 80186c0:	2000      	movs	r0, #0
 80186c2:	e7f3      	b.n	80186ac <__match+0x10>

080186c4 <__hexnan>:
 80186c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c8:	680b      	ldr	r3, [r1, #0]
 80186ca:	6801      	ldr	r1, [r0, #0]
 80186cc:	115f      	asrs	r7, r3, #5
 80186ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80186d2:	f013 031f 	ands.w	r3, r3, #31
 80186d6:	b087      	sub	sp, #28
 80186d8:	bf18      	it	ne
 80186da:	3704      	addne	r7, #4
 80186dc:	2500      	movs	r5, #0
 80186de:	1f3e      	subs	r6, r7, #4
 80186e0:	4682      	mov	sl, r0
 80186e2:	4690      	mov	r8, r2
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	f847 5c04 	str.w	r5, [r7, #-4]
 80186ea:	46b1      	mov	r9, r6
 80186ec:	4634      	mov	r4, r6
 80186ee:	9502      	str	r5, [sp, #8]
 80186f0:	46ab      	mov	fp, r5
 80186f2:	784a      	ldrb	r2, [r1, #1]
 80186f4:	1c4b      	adds	r3, r1, #1
 80186f6:	9303      	str	r3, [sp, #12]
 80186f8:	b342      	cbz	r2, 801874c <__hexnan+0x88>
 80186fa:	4610      	mov	r0, r2
 80186fc:	9105      	str	r1, [sp, #20]
 80186fe:	9204      	str	r2, [sp, #16]
 8018700:	f7ff fd84 	bl	801820c <__hexdig_fun>
 8018704:	2800      	cmp	r0, #0
 8018706:	d143      	bne.n	8018790 <__hexnan+0xcc>
 8018708:	9a04      	ldr	r2, [sp, #16]
 801870a:	9905      	ldr	r1, [sp, #20]
 801870c:	2a20      	cmp	r2, #32
 801870e:	d818      	bhi.n	8018742 <__hexnan+0x7e>
 8018710:	9b02      	ldr	r3, [sp, #8]
 8018712:	459b      	cmp	fp, r3
 8018714:	dd13      	ble.n	801873e <__hexnan+0x7a>
 8018716:	454c      	cmp	r4, r9
 8018718:	d206      	bcs.n	8018728 <__hexnan+0x64>
 801871a:	2d07      	cmp	r5, #7
 801871c:	dc04      	bgt.n	8018728 <__hexnan+0x64>
 801871e:	462a      	mov	r2, r5
 8018720:	4649      	mov	r1, r9
 8018722:	4620      	mov	r0, r4
 8018724:	f7ff ffa8 	bl	8018678 <L_shift>
 8018728:	4544      	cmp	r4, r8
 801872a:	d944      	bls.n	80187b6 <__hexnan+0xf2>
 801872c:	2300      	movs	r3, #0
 801872e:	f1a4 0904 	sub.w	r9, r4, #4
 8018732:	f844 3c04 	str.w	r3, [r4, #-4]
 8018736:	f8cd b008 	str.w	fp, [sp, #8]
 801873a:	464c      	mov	r4, r9
 801873c:	461d      	mov	r5, r3
 801873e:	9903      	ldr	r1, [sp, #12]
 8018740:	e7d7      	b.n	80186f2 <__hexnan+0x2e>
 8018742:	2a29      	cmp	r2, #41	; 0x29
 8018744:	d14a      	bne.n	80187dc <__hexnan+0x118>
 8018746:	3102      	adds	r1, #2
 8018748:	f8ca 1000 	str.w	r1, [sl]
 801874c:	f1bb 0f00 	cmp.w	fp, #0
 8018750:	d044      	beq.n	80187dc <__hexnan+0x118>
 8018752:	454c      	cmp	r4, r9
 8018754:	d206      	bcs.n	8018764 <__hexnan+0xa0>
 8018756:	2d07      	cmp	r5, #7
 8018758:	dc04      	bgt.n	8018764 <__hexnan+0xa0>
 801875a:	462a      	mov	r2, r5
 801875c:	4649      	mov	r1, r9
 801875e:	4620      	mov	r0, r4
 8018760:	f7ff ff8a 	bl	8018678 <L_shift>
 8018764:	4544      	cmp	r4, r8
 8018766:	d928      	bls.n	80187ba <__hexnan+0xf6>
 8018768:	4643      	mov	r3, r8
 801876a:	f854 2b04 	ldr.w	r2, [r4], #4
 801876e:	f843 2b04 	str.w	r2, [r3], #4
 8018772:	42a6      	cmp	r6, r4
 8018774:	d2f9      	bcs.n	801876a <__hexnan+0xa6>
 8018776:	2200      	movs	r2, #0
 8018778:	f843 2b04 	str.w	r2, [r3], #4
 801877c:	429e      	cmp	r6, r3
 801877e:	d2fb      	bcs.n	8018778 <__hexnan+0xb4>
 8018780:	6833      	ldr	r3, [r6, #0]
 8018782:	b91b      	cbnz	r3, 801878c <__hexnan+0xc8>
 8018784:	4546      	cmp	r6, r8
 8018786:	d127      	bne.n	80187d8 <__hexnan+0x114>
 8018788:	2301      	movs	r3, #1
 801878a:	6033      	str	r3, [r6, #0]
 801878c:	2005      	movs	r0, #5
 801878e:	e026      	b.n	80187de <__hexnan+0x11a>
 8018790:	3501      	adds	r5, #1
 8018792:	2d08      	cmp	r5, #8
 8018794:	f10b 0b01 	add.w	fp, fp, #1
 8018798:	dd06      	ble.n	80187a8 <__hexnan+0xe4>
 801879a:	4544      	cmp	r4, r8
 801879c:	d9cf      	bls.n	801873e <__hexnan+0x7a>
 801879e:	2300      	movs	r3, #0
 80187a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80187a4:	2501      	movs	r5, #1
 80187a6:	3c04      	subs	r4, #4
 80187a8:	6822      	ldr	r2, [r4, #0]
 80187aa:	f000 000f 	and.w	r0, r0, #15
 80187ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80187b2:	6020      	str	r0, [r4, #0]
 80187b4:	e7c3      	b.n	801873e <__hexnan+0x7a>
 80187b6:	2508      	movs	r5, #8
 80187b8:	e7c1      	b.n	801873e <__hexnan+0x7a>
 80187ba:	9b01      	ldr	r3, [sp, #4]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d0df      	beq.n	8018780 <__hexnan+0xbc>
 80187c0:	f04f 32ff 	mov.w	r2, #4294967295
 80187c4:	f1c3 0320 	rsb	r3, r3, #32
 80187c8:	fa22 f303 	lsr.w	r3, r2, r3
 80187cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80187d0:	401a      	ands	r2, r3
 80187d2:	f847 2c04 	str.w	r2, [r7, #-4]
 80187d6:	e7d3      	b.n	8018780 <__hexnan+0xbc>
 80187d8:	3e04      	subs	r6, #4
 80187da:	e7d1      	b.n	8018780 <__hexnan+0xbc>
 80187dc:	2004      	movs	r0, #4
 80187de:	b007      	add	sp, #28
 80187e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187e4 <__locale_ctype_ptr_l>:
 80187e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80187e8:	4770      	bx	lr
	...

080187ec <__locale_ctype_ptr>:
 80187ec:	4b04      	ldr	r3, [pc, #16]	; (8018800 <__locale_ctype_ptr+0x14>)
 80187ee:	4a05      	ldr	r2, [pc, #20]	; (8018804 <__locale_ctype_ptr+0x18>)
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	6a1b      	ldr	r3, [r3, #32]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	bf08      	it	eq
 80187f8:	4613      	moveq	r3, r2
 80187fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80187fe:	4770      	bx	lr
 8018800:	2000000c 	.word	0x2000000c
 8018804:	20000070 	.word	0x20000070

08018808 <__localeconv_l>:
 8018808:	30f0      	adds	r0, #240	; 0xf0
 801880a:	4770      	bx	lr

0801880c <_localeconv_r>:
 801880c:	4b04      	ldr	r3, [pc, #16]	; (8018820 <_localeconv_r+0x14>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	6a18      	ldr	r0, [r3, #32]
 8018812:	4b04      	ldr	r3, [pc, #16]	; (8018824 <_localeconv_r+0x18>)
 8018814:	2800      	cmp	r0, #0
 8018816:	bf08      	it	eq
 8018818:	4618      	moveq	r0, r3
 801881a:	30f0      	adds	r0, #240	; 0xf0
 801881c:	4770      	bx	lr
 801881e:	bf00      	nop
 8018820:	2000000c 	.word	0x2000000c
 8018824:	20000070 	.word	0x20000070

08018828 <malloc>:
 8018828:	4b02      	ldr	r3, [pc, #8]	; (8018834 <malloc+0xc>)
 801882a:	4601      	mov	r1, r0
 801882c:	6818      	ldr	r0, [r3, #0]
 801882e:	f000 bc7b 	b.w	8019128 <_malloc_r>
 8018832:	bf00      	nop
 8018834:	2000000c 	.word	0x2000000c

08018838 <__ascii_mbtowc>:
 8018838:	b082      	sub	sp, #8
 801883a:	b901      	cbnz	r1, 801883e <__ascii_mbtowc+0x6>
 801883c:	a901      	add	r1, sp, #4
 801883e:	b142      	cbz	r2, 8018852 <__ascii_mbtowc+0x1a>
 8018840:	b14b      	cbz	r3, 8018856 <__ascii_mbtowc+0x1e>
 8018842:	7813      	ldrb	r3, [r2, #0]
 8018844:	600b      	str	r3, [r1, #0]
 8018846:	7812      	ldrb	r2, [r2, #0]
 8018848:	1c10      	adds	r0, r2, #0
 801884a:	bf18      	it	ne
 801884c:	2001      	movne	r0, #1
 801884e:	b002      	add	sp, #8
 8018850:	4770      	bx	lr
 8018852:	4610      	mov	r0, r2
 8018854:	e7fb      	b.n	801884e <__ascii_mbtowc+0x16>
 8018856:	f06f 0001 	mvn.w	r0, #1
 801885a:	e7f8      	b.n	801884e <__ascii_mbtowc+0x16>

0801885c <memcpy>:
 801885c:	b510      	push	{r4, lr}
 801885e:	1e43      	subs	r3, r0, #1
 8018860:	440a      	add	r2, r1
 8018862:	4291      	cmp	r1, r2
 8018864:	d100      	bne.n	8018868 <memcpy+0xc>
 8018866:	bd10      	pop	{r4, pc}
 8018868:	f811 4b01 	ldrb.w	r4, [r1], #1
 801886c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018870:	e7f7      	b.n	8018862 <memcpy+0x6>

08018872 <_Balloc>:
 8018872:	b570      	push	{r4, r5, r6, lr}
 8018874:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018876:	4604      	mov	r4, r0
 8018878:	460e      	mov	r6, r1
 801887a:	b93d      	cbnz	r5, 801888c <_Balloc+0x1a>
 801887c:	2010      	movs	r0, #16
 801887e:	f7ff ffd3 	bl	8018828 <malloc>
 8018882:	6260      	str	r0, [r4, #36]	; 0x24
 8018884:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018888:	6005      	str	r5, [r0, #0]
 801888a:	60c5      	str	r5, [r0, #12]
 801888c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801888e:	68eb      	ldr	r3, [r5, #12]
 8018890:	b183      	cbz	r3, 80188b4 <_Balloc+0x42>
 8018892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018894:	68db      	ldr	r3, [r3, #12]
 8018896:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801889a:	b9b8      	cbnz	r0, 80188cc <_Balloc+0x5a>
 801889c:	2101      	movs	r1, #1
 801889e:	fa01 f506 	lsl.w	r5, r1, r6
 80188a2:	1d6a      	adds	r2, r5, #5
 80188a4:	0092      	lsls	r2, r2, #2
 80188a6:	4620      	mov	r0, r4
 80188a8:	f000 fbe1 	bl	801906e <_calloc_r>
 80188ac:	b160      	cbz	r0, 80188c8 <_Balloc+0x56>
 80188ae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80188b2:	e00e      	b.n	80188d2 <_Balloc+0x60>
 80188b4:	2221      	movs	r2, #33	; 0x21
 80188b6:	2104      	movs	r1, #4
 80188b8:	4620      	mov	r0, r4
 80188ba:	f000 fbd8 	bl	801906e <_calloc_r>
 80188be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188c0:	60e8      	str	r0, [r5, #12]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d1e4      	bne.n	8018892 <_Balloc+0x20>
 80188c8:	2000      	movs	r0, #0
 80188ca:	bd70      	pop	{r4, r5, r6, pc}
 80188cc:	6802      	ldr	r2, [r0, #0]
 80188ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80188d2:	2300      	movs	r3, #0
 80188d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80188d8:	e7f7      	b.n	80188ca <_Balloc+0x58>

080188da <_Bfree>:
 80188da:	b570      	push	{r4, r5, r6, lr}
 80188dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80188de:	4606      	mov	r6, r0
 80188e0:	460d      	mov	r5, r1
 80188e2:	b93c      	cbnz	r4, 80188f4 <_Bfree+0x1a>
 80188e4:	2010      	movs	r0, #16
 80188e6:	f7ff ff9f 	bl	8018828 <malloc>
 80188ea:	6270      	str	r0, [r6, #36]	; 0x24
 80188ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80188f0:	6004      	str	r4, [r0, #0]
 80188f2:	60c4      	str	r4, [r0, #12]
 80188f4:	b13d      	cbz	r5, 8018906 <_Bfree+0x2c>
 80188f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80188f8:	686a      	ldr	r2, [r5, #4]
 80188fa:	68db      	ldr	r3, [r3, #12]
 80188fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018900:	6029      	str	r1, [r5, #0]
 8018902:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018906:	bd70      	pop	{r4, r5, r6, pc}

08018908 <__multadd>:
 8018908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801890c:	690d      	ldr	r5, [r1, #16]
 801890e:	461f      	mov	r7, r3
 8018910:	4606      	mov	r6, r0
 8018912:	460c      	mov	r4, r1
 8018914:	f101 0c14 	add.w	ip, r1, #20
 8018918:	2300      	movs	r3, #0
 801891a:	f8dc 0000 	ldr.w	r0, [ip]
 801891e:	b281      	uxth	r1, r0
 8018920:	fb02 7101 	mla	r1, r2, r1, r7
 8018924:	0c0f      	lsrs	r7, r1, #16
 8018926:	0c00      	lsrs	r0, r0, #16
 8018928:	fb02 7000 	mla	r0, r2, r0, r7
 801892c:	b289      	uxth	r1, r1
 801892e:	3301      	adds	r3, #1
 8018930:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018934:	429d      	cmp	r5, r3
 8018936:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801893a:	f84c 1b04 	str.w	r1, [ip], #4
 801893e:	dcec      	bgt.n	801891a <__multadd+0x12>
 8018940:	b1d7      	cbz	r7, 8018978 <__multadd+0x70>
 8018942:	68a3      	ldr	r3, [r4, #8]
 8018944:	42ab      	cmp	r3, r5
 8018946:	dc12      	bgt.n	801896e <__multadd+0x66>
 8018948:	6861      	ldr	r1, [r4, #4]
 801894a:	4630      	mov	r0, r6
 801894c:	3101      	adds	r1, #1
 801894e:	f7ff ff90 	bl	8018872 <_Balloc>
 8018952:	6922      	ldr	r2, [r4, #16]
 8018954:	3202      	adds	r2, #2
 8018956:	f104 010c 	add.w	r1, r4, #12
 801895a:	4680      	mov	r8, r0
 801895c:	0092      	lsls	r2, r2, #2
 801895e:	300c      	adds	r0, #12
 8018960:	f7ff ff7c 	bl	801885c <memcpy>
 8018964:	4621      	mov	r1, r4
 8018966:	4630      	mov	r0, r6
 8018968:	f7ff ffb7 	bl	80188da <_Bfree>
 801896c:	4644      	mov	r4, r8
 801896e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018972:	3501      	adds	r5, #1
 8018974:	615f      	str	r7, [r3, #20]
 8018976:	6125      	str	r5, [r4, #16]
 8018978:	4620      	mov	r0, r4
 801897a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801897e <__s2b>:
 801897e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018982:	460c      	mov	r4, r1
 8018984:	4615      	mov	r5, r2
 8018986:	461f      	mov	r7, r3
 8018988:	2209      	movs	r2, #9
 801898a:	3308      	adds	r3, #8
 801898c:	4606      	mov	r6, r0
 801898e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018992:	2100      	movs	r1, #0
 8018994:	2201      	movs	r2, #1
 8018996:	429a      	cmp	r2, r3
 8018998:	db20      	blt.n	80189dc <__s2b+0x5e>
 801899a:	4630      	mov	r0, r6
 801899c:	f7ff ff69 	bl	8018872 <_Balloc>
 80189a0:	9b08      	ldr	r3, [sp, #32]
 80189a2:	6143      	str	r3, [r0, #20]
 80189a4:	2d09      	cmp	r5, #9
 80189a6:	f04f 0301 	mov.w	r3, #1
 80189aa:	6103      	str	r3, [r0, #16]
 80189ac:	dd19      	ble.n	80189e2 <__s2b+0x64>
 80189ae:	f104 0809 	add.w	r8, r4, #9
 80189b2:	46c1      	mov	r9, r8
 80189b4:	442c      	add	r4, r5
 80189b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80189ba:	4601      	mov	r1, r0
 80189bc:	3b30      	subs	r3, #48	; 0x30
 80189be:	220a      	movs	r2, #10
 80189c0:	4630      	mov	r0, r6
 80189c2:	f7ff ffa1 	bl	8018908 <__multadd>
 80189c6:	45a1      	cmp	r9, r4
 80189c8:	d1f5      	bne.n	80189b6 <__s2b+0x38>
 80189ca:	eb08 0405 	add.w	r4, r8, r5
 80189ce:	3c08      	subs	r4, #8
 80189d0:	1b2d      	subs	r5, r5, r4
 80189d2:	1963      	adds	r3, r4, r5
 80189d4:	42bb      	cmp	r3, r7
 80189d6:	db07      	blt.n	80189e8 <__s2b+0x6a>
 80189d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189dc:	0052      	lsls	r2, r2, #1
 80189de:	3101      	adds	r1, #1
 80189e0:	e7d9      	b.n	8018996 <__s2b+0x18>
 80189e2:	340a      	adds	r4, #10
 80189e4:	2509      	movs	r5, #9
 80189e6:	e7f3      	b.n	80189d0 <__s2b+0x52>
 80189e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80189ec:	4601      	mov	r1, r0
 80189ee:	3b30      	subs	r3, #48	; 0x30
 80189f0:	220a      	movs	r2, #10
 80189f2:	4630      	mov	r0, r6
 80189f4:	f7ff ff88 	bl	8018908 <__multadd>
 80189f8:	e7eb      	b.n	80189d2 <__s2b+0x54>

080189fa <__hi0bits>:
 80189fa:	0c02      	lsrs	r2, r0, #16
 80189fc:	0412      	lsls	r2, r2, #16
 80189fe:	4603      	mov	r3, r0
 8018a00:	b9b2      	cbnz	r2, 8018a30 <__hi0bits+0x36>
 8018a02:	0403      	lsls	r3, r0, #16
 8018a04:	2010      	movs	r0, #16
 8018a06:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a0a:	bf04      	itt	eq
 8018a0c:	021b      	lsleq	r3, r3, #8
 8018a0e:	3008      	addeq	r0, #8
 8018a10:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a14:	bf04      	itt	eq
 8018a16:	011b      	lsleq	r3, r3, #4
 8018a18:	3004      	addeq	r0, #4
 8018a1a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a1e:	bf04      	itt	eq
 8018a20:	009b      	lsleq	r3, r3, #2
 8018a22:	3002      	addeq	r0, #2
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	db06      	blt.n	8018a36 <__hi0bits+0x3c>
 8018a28:	005b      	lsls	r3, r3, #1
 8018a2a:	d503      	bpl.n	8018a34 <__hi0bits+0x3a>
 8018a2c:	3001      	adds	r0, #1
 8018a2e:	4770      	bx	lr
 8018a30:	2000      	movs	r0, #0
 8018a32:	e7e8      	b.n	8018a06 <__hi0bits+0xc>
 8018a34:	2020      	movs	r0, #32
 8018a36:	4770      	bx	lr

08018a38 <__lo0bits>:
 8018a38:	6803      	ldr	r3, [r0, #0]
 8018a3a:	f013 0207 	ands.w	r2, r3, #7
 8018a3e:	4601      	mov	r1, r0
 8018a40:	d00b      	beq.n	8018a5a <__lo0bits+0x22>
 8018a42:	07da      	lsls	r2, r3, #31
 8018a44:	d423      	bmi.n	8018a8e <__lo0bits+0x56>
 8018a46:	0798      	lsls	r0, r3, #30
 8018a48:	bf49      	itett	mi
 8018a4a:	085b      	lsrmi	r3, r3, #1
 8018a4c:	089b      	lsrpl	r3, r3, #2
 8018a4e:	2001      	movmi	r0, #1
 8018a50:	600b      	strmi	r3, [r1, #0]
 8018a52:	bf5c      	itt	pl
 8018a54:	600b      	strpl	r3, [r1, #0]
 8018a56:	2002      	movpl	r0, #2
 8018a58:	4770      	bx	lr
 8018a5a:	b298      	uxth	r0, r3
 8018a5c:	b9a8      	cbnz	r0, 8018a8a <__lo0bits+0x52>
 8018a5e:	0c1b      	lsrs	r3, r3, #16
 8018a60:	2010      	movs	r0, #16
 8018a62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a66:	bf04      	itt	eq
 8018a68:	0a1b      	lsreq	r3, r3, #8
 8018a6a:	3008      	addeq	r0, #8
 8018a6c:	071a      	lsls	r2, r3, #28
 8018a6e:	bf04      	itt	eq
 8018a70:	091b      	lsreq	r3, r3, #4
 8018a72:	3004      	addeq	r0, #4
 8018a74:	079a      	lsls	r2, r3, #30
 8018a76:	bf04      	itt	eq
 8018a78:	089b      	lsreq	r3, r3, #2
 8018a7a:	3002      	addeq	r0, #2
 8018a7c:	07da      	lsls	r2, r3, #31
 8018a7e:	d402      	bmi.n	8018a86 <__lo0bits+0x4e>
 8018a80:	085b      	lsrs	r3, r3, #1
 8018a82:	d006      	beq.n	8018a92 <__lo0bits+0x5a>
 8018a84:	3001      	adds	r0, #1
 8018a86:	600b      	str	r3, [r1, #0]
 8018a88:	4770      	bx	lr
 8018a8a:	4610      	mov	r0, r2
 8018a8c:	e7e9      	b.n	8018a62 <__lo0bits+0x2a>
 8018a8e:	2000      	movs	r0, #0
 8018a90:	4770      	bx	lr
 8018a92:	2020      	movs	r0, #32
 8018a94:	4770      	bx	lr

08018a96 <__i2b>:
 8018a96:	b510      	push	{r4, lr}
 8018a98:	460c      	mov	r4, r1
 8018a9a:	2101      	movs	r1, #1
 8018a9c:	f7ff fee9 	bl	8018872 <_Balloc>
 8018aa0:	2201      	movs	r2, #1
 8018aa2:	6144      	str	r4, [r0, #20]
 8018aa4:	6102      	str	r2, [r0, #16]
 8018aa6:	bd10      	pop	{r4, pc}

08018aa8 <__multiply>:
 8018aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aac:	4614      	mov	r4, r2
 8018aae:	690a      	ldr	r2, [r1, #16]
 8018ab0:	6923      	ldr	r3, [r4, #16]
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	bfb8      	it	lt
 8018ab6:	460b      	movlt	r3, r1
 8018ab8:	4688      	mov	r8, r1
 8018aba:	bfbc      	itt	lt
 8018abc:	46a0      	movlt	r8, r4
 8018abe:	461c      	movlt	r4, r3
 8018ac0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018ac4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ac8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018acc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018ad0:	eb07 0609 	add.w	r6, r7, r9
 8018ad4:	42b3      	cmp	r3, r6
 8018ad6:	bfb8      	it	lt
 8018ad8:	3101      	addlt	r1, #1
 8018ada:	f7ff feca 	bl	8018872 <_Balloc>
 8018ade:	f100 0514 	add.w	r5, r0, #20
 8018ae2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018ae6:	462b      	mov	r3, r5
 8018ae8:	2200      	movs	r2, #0
 8018aea:	4573      	cmp	r3, lr
 8018aec:	d316      	bcc.n	8018b1c <__multiply+0x74>
 8018aee:	f104 0214 	add.w	r2, r4, #20
 8018af2:	f108 0114 	add.w	r1, r8, #20
 8018af6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018afa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018afe:	9300      	str	r3, [sp, #0]
 8018b00:	9b00      	ldr	r3, [sp, #0]
 8018b02:	9201      	str	r2, [sp, #4]
 8018b04:	4293      	cmp	r3, r2
 8018b06:	d80c      	bhi.n	8018b22 <__multiply+0x7a>
 8018b08:	2e00      	cmp	r6, #0
 8018b0a:	dd03      	ble.n	8018b14 <__multiply+0x6c>
 8018b0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d05d      	beq.n	8018bd0 <__multiply+0x128>
 8018b14:	6106      	str	r6, [r0, #16]
 8018b16:	b003      	add	sp, #12
 8018b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b1c:	f843 2b04 	str.w	r2, [r3], #4
 8018b20:	e7e3      	b.n	8018aea <__multiply+0x42>
 8018b22:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b26:	f1bb 0f00 	cmp.w	fp, #0
 8018b2a:	d023      	beq.n	8018b74 <__multiply+0xcc>
 8018b2c:	4689      	mov	r9, r1
 8018b2e:	46ac      	mov	ip, r5
 8018b30:	f04f 0800 	mov.w	r8, #0
 8018b34:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b38:	f8dc a000 	ldr.w	sl, [ip]
 8018b3c:	b2a3      	uxth	r3, r4
 8018b3e:	fa1f fa8a 	uxth.w	sl, sl
 8018b42:	fb0b a303 	mla	r3, fp, r3, sl
 8018b46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b4a:	f8dc 4000 	ldr.w	r4, [ip]
 8018b4e:	4443      	add	r3, r8
 8018b50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b54:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b5c:	46e2      	mov	sl, ip
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b64:	454f      	cmp	r7, r9
 8018b66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b6a:	f84a 3b04 	str.w	r3, [sl], #4
 8018b6e:	d82b      	bhi.n	8018bc8 <__multiply+0x120>
 8018b70:	f8cc 8004 	str.w	r8, [ip, #4]
 8018b74:	9b01      	ldr	r3, [sp, #4]
 8018b76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018b7a:	3204      	adds	r2, #4
 8018b7c:	f1ba 0f00 	cmp.w	sl, #0
 8018b80:	d020      	beq.n	8018bc4 <__multiply+0x11c>
 8018b82:	682b      	ldr	r3, [r5, #0]
 8018b84:	4689      	mov	r9, r1
 8018b86:	46a8      	mov	r8, r5
 8018b88:	f04f 0b00 	mov.w	fp, #0
 8018b8c:	f8b9 c000 	ldrh.w	ip, [r9]
 8018b90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018b94:	fb0a 440c 	mla	r4, sl, ip, r4
 8018b98:	445c      	add	r4, fp
 8018b9a:	46c4      	mov	ip, r8
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018ba2:	f84c 3b04 	str.w	r3, [ip], #4
 8018ba6:	f859 3b04 	ldr.w	r3, [r9], #4
 8018baa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018bae:	0c1b      	lsrs	r3, r3, #16
 8018bb0:	fb0a b303 	mla	r3, sl, r3, fp
 8018bb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018bb8:	454f      	cmp	r7, r9
 8018bba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018bbe:	d805      	bhi.n	8018bcc <__multiply+0x124>
 8018bc0:	f8c8 3004 	str.w	r3, [r8, #4]
 8018bc4:	3504      	adds	r5, #4
 8018bc6:	e79b      	b.n	8018b00 <__multiply+0x58>
 8018bc8:	46d4      	mov	ip, sl
 8018bca:	e7b3      	b.n	8018b34 <__multiply+0x8c>
 8018bcc:	46e0      	mov	r8, ip
 8018bce:	e7dd      	b.n	8018b8c <__multiply+0xe4>
 8018bd0:	3e01      	subs	r6, #1
 8018bd2:	e799      	b.n	8018b08 <__multiply+0x60>

08018bd4 <__pow5mult>:
 8018bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bd8:	4615      	mov	r5, r2
 8018bda:	f012 0203 	ands.w	r2, r2, #3
 8018bde:	4606      	mov	r6, r0
 8018be0:	460f      	mov	r7, r1
 8018be2:	d007      	beq.n	8018bf4 <__pow5mult+0x20>
 8018be4:	3a01      	subs	r2, #1
 8018be6:	4c21      	ldr	r4, [pc, #132]	; (8018c6c <__pow5mult+0x98>)
 8018be8:	2300      	movs	r3, #0
 8018bea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018bee:	f7ff fe8b 	bl	8018908 <__multadd>
 8018bf2:	4607      	mov	r7, r0
 8018bf4:	10ad      	asrs	r5, r5, #2
 8018bf6:	d035      	beq.n	8018c64 <__pow5mult+0x90>
 8018bf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018bfa:	b93c      	cbnz	r4, 8018c0c <__pow5mult+0x38>
 8018bfc:	2010      	movs	r0, #16
 8018bfe:	f7ff fe13 	bl	8018828 <malloc>
 8018c02:	6270      	str	r0, [r6, #36]	; 0x24
 8018c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c08:	6004      	str	r4, [r0, #0]
 8018c0a:	60c4      	str	r4, [r0, #12]
 8018c0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c14:	b94c      	cbnz	r4, 8018c2a <__pow5mult+0x56>
 8018c16:	f240 2171 	movw	r1, #625	; 0x271
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	f7ff ff3b 	bl	8018a96 <__i2b>
 8018c20:	2300      	movs	r3, #0
 8018c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c26:	4604      	mov	r4, r0
 8018c28:	6003      	str	r3, [r0, #0]
 8018c2a:	f04f 0800 	mov.w	r8, #0
 8018c2e:	07eb      	lsls	r3, r5, #31
 8018c30:	d50a      	bpl.n	8018c48 <__pow5mult+0x74>
 8018c32:	4639      	mov	r1, r7
 8018c34:	4622      	mov	r2, r4
 8018c36:	4630      	mov	r0, r6
 8018c38:	f7ff ff36 	bl	8018aa8 <__multiply>
 8018c3c:	4639      	mov	r1, r7
 8018c3e:	4681      	mov	r9, r0
 8018c40:	4630      	mov	r0, r6
 8018c42:	f7ff fe4a 	bl	80188da <_Bfree>
 8018c46:	464f      	mov	r7, r9
 8018c48:	106d      	asrs	r5, r5, #1
 8018c4a:	d00b      	beq.n	8018c64 <__pow5mult+0x90>
 8018c4c:	6820      	ldr	r0, [r4, #0]
 8018c4e:	b938      	cbnz	r0, 8018c60 <__pow5mult+0x8c>
 8018c50:	4622      	mov	r2, r4
 8018c52:	4621      	mov	r1, r4
 8018c54:	4630      	mov	r0, r6
 8018c56:	f7ff ff27 	bl	8018aa8 <__multiply>
 8018c5a:	6020      	str	r0, [r4, #0]
 8018c5c:	f8c0 8000 	str.w	r8, [r0]
 8018c60:	4604      	mov	r4, r0
 8018c62:	e7e4      	b.n	8018c2e <__pow5mult+0x5a>
 8018c64:	4638      	mov	r0, r7
 8018c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c6a:	bf00      	nop
 8018c6c:	0801a5e0 	.word	0x0801a5e0

08018c70 <__lshift>:
 8018c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c74:	460c      	mov	r4, r1
 8018c76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c7a:	6923      	ldr	r3, [r4, #16]
 8018c7c:	6849      	ldr	r1, [r1, #4]
 8018c7e:	eb0a 0903 	add.w	r9, sl, r3
 8018c82:	68a3      	ldr	r3, [r4, #8]
 8018c84:	4607      	mov	r7, r0
 8018c86:	4616      	mov	r6, r2
 8018c88:	f109 0501 	add.w	r5, r9, #1
 8018c8c:	42ab      	cmp	r3, r5
 8018c8e:	db32      	blt.n	8018cf6 <__lshift+0x86>
 8018c90:	4638      	mov	r0, r7
 8018c92:	f7ff fdee 	bl	8018872 <_Balloc>
 8018c96:	2300      	movs	r3, #0
 8018c98:	4680      	mov	r8, r0
 8018c9a:	f100 0114 	add.w	r1, r0, #20
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	4553      	cmp	r3, sl
 8018ca2:	db2b      	blt.n	8018cfc <__lshift+0x8c>
 8018ca4:	6920      	ldr	r0, [r4, #16]
 8018ca6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018caa:	f104 0314 	add.w	r3, r4, #20
 8018cae:	f016 021f 	ands.w	r2, r6, #31
 8018cb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018cb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018cba:	d025      	beq.n	8018d08 <__lshift+0x98>
 8018cbc:	f1c2 0e20 	rsb	lr, r2, #32
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	681e      	ldr	r6, [r3, #0]
 8018cc4:	468a      	mov	sl, r1
 8018cc6:	4096      	lsls	r6, r2
 8018cc8:	4330      	orrs	r0, r6
 8018cca:	f84a 0b04 	str.w	r0, [sl], #4
 8018cce:	f853 0b04 	ldr.w	r0, [r3], #4
 8018cd2:	459c      	cmp	ip, r3
 8018cd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8018cd8:	d814      	bhi.n	8018d04 <__lshift+0x94>
 8018cda:	6048      	str	r0, [r1, #4]
 8018cdc:	b108      	cbz	r0, 8018ce2 <__lshift+0x72>
 8018cde:	f109 0502 	add.w	r5, r9, #2
 8018ce2:	3d01      	subs	r5, #1
 8018ce4:	4638      	mov	r0, r7
 8018ce6:	f8c8 5010 	str.w	r5, [r8, #16]
 8018cea:	4621      	mov	r1, r4
 8018cec:	f7ff fdf5 	bl	80188da <_Bfree>
 8018cf0:	4640      	mov	r0, r8
 8018cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cf6:	3101      	adds	r1, #1
 8018cf8:	005b      	lsls	r3, r3, #1
 8018cfa:	e7c7      	b.n	8018c8c <__lshift+0x1c>
 8018cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d00:	3301      	adds	r3, #1
 8018d02:	e7cd      	b.n	8018ca0 <__lshift+0x30>
 8018d04:	4651      	mov	r1, sl
 8018d06:	e7dc      	b.n	8018cc2 <__lshift+0x52>
 8018d08:	3904      	subs	r1, #4
 8018d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d12:	459c      	cmp	ip, r3
 8018d14:	d8f9      	bhi.n	8018d0a <__lshift+0x9a>
 8018d16:	e7e4      	b.n	8018ce2 <__lshift+0x72>

08018d18 <__mcmp>:
 8018d18:	6903      	ldr	r3, [r0, #16]
 8018d1a:	690a      	ldr	r2, [r1, #16]
 8018d1c:	1a9b      	subs	r3, r3, r2
 8018d1e:	b530      	push	{r4, r5, lr}
 8018d20:	d10c      	bne.n	8018d3c <__mcmp+0x24>
 8018d22:	0092      	lsls	r2, r2, #2
 8018d24:	3014      	adds	r0, #20
 8018d26:	3114      	adds	r1, #20
 8018d28:	1884      	adds	r4, r0, r2
 8018d2a:	4411      	add	r1, r2
 8018d2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d34:	4295      	cmp	r5, r2
 8018d36:	d003      	beq.n	8018d40 <__mcmp+0x28>
 8018d38:	d305      	bcc.n	8018d46 <__mcmp+0x2e>
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	bd30      	pop	{r4, r5, pc}
 8018d40:	42a0      	cmp	r0, r4
 8018d42:	d3f3      	bcc.n	8018d2c <__mcmp+0x14>
 8018d44:	e7fa      	b.n	8018d3c <__mcmp+0x24>
 8018d46:	f04f 33ff 	mov.w	r3, #4294967295
 8018d4a:	e7f7      	b.n	8018d3c <__mcmp+0x24>

08018d4c <__mdiff>:
 8018d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d50:	460d      	mov	r5, r1
 8018d52:	4607      	mov	r7, r0
 8018d54:	4611      	mov	r1, r2
 8018d56:	4628      	mov	r0, r5
 8018d58:	4614      	mov	r4, r2
 8018d5a:	f7ff ffdd 	bl	8018d18 <__mcmp>
 8018d5e:	1e06      	subs	r6, r0, #0
 8018d60:	d108      	bne.n	8018d74 <__mdiff+0x28>
 8018d62:	4631      	mov	r1, r6
 8018d64:	4638      	mov	r0, r7
 8018d66:	f7ff fd84 	bl	8018872 <_Balloc>
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d74:	bfa4      	itt	ge
 8018d76:	4623      	movge	r3, r4
 8018d78:	462c      	movge	r4, r5
 8018d7a:	4638      	mov	r0, r7
 8018d7c:	6861      	ldr	r1, [r4, #4]
 8018d7e:	bfa6      	itte	ge
 8018d80:	461d      	movge	r5, r3
 8018d82:	2600      	movge	r6, #0
 8018d84:	2601      	movlt	r6, #1
 8018d86:	f7ff fd74 	bl	8018872 <_Balloc>
 8018d8a:	692b      	ldr	r3, [r5, #16]
 8018d8c:	60c6      	str	r6, [r0, #12]
 8018d8e:	6926      	ldr	r6, [r4, #16]
 8018d90:	f105 0914 	add.w	r9, r5, #20
 8018d94:	f104 0214 	add.w	r2, r4, #20
 8018d98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018d9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018da0:	f100 0514 	add.w	r5, r0, #20
 8018da4:	f04f 0e00 	mov.w	lr, #0
 8018da8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018dac:	f859 4b04 	ldr.w	r4, [r9], #4
 8018db0:	fa1e f18a 	uxtah	r1, lr, sl
 8018db4:	b2a3      	uxth	r3, r4
 8018db6:	1ac9      	subs	r1, r1, r3
 8018db8:	0c23      	lsrs	r3, r4, #16
 8018dba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018dbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018dc2:	b289      	uxth	r1, r1
 8018dc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018dc8:	45c8      	cmp	r8, r9
 8018dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018dce:	4694      	mov	ip, r2
 8018dd0:	f845 3b04 	str.w	r3, [r5], #4
 8018dd4:	d8e8      	bhi.n	8018da8 <__mdiff+0x5c>
 8018dd6:	45bc      	cmp	ip, r7
 8018dd8:	d304      	bcc.n	8018de4 <__mdiff+0x98>
 8018dda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018dde:	b183      	cbz	r3, 8018e02 <__mdiff+0xb6>
 8018de0:	6106      	str	r6, [r0, #16]
 8018de2:	e7c5      	b.n	8018d70 <__mdiff+0x24>
 8018de4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018de8:	fa1e f381 	uxtah	r3, lr, r1
 8018dec:	141a      	asrs	r2, r3, #16
 8018dee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018df8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018dfc:	f845 3b04 	str.w	r3, [r5], #4
 8018e00:	e7e9      	b.n	8018dd6 <__mdiff+0x8a>
 8018e02:	3e01      	subs	r6, #1
 8018e04:	e7e9      	b.n	8018dda <__mdiff+0x8e>
	...

08018e08 <__ulp>:
 8018e08:	4b12      	ldr	r3, [pc, #72]	; (8018e54 <__ulp+0x4c>)
 8018e0a:	ee10 2a90 	vmov	r2, s1
 8018e0e:	401a      	ands	r2, r3
 8018e10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	dd04      	ble.n	8018e22 <__ulp+0x1a>
 8018e18:	2000      	movs	r0, #0
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	ec41 0b10 	vmov	d0, r0, r1
 8018e20:	4770      	bx	lr
 8018e22:	425b      	negs	r3, r3
 8018e24:	151b      	asrs	r3, r3, #20
 8018e26:	2b13      	cmp	r3, #19
 8018e28:	f04f 0000 	mov.w	r0, #0
 8018e2c:	f04f 0100 	mov.w	r1, #0
 8018e30:	dc04      	bgt.n	8018e3c <__ulp+0x34>
 8018e32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e36:	fa42 f103 	asr.w	r1, r2, r3
 8018e3a:	e7ef      	b.n	8018e1c <__ulp+0x14>
 8018e3c:	3b14      	subs	r3, #20
 8018e3e:	2b1e      	cmp	r3, #30
 8018e40:	f04f 0201 	mov.w	r2, #1
 8018e44:	bfda      	itte	le
 8018e46:	f1c3 031f 	rsble	r3, r3, #31
 8018e4a:	fa02 f303 	lslle.w	r3, r2, r3
 8018e4e:	4613      	movgt	r3, r2
 8018e50:	4618      	mov	r0, r3
 8018e52:	e7e3      	b.n	8018e1c <__ulp+0x14>
 8018e54:	7ff00000 	.word	0x7ff00000

08018e58 <__b2d>:
 8018e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e5a:	6905      	ldr	r5, [r0, #16]
 8018e5c:	f100 0714 	add.w	r7, r0, #20
 8018e60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e64:	1f2e      	subs	r6, r5, #4
 8018e66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e6a:	4620      	mov	r0, r4
 8018e6c:	f7ff fdc5 	bl	80189fa <__hi0bits>
 8018e70:	f1c0 0320 	rsb	r3, r0, #32
 8018e74:	280a      	cmp	r0, #10
 8018e76:	600b      	str	r3, [r1, #0]
 8018e78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018ef0 <__b2d+0x98>
 8018e7c:	dc14      	bgt.n	8018ea8 <__b2d+0x50>
 8018e7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018e82:	fa24 f10e 	lsr.w	r1, r4, lr
 8018e86:	42b7      	cmp	r7, r6
 8018e88:	ea41 030c 	orr.w	r3, r1, ip
 8018e8c:	bf34      	ite	cc
 8018e8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e92:	2100      	movcs	r1, #0
 8018e94:	3015      	adds	r0, #21
 8018e96:	fa04 f000 	lsl.w	r0, r4, r0
 8018e9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8018e9e:	ea40 0201 	orr.w	r2, r0, r1
 8018ea2:	ec43 2b10 	vmov	d0, r2, r3
 8018ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ea8:	42b7      	cmp	r7, r6
 8018eaa:	bf3a      	itte	cc
 8018eac:	f1a5 0608 	subcc.w	r6, r5, #8
 8018eb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018eb4:	2100      	movcs	r1, #0
 8018eb6:	380b      	subs	r0, #11
 8018eb8:	d015      	beq.n	8018ee6 <__b2d+0x8e>
 8018eba:	4084      	lsls	r4, r0
 8018ebc:	f1c0 0520 	rsb	r5, r0, #32
 8018ec0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018ec4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018ec8:	42be      	cmp	r6, r7
 8018eca:	fa21 fc05 	lsr.w	ip, r1, r5
 8018ece:	ea44 030c 	orr.w	r3, r4, ip
 8018ed2:	bf8c      	ite	hi
 8018ed4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018ed8:	2400      	movls	r4, #0
 8018eda:	fa01 f000 	lsl.w	r0, r1, r0
 8018ede:	40ec      	lsrs	r4, r5
 8018ee0:	ea40 0204 	orr.w	r2, r0, r4
 8018ee4:	e7dd      	b.n	8018ea2 <__b2d+0x4a>
 8018ee6:	ea44 030c 	orr.w	r3, r4, ip
 8018eea:	460a      	mov	r2, r1
 8018eec:	e7d9      	b.n	8018ea2 <__b2d+0x4a>
 8018eee:	bf00      	nop
 8018ef0:	3ff00000 	.word	0x3ff00000

08018ef4 <__d2b>:
 8018ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ef8:	460e      	mov	r6, r1
 8018efa:	2101      	movs	r1, #1
 8018efc:	ec59 8b10 	vmov	r8, r9, d0
 8018f00:	4615      	mov	r5, r2
 8018f02:	f7ff fcb6 	bl	8018872 <_Balloc>
 8018f06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018f0a:	4607      	mov	r7, r0
 8018f0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f10:	bb34      	cbnz	r4, 8018f60 <__d2b+0x6c>
 8018f12:	9301      	str	r3, [sp, #4]
 8018f14:	f1b8 0300 	subs.w	r3, r8, #0
 8018f18:	d027      	beq.n	8018f6a <__d2b+0x76>
 8018f1a:	a802      	add	r0, sp, #8
 8018f1c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018f20:	f7ff fd8a 	bl	8018a38 <__lo0bits>
 8018f24:	9900      	ldr	r1, [sp, #0]
 8018f26:	b1f0      	cbz	r0, 8018f66 <__d2b+0x72>
 8018f28:	9a01      	ldr	r2, [sp, #4]
 8018f2a:	f1c0 0320 	rsb	r3, r0, #32
 8018f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8018f32:	430b      	orrs	r3, r1
 8018f34:	40c2      	lsrs	r2, r0
 8018f36:	617b      	str	r3, [r7, #20]
 8018f38:	9201      	str	r2, [sp, #4]
 8018f3a:	9b01      	ldr	r3, [sp, #4]
 8018f3c:	61bb      	str	r3, [r7, #24]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	bf14      	ite	ne
 8018f42:	2102      	movne	r1, #2
 8018f44:	2101      	moveq	r1, #1
 8018f46:	6139      	str	r1, [r7, #16]
 8018f48:	b1c4      	cbz	r4, 8018f7c <__d2b+0x88>
 8018f4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f4e:	4404      	add	r4, r0
 8018f50:	6034      	str	r4, [r6, #0]
 8018f52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f56:	6028      	str	r0, [r5, #0]
 8018f58:	4638      	mov	r0, r7
 8018f5a:	b003      	add	sp, #12
 8018f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f64:	e7d5      	b.n	8018f12 <__d2b+0x1e>
 8018f66:	6179      	str	r1, [r7, #20]
 8018f68:	e7e7      	b.n	8018f3a <__d2b+0x46>
 8018f6a:	a801      	add	r0, sp, #4
 8018f6c:	f7ff fd64 	bl	8018a38 <__lo0bits>
 8018f70:	9b01      	ldr	r3, [sp, #4]
 8018f72:	617b      	str	r3, [r7, #20]
 8018f74:	2101      	movs	r1, #1
 8018f76:	6139      	str	r1, [r7, #16]
 8018f78:	3020      	adds	r0, #32
 8018f7a:	e7e5      	b.n	8018f48 <__d2b+0x54>
 8018f7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018f80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f84:	6030      	str	r0, [r6, #0]
 8018f86:	6918      	ldr	r0, [r3, #16]
 8018f88:	f7ff fd37 	bl	80189fa <__hi0bits>
 8018f8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018f90:	e7e1      	b.n	8018f56 <__d2b+0x62>

08018f92 <__ratio>:
 8018f92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f96:	4688      	mov	r8, r1
 8018f98:	4669      	mov	r1, sp
 8018f9a:	4681      	mov	r9, r0
 8018f9c:	f7ff ff5c 	bl	8018e58 <__b2d>
 8018fa0:	a901      	add	r1, sp, #4
 8018fa2:	4640      	mov	r0, r8
 8018fa4:	ec57 6b10 	vmov	r6, r7, d0
 8018fa8:	f7ff ff56 	bl	8018e58 <__b2d>
 8018fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018fb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018fb4:	eba3 0c02 	sub.w	ip, r3, r2
 8018fb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018fbc:	1a9b      	subs	r3, r3, r2
 8018fbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018fc2:	ec5b ab10 	vmov	sl, fp, d0
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	bfce      	itee	gt
 8018fca:	463a      	movgt	r2, r7
 8018fcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018fd0:	465a      	movle	r2, fp
 8018fd2:	4659      	mov	r1, fp
 8018fd4:	463d      	mov	r5, r7
 8018fd6:	bfd4      	ite	le
 8018fd8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018fdc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	ee10 2a10 	vmov	r2, s0
 8018fe6:	460b      	mov	r3, r1
 8018fe8:	4629      	mov	r1, r5
 8018fea:	f7e7 fc47 	bl	800087c <__aeabi_ddiv>
 8018fee:	ec41 0b10 	vmov	d0, r0, r1
 8018ff2:	b003      	add	sp, #12
 8018ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ff8 <__copybits>:
 8018ff8:	3901      	subs	r1, #1
 8018ffa:	b510      	push	{r4, lr}
 8018ffc:	1149      	asrs	r1, r1, #5
 8018ffe:	6914      	ldr	r4, [r2, #16]
 8019000:	3101      	adds	r1, #1
 8019002:	f102 0314 	add.w	r3, r2, #20
 8019006:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801900a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801900e:	42a3      	cmp	r3, r4
 8019010:	4602      	mov	r2, r0
 8019012:	d303      	bcc.n	801901c <__copybits+0x24>
 8019014:	2300      	movs	r3, #0
 8019016:	428a      	cmp	r2, r1
 8019018:	d305      	bcc.n	8019026 <__copybits+0x2e>
 801901a:	bd10      	pop	{r4, pc}
 801901c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019020:	f840 2b04 	str.w	r2, [r0], #4
 8019024:	e7f3      	b.n	801900e <__copybits+0x16>
 8019026:	f842 3b04 	str.w	r3, [r2], #4
 801902a:	e7f4      	b.n	8019016 <__copybits+0x1e>

0801902c <__any_on>:
 801902c:	f100 0214 	add.w	r2, r0, #20
 8019030:	6900      	ldr	r0, [r0, #16]
 8019032:	114b      	asrs	r3, r1, #5
 8019034:	4298      	cmp	r0, r3
 8019036:	b510      	push	{r4, lr}
 8019038:	db11      	blt.n	801905e <__any_on+0x32>
 801903a:	dd0a      	ble.n	8019052 <__any_on+0x26>
 801903c:	f011 011f 	ands.w	r1, r1, #31
 8019040:	d007      	beq.n	8019052 <__any_on+0x26>
 8019042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019046:	fa24 f001 	lsr.w	r0, r4, r1
 801904a:	fa00 f101 	lsl.w	r1, r0, r1
 801904e:	428c      	cmp	r4, r1
 8019050:	d10b      	bne.n	801906a <__any_on+0x3e>
 8019052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019056:	4293      	cmp	r3, r2
 8019058:	d803      	bhi.n	8019062 <__any_on+0x36>
 801905a:	2000      	movs	r0, #0
 801905c:	bd10      	pop	{r4, pc}
 801905e:	4603      	mov	r3, r0
 8019060:	e7f7      	b.n	8019052 <__any_on+0x26>
 8019062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019066:	2900      	cmp	r1, #0
 8019068:	d0f5      	beq.n	8019056 <__any_on+0x2a>
 801906a:	2001      	movs	r0, #1
 801906c:	e7f6      	b.n	801905c <__any_on+0x30>

0801906e <_calloc_r>:
 801906e:	b538      	push	{r3, r4, r5, lr}
 8019070:	fb02 f401 	mul.w	r4, r2, r1
 8019074:	4621      	mov	r1, r4
 8019076:	f000 f857 	bl	8019128 <_malloc_r>
 801907a:	4605      	mov	r5, r0
 801907c:	b118      	cbz	r0, 8019086 <_calloc_r+0x18>
 801907e:	4622      	mov	r2, r4
 8019080:	2100      	movs	r1, #0
 8019082:	f7fc fca1 	bl	80159c8 <memset>
 8019086:	4628      	mov	r0, r5
 8019088:	bd38      	pop	{r3, r4, r5, pc}
	...

0801908c <_free_r>:
 801908c:	b538      	push	{r3, r4, r5, lr}
 801908e:	4605      	mov	r5, r0
 8019090:	2900      	cmp	r1, #0
 8019092:	d045      	beq.n	8019120 <_free_r+0x94>
 8019094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019098:	1f0c      	subs	r4, r1, #4
 801909a:	2b00      	cmp	r3, #0
 801909c:	bfb8      	it	lt
 801909e:	18e4      	addlt	r4, r4, r3
 80190a0:	f000 fe30 	bl	8019d04 <__malloc_lock>
 80190a4:	4a1f      	ldr	r2, [pc, #124]	; (8019124 <_free_r+0x98>)
 80190a6:	6813      	ldr	r3, [r2, #0]
 80190a8:	4610      	mov	r0, r2
 80190aa:	b933      	cbnz	r3, 80190ba <_free_r+0x2e>
 80190ac:	6063      	str	r3, [r4, #4]
 80190ae:	6014      	str	r4, [r2, #0]
 80190b0:	4628      	mov	r0, r5
 80190b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190b6:	f000 be26 	b.w	8019d06 <__malloc_unlock>
 80190ba:	42a3      	cmp	r3, r4
 80190bc:	d90c      	bls.n	80190d8 <_free_r+0x4c>
 80190be:	6821      	ldr	r1, [r4, #0]
 80190c0:	1862      	adds	r2, r4, r1
 80190c2:	4293      	cmp	r3, r2
 80190c4:	bf04      	itt	eq
 80190c6:	681a      	ldreq	r2, [r3, #0]
 80190c8:	685b      	ldreq	r3, [r3, #4]
 80190ca:	6063      	str	r3, [r4, #4]
 80190cc:	bf04      	itt	eq
 80190ce:	1852      	addeq	r2, r2, r1
 80190d0:	6022      	streq	r2, [r4, #0]
 80190d2:	6004      	str	r4, [r0, #0]
 80190d4:	e7ec      	b.n	80190b0 <_free_r+0x24>
 80190d6:	4613      	mov	r3, r2
 80190d8:	685a      	ldr	r2, [r3, #4]
 80190da:	b10a      	cbz	r2, 80190e0 <_free_r+0x54>
 80190dc:	42a2      	cmp	r2, r4
 80190de:	d9fa      	bls.n	80190d6 <_free_r+0x4a>
 80190e0:	6819      	ldr	r1, [r3, #0]
 80190e2:	1858      	adds	r0, r3, r1
 80190e4:	42a0      	cmp	r0, r4
 80190e6:	d10b      	bne.n	8019100 <_free_r+0x74>
 80190e8:	6820      	ldr	r0, [r4, #0]
 80190ea:	4401      	add	r1, r0
 80190ec:	1858      	adds	r0, r3, r1
 80190ee:	4282      	cmp	r2, r0
 80190f0:	6019      	str	r1, [r3, #0]
 80190f2:	d1dd      	bne.n	80190b0 <_free_r+0x24>
 80190f4:	6810      	ldr	r0, [r2, #0]
 80190f6:	6852      	ldr	r2, [r2, #4]
 80190f8:	605a      	str	r2, [r3, #4]
 80190fa:	4401      	add	r1, r0
 80190fc:	6019      	str	r1, [r3, #0]
 80190fe:	e7d7      	b.n	80190b0 <_free_r+0x24>
 8019100:	d902      	bls.n	8019108 <_free_r+0x7c>
 8019102:	230c      	movs	r3, #12
 8019104:	602b      	str	r3, [r5, #0]
 8019106:	e7d3      	b.n	80190b0 <_free_r+0x24>
 8019108:	6820      	ldr	r0, [r4, #0]
 801910a:	1821      	adds	r1, r4, r0
 801910c:	428a      	cmp	r2, r1
 801910e:	bf04      	itt	eq
 8019110:	6811      	ldreq	r1, [r2, #0]
 8019112:	6852      	ldreq	r2, [r2, #4]
 8019114:	6062      	str	r2, [r4, #4]
 8019116:	bf04      	itt	eq
 8019118:	1809      	addeq	r1, r1, r0
 801911a:	6021      	streq	r1, [r4, #0]
 801911c:	605c      	str	r4, [r3, #4]
 801911e:	e7c7      	b.n	80190b0 <_free_r+0x24>
 8019120:	bd38      	pop	{r3, r4, r5, pc}
 8019122:	bf00      	nop
 8019124:	2004233c 	.word	0x2004233c

08019128 <_malloc_r>:
 8019128:	b570      	push	{r4, r5, r6, lr}
 801912a:	1ccd      	adds	r5, r1, #3
 801912c:	f025 0503 	bic.w	r5, r5, #3
 8019130:	3508      	adds	r5, #8
 8019132:	2d0c      	cmp	r5, #12
 8019134:	bf38      	it	cc
 8019136:	250c      	movcc	r5, #12
 8019138:	2d00      	cmp	r5, #0
 801913a:	4606      	mov	r6, r0
 801913c:	db01      	blt.n	8019142 <_malloc_r+0x1a>
 801913e:	42a9      	cmp	r1, r5
 8019140:	d903      	bls.n	801914a <_malloc_r+0x22>
 8019142:	230c      	movs	r3, #12
 8019144:	6033      	str	r3, [r6, #0]
 8019146:	2000      	movs	r0, #0
 8019148:	bd70      	pop	{r4, r5, r6, pc}
 801914a:	f000 fddb 	bl	8019d04 <__malloc_lock>
 801914e:	4a21      	ldr	r2, [pc, #132]	; (80191d4 <_malloc_r+0xac>)
 8019150:	6814      	ldr	r4, [r2, #0]
 8019152:	4621      	mov	r1, r4
 8019154:	b991      	cbnz	r1, 801917c <_malloc_r+0x54>
 8019156:	4c20      	ldr	r4, [pc, #128]	; (80191d8 <_malloc_r+0xb0>)
 8019158:	6823      	ldr	r3, [r4, #0]
 801915a:	b91b      	cbnz	r3, 8019164 <_malloc_r+0x3c>
 801915c:	4630      	mov	r0, r6
 801915e:	f000 fc91 	bl	8019a84 <_sbrk_r>
 8019162:	6020      	str	r0, [r4, #0]
 8019164:	4629      	mov	r1, r5
 8019166:	4630      	mov	r0, r6
 8019168:	f000 fc8c 	bl	8019a84 <_sbrk_r>
 801916c:	1c43      	adds	r3, r0, #1
 801916e:	d124      	bne.n	80191ba <_malloc_r+0x92>
 8019170:	230c      	movs	r3, #12
 8019172:	6033      	str	r3, [r6, #0]
 8019174:	4630      	mov	r0, r6
 8019176:	f000 fdc6 	bl	8019d06 <__malloc_unlock>
 801917a:	e7e4      	b.n	8019146 <_malloc_r+0x1e>
 801917c:	680b      	ldr	r3, [r1, #0]
 801917e:	1b5b      	subs	r3, r3, r5
 8019180:	d418      	bmi.n	80191b4 <_malloc_r+0x8c>
 8019182:	2b0b      	cmp	r3, #11
 8019184:	d90f      	bls.n	80191a6 <_malloc_r+0x7e>
 8019186:	600b      	str	r3, [r1, #0]
 8019188:	50cd      	str	r5, [r1, r3]
 801918a:	18cc      	adds	r4, r1, r3
 801918c:	4630      	mov	r0, r6
 801918e:	f000 fdba 	bl	8019d06 <__malloc_unlock>
 8019192:	f104 000b 	add.w	r0, r4, #11
 8019196:	1d23      	adds	r3, r4, #4
 8019198:	f020 0007 	bic.w	r0, r0, #7
 801919c:	1ac3      	subs	r3, r0, r3
 801919e:	d0d3      	beq.n	8019148 <_malloc_r+0x20>
 80191a0:	425a      	negs	r2, r3
 80191a2:	50e2      	str	r2, [r4, r3]
 80191a4:	e7d0      	b.n	8019148 <_malloc_r+0x20>
 80191a6:	428c      	cmp	r4, r1
 80191a8:	684b      	ldr	r3, [r1, #4]
 80191aa:	bf16      	itet	ne
 80191ac:	6063      	strne	r3, [r4, #4]
 80191ae:	6013      	streq	r3, [r2, #0]
 80191b0:	460c      	movne	r4, r1
 80191b2:	e7eb      	b.n	801918c <_malloc_r+0x64>
 80191b4:	460c      	mov	r4, r1
 80191b6:	6849      	ldr	r1, [r1, #4]
 80191b8:	e7cc      	b.n	8019154 <_malloc_r+0x2c>
 80191ba:	1cc4      	adds	r4, r0, #3
 80191bc:	f024 0403 	bic.w	r4, r4, #3
 80191c0:	42a0      	cmp	r0, r4
 80191c2:	d005      	beq.n	80191d0 <_malloc_r+0xa8>
 80191c4:	1a21      	subs	r1, r4, r0
 80191c6:	4630      	mov	r0, r6
 80191c8:	f000 fc5c 	bl	8019a84 <_sbrk_r>
 80191cc:	3001      	adds	r0, #1
 80191ce:	d0cf      	beq.n	8019170 <_malloc_r+0x48>
 80191d0:	6025      	str	r5, [r4, #0]
 80191d2:	e7db      	b.n	801918c <_malloc_r+0x64>
 80191d4:	2004233c 	.word	0x2004233c
 80191d8:	20042340 	.word	0x20042340

080191dc <__ssputs_r>:
 80191dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191e0:	688e      	ldr	r6, [r1, #8]
 80191e2:	429e      	cmp	r6, r3
 80191e4:	4682      	mov	sl, r0
 80191e6:	460c      	mov	r4, r1
 80191e8:	4690      	mov	r8, r2
 80191ea:	4699      	mov	r9, r3
 80191ec:	d837      	bhi.n	801925e <__ssputs_r+0x82>
 80191ee:	898a      	ldrh	r2, [r1, #12]
 80191f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80191f4:	d031      	beq.n	801925a <__ssputs_r+0x7e>
 80191f6:	6825      	ldr	r5, [r4, #0]
 80191f8:	6909      	ldr	r1, [r1, #16]
 80191fa:	1a6f      	subs	r7, r5, r1
 80191fc:	6965      	ldr	r5, [r4, #20]
 80191fe:	2302      	movs	r3, #2
 8019200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019204:	fb95 f5f3 	sdiv	r5, r5, r3
 8019208:	f109 0301 	add.w	r3, r9, #1
 801920c:	443b      	add	r3, r7
 801920e:	429d      	cmp	r5, r3
 8019210:	bf38      	it	cc
 8019212:	461d      	movcc	r5, r3
 8019214:	0553      	lsls	r3, r2, #21
 8019216:	d530      	bpl.n	801927a <__ssputs_r+0x9e>
 8019218:	4629      	mov	r1, r5
 801921a:	f7ff ff85 	bl	8019128 <_malloc_r>
 801921e:	4606      	mov	r6, r0
 8019220:	b950      	cbnz	r0, 8019238 <__ssputs_r+0x5c>
 8019222:	230c      	movs	r3, #12
 8019224:	f8ca 3000 	str.w	r3, [sl]
 8019228:	89a3      	ldrh	r3, [r4, #12]
 801922a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801922e:	81a3      	strh	r3, [r4, #12]
 8019230:	f04f 30ff 	mov.w	r0, #4294967295
 8019234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019238:	463a      	mov	r2, r7
 801923a:	6921      	ldr	r1, [r4, #16]
 801923c:	f7ff fb0e 	bl	801885c <memcpy>
 8019240:	89a3      	ldrh	r3, [r4, #12]
 8019242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801924a:	81a3      	strh	r3, [r4, #12]
 801924c:	6126      	str	r6, [r4, #16]
 801924e:	6165      	str	r5, [r4, #20]
 8019250:	443e      	add	r6, r7
 8019252:	1bed      	subs	r5, r5, r7
 8019254:	6026      	str	r6, [r4, #0]
 8019256:	60a5      	str	r5, [r4, #8]
 8019258:	464e      	mov	r6, r9
 801925a:	454e      	cmp	r6, r9
 801925c:	d900      	bls.n	8019260 <__ssputs_r+0x84>
 801925e:	464e      	mov	r6, r9
 8019260:	4632      	mov	r2, r6
 8019262:	4641      	mov	r1, r8
 8019264:	6820      	ldr	r0, [r4, #0]
 8019266:	f000 fd34 	bl	8019cd2 <memmove>
 801926a:	68a3      	ldr	r3, [r4, #8]
 801926c:	1b9b      	subs	r3, r3, r6
 801926e:	60a3      	str	r3, [r4, #8]
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	441e      	add	r6, r3
 8019274:	6026      	str	r6, [r4, #0]
 8019276:	2000      	movs	r0, #0
 8019278:	e7dc      	b.n	8019234 <__ssputs_r+0x58>
 801927a:	462a      	mov	r2, r5
 801927c:	f000 fd44 	bl	8019d08 <_realloc_r>
 8019280:	4606      	mov	r6, r0
 8019282:	2800      	cmp	r0, #0
 8019284:	d1e2      	bne.n	801924c <__ssputs_r+0x70>
 8019286:	6921      	ldr	r1, [r4, #16]
 8019288:	4650      	mov	r0, sl
 801928a:	f7ff feff 	bl	801908c <_free_r>
 801928e:	e7c8      	b.n	8019222 <__ssputs_r+0x46>

08019290 <_svfiprintf_r>:
 8019290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019294:	461d      	mov	r5, r3
 8019296:	898b      	ldrh	r3, [r1, #12]
 8019298:	061f      	lsls	r7, r3, #24
 801929a:	b09d      	sub	sp, #116	; 0x74
 801929c:	4680      	mov	r8, r0
 801929e:	460c      	mov	r4, r1
 80192a0:	4616      	mov	r6, r2
 80192a2:	d50f      	bpl.n	80192c4 <_svfiprintf_r+0x34>
 80192a4:	690b      	ldr	r3, [r1, #16]
 80192a6:	b96b      	cbnz	r3, 80192c4 <_svfiprintf_r+0x34>
 80192a8:	2140      	movs	r1, #64	; 0x40
 80192aa:	f7ff ff3d 	bl	8019128 <_malloc_r>
 80192ae:	6020      	str	r0, [r4, #0]
 80192b0:	6120      	str	r0, [r4, #16]
 80192b2:	b928      	cbnz	r0, 80192c0 <_svfiprintf_r+0x30>
 80192b4:	230c      	movs	r3, #12
 80192b6:	f8c8 3000 	str.w	r3, [r8]
 80192ba:	f04f 30ff 	mov.w	r0, #4294967295
 80192be:	e0c8      	b.n	8019452 <_svfiprintf_r+0x1c2>
 80192c0:	2340      	movs	r3, #64	; 0x40
 80192c2:	6163      	str	r3, [r4, #20]
 80192c4:	2300      	movs	r3, #0
 80192c6:	9309      	str	r3, [sp, #36]	; 0x24
 80192c8:	2320      	movs	r3, #32
 80192ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192ce:	2330      	movs	r3, #48	; 0x30
 80192d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192d4:	9503      	str	r5, [sp, #12]
 80192d6:	f04f 0b01 	mov.w	fp, #1
 80192da:	4637      	mov	r7, r6
 80192dc:	463d      	mov	r5, r7
 80192de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80192e2:	b10b      	cbz	r3, 80192e8 <_svfiprintf_r+0x58>
 80192e4:	2b25      	cmp	r3, #37	; 0x25
 80192e6:	d13e      	bne.n	8019366 <_svfiprintf_r+0xd6>
 80192e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80192ec:	d00b      	beq.n	8019306 <_svfiprintf_r+0x76>
 80192ee:	4653      	mov	r3, sl
 80192f0:	4632      	mov	r2, r6
 80192f2:	4621      	mov	r1, r4
 80192f4:	4640      	mov	r0, r8
 80192f6:	f7ff ff71 	bl	80191dc <__ssputs_r>
 80192fa:	3001      	adds	r0, #1
 80192fc:	f000 80a4 	beq.w	8019448 <_svfiprintf_r+0x1b8>
 8019300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019302:	4453      	add	r3, sl
 8019304:	9309      	str	r3, [sp, #36]	; 0x24
 8019306:	783b      	ldrb	r3, [r7, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	f000 809d 	beq.w	8019448 <_svfiprintf_r+0x1b8>
 801930e:	2300      	movs	r3, #0
 8019310:	f04f 32ff 	mov.w	r2, #4294967295
 8019314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019318:	9304      	str	r3, [sp, #16]
 801931a:	9307      	str	r3, [sp, #28]
 801931c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019320:	931a      	str	r3, [sp, #104]	; 0x68
 8019322:	462f      	mov	r7, r5
 8019324:	2205      	movs	r2, #5
 8019326:	f817 1b01 	ldrb.w	r1, [r7], #1
 801932a:	4850      	ldr	r0, [pc, #320]	; (801946c <_svfiprintf_r+0x1dc>)
 801932c:	f7e6 ff70 	bl	8000210 <memchr>
 8019330:	9b04      	ldr	r3, [sp, #16]
 8019332:	b9d0      	cbnz	r0, 801936a <_svfiprintf_r+0xda>
 8019334:	06d9      	lsls	r1, r3, #27
 8019336:	bf44      	itt	mi
 8019338:	2220      	movmi	r2, #32
 801933a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801933e:	071a      	lsls	r2, r3, #28
 8019340:	bf44      	itt	mi
 8019342:	222b      	movmi	r2, #43	; 0x2b
 8019344:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019348:	782a      	ldrb	r2, [r5, #0]
 801934a:	2a2a      	cmp	r2, #42	; 0x2a
 801934c:	d015      	beq.n	801937a <_svfiprintf_r+0xea>
 801934e:	9a07      	ldr	r2, [sp, #28]
 8019350:	462f      	mov	r7, r5
 8019352:	2000      	movs	r0, #0
 8019354:	250a      	movs	r5, #10
 8019356:	4639      	mov	r1, r7
 8019358:	f811 3b01 	ldrb.w	r3, [r1], #1
 801935c:	3b30      	subs	r3, #48	; 0x30
 801935e:	2b09      	cmp	r3, #9
 8019360:	d94d      	bls.n	80193fe <_svfiprintf_r+0x16e>
 8019362:	b1b8      	cbz	r0, 8019394 <_svfiprintf_r+0x104>
 8019364:	e00f      	b.n	8019386 <_svfiprintf_r+0xf6>
 8019366:	462f      	mov	r7, r5
 8019368:	e7b8      	b.n	80192dc <_svfiprintf_r+0x4c>
 801936a:	4a40      	ldr	r2, [pc, #256]	; (801946c <_svfiprintf_r+0x1dc>)
 801936c:	1a80      	subs	r0, r0, r2
 801936e:	fa0b f000 	lsl.w	r0, fp, r0
 8019372:	4318      	orrs	r0, r3
 8019374:	9004      	str	r0, [sp, #16]
 8019376:	463d      	mov	r5, r7
 8019378:	e7d3      	b.n	8019322 <_svfiprintf_r+0x92>
 801937a:	9a03      	ldr	r2, [sp, #12]
 801937c:	1d11      	adds	r1, r2, #4
 801937e:	6812      	ldr	r2, [r2, #0]
 8019380:	9103      	str	r1, [sp, #12]
 8019382:	2a00      	cmp	r2, #0
 8019384:	db01      	blt.n	801938a <_svfiprintf_r+0xfa>
 8019386:	9207      	str	r2, [sp, #28]
 8019388:	e004      	b.n	8019394 <_svfiprintf_r+0x104>
 801938a:	4252      	negs	r2, r2
 801938c:	f043 0302 	orr.w	r3, r3, #2
 8019390:	9207      	str	r2, [sp, #28]
 8019392:	9304      	str	r3, [sp, #16]
 8019394:	783b      	ldrb	r3, [r7, #0]
 8019396:	2b2e      	cmp	r3, #46	; 0x2e
 8019398:	d10c      	bne.n	80193b4 <_svfiprintf_r+0x124>
 801939a:	787b      	ldrb	r3, [r7, #1]
 801939c:	2b2a      	cmp	r3, #42	; 0x2a
 801939e:	d133      	bne.n	8019408 <_svfiprintf_r+0x178>
 80193a0:	9b03      	ldr	r3, [sp, #12]
 80193a2:	1d1a      	adds	r2, r3, #4
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	9203      	str	r2, [sp, #12]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	bfb8      	it	lt
 80193ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80193b0:	3702      	adds	r7, #2
 80193b2:	9305      	str	r3, [sp, #20]
 80193b4:	4d2e      	ldr	r5, [pc, #184]	; (8019470 <_svfiprintf_r+0x1e0>)
 80193b6:	7839      	ldrb	r1, [r7, #0]
 80193b8:	2203      	movs	r2, #3
 80193ba:	4628      	mov	r0, r5
 80193bc:	f7e6 ff28 	bl	8000210 <memchr>
 80193c0:	b138      	cbz	r0, 80193d2 <_svfiprintf_r+0x142>
 80193c2:	2340      	movs	r3, #64	; 0x40
 80193c4:	1b40      	subs	r0, r0, r5
 80193c6:	fa03 f000 	lsl.w	r0, r3, r0
 80193ca:	9b04      	ldr	r3, [sp, #16]
 80193cc:	4303      	orrs	r3, r0
 80193ce:	3701      	adds	r7, #1
 80193d0:	9304      	str	r3, [sp, #16]
 80193d2:	7839      	ldrb	r1, [r7, #0]
 80193d4:	4827      	ldr	r0, [pc, #156]	; (8019474 <_svfiprintf_r+0x1e4>)
 80193d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193da:	2206      	movs	r2, #6
 80193dc:	1c7e      	adds	r6, r7, #1
 80193de:	f7e6 ff17 	bl	8000210 <memchr>
 80193e2:	2800      	cmp	r0, #0
 80193e4:	d038      	beq.n	8019458 <_svfiprintf_r+0x1c8>
 80193e6:	4b24      	ldr	r3, [pc, #144]	; (8019478 <_svfiprintf_r+0x1e8>)
 80193e8:	bb13      	cbnz	r3, 8019430 <_svfiprintf_r+0x1a0>
 80193ea:	9b03      	ldr	r3, [sp, #12]
 80193ec:	3307      	adds	r3, #7
 80193ee:	f023 0307 	bic.w	r3, r3, #7
 80193f2:	3308      	adds	r3, #8
 80193f4:	9303      	str	r3, [sp, #12]
 80193f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193f8:	444b      	add	r3, r9
 80193fa:	9309      	str	r3, [sp, #36]	; 0x24
 80193fc:	e76d      	b.n	80192da <_svfiprintf_r+0x4a>
 80193fe:	fb05 3202 	mla	r2, r5, r2, r3
 8019402:	2001      	movs	r0, #1
 8019404:	460f      	mov	r7, r1
 8019406:	e7a6      	b.n	8019356 <_svfiprintf_r+0xc6>
 8019408:	2300      	movs	r3, #0
 801940a:	3701      	adds	r7, #1
 801940c:	9305      	str	r3, [sp, #20]
 801940e:	4619      	mov	r1, r3
 8019410:	250a      	movs	r5, #10
 8019412:	4638      	mov	r0, r7
 8019414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019418:	3a30      	subs	r2, #48	; 0x30
 801941a:	2a09      	cmp	r2, #9
 801941c:	d903      	bls.n	8019426 <_svfiprintf_r+0x196>
 801941e:	2b00      	cmp	r3, #0
 8019420:	d0c8      	beq.n	80193b4 <_svfiprintf_r+0x124>
 8019422:	9105      	str	r1, [sp, #20]
 8019424:	e7c6      	b.n	80193b4 <_svfiprintf_r+0x124>
 8019426:	fb05 2101 	mla	r1, r5, r1, r2
 801942a:	2301      	movs	r3, #1
 801942c:	4607      	mov	r7, r0
 801942e:	e7f0      	b.n	8019412 <_svfiprintf_r+0x182>
 8019430:	ab03      	add	r3, sp, #12
 8019432:	9300      	str	r3, [sp, #0]
 8019434:	4622      	mov	r2, r4
 8019436:	4b11      	ldr	r3, [pc, #68]	; (801947c <_svfiprintf_r+0x1ec>)
 8019438:	a904      	add	r1, sp, #16
 801943a:	4640      	mov	r0, r8
 801943c:	f7fc fb60 	bl	8015b00 <_printf_float>
 8019440:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019444:	4681      	mov	r9, r0
 8019446:	d1d6      	bne.n	80193f6 <_svfiprintf_r+0x166>
 8019448:	89a3      	ldrh	r3, [r4, #12]
 801944a:	065b      	lsls	r3, r3, #25
 801944c:	f53f af35 	bmi.w	80192ba <_svfiprintf_r+0x2a>
 8019450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019452:	b01d      	add	sp, #116	; 0x74
 8019454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019458:	ab03      	add	r3, sp, #12
 801945a:	9300      	str	r3, [sp, #0]
 801945c:	4622      	mov	r2, r4
 801945e:	4b07      	ldr	r3, [pc, #28]	; (801947c <_svfiprintf_r+0x1ec>)
 8019460:	a904      	add	r1, sp, #16
 8019462:	4640      	mov	r0, r8
 8019464:	f7fc fe02 	bl	801606c <_printf_i>
 8019468:	e7ea      	b.n	8019440 <_svfiprintf_r+0x1b0>
 801946a:	bf00      	nop
 801946c:	0801a5ec 	.word	0x0801a5ec
 8019470:	0801a5f2 	.word	0x0801a5f2
 8019474:	0801a5f6 	.word	0x0801a5f6
 8019478:	08015b01 	.word	0x08015b01
 801947c:	080191dd 	.word	0x080191dd

08019480 <_sungetc_r>:
 8019480:	b538      	push	{r3, r4, r5, lr}
 8019482:	1c4b      	adds	r3, r1, #1
 8019484:	4614      	mov	r4, r2
 8019486:	d103      	bne.n	8019490 <_sungetc_r+0x10>
 8019488:	f04f 35ff 	mov.w	r5, #4294967295
 801948c:	4628      	mov	r0, r5
 801948e:	bd38      	pop	{r3, r4, r5, pc}
 8019490:	8993      	ldrh	r3, [r2, #12]
 8019492:	f023 0320 	bic.w	r3, r3, #32
 8019496:	8193      	strh	r3, [r2, #12]
 8019498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801949a:	6852      	ldr	r2, [r2, #4]
 801949c:	b2cd      	uxtb	r5, r1
 801949e:	b18b      	cbz	r3, 80194c4 <_sungetc_r+0x44>
 80194a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80194a2:	4293      	cmp	r3, r2
 80194a4:	dd08      	ble.n	80194b8 <_sungetc_r+0x38>
 80194a6:	6823      	ldr	r3, [r4, #0]
 80194a8:	1e5a      	subs	r2, r3, #1
 80194aa:	6022      	str	r2, [r4, #0]
 80194ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80194b0:	6863      	ldr	r3, [r4, #4]
 80194b2:	3301      	adds	r3, #1
 80194b4:	6063      	str	r3, [r4, #4]
 80194b6:	e7e9      	b.n	801948c <_sungetc_r+0xc>
 80194b8:	4621      	mov	r1, r4
 80194ba:	f000 fbc3 	bl	8019c44 <__submore>
 80194be:	2800      	cmp	r0, #0
 80194c0:	d0f1      	beq.n	80194a6 <_sungetc_r+0x26>
 80194c2:	e7e1      	b.n	8019488 <_sungetc_r+0x8>
 80194c4:	6921      	ldr	r1, [r4, #16]
 80194c6:	6823      	ldr	r3, [r4, #0]
 80194c8:	b151      	cbz	r1, 80194e0 <_sungetc_r+0x60>
 80194ca:	4299      	cmp	r1, r3
 80194cc:	d208      	bcs.n	80194e0 <_sungetc_r+0x60>
 80194ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80194d2:	42a9      	cmp	r1, r5
 80194d4:	d104      	bne.n	80194e0 <_sungetc_r+0x60>
 80194d6:	3b01      	subs	r3, #1
 80194d8:	3201      	adds	r2, #1
 80194da:	6023      	str	r3, [r4, #0]
 80194dc:	6062      	str	r2, [r4, #4]
 80194de:	e7d5      	b.n	801948c <_sungetc_r+0xc>
 80194e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80194e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194e8:	6363      	str	r3, [r4, #52]	; 0x34
 80194ea:	2303      	movs	r3, #3
 80194ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80194ee:	4623      	mov	r3, r4
 80194f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80194f4:	6023      	str	r3, [r4, #0]
 80194f6:	2301      	movs	r3, #1
 80194f8:	e7dc      	b.n	80194b4 <_sungetc_r+0x34>

080194fa <__ssrefill_r>:
 80194fa:	b510      	push	{r4, lr}
 80194fc:	460c      	mov	r4, r1
 80194fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019500:	b169      	cbz	r1, 801951e <__ssrefill_r+0x24>
 8019502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019506:	4299      	cmp	r1, r3
 8019508:	d001      	beq.n	801950e <__ssrefill_r+0x14>
 801950a:	f7ff fdbf 	bl	801908c <_free_r>
 801950e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019510:	6063      	str	r3, [r4, #4]
 8019512:	2000      	movs	r0, #0
 8019514:	6360      	str	r0, [r4, #52]	; 0x34
 8019516:	b113      	cbz	r3, 801951e <__ssrefill_r+0x24>
 8019518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801951a:	6023      	str	r3, [r4, #0]
 801951c:	bd10      	pop	{r4, pc}
 801951e:	6923      	ldr	r3, [r4, #16]
 8019520:	6023      	str	r3, [r4, #0]
 8019522:	2300      	movs	r3, #0
 8019524:	6063      	str	r3, [r4, #4]
 8019526:	89a3      	ldrh	r3, [r4, #12]
 8019528:	f043 0320 	orr.w	r3, r3, #32
 801952c:	81a3      	strh	r3, [r4, #12]
 801952e:	f04f 30ff 	mov.w	r0, #4294967295
 8019532:	e7f3      	b.n	801951c <__ssrefill_r+0x22>

08019534 <__ssvfiscanf_r>:
 8019534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019538:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801953c:	460c      	mov	r4, r1
 801953e:	2100      	movs	r1, #0
 8019540:	9144      	str	r1, [sp, #272]	; 0x110
 8019542:	9145      	str	r1, [sp, #276]	; 0x114
 8019544:	499f      	ldr	r1, [pc, #636]	; (80197c4 <__ssvfiscanf_r+0x290>)
 8019546:	91a0      	str	r1, [sp, #640]	; 0x280
 8019548:	f10d 0804 	add.w	r8, sp, #4
 801954c:	499e      	ldr	r1, [pc, #632]	; (80197c8 <__ssvfiscanf_r+0x294>)
 801954e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80197cc <__ssvfiscanf_r+0x298>
 8019552:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019556:	4606      	mov	r6, r0
 8019558:	4692      	mov	sl, r2
 801955a:	91a1      	str	r1, [sp, #644]	; 0x284
 801955c:	9300      	str	r3, [sp, #0]
 801955e:	270a      	movs	r7, #10
 8019560:	f89a 3000 	ldrb.w	r3, [sl]
 8019564:	2b00      	cmp	r3, #0
 8019566:	f000 812a 	beq.w	80197be <__ssvfiscanf_r+0x28a>
 801956a:	4655      	mov	r5, sl
 801956c:	f7ff f93e 	bl	80187ec <__locale_ctype_ptr>
 8019570:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019574:	4458      	add	r0, fp
 8019576:	7843      	ldrb	r3, [r0, #1]
 8019578:	f013 0308 	ands.w	r3, r3, #8
 801957c:	d01c      	beq.n	80195b8 <__ssvfiscanf_r+0x84>
 801957e:	6863      	ldr	r3, [r4, #4]
 8019580:	2b00      	cmp	r3, #0
 8019582:	dd12      	ble.n	80195aa <__ssvfiscanf_r+0x76>
 8019584:	f7ff f932 	bl	80187ec <__locale_ctype_ptr>
 8019588:	6823      	ldr	r3, [r4, #0]
 801958a:	781a      	ldrb	r2, [r3, #0]
 801958c:	4410      	add	r0, r2
 801958e:	7842      	ldrb	r2, [r0, #1]
 8019590:	0712      	lsls	r2, r2, #28
 8019592:	d401      	bmi.n	8019598 <__ssvfiscanf_r+0x64>
 8019594:	46aa      	mov	sl, r5
 8019596:	e7e3      	b.n	8019560 <__ssvfiscanf_r+0x2c>
 8019598:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801959a:	3201      	adds	r2, #1
 801959c:	9245      	str	r2, [sp, #276]	; 0x114
 801959e:	6862      	ldr	r2, [r4, #4]
 80195a0:	3301      	adds	r3, #1
 80195a2:	3a01      	subs	r2, #1
 80195a4:	6062      	str	r2, [r4, #4]
 80195a6:	6023      	str	r3, [r4, #0]
 80195a8:	e7e9      	b.n	801957e <__ssvfiscanf_r+0x4a>
 80195aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195ac:	4621      	mov	r1, r4
 80195ae:	4630      	mov	r0, r6
 80195b0:	4798      	blx	r3
 80195b2:	2800      	cmp	r0, #0
 80195b4:	d0e6      	beq.n	8019584 <__ssvfiscanf_r+0x50>
 80195b6:	e7ed      	b.n	8019594 <__ssvfiscanf_r+0x60>
 80195b8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80195bc:	f040 8082 	bne.w	80196c4 <__ssvfiscanf_r+0x190>
 80195c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80195c2:	9341      	str	r3, [sp, #260]	; 0x104
 80195c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80195c8:	2b2a      	cmp	r3, #42	; 0x2a
 80195ca:	d103      	bne.n	80195d4 <__ssvfiscanf_r+0xa0>
 80195cc:	2310      	movs	r3, #16
 80195ce:	9341      	str	r3, [sp, #260]	; 0x104
 80195d0:	f10a 0502 	add.w	r5, sl, #2
 80195d4:	46aa      	mov	sl, r5
 80195d6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80195da:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80195de:	2a09      	cmp	r2, #9
 80195e0:	d922      	bls.n	8019628 <__ssvfiscanf_r+0xf4>
 80195e2:	2203      	movs	r2, #3
 80195e4:	4879      	ldr	r0, [pc, #484]	; (80197cc <__ssvfiscanf_r+0x298>)
 80195e6:	f7e6 fe13 	bl	8000210 <memchr>
 80195ea:	b138      	cbz	r0, 80195fc <__ssvfiscanf_r+0xc8>
 80195ec:	eba0 0309 	sub.w	r3, r0, r9
 80195f0:	2001      	movs	r0, #1
 80195f2:	4098      	lsls	r0, r3
 80195f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195f6:	4318      	orrs	r0, r3
 80195f8:	9041      	str	r0, [sp, #260]	; 0x104
 80195fa:	46aa      	mov	sl, r5
 80195fc:	f89a 3000 	ldrb.w	r3, [sl]
 8019600:	2b67      	cmp	r3, #103	; 0x67
 8019602:	f10a 0501 	add.w	r5, sl, #1
 8019606:	d82b      	bhi.n	8019660 <__ssvfiscanf_r+0x12c>
 8019608:	2b65      	cmp	r3, #101	; 0x65
 801960a:	f080 809f 	bcs.w	801974c <__ssvfiscanf_r+0x218>
 801960e:	2b47      	cmp	r3, #71	; 0x47
 8019610:	d810      	bhi.n	8019634 <__ssvfiscanf_r+0x100>
 8019612:	2b45      	cmp	r3, #69	; 0x45
 8019614:	f080 809a 	bcs.w	801974c <__ssvfiscanf_r+0x218>
 8019618:	2b00      	cmp	r3, #0
 801961a:	d06c      	beq.n	80196f6 <__ssvfiscanf_r+0x1c2>
 801961c:	2b25      	cmp	r3, #37	; 0x25
 801961e:	d051      	beq.n	80196c4 <__ssvfiscanf_r+0x190>
 8019620:	2303      	movs	r3, #3
 8019622:	9347      	str	r3, [sp, #284]	; 0x11c
 8019624:	9742      	str	r7, [sp, #264]	; 0x108
 8019626:	e027      	b.n	8019678 <__ssvfiscanf_r+0x144>
 8019628:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801962a:	fb07 1303 	mla	r3, r7, r3, r1
 801962e:	3b30      	subs	r3, #48	; 0x30
 8019630:	9343      	str	r3, [sp, #268]	; 0x10c
 8019632:	e7cf      	b.n	80195d4 <__ssvfiscanf_r+0xa0>
 8019634:	2b5b      	cmp	r3, #91	; 0x5b
 8019636:	d06a      	beq.n	801970e <__ssvfiscanf_r+0x1da>
 8019638:	d80c      	bhi.n	8019654 <__ssvfiscanf_r+0x120>
 801963a:	2b58      	cmp	r3, #88	; 0x58
 801963c:	d1f0      	bne.n	8019620 <__ssvfiscanf_r+0xec>
 801963e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019644:	9241      	str	r2, [sp, #260]	; 0x104
 8019646:	2210      	movs	r2, #16
 8019648:	9242      	str	r2, [sp, #264]	; 0x108
 801964a:	2b6e      	cmp	r3, #110	; 0x6e
 801964c:	bf8c      	ite	hi
 801964e:	2304      	movhi	r3, #4
 8019650:	2303      	movls	r3, #3
 8019652:	e010      	b.n	8019676 <__ssvfiscanf_r+0x142>
 8019654:	2b63      	cmp	r3, #99	; 0x63
 8019656:	d065      	beq.n	8019724 <__ssvfiscanf_r+0x1f0>
 8019658:	2b64      	cmp	r3, #100	; 0x64
 801965a:	d1e1      	bne.n	8019620 <__ssvfiscanf_r+0xec>
 801965c:	9742      	str	r7, [sp, #264]	; 0x108
 801965e:	e7f4      	b.n	801964a <__ssvfiscanf_r+0x116>
 8019660:	2b70      	cmp	r3, #112	; 0x70
 8019662:	d04b      	beq.n	80196fc <__ssvfiscanf_r+0x1c8>
 8019664:	d826      	bhi.n	80196b4 <__ssvfiscanf_r+0x180>
 8019666:	2b6e      	cmp	r3, #110	; 0x6e
 8019668:	d062      	beq.n	8019730 <__ssvfiscanf_r+0x1fc>
 801966a:	d84c      	bhi.n	8019706 <__ssvfiscanf_r+0x1d2>
 801966c:	2b69      	cmp	r3, #105	; 0x69
 801966e:	d1d7      	bne.n	8019620 <__ssvfiscanf_r+0xec>
 8019670:	2300      	movs	r3, #0
 8019672:	9342      	str	r3, [sp, #264]	; 0x108
 8019674:	2303      	movs	r3, #3
 8019676:	9347      	str	r3, [sp, #284]	; 0x11c
 8019678:	6863      	ldr	r3, [r4, #4]
 801967a:	2b00      	cmp	r3, #0
 801967c:	dd68      	ble.n	8019750 <__ssvfiscanf_r+0x21c>
 801967e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019680:	0659      	lsls	r1, r3, #25
 8019682:	d407      	bmi.n	8019694 <__ssvfiscanf_r+0x160>
 8019684:	f7ff f8b2 	bl	80187ec <__locale_ctype_ptr>
 8019688:	6823      	ldr	r3, [r4, #0]
 801968a:	781a      	ldrb	r2, [r3, #0]
 801968c:	4410      	add	r0, r2
 801968e:	7842      	ldrb	r2, [r0, #1]
 8019690:	0712      	lsls	r2, r2, #28
 8019692:	d464      	bmi.n	801975e <__ssvfiscanf_r+0x22a>
 8019694:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019696:	2b02      	cmp	r3, #2
 8019698:	dc73      	bgt.n	8019782 <__ssvfiscanf_r+0x24e>
 801969a:	466b      	mov	r3, sp
 801969c:	4622      	mov	r2, r4
 801969e:	a941      	add	r1, sp, #260	; 0x104
 80196a0:	4630      	mov	r0, r6
 80196a2:	f000 f897 	bl	80197d4 <_scanf_chars>
 80196a6:	2801      	cmp	r0, #1
 80196a8:	f000 8089 	beq.w	80197be <__ssvfiscanf_r+0x28a>
 80196ac:	2802      	cmp	r0, #2
 80196ae:	f47f af71 	bne.w	8019594 <__ssvfiscanf_r+0x60>
 80196b2:	e01d      	b.n	80196f0 <__ssvfiscanf_r+0x1bc>
 80196b4:	2b75      	cmp	r3, #117	; 0x75
 80196b6:	d0d1      	beq.n	801965c <__ssvfiscanf_r+0x128>
 80196b8:	2b78      	cmp	r3, #120	; 0x78
 80196ba:	d0c0      	beq.n	801963e <__ssvfiscanf_r+0x10a>
 80196bc:	2b73      	cmp	r3, #115	; 0x73
 80196be:	d1af      	bne.n	8019620 <__ssvfiscanf_r+0xec>
 80196c0:	2302      	movs	r3, #2
 80196c2:	e7d8      	b.n	8019676 <__ssvfiscanf_r+0x142>
 80196c4:	6863      	ldr	r3, [r4, #4]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	dd0c      	ble.n	80196e4 <__ssvfiscanf_r+0x1b0>
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	781a      	ldrb	r2, [r3, #0]
 80196ce:	455a      	cmp	r2, fp
 80196d0:	d175      	bne.n	80197be <__ssvfiscanf_r+0x28a>
 80196d2:	3301      	adds	r3, #1
 80196d4:	6862      	ldr	r2, [r4, #4]
 80196d6:	6023      	str	r3, [r4, #0]
 80196d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80196da:	3a01      	subs	r2, #1
 80196dc:	3301      	adds	r3, #1
 80196de:	6062      	str	r2, [r4, #4]
 80196e0:	9345      	str	r3, [sp, #276]	; 0x114
 80196e2:	e757      	b.n	8019594 <__ssvfiscanf_r+0x60>
 80196e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196e6:	4621      	mov	r1, r4
 80196e8:	4630      	mov	r0, r6
 80196ea:	4798      	blx	r3
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d0ec      	beq.n	80196ca <__ssvfiscanf_r+0x196>
 80196f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80196f2:	2800      	cmp	r0, #0
 80196f4:	d159      	bne.n	80197aa <__ssvfiscanf_r+0x276>
 80196f6:	f04f 30ff 	mov.w	r0, #4294967295
 80196fa:	e05c      	b.n	80197b6 <__ssvfiscanf_r+0x282>
 80196fc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80196fe:	f042 0220 	orr.w	r2, r2, #32
 8019702:	9241      	str	r2, [sp, #260]	; 0x104
 8019704:	e79b      	b.n	801963e <__ssvfiscanf_r+0x10a>
 8019706:	2308      	movs	r3, #8
 8019708:	9342      	str	r3, [sp, #264]	; 0x108
 801970a:	2304      	movs	r3, #4
 801970c:	e7b3      	b.n	8019676 <__ssvfiscanf_r+0x142>
 801970e:	4629      	mov	r1, r5
 8019710:	4640      	mov	r0, r8
 8019712:	f000 f9c7 	bl	8019aa4 <__sccl>
 8019716:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801971c:	9341      	str	r3, [sp, #260]	; 0x104
 801971e:	4605      	mov	r5, r0
 8019720:	2301      	movs	r3, #1
 8019722:	e7a8      	b.n	8019676 <__ssvfiscanf_r+0x142>
 8019724:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801972a:	9341      	str	r3, [sp, #260]	; 0x104
 801972c:	2300      	movs	r3, #0
 801972e:	e7a2      	b.n	8019676 <__ssvfiscanf_r+0x142>
 8019730:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019732:	06c3      	lsls	r3, r0, #27
 8019734:	f53f af2e 	bmi.w	8019594 <__ssvfiscanf_r+0x60>
 8019738:	9b00      	ldr	r3, [sp, #0]
 801973a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801973c:	1d19      	adds	r1, r3, #4
 801973e:	9100      	str	r1, [sp, #0]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	07c0      	lsls	r0, r0, #31
 8019744:	bf4c      	ite	mi
 8019746:	801a      	strhmi	r2, [r3, #0]
 8019748:	601a      	strpl	r2, [r3, #0]
 801974a:	e723      	b.n	8019594 <__ssvfiscanf_r+0x60>
 801974c:	2305      	movs	r3, #5
 801974e:	e792      	b.n	8019676 <__ssvfiscanf_r+0x142>
 8019750:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019752:	4621      	mov	r1, r4
 8019754:	4630      	mov	r0, r6
 8019756:	4798      	blx	r3
 8019758:	2800      	cmp	r0, #0
 801975a:	d090      	beq.n	801967e <__ssvfiscanf_r+0x14a>
 801975c:	e7c8      	b.n	80196f0 <__ssvfiscanf_r+0x1bc>
 801975e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019760:	3201      	adds	r2, #1
 8019762:	9245      	str	r2, [sp, #276]	; 0x114
 8019764:	6862      	ldr	r2, [r4, #4]
 8019766:	3a01      	subs	r2, #1
 8019768:	2a00      	cmp	r2, #0
 801976a:	6062      	str	r2, [r4, #4]
 801976c:	dd02      	ble.n	8019774 <__ssvfiscanf_r+0x240>
 801976e:	3301      	adds	r3, #1
 8019770:	6023      	str	r3, [r4, #0]
 8019772:	e787      	b.n	8019684 <__ssvfiscanf_r+0x150>
 8019774:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019776:	4621      	mov	r1, r4
 8019778:	4630      	mov	r0, r6
 801977a:	4798      	blx	r3
 801977c:	2800      	cmp	r0, #0
 801977e:	d081      	beq.n	8019684 <__ssvfiscanf_r+0x150>
 8019780:	e7b6      	b.n	80196f0 <__ssvfiscanf_r+0x1bc>
 8019782:	2b04      	cmp	r3, #4
 8019784:	dc06      	bgt.n	8019794 <__ssvfiscanf_r+0x260>
 8019786:	466b      	mov	r3, sp
 8019788:	4622      	mov	r2, r4
 801978a:	a941      	add	r1, sp, #260	; 0x104
 801978c:	4630      	mov	r0, r6
 801978e:	f000 f885 	bl	801989c <_scanf_i>
 8019792:	e788      	b.n	80196a6 <__ssvfiscanf_r+0x172>
 8019794:	4b0e      	ldr	r3, [pc, #56]	; (80197d0 <__ssvfiscanf_r+0x29c>)
 8019796:	2b00      	cmp	r3, #0
 8019798:	f43f aefc 	beq.w	8019594 <__ssvfiscanf_r+0x60>
 801979c:	466b      	mov	r3, sp
 801979e:	4622      	mov	r2, r4
 80197a0:	a941      	add	r1, sp, #260	; 0x104
 80197a2:	4630      	mov	r0, r6
 80197a4:	f7fc fd74 	bl	8016290 <_scanf_float>
 80197a8:	e77d      	b.n	80196a6 <__ssvfiscanf_r+0x172>
 80197aa:	89a3      	ldrh	r3, [r4, #12]
 80197ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80197b0:	bf18      	it	ne
 80197b2:	f04f 30ff 	movne.w	r0, #4294967295
 80197b6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80197ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80197c0:	e7f9      	b.n	80197b6 <__ssvfiscanf_r+0x282>
 80197c2:	bf00      	nop
 80197c4:	08019481 	.word	0x08019481
 80197c8:	080194fb 	.word	0x080194fb
 80197cc:	0801a5f2 	.word	0x0801a5f2
 80197d0:	08016291 	.word	0x08016291

080197d4 <_scanf_chars>:
 80197d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197d8:	4615      	mov	r5, r2
 80197da:	688a      	ldr	r2, [r1, #8]
 80197dc:	4680      	mov	r8, r0
 80197de:	460c      	mov	r4, r1
 80197e0:	b932      	cbnz	r2, 80197f0 <_scanf_chars+0x1c>
 80197e2:	698a      	ldr	r2, [r1, #24]
 80197e4:	2a00      	cmp	r2, #0
 80197e6:	bf14      	ite	ne
 80197e8:	f04f 32ff 	movne.w	r2, #4294967295
 80197ec:	2201      	moveq	r2, #1
 80197ee:	608a      	str	r2, [r1, #8]
 80197f0:	6822      	ldr	r2, [r4, #0]
 80197f2:	06d1      	lsls	r1, r2, #27
 80197f4:	bf5f      	itttt	pl
 80197f6:	681a      	ldrpl	r2, [r3, #0]
 80197f8:	1d11      	addpl	r1, r2, #4
 80197fa:	6019      	strpl	r1, [r3, #0]
 80197fc:	6817      	ldrpl	r7, [r2, #0]
 80197fe:	2600      	movs	r6, #0
 8019800:	69a3      	ldr	r3, [r4, #24]
 8019802:	b1db      	cbz	r3, 801983c <_scanf_chars+0x68>
 8019804:	2b01      	cmp	r3, #1
 8019806:	d107      	bne.n	8019818 <_scanf_chars+0x44>
 8019808:	682b      	ldr	r3, [r5, #0]
 801980a:	6962      	ldr	r2, [r4, #20]
 801980c:	781b      	ldrb	r3, [r3, #0]
 801980e:	5cd3      	ldrb	r3, [r2, r3]
 8019810:	b9a3      	cbnz	r3, 801983c <_scanf_chars+0x68>
 8019812:	2e00      	cmp	r6, #0
 8019814:	d132      	bne.n	801987c <_scanf_chars+0xa8>
 8019816:	e006      	b.n	8019826 <_scanf_chars+0x52>
 8019818:	2b02      	cmp	r3, #2
 801981a:	d007      	beq.n	801982c <_scanf_chars+0x58>
 801981c:	2e00      	cmp	r6, #0
 801981e:	d12d      	bne.n	801987c <_scanf_chars+0xa8>
 8019820:	69a3      	ldr	r3, [r4, #24]
 8019822:	2b01      	cmp	r3, #1
 8019824:	d12a      	bne.n	801987c <_scanf_chars+0xa8>
 8019826:	2001      	movs	r0, #1
 8019828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801982c:	f7fe ffde 	bl	80187ec <__locale_ctype_ptr>
 8019830:	682b      	ldr	r3, [r5, #0]
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	4418      	add	r0, r3
 8019836:	7843      	ldrb	r3, [r0, #1]
 8019838:	071b      	lsls	r3, r3, #28
 801983a:	d4ef      	bmi.n	801981c <_scanf_chars+0x48>
 801983c:	6823      	ldr	r3, [r4, #0]
 801983e:	06da      	lsls	r2, r3, #27
 8019840:	bf5e      	ittt	pl
 8019842:	682b      	ldrpl	r3, [r5, #0]
 8019844:	781b      	ldrbpl	r3, [r3, #0]
 8019846:	703b      	strbpl	r3, [r7, #0]
 8019848:	682a      	ldr	r2, [r5, #0]
 801984a:	686b      	ldr	r3, [r5, #4]
 801984c:	f102 0201 	add.w	r2, r2, #1
 8019850:	602a      	str	r2, [r5, #0]
 8019852:	68a2      	ldr	r2, [r4, #8]
 8019854:	f103 33ff 	add.w	r3, r3, #4294967295
 8019858:	f102 32ff 	add.w	r2, r2, #4294967295
 801985c:	606b      	str	r3, [r5, #4]
 801985e:	f106 0601 	add.w	r6, r6, #1
 8019862:	bf58      	it	pl
 8019864:	3701      	addpl	r7, #1
 8019866:	60a2      	str	r2, [r4, #8]
 8019868:	b142      	cbz	r2, 801987c <_scanf_chars+0xa8>
 801986a:	2b00      	cmp	r3, #0
 801986c:	dcc8      	bgt.n	8019800 <_scanf_chars+0x2c>
 801986e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019872:	4629      	mov	r1, r5
 8019874:	4640      	mov	r0, r8
 8019876:	4798      	blx	r3
 8019878:	2800      	cmp	r0, #0
 801987a:	d0c1      	beq.n	8019800 <_scanf_chars+0x2c>
 801987c:	6823      	ldr	r3, [r4, #0]
 801987e:	f013 0310 	ands.w	r3, r3, #16
 8019882:	d105      	bne.n	8019890 <_scanf_chars+0xbc>
 8019884:	68e2      	ldr	r2, [r4, #12]
 8019886:	3201      	adds	r2, #1
 8019888:	60e2      	str	r2, [r4, #12]
 801988a:	69a2      	ldr	r2, [r4, #24]
 801988c:	b102      	cbz	r2, 8019890 <_scanf_chars+0xbc>
 801988e:	703b      	strb	r3, [r7, #0]
 8019890:	6923      	ldr	r3, [r4, #16]
 8019892:	441e      	add	r6, r3
 8019894:	6126      	str	r6, [r4, #16]
 8019896:	2000      	movs	r0, #0
 8019898:	e7c6      	b.n	8019828 <_scanf_chars+0x54>
	...

0801989c <_scanf_i>:
 801989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198a0:	469a      	mov	sl, r3
 80198a2:	4b74      	ldr	r3, [pc, #464]	; (8019a74 <_scanf_i+0x1d8>)
 80198a4:	460c      	mov	r4, r1
 80198a6:	4683      	mov	fp, r0
 80198a8:	4616      	mov	r6, r2
 80198aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198ae:	b087      	sub	sp, #28
 80198b0:	ab03      	add	r3, sp, #12
 80198b2:	68a7      	ldr	r7, [r4, #8]
 80198b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198b8:	4b6f      	ldr	r3, [pc, #444]	; (8019a78 <_scanf_i+0x1dc>)
 80198ba:	69a1      	ldr	r1, [r4, #24]
 80198bc:	4a6f      	ldr	r2, [pc, #444]	; (8019a7c <_scanf_i+0x1e0>)
 80198be:	2903      	cmp	r1, #3
 80198c0:	bf08      	it	eq
 80198c2:	461a      	moveq	r2, r3
 80198c4:	1e7b      	subs	r3, r7, #1
 80198c6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80198ca:	bf84      	itt	hi
 80198cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80198d0:	60a3      	strhi	r3, [r4, #8]
 80198d2:	6823      	ldr	r3, [r4, #0]
 80198d4:	9200      	str	r2, [sp, #0]
 80198d6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80198da:	bf88      	it	hi
 80198dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80198e0:	f104 091c 	add.w	r9, r4, #28
 80198e4:	6023      	str	r3, [r4, #0]
 80198e6:	bf8c      	ite	hi
 80198e8:	197f      	addhi	r7, r7, r5
 80198ea:	2700      	movls	r7, #0
 80198ec:	464b      	mov	r3, r9
 80198ee:	f04f 0800 	mov.w	r8, #0
 80198f2:	9301      	str	r3, [sp, #4]
 80198f4:	6831      	ldr	r1, [r6, #0]
 80198f6:	ab03      	add	r3, sp, #12
 80198f8:	2202      	movs	r2, #2
 80198fa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80198fe:	7809      	ldrb	r1, [r1, #0]
 8019900:	f7e6 fc86 	bl	8000210 <memchr>
 8019904:	9b01      	ldr	r3, [sp, #4]
 8019906:	b330      	cbz	r0, 8019956 <_scanf_i+0xba>
 8019908:	f1b8 0f01 	cmp.w	r8, #1
 801990c:	d15a      	bne.n	80199c4 <_scanf_i+0x128>
 801990e:	6862      	ldr	r2, [r4, #4]
 8019910:	b92a      	cbnz	r2, 801991e <_scanf_i+0x82>
 8019912:	6822      	ldr	r2, [r4, #0]
 8019914:	2108      	movs	r1, #8
 8019916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801991a:	6061      	str	r1, [r4, #4]
 801991c:	6022      	str	r2, [r4, #0]
 801991e:	6822      	ldr	r2, [r4, #0]
 8019920:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019924:	6022      	str	r2, [r4, #0]
 8019926:	68a2      	ldr	r2, [r4, #8]
 8019928:	1e51      	subs	r1, r2, #1
 801992a:	60a1      	str	r1, [r4, #8]
 801992c:	b19a      	cbz	r2, 8019956 <_scanf_i+0xba>
 801992e:	6832      	ldr	r2, [r6, #0]
 8019930:	1c51      	adds	r1, r2, #1
 8019932:	6031      	str	r1, [r6, #0]
 8019934:	7812      	ldrb	r2, [r2, #0]
 8019936:	701a      	strb	r2, [r3, #0]
 8019938:	1c5d      	adds	r5, r3, #1
 801993a:	6873      	ldr	r3, [r6, #4]
 801993c:	3b01      	subs	r3, #1
 801993e:	2b00      	cmp	r3, #0
 8019940:	6073      	str	r3, [r6, #4]
 8019942:	dc07      	bgt.n	8019954 <_scanf_i+0xb8>
 8019944:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019948:	4631      	mov	r1, r6
 801994a:	4658      	mov	r0, fp
 801994c:	4798      	blx	r3
 801994e:	2800      	cmp	r0, #0
 8019950:	f040 8086 	bne.w	8019a60 <_scanf_i+0x1c4>
 8019954:	462b      	mov	r3, r5
 8019956:	f108 0801 	add.w	r8, r8, #1
 801995a:	f1b8 0f03 	cmp.w	r8, #3
 801995e:	d1c8      	bne.n	80198f2 <_scanf_i+0x56>
 8019960:	6862      	ldr	r2, [r4, #4]
 8019962:	b90a      	cbnz	r2, 8019968 <_scanf_i+0xcc>
 8019964:	220a      	movs	r2, #10
 8019966:	6062      	str	r2, [r4, #4]
 8019968:	6862      	ldr	r2, [r4, #4]
 801996a:	4945      	ldr	r1, [pc, #276]	; (8019a80 <_scanf_i+0x1e4>)
 801996c:	6960      	ldr	r0, [r4, #20]
 801996e:	9301      	str	r3, [sp, #4]
 8019970:	1a89      	subs	r1, r1, r2
 8019972:	f000 f897 	bl	8019aa4 <__sccl>
 8019976:	9b01      	ldr	r3, [sp, #4]
 8019978:	f04f 0800 	mov.w	r8, #0
 801997c:	461d      	mov	r5, r3
 801997e:	68a3      	ldr	r3, [r4, #8]
 8019980:	6822      	ldr	r2, [r4, #0]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d03a      	beq.n	80199fc <_scanf_i+0x160>
 8019986:	6831      	ldr	r1, [r6, #0]
 8019988:	6960      	ldr	r0, [r4, #20]
 801998a:	f891 c000 	ldrb.w	ip, [r1]
 801998e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019992:	2800      	cmp	r0, #0
 8019994:	d032      	beq.n	80199fc <_scanf_i+0x160>
 8019996:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801999a:	d121      	bne.n	80199e0 <_scanf_i+0x144>
 801999c:	0510      	lsls	r0, r2, #20
 801999e:	d51f      	bpl.n	80199e0 <_scanf_i+0x144>
 80199a0:	f108 0801 	add.w	r8, r8, #1
 80199a4:	b117      	cbz	r7, 80199ac <_scanf_i+0x110>
 80199a6:	3301      	adds	r3, #1
 80199a8:	3f01      	subs	r7, #1
 80199aa:	60a3      	str	r3, [r4, #8]
 80199ac:	6873      	ldr	r3, [r6, #4]
 80199ae:	3b01      	subs	r3, #1
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	6073      	str	r3, [r6, #4]
 80199b4:	dd1b      	ble.n	80199ee <_scanf_i+0x152>
 80199b6:	6833      	ldr	r3, [r6, #0]
 80199b8:	3301      	adds	r3, #1
 80199ba:	6033      	str	r3, [r6, #0]
 80199bc:	68a3      	ldr	r3, [r4, #8]
 80199be:	3b01      	subs	r3, #1
 80199c0:	60a3      	str	r3, [r4, #8]
 80199c2:	e7dc      	b.n	801997e <_scanf_i+0xe2>
 80199c4:	f1b8 0f02 	cmp.w	r8, #2
 80199c8:	d1ad      	bne.n	8019926 <_scanf_i+0x8a>
 80199ca:	6822      	ldr	r2, [r4, #0]
 80199cc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80199d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80199d4:	d1bf      	bne.n	8019956 <_scanf_i+0xba>
 80199d6:	2110      	movs	r1, #16
 80199d8:	6061      	str	r1, [r4, #4]
 80199da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80199de:	e7a1      	b.n	8019924 <_scanf_i+0x88>
 80199e0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80199e4:	6022      	str	r2, [r4, #0]
 80199e6:	780b      	ldrb	r3, [r1, #0]
 80199e8:	702b      	strb	r3, [r5, #0]
 80199ea:	3501      	adds	r5, #1
 80199ec:	e7de      	b.n	80199ac <_scanf_i+0x110>
 80199ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80199f2:	4631      	mov	r1, r6
 80199f4:	4658      	mov	r0, fp
 80199f6:	4798      	blx	r3
 80199f8:	2800      	cmp	r0, #0
 80199fa:	d0df      	beq.n	80199bc <_scanf_i+0x120>
 80199fc:	6823      	ldr	r3, [r4, #0]
 80199fe:	05d9      	lsls	r1, r3, #23
 8019a00:	d50c      	bpl.n	8019a1c <_scanf_i+0x180>
 8019a02:	454d      	cmp	r5, r9
 8019a04:	d908      	bls.n	8019a18 <_scanf_i+0x17c>
 8019a06:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019a0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019a0e:	4632      	mov	r2, r6
 8019a10:	4658      	mov	r0, fp
 8019a12:	4798      	blx	r3
 8019a14:	1e6f      	subs	r7, r5, #1
 8019a16:	463d      	mov	r5, r7
 8019a18:	454d      	cmp	r5, r9
 8019a1a:	d029      	beq.n	8019a70 <_scanf_i+0x1d4>
 8019a1c:	6822      	ldr	r2, [r4, #0]
 8019a1e:	f012 0210 	ands.w	r2, r2, #16
 8019a22:	d113      	bne.n	8019a4c <_scanf_i+0x1b0>
 8019a24:	702a      	strb	r2, [r5, #0]
 8019a26:	6863      	ldr	r3, [r4, #4]
 8019a28:	9e00      	ldr	r6, [sp, #0]
 8019a2a:	4649      	mov	r1, r9
 8019a2c:	4658      	mov	r0, fp
 8019a2e:	47b0      	blx	r6
 8019a30:	f8da 3000 	ldr.w	r3, [sl]
 8019a34:	6821      	ldr	r1, [r4, #0]
 8019a36:	1d1a      	adds	r2, r3, #4
 8019a38:	f8ca 2000 	str.w	r2, [sl]
 8019a3c:	f011 0f20 	tst.w	r1, #32
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	d010      	beq.n	8019a66 <_scanf_i+0x1ca>
 8019a44:	6018      	str	r0, [r3, #0]
 8019a46:	68e3      	ldr	r3, [r4, #12]
 8019a48:	3301      	adds	r3, #1
 8019a4a:	60e3      	str	r3, [r4, #12]
 8019a4c:	eba5 0509 	sub.w	r5, r5, r9
 8019a50:	44a8      	add	r8, r5
 8019a52:	6925      	ldr	r5, [r4, #16]
 8019a54:	4445      	add	r5, r8
 8019a56:	6125      	str	r5, [r4, #16]
 8019a58:	2000      	movs	r0, #0
 8019a5a:	b007      	add	sp, #28
 8019a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a60:	f04f 0800 	mov.w	r8, #0
 8019a64:	e7ca      	b.n	80199fc <_scanf_i+0x160>
 8019a66:	07ca      	lsls	r2, r1, #31
 8019a68:	bf4c      	ite	mi
 8019a6a:	8018      	strhmi	r0, [r3, #0]
 8019a6c:	6018      	strpl	r0, [r3, #0]
 8019a6e:	e7ea      	b.n	8019a46 <_scanf_i+0x1aa>
 8019a70:	2001      	movs	r0, #1
 8019a72:	e7f2      	b.n	8019a5a <_scanf_i+0x1be>
 8019a74:	0801a1b4 	.word	0x0801a1b4
 8019a78:	080174a9 	.word	0x080174a9
 8019a7c:	08019c21 	.word	0x08019c21
 8019a80:	0801a60d 	.word	0x0801a60d

08019a84 <_sbrk_r>:
 8019a84:	b538      	push	{r3, r4, r5, lr}
 8019a86:	4c06      	ldr	r4, [pc, #24]	; (8019aa0 <_sbrk_r+0x1c>)
 8019a88:	2300      	movs	r3, #0
 8019a8a:	4605      	mov	r5, r0
 8019a8c:	4608      	mov	r0, r1
 8019a8e:	6023      	str	r3, [r4, #0]
 8019a90:	f7ed ffc6 	bl	8007a20 <_sbrk>
 8019a94:	1c43      	adds	r3, r0, #1
 8019a96:	d102      	bne.n	8019a9e <_sbrk_r+0x1a>
 8019a98:	6823      	ldr	r3, [r4, #0]
 8019a9a:	b103      	cbz	r3, 8019a9e <_sbrk_r+0x1a>
 8019a9c:	602b      	str	r3, [r5, #0]
 8019a9e:	bd38      	pop	{r3, r4, r5, pc}
 8019aa0:	20046cdc 	.word	0x20046cdc

08019aa4 <__sccl>:
 8019aa4:	b570      	push	{r4, r5, r6, lr}
 8019aa6:	780b      	ldrb	r3, [r1, #0]
 8019aa8:	2b5e      	cmp	r3, #94	; 0x5e
 8019aaa:	bf13      	iteet	ne
 8019aac:	1c4a      	addne	r2, r1, #1
 8019aae:	1c8a      	addeq	r2, r1, #2
 8019ab0:	784b      	ldrbeq	r3, [r1, #1]
 8019ab2:	2100      	movne	r1, #0
 8019ab4:	bf08      	it	eq
 8019ab6:	2101      	moveq	r1, #1
 8019ab8:	1e44      	subs	r4, r0, #1
 8019aba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019abe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019ac2:	42ac      	cmp	r4, r5
 8019ac4:	d1fb      	bne.n	8019abe <__sccl+0x1a>
 8019ac6:	b913      	cbnz	r3, 8019ace <__sccl+0x2a>
 8019ac8:	3a01      	subs	r2, #1
 8019aca:	4610      	mov	r0, r2
 8019acc:	bd70      	pop	{r4, r5, r6, pc}
 8019ace:	f081 0401 	eor.w	r4, r1, #1
 8019ad2:	54c4      	strb	r4, [r0, r3]
 8019ad4:	1c51      	adds	r1, r2, #1
 8019ad6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019ada:	2d2d      	cmp	r5, #45	; 0x2d
 8019adc:	f101 36ff 	add.w	r6, r1, #4294967295
 8019ae0:	460a      	mov	r2, r1
 8019ae2:	d006      	beq.n	8019af2 <__sccl+0x4e>
 8019ae4:	2d5d      	cmp	r5, #93	; 0x5d
 8019ae6:	d0f0      	beq.n	8019aca <__sccl+0x26>
 8019ae8:	b90d      	cbnz	r5, 8019aee <__sccl+0x4a>
 8019aea:	4632      	mov	r2, r6
 8019aec:	e7ed      	b.n	8019aca <__sccl+0x26>
 8019aee:	462b      	mov	r3, r5
 8019af0:	e7ef      	b.n	8019ad2 <__sccl+0x2e>
 8019af2:	780e      	ldrb	r6, [r1, #0]
 8019af4:	2e5d      	cmp	r6, #93	; 0x5d
 8019af6:	d0fa      	beq.n	8019aee <__sccl+0x4a>
 8019af8:	42b3      	cmp	r3, r6
 8019afa:	dcf8      	bgt.n	8019aee <__sccl+0x4a>
 8019afc:	3301      	adds	r3, #1
 8019afe:	429e      	cmp	r6, r3
 8019b00:	54c4      	strb	r4, [r0, r3]
 8019b02:	dcfb      	bgt.n	8019afc <__sccl+0x58>
 8019b04:	3102      	adds	r1, #2
 8019b06:	e7e6      	b.n	8019ad6 <__sccl+0x32>

08019b08 <strncmp>:
 8019b08:	b510      	push	{r4, lr}
 8019b0a:	b16a      	cbz	r2, 8019b28 <strncmp+0x20>
 8019b0c:	3901      	subs	r1, #1
 8019b0e:	1884      	adds	r4, r0, r2
 8019b10:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019b14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019b18:	4293      	cmp	r3, r2
 8019b1a:	d103      	bne.n	8019b24 <strncmp+0x1c>
 8019b1c:	42a0      	cmp	r0, r4
 8019b1e:	d001      	beq.n	8019b24 <strncmp+0x1c>
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d1f5      	bne.n	8019b10 <strncmp+0x8>
 8019b24:	1a98      	subs	r0, r3, r2
 8019b26:	bd10      	pop	{r4, pc}
 8019b28:	4610      	mov	r0, r2
 8019b2a:	e7fc      	b.n	8019b26 <strncmp+0x1e>

08019b2c <_strtoul_l.isra.0>:
 8019b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b30:	4680      	mov	r8, r0
 8019b32:	4689      	mov	r9, r1
 8019b34:	4692      	mov	sl, r2
 8019b36:	461e      	mov	r6, r3
 8019b38:	460f      	mov	r7, r1
 8019b3a:	463d      	mov	r5, r7
 8019b3c:	9808      	ldr	r0, [sp, #32]
 8019b3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b42:	f7fe fe4f 	bl	80187e4 <__locale_ctype_ptr_l>
 8019b46:	4420      	add	r0, r4
 8019b48:	7843      	ldrb	r3, [r0, #1]
 8019b4a:	f013 0308 	ands.w	r3, r3, #8
 8019b4e:	d130      	bne.n	8019bb2 <_strtoul_l.isra.0+0x86>
 8019b50:	2c2d      	cmp	r4, #45	; 0x2d
 8019b52:	d130      	bne.n	8019bb6 <_strtoul_l.isra.0+0x8a>
 8019b54:	787c      	ldrb	r4, [r7, #1]
 8019b56:	1cbd      	adds	r5, r7, #2
 8019b58:	2101      	movs	r1, #1
 8019b5a:	2e00      	cmp	r6, #0
 8019b5c:	d05c      	beq.n	8019c18 <_strtoul_l.isra.0+0xec>
 8019b5e:	2e10      	cmp	r6, #16
 8019b60:	d109      	bne.n	8019b76 <_strtoul_l.isra.0+0x4a>
 8019b62:	2c30      	cmp	r4, #48	; 0x30
 8019b64:	d107      	bne.n	8019b76 <_strtoul_l.isra.0+0x4a>
 8019b66:	782b      	ldrb	r3, [r5, #0]
 8019b68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019b6c:	2b58      	cmp	r3, #88	; 0x58
 8019b6e:	d14e      	bne.n	8019c0e <_strtoul_l.isra.0+0xe2>
 8019b70:	786c      	ldrb	r4, [r5, #1]
 8019b72:	2610      	movs	r6, #16
 8019b74:	3502      	adds	r5, #2
 8019b76:	f04f 32ff 	mov.w	r2, #4294967295
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019b80:	fb06 fc02 	mul.w	ip, r6, r2
 8019b84:	ea6f 0c0c 	mvn.w	ip, ip
 8019b88:	4618      	mov	r0, r3
 8019b8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019b8e:	2f09      	cmp	r7, #9
 8019b90:	d817      	bhi.n	8019bc2 <_strtoul_l.isra.0+0x96>
 8019b92:	463c      	mov	r4, r7
 8019b94:	42a6      	cmp	r6, r4
 8019b96:	dd23      	ble.n	8019be0 <_strtoul_l.isra.0+0xb4>
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	db1e      	blt.n	8019bda <_strtoul_l.isra.0+0xae>
 8019b9c:	4282      	cmp	r2, r0
 8019b9e:	d31c      	bcc.n	8019bda <_strtoul_l.isra.0+0xae>
 8019ba0:	d101      	bne.n	8019ba6 <_strtoul_l.isra.0+0x7a>
 8019ba2:	45a4      	cmp	ip, r4
 8019ba4:	db19      	blt.n	8019bda <_strtoul_l.isra.0+0xae>
 8019ba6:	fb00 4006 	mla	r0, r0, r6, r4
 8019baa:	2301      	movs	r3, #1
 8019bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019bb0:	e7eb      	b.n	8019b8a <_strtoul_l.isra.0+0x5e>
 8019bb2:	462f      	mov	r7, r5
 8019bb4:	e7c1      	b.n	8019b3a <_strtoul_l.isra.0+0xe>
 8019bb6:	2c2b      	cmp	r4, #43	; 0x2b
 8019bb8:	bf04      	itt	eq
 8019bba:	1cbd      	addeq	r5, r7, #2
 8019bbc:	787c      	ldrbeq	r4, [r7, #1]
 8019bbe:	4619      	mov	r1, r3
 8019bc0:	e7cb      	b.n	8019b5a <_strtoul_l.isra.0+0x2e>
 8019bc2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019bc6:	2f19      	cmp	r7, #25
 8019bc8:	d801      	bhi.n	8019bce <_strtoul_l.isra.0+0xa2>
 8019bca:	3c37      	subs	r4, #55	; 0x37
 8019bcc:	e7e2      	b.n	8019b94 <_strtoul_l.isra.0+0x68>
 8019bce:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019bd2:	2f19      	cmp	r7, #25
 8019bd4:	d804      	bhi.n	8019be0 <_strtoul_l.isra.0+0xb4>
 8019bd6:	3c57      	subs	r4, #87	; 0x57
 8019bd8:	e7dc      	b.n	8019b94 <_strtoul_l.isra.0+0x68>
 8019bda:	f04f 33ff 	mov.w	r3, #4294967295
 8019bde:	e7e5      	b.n	8019bac <_strtoul_l.isra.0+0x80>
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	da09      	bge.n	8019bf8 <_strtoul_l.isra.0+0xcc>
 8019be4:	2322      	movs	r3, #34	; 0x22
 8019be6:	f8c8 3000 	str.w	r3, [r8]
 8019bea:	f04f 30ff 	mov.w	r0, #4294967295
 8019bee:	f1ba 0f00 	cmp.w	sl, #0
 8019bf2:	d107      	bne.n	8019c04 <_strtoul_l.isra.0+0xd8>
 8019bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bf8:	b101      	cbz	r1, 8019bfc <_strtoul_l.isra.0+0xd0>
 8019bfa:	4240      	negs	r0, r0
 8019bfc:	f1ba 0f00 	cmp.w	sl, #0
 8019c00:	d0f8      	beq.n	8019bf4 <_strtoul_l.isra.0+0xc8>
 8019c02:	b10b      	cbz	r3, 8019c08 <_strtoul_l.isra.0+0xdc>
 8019c04:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c08:	f8ca 9000 	str.w	r9, [sl]
 8019c0c:	e7f2      	b.n	8019bf4 <_strtoul_l.isra.0+0xc8>
 8019c0e:	2430      	movs	r4, #48	; 0x30
 8019c10:	2e00      	cmp	r6, #0
 8019c12:	d1b0      	bne.n	8019b76 <_strtoul_l.isra.0+0x4a>
 8019c14:	2608      	movs	r6, #8
 8019c16:	e7ae      	b.n	8019b76 <_strtoul_l.isra.0+0x4a>
 8019c18:	2c30      	cmp	r4, #48	; 0x30
 8019c1a:	d0a4      	beq.n	8019b66 <_strtoul_l.isra.0+0x3a>
 8019c1c:	260a      	movs	r6, #10
 8019c1e:	e7aa      	b.n	8019b76 <_strtoul_l.isra.0+0x4a>

08019c20 <_strtoul_r>:
 8019c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c22:	4c06      	ldr	r4, [pc, #24]	; (8019c3c <_strtoul_r+0x1c>)
 8019c24:	4d06      	ldr	r5, [pc, #24]	; (8019c40 <_strtoul_r+0x20>)
 8019c26:	6824      	ldr	r4, [r4, #0]
 8019c28:	6a24      	ldr	r4, [r4, #32]
 8019c2a:	2c00      	cmp	r4, #0
 8019c2c:	bf08      	it	eq
 8019c2e:	462c      	moveq	r4, r5
 8019c30:	9400      	str	r4, [sp, #0]
 8019c32:	f7ff ff7b 	bl	8019b2c <_strtoul_l.isra.0>
 8019c36:	b003      	add	sp, #12
 8019c38:	bd30      	pop	{r4, r5, pc}
 8019c3a:	bf00      	nop
 8019c3c:	2000000c 	.word	0x2000000c
 8019c40:	20000070 	.word	0x20000070

08019c44 <__submore>:
 8019c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c48:	460c      	mov	r4, r1
 8019c4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c50:	4299      	cmp	r1, r3
 8019c52:	d11d      	bne.n	8019c90 <__submore+0x4c>
 8019c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019c58:	f7ff fa66 	bl	8019128 <_malloc_r>
 8019c5c:	b918      	cbnz	r0, 8019c66 <__submore+0x22>
 8019c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019c6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019c70:	6360      	str	r0, [r4, #52]	; 0x34
 8019c72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019c76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019c7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019c7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019c82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019c86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019c8a:	6020      	str	r0, [r4, #0]
 8019c8c:	2000      	movs	r0, #0
 8019c8e:	e7e8      	b.n	8019c62 <__submore+0x1e>
 8019c90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019c92:	0077      	lsls	r7, r6, #1
 8019c94:	463a      	mov	r2, r7
 8019c96:	f000 f837 	bl	8019d08 <_realloc_r>
 8019c9a:	4605      	mov	r5, r0
 8019c9c:	2800      	cmp	r0, #0
 8019c9e:	d0de      	beq.n	8019c5e <__submore+0x1a>
 8019ca0:	eb00 0806 	add.w	r8, r0, r6
 8019ca4:	4601      	mov	r1, r0
 8019ca6:	4632      	mov	r2, r6
 8019ca8:	4640      	mov	r0, r8
 8019caa:	f7fe fdd7 	bl	801885c <memcpy>
 8019cae:	f8c4 8000 	str.w	r8, [r4]
 8019cb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019cb6:	e7e9      	b.n	8019c8c <__submore+0x48>

08019cb8 <__ascii_wctomb>:
 8019cb8:	b149      	cbz	r1, 8019cce <__ascii_wctomb+0x16>
 8019cba:	2aff      	cmp	r2, #255	; 0xff
 8019cbc:	bf85      	ittet	hi
 8019cbe:	238a      	movhi	r3, #138	; 0x8a
 8019cc0:	6003      	strhi	r3, [r0, #0]
 8019cc2:	700a      	strbls	r2, [r1, #0]
 8019cc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8019cc8:	bf98      	it	ls
 8019cca:	2001      	movls	r0, #1
 8019ccc:	4770      	bx	lr
 8019cce:	4608      	mov	r0, r1
 8019cd0:	4770      	bx	lr

08019cd2 <memmove>:
 8019cd2:	4288      	cmp	r0, r1
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	eb01 0302 	add.w	r3, r1, r2
 8019cda:	d807      	bhi.n	8019cec <memmove+0x1a>
 8019cdc:	1e42      	subs	r2, r0, #1
 8019cde:	4299      	cmp	r1, r3
 8019ce0:	d00a      	beq.n	8019cf8 <memmove+0x26>
 8019ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ce6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019cea:	e7f8      	b.n	8019cde <memmove+0xc>
 8019cec:	4283      	cmp	r3, r0
 8019cee:	d9f5      	bls.n	8019cdc <memmove+0xa>
 8019cf0:	1881      	adds	r1, r0, r2
 8019cf2:	1ad2      	subs	r2, r2, r3
 8019cf4:	42d3      	cmn	r3, r2
 8019cf6:	d100      	bne.n	8019cfa <memmove+0x28>
 8019cf8:	bd10      	pop	{r4, pc}
 8019cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019cfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019d02:	e7f7      	b.n	8019cf4 <memmove+0x22>

08019d04 <__malloc_lock>:
 8019d04:	4770      	bx	lr

08019d06 <__malloc_unlock>:
 8019d06:	4770      	bx	lr

08019d08 <_realloc_r>:
 8019d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d0a:	4607      	mov	r7, r0
 8019d0c:	4614      	mov	r4, r2
 8019d0e:	460e      	mov	r6, r1
 8019d10:	b921      	cbnz	r1, 8019d1c <_realloc_r+0x14>
 8019d12:	4611      	mov	r1, r2
 8019d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d18:	f7ff ba06 	b.w	8019128 <_malloc_r>
 8019d1c:	b922      	cbnz	r2, 8019d28 <_realloc_r+0x20>
 8019d1e:	f7ff f9b5 	bl	801908c <_free_r>
 8019d22:	4625      	mov	r5, r4
 8019d24:	4628      	mov	r0, r5
 8019d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d28:	f000 f814 	bl	8019d54 <_malloc_usable_size_r>
 8019d2c:	42a0      	cmp	r0, r4
 8019d2e:	d20f      	bcs.n	8019d50 <_realloc_r+0x48>
 8019d30:	4621      	mov	r1, r4
 8019d32:	4638      	mov	r0, r7
 8019d34:	f7ff f9f8 	bl	8019128 <_malloc_r>
 8019d38:	4605      	mov	r5, r0
 8019d3a:	2800      	cmp	r0, #0
 8019d3c:	d0f2      	beq.n	8019d24 <_realloc_r+0x1c>
 8019d3e:	4631      	mov	r1, r6
 8019d40:	4622      	mov	r2, r4
 8019d42:	f7fe fd8b 	bl	801885c <memcpy>
 8019d46:	4631      	mov	r1, r6
 8019d48:	4638      	mov	r0, r7
 8019d4a:	f7ff f99f 	bl	801908c <_free_r>
 8019d4e:	e7e9      	b.n	8019d24 <_realloc_r+0x1c>
 8019d50:	4635      	mov	r5, r6
 8019d52:	e7e7      	b.n	8019d24 <_realloc_r+0x1c>

08019d54 <_malloc_usable_size_r>:
 8019d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d58:	1f18      	subs	r0, r3, #4
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	bfbc      	itt	lt
 8019d5e:	580b      	ldrlt	r3, [r1, r0]
 8019d60:	18c0      	addlt	r0, r0, r3
 8019d62:	4770      	bx	lr

08019d64 <_init>:
 8019d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d66:	bf00      	nop
 8019d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d6a:	bc08      	pop	{r3}
 8019d6c:	469e      	mov	lr, r3
 8019d6e:	4770      	bx	lr

08019d70 <_fini>:
 8019d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d72:	bf00      	nop
 8019d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d76:	bc08      	pop	{r3}
 8019d78:	469e      	mov	lr, r3
 8019d7a:	4770      	bx	lr
